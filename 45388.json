{"path":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractPagedMutable#get(long).mjava","commits":[{"id":"c8ee441d3e61e4669e10566a8d028a41333642b7","date":1371579547,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractPagedMutable#get(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PagedGrowableWriter#get(long).mjava","sourceNew":"  /** Get value at <code>index</code>. */\n  public final long get(long index) {\n    assert index >= 0 && index < size;\n    final int pageIndex = pageIndex(index);\n    final int indexInPage = indexInPage(index);\n    return subMutables[pageIndex].get(indexInPage);\n  }\n\n","sourceOld":"  /** Get value at <code>index</code>. */\n  public long get(long index) {\n    assert index >= 0 && index < size;\n    final int pageIndex = pageIndex(index);\n    final int indexInPage = indexInPage(index);\n    return subWriters[pageIndex].get(indexInPage);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractPagedMutable#get(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Get value at <code>index</code>. */\n  public final long get(long index) {\n    assert index >= 0 && index < size;\n    final int pageIndex = pageIndex(index);\n    final int indexInPage = indexInPage(index);\n    return subMutables[pageIndex].get(indexInPage);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d50d971859a3c7841c17117b0aac14e733441ebf","date":1384264257,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractPagedMutable#get(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractPagedMutable#get(long).mjava","sourceNew":"  @Override\n  public final long get(long index) {\n    assert index >= 0 && index < size;\n    final int pageIndex = pageIndex(index);\n    final int indexInPage = indexInPage(index);\n    return subMutables[pageIndex].get(indexInPage);\n  }\n\n","sourceOld":"  /** Get value at <code>index</code>. */\n  public final long get(long index) {\n    assert index >= 0 && index < size;\n    final int pageIndex = pageIndex(index);\n    final int indexInPage = indexInPage(index);\n    return subMutables[pageIndex].get(indexInPage);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractPagedMutable#get(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractPagedMutable#get(long).mjava","sourceNew":"  @Override\n  public final long get(long index) {\n    assert index >= 0 && index < size: \"index=\" + index + \" size=\" + size;\n    final int pageIndex = pageIndex(index);\n    final int indexInPage = indexInPage(index);\n    return subMutables[pageIndex].get(indexInPage);\n  }\n\n","sourceOld":"  @Override\n  public final long get(long index) {\n    assert index >= 0 && index < size;\n    final int pageIndex = pageIndex(index);\n    final int indexInPage = indexInPage(index);\n    return subMutables[pageIndex].get(indexInPage);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractPagedMutable#get(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractPagedMutable#get(long).mjava","sourceNew":"  @Override\n  public final long get(long index) {\n    assert index >= 0 && index < size: \"index=\" + index + \" size=\" + size;\n    final int pageIndex = pageIndex(index);\n    final int indexInPage = indexInPage(index);\n    return subMutables[pageIndex].get(indexInPage);\n  }\n\n","sourceOld":"  @Override\n  public final long get(long index) {\n    assert index >= 0 && index < size;\n    final int pageIndex = pageIndex(index);\n    final int indexInPage = indexInPage(index);\n    return subMutables[pageIndex].get(indexInPage);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractPagedMutable#get(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractPagedMutable#get(long).mjava","sourceNew":"  @Override\n  public final long get(long index) {\n    assert index >= 0 && index < size: \"index=\" + index + \" size=\" + size;\n    final int pageIndex = pageIndex(index);\n    final int indexInPage = indexInPage(index);\n    return subMutables[pageIndex].get(indexInPage);\n  }\n\n","sourceOld":"  @Override\n  public final long get(long index) {\n    assert index >= 0 && index < size;\n    final int pageIndex = pageIndex(index);\n    final int indexInPage = indexInPage(index);\n    return subMutables[pageIndex].get(indexInPage);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d50d971859a3c7841c17117b0aac14e733441ebf":["c8ee441d3e61e4669e10566a8d028a41333642b7"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8ee441d3e61e4669e10566a8d028a41333642b7"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["d50d971859a3c7841c17117b0aac14e733441ebf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8ee441d3e61e4669e10566a8d028a41333642b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["d50d971859a3c7841c17117b0aac14e733441ebf","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["d50d971859a3c7841c17117b0aac14e733441ebf","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"d50d971859a3c7841c17117b0aac14e733441ebf":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c8ee441d3e61e4669e10566a8d028a41333642b7"],"c8ee441d3e61e4669e10566a8d028a41333642b7":["d50d971859a3c7841c17117b0aac14e733441ebf","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}