{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestDimensionalQueries#rectContainsPoint(GeoRect,double,double).mjava","commits":[{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDimensionalQueries#rectContainsPoint(GeoRect,double,double).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#rectContainsPoint(GeoRect,double,double).mjava","sourceNew":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n\n    assert Double.isNaN(pointLat) == false;\n\n    int rectLatMinEnc = DimensionalLatLonField.encodeLat(rect.minLat);\n    int rectLatMaxEnc = DimensionalLatLonField.encodeLat(rect.maxLat);\n    int rectLonMinEnc = DimensionalLatLonField.encodeLon(rect.minLon);\n    int rectLonMaxEnc = DimensionalLatLonField.encodeLon(rect.maxLon);\n\n    int pointLatEnc = DimensionalLatLonField.encodeLat(pointLat);\n    int pointLonEnc = DimensionalLatLonField.encodeLon(pointLon);\n\n    if (rect.minLon < rect.maxLon) {\n      return pointLatEnc >= rectLatMinEnc &&\n        pointLatEnc <= rectLatMaxEnc &&\n        pointLonEnc >= rectLonMinEnc &&\n        pointLonEnc <= rectLonMaxEnc;\n    } else {\n      // Rect crosses dateline:\n      return pointLatEnc >= rectLatMinEnc &&\n        pointLatEnc <= rectLatMaxEnc &&\n        (pointLonEnc >= rectLonMinEnc ||\n         pointLonEnc <= rectLonMaxEnc);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n\n    assert Double.isNaN(pointLat) == false;\n\n    int rectLatMinEnc = BKDTreeWriter.encodeLat(rect.minLat);\n    int rectLatMaxEnc = BKDTreeWriter.encodeLat(rect.maxLat);\n    int rectLonMinEnc = BKDTreeWriter.encodeLon(rect.minLon);\n    int rectLonMaxEnc = BKDTreeWriter.encodeLon(rect.maxLon);\n\n    int pointLatEnc = BKDTreeWriter.encodeLat(pointLat);\n    int pointLonEnc = BKDTreeWriter.encodeLon(pointLon);\n\n    if (rect.minLon < rect.maxLon) {\n      return pointLatEnc >= rectLatMinEnc &&\n        pointLatEnc < rectLatMaxEnc &&\n        pointLonEnc >= rectLonMinEnc &&\n        pointLonEnc < rectLonMaxEnc;\n    } else {\n      // Rect crosses dateline:\n      return pointLatEnc >= rectLatMinEnc &&\n        pointLatEnc < rectLatMaxEnc &&\n        (pointLonEnc >= rectLonMinEnc ||\n         pointLonEnc < rectLonMaxEnc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#rectContainsPoint(GeoRect,double,double).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDimensionalQueries#rectContainsPoint(GeoRect,double,double).mjava","sourceNew":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n\n    assert Double.isNaN(pointLat) == false;\n\n    int rectLatMinEnc = LatLonPoint.encodeLat(rect.minLat);\n    int rectLatMaxEnc = LatLonPoint.encodeLat(rect.maxLat);\n    int rectLonMinEnc = LatLonPoint.encodeLon(rect.minLon);\n    int rectLonMaxEnc = LatLonPoint.encodeLon(rect.maxLon);\n\n    int pointLatEnc = LatLonPoint.encodeLat(pointLat);\n    int pointLonEnc = LatLonPoint.encodeLon(pointLon);\n\n    if (rect.minLon < rect.maxLon) {\n      return pointLatEnc >= rectLatMinEnc &&\n        pointLatEnc <= rectLatMaxEnc &&\n        pointLonEnc >= rectLonMinEnc &&\n        pointLonEnc <= rectLonMaxEnc;\n    } else {\n      // Rect crosses dateline:\n      return pointLatEnc >= rectLatMinEnc &&\n        pointLatEnc <= rectLatMaxEnc &&\n        (pointLonEnc >= rectLonMinEnc ||\n         pointLonEnc <= rectLonMaxEnc);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n\n    assert Double.isNaN(pointLat) == false;\n\n    int rectLatMinEnc = DimensionalLatLonField.encodeLat(rect.minLat);\n    int rectLatMaxEnc = DimensionalLatLonField.encodeLat(rect.maxLat);\n    int rectLonMinEnc = DimensionalLatLonField.encodeLon(rect.minLon);\n    int rectLonMaxEnc = DimensionalLatLonField.encodeLon(rect.maxLon);\n\n    int pointLatEnc = DimensionalLatLonField.encodeLat(pointLat);\n    int pointLonEnc = DimensionalLatLonField.encodeLon(pointLon);\n\n    if (rect.minLon < rect.maxLon) {\n      return pointLatEnc >= rectLatMinEnc &&\n        pointLatEnc <= rectLatMaxEnc &&\n        pointLonEnc >= rectLonMinEnc &&\n        pointLonEnc <= rectLonMaxEnc;\n    } else {\n      // Rect crosses dateline:\n      return pointLatEnc >= rectLatMinEnc &&\n        pointLatEnc <= rectLatMaxEnc &&\n        (pointLonEnc >= rectLonMinEnc ||\n         pointLonEnc <= rectLonMaxEnc);\n    }\n  }\n\n","bugFix":null,"bugIntro":["3be488b3c9121cfbcdc017c60ad93550b640fb02"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}