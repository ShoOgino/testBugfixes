{"path":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","commits":[{"id":"e847ef0151948fe67f4f07d70d7730578444ac6f","date":1374237791,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","pathOld":"/dev/null","sourceNew":"  // Currently it's impossible to end up with a segment with all documents\n  // deleted, as such segments are dropped. Still, to validate that addIndexes\n  // works with such segments, or readers that end up in such state, we fake an\n  // all deleted segment.\n  public void testFakeAllDeleted() throws Exception {\n    Directory src = newDirectory(), dest = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), src);\n    w.addDocument(new Document());\n    IndexReader allDeletedReader = new FilterAtomicReader(w.getReader().leaves().get(0).reader()) {\n      @Override\n      public Bits getLiveDocs() {\n        return new Bits() {\n          @Override public int length() { return 1; }\n          @Override public boolean get(int index) { return false; }\n        };\n      }\n      @Override public boolean hasDeletions() { return true; }\n      @Override public int numDocs() { return 0; }\n    };\n    w.close();\n    \n    w = new RandomIndexWriter(random(), dest);\n    w.addIndexes(allDeletedReader);\n    w.close();\n    DirectoryReader dr = DirectoryReader.open(src);\n    for (AtomicReaderContext ctx : dr.leaves()) {\n      assertTrue(\"empty segments should be dropped by addIndexes\", ctx.reader().maxDoc() > 0);\n    }\n    dr.close();\n    allDeletedReader.close();\n    src.close();\n    dest.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["505bff044e47a553f461b6f4484d1d08faf4ac85","b04b25aea22398b43303d426d84754145251ff77"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","sourceNew":"  // Currently it's impossible to end up with a segment with all documents\n  // deleted, as such segments are dropped. Still, to validate that addIndexes\n  // works with such segments, or readers that end up in such state, we fake an\n  // all deleted segment.\n  public void testFakeAllDeleted() throws Exception {\n    Directory src = newDirectory(), dest = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), src);\n    w.addDocument(new Document());\n    IndexReader allDeletedReader = new FilterAtomicReader(w.getReader().leaves().get(0).reader()) {\n      @Override\n      public Bits getLiveDocs() {\n        return new Bits() {\n          @Override public int length() { return 1; }\n          @Override public boolean get(int index) { return false; }\n        };\n      }\n      @Override public boolean hasDeletions() { return true; }\n      @Override public int numDocs() { return 0; }\n    };\n    w.close();\n    \n    w = new RandomIndexWriter(random(), dest);\n    w.addIndexes(allDeletedReader);\n    w.close();\n    DirectoryReader dr = DirectoryReader.open(src);\n    for (AtomicReaderContext ctx : dr.leaves()) {\n      assertTrue(\"empty segments should be dropped by addIndexes\", ctx.reader().maxDoc() > 0);\n    }\n    dr.close();\n    allDeletedReader.close();\n    src.close();\n    dest.close();\n  }\n\n","sourceOld":"  // Currently it's impossible to end up with a segment with all documents\n  // deleted, as such segments are dropped. Still, to validate that addIndexes\n  // works with such segments, or readers that end up in such state, we fake an\n  // all deleted segment.\n  public void testFakeAllDeleted() throws Exception {\n    Directory src = newDirectory(), dest = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), src);\n    w.addDocument(new Document());\n    IndexReader allDeletedReader = new FilterAtomicReader(w.getReader().leaves().get(0).reader()) {\n      @Override\n      public Bits getLiveDocs() {\n        return new Bits() {\n          @Override public int length() { return 1; }\n          @Override public boolean get(int index) { return false; }\n        };\n      }\n      @Override public boolean hasDeletions() { return true; }\n      @Override public int numDocs() { return 0; }\n    };\n    w.close();\n    \n    w = new RandomIndexWriter(random(), dest);\n    w.addIndexes(allDeletedReader);\n    w.close();\n    DirectoryReader dr = DirectoryReader.open(src);\n    for (AtomicReaderContext ctx : dr.leaves()) {\n      assertTrue(\"empty segments should be dropped by addIndexes\", ctx.reader().maxDoc() > 0);\n    }\n    dr.close();\n    allDeletedReader.close();\n    src.close();\n    dest.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","pathOld":"/dev/null","sourceNew":"  // Currently it's impossible to end up with a segment with all documents\n  // deleted, as such segments are dropped. Still, to validate that addIndexes\n  // works with such segments, or readers that end up in such state, we fake an\n  // all deleted segment.\n  public void testFakeAllDeleted() throws Exception {\n    Directory src = newDirectory(), dest = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), src);\n    w.addDocument(new Document());\n    IndexReader allDeletedReader = new FilterAtomicReader(w.getReader().leaves().get(0).reader()) {\n      @Override\n      public Bits getLiveDocs() {\n        return new Bits() {\n          @Override public int length() { return 1; }\n          @Override public boolean get(int index) { return false; }\n        };\n      }\n      @Override public boolean hasDeletions() { return true; }\n      @Override public int numDocs() { return 0; }\n    };\n    w.close();\n    \n    w = new RandomIndexWriter(random(), dest);\n    w.addIndexes(allDeletedReader);\n    w.close();\n    DirectoryReader dr = DirectoryReader.open(src);\n    for (AtomicReaderContext ctx : dr.leaves()) {\n      assertTrue(\"empty segments should be dropped by addIndexes\", ctx.reader().maxDoc() > 0);\n    }\n    dr.close();\n    allDeletedReader.close();\n    src.close();\n    dest.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9360f4c41623a3bf56983cd6cdd3de80eef361d0","date":1376401555,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","sourceNew":"  // Currently it's impossible to end up with a segment with all documents\n  // deleted, as such segments are dropped. Still, to validate that addIndexes\n  // works with such segments, or readers that end up in such state, we fake an\n  // all deleted segment.\n  public void testFakeAllDeleted() throws Exception {\n    Directory src = newDirectory(), dest = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), src);\n    w.addDocument(new Document());\n    IndexReader allDeletedReader = new FilterAtomicReader(w.getReader().leaves().get(0).reader()) {\n      @Override\n      public Bits getLiveDocs() {\n        return new Bits.MatchNoBits(in.maxDoc());\n      }\n      @Override public boolean hasDeletions() { return true; }\n      @Override public int numDocs() { return 0; }\n    };\n    w.close();\n    \n    w = new RandomIndexWriter(random(), dest);\n    w.addIndexes(allDeletedReader);\n    w.close();\n    DirectoryReader dr = DirectoryReader.open(src);\n    for (AtomicReaderContext ctx : dr.leaves()) {\n      assertTrue(\"empty segments should be dropped by addIndexes\", ctx.reader().maxDoc() > 0);\n    }\n    dr.close();\n    allDeletedReader.close();\n    src.close();\n    dest.close();\n  }\n\n","sourceOld":"  // Currently it's impossible to end up with a segment with all documents\n  // deleted, as such segments are dropped. Still, to validate that addIndexes\n  // works with such segments, or readers that end up in such state, we fake an\n  // all deleted segment.\n  public void testFakeAllDeleted() throws Exception {\n    Directory src = newDirectory(), dest = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), src);\n    w.addDocument(new Document());\n    IndexReader allDeletedReader = new FilterAtomicReader(w.getReader().leaves().get(0).reader()) {\n      @Override\n      public Bits getLiveDocs() {\n        return new Bits() {\n          @Override public int length() { return 1; }\n          @Override public boolean get(int index) { return false; }\n        };\n      }\n      @Override public boolean hasDeletions() { return true; }\n      @Override public int numDocs() { return 0; }\n    };\n    w.close();\n    \n    w = new RandomIndexWriter(random(), dest);\n    w.addIndexes(allDeletedReader);\n    w.close();\n    DirectoryReader dr = DirectoryReader.open(src);\n    for (AtomicReaderContext ctx : dr.leaves()) {\n      assertTrue(\"empty segments should be dropped by addIndexes\", ctx.reader().maxDoc() > 0);\n    }\n    dr.close();\n    allDeletedReader.close();\n    src.close();\n    dest.close();\n  }\n\n","bugFix":null,"bugIntro":["b04b25aea22398b43303d426d84754145251ff77"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b04b25aea22398b43303d426d84754145251ff77","date":1376550085,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","sourceNew":"  // Currently it's impossible to end up with a segment with all documents\n  // deleted, as such segments are dropped. Still, to validate that addIndexes\n  // works with such segments, or readers that end up in such state, we fake an\n  // all deleted segment.\n  public void testFakeAllDeleted() throws Exception {\n    Directory src = newDirectory(), dest = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), src);\n    w.addDocument(new Document());\n    IndexReader allDeletedReader = new AllDeletedFilterReader(w.getReader().leaves().get(0).reader());\n    w.close();\n    \n    w = new RandomIndexWriter(random(), dest);\n    w.addIndexes(allDeletedReader);\n    w.close();\n    DirectoryReader dr = DirectoryReader.open(src);\n    for (AtomicReaderContext ctx : dr.leaves()) {\n      assertTrue(\"empty segments should be dropped by addIndexes\", ctx.reader().maxDoc() > 0);\n    }\n    dr.close();\n    allDeletedReader.close();\n    src.close();\n    dest.close();\n  }\n\n","sourceOld":"  // Currently it's impossible to end up with a segment with all documents\n  // deleted, as such segments are dropped. Still, to validate that addIndexes\n  // works with such segments, or readers that end up in such state, we fake an\n  // all deleted segment.\n  public void testFakeAllDeleted() throws Exception {\n    Directory src = newDirectory(), dest = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), src);\n    w.addDocument(new Document());\n    IndexReader allDeletedReader = new FilterAtomicReader(w.getReader().leaves().get(0).reader()) {\n      @Override\n      public Bits getLiveDocs() {\n        return new Bits.MatchNoBits(in.maxDoc());\n      }\n      @Override public boolean hasDeletions() { return true; }\n      @Override public int numDocs() { return 0; }\n    };\n    w.close();\n    \n    w = new RandomIndexWriter(random(), dest);\n    w.addIndexes(allDeletedReader);\n    w.close();\n    DirectoryReader dr = DirectoryReader.open(src);\n    for (AtomicReaderContext ctx : dr.leaves()) {\n      assertTrue(\"empty segments should be dropped by addIndexes\", ctx.reader().maxDoc() > 0);\n    }\n    dr.close();\n    allDeletedReader.close();\n    src.close();\n    dest.close();\n  }\n\n","bugFix":["e847ef0151948fe67f4f07d70d7730578444ac6f","9360f4c41623a3bf56983cd6cdd3de80eef361d0"],"bugIntro":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","sourceNew":"  // Currently it's impossible to end up with a segment with all documents\n  // deleted, as such segments are dropped. Still, to validate that addIndexes\n  // works with such segments, or readers that end up in such state, we fake an\n  // all deleted segment.\n  public void testFakeAllDeleted() throws Exception {\n    Directory src = newDirectory(), dest = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), src);\n    w.addDocument(new Document());\n    IndexReader allDeletedReader = new AllDeletedFilterReader(w.getReader().leaves().get(0).reader());\n    w.close();\n    \n    w = new RandomIndexWriter(random(), dest);\n    w.addIndexes(allDeletedReader);\n    w.close();\n    DirectoryReader dr = DirectoryReader.open(src);\n    for (AtomicReaderContext ctx : dr.leaves()) {\n      assertTrue(\"empty segments should be dropped by addIndexes\", ctx.reader().maxDoc() > 0);\n    }\n    dr.close();\n    allDeletedReader.close();\n    src.close();\n    dest.close();\n  }\n\n","sourceOld":"  // Currently it's impossible to end up with a segment with all documents\n  // deleted, as such segments are dropped. Still, to validate that addIndexes\n  // works with such segments, or readers that end up in such state, we fake an\n  // all deleted segment.\n  public void testFakeAllDeleted() throws Exception {\n    Directory src = newDirectory(), dest = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), src);\n    w.addDocument(new Document());\n    IndexReader allDeletedReader = new FilterAtomicReader(w.getReader().leaves().get(0).reader()) {\n      @Override\n      public Bits getLiveDocs() {\n        return new Bits() {\n          @Override public int length() { return 1; }\n          @Override public boolean get(int index) { return false; }\n        };\n      }\n      @Override public boolean hasDeletions() { return true; }\n      @Override public int numDocs() { return 0; }\n    };\n    w.close();\n    \n    w = new RandomIndexWriter(random(), dest);\n    w.addIndexes(allDeletedReader);\n    w.close();\n    DirectoryReader dr = DirectoryReader.open(src);\n    for (AtomicReaderContext ctx : dr.leaves()) {\n      assertTrue(\"empty segments should be dropped by addIndexes\", ctx.reader().maxDoc() > 0);\n    }\n    dr.close();\n    allDeletedReader.close();\n    src.close();\n    dest.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","sourceNew":"  // Currently it's impossible to end up with a segment with all documents\n  // deleted, as such segments are dropped. Still, to validate that addIndexes\n  // works with such segments, or readers that end up in such state, we fake an\n  // all deleted segment.\n  public void testFakeAllDeleted() throws Exception {\n    Directory src = newDirectory(), dest = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), src);\n    w.addDocument(new Document());\n    IndexReader allDeletedReader = new AllDeletedFilterReader(w.getReader().leaves().get(0).reader());\n    w.shutdown();\n    \n    w = new RandomIndexWriter(random(), dest);\n    w.addIndexes(allDeletedReader);\n    w.shutdown();\n    DirectoryReader dr = DirectoryReader.open(src);\n    for (AtomicReaderContext ctx : dr.leaves()) {\n      assertTrue(\"empty segments should be dropped by addIndexes\", ctx.reader().maxDoc() > 0);\n    }\n    dr.close();\n    allDeletedReader.close();\n    src.close();\n    dest.close();\n  }\n\n","sourceOld":"  // Currently it's impossible to end up with a segment with all documents\n  // deleted, as such segments are dropped. Still, to validate that addIndexes\n  // works with such segments, or readers that end up in such state, we fake an\n  // all deleted segment.\n  public void testFakeAllDeleted() throws Exception {\n    Directory src = newDirectory(), dest = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), src);\n    w.addDocument(new Document());\n    IndexReader allDeletedReader = new AllDeletedFilterReader(w.getReader().leaves().get(0).reader());\n    w.close();\n    \n    w = new RandomIndexWriter(random(), dest);\n    w.addIndexes(allDeletedReader);\n    w.close();\n    DirectoryReader dr = DirectoryReader.open(src);\n    for (AtomicReaderContext ctx : dr.leaves()) {\n      assertTrue(\"empty segments should be dropped by addIndexes\", ctx.reader().maxDoc() > 0);\n    }\n    dr.close();\n    allDeletedReader.close();\n    src.close();\n    dest.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","sourceNew":"  // Currently it's impossible to end up with a segment with all documents\n  // deleted, as such segments are dropped. Still, to validate that addIndexes\n  // works with such segments, or readers that end up in such state, we fake an\n  // all deleted segment.\n  public void testFakeAllDeleted() throws Exception {\n    Directory src = newDirectory(), dest = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), src);\n    w.addDocument(new Document());\n    IndexReader allDeletedReader = new AllDeletedFilterReader(w.getReader().leaves().get(0).reader());\n    w.close();\n    \n    w = new RandomIndexWriter(random(), dest);\n    w.addIndexes(allDeletedReader);\n    w.close();\n    DirectoryReader dr = DirectoryReader.open(src);\n    for (AtomicReaderContext ctx : dr.leaves()) {\n      assertTrue(\"empty segments should be dropped by addIndexes\", ctx.reader().maxDoc() > 0);\n    }\n    dr.close();\n    allDeletedReader.close();\n    src.close();\n    dest.close();\n  }\n\n","sourceOld":"  // Currently it's impossible to end up with a segment with all documents\n  // deleted, as such segments are dropped. Still, to validate that addIndexes\n  // works with such segments, or readers that end up in such state, we fake an\n  // all deleted segment.\n  public void testFakeAllDeleted() throws Exception {\n    Directory src = newDirectory(), dest = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), src);\n    w.addDocument(new Document());\n    IndexReader allDeletedReader = new AllDeletedFilterReader(w.getReader().leaves().get(0).reader());\n    w.shutdown();\n    \n    w = new RandomIndexWriter(random(), dest);\n    w.addIndexes(allDeletedReader);\n    w.shutdown();\n    DirectoryReader dr = DirectoryReader.open(src);\n    for (AtomicReaderContext ctx : dr.leaves()) {\n      assertTrue(\"empty segments should be dropped by addIndexes\", ctx.reader().maxDoc() > 0);\n    }\n    dr.close();\n    allDeletedReader.close();\n    src.close();\n    dest.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","sourceNew":"  // Currently it's impossible to end up with a segment with all documents\n  // deleted, as such segments are dropped. Still, to validate that addIndexes\n  // works with such segments, or readers that end up in such state, we fake an\n  // all deleted segment.\n  public void testFakeAllDeleted() throws Exception {\n    Directory src = newDirectory(), dest = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), src);\n    w.addDocument(new Document());\n    IndexReader allDeletedReader = new AllDeletedFilterReader(w.getReader().leaves().get(0).reader());\n    w.close();\n    \n    w = new RandomIndexWriter(random(), dest);\n    w.addIndexes(allDeletedReader);\n    w.close();\n    DirectoryReader dr = DirectoryReader.open(src);\n    for (LeafReaderContext ctx : dr.leaves()) {\n      assertTrue(\"empty segments should be dropped by addIndexes\", ctx.reader().maxDoc() > 0);\n    }\n    dr.close();\n    allDeletedReader.close();\n    src.close();\n    dest.close();\n  }\n\n","sourceOld":"  // Currently it's impossible to end up with a segment with all documents\n  // deleted, as such segments are dropped. Still, to validate that addIndexes\n  // works with such segments, or readers that end up in such state, we fake an\n  // all deleted segment.\n  public void testFakeAllDeleted() throws Exception {\n    Directory src = newDirectory(), dest = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), src);\n    w.addDocument(new Document());\n    IndexReader allDeletedReader = new AllDeletedFilterReader(w.getReader().leaves().get(0).reader());\n    w.close();\n    \n    w = new RandomIndexWriter(random(), dest);\n    w.addIndexes(allDeletedReader);\n    w.close();\n    DirectoryReader dr = DirectoryReader.open(src);\n    for (AtomicReaderContext ctx : dr.leaves()) {\n      assertTrue(\"empty segments should be dropped by addIndexes\", ctx.reader().maxDoc() > 0);\n    }\n    dr.close();\n    allDeletedReader.close();\n    src.close();\n    dest.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","date":1420599177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","sourceNew":"  // Currently it's impossible to end up with a segment with all documents\n  // deleted, as such segments are dropped. Still, to validate that addIndexes\n  // works with such segments, or readers that end up in such state, we fake an\n  // all deleted segment.\n  public void testFakeAllDeleted() throws Exception {\n    Directory src = newDirectory(), dest = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), src);\n    w.addDocument(new Document());\n    LeafReader allDeletedReader = new AllDeletedFilterReader(w.getReader().leaves().get(0).reader());\n    w.close();\n    \n    w = new RandomIndexWriter(random(), dest);\n    w.addIndexes(allDeletedReader);\n    w.close();\n    DirectoryReader dr = DirectoryReader.open(src);\n    for (LeafReaderContext ctx : dr.leaves()) {\n      assertTrue(\"empty segments should be dropped by addIndexes\", ctx.reader().maxDoc() > 0);\n    }\n    dr.close();\n    allDeletedReader.close();\n    src.close();\n    dest.close();\n  }\n\n","sourceOld":"  // Currently it's impossible to end up with a segment with all documents\n  // deleted, as such segments are dropped. Still, to validate that addIndexes\n  // works with such segments, or readers that end up in such state, we fake an\n  // all deleted segment.\n  public void testFakeAllDeleted() throws Exception {\n    Directory src = newDirectory(), dest = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), src);\n    w.addDocument(new Document());\n    IndexReader allDeletedReader = new AllDeletedFilterReader(w.getReader().leaves().get(0).reader());\n    w.close();\n    \n    w = new RandomIndexWriter(random(), dest);\n    w.addIndexes(allDeletedReader);\n    w.close();\n    DirectoryReader dr = DirectoryReader.open(src);\n    for (LeafReaderContext ctx : dr.leaves()) {\n      assertTrue(\"empty segments should be dropped by addIndexes\", ctx.reader().maxDoc() > 0);\n    }\n    dr.close();\n    allDeletedReader.close();\n    src.close();\n    dest.close();\n  }\n\n","bugFix":["b04b25aea22398b43303d426d84754145251ff77"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"505bff044e47a553f461b6f4484d1d08faf4ac85","date":1420728783,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFakeAllDeleted().mjava","sourceNew":"  // Currently it's impossible to end up with a segment with all documents\n  // deleted, as such segments are dropped. Still, to validate that addIndexes\n  // works with such segments, or readers that end up in such state, we fake an\n  // all deleted segment.\n  public void testFakeAllDeleted() throws Exception {\n    Directory src = newDirectory(), dest = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), src);\n    w.addDocument(new Document());\n    LeafReader allDeletedReader = new AllDeletedFilterReader(w.getReader().leaves().get(0).reader());\n    w.close();\n    \n    w = new RandomIndexWriter(random(), dest);\n    w.addIndexes(SlowCodecReaderWrapper.wrap(allDeletedReader));\n    w.close();\n    DirectoryReader dr = DirectoryReader.open(src);\n    for (LeafReaderContext ctx : dr.leaves()) {\n      assertTrue(\"empty segments should be dropped by addIndexes\", ctx.reader().maxDoc() > 0);\n    }\n    dr.close();\n    allDeletedReader.close();\n    src.close();\n    dest.close();\n  }\n\n","sourceOld":"  // Currently it's impossible to end up with a segment with all documents\n  // deleted, as such segments are dropped. Still, to validate that addIndexes\n  // works with such segments, or readers that end up in such state, we fake an\n  // all deleted segment.\n  public void testFakeAllDeleted() throws Exception {\n    Directory src = newDirectory(), dest = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), src);\n    w.addDocument(new Document());\n    LeafReader allDeletedReader = new AllDeletedFilterReader(w.getReader().leaves().get(0).reader());\n    w.close();\n    \n    w = new RandomIndexWriter(random(), dest);\n    w.addIndexes(allDeletedReader);\n    w.close();\n    DirectoryReader dr = DirectoryReader.open(src);\n    for (LeafReaderContext ctx : dr.leaves()) {\n      assertTrue(\"empty segments should be dropped by addIndexes\", ctx.reader().maxDoc() > 0);\n    }\n    dr.close();\n    allDeletedReader.close();\n    src.close();\n    dest.close();\n  }\n\n","bugFix":["e847ef0151948fe67f4f07d70d7730578444ac6f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e847ef0151948fe67f4f07d70d7730578444ac6f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","b04b25aea22398b43303d426d84754145251ff77"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["e847ef0151948fe67f4f07d70d7730578444ac6f"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b04b25aea22398b43303d426d84754145251ff77":["9360f4c41623a3bf56983cd6cdd3de80eef361d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["b04b25aea22398b43303d426d84754145251ff77"],"9360f4c41623a3bf56983cd6cdd3de80eef361d0":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["505bff044e47a553f461b6f4484d1d08faf4ac85"]},"commit2Childs":{"e847ef0151948fe67f4f07d70d7730578444ac6f":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["9360f4c41623a3bf56983cd6cdd3de80eef361d0"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b04b25aea22398b43303d426d84754145251ff77":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e847ef0151948fe67f4f07d70d7730578444ac6f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"9360f4c41623a3bf56983cd6cdd3de80eef361d0":["b04b25aea22398b43303d426d84754145251ff77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}