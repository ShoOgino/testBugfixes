{"path":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","commits":[{"id":"0f657d9837900f4519ca1cbd5e98d86d4bba4dab","date":1417790596,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","pathOld":"/dev/null","sourceNew":"    public NumericDocValues getNormDocValues() {\n      if (norms == null) {\n        FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n            numTokens, numOverlapTokens, 0, boost);\n        final long value = normSimilarity.computeNorm(invertState);\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n        norms = new NumericDocValues() {\n\n          @Override\n          public long get(int docID) {\n            if (docID != 0)\n              throw new IndexOutOfBoundsException();\n            else\n              return value;\n          }\n\n        };\n      }\n      return norms;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"253a79e1af11467dd01315b1919025d288aa0ccb","date":1458032260,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","sourceNew":"    NumericDocValues getNormDocValues() {\n      if (norms == null) {\n        FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n            numTokens, numOverlapTokens, 0, boost);\n        final long value = normSimilarity.computeNorm(invertState);\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n        norms = new NumericDocValues() {\n\n          @Override\n          public long get(int docID) {\n            if (docID != 0)\n              throw new IndexOutOfBoundsException();\n            else\n              return value;\n          }\n\n        };\n      }\n      return norms;\n    }\n\n","sourceOld":"    public NumericDocValues getNormDocValues() {\n      if (norms == null) {\n        FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n            numTokens, numOverlapTokens, 0, boost);\n        final long value = normSimilarity.computeNorm(invertState);\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n        norms = new NumericDocValues() {\n\n          @Override\n          public long get(int docID) {\n            if (docID != 0)\n              throw new IndexOutOfBoundsException();\n            else\n              return value;\n          }\n\n        };\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","sourceNew":"    NumericDocValues getNormDocValues() {\n      FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n                                                          numTokens, numOverlapTokens, 0, boost);\n      final long value = normSimilarity.computeNorm(invertState);\n      if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n      return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == 1) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (docID <= 0 && target == 0) {\n              docID = 0;\n            } else {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            return 1;\n          }\n\n          @Override\n          public long longValue() {\n            return value;\n          }\n        };\n    }\n\n","sourceOld":"    NumericDocValues getNormDocValues() {\n      if (norms == null) {\n        FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n            numTokens, numOverlapTokens, 0, boost);\n        final long value = normSimilarity.computeNorm(invertState);\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n        norms = new NumericDocValues() {\n\n          @Override\n          public long get(int docID) {\n            if (docID != 0)\n              throw new IndexOutOfBoundsException();\n            else\n              return value;\n          }\n\n        };\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","sourceNew":"    NumericDocValues getNormDocValues() {\n      FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n                                                          numTokens, numOverlapTokens, 0, boost);\n      final long value = normSimilarity.computeNorm(invertState);\n      if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n      return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == 1) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (docID <= 0 && target == 0) {\n              docID = 0;\n            } else {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            return 1;\n          }\n\n          @Override\n          public long longValue() {\n            return value;\n          }\n        };\n    }\n\n","sourceOld":"    NumericDocValues getNormDocValues() {\n      if (norms == null) {\n        FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n            numTokens, numOverlapTokens, 0, boost);\n        final long value = normSimilarity.computeNorm(invertState);\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n        norms = new NumericDocValues() {\n\n          @Override\n          public long get(int docID) {\n            if (docID != 0)\n              throw new IndexOutOfBoundsException();\n            else\n              return value;\n          }\n\n        };\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","sourceNew":"    NumericDocValues getNormDocValues() {\n      FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n                                                          numTokens, numOverlapTokens, 0, boost);\n      final long value = normSimilarity.computeNorm(invertState);\n      if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n      return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == 1) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (docID <= 0 && target == 0) {\n              docID = 0;\n            } else {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            return 1;\n          }\n\n          @Override\n          public long longValue() {\n            return value;\n          }\n        };\n    }\n\n","sourceOld":"    NumericDocValues getNormDocValues() {\n      if (norms == null) {\n        FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n            numTokens, numOverlapTokens, 0, boost);\n        final long value = normSimilarity.computeNorm(invertState);\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n        norms = new NumericDocValues() {\n\n          @Override\n          public long get(int docID) {\n            if (docID != 0)\n              throw new IndexOutOfBoundsException();\n            else\n              return value;\n          }\n\n        };\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","sourceNew":"    NumericDocValues getNormDocValues() {\n      FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n                                                          numTokens, numOverlapTokens, 0, boost);\n      final long value = normSimilarity.computeNorm(invertState);\n      if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n      return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == 1) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (docID <= 0 && target == 0) {\n              docID = 0;\n            } else {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public boolean advanceExact(int target) throws IOException {\n            docID = target;\n            return docID == 0;\n          }\n\n          @Override\n          public long cost() {\n            return 1;\n          }\n\n          @Override\n          public long longValue() {\n            return value;\n          }\n        };\n    }\n\n","sourceOld":"    NumericDocValues getNormDocValues() {\n      FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n                                                          numTokens, numOverlapTokens, 0, boost);\n      final long value = normSimilarity.computeNorm(invertState);\n      if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n      return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == 1) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (docID <= 0 && target == 0) {\n              docID = 0;\n            } else {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            return 1;\n          }\n\n          @Override\n          public long longValue() {\n            return value;\n          }\n        };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","sourceNew":"    NumericDocValues getNormDocValues() {\n      FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n                                                          numTokens, numOverlapTokens, 0, boost);\n      final long value = normSimilarity.computeNorm(invertState);\n      if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n      return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == 1) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (docID <= 0 && target == 0) {\n              docID = 0;\n            } else {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public boolean advanceExact(int target) throws IOException {\n            docID = target;\n            return docID == 0;\n          }\n\n          @Override\n          public long cost() {\n            return 1;\n          }\n\n          @Override\n          public long longValue() {\n            return value;\n          }\n        };\n    }\n\n","sourceOld":"    NumericDocValues getNormDocValues() {\n      FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n                                                          numTokens, numOverlapTokens, 0, boost);\n      final long value = normSimilarity.computeNorm(invertState);\n      if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n      return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == 1) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (docID <= 0 && target == 0) {\n              docID = 0;\n            } else {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            return 1;\n          }\n\n          @Override\n          public long longValue() {\n            return value;\n          }\n        };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","sourceNew":"    NumericDocValues getNormDocValues() {\n      FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n                                                          numTokens, numOverlapTokens, 0, boost);\n      final long value = normSimilarity.computeNorm(invertState);\n      if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n      return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == 1) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (docID <= 0 && target == 0) {\n              docID = 0;\n            } else {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public boolean advanceExact(int target) throws IOException {\n            docID = target;\n            return docID == 0;\n          }\n\n          @Override\n          public long cost() {\n            return 1;\n          }\n\n          @Override\n          public long longValue() {\n            return value;\n          }\n        };\n    }\n\n","sourceOld":"    NumericDocValues getNormDocValues() {\n      FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n                                                          numTokens, numOverlapTokens, 0, boost);\n      final long value = normSimilarity.computeNorm(invertState);\n      if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n      return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == 1) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (docID <= 0 && target == 0) {\n              docID = 0;\n            } else {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            return 1;\n          }\n\n          @Override\n          public long longValue() {\n            return value;\n          }\n        };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95e93d67f29b6bee6e39efb3fb6f1237b5b9850b","date":1487325043,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","sourceNew":"    NumericDocValues getNormDocValues() {\n      if (norm == null) {\n        FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n            numTokens, numOverlapTokens, 0, boost);\n        final long value = normSimilarity.computeNorm(invertState);\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n\n        norm = value;\n      }\n      return numericDocValues(norm);\n    }\n\n","sourceOld":"    NumericDocValues getNormDocValues() {\n      FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n                                                          numTokens, numOverlapTokens, 0, boost);\n      final long value = normSimilarity.computeNorm(invertState);\n      if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n      return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == 1) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (docID <= 0 && target == 0) {\n              docID = 0;\n            } else {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public boolean advanceExact(int target) throws IOException {\n            docID = target;\n            return docID == 0;\n          }\n\n          @Override\n          public long cost() {\n            return 1;\n          }\n\n          @Override\n          public long longValue() {\n            return value;\n          }\n        };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","sourceNew":"    NumericDocValues getNormDocValues() {\n      if (norm == null) {\n        FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n            numTokens, numOverlapTokens, 0);\n        final long value = normSimilarity.computeNorm(invertState);\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n\n        norm = value;\n      }\n      return numericDocValues(norm);\n    }\n\n","sourceOld":"    NumericDocValues getNormDocValues() {\n      if (norm == null) {\n        FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n            numTokens, numOverlapTokens, 0, boost);\n        final long value = normSimilarity.computeNorm(invertState);\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n\n        norm = value;\n      }\n      return numericDocValues(norm);\n    }\n\n","bugFix":null,"bugIntro":["5a4bb2b5569a925d9d26743041864893512a7958"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","sourceNew":"    NumericDocValues getNormDocValues() {\n      if (norm == null) {\n        FieldInvertState invertState = new FieldInvertState(Version.LATEST.major, fieldInfo.name, fieldInfo.number,\n            numTokens, numOverlapTokens, 0);\n        final long value = normSimilarity.computeNorm(invertState);\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n\n        norm = value;\n      }\n      return numericDocValues(norm);\n    }\n\n","sourceOld":"    NumericDocValues getNormDocValues() {\n      if (norm == null) {\n        FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n            numTokens, numOverlapTokens, 0);\n        final long value = normSimilarity.computeNorm(invertState);\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n\n        norm = value;\n      }\n      return numericDocValues(norm);\n    }\n\n","bugFix":null,"bugIntro":["5a4bb2b5569a925d9d26743041864893512a7958"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","sourceNew":"    NumericDocValues getNormDocValues() {\n      if (norm == null) {\n        FieldInvertState invertState = new FieldInvertState(Version.LATEST.major, fieldInfo.name, fieldInfo.number,\n            numTokens, numOverlapTokens, 0);\n        final long value = normSimilarity.computeNorm(invertState);\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n\n        norm = value;\n      }\n      return numericDocValues(norm);\n    }\n\n","sourceOld":"    NumericDocValues getNormDocValues() {\n      if (norm == null) {\n        FieldInvertState invertState = new FieldInvertState(fieldInfo.name, fieldInfo.number,\n            numTokens, numOverlapTokens, 0);\n        final long value = normSimilarity.computeNorm(invertState);\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n\n        norm = value;\n      }\n      return numericDocValues(norm);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a4bb2b5569a925d9d26743041864893512a7958","date":1519489313,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#getNormDocValues().mjava","sourceNew":"    NumericDocValues getNormDocValues() {\n      if (norm == null) {\n        FieldInvertState invertState = new FieldInvertState(Version.LATEST.major, fieldInfo.name, fieldInfo.getIndexOptions(), lastPosition,\n            numTokens, numOverlapTokens, 0, maxTermFrequency, terms.size());\n        final long value = normSimilarity.computeNorm(invertState);\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n\n        norm = value;\n      }\n      return numericDocValues(norm);\n    }\n\n","sourceOld":"    NumericDocValues getNormDocValues() {\n      if (norm == null) {\n        FieldInvertState invertState = new FieldInvertState(Version.LATEST.major, fieldInfo.name, fieldInfo.number,\n            numTokens, numOverlapTokens, 0);\n        final long value = normSimilarity.computeNorm(invertState);\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldInfo.name + \":\" + value + \":\" + numTokens);\n\n        norm = value;\n      }\n      return numericDocValues(norm);\n    }\n\n","bugFix":["615370d2b876c3435773b5174df2e2242ad7981a","acd9883560fd89e6448b2b447302fe543040cd4f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95e93d67f29b6bee6e39efb3fb6f1237b5b9850b":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"0f657d9837900f4519ca1cbd5e98d86d4bba4dab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["253a79e1af11467dd01315b1919025d288aa0ccb","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["acd9883560fd89e6448b2b447302fe543040cd4f","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["acd9883560fd89e6448b2b447302fe543040cd4f"],"253a79e1af11467dd01315b1919025d288aa0ccb":["0f657d9837900f4519ca1cbd5e98d86d4bba4dab"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"5a4bb2b5569a925d9d26743041864893512a7958":["615370d2b876c3435773b5174df2e2242ad7981a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["253a79e1af11467dd01315b1919025d288aa0ccb","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["253a79e1af11467dd01315b1919025d288aa0ccb"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"acd9883560fd89e6448b2b447302fe543040cd4f":["95e93d67f29b6bee6e39efb3fb6f1237b5b9850b"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a4bb2b5569a925d9d26743041864893512a7958"]},"commit2Childs":{"95e93d67f29b6bee6e39efb3fb6f1237b5b9850b":["acd9883560fd89e6448b2b447302fe543040cd4f"],"0f657d9837900f4519ca1cbd5e98d86d4bba4dab":["253a79e1af11467dd01315b1919025d288aa0ccb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","5a4bb2b5569a925d9d26743041864893512a7958"],"253a79e1af11467dd01315b1919025d288aa0ccb":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f657d9837900f4519ca1cbd5e98d86d4bba4dab"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"5a4bb2b5569a925d9d26743041864893512a7958":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["95e93d67f29b6bee6e39efb3fb6f1237b5b9850b","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"acd9883560fd89e6448b2b447302fe543040cd4f":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}