{"path":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testMiscQueryStats().mjava","commits":[{"id":"283ff02f401ec3e7a2fad73643970f052383fb0c","date":1411407953,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testMiscQueryStats().mjava","pathOld":"/dev/null","sourceNew":"  public void testMiscQueryStats() throws Exception {\n    final String kpre = XPRE + \"lst[@name='stats_fields']/lst[@name='k']/\";\n\n    assertU(adoc(\"id\", \"1\", \"a_f\", \"2.3\", \"b_f\", \"9.7\", \"foo_t\", \"how now brown cow\"));\n    assertU(adoc(\"id\", \"2\", \"a_f\", \"4.5\", \"b_f\", \"8.6\", \"foo_t\", \"cow cow cow cow\"));\n    assertU(adoc(\"id\", \"3\", \"a_f\", \"5.6\", \"b_f\", \"7.5\", \"foo_t\", \"red fox\"));\n    assertU(adoc(\"id\", \"4\", \"a_f\", \"6.7\", \"b_f\", \"6.3\", \"foo_t\", \"red cow\"));\n    assertU(commit());\n\n    assertQ(\"functions over multiple fields\",\n            req(\"q\",\"foo_t:cow\", \"stats\", \"true\",\n                \"stats.field\", \"{!func key=k}product(a_f,b_f)\")\n            \n            , kpre + \"double[@name='min'][.='22.309999465942383']\"\n            , kpre + \"double[@name='max'][.='42.209999084472656']\"\n            , kpre + \"double[@name='sum'][.='103.21999931335449']\"\n            , kpre + \"long[@name='count'][.='3']\"\n            , kpre + \"long[@name='missing'][.='0']\"\n            , kpre + \"double[@name='sumOfSquares'][.='3777.110157933046']\"\n            , kpre + \"double[@name='mean'][.='34.40666643778483']\"\n            , kpre + \"double[@name='stddev'][.='10.622007151430441']\"\n            );\n\n    assertQ(\"functions over a query\",\n            req(\"q\",\"*:*\", \"stats\", \"true\",\n                \"stats.field\", \"{!lucene key=k}foo_t:cow\")\n            // scores are: 1.0, 0.625, 0.5, & \"missing\"\n            , kpre + \"double[@name='min'][.='0.5']\"\n            , kpre + \"double[@name='max'][.='1.0']\"\n            , kpre + \"double[@name='sum'][.='2.125']\"\n            , kpre + \"long[@name='count'][.='3']\"\n            , kpre + \"long[@name='missing'][.='1']\"\n            , kpre + \"double[@name='sumOfSquares'][.='1.640625']\"\n            , kpre + \"double[@name='mean'][.='0.7083333333333334']\"\n            , kpre + \"double[@name='stddev'][.='0.2602082499332666']\"\n            );\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6e75448368ba628d73e9967b45e29c40bbfe39fa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e75448368ba628d73e9967b45e29c40bbfe39fa","date":1441768575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testMiscQueryStats().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testMiscQueryStats().mjava","sourceNew":"  public void testMiscQueryStats() throws Exception {\n    final String kpre = XPRE + \"lst[@name='stats_fields']/lst[@name='k']/\";\n\n    assertU(adoc(\"id\", \"1\", \"a_f\", \"2.3\", \"b_f\", \"9.7\", \"foo_t\", \"how now brown cow\"));\n    assertU(adoc(\"id\", \"2\", \"a_f\", \"4.5\", \"b_f\", \"8.6\", \"foo_t\", \"cow cow cow cow\"));\n    assertU(adoc(\"id\", \"3\", \"a_f\", \"5.6\", \"b_f\", \"7.5\", \"foo_t\", \"red fox\"));\n    assertU(adoc(\"id\", \"4\", \"a_f\", \"6.7\", \"b_f\", \"6.3\", \"foo_t\", \"red cow\"));\n    assertU(commit());\n\n    assertQ(\"functions over multiple fields\",\n            req(\"q\",\"foo_t:cow\", \"stats\", \"true\",\n                \"stats.field\", \"{!func key=k}product(a_f,b_f)\")\n            \n            , kpre + \"double[@name='min'][.='22.309999465942383']\"\n            , kpre + \"double[@name='max'][.='42.209999084472656']\"\n            , kpre + \"double[@name='sum'][.='103.21999931335449']\"\n            , kpre + \"long[@name='count'][.='3']\"\n            , kpre + \"long[@name='missing'][.='0']\"\n            , kpre + \"double[@name='sumOfSquares'][.='3777.110157933046']\"\n            , kpre + \"double[@name='mean'][.='34.40666643778483']\"\n            , kpre + \"double[@name='stddev'][.='10.622007151430441']\"\n            );\n\n    assertQ(\"functions over a query\",\n            req(\"q\",\"*:*\", \"stats\", \"true\",\n                \"stats.field\", \"{!lucene key=k}foo_t:cow\")\n            // TODO: change to not rely on exact scores\n            , kpre + \"double[@name='min'][.='0.6115717887878418']\"\n            , kpre + \"double[@name='max'][.='1.2231435775756836']\"\n            , kpre + \"double[@name='sum'][.='2.5991801023483276']\"\n            , kpre + \"long[@name='count'][.='3']\"\n            , kpre + \"long[@name='missing'][.='1']\"\n            , kpre + \"double[@name='sumOfSquares'][.='2.4545065967701163']\"\n            , kpre + \"double[@name='mean'][.='0.8663933674494425']\"\n            , kpre + \"double[@name='stddev'][.='0.3182720497380833']\"\n            );\n    \n  }\n\n","sourceOld":"  public void testMiscQueryStats() throws Exception {\n    final String kpre = XPRE + \"lst[@name='stats_fields']/lst[@name='k']/\";\n\n    assertU(adoc(\"id\", \"1\", \"a_f\", \"2.3\", \"b_f\", \"9.7\", \"foo_t\", \"how now brown cow\"));\n    assertU(adoc(\"id\", \"2\", \"a_f\", \"4.5\", \"b_f\", \"8.6\", \"foo_t\", \"cow cow cow cow\"));\n    assertU(adoc(\"id\", \"3\", \"a_f\", \"5.6\", \"b_f\", \"7.5\", \"foo_t\", \"red fox\"));\n    assertU(adoc(\"id\", \"4\", \"a_f\", \"6.7\", \"b_f\", \"6.3\", \"foo_t\", \"red cow\"));\n    assertU(commit());\n\n    assertQ(\"functions over multiple fields\",\n            req(\"q\",\"foo_t:cow\", \"stats\", \"true\",\n                \"stats.field\", \"{!func key=k}product(a_f,b_f)\")\n            \n            , kpre + \"double[@name='min'][.='22.309999465942383']\"\n            , kpre + \"double[@name='max'][.='42.209999084472656']\"\n            , kpre + \"double[@name='sum'][.='103.21999931335449']\"\n            , kpre + \"long[@name='count'][.='3']\"\n            , kpre + \"long[@name='missing'][.='0']\"\n            , kpre + \"double[@name='sumOfSquares'][.='3777.110157933046']\"\n            , kpre + \"double[@name='mean'][.='34.40666643778483']\"\n            , kpre + \"double[@name='stddev'][.='10.622007151430441']\"\n            );\n\n    assertQ(\"functions over a query\",\n            req(\"q\",\"*:*\", \"stats\", \"true\",\n                \"stats.field\", \"{!lucene key=k}foo_t:cow\")\n            // scores are: 1.0, 0.625, 0.5, & \"missing\"\n            , kpre + \"double[@name='min'][.='0.5']\"\n            , kpre + \"double[@name='max'][.='1.0']\"\n            , kpre + \"double[@name='sum'][.='2.125']\"\n            , kpre + \"long[@name='count'][.='3']\"\n            , kpre + \"long[@name='missing'][.='1']\"\n            , kpre + \"double[@name='sumOfSquares'][.='1.640625']\"\n            , kpre + \"double[@name='mean'][.='0.7083333333333334']\"\n            , kpre + \"double[@name='stddev'][.='0.2602082499332666']\"\n            );\n    \n  }\n\n","bugFix":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49dd2950028d6b59839f54d3801d77f769fa22ef","date":1447264120,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testMiscQueryStats().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testMiscQueryStats().mjava","sourceNew":"  public void testMiscQueryStats() throws Exception {\n    final String kpre = XPRE + \"lst[@name='stats_fields']/lst[@name='k']/\";\n\n    assertU(adoc(\"id\", \"1\", \"a_f\", \"2.3\", \"b_f\", \"9.7\", \"foo_t\", \"how now brown cow\"));\n    assertU(adoc(\"id\", \"2\", \"a_f\", \"4.5\", \"b_f\", \"8.6\", \"foo_t\", \"cow cow cow cow\"));\n    assertU(adoc(\"id\", \"3\", \"a_f\", \"5.6\", \"b_f\", \"7.5\", \"foo_t\", \"red fox\")); // no cow\n    assertU(adoc(\"id\", \"4\", \"a_f\", \"6.7\", \"b_f\", \"6.3\", \"foo_t\", \"red cow\"));\n    assertU(commit());\n\n    assertQ(\"functions over multiple fields\",\n            req(\"q\",\"foo_t:cow\", \"stats\", \"true\",\n                \"stats.field\", \"{!func key=k}product(a_f,b_f)\")\n            \n            , kpre + \"double[@name='min'][.='22.309999465942383']\"\n            , kpre + \"double[@name='max'][.='42.209999084472656']\"\n            , kpre + \"double[@name='sum'][.='103.21999931335449']\"\n            , kpre + \"long[@name='count'][.='3']\"\n            , kpre + \"long[@name='missing'][.='0']\"\n            , kpre + \"double[@name='sumOfSquares'][.='3777.110157933046']\"\n            , kpre + \"double[@name='mean'][.='34.40666643778483']\"\n            , kpre + \"double[@name='stddev'][.='10.622007151430441']\"\n            );\n\n    // force constant score for matches so we aren't dependent on similarity\n    final float constScore = 4.2F;\n    final double expectedScore = (double) constScore;\n    assertQ(\"functions over a query\",\n            req(\"q\",\"*:*\", \"stats\", \"true\",\n                \"stats.field\", \"{!lucene key=k}foo_t:cow^=\" + constScore)\n            , kpre + \"double[@name='min'][.='\" + expectedScore + \"']\"\n            , kpre + \"double[@name='max'][.='\" + expectedScore + \"']\"\n            , kpre + \"double[@name='sum'][.='\" + (3D * expectedScore) + \"']\"\n            , kpre + \"long[@name='count'][.='3']\"\n            , kpre + \"long[@name='missing'][.='1']\"\n            , kpre + \"double[@name='sumOfSquares'][.='\" + (3D * Math.pow(expectedScore, 2D)) + \"']\"\n            , kpre + \"double[@name='mean'][.='\" + expectedScore + \"']\"\n            , kpre + \"double[@name='stddev'][.='0.0']\"\n            );\n  }\n\n","sourceOld":"  public void testMiscQueryStats() throws Exception {\n    final String kpre = XPRE + \"lst[@name='stats_fields']/lst[@name='k']/\";\n\n    assertU(adoc(\"id\", \"1\", \"a_f\", \"2.3\", \"b_f\", \"9.7\", \"foo_t\", \"how now brown cow\"));\n    assertU(adoc(\"id\", \"2\", \"a_f\", \"4.5\", \"b_f\", \"8.6\", \"foo_t\", \"cow cow cow cow\"));\n    assertU(adoc(\"id\", \"3\", \"a_f\", \"5.6\", \"b_f\", \"7.5\", \"foo_t\", \"red fox\"));\n    assertU(adoc(\"id\", \"4\", \"a_f\", \"6.7\", \"b_f\", \"6.3\", \"foo_t\", \"red cow\"));\n    assertU(commit());\n\n    assertQ(\"functions over multiple fields\",\n            req(\"q\",\"foo_t:cow\", \"stats\", \"true\",\n                \"stats.field\", \"{!func key=k}product(a_f,b_f)\")\n            \n            , kpre + \"double[@name='min'][.='22.309999465942383']\"\n            , kpre + \"double[@name='max'][.='42.209999084472656']\"\n            , kpre + \"double[@name='sum'][.='103.21999931335449']\"\n            , kpre + \"long[@name='count'][.='3']\"\n            , kpre + \"long[@name='missing'][.='0']\"\n            , kpre + \"double[@name='sumOfSquares'][.='3777.110157933046']\"\n            , kpre + \"double[@name='mean'][.='34.40666643778483']\"\n            , kpre + \"double[@name='stddev'][.='10.622007151430441']\"\n            );\n\n    assertQ(\"functions over a query\",\n            req(\"q\",\"*:*\", \"stats\", \"true\",\n                \"stats.field\", \"{!lucene key=k}foo_t:cow\")\n            // TODO: change to not rely on exact scores\n            , kpre + \"double[@name='min'][.='0.6115717887878418']\"\n            , kpre + \"double[@name='max'][.='1.2231435775756836']\"\n            , kpre + \"double[@name='sum'][.='2.5991801023483276']\"\n            , kpre + \"long[@name='count'][.='3']\"\n            , kpre + \"long[@name='missing'][.='1']\"\n            , kpre + \"double[@name='sumOfSquares'][.='2.4545065967701163']\"\n            , kpre + \"double[@name='mean'][.='0.8663933674494425']\"\n            , kpre + \"double[@name='stddev'][.='0.3182720497380833']\"\n            );\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"283ff02f401ec3e7a2fad73643970f052383fb0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"49dd2950028d6b59839f54d3801d77f769fa22ef":["6e75448368ba628d73e9967b45e29c40bbfe39fa"],"6e75448368ba628d73e9967b45e29c40bbfe39fa":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["49dd2950028d6b59839f54d3801d77f769fa22ef"]},"commit2Childs":{"283ff02f401ec3e7a2fad73643970f052383fb0c":["6e75448368ba628d73e9967b45e29c40bbfe39fa"],"49dd2950028d6b59839f54d3801d77f769fa22ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"6e75448368ba628d73e9967b45e29c40bbfe39fa":["49dd2950028d6b59839f54d3801d77f769fa22ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}