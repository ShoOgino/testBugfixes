{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum.Frame#nextLeaf().mjava","commits":[{"id":"7266c313bb3b4fbcde3dcc82556182e1fae90080","date":1400183760,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum.Frame#nextLeaf().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectEnum.Frame#nextLeaf().mjava","sourceNew":"    // Decodes next entry; returns true if it's a sub-block\n    public boolean nextLeaf() {\n      //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n      assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n      nextEnt++;\n      suffix = suffixesReader.readVInt();\n      startBytePos = suffixesReader.getPosition();\n      suffixesReader.skipBytes(suffix);\n      return false;\n    }\n\n","sourceOld":"    // Decodes next entry; returns true if it's a sub-block\n    public boolean nextLeaf() {\n      //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n      assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n      nextEnt++;\n      suffix = suffixesReader.readVInt();\n      startBytePos = suffixesReader.getPosition();\n      suffixesReader.skipBytes(suffix);\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5c96ee46366b5feece8b0b328368c6237fc087a","date":1400184255,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum.Frame#nextLeaf().mjava","sourceNew":null,"sourceOld":"    // Decodes next entry; returns true if it's a sub-block\n    public boolean nextLeaf() {\n      //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n      assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n      nextEnt++;\n      suffix = suffixesReader.readVInt();\n      startBytePos = suffixesReader.getPosition();\n      suffixesReader.skipBytes(suffix);\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7266c313bb3b4fbcde3dcc82556182e1fae90080":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f5c96ee46366b5feece8b0b328368c6237fc087a":["7266c313bb3b4fbcde3dcc82556182e1fae90080"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7266c313bb3b4fbcde3dcc82556182e1fae90080":["f5c96ee46366b5feece8b0b328368c6237fc087a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7266c313bb3b4fbcde3dcc82556182e1fae90080","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f5c96ee46366b5feece8b0b328368c6237fc087a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f5c96ee46366b5feece8b0b328368c6237fc087a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}