{"path":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#unsetProperty(String).mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#unsetProperty(String).mjava","pathOld":"/dev/null","sourceNew":"  public ConfigOverlay unsetProperty(String name) {\n    List<String> hierarchy  = checkEditable(name,false, true);\n    Map deepCopy = getDeepCopy(props);\n    Map obj = deepCopy;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if (i < hierarchy.size()-1) {\n        if(obj.get(s) == null || (!(obj.get(s) instanceof Map))) {\n          return this;\n        }\n        obj = (Map) obj.get(s);\n      } else {\n        obj.remove(s);\n      }\n    }\n\n    Map<String, Object> jsonObj = new LinkedHashMap<>(this.data);\n    jsonObj.put(\"props\", deepCopy);\n\n    return new ConfigOverlay(jsonObj, znodeVersion);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#unsetProperty(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#unsetProperty(String).mjava","sourceNew":"  public ConfigOverlay unsetProperty(String name) {\n    List<String> hierarchy = checkEditable(name, false, true);\n    Map deepCopy = getDeepCopy(props);\n    Map obj = deepCopy;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if (i < hierarchy.size() - 1) {\n        if (obj.get(s) == null || (!(obj.get(s) instanceof Map))) {\n          return this;\n        }\n        obj = (Map) obj.get(s);\n      } else {\n        obj.remove(s);\n      }\n    }\n\n    Map<String, Object> jsonObj = new LinkedHashMap<>(this.data);\n    jsonObj.put(\"props\", deepCopy);\n\n    return new ConfigOverlay(jsonObj, znodeVersion);\n  }\n\n","sourceOld":"  public ConfigOverlay unsetProperty(String name) {\n    List<String> hierarchy  = checkEditable(name,false, true);\n    Map deepCopy = getDeepCopy(props);\n    Map obj = deepCopy;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if (i < hierarchy.size()-1) {\n        if(obj.get(s) == null || (!(obj.get(s) instanceof Map))) {\n          return this;\n        }\n        obj = (Map) obj.get(s);\n      } else {\n        obj.remove(s);\n      }\n    }\n\n    Map<String, Object> jsonObj = new LinkedHashMap<>(this.data);\n    jsonObj.put(\"props\", deepCopy);\n\n    return new ConfigOverlay(jsonObj, znodeVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#unsetProperty(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#unsetProperty(String).mjava","sourceNew":"  public ConfigOverlay unsetProperty(String name) {\n    List<String> hierarchy = checkEditable(name, false, true);\n    Map deepCopy = getDeepCopy(props);\n    Map obj = deepCopy;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if (i < hierarchy.size() - 1) {\n        if (obj.get(s) == null || (!(obj.get(s) instanceof Map))) {\n          return this;\n        }\n        obj = (Map) obj.get(s);\n      } else {\n        obj.remove(s);\n      }\n    }\n\n    Map<String, Object> jsonObj = new LinkedHashMap<>(this.data);\n    jsonObj.put(\"props\", deepCopy);\n\n    return new ConfigOverlay(jsonObj, znodeVersion);\n  }\n\n","sourceOld":"  public ConfigOverlay unsetProperty(String name) {\n    List<String> hierarchy  = checkEditable(name,false, true);\n    Map deepCopy = getDeepCopy(props);\n    Map obj = deepCopy;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if (i < hierarchy.size()-1) {\n        if(obj.get(s) == null || (!(obj.get(s) instanceof Map))) {\n          return this;\n        }\n        obj = (Map) obj.get(s);\n      } else {\n        obj.remove(s);\n      }\n    }\n\n    Map<String, Object> jsonObj = new LinkedHashMap<>(this.data);\n    jsonObj.put(\"props\", deepCopy);\n\n    return new ConfigOverlay(jsonObj, znodeVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#unsetProperty(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#unsetProperty(String).mjava","sourceNew":"  public ConfigOverlay unsetProperty(String name) {\n    List<String> hierarchy = checkEditable(name, false, true);\n    Map deepCopy = (Map) Utils.fromJSON(Utils.toJSON(props));\n    Map obj = deepCopy;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if (i < hierarchy.size() - 1) {\n        if (obj.get(s) == null || (!(obj.get(s) instanceof Map))) {\n          return this;\n        }\n        obj = (Map) obj.get(s);\n      } else {\n        obj.remove(s);\n      }\n    }\n\n    Map<String, Object> jsonObj = new LinkedHashMap<>(this.data);\n    jsonObj.put(\"props\", deepCopy);\n\n    return new ConfigOverlay(jsonObj, znodeVersion);\n  }\n\n","sourceOld":"  public ConfigOverlay unsetProperty(String name) {\n    List<String> hierarchy = checkEditable(name, false, true);\n    Map deepCopy = getDeepCopy(props);\n    Map obj = deepCopy;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if (i < hierarchy.size() - 1) {\n        if (obj.get(s) == null || (!(obj.get(s) instanceof Map))) {\n          return this;\n        }\n        obj = (Map) obj.get(s);\n      } else {\n        obj.remove(s);\n      }\n    }\n\n    Map<String, Object> jsonObj = new LinkedHashMap<>(this.data);\n    jsonObj.put(\"props\", deepCopy);\n\n    return new ConfigOverlay(jsonObj, znodeVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#unsetProperty(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#unsetProperty(String).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  public ConfigOverlay unsetProperty(String name) {\n    List<String> hierarchy = checkEditable(name, false, true);\n    Map deepCopy = (Map) Utils.fromJSON(Utils.toJSON(props));\n    Map obj = deepCopy;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if (i < hierarchy.size() - 1) {\n        if (obj.get(s) == null || (!(obj.get(s) instanceof Map))) {\n          return this;\n        }\n        obj = (Map) obj.get(s);\n      } else {\n        obj.remove(s);\n      }\n    }\n\n    Map<String, Object> jsonObj = new LinkedHashMap<>(this.data);\n    jsonObj.put(\"props\", deepCopy);\n\n    return new ConfigOverlay(jsonObj, znodeVersion);\n  }\n\n","sourceOld":"  public ConfigOverlay unsetProperty(String name) {\n    List<String> hierarchy = checkEditable(name, false, true);\n    Map deepCopy = (Map) Utils.fromJSON(Utils.toJSON(props));\n    Map obj = deepCopy;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if (i < hierarchy.size() - 1) {\n        if (obj.get(s) == null || (!(obj.get(s) instanceof Map))) {\n          return this;\n        }\n        obj = (Map) obj.get(s);\n      } else {\n        obj.remove(s);\n      }\n    }\n\n    Map<String, Object> jsonObj = new LinkedHashMap<>(this.data);\n    jsonObj.put(\"props\", deepCopy);\n\n    return new ConfigOverlay(jsonObj, znodeVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["531fe719c7218235a679452eb3d137bfd8fc6af1","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75237075d8425856bf4bbf52a6be4f9162b8187d"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}