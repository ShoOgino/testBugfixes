{"path":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertPositionsSkipping(int,DocsAndPositionsEnum,DocsAndPositionsEnum).mjava","commits":[{"id":"0445bcd8433e331f296f5502fc089b336cbac3a6","date":1322630375,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertPositionsSkipping(int,DocsAndPositionsEnum,DocsAndPositionsEnum).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * checks advancing docs + positions\n   */\n  public void assertPositionsSkipping(int docFreq, DocsAndPositionsEnum leftDocs, DocsAndPositionsEnum rightDocs) throws Exception {\n    if (leftDocs == null || rightDocs == null) {\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    \n    int docid = -1;\n    int averageGap = leftReader.maxDoc() / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random.nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(info, docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random.nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(info, docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.hasPayload(), rightDocs.hasPayload());\n        if (leftDocs.hasPayload()) {\n          assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertPositionsSkipping(int,DocsAndPositionsEnum,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertPositionsSkipping(int,DocsAndPositionsEnum,DocsAndPositionsEnum).mjava","sourceNew":"  /**\n   * checks advancing docs + positions\n   */\n  public void assertPositionsSkipping(int docFreq, DocsAndPositionsEnum leftDocs, DocsAndPositionsEnum rightDocs) throws Exception {\n    if (leftDocs == null || rightDocs == null) {\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    \n    int docid = -1;\n    int averageGap = leftReader.maxDoc() / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random.nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(info, docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random.nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(info, docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.hasPayload(), rightDocs.hasPayload());\n        if (leftDocs.hasPayload()) {\n          assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks advancing docs + positions\n   */\n  public void assertPositionsSkipping(int docFreq, DocsAndPositionsEnum leftDocs, DocsAndPositionsEnum rightDocs) throws Exception {\n    if (leftDocs == null || rightDocs == null) {\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    \n    int docid = -1;\n    int averageGap = leftReader.maxDoc() / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random.nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(info, docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random.nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(info, docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.hasPayload(), rightDocs.hasPayload());\n        if (leftDocs.hasPayload()) {\n          assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0445bcd8433e331f296f5502fc089b336cbac3a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0445bcd8433e331f296f5502fc089b336cbac3a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}