{"path":"lucene/analysis/stempel/src/java/org/egothor/stemmer/MultiTrie2#add(CharSequence,CharSequence).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/MultiTrie2#add(CharSequence,CharSequence).mjava","pathOld":"modules/analysis/stempel/src/java/org/egothor/stemmer/MultiTrie2#add(CharSequence,CharSequence).mjava","sourceNew":"  /**\n   * Add an element to this structure consisting of the given key and patch\n   * command. \n   * <p>\n   * This method will return without executing if the <tt>cmd</tt>\n   * parameter's length is 0.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  @Override\n  public void add(CharSequence key, CharSequence cmd) {\n    if (cmd.length() == 0) {\n      return;\n    }\n    // System.err.println( cmd );\n    CharSequence p[] = decompose(cmd);\n    int levels = p.length;\n    // System.err.println(\"levels \"+key+\" cmd \"+cmd+\"|\"+levels);\n    while (levels >= tries.size()) {\n      tries.add(new Trie(forward));\n    }\n    CharSequence lastkey = key;\n    for (int i = 0; i < levels; i++) {\n      if (key.length() > 0) {\n        tries.get(i).add(key, p[i]);\n        lastkey = key;\n      } else {\n        tries.get(i).add(lastkey, p[i]);\n      }\n      // System.err.println(\"-\"+key+\" \"+p[i]+\"|\"+key.length());\n      /*\n       * key=key.substring(lengthPP(p[i]));\n       */\n      if (p[i].length() > 0 && p[i].charAt(0) == '-') {\n        if (i > 0) {\n          key = skip(key, lengthPP(p[i - 1]));\n        }\n        key = skip(key, lengthPP(p[i]));\n      }\n      // System.err.println(\"--->\"+key);\n    }\n    if (key.length() > 0) {\n      tries.get(levels).add(key, EOM_NODE);\n    } else {\n      tries.get(levels).add(lastkey, EOM_NODE);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an element to this structure consisting of the given key and patch\n   * command. \n   * <p>\n   * This method will return without executing if the <tt>cmd</tt>\n   * parameter's length is 0.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  @Override\n  public void add(CharSequence key, CharSequence cmd) {\n    if (cmd.length() == 0) {\n      return;\n    }\n    // System.err.println( cmd );\n    CharSequence p[] = decompose(cmd);\n    int levels = p.length;\n    // System.err.println(\"levels \"+key+\" cmd \"+cmd+\"|\"+levels);\n    while (levels >= tries.size()) {\n      tries.add(new Trie(forward));\n    }\n    CharSequence lastkey = key;\n    for (int i = 0; i < levels; i++) {\n      if (key.length() > 0) {\n        tries.get(i).add(key, p[i]);\n        lastkey = key;\n      } else {\n        tries.get(i).add(lastkey, p[i]);\n      }\n      // System.err.println(\"-\"+key+\" \"+p[i]+\"|\"+key.length());\n      /*\n       * key=key.substring(lengthPP(p[i]));\n       */\n      if (p[i].length() > 0 && p[i].charAt(0) == '-') {\n        if (i > 0) {\n          key = skip(key, lengthPP(p[i - 1]));\n        }\n        key = skip(key, lengthPP(p[i]));\n      }\n      // System.err.println(\"--->\"+key);\n    }\n    if (key.length() > 0) {\n      tries.get(levels).add(key, EOM_NODE);\n    } else {\n      tries.get(levels).add(lastkey, EOM_NODE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e3751ad4cc85eb979419cf5469dfba266eae56a","date":1581046252,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/MultiTrie2#add(CharSequence,CharSequence).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/MultiTrie2#add(CharSequence,CharSequence).mjava","sourceNew":"  /**\n   * Add an element to this structure consisting of the given key and patch\n   * command. \n   * <p>\n   * This method will return without executing if the <code>cmd</code>\n   * parameter's length is 0.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  @Override\n  public void add(CharSequence key, CharSequence cmd) {\n    if (cmd.length() == 0) {\n      return;\n    }\n    // System.err.println( cmd );\n    CharSequence p[] = decompose(cmd);\n    int levels = p.length;\n    // System.err.println(\"levels \"+key+\" cmd \"+cmd+\"|\"+levels);\n    while (levels >= tries.size()) {\n      tries.add(new Trie(forward));\n    }\n    CharSequence lastkey = key;\n    for (int i = 0; i < levels; i++) {\n      if (key.length() > 0) {\n        tries.get(i).add(key, p[i]);\n        lastkey = key;\n      } else {\n        tries.get(i).add(lastkey, p[i]);\n      }\n      // System.err.println(\"-\"+key+\" \"+p[i]+\"|\"+key.length());\n      /*\n       * key=key.substring(lengthPP(p[i]));\n       */\n      if (p[i].length() > 0 && p[i].charAt(0) == '-') {\n        if (i > 0) {\n          key = skip(key, lengthPP(p[i - 1]));\n        }\n        key = skip(key, lengthPP(p[i]));\n      }\n      // System.err.println(\"--->\"+key);\n    }\n    if (key.length() > 0) {\n      tries.get(levels).add(key, EOM_NODE);\n    } else {\n      tries.get(levels).add(lastkey, EOM_NODE);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an element to this structure consisting of the given key and patch\n   * command. \n   * <p>\n   * This method will return without executing if the <tt>cmd</tt>\n   * parameter's length is 0.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  @Override\n  public void add(CharSequence key, CharSequence cmd) {\n    if (cmd.length() == 0) {\n      return;\n    }\n    // System.err.println( cmd );\n    CharSequence p[] = decompose(cmd);\n    int levels = p.length;\n    // System.err.println(\"levels \"+key+\" cmd \"+cmd+\"|\"+levels);\n    while (levels >= tries.size()) {\n      tries.add(new Trie(forward));\n    }\n    CharSequence lastkey = key;\n    for (int i = 0; i < levels; i++) {\n      if (key.length() > 0) {\n        tries.get(i).add(key, p[i]);\n        lastkey = key;\n      } else {\n        tries.get(i).add(lastkey, p[i]);\n      }\n      // System.err.println(\"-\"+key+\" \"+p[i]+\"|\"+key.length());\n      /*\n       * key=key.substring(lengthPP(p[i]));\n       */\n      if (p[i].length() > 0 && p[i].charAt(0) == '-') {\n        if (i > 0) {\n          key = skip(key, lengthPP(p[i - 1]));\n        }\n        key = skip(key, lengthPP(p[i]));\n      }\n      // System.err.println(\"--->\"+key);\n    }\n    if (key.length() > 0) {\n      tries.get(levels).add(key, EOM_NODE);\n    } else {\n      tries.get(levels).add(lastkey, EOM_NODE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9e3751ad4cc85eb979419cf5469dfba266eae56a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e3751ad4cc85eb979419cf5469dfba266eae56a"]},"commit2Childs":{"9e3751ad4cc85eb979419cf5469dfba266eae56a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["9e3751ad4cc85eb979419cf5469dfba266eae56a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}