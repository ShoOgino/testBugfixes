{"path":"src/test/org/apache/lucene/search/TestFuzzyQuery#testTokenLengthOpt().mjava","commits":[{"id":"d308493f28656b4f3d6b6a9e13d5712b679db6ee","date":1232303054,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testTokenLengthOpt().mjava","pathOld":"/dev/null","sourceNew":"  public void testTokenLengthOpt() throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new FuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new FuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testTokenLengthOpt().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testTokenLengthOpt().mjava","sourceNew":"  public void testTokenLengthOpt() throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new FuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new FuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testTokenLengthOpt() throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new FuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new FuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testTokenLengthOpt().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testTokenLengthOpt().mjava","sourceNew":"  public void testTokenLengthOpt() throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new FuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new FuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testTokenLengthOpt() throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new FuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new FuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testTokenLengthOpt().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testTokenLengthOpt().mjava","sourceNew":"  public void testTokenLengthOpt() throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new FuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new FuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testTokenLengthOpt() throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new FuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new FuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testTokenLengthOpt().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testTokenLengthOpt().mjava","sourceNew":"  public void testTokenLengthOpt() throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new FuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new FuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testTokenLengthOpt() throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new FuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new FuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testTokenLengthOpt().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testTokenLengthOpt().mjava","sourceNew":"  public void testTokenLengthOpt() throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new FuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new FuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testTokenLengthOpt() throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new FuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new FuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testTokenLengthOpt().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testTokenLengthOpt().mjava","sourceNew":"  public void testTokenLengthOpt() throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new FuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new FuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testTokenLengthOpt() throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new FuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new FuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testTokenLengthOpt().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testTokenLengthOpt().mjava","sourceNew":"  public void testTokenLengthOpt() throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new FuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new FuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testTokenLengthOpt() throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new FuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new FuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testTokenLengthOpt().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testTokenLengthOpt().mjava","sourceNew":"  public void testTokenLengthOpt() throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new FuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new FuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testTokenLengthOpt() throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new FuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new FuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["d308493f28656b4f3d6b6a9e13d5712b679db6ee"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["d308493f28656b4f3d6b6a9e13d5712b679db6ee","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"d308493f28656b4f3d6b6a9e13d5712b679db6ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d308493f28656b4f3d6b6a9e13d5712b679db6ee"],"d308493f28656b4f3d6b6a9e13d5712b679db6ee":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}