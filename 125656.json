{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestClusterStateProvider#init().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestClusterStateProvider#init().mjava","pathOld":"/dev/null","sourceNew":"  private static void init() throws Exception {\n    SolrCloudManager realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    liveNodes = realManager.getClusterStateProvider().getLiveNodes();\n    clusterProperties = realManager.getClusterStateProvider().getClusterProperties();\n    autoScalingConfig = realManager.getDistribStateManager().getAutoScalingConfig();\n    replicas = new HashMap<>();\n    nodeValues = new HashMap<>();\n    liveNodes.forEach(n -> {\n      replicas.put(n, realManager.getNodeStateProvider().getReplicaInfo(n, Collections.emptySet()));\n      nodeValues.put(n, realManager.getNodeStateProvider().getNodeValues(n, ImplicitSnitch.tags));\n    });\n    realState = realManager.getClusterStateProvider().getClusterState();\n\n    if (simulated) {\n      // initialize simulated provider\n      SimCloudManager simCloudManager = new SimCloudManager(TimeSource.get(\"simTime:10\"));\n      simCloudManager.getSimClusterStateProvider().simSetClusterProperties(clusterProperties);\n      simCloudManager.getSimDistribStateManager().simSetAutoScalingConfig(autoScalingConfig);\n      nodeValues.forEach((n, values) -> {\n        simCloudManager.getSimNodeStateProvider().simSetNodeValues(n, values);\n      });\n      simCloudManager.getSimClusterStateProvider().simSetClusterState(realState);\n      ClusterState simState = simCloudManager.getClusterStateProvider().getClusterState();\n      assertClusterStateEquals(realState, simState);\n      cloudManager = simCloudManager;\n    } else {\n      cloudManager = realManager;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad60b6945c360ff89899d716d9cdec8dd674e2a0","date":1528114819,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestClusterStateProvider#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestClusterStateProvider#init().mjava","sourceNew":"  private static void init() throws Exception {\n    SolrCloudManager realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    liveNodes = realManager.getClusterStateProvider().getLiveNodes();\n    clusterProperties = realManager.getClusterStateProvider().getClusterProperties();\n    autoScalingConfig = realManager.getDistribStateManager().getAutoScalingConfig();\n    replicas = new HashMap<>();\n    nodeValues = new HashMap<>();\n    liveNodes.forEach(n -> {\n      replicas.put(n, realManager.getNodeStateProvider().getReplicaInfo(n, Collections.emptySet()));\n      nodeValues.put(n, realManager.getNodeStateProvider().getNodeValues(n, ImplicitSnitch.tags));\n    });\n    realState = realManager.getClusterStateProvider().getClusterState();\n\n    if (simulated) {\n      // initialize simulated provider\n      SimCloudManager simCloudManager = new SimCloudManager(TimeSource.get(\"simTime:10\"));\n      simCloudManager.getSimClusterStateProvider().simSetClusterProperties(clusterProperties);\n      simCloudManager.getSimDistribStateManager().simSetAutoScalingConfig(autoScalingConfig);\n      nodeValues.forEach((n, values) -> {\n        try {\n          simCloudManager.getSimNodeStateProvider().simSetNodeValues(n, values);\n        } catch (InterruptedException e) {\n          fail(\"Interrupted:\" + e);\n        }\n      });\n      simCloudManager.getSimClusterStateProvider().simSetClusterState(realState);\n      ClusterState simState = simCloudManager.getClusterStateProvider().getClusterState();\n      assertClusterStateEquals(realState, simState);\n      cloudManager = simCloudManager;\n    } else {\n      cloudManager = realManager;\n    }\n  }\n\n","sourceOld":"  private static void init() throws Exception {\n    SolrCloudManager realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    liveNodes = realManager.getClusterStateProvider().getLiveNodes();\n    clusterProperties = realManager.getClusterStateProvider().getClusterProperties();\n    autoScalingConfig = realManager.getDistribStateManager().getAutoScalingConfig();\n    replicas = new HashMap<>();\n    nodeValues = new HashMap<>();\n    liveNodes.forEach(n -> {\n      replicas.put(n, realManager.getNodeStateProvider().getReplicaInfo(n, Collections.emptySet()));\n      nodeValues.put(n, realManager.getNodeStateProvider().getNodeValues(n, ImplicitSnitch.tags));\n    });\n    realState = realManager.getClusterStateProvider().getClusterState();\n\n    if (simulated) {\n      // initialize simulated provider\n      SimCloudManager simCloudManager = new SimCloudManager(TimeSource.get(\"simTime:10\"));\n      simCloudManager.getSimClusterStateProvider().simSetClusterProperties(clusterProperties);\n      simCloudManager.getSimDistribStateManager().simSetAutoScalingConfig(autoScalingConfig);\n      nodeValues.forEach((n, values) -> {\n        simCloudManager.getSimNodeStateProvider().simSetNodeValues(n, values);\n      });\n      simCloudManager.getSimClusterStateProvider().simSetClusterState(realState);\n      ClusterState simState = simCloudManager.getClusterStateProvider().getClusterState();\n      assertClusterStateEquals(realState, simState);\n      cloudManager = simCloudManager;\n    } else {\n      cloudManager = realManager;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestClusterStateProvider#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestClusterStateProvider#init().mjava","sourceNew":"  private static void init() throws Exception {\n    SolrCloudManager realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    liveNodes = realManager.getClusterStateProvider().getLiveNodes();\n    clusterProperties = realManager.getClusterStateProvider().getClusterProperties();\n    autoScalingConfig = realManager.getDistribStateManager().getAutoScalingConfig();\n    replicas = new HashMap<>();\n    nodeValues = new HashMap<>();\n    liveNodes.forEach(n -> {\n      replicas.put(n, realManager.getNodeStateProvider().getReplicaInfo(n, Collections.emptySet()));\n      nodeValues.put(n, realManager.getNodeStateProvider().getNodeValues(n, ImplicitSnitch.tags));\n    });\n    realState = realManager.getClusterStateProvider().getClusterState();\n\n    if (simulated) {\n      // initialize simulated provider\n      SimCloudManager simCloudManager = new SimCloudManager(TimeSource.get(\"simTime:10\"));\n      simCloudManager.getSimClusterStateProvider().simSetClusterProperties(clusterProperties);\n      simCloudManager.getSimDistribStateManager().simSetAutoScalingConfig(autoScalingConfig);\n      nodeValues.forEach((n, values) -> {\n        try {\n          simCloudManager.getSimNodeStateProvider().simSetNodeValues(n, values);\n        } catch (InterruptedException e) {\n          fail(\"Interrupted:\" + e);\n        }\n      });\n      simCloudManager.getSimClusterStateProvider().simSetClusterState(realState);\n      ClusterState simState = simCloudManager.getClusterStateProvider().getClusterState();\n      assertClusterStateEquals(realState, simState);\n      cloudManager = simCloudManager;\n    } else {\n      cloudManager = realManager;\n    }\n  }\n\n","sourceOld":"  private static void init() throws Exception {\n    SolrCloudManager realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    liveNodes = realManager.getClusterStateProvider().getLiveNodes();\n    clusterProperties = realManager.getClusterStateProvider().getClusterProperties();\n    autoScalingConfig = realManager.getDistribStateManager().getAutoScalingConfig();\n    replicas = new HashMap<>();\n    nodeValues = new HashMap<>();\n    liveNodes.forEach(n -> {\n      replicas.put(n, realManager.getNodeStateProvider().getReplicaInfo(n, Collections.emptySet()));\n      nodeValues.put(n, realManager.getNodeStateProvider().getNodeValues(n, ImplicitSnitch.tags));\n    });\n    realState = realManager.getClusterStateProvider().getClusterState();\n\n    if (simulated) {\n      // initialize simulated provider\n      SimCloudManager simCloudManager = new SimCloudManager(TimeSource.get(\"simTime:10\"));\n      simCloudManager.getSimClusterStateProvider().simSetClusterProperties(clusterProperties);\n      simCloudManager.getSimDistribStateManager().simSetAutoScalingConfig(autoScalingConfig);\n      nodeValues.forEach((n, values) -> {\n        simCloudManager.getSimNodeStateProvider().simSetNodeValues(n, values);\n      });\n      simCloudManager.getSimClusterStateProvider().simSetClusterState(realState);\n      ClusterState simState = simCloudManager.getClusterStateProvider().getClusterState();\n      assertClusterStateEquals(realState, simState);\n      cloudManager = simCloudManager;\n    } else {\n      cloudManager = realManager;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestClusterStateProvider#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestClusterStateProvider#init().mjava","sourceNew":"  private static void init() throws Exception {\n    SolrCloudManager realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    liveNodes = realManager.getClusterStateProvider().getLiveNodes();\n    clusterProperties = realManager.getClusterStateProvider().getClusterProperties();\n    autoScalingConfig = realManager.getDistribStateManager().getAutoScalingConfig();\n    replicas = new HashMap<>();\n    nodeValues = new HashMap<>();\n    liveNodes.forEach(n -> {\n      replicas.put(n, realManager.getNodeStateProvider().getReplicaInfo(n, Collections.emptySet()));\n      nodeValues.put(n, realManager.getNodeStateProvider().getNodeValues(n, ImplicitSnitch.tags));\n    });\n    realState = realManager.getClusterStateProvider().getClusterState();\n\n    if (simulated) {\n      // initialize simulated provider\n      SimCloudManager simCloudManager = new SimCloudManager(TimeSource.get(\"simTime:10\"));\n      simCloudManager.getSimClusterStateProvider().simSetClusterProperties(clusterProperties);\n      simCloudManager.getSimDistribStateManager().simSetAutoScalingConfig(autoScalingConfig);\n      nodeValues.forEach((n, values) -> {\n        try {\n          simCloudManager.getSimNodeStateProvider().simSetNodeValues(n, values);\n        } catch (InterruptedException e) {\n          fail(\"Interrupted:\" + e);\n        }\n      });\n      simCloudManager.getSimClusterStateProvider().simSetClusterState(realState);\n      ClusterState simState = simCloudManager.getClusterStateProvider().getClusterState();\n      assertClusterStateEquals(realState, simState);\n      cloudManager = simCloudManager;\n    } else {\n      cloudManager = realManager;\n    }\n  }\n\n","sourceOld":"  private static void init() throws Exception {\n    SolrCloudManager realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    liveNodes = realManager.getClusterStateProvider().getLiveNodes();\n    clusterProperties = realManager.getClusterStateProvider().getClusterProperties();\n    autoScalingConfig = realManager.getDistribStateManager().getAutoScalingConfig();\n    replicas = new HashMap<>();\n    nodeValues = new HashMap<>();\n    liveNodes.forEach(n -> {\n      replicas.put(n, realManager.getNodeStateProvider().getReplicaInfo(n, Collections.emptySet()));\n      nodeValues.put(n, realManager.getNodeStateProvider().getNodeValues(n, ImplicitSnitch.tags));\n    });\n    realState = realManager.getClusterStateProvider().getClusterState();\n\n    if (simulated) {\n      // initialize simulated provider\n      SimCloudManager simCloudManager = new SimCloudManager(TimeSource.get(\"simTime:10\"));\n      simCloudManager.getSimClusterStateProvider().simSetClusterProperties(clusterProperties);\n      simCloudManager.getSimDistribStateManager().simSetAutoScalingConfig(autoScalingConfig);\n      nodeValues.forEach((n, values) -> {\n        simCloudManager.getSimNodeStateProvider().simSetNodeValues(n, values);\n      });\n      simCloudManager.getSimClusterStateProvider().simSetClusterState(realState);\n      ClusterState simState = simCloudManager.getClusterStateProvider().getClusterState();\n      assertClusterStateEquals(realState, simState);\n      cloudManager = simCloudManager;\n    } else {\n      cloudManager = realManager;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimClusterStateProvider#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestClusterStateProvider#init().mjava","sourceNew":"  private static void init() throws Exception {\n    SolrCloudManager realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    liveNodes = realManager.getClusterStateProvider().getLiveNodes();\n    clusterProperties = realManager.getClusterStateProvider().getClusterProperties();\n    autoScalingConfig = realManager.getDistribStateManager().getAutoScalingConfig();\n    replicas = new HashMap<>();\n    nodeValues = new HashMap<>();\n    liveNodes.forEach(n -> {\n      replicas.put(n, realManager.getNodeStateProvider().getReplicaInfo(n, Collections.emptySet()));\n      nodeValues.put(n, realManager.getNodeStateProvider().getNodeValues(n, ImplicitSnitch.tags));\n    });\n    realState = realManager.getClusterStateProvider().getClusterState();\n\n    if (simulated) {\n      // initialize simulated provider\n      SimCloudManager simCloudManager = new SimCloudManager(TimeSource.get(\"simTime:10\"));\n      simCloudManager.getSimClusterStateProvider().simSetClusterProperties(clusterProperties);\n      simCloudManager.getSimDistribStateManager().simSetAutoScalingConfig(autoScalingConfig);\n      nodeValues.forEach((n, values) -> {\n        try {\n          simCloudManager.getSimNodeStateProvider().simSetNodeValues(n, values);\n        } catch (InterruptedException e) {\n          fail(\"Interrupted:\" + e);\n        }\n      });\n      simCloudManager.getSimClusterStateProvider().simSetClusterState(realState);\n      ClusterState simState = simCloudManager.getClusterStateProvider().getClusterState();\n      assertClusterStateEquals(realState, simState);\n      cloudManager = simCloudManager;\n    } else {\n      cloudManager = realManager;\n    }\n  }\n\n","sourceOld":"  private static void init() throws Exception {\n    SolrCloudManager realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    liveNodes = realManager.getClusterStateProvider().getLiveNodes();\n    clusterProperties = realManager.getClusterStateProvider().getClusterProperties();\n    autoScalingConfig = realManager.getDistribStateManager().getAutoScalingConfig();\n    replicas = new HashMap<>();\n    nodeValues = new HashMap<>();\n    liveNodes.forEach(n -> {\n      replicas.put(n, realManager.getNodeStateProvider().getReplicaInfo(n, Collections.emptySet()));\n      nodeValues.put(n, realManager.getNodeStateProvider().getNodeValues(n, ImplicitSnitch.tags));\n    });\n    realState = realManager.getClusterStateProvider().getClusterState();\n\n    if (simulated) {\n      // initialize simulated provider\n      SimCloudManager simCloudManager = new SimCloudManager(TimeSource.get(\"simTime:10\"));\n      simCloudManager.getSimClusterStateProvider().simSetClusterProperties(clusterProperties);\n      simCloudManager.getSimDistribStateManager().simSetAutoScalingConfig(autoScalingConfig);\n      nodeValues.forEach((n, values) -> {\n        try {\n          simCloudManager.getSimNodeStateProvider().simSetNodeValues(n, values);\n        } catch (InterruptedException e) {\n          fail(\"Interrupted:\" + e);\n        }\n      });\n      simCloudManager.getSimClusterStateProvider().simSetClusterState(realState);\n      ClusterState simState = simCloudManager.getClusterStateProvider().getClusterState();\n      assertClusterStateEquals(realState, simState);\n      cloudManager = simCloudManager;\n    } else {\n      cloudManager = realManager;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"f592209545c71895260367152601e9200399776d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b70042a8a492f7054d480ccdd2be9796510d4327","ad60b6945c360ff89899d716d9cdec8dd674e2a0","f592209545c71895260367152601e9200399776d"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["a6a5c1c40529f15b445e6720dfde1967e139bff1","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}