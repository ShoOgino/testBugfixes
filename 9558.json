{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","sourceNew":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(new InputStreamReader(new GZIPInputStream(\n              new FileInputStream(file))));\n    else in = new BufferedReader(new InputStreamReader((new FileInputStream(\n            file))));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase();\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase());\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","sourceOld":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(new InputStreamReader(new GZIPInputStream(\n              new FileInputStream(file))));\n    else in = new BufferedReader(new InputStreamReader((new FileInputStream(\n            file))));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase();\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase());\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1e2115eb980754f0e25af89d6552b214dbe9b5a","date":1341663133,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","sourceNew":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              new FileInputStream(file)), IOUtils.CHARSET_UTF_8));\n    else in = new BufferedReader(IOUtils.getDecodingReader((new FileInputStream(\n            file)), IOUtils.CHARSET_UTF_8));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase();\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase());\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","sourceOld":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(new InputStreamReader(new GZIPInputStream(\n              new FileInputStream(file))));\n    else in = new BufferedReader(new InputStreamReader((new FileInputStream(\n            file))));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase();\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase());\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec57145e34263e28da6b82568e35471f7d67df69","date":1341768476,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","sourceNew":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              new FileInputStream(file)), IOUtils.CHARSET_UTF_8));\n    else in = new BufferedReader(IOUtils.getDecodingReader((new FileInputStream(\n            file)), IOUtils.CHARSET_UTF_8));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase(locale);\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","sourceOld":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              new FileInputStream(file)), IOUtils.CHARSET_UTF_8));\n    else in = new BufferedReader(IOUtils.getDecodingReader((new FileInputStream(\n            file)), IOUtils.CHARSET_UTF_8));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase();\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase());\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","sourceNew":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              new FileInputStream(file)), IOUtils.CHARSET_UTF_8));\n    else in = new BufferedReader(IOUtils.getDecodingReader((new FileInputStream(\n            file)), IOUtils.CHARSET_UTF_8));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase(locale);\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","sourceOld":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(new InputStreamReader(new GZIPInputStream(\n              new FileInputStream(file))));\n    else in = new BufferedReader(new InputStreamReader((new FileInputStream(\n            file))));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase();\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase());\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","sourceNew":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              new FileInputStream(file)), IOUtils.CHARSET_UTF_8));\n    else in = new BufferedReader(IOUtils.getDecodingReader((new FileInputStream(\n            file)), IOUtils.CHARSET_UTF_8));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase(locale);\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","sourceOld":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(new InputStreamReader(new GZIPInputStream(\n              new FileInputStream(file))));\n    else in = new BufferedReader(new InputStreamReader((new FileInputStream(\n            file))));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase();\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase());\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","sourceNew":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              new FileInputStream(file)), IOUtils.CHARSET_UTF_8));\n    else in = new BufferedReader(IOUtils.getDecodingReader((new FileInputStream(\n            file)), IOUtils.CHARSET_UTF_8));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase(locale);\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","sourceOld":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(new InputStreamReader(new GZIPInputStream(\n              new FileInputStream(file))));\n    else in = new BufferedReader(new InputStreamReader((new FileInputStream(\n            file))));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase();\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase());\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","sourceNew":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              new FileInputStream(file)), StandardCharsets.UTF_8));\n    else in = new BufferedReader(IOUtils.getDecodingReader((new FileInputStream(\n            file)), StandardCharsets.UTF_8));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    while ((word = in.readLine()) != null) {\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase(locale);\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","sourceOld":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              new FileInputStream(file)), IOUtils.CHARSET_UTF_8));\n    else in = new BufferedReader(IOUtils.getDecodingReader((new FileInputStream(\n            file)), IOUtils.CHARSET_UTF_8));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase(locale);\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","sourceNew":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              new FileInputStream(file)), StandardCharsets.UTF_8));\n    else in = new BufferedReader(IOUtils.getDecodingReader((new FileInputStream(\n            file)), StandardCharsets.UTF_8));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    while ((word = in.readLine()) != null) {\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase(locale);\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","sourceOld":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              new FileInputStream(file)), IOUtils.CHARSET_UTF_8));\n    else in = new BufferedReader(IOUtils.getDecodingReader((new FileInputStream(\n            file)), IOUtils.CHARSET_UTF_8));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase(locale);\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(Path,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","sourceNew":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(Path file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              Files.newInputStream(file)), StandardCharsets.UTF_8));\n    else in = Files.newBufferedReader(file, StandardCharsets.UTF_8);\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    while ((word = in.readLine()) != null) {\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase(locale);\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","sourceOld":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              new FileInputStream(file)), StandardCharsets.UTF_8));\n    else in = new BufferedReader(IOUtils.getDecodingReader((new FileInputStream(\n            file)), StandardCharsets.UTF_8));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    while ((word = in.readLine()) != null) {\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase(locale);\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["2acf500f78aa12b92e371fd89c719291986b6b90","7d89d7e4e5101347833eea558851bf4209218619"],"e1e2115eb980754f0e25af89d6552b214dbe9b5a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec57145e34263e28da6b82568e35471f7d67df69":["e1e2115eb980754f0e25af89d6552b214dbe9b5a"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ec57145e34263e28da6b82568e35471f7d67df69"],"f4abec28b874149a7223e32cc7a01704c27790de":["7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["2acf500f78aa12b92e371fd89c719291986b6b90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"e1e2115eb980754f0e25af89d6552b214dbe9b5a":["ec57145e34263e28da6b82568e35471f7d67df69"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e1e2115eb980754f0e25af89d6552b214dbe9b5a","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ec57145e34263e28da6b82568e35471f7d67df69":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["5eb2511ababf862ea11e10761c70ee560cd84510","fe33227f6805edab2036cbb80645cc4e2d1fa424","7d89d7e4e5101347833eea558851bf4209218619","46d8ada1fff8d18cb197c38c7983225162599948"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}