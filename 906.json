{"path":"solr/core/src/java/org/apache/solr/core/XmlConfigFile#complainAboutUnknownAttributes(String,String...).mjava","commits":[{"id":"ee622110ba6021d0390037e77574743c1e55348c","date":1546700916,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/XmlConfigFile#complainAboutUnknownAttributes(String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#complainAboutUnknownAttributes(String,String...).mjava","sourceNew":"  /**\n   * Logs an error and throws an exception if any of the element(s) at the given elementXpath\n   * contains an attribute name that is not among knownAttributes. \n   */\n  public void complainAboutUnknownAttributes(String elementXpath, String... knownAttributes) {\n    SortedMap<String,SortedSet<String>> problems = new TreeMap<>();\n    NodeList nodeList = getNodeList(elementXpath, false);\n    for (int i = 0 ; i < nodeList.getLength() ; ++i) {\n      Element element = (Element)nodeList.item(i);\n      Set<String> unknownAttributes = getUnknownAttributes(element, knownAttributes);\n      if (null != unknownAttributes) {\n        String elementName = element.getNodeName();\n        SortedSet<String> allUnknownAttributes = problems.get(elementName);\n        if (null == allUnknownAttributes) {\n          allUnknownAttributes = new TreeSet<>();\n          problems.put(elementName, allUnknownAttributes);\n        }\n        allUnknownAttributes.addAll(unknownAttributes);\n      }\n    }\n    if (problems.size() > 0) {\n      StringBuilder message = new StringBuilder();\n      for (Map.Entry<String,SortedSet<String>> entry : problems.entrySet()) {\n        if (message.length() > 0) {\n          message.append(\", \");\n        }\n        message.append('<');\n        message.append(entry.getKey());\n        for (String attributeName : entry.getValue()) {\n          message.append(' ');\n          message.append(attributeName);\n          message.append(\"=\\\"...\\\"\");\n        }\n        message.append('>');\n      }\n      message.insert(0, \"Unknown attribute(s) on element(s): \");\n      String msg = message.toString();\n      SolrException.log(log, msg);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n    }\n  }\n\n","sourceOld":"  /**\n   * Logs an error and throws an exception if any of the element(s) at the given elementXpath\n   * contains an attribute name that is not among knownAttributes. \n   */\n  public void complainAboutUnknownAttributes(String elementXpath, String... knownAttributes) {\n    SortedMap<String,SortedSet<String>> problems = new TreeMap<>();\n    NodeList nodeList = getNodeList(elementXpath, false);\n    for (int i = 0 ; i < nodeList.getLength() ; ++i) {\n      Element element = (Element)nodeList.item(i);\n      Set<String> unknownAttributes = getUnknownAttributes(element, knownAttributes);\n      if (null != unknownAttributes) {\n        String elementName = element.getNodeName();\n        SortedSet<String> allUnknownAttributes = problems.get(elementName);\n        if (null == allUnknownAttributes) {\n          allUnknownAttributes = new TreeSet<>();\n          problems.put(elementName, allUnknownAttributes);\n        }\n        allUnknownAttributes.addAll(unknownAttributes);\n      }\n    }\n    if (problems.size() > 0) {\n      StringBuilder message = new StringBuilder();\n      for (Map.Entry<String,SortedSet<String>> entry : problems.entrySet()) {\n        if (message.length() > 0) {\n          message.append(\", \");\n        }\n        message.append('<');\n        message.append(entry.getKey());\n        for (String attributeName : entry.getValue()) {\n          message.append(' ');\n          message.append(attributeName);\n          message.append(\"=\\\"...\\\"\");\n        }\n        message.append('>');\n      }\n      message.insert(0, \"Unknown attribute(s) on element(s): \");\n      String msg = message.toString();\n      SolrException.log(log, msg);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee622110ba6021d0390037e77574743c1e55348c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee622110ba6021d0390037e77574743c1e55348c"]},"commit2Childs":{"ee622110ba6021d0390037e77574743c1e55348c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee622110ba6021d0390037e77574743c1e55348c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}