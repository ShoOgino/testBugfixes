{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","sourceNew":"  void addFlushableState(ThreadState perThread) {\n    if (documentsWriter.infoStream.isEnabled(\"DWFC\")) {\n      documentsWriter.infoStream.message(\"DWFC\", Thread.currentThread().getName() + \": addFlushableState \" + perThread.perThread);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.perThread;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isActive();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n      if (closed) {\n        perThread.resetWriter(null); // make this state inactive\n      } else {\n        dwpt.initialize();\n      }\n    }\n  }\n\n","sourceOld":"  void addFlushableState(ThreadState perThread) {\n    if (documentsWriter.infoStream.isEnabled(\"DWFC\")) {\n      documentsWriter.infoStream.message(\"DWFC\", Thread.currentThread().getName() + \": addFlushableState \" + perThread.perThread);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.perThread;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isActive();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n      if (closed) {\n        perThread.resetWriter(null); // make this state inactive\n      } else {\n        dwpt.initialize();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","date":1329061481,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","sourceNew":"  void addFlushableState(ThreadState perThread) {\n    if (documentsWriter.infoStream.isEnabled(\"DWFC\")) {\n      documentsWriter.infoStream.message(\"DWFC\", Thread.currentThread().getName() + \": addFlushableState \" + perThread.dwpt);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.dwpt;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isActive();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n      if (closed) {\n        perThreadPool.deactivateThreadState(perThread); // make this state inactive\n      } else {\n        perThreadPool.reinitThreadState(perThread);\n      }\n    }\n  }\n\n","sourceOld":"  void addFlushableState(ThreadState perThread) {\n    if (documentsWriter.infoStream.isEnabled(\"DWFC\")) {\n      documentsWriter.infoStream.message(\"DWFC\", Thread.currentThread().getName() + \": addFlushableState \" + perThread.perThread);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.perThread;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isActive();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n      if (closed) {\n        perThread.resetWriter(null); // make this state inactive\n      } else {\n        dwpt.initialize();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19b128c23e9f1b66a9f8518e95ec99fd965d0bb7","date":1338503231,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","sourceNew":"  void addFlushableState(ThreadState perThread) {\n    if (documentsWriter.infoStream.isEnabled(\"DWFC\")) {\n      documentsWriter.infoStream.message(\"DWFC\", \"addFlushableState \" + perThread.dwpt);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.dwpt;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isActive();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n      if (closed) {\n        perThreadPool.deactivateThreadState(perThread); // make this state inactive\n      } else {\n        perThreadPool.reinitThreadState(perThread);\n      }\n    }\n  }\n\n","sourceOld":"  void addFlushableState(ThreadState perThread) {\n    if (documentsWriter.infoStream.isEnabled(\"DWFC\")) {\n      documentsWriter.infoStream.message(\"DWFC\", Thread.currentThread().getName() + \": addFlushableState \" + perThread.dwpt);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.dwpt;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isActive();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n      if (closed) {\n        perThreadPool.deactivateThreadState(perThread); // make this state inactive\n      } else {\n        perThreadPool.reinitThreadState(perThread);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","sourceNew":"  void addFlushableState(ThreadState perThread) {\n    if (infoStream.isEnabled(\"DWFC\")) {\n      infoStream.message(\"DWFC\", \"addFlushableState \" + perThread.dwpt);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.dwpt;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isInitialized();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n        perThreadPool.reset(perThread, closed); // make this state inactive\n    }\n  }\n\n","sourceOld":"  void addFlushableState(ThreadState perThread) {\n    if (documentsWriter.infoStream.isEnabled(\"DWFC\")) {\n      documentsWriter.infoStream.message(\"DWFC\", \"addFlushableState \" + perThread.dwpt);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.dwpt;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isActive();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n      if (closed) {\n        perThreadPool.deactivateThreadState(perThread); // make this state inactive\n      } else {\n        perThreadPool.reinitThreadState(perThread);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","sourceNew":"  void addFlushableState(ThreadState perThread) {\n    if (infoStream.isEnabled(\"DWFC\")) {\n      infoStream.message(\"DWFC\", \"addFlushableState \" + perThread.dwpt);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.dwpt;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isInitialized();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n        perThreadPool.reset(perThread, closed); // make this state inactive\n    }\n  }\n\n","sourceOld":"  void addFlushableState(ThreadState perThread) {\n    if (documentsWriter.infoStream.isEnabled(\"DWFC\")) {\n      documentsWriter.infoStream.message(\"DWFC\", \"addFlushableState \" + perThread.dwpt);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.dwpt;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isActive();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n      if (closed) {\n        perThreadPool.deactivateThreadState(perThread); // make this state inactive\n      } else {\n        perThreadPool.reinitThreadState(perThread);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","sourceNew":"  void addFlushableState(ThreadState perThread) {\n    if (infoStream.isEnabled(\"DWFC\")) {\n      infoStream.message(\"DWFC\", \"addFlushableState \" + perThread.dwpt);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.dwpt;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isInitialized();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n        perThreadPool.reset(perThread, closed); // make this state inactive\n    }\n  }\n\n","sourceOld":"  void addFlushableState(ThreadState perThread) {\n    if (documentsWriter.infoStream.isEnabled(\"DWFC\")) {\n      documentsWriter.infoStream.message(\"DWFC\", \"addFlushableState \" + perThread.dwpt);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.dwpt;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isActive();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n      if (closed) {\n        perThreadPool.deactivateThreadState(perThread); // make this state inactive\n      } else {\n        perThreadPool.reinitThreadState(perThread);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5898ca35059bc3a89ba6a275ec92a5c32057aedc","date":1436893905,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","sourceNew":"  void addFlushableState(ThreadState perThread) {\n    if (infoStream.isEnabled(\"DWFC\")) {\n      infoStream.message(\"DWFC\", \"addFlushableState \" + perThread.dwpt);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.dwpt;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isInitialized();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n      perThreadPool.reset(perThread); // make this state inactive\n    }\n  }\n\n","sourceOld":"  void addFlushableState(ThreadState perThread) {\n    if (infoStream.isEnabled(\"DWFC\")) {\n      infoStream.message(\"DWFC\", \"addFlushableState \" + perThread.dwpt);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.dwpt;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isInitialized();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n        perThreadPool.reset(perThread, closed); // make this state inactive\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","sourceNew":null,"sourceOld":"  void addFlushableState(ThreadState perThread) {\n    if (infoStream.isEnabled(\"DWFC\")) {\n      infoStream.message(\"DWFC\", \"addFlushableState \" + perThread.dwpt);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.dwpt;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isInitialized();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n      perThreadPool.reset(perThread); // make this state inactive\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["5898ca35059bc3a89ba6a275ec92a5c32057aedc"],"7af110b00ea8df9429309d83e38e0533d82e144f":["19b128c23e9f1b66a9f8518e95ec99fd965d0bb7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["19b128c23e9f1b66a9f8518e95ec99fd965d0bb7","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["19b128c23e9f1b66a9f8518e95ec99fd965d0bb7","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19b128c23e9f1b66a9f8518e95ec99fd965d0bb7":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"],"5898ca35059bc3a89ba6a275ec92a5c32057aedc":["7af110b00ea8df9429309d83e38e0533d82e144f"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7af110b00ea8df9429309d83e38e0533d82e144f":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","5898ca35059bc3a89ba6a275ec92a5c32057aedc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"19b128c23e9f1b66a9f8518e95ec99fd965d0bb7":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"5898ca35059bc3a89ba6a275ec92a5c32057aedc":["264935965977b4a9e2f3920420647072c9c49176"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["19b128c23e9f1b66a9f8518e95ec99fd965d0bb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}