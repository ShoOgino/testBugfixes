{"path":"solr/core/src/java/org/apache/solr/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","commits":[{"id":"404d1ab7f6f396235047017c88d545fec15dafb7","date":1511975378,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    Sort segmentSort = context.reader().getMetaData().getSort();\n    if (segmentSort != null && canEarlyTerminate(sort, segmentSort) == false) {\n      throw new IllegalStateException(\"Cannot early terminate with sort order \" + sort + \" if segments are sorted with \" + segmentSort);\n    }\n\n    if (segmentSort != null) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            terminatedEarly.set(true);\n            throw new CollectionTerminatedException();\n          }\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    Sort segmentSort = context.reader().getMetaData().getSort();\n    if (segmentSort != null && canEarlyTerminate(sort, segmentSort) == false) {\n      throw new IllegalStateException(\"Cannot early terminate with sort order \" + sort + \" if segments are sorted with \" + segmentSort);\n    }\n\n    if (segmentSort != null) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            terminatedEarly.set(true);\n            throw new CollectionTerminatedException();\n          }\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    Sort segmentSort = context.reader().getMetaData().getSort();\n    if (segmentSort != null && canEarlyTerminate(sort, segmentSort) == false) {\n      throw new IllegalStateException(\"Cannot early terminate with sort order \" + sort + \" if segments are sorted with \" + segmentSort);\n    }\n\n    if (segmentSort != null) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            terminatedEarly.set(true);\n            throw new CollectionTerminatedException();\n          }\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    Sort segmentSort = context.reader().getMetaData().getSort();\n    if (segmentSort != null && canEarlyTerminate(sort, segmentSort) == false) {\n      throw new IllegalStateException(\"Cannot early terminate with sort order \" + sort + \" if segments are sorted with \" + segmentSort);\n    }\n\n    if (segmentSort != null) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            terminatedEarly.set(true);\n            throw new CollectionTerminatedException();\n          }\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","404d1ab7f6f396235047017c88d545fec15dafb7"],"404d1ab7f6f396235047017c88d545fec15dafb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1aad05eeff7818b0833c02ac6b743aa72054963b"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"404d1ab7f6f396235047017c88d545fec15dafb7":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1aad05eeff7818b0833c02ac6b743aa72054963b","404d1ab7f6f396235047017c88d545fec15dafb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}