{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#nextTokensPermutation().mjava","commits":[{"id":"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f","date":1215042831,"type":0,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#nextTokensPermutation().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * get next permutation of row combinations,\n   * creates list of all tokens in the row and\n   * an index from each such token to what row they exist in.\n   * finally resets the current (next) shingle size and offset.\n   */\n  private void nextTokensPermutation() {\n    Matrix.Column.Row[] rowsPermutation = permutations.next();\n    List<Matrix.Column.Row> currentPermutationRows = new ArrayList<Matrix.Column.Row>();\n    List<Token> currentPermuationTokens = new ArrayList<Token>();\n    for (Matrix.Column.Row row : rowsPermutation) {\n      for (Token shingleToken : row.getTokens()) {\n        currentPermuationTokens.add(shingleToken);\n        currentPermutationRows.add(row);\n      }\n    }\n    this.currentPermuationTokens = currentPermuationTokens;\n    this.currentPermutationRows = currentPermutationRows;\n\n    currentPermutationTokensStartOffset = 0;\n    currentShingleLength = minimumShingleSize - 1;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbf0bdceb2051d3f9cb24580a849c9cd8b17ea56","date":1221157398,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#nextTokensPermutation().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#nextTokensPermutation().mjava","sourceNew":"  /**\n   * get next permutation of row combinations,\n   * creates list of all tokens in the row and\n   * an index from each such token to what row they exist in.\n   * finally resets the current (next) shingle size and offset.\n   */\n  private void nextTokensPermutation() {\n    Matrix.Column.Row[] rowsPermutation;\n    rowsPermutation = (Matrix.Column.Row[]) permutations.next();\n    List currentPermutationRows = new ArrayList();\n    List currentPermuationTokens = new ArrayList();\n    for (int i = 0; i < rowsPermutation.length; i++) {\n      Matrix.Column.Row row = rowsPermutation[i];\n      for (Iterator iterator = row.getTokens().iterator(); iterator.hasNext();) {\n        currentPermuationTokens.add(iterator.next());\n        currentPermutationRows.add(row);\n      }\n    }\n    this.currentPermuationTokens = currentPermuationTokens;\n    this.currentPermutationRows = currentPermutationRows;\n\n    currentPermutationTokensStartOffset = 0;\n    currentShingleLength = minimumShingleSize - 1;\n\n  }\n\n","sourceOld":"  /**\n   * get next permutation of row combinations,\n   * creates list of all tokens in the row and\n   * an index from each such token to what row they exist in.\n   * finally resets the current (next) shingle size and offset.\n   */\n  private void nextTokensPermutation() {\n    Matrix.Column.Row[] rowsPermutation = permutations.next();\n    List<Matrix.Column.Row> currentPermutationRows = new ArrayList<Matrix.Column.Row>();\n    List<Token> currentPermuationTokens = new ArrayList<Token>();\n    for (Matrix.Column.Row row : rowsPermutation) {\n      for (Token shingleToken : row.getTokens()) {\n        currentPermuationTokens.add(shingleToken);\n        currentPermutationRows.add(row);\n      }\n    }\n    this.currentPermuationTokens = currentPermuationTokens;\n    this.currentPermutationRows = currentPermutationRows;\n\n    currentPermutationTokensStartOffset = 0;\n    currentShingleLength = minimumShingleSize - 1;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#nextTokensPermutation().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#nextTokensPermutation().mjava","sourceNew":"  /**\n   * get next permutation of row combinations,\n   * creates list of all tokens in the row and\n   * an index from each such token to what row they exist in.\n   * finally resets the current (next) shingle size and offset.\n   */\n  private void nextTokensPermutation() {\n    Matrix.Column.Row[] rowsPermutation;\n    rowsPermutation = (Matrix.Column.Row[]) permutations.next();\n    List currentPermutationRows = new ArrayList();\n    List currentPermuationTokens = new ArrayList();\n    for (int i = 0; i < rowsPermutation.length; i++) {\n      Matrix.Column.Row row = rowsPermutation[i];\n      for (Iterator iterator = row.getTokens().iterator(); iterator.hasNext();) {\n        currentPermuationTokens.add(iterator.next());\n        currentPermutationRows.add(row);\n      }\n    }\n    this.currentPermuationTokens = currentPermuationTokens;\n    this.currentPermutationRows = currentPermutationRows;\n\n    currentPermutationTokensStartOffset = 0;\n    currentShingleLength = minimumShingleSize - 1;\n\n  }\n\n","sourceOld":"  /**\n   * get next permutation of row combinations,\n   * creates list of all tokens in the row and\n   * an index from each such token to what row they exist in.\n   * finally resets the current (next) shingle size and offset.\n   */\n  private void nextTokensPermutation() {\n    Matrix.Column.Row[] rowsPermutation;\n    rowsPermutation = (Matrix.Column.Row[]) permutations.next();\n    List currentPermutationRows = new ArrayList();\n    List currentPermuationTokens = new ArrayList();\n    for (int i = 0; i < rowsPermutation.length; i++) {\n      Matrix.Column.Row row = rowsPermutation[i];\n      for (Iterator iterator = row.getTokens().iterator(); iterator.hasNext();) {\n        currentPermuationTokens.add(iterator.next());\n        currentPermutationRows.add(row);\n      }\n    }\n    this.currentPermuationTokens = currentPermuationTokens;\n    this.currentPermutationRows = currentPermutationRows;\n\n    currentPermutationTokensStartOffset = 0;\n    currentShingleLength = minimumShingleSize - 1;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["cbf0bdceb2051d3f9cb24580a849c9cd8b17ea56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cbf0bdceb2051d3f9cb24580a849c9cd8b17ea56":["660fdd379b3fe276cd3a63d9c5852cef6dd5d54f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["660fdd379b3fe276cd3a63d9c5852cef6dd5d54f"],"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f":["cbf0bdceb2051d3f9cb24580a849c9cd8b17ea56"],"cbf0bdceb2051d3f9cb24580a849c9cd8b17ea56":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}