{"path":"lucene/test-framework/src/java/org/apache/lucene/util/RollingBuffer#get(int).mjava","commits":[{"id":"6795c6bc2f5a6b2a2230cb20ff4744003faf7802","date":1333839972,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RollingBuffer#get(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Get T instance for this absolute position;\n   *  this is allowed to be arbitrarily far \"in the\n   *  future\" but cannot be before the last freeBefore. */\n  public T get(int pos) {\n    //System.out.println(\"RA.get pos=\" + pos + \" nextPos=\" + nextPos + \" nextWrite=\" + nextWrite + \" count=\" + count);\n    while (pos >= nextPos) {\n      if (count == buffer.length) {\n        @SuppressWarnings(\"unchecked\") T[] newBuffer = (T[]) new Resettable[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        //System.out.println(\"  grow length=\" + newBuffer.length);\n        System.arraycopy(buffer, nextWrite, newBuffer, 0, buffer.length-nextWrite);\n        System.arraycopy(buffer, 0, newBuffer, buffer.length-nextWrite, nextWrite);\n        for(int i=buffer.length;i<newBuffer.length;i++) {\n          newBuffer[i] = newInstance();\n        }\n        nextWrite = buffer.length;\n        buffer = newBuffer;\n      }\n      if (nextWrite == buffer.length) {\n        nextWrite = 0;\n      }\n      // Should have already been reset:\n      nextWrite++;\n      nextPos++;\n      count++;\n    }\n    assert inBounds(pos);\n    final int index = getIndex(pos);\n    //System.out.println(\"  pos=\" + pos + \" nextPos=\" + nextPos + \" -> index=\" + index);\n    //assert buffer[index].pos == pos;\n    return buffer[index];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ce825e9276493231308229152c48f755ce1a0a5","date":1348871483,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RollingBuffer#get(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RollingBuffer#get(int).mjava","sourceNew":"  /** Get T instance for this absolute position;\n   *  this is allowed to be arbitrarily far \"in the\n   *  future\" but cannot be before the last freeBefore. */\n  public T get(int pos) {\n    //System.out.println(\"RA.get pos=\" + pos + \" nextPos=\" + nextPos + \" nextWrite=\" + nextWrite + \" count=\" + count);\n    while (pos >= nextPos) {\n      if (count == buffer.length) {\n        @SuppressWarnings(\"unchecked\") T[] newBuffer = (T[]) new Resettable[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        //System.out.println(\"  grow length=\" + newBuffer.length);\n        System.arraycopy(buffer, nextWrite, newBuffer, 0, buffer.length-nextWrite);\n        System.arraycopy(buffer, 0, newBuffer, buffer.length-nextWrite, nextWrite);\n        for(int i=buffer.length;i<newBuffer.length;i++) {\n          newBuffer[i] = newInstance();\n        }\n        nextWrite = buffer.length;\n        buffer = newBuffer;\n      }\n      if (nextWrite == buffer.length) {\n        nextWrite = 0;\n      }\n      // Should have already been reset:\n      nextWrite++;\n      nextPos++;\n      count++;\n    }\n    assert inBounds(pos);\n    final int index = getIndex(pos);\n    //System.out.println(\"  pos=\" + pos + \" nextPos=\" + nextPos + \" -> index=\" + index);\n    //assert buffer[index].pos == pos;\n    return buffer[index];\n  }\n\n","sourceOld":"  /** Get T instance for this absolute position;\n   *  this is allowed to be arbitrarily far \"in the\n   *  future\" but cannot be before the last freeBefore. */\n  public T get(int pos) {\n    //System.out.println(\"RA.get pos=\" + pos + \" nextPos=\" + nextPos + \" nextWrite=\" + nextWrite + \" count=\" + count);\n    while (pos >= nextPos) {\n      if (count == buffer.length) {\n        @SuppressWarnings(\"unchecked\") T[] newBuffer = (T[]) new Resettable[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        //System.out.println(\"  grow length=\" + newBuffer.length);\n        System.arraycopy(buffer, nextWrite, newBuffer, 0, buffer.length-nextWrite);\n        System.arraycopy(buffer, 0, newBuffer, buffer.length-nextWrite, nextWrite);\n        for(int i=buffer.length;i<newBuffer.length;i++) {\n          newBuffer[i] = newInstance();\n        }\n        nextWrite = buffer.length;\n        buffer = newBuffer;\n      }\n      if (nextWrite == buffer.length) {\n        nextWrite = 0;\n      }\n      // Should have already been reset:\n      nextWrite++;\n      nextPos++;\n      count++;\n    }\n    assert inBounds(pos);\n    final int index = getIndex(pos);\n    //System.out.println(\"  pos=\" + pos + \" nextPos=\" + nextPos + \" -> index=\" + index);\n    //assert buffer[index].pos == pos;\n    return buffer[index];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ce825e9276493231308229152c48f755ce1a0a5":["6795c6bc2f5a6b2a2230cb20ff4744003faf7802"],"6795c6bc2f5a6b2a2230cb20ff4744003faf7802":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6ce825e9276493231308229152c48f755ce1a0a5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6795c6bc2f5a6b2a2230cb20ff4744003faf7802"],"6ce825e9276493231308229152c48f755ce1a0a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6795c6bc2f5a6b2a2230cb20ff4744003faf7802":["6ce825e9276493231308229152c48f755ce1a0a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}