{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#[T]_createInstance(String,Class[T],String,SolrCore,ResourceLoader).mjava","commits":[{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#[T]_createInstance(String,Class[T],String,SolrCore,ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#[T]_createInstance(String,Class[T],String,SolrCore).mjava","sourceNew":"  /**\n   * Creates an instance by trying a constructor that accepts a SolrCore before\n   * trying the default (no arg) constructor.\n   *\n   * @param className the instance class to create\n   * @param cast      the class or interface that the instance should extend or implement\n   * @param msg       a message helping compose the exception error if any occurs.\n   * @param core      The SolrCore instance for which this object needs to be loaded\n   * @return the desired instance\n   * @throws SolrException if the object could not be instantiated\n   */\n  public static <T> T createInstance(String className, Class<T> cast, String msg, SolrCore core, ResourceLoader resourceLoader) {\n    Class<? extends T> clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n      clazz = resourceLoader.findClass(className, cast);\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n      Constructor<?>[] cons = clazz.getConstructors();\n      for (Constructor<?> con : cons) {\n        Class<?>[] types = con.getParameterTypes();\n        if (types.length == 1 && types[0] == SolrCore.class) {\n          return cast.cast(con.newInstance(core));\n        }\n      }\n      return resourceLoader.newInstance(className, cast);//use the empty constructor\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      // The JVM likes to wrap our helpful SolrExceptions in things like\n      // \"InvocationTargetException\" that have no useful getMessage\n      if (null != e.getCause() && e.getCause() instanceof SolrException) {\n        SolrException inner = (SolrException) e.getCause();\n        throw inner;\n      }\n\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error Instantiating \" + msg + \", \" + className + \" failed to instantiate \" + cast.getName(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance by trying a constructor that accepts a SolrCore before\n   * trying the default (no arg) constructor.\n   *\n   * @param className the instance class to create\n   * @param cast      the class or interface that the instance should extend or implement\n   * @param msg       a message helping compose the exception error if any occurs.\n   * @param core      The SolrCore instance for which this object needs to be loaded\n   * @return the desired instance\n   * @throws SolrException if the object could not be instantiated\n   */\n  public static <T> T createInstance(String className, Class<T> cast, String msg, SolrCore core) {\n    Class<? extends T> clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n      clazz = core.getResourceLoader().findClass(className, cast);\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n      Constructor<?>[] cons = clazz.getConstructors();\n      for (Constructor<?> con : cons) {\n        Class<?>[] types = con.getParameterTypes();\n        if (types.length == 1 && types[0] == SolrCore.class) {\n          return cast.cast(con.newInstance(core));\n        }\n      }\n      return core.getResourceLoader().newInstance(className, cast);//use the empty constructor\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      // The JVM likes to wrap our helpful SolrExceptions in things like\n      // \"InvocationTargetException\" that have no useful getMessage\n      if (null != e.getCause() && e.getCause() instanceof SolrException) {\n        SolrException inner = (SolrException) e.getCause();\n        throw inner;\n      }\n\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error Instantiating \" + msg + \", \" + className + \" failed to instantiate \" + cast.getName(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#[T]_createInstance(String,Class[T],String,SolrCore,ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates an instance by trying a constructor that accepts a SolrCore before\n   * trying the default (no arg) constructor.\n   *\n   * @param className the instance class to create\n   * @param cast      the class or interface that the instance should extend or implement\n   * @param msg       a message helping compose the exception error if any occurs.\n   * @param core      The SolrCore instance for which this object needs to be loaded\n   * @return the desired instance\n   * @throws SolrException if the object could not be instantiated\n   */\n  public static <T> T createInstance(String className, Class<T> cast, String msg, SolrCore core, ResourceLoader resourceLoader) {\n    Class<? extends T> clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n      clazz = resourceLoader.findClass(className, cast);\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n      Constructor<?>[] cons = clazz.getConstructors();\n      for (Constructor<?> con : cons) {\n        Class<?>[] types = con.getParameterTypes();\n        if (types.length == 1 && types[0] == SolrCore.class) {\n          return cast.cast(con.newInstance(core));\n        }\n      }\n      return resourceLoader.newInstance(className, cast);//use the empty constructor\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      // The JVM likes to wrap our helpful SolrExceptions in things like\n      // \"InvocationTargetException\" that have no useful getMessage\n      if (null != e.getCause() && e.getCause() instanceof SolrException) {\n        SolrException inner = (SolrException) e.getCause();\n        throw inner;\n      }\n\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error Instantiating \" + msg + \", \" + className + \" failed to instantiate \" + cast.getName(), e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96e0d4494fe54b31c7f0151f3a632124ab806351","date":1512410218,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#[T]_createInstance(String,Class[T],String,SolrCore,ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#[T]_createInstance(String,Class[T],String,SolrCore,ResourceLoader).mjava","sourceNew":"  /**\n   * Creates an instance by trying a constructor that accepts a SolrCore before\n   * trying the default (no arg) constructor.\n   *\n   * @param className the instance class to create\n   * @param cast      the class or interface that the instance should extend or implement\n   * @param msg       a message helping compose the exception error if any occurs.\n   * @param core      The SolrCore instance for which this object needs to be loaded\n   * @return the desired instance\n   * @throws SolrException if the object could not be instantiated\n   */\n  public static <T> T createInstance(String className, Class<T> cast, String msg, SolrCore core, ResourceLoader resourceLoader) {\n    Class<? extends T> clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n      clazz = resourceLoader.findClass(className, cast);\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n      Constructor<?>[] cons = clazz.getConstructors();\n      for (Constructor<?> con : cons) {\n        Class<?>[] types = con.getParameterTypes();\n        if (types.length == 1 && types[0] == SolrCore.class) {\n          return cast.cast(con.newInstance(core));\n        }\n      }\n      return resourceLoader.newInstance(className, cast);//use the empty constructor\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      // The JVM likes to wrap our helpful SolrExceptions in things like\n      // \"InvocationTargetException\" that have no useful getMessage\n      if (null != e.getCause() && e.getCause() instanceof SolrException) {\n        SolrException inner = (SolrException) e.getCause();\n        throw inner;\n      }\n\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error Instantiating \" + msg + \", \" + className + \" failed to instantiate \" + cast.getName(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance by trying a constructor that accepts a SolrCore before\n   * trying the default (no arg) constructor.\n   *\n   * @param className the instance class to create\n   * @param cast      the class or interface that the instance should extend or implement\n   * @param msg       a message helping compose the exception error if any occurs.\n   * @param core      The SolrCore instance for which this object needs to be loaded\n   * @return the desired instance\n   * @throws SolrException if the object could not be instantiated\n   */\n  public static <T> T createInstance(String className, Class<T> cast, String msg, SolrCore core, ResourceLoader resourceLoader) {\n    Class<? extends T> clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n      clazz = resourceLoader.findClass(className, cast);\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n      Constructor<?>[] cons = clazz.getConstructors();\n      for (Constructor<?> con : cons) {\n        Class<?>[] types = con.getParameterTypes();\n        if (types.length == 1 && types[0] == SolrCore.class) {\n          return cast.cast(con.newInstance(core));\n        }\n      }\n      return resourceLoader.newInstance(className, cast);//use the empty constructor\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      // The JVM likes to wrap our helpful SolrExceptions in things like\n      // \"InvocationTargetException\" that have no useful getMessage\n      if (null != e.getCause() && e.getCause() instanceof SolrException) {\n        SolrException inner = (SolrException) e.getCause();\n        throw inner;\n      }\n\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error Instantiating \" + msg + \", \" + className + \" failed to instantiate \" + cast.getName(), e);\n    }\n  }\n\n","bugFix":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9aea0485ecacb6734c17da2d02569816c23a69c1"],"96e0d4494fe54b31c7f0151f3a632124ab806351":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96e0d4494fe54b31c7f0151f3a632124ab806351"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"96e0d4494fe54b31c7f0151f3a632124ab806351":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","96e0d4494fe54b31c7f0151f3a632124ab806351"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}