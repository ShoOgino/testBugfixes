{"path":"src/java/org/apache/lucene/search/function/CustomScoreProvider#customScore(int,float,float[]).mjava","commits":[{"id":"affefdda19991b74568e601456baad0c8e5c2f65","date":1266776825,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/function/CustomScoreProvider#customScore(int,float,float[]).mjava","pathOld":"src/java/org/apache/lucene/search/function/CustomScoreQuery#customScore(int,float,float[]).mjava","sourceNew":"  /**\n   * Compute a custom score by the subQuery score and a number of \n   * {@link ValueSourceQuery} scores.\n   * <p> \n   * Subclasses can override this method to modify the custom score.  \n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override the other \n   * {@link #customScore(int, float, float) customScore()} \n   * method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of given scores:\n   * <pre>\n   *     ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ...\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScores scores of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScores[]) throws IOException {\n    if (valSrcScores.length == 1) {\n      return customScore(doc, subQueryScore, valSrcScores[0]);\n    }\n    if (valSrcScores.length == 0) {\n      return customScore(doc, subQueryScore, 1);\n    }\n    float score = subQueryScore;\n    for(int i = 0; i < valSrcScores.length; i++) {\n      score *= valSrcScores[i];\n    }\n    return score;\n  }\n\n","sourceOld":"  /**\n   * Compute a custom score by the subQuery score and a number of \n   * ValueSourceQuery scores.\n   * <p> \n   * Subclasses can override this method to modify the custom score.  \n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override the other \n   * {@link #customScore(int, float, float) customScore()} \n   * method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of given scores:\n   * <pre>\n   *     ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ...\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScores scores of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScores[]) {\n    if (valSrcScores.length == 1) {\n      return customScore(doc, subQueryScore, valSrcScores[0]);\n    }\n    if (valSrcScores.length == 0) {\n      return customScore(doc, subQueryScore, 1);\n    }\n    float score = subQueryScore;\n    for(int i = 0; i < valSrcScores.length; i++) {\n      score *= valSrcScores[i];\n    }\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/function/CustomScoreProvider#customScore(int,float,float[]).mjava","pathOld":"src/java/org/apache/lucene/search/function/CustomScoreProvider#customScore(int,float,float[]).mjava","sourceNew":"  /**\n   * Compute a custom score by the subQuery score and a number of \n   * {@link ValueSourceQuery} scores.\n   * <p> \n   * Subclasses can override this method to modify the custom score.  \n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override the other \n   * {@link #customScore(int, float, float) customScore()} \n   * method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of given scores:\n   * <pre>\n   *     ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ...\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScores scores of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScores[]) throws IOException {\n    if (valSrcScores.length == 1) {\n      return customScore(doc, subQueryScore, valSrcScores[0]);\n    }\n    if (valSrcScores.length == 0) {\n      return customScore(doc, subQueryScore, 1);\n    }\n    float score = subQueryScore;\n    for(int i = 0; i < valSrcScores.length; i++) {\n      score *= valSrcScores[i];\n    }\n    return score;\n  }\n\n","sourceOld":"  /**\n   * Compute a custom score by the subQuery score and a number of \n   * {@link ValueSourceQuery} scores.\n   * <p> \n   * Subclasses can override this method to modify the custom score.  \n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override the other \n   * {@link #customScore(int, float, float) customScore()} \n   * method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of given scores:\n   * <pre>\n   *     ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ...\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScores scores of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScores[]) throws IOException {\n    if (valSrcScores.length == 1) {\n      return customScore(doc, subQueryScore, valSrcScores[0]);\n    }\n    if (valSrcScores.length == 0) {\n      return customScore(doc, subQueryScore, 1);\n    }\n    float score = subQueryScore;\n    for(int i = 0; i < valSrcScores.length; i++) {\n      score *= valSrcScores[i];\n    }\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"affefdda19991b74568e601456baad0c8e5c2f65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["affefdda19991b74568e601456baad0c8e5c2f65"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["affefdda19991b74568e601456baad0c8e5c2f65"],"affefdda19991b74568e601456baad0c8e5c2f65":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}