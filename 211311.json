{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testSimpleHighlightTest().mjava","commits":[{"id":"695169f094a98bd9ec30d1e5ea6f2f9984de7be9","date":1358933753,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testSimpleHighlightTest().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field field = new Field(\"field\", \"This is a test where foo is highlighed and should be highlighted\", type);\n    \n    doc.add(field);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    \n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    FieldQuery fieldQuery  = highlighter.getFieldQuery( new TermQuery(new Term(\"field\", \"foo\")), reader );\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    // highlighted results are centered \n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be highlighted\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 52, 1);\n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 30, 1);\n    assertEquals(\"a test where <b>foo</b> is highlighed\", bestFragments[0]);\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testSimpleHighlightTest().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field field = new Field(\"field\", \"This is a test where foo is highlighed and should be highlighted\", type);\n    \n    doc.add(field);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    \n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    FieldQuery fieldQuery  = highlighter.getFieldQuery( new TermQuery(new Term(\"field\", \"foo\")), reader );\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    // highlighted results are centered \n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be highlighted\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 52, 1);\n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 30, 1);\n    assertEquals(\"a test where <b>foo</b> is highlighed\", bestFragments[0]);\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testSimpleHighlightTest().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testSimpleHighlightTest().mjava","sourceNew":"  public void testSimpleHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field field = new Field(\"field\", \"This is a test where foo is highlighed and should be highlighted\", type);\n    \n    doc.add(field);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    \n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    FieldQuery fieldQuery  = highlighter.getFieldQuery( new TermQuery(new Term(\"field\", \"foo\")), reader );\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    // highlighted results are centered \n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be highlighted\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 52, 1);\n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 30, 1);\n    assertEquals(\"a test where <b>foo</b> is highlighed\", bestFragments[0]);\n    reader.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field field = new Field(\"field\", \"This is a test where foo is highlighed and should be highlighted\", type);\n    \n    doc.add(field);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    \n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    FieldQuery fieldQuery  = highlighter.getFieldQuery( new TermQuery(new Term(\"field\", \"foo\")), reader );\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    // highlighted results are centered \n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be highlighted\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 52, 1);\n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 30, 1);\n    assertEquals(\"a test where <b>foo</b> is highlighed\", bestFragments[0]);\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testSimpleHighlightTest().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testSimpleHighlightTest().mjava","sourceNew":"  public void testSimpleHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field field = new Field(\"field\", \"This is a test where foo is highlighed and should be highlighted\", type);\n    \n    doc.add(field);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    \n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    FieldQuery fieldQuery  = highlighter.getFieldQuery( new TermQuery(new Term(\"field\", \"foo\")), reader );\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    // highlighted results are centered \n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be highlighted\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 52, 1);\n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 30, 1);\n    assertEquals(\"a test where <b>foo</b> is highlighed\", bestFragments[0]);\n    reader.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field field = new Field(\"field\", \"This is a test where foo is highlighed and should be highlighted\", type);\n    \n    doc.add(field);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    \n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    FieldQuery fieldQuery  = highlighter.getFieldQuery( new TermQuery(new Term(\"field\", \"foo\")), reader );\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    // highlighted results are centered \n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be highlighted\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 52, 1);\n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 30, 1);\n    assertEquals(\"a test where <b>foo</b> is highlighed\", bestFragments[0]);\n    reader.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testSimpleHighlightTest().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testSimpleHighlightTest().mjava","sourceNew":"  public void testSimpleHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field field = new Field(\"field\", \"This is a test where foo is highlighed and should be highlighted\", type);\n    \n    doc.add(field);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    \n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    FieldQuery fieldQuery  = highlighter.getFieldQuery( new TermQuery(new Term(\"field\", \"foo\")), reader );\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    // highlighted results are centered \n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be highlighted\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 52, 1);\n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 30, 1);\n    assertEquals(\"a test where <b>foo</b> is highlighed\", bestFragments[0]);\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field field = new Field(\"field\", \"This is a test where foo is highlighed and should be highlighted\", type);\n    \n    doc.add(field);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    \n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    FieldQuery fieldQuery  = highlighter.getFieldQuery( new TermQuery(new Term(\"field\", \"foo\")), reader );\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    // highlighted results are centered \n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be highlighted\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 52, 1);\n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 30, 1);\n    assertEquals(\"a test where <b>foo</b> is highlighed\", bestFragments[0]);\n    reader.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testSimpleHighlightTest().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testSimpleHighlightTest().mjava","sourceNew":"  public void testSimpleHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field field = new Field(\"field\", \"This is a test where foo is highlighed and should be highlighted\", type);\n    \n    doc.add(field);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    \n    IndexReader reader = DirectoryReader.open(writer);\n    int docId = 0;\n    FieldQuery fieldQuery  = highlighter.getFieldQuery( new TermQuery(new Term(\"field\", \"foo\")), reader );\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    // highlighted results are centered \n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be highlighted\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 52, 1);\n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 30, 1);\n    assertEquals(\"a test where <b>foo</b> is highlighed\", bestFragments[0]);\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field field = new Field(\"field\", \"This is a test where foo is highlighed and should be highlighted\", type);\n    \n    doc.add(field);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    \n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    FieldQuery fieldQuery  = highlighter.getFieldQuery( new TermQuery(new Term(\"field\", \"foo\")), reader );\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    // highlighted results are centered \n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be highlighted\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 52, 1);\n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 30, 1);\n    assertEquals(\"a test where <b>foo</b> is highlighed\", bestFragments[0]);\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"695169f094a98bd9ec30d1e5ea6f2f9984de7be9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a1862266772deb28cdcb7d996b64d2177022687":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["695169f094a98bd9ec30d1e5ea6f2f9984de7be9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a1862266772deb28cdcb7d996b64d2177022687"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","695169f094a98bd9ec30d1e5ea6f2f9984de7be9"]},"commit2Childs":{"695169f094a98bd9ec30d1e5ea6f2f9984de7be9":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b2d5244a676b83c2d551c3746e8181588ba619e1"],"2a1862266772deb28cdcb7d996b64d2177022687":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["695169f094a98bd9ec30d1e5ea6f2f9984de7be9","b2d5244a676b83c2d551c3746e8181588ba619e1"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2a1862266772deb28cdcb7d996b64d2177022687"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b2d5244a676b83c2d551c3746e8181588ba619e1":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}