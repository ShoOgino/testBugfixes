{"path":"src/java/org/apache/lucene/index/SegmentTermDocs#read(int[],int[]).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentTermDocs#read(int[],int[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Optimized implementation. */\n  public int read(final int[] docs, final int[] freqs)\n      throws IOException {\n    final int end = docs.length;\n    int i = 0;\n    while (i < end && freqCount > 0) {\n\n      // manually inlined call to next() for speed\n      final int docCode = freqStream.readVInt();\n      doc += docCode >>> 1;\t\t\t  // shift off low bit\n      if ((docCode & 1) != 0)\t\t\t  // if low bit is set\n\tfreq = 1;\t\t\t\t  // freq is one\n      else\n\tfreq = freqStream.readVInt();\t\t  // else read freq\n      freqCount--;\n   \n      if (deletedDocs == null || !deletedDocs.get(doc)) {\n\tdocs[i] = doc;\n\tfreqs[i] = freq;\n\t++i;\n      }\n     }\n    return i;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7fb6d70db034a5456ae560175dd1b821eea9ff4","date":1066759157,"type":4,"author":"Doug Cutting","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/SegmentTermDocs#read(int[],int[]).mjava","sourceNew":null,"sourceOld":"  /** Optimized implementation. */\n  public int read(final int[] docs, final int[] freqs)\n      throws IOException {\n    final int end = docs.length;\n    int i = 0;\n    while (i < end && freqCount > 0) {\n\n      // manually inlined call to next() for speed\n      final int docCode = freqStream.readVInt();\n      doc += docCode >>> 1;\t\t\t  // shift off low bit\n      if ((docCode & 1) != 0)\t\t\t  // if low bit is set\n\tfreq = 1;\t\t\t\t  // freq is one\n      else\n\tfreq = freqStream.readVInt();\t\t  // else read freq\n      freqCount--;\n   \n      if (deletedDocs == null || !deletedDocs.get(doc)) {\n\tdocs[i] = doc;\n\tfreqs[i] = freq;\n\t++i;\n      }\n     }\n    return i;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafd816608011f66422f3052c37962973582d12a","date":1087172166,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentTermDocs#read(int[],int[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Optimized implementation. */\n  public int read(final int[] docs, final int[] freqs)\n          throws IOException {\n    final int length = docs.length;\n    int i = 0;\n    while (i < length && count < df) {\n\n      // manually inlined call to next() for speed\n      final int docCode = freqStream.readVInt();\n      doc += docCode >>> 1;\t\t\t  // shift off low bit\n      if ((docCode & 1) != 0)\t\t\t  // if low bit is set\n        freq = 1;\t\t\t\t  // freq is one\n      else\n        freq = freqStream.readVInt();\t\t  // else read freq\n      count++;\n\n      if (deletedDocs == null || !deletedDocs.get(doc)) {\n        docs[i] = doc;\n        freqs[i] = freq;\n        ++i;\n      }\n    }\n    return i;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709","date":1180597733,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentTermDocs#read(int[],int[]).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentTermDocs#read(int[],int[]).mjava","sourceNew":"  /** Optimized implementation. */\n  public int read(final int[] docs, final int[] freqs)\n          throws IOException {\n    final int length = docs.length;\n    int i = 0;\n    while (i < length && count < df) {\n\n      // manually inlined call to next() for speed\n      final int docCode = freqStream.readVInt();\n      doc += docCode >>> 1;       // shift off low bit\n      if ((docCode & 1) != 0)       // if low bit is set\n        freq = 1;         // freq is one\n      else\n        freq = freqStream.readVInt();     // else read freq\n      count++;\n\n      if (deletedDocs == null || !deletedDocs.get(doc)) {\n        docs[i] = doc;\n        freqs[i] = freq;\n        ++i;\n      }\n    }\n    return i;\n  }\n\n","sourceOld":"  /** Optimized implementation. */\n  public int read(final int[] docs, final int[] freqs)\n          throws IOException {\n    final int length = docs.length;\n    int i = 0;\n    while (i < length && count < df) {\n\n      // manually inlined call to next() for speed\n      final int docCode = freqStream.readVInt();\n      doc += docCode >>> 1;\t\t\t  // shift off low bit\n      if ((docCode & 1) != 0)\t\t\t  // if low bit is set\n        freq = 1;\t\t\t\t  // freq is one\n      else\n        freq = freqStream.readVInt();\t\t  // else read freq\n      count++;\n\n      if (deletedDocs == null || !deletedDocs.get(doc)) {\n        docs[i] = doc;\n        freqs[i] = freq;\n        ++i;\n      }\n    }\n    return i;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902ba79f4590a41c663c447756d2e5041cbbdda9","date":1217956662,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentTermDocs#read(int[],int[]).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentTermDocs#read(int[],int[]).mjava","sourceNew":"  /** Optimized implementation. */\n  public int read(final int[] docs, final int[] freqs)\n          throws IOException {\n    final int length = docs.length;\n    if (currentFieldOmitTf) {\n      return readNoTf(docs, freqs, length);\n    } else {\n      int i = 0;\n      while (i < length && count < df) {\n        // manually inlined call to next() for speed\n        final int docCode = freqStream.readVInt();\n        doc += docCode >>> 1;       // shift off low bit\n        if ((docCode & 1) != 0)       // if low bit is set\n          freq = 1;         // freq is one\n        else\n          freq = freqStream.readVInt();     // else read freq\n        count++;\n\n        if (deletedDocs == null || !deletedDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      return i;\n    }\n  }\n\n","sourceOld":"  /** Optimized implementation. */\n  public int read(final int[] docs, final int[] freqs)\n          throws IOException {\n    final int length = docs.length;\n    int i = 0;\n    while (i < length && count < df) {\n\n      // manually inlined call to next() for speed\n      final int docCode = freqStream.readVInt();\n      doc += docCode >>> 1;       // shift off low bit\n      if ((docCode & 1) != 0)       // if low bit is set\n        freq = 1;         // freq is one\n      else\n        freq = freqStream.readVInt();     // else read freq\n      count++;\n\n      if (deletedDocs == null || !deletedDocs.get(doc)) {\n        docs[i] = doc;\n        freqs[i] = freq;\n        ++i;\n      }\n    }\n    return i;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"066b6ff5a08e35c3b6880e7c3ddda79526acdab1","date":1237569961,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentTermDocs#read(int[],int[]).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentTermDocs#read(int[],int[]).mjava","sourceNew":"  /** Optimized implementation. */\n  public int read(final int[] docs, final int[] freqs)\n          throws IOException {\n    final int length = docs.length;\n    if (currentFieldOmitTermFreqAndPositions) {\n      return readNoTf(docs, freqs, length);\n    } else {\n      int i = 0;\n      while (i < length && count < df) {\n        // manually inlined call to next() for speed\n        final int docCode = freqStream.readVInt();\n        doc += docCode >>> 1;       // shift off low bit\n        if ((docCode & 1) != 0)       // if low bit is set\n          freq = 1;         // freq is one\n        else\n          freq = freqStream.readVInt();     // else read freq\n        count++;\n\n        if (deletedDocs == null || !deletedDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      return i;\n    }\n  }\n\n","sourceOld":"  /** Optimized implementation. */\n  public int read(final int[] docs, final int[] freqs)\n          throws IOException {\n    final int length = docs.length;\n    if (currentFieldOmitTf) {\n      return readNoTf(docs, freqs, length);\n    } else {\n      int i = 0;\n      while (i < length && count < df) {\n        // manually inlined call to next() for speed\n        final int docCode = freqStream.readVInt();\n        doc += docCode >>> 1;       // shift off low bit\n        if ((docCode & 1) != 0)       // if low bit is set\n          freq = 1;         // freq is one\n        else\n          freq = freqStream.readVInt();     // else read freq\n        count++;\n\n        if (deletedDocs == null || !deletedDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      return i;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentTermDocs#read(int[],int[]).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentTermDocs#read(int[],int[]).mjava","sourceNew":"  /** Optimized implementation. */\n  public int read(final int[] docs, final int[] freqs)\n          throws IOException {\n    final int length = docs.length;\n    if (currentFieldOmitTermFreqAndPositions) {\n      return readNoTf(docs, freqs, length);\n    } else {\n      int i = 0;\n      while (i < length && count < df) {\n        // manually inlined call to next() for speed\n        final int docCode = freqStream.readVInt();\n        doc += docCode >>> 1;       // shift off low bit\n        if ((docCode & 1) != 0)       // if low bit is set\n          freq = 1;         // freq is one\n        else\n          freq = freqStream.readVInt();     // else read freq\n        count++;\n\n        if (deletedDocs == null || !deletedDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      return i;\n    }\n  }\n\n","sourceOld":"  /** Optimized implementation. */\n  public int read(final int[] docs, final int[] freqs)\n          throws IOException {\n    final int length = docs.length;\n    if (currentFieldOmitTermFreqAndPositions) {\n      return readNoTf(docs, freqs, length);\n    } else {\n      int i = 0;\n      while (i < length && count < df) {\n        // manually inlined call to next() for speed\n        final int docCode = freqStream.readVInt();\n        doc += docCode >>> 1;       // shift off low bit\n        if ((docCode & 1) != 0)       // if low bit is set\n          freq = 1;         // freq is one\n        else\n          freq = freqStream.readVInt();     // else read freq\n        count++;\n\n        if (deletedDocs == null || !deletedDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      return i;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eafd816608011f66422f3052c37962973582d12a":["e7fb6d70db034a5456ae560175dd1b821eea9ff4"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7fb6d70db034a5456ae560175dd1b821eea9ff4":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["08d1ee9808e270c86ce5c9be08b8bd7a19d0a709"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709":["eafd816608011f66422f3052c37962973582d12a"]},"commit2Childs":{"eafd816608011f66422f3052c37962973582d12a":["08d1ee9808e270c86ce5c9be08b8bd7a19d0a709"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["e7fb6d70db034a5456ae560175dd1b821eea9ff4"],"e7fb6d70db034a5456ae560175dd1b821eea9ff4":["eafd816608011f66422f3052c37962973582d12a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}