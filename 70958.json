{"path":"solr/core/src/java/org/apache/solr/schema/FieldType#getUninversionType(SchemaField).mjava","commits":[{"id":"30b6ad849a21206db510322a3f583ca70ae20a2f","date":1399996150,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getUninversionType(SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * DocValues is not enabled for a field, but its indexed, docvalues can be constructed \n   * on the fly (uninverted, aka fieldcache) on the first request to sort, facet, etc. \n   * This specifies the structure to use.\n   * \n   * @param sf field instance\n   * @return type to uninvert, or {@code null} (to disallow uninversion for the field)\n   */\n  public abstract UninvertingReader.Type getUninversionType(SchemaField sf);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getUninversionType(SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * DocValues is not enabled for a field, but its indexed, docvalues can be constructed \n   * on the fly (uninverted, aka fieldcache) on the first request to sort, facet, etc. \n   * This specifies the structure to use.\n   * \n   * @param sf field instance\n   * @return type to uninvert, or {@code null} (to disallow uninversion for the field)\n   */\n  public abstract UninvertingReader.Type getUninversionType(SchemaField sf);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getUninversionType(SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * DocValues is not enabled for a field, but its indexed, docvalues can be constructed \n   * on the fly (uninverted, aka fieldcache) on the first request to sort, facet, etc. \n   * This specifies the structure to use.\n   * \n   * @param sf field instance\n   * @return type to uninvert, or {@code null} (to disallow uninversion for the field)\n   */\n  public abstract UninvertingReader.Type getUninversionType(SchemaField sf);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getUninversionType(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getUninversionType(SchemaField).mjava","sourceNew":"  /**\n   * DocValues is not enabled for a field, but it's indexed, docvalues can be constructed \n   * on the fly (uninverted, aka fieldcache) on the first request to sort, facet, etc. \n   * This specifies the structure to use.\n   * \n   * @param sf field instance\n   * @return type to uninvert, or {@code null} (to disallow uninversion for the field)\n   */\n  public abstract UninvertingReader.Type getUninversionType(SchemaField sf);\n\n","sourceOld":"  /**\n   * DocValues is not enabled for a field, but its indexed, docvalues can be constructed \n   * on the fly (uninverted, aka fieldcache) on the first request to sort, facet, etc. \n   * This specifies the structure to use.\n   * \n   * @param sf field instance\n   * @return type to uninvert, or {@code null} (to disallow uninversion for the field)\n   */\n  public abstract UninvertingReader.Type getUninversionType(SchemaField sf);\n\n","bugFix":null,"bugIntro":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79900e89f08cc17c4bcf49789dd61a2236ee7840","date":1492541915,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getUninversionType(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getUninversionType(SchemaField).mjava","sourceNew":"  /**\n   * If DocValues is not enabled for a field, but it's indexed, docvalues can be constructed \n   * on the fly (uninverted, aka fieldcache) on the first request to sort, facet, etc. \n   * This specifies the structure to use.\n   * \n   * @param sf field instance\n   * @return type to uninvert, or {@code null} (to disallow uninversion for the field)\n   */\n  public abstract UninvertingReader.Type getUninversionType(SchemaField sf);\n\n","sourceOld":"  /**\n   * DocValues is not enabled for a field, but it's indexed, docvalues can be constructed \n   * on the fly (uninverted, aka fieldcache) on the first request to sort, facet, etc. \n   * This specifies the structure to use.\n   * \n   * @param sf field instance\n   * @return type to uninvert, or {@code null} (to disallow uninversion for the field)\n   */\n  public abstract UninvertingReader.Type getUninversionType(SchemaField sf);\n\n","bugFix":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getUninversionType(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getUninversionType(SchemaField).mjava","sourceNew":"  /**\n   * If DocValues is not enabled for a field, but it's indexed, docvalues can be constructed \n   * on the fly (uninverted, aka fieldcache) on the first request to sort, facet, etc. \n   * This specifies the structure to use.\n   * \n   * @param sf field instance\n   * @return type to uninvert, or {@code null} (to disallow uninversion for the field)\n   */\n  public abstract UninvertingReader.Type getUninversionType(SchemaField sf);\n\n","sourceOld":"  /**\n   * DocValues is not enabled for a field, but it's indexed, docvalues can be constructed \n   * on the fly (uninverted, aka fieldcache) on the first request to sort, facet, etc. \n   * This specifies the structure to use.\n   * \n   * @param sf field instance\n   * @return type to uninvert, or {@code null} (to disallow uninversion for the field)\n   */\n  public abstract UninvertingReader.Type getUninversionType(SchemaField sf);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e","date":1541777404,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getUninversionType(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getUninversionType(SchemaField).mjava","sourceNew":"  /**\n   * <p>\n   * If DocValues is not enabled for a field, but it's indexed, docvalues can be constructed \n   * on the fly (uninverted, aka fieldcache) on the first request to sort, facet, etc. \n   * This specifies the structure to use.\n   * </p>\n   * <p>\n   * This method will not be used if the field is (effectively) <code>uninvertible=\"false\"</code>\n   * </p>\n   * \n   * @param sf field instance\n   * @return type to uninvert, or {@code null} (to disallow uninversion for the field)\n   * @see SchemaField#isUninvertible()\n   */\n  public abstract UninvertingReader.Type getUninversionType(SchemaField sf);\n\n","sourceOld":"  /**\n   * If DocValues is not enabled for a field, but it's indexed, docvalues can be constructed \n   * on the fly (uninverted, aka fieldcache) on the first request to sort, facet, etc. \n   * This specifies the structure to use.\n   * \n   * @param sf field instance\n   * @return type to uninvert, or {@code null} (to disallow uninversion for the field)\n   */\n  public abstract UninvertingReader.Type getUninversionType(SchemaField sf);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30b6ad849a21206db510322a3f583ca70ae20a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"30b6ad849a21206db510322a3f583ca70ae20a2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","79900e89f08cc17c4bcf49789dd61a2236ee7840"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","30b6ad849a21206db510322a3f583ca70ae20a2f","56572ec06f1407c066d6b7399413178b33176cd8"],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"30b6ad849a21206db510322a3f583ca70ae20a2f":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}