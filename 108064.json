{"path":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#writeCommit(CommitUpdateCommand,int).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#writeCommit(CommitUpdateCommand,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public long writeCommit(CommitUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec(resolver);\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 4);\n        codec.writeInt(UpdateLog.COMMIT | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeTag(JavaBinCodec.INT); // Enforce the encoding of a plain integer, to simplify decoding\n        fos.writeInt(numRecords + 1); // the number of records in the file - +1 to account for the commit operation being written\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n\n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        isReplaying = false; // we have replayed and appended a commit record with the number of records in the file\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1455c941cc4ce652efc776fc23471b0e499246f6","date":1528086751,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#writeCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#writeCommit(CommitUpdateCommand,int).mjava","sourceNew":"  @Override\n  public long writeCommit(CommitUpdateCommand cmd) {\n    LogCodec codec = new LogCodec(resolver);\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 4);\n        codec.writeInt(UpdateLog.COMMIT);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeTag(JavaBinCodec.INT); // Enforce the encoding of a plain integer, to simplify decoding\n        fos.writeInt(numRecords + 1); // the number of records in the file - +1 to account for the commit operation being written\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n\n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        isReplaying = false; // we have replayed and appended a commit record with the number of records in the file\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public long writeCommit(CommitUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec(resolver);\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 4);\n        codec.writeInt(UpdateLog.COMMIT | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeTag(JavaBinCodec.INT); // Enforce the encoding of a plain integer, to simplify decoding\n        fos.writeInt(numRecords + 1); // the number of records in the file - +1 to account for the commit operation being written\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n\n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        isReplaying = false; // we have replayed and appended a commit record with the number of records in the file\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":5,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#writeCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#writeCommit(CommitUpdateCommand,int).mjava","sourceNew":"  @Override\n  public long writeCommit(CommitUpdateCommand cmd) {\n    LogCodec codec = new LogCodec(resolver);\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 4);\n        codec.writeInt(UpdateLog.COMMIT);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeTag(JavaBinCodec.INT); // Enforce the encoding of a plain integer, to simplify decoding\n        fos.writeInt(numRecords + 1); // the number of records in the file - +1 to account for the commit operation being written\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n\n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        isReplaying = false; // we have replayed and appended a commit record with the number of records in the file\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public long writeCommit(CommitUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec(resolver);\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 4);\n        codec.writeInt(UpdateLog.COMMIT | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeTag(JavaBinCodec.INT); // Enforce the encoding of a plain integer, to simplify decoding\n        fos.writeInt(numRecords + 1); // the number of records in the file - +1 to account for the commit operation being written\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n\n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        isReplaying = false; // we have replayed and appended a commit record with the number of records in the file\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":5,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#writeCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#writeCommit(CommitUpdateCommand,int).mjava","sourceNew":"  @Override\n  public long writeCommit(CommitUpdateCommand cmd) {\n    LogCodec codec = new LogCodec(resolver);\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 4);\n        codec.writeInt(UpdateLog.COMMIT);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeTag(JavaBinCodec.INT); // Enforce the encoding of a plain integer, to simplify decoding\n        fos.writeInt(numRecords + 1); // the number of records in the file - +1 to account for the commit operation being written\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n\n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        isReplaying = false; // we have replayed and appended a commit record with the number of records in the file\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public long writeCommit(CommitUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec(resolver);\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 4);\n        codec.writeInt(UpdateLog.COMMIT | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeTag(JavaBinCodec.INT); // Enforce the encoding of a plain integer, to simplify decoding\n        fos.writeInt(numRecords + 1); // the number of records in the file - +1 to account for the commit operation being written\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n\n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        isReplaying = false; // we have replayed and appended a commit record with the number of records in the file\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["86290366cefc1b9d4eced13b430858c4a4c0421d","1455c941cc4ce652efc776fc23471b0e499246f6"],"f592209545c71895260367152601e9200399776d":["86290366cefc1b9d4eced13b430858c4a4c0421d","1455c941cc4ce652efc776fc23471b0e499246f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1455c941cc4ce652efc776fc23471b0e499246f6"],"1455c941cc4ce652efc776fc23471b0e499246f6":["86290366cefc1b9d4eced13b430858c4a4c0421d"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","1455c941cc4ce652efc776fc23471b0e499246f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f592209545c71895260367152601e9200399776d":[],"1455c941cc4ce652efc776fc23471b0e499246f6":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}