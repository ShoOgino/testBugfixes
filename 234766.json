{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/SidedPlane#SidedPlane(Vector,boolean,Vector,Vector).mjava","commits":[{"id":"40aa98241c87d86a0077beb8023713d93a0becfe","date":1459784560,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/SidedPlane#SidedPlane(Vector,boolean,Vector,Vector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct a sided plane from a pair of vectors describing points, and including\n   * origin, plus a point p which describes the side.\n   *\n   * @param p point to evaluate\n   * @param onSide is true if the point is on the correct side of the plane, false otherwise.\n   * @param A is the first in-plane point\n   * @param B is the second in-plane point\n   */\n  public SidedPlane(final Vector p, final boolean onSide, final Vector A, final Vector B) {\n    super(A, B);\n    sigNum = onSide?Math.signum(evaluate(p)):-Math.signum(evaluate(p));\n    if (sigNum == 0.0)\n      throw new IllegalArgumentException(\"Cannot determine sidedness because check point is on plane.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/SidedPlane#SidedPlane(Vector,boolean,Vector,Vector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct a sided plane from a pair of vectors describing points, and including\n   * origin, plus a point p which describes the side.\n   *\n   * @param p point to evaluate\n   * @param onSide is true if the point is on the correct side of the plane, false otherwise.\n   * @param A is the first in-plane point\n   * @param B is the second in-plane point\n   */\n  public SidedPlane(final Vector p, final boolean onSide, final Vector A, final Vector B) {\n    super(A, B);\n    sigNum = onSide?Math.signum(evaluate(p)):-Math.signum(evaluate(p));\n    if (sigNum == 0.0)\n      throw new IllegalArgumentException(\"Cannot determine sidedness because check point is on plane.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","40aa98241c87d86a0077beb8023713d93a0becfe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"40aa98241c87d86a0077beb8023713d93a0becfe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["40aa98241c87d86a0077beb8023713d93a0becfe"]},"commit2Childs":{"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09af2c9610ce53a4b25fd99344299b40318a4a1a","40aa98241c87d86a0077beb8023713d93a0becfe"],"40aa98241c87d86a0077beb8023713d93a0becfe":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}