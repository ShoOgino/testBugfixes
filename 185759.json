{"path":"lucene/core/src/java/org/apache/lucene/search/FilteringNumericComparator#getLeafComparator(LeafReaderContext).mjava","commits":[{"id":"e18fac0122568cb02eb2c92608ca703a723bbbd6","date":1592942698,"type":0,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteringNumericComparator#getLeafComparator(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final FilteringLeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n    LeafFieldComparator inLeafComparator = in.getLeafComparator(context);\n    Class<?> comparatorClass = inLeafComparator.getClass();\n    if (comparatorClass == FieldComparator.LongComparator.class) {\n      return new FilteringNumericLeafComparator.FilteringLongLeafComparator((FieldComparator.LongComparator) inLeafComparator, context,\n          ((LongComparator) inLeafComparator).field, reverse, singleSort, hasTopValue);\n    } if (comparatorClass == FieldComparator.IntComparator.class) {\n      return new FilteringNumericLeafComparator.FilteringIntLeafComparator((FieldComparator.IntComparator) inLeafComparator, context,\n          ((IntComparator) inLeafComparator).field, reverse, singleSort, hasTopValue);\n    } else if (comparatorClass == FieldComparator.DoubleComparator.class) {\n      return new FilteringNumericLeafComparator.FilteringDoubleLeafComparator((FieldComparator.DoubleComparator) inLeafComparator, context,\n          ((DoubleComparator) inLeafComparator).field, reverse, singleSort, hasTopValue);\n    } else if (comparatorClass == FieldComparator.FloatComparator.class) {\n      return new FilteringNumericLeafComparator.FilteringFloatLeafComparator((FieldComparator.FloatComparator) inLeafComparator, context,\n          ((FloatComparator) inLeafComparator).field, reverse, singleSort, hasTopValue);\n    } else {\n      throw new IllegalStateException(\"Unexpected numeric class of [\"+ comparatorClass + \"] for [FieldComparator]!\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241","date":1599588987,"type":4,"author":"Mayya Sharipova","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteringNumericComparator#getLeafComparator(LeafReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public final FilteringLeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n    LeafFieldComparator inLeafComparator = in.getLeafComparator(context);\n    Class<?> comparatorClass = inLeafComparator.getClass();\n    if (comparatorClass == FieldComparator.LongComparator.class) {\n      return new FilteringNumericLeafComparator.FilteringLongLeafComparator((FieldComparator.LongComparator) inLeafComparator, context,\n          ((LongComparator) inLeafComparator).field, reverse, singleSort, hasTopValue);\n    } if (comparatorClass == FieldComparator.IntComparator.class) {\n      return new FilteringNumericLeafComparator.FilteringIntLeafComparator((FieldComparator.IntComparator) inLeafComparator, context,\n          ((IntComparator) inLeafComparator).field, reverse, singleSort, hasTopValue);\n    } else if (comparatorClass == FieldComparator.DoubleComparator.class) {\n      return new FilteringNumericLeafComparator.FilteringDoubleLeafComparator((FieldComparator.DoubleComparator) inLeafComparator, context,\n          ((DoubleComparator) inLeafComparator).field, reverse, singleSort, hasTopValue);\n    } else if (comparatorClass == FieldComparator.FloatComparator.class) {\n      return new FilteringNumericLeafComparator.FilteringFloatLeafComparator((FieldComparator.FloatComparator) inLeafComparator, context,\n          ((FloatComparator) inLeafComparator).field, reverse, singleSort, hasTopValue);\n    } else {\n      throw new IllegalStateException(\"Unexpected numeric class of [\"+ comparatorClass + \"] for [FieldComparator]!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["e18fac0122568cb02eb2c92608ca703a723bbbd6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e18fac0122568cb02eb2c92608ca703a723bbbd6"],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}