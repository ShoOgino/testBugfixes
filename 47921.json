{"path":"src/test/org/apache/solr/update/DirectUpdateHandlerTest#testAddRollback().mjava","commits":[{"id":"c2c5b6c69b7a616e2efe0053dfc5e07b6d6f4b8d","date":1224067136,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/update/DirectUpdateHandlerTest#testAddRollback().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddRollback() throws Exception {\r\n    addSimpleDoc(\"A\");\r\n\r\n    // commit \"A\"\r\n    SolrCore core = h.getCore();\r\n    UpdateHandler updater = core.getUpdateHandler();\r\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\r\n    cmtCmd.waitSearcher = true;\r\n    updater.commit(cmtCmd);\r\n\r\n    addSimpleDoc(\"B\");\r\n\r\n    // rollback \"B\"\r\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\r\n    updater.rollback(rbkCmd);\r\n    updater.commit(cmtCmd);\r\n    \r\n    // search - \"B\" should not be found.\r\n    Map<String,String> args = new HashMap<String, String>();\r\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\r\n    args.put( \"indent\", \"true\" );\r\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\r\n    assertQ(\"\\\"B\\\" should not be found.\", req\r\n            ,\"//*[@numFound='1']\"\r\n            ,\"//result/doc[1]/int[@name='id'][.='A']\"\r\n            );\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19ce4a3f31ee210a8d30cc27e5c1efbcaec7000c","date":1234365496,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/update/DirectUpdateHandlerTest#testAddRollback().mjava","pathOld":"src/test/org/apache/solr/update/DirectUpdateHandlerTest#testAddRollback().mjava","sourceNew":"  public void testAddRollback() throws Exception {\r\n    addSimpleDoc(\"A\");\r\n\r\n    // commit \"A\"\r\n    SolrCore core = h.getCore();\r\n    UpdateHandler updater = core.getUpdateHandler();\r\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\r\n    cmtCmd.waitSearcher = true;\r\n    updater.commit(cmtCmd);\r\n\r\n    addSimpleDoc(\"B\");\r\n\r\n    // rollback \"B\"\r\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\r\n    updater.rollback(rbkCmd);\r\n    \r\n    // search - \"B\" should not be found.\r\n    Map<String,String> args = new HashMap<String, String>();\r\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\r\n    args.put( \"indent\", \"true\" );\r\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\r\n    assertQ(\"\\\"B\\\" should not be found.\", req\r\n            ,\"//*[@numFound='1']\"\r\n            ,\"//result/doc[1]/int[@name='id'][.='A']\"\r\n            );\r\n\r\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\r\n    // after a rollback as normal\r\n    addSimpleDoc(\"ZZZ\");\r\n    assertU(commit());\r\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\r\n            ,\"//*[@numFound='1']\"\r\n            ,\"//result/doc[1]/int[@name='id'][.='ZZZ']\"\r\n            );\r\n  }\r\n\n","sourceOld":"  public void testAddRollback() throws Exception {\r\n    addSimpleDoc(\"A\");\r\n\r\n    // commit \"A\"\r\n    SolrCore core = h.getCore();\r\n    UpdateHandler updater = core.getUpdateHandler();\r\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\r\n    cmtCmd.waitSearcher = true;\r\n    updater.commit(cmtCmd);\r\n\r\n    addSimpleDoc(\"B\");\r\n\r\n    // rollback \"B\"\r\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\r\n    updater.rollback(rbkCmd);\r\n    updater.commit(cmtCmd);\r\n    \r\n    // search - \"B\" should not be found.\r\n    Map<String,String> args = new HashMap<String, String>();\r\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\r\n    args.put( \"indent\", \"true\" );\r\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\r\n    assertQ(\"\\\"B\\\" should not be found.\", req\r\n            ,\"//*[@numFound='1']\"\r\n            ,\"//result/doc[1]/int[@name='id'][.='A']\"\r\n            );\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dd4ac4fa84a1b56111ca47b15965c5a06f255c7","date":1249520987,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/DirectUpdateHandlerTest#testAddRollback().mjava","pathOld":"src/test/org/apache/solr/update/DirectUpdateHandlerTest#testAddRollback().mjava","sourceNew":"  public void testAddRollback() throws Exception {\r\n    addSimpleDoc(\"A\");\r\n\r\n    // commit \"A\"\r\n    SolrCore core = h.getCore();\r\n    UpdateHandler updater = core.getUpdateHandler();\r\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\r\n    cmtCmd.waitSearcher = true;\r\n    updater.commit(cmtCmd);\r\n\r\n    addSimpleDoc(\"B\");\r\n\r\n    // rollback \"B\"\r\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\r\n    updater.rollback(rbkCmd);\r\n    \r\n    // search - \"B\" should not be found.\r\n    Map<String,String> args = new HashMap<String, String>();\r\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\r\n    args.put( \"indent\", \"true\" );\r\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\r\n    assertQ(\"\\\"B\\\" should not be found.\", req\r\n            ,\"//*[@numFound='1']\"\r\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\r\n            );\r\n\r\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\r\n    // after a rollback as normal\r\n    addSimpleDoc(\"ZZZ\");\r\n    assertU(commit());\r\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\r\n            ,\"//*[@numFound='1']\"\r\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\r\n            );\r\n  }\r\n\n","sourceOld":"  public void testAddRollback() throws Exception {\r\n    addSimpleDoc(\"A\");\r\n\r\n    // commit \"A\"\r\n    SolrCore core = h.getCore();\r\n    UpdateHandler updater = core.getUpdateHandler();\r\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\r\n    cmtCmd.waitSearcher = true;\r\n    updater.commit(cmtCmd);\r\n\r\n    addSimpleDoc(\"B\");\r\n\r\n    // rollback \"B\"\r\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\r\n    updater.rollback(rbkCmd);\r\n    \r\n    // search - \"B\" should not be found.\r\n    Map<String,String> args = new HashMap<String, String>();\r\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\r\n    args.put( \"indent\", \"true\" );\r\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\r\n    assertQ(\"\\\"B\\\" should not be found.\", req\r\n            ,\"//*[@numFound='1']\"\r\n            ,\"//result/doc[1]/int[@name='id'][.='A']\"\r\n            );\r\n\r\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\r\n    // after a rollback as normal\r\n    addSimpleDoc(\"ZZZ\");\r\n    assertU(commit());\r\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\r\n            ,\"//*[@numFound='1']\"\r\n            ,\"//result/doc[1]/int[@name='id'][.='ZZZ']\"\r\n            );\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8744ad19f47109f36428849641ad30f090aa279e","date":1255357510,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/test/org/apache/solr/update/DirectUpdateHandlerTest#testAddRollback().mjava","pathOld":"src/test/org/apache/solr/update/DirectUpdateHandlerTest#testAddRollback().mjava","sourceNew":"  public void testAddRollback() throws Exception {\n    addSimpleDoc(\"A\");\n\n    // commit \"A\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    cmtCmd.waitSearcher = true;\n    updater.commit(cmtCmd);\n\n    addSimpleDoc(\"B\");\n\n    // rollback \"B\"\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\n    updater.rollback(rbkCmd);\n    \n    // search - \"B\" should not be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"B\\\" should not be found.\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    addSimpleDoc(\"ZZZ\");\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":"  public void testAddRollback() throws Exception {\r\n    addSimpleDoc(\"A\");\r\n\r\n    // commit \"A\"\r\n    SolrCore core = h.getCore();\r\n    UpdateHandler updater = core.getUpdateHandler();\r\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\r\n    cmtCmd.waitSearcher = true;\r\n    updater.commit(cmtCmd);\r\n\r\n    addSimpleDoc(\"B\");\r\n\r\n    // rollback \"B\"\r\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\r\n    updater.rollback(rbkCmd);\r\n    \r\n    // search - \"B\" should not be found.\r\n    Map<String,String> args = new HashMap<String, String>();\r\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\r\n    args.put( \"indent\", \"true\" );\r\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\r\n    assertQ(\"\\\"B\\\" should not be found.\", req\r\n            ,\"//*[@numFound='1']\"\r\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\r\n            );\r\n\r\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\r\n    // after a rollback as normal\r\n    addSimpleDoc(\"ZZZ\");\r\n    assertU(commit());\r\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\r\n            ,\"//*[@numFound='1']\"\r\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\r\n            );\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e4abedb5178ec223e9e57095e7944d21252f2d","date":1255360688,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/test/org/apache/solr/update/DirectUpdateHandlerTest#testAddRollback().mjava","pathOld":"src/test/org/apache/solr/update/DirectUpdateHandlerTest#testAddRollback().mjava","sourceNew":"  public void testAddRollback() throws Exception {\n    addSimpleDoc(\"A\");\n\n    // commit \"A\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 1, duh2.addCommands.get() );\n    assertEquals( 1, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 1, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n\n    addSimpleDoc(\"B\");\n\n    // rollback \"B\"\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\n    assertEquals( 1, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 1, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should not be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"B\\\" should not be found.\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    addSimpleDoc(\"ZZZ\");\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":"  public void testAddRollback() throws Exception {\n    addSimpleDoc(\"A\");\n\n    // commit \"A\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    cmtCmd.waitSearcher = true;\n    updater.commit(cmtCmd);\n\n    addSimpleDoc(\"B\");\n\n    // rollback \"B\"\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\n    updater.rollback(rbkCmd);\n    \n    // search - \"B\" should not be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"B\\\" should not be found.\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    addSimpleDoc(\"ZZZ\");\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testAddRollback().mjava","pathOld":"src/test/org/apache/solr/update/DirectUpdateHandlerTest#testAddRollback().mjava","sourceNew":"  public void testAddRollback() throws Exception {\n    addSimpleDoc(\"A\");\n\n    // commit \"A\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 1, duh2.addCommands.get() );\n    assertEquals( 1, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 1, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n\n    addSimpleDoc(\"B\");\n\n    // rollback \"B\"\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\n    assertEquals( 1, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 1, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should not be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"B\\\" should not be found.\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    addSimpleDoc(\"ZZZ\");\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":"  public void testAddRollback() throws Exception {\n    addSimpleDoc(\"A\");\n\n    // commit \"A\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 1, duh2.addCommands.get() );\n    assertEquals( 1, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 1, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n\n    addSimpleDoc(\"B\");\n\n    // rollback \"B\"\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\n    assertEquals( 1, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 1, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should not be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"B\\\" should not be found.\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    addSimpleDoc(\"ZZZ\");\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19ce4a3f31ee210a8d30cc27e5c1efbcaec7000c":["c2c5b6c69b7a616e2efe0053dfc5e07b6d6f4b8d"],"c2c5b6c69b7a616e2efe0053dfc5e07b6d6f4b8d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3dd4ac4fa84a1b56111ca47b15965c5a06f255c7":["19ce4a3f31ee210a8d30cc27e5c1efbcaec7000c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8744ad19f47109f36428849641ad30f090aa279e":["3dd4ac4fa84a1b56111ca47b15965c5a06f255c7"],"ad94625fb8d088209f46650c8097196fec67f00c":["17e4abedb5178ec223e9e57095e7944d21252f2d"],"17e4abedb5178ec223e9e57095e7944d21252f2d":["8744ad19f47109f36428849641ad30f090aa279e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"19ce4a3f31ee210a8d30cc27e5c1efbcaec7000c":["3dd4ac4fa84a1b56111ca47b15965c5a06f255c7"],"c2c5b6c69b7a616e2efe0053dfc5e07b6d6f4b8d":["19ce4a3f31ee210a8d30cc27e5c1efbcaec7000c"],"3dd4ac4fa84a1b56111ca47b15965c5a06f255c7":["8744ad19f47109f36428849641ad30f090aa279e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c2c5b6c69b7a616e2efe0053dfc5e07b6d6f4b8d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8744ad19f47109f36428849641ad30f090aa279e":["17e4abedb5178ec223e9e57095e7944d21252f2d"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"17e4abedb5178ec223e9e57095e7944d21252f2d":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}