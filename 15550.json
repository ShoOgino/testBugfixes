{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/demohtml/SimpleCharStream#FillBuff().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/demohtml/SimpleCharStream#FillBuff().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/demohtml/SimpleCharStream#FillBuff().mjava","sourceNew":"  protected void FillBuff() throws java.io.IOException\n  {\n     if (maxNextCharInd == available)\n     {\n        if (available == bufsize)\n        {\n           if (tokenBegin > 2048)\n           {\n              bufpos = maxNextCharInd = 0;\n              available = tokenBegin;\n           }\n           else if (tokenBegin < 0)\n              bufpos = maxNextCharInd = 0;\n           else\n              ExpandBuff(false);\n        }\n        else if (available > tokenBegin)\n           available = bufsize;\n        else if ((tokenBegin - available) < 2048)\n           ExpandBuff(true);\n        else\n           available = tokenBegin;\n     }\n\n     int i;\n     try {\n        if ((i = inputStream.read(buffer, maxNextCharInd,\n                                    available - maxNextCharInd)) == -1)\n        {\n           inputStream.close();\n           throw new java.io.IOException();\n        }\n        else\n           maxNextCharInd += i;\n        return;\n     }\n     catch(java.io.IOException e) {\n        --bufpos;\n        backup(0);\n        if (tokenBegin == -1)\n           tokenBegin = bufpos;\n        throw e;\n     }\n  }\n\n","sourceOld":"  protected void FillBuff() throws java.io.IOException\n  {\n     if (maxNextCharInd == available)\n     {\n        if (available == bufsize)\n        {\n           if (tokenBegin > 2048)\n           {\n              bufpos = maxNextCharInd = 0;\n              available = tokenBegin;\n           }\n           else if (tokenBegin < 0)\n              bufpos = maxNextCharInd = 0;\n           else\n              ExpandBuff(false);\n        }\n        else if (available > tokenBegin)\n           available = bufsize;\n        else if ((tokenBegin - available) < 2048)\n           ExpandBuff(true);\n        else\n           available = tokenBegin;\n     }\n\n     int i;\n     try {\n        if ((i = inputStream.read(buffer, maxNextCharInd,\n                                    available - maxNextCharInd)) == -1)\n        {\n           inputStream.close();\n           throw new java.io.IOException();\n        }\n        else\n           maxNextCharInd += i;\n        return;\n     }\n     catch(java.io.IOException e) {\n        --bufpos;\n        backup(0);\n        if (tokenBegin == -1)\n           tokenBegin = bufpos;\n        throw e;\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07824ded99e000918eebde3bd9f44559382ce5c7","date":1341761609,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/demohtml/SimpleCharStream#FillBuff().mjava","sourceNew":null,"sourceOld":"  protected void FillBuff() throws java.io.IOException\n  {\n     if (maxNextCharInd == available)\n     {\n        if (available == bufsize)\n        {\n           if (tokenBegin > 2048)\n           {\n              bufpos = maxNextCharInd = 0;\n              available = tokenBegin;\n           }\n           else if (tokenBegin < 0)\n              bufpos = maxNextCharInd = 0;\n           else\n              ExpandBuff(false);\n        }\n        else if (available > tokenBegin)\n           available = bufsize;\n        else if ((tokenBegin - available) < 2048)\n           ExpandBuff(true);\n        else\n           available = tokenBegin;\n     }\n\n     int i;\n     try {\n        if ((i = inputStream.read(buffer, maxNextCharInd,\n                                    available - maxNextCharInd)) == -1)\n        {\n           inputStream.close();\n           throw new java.io.IOException();\n        }\n        else\n           maxNextCharInd += i;\n        return;\n     }\n     catch(java.io.IOException e) {\n        --bufpos;\n        backup(0);\n        if (tokenBegin == -1)\n           tokenBegin = bufpos;\n        throw e;\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/demohtml/SimpleCharStream#FillBuff().mjava","sourceNew":null,"sourceOld":"  protected void FillBuff() throws java.io.IOException\n  {\n     if (maxNextCharInd == available)\n     {\n        if (available == bufsize)\n        {\n           if (tokenBegin > 2048)\n           {\n              bufpos = maxNextCharInd = 0;\n              available = tokenBegin;\n           }\n           else if (tokenBegin < 0)\n              bufpos = maxNextCharInd = 0;\n           else\n              ExpandBuff(false);\n        }\n        else if (available > tokenBegin)\n           available = bufsize;\n        else if ((tokenBegin - available) < 2048)\n           ExpandBuff(true);\n        else\n           available = tokenBegin;\n     }\n\n     int i;\n     try {\n        if ((i = inputStream.read(buffer, maxNextCharInd,\n                                    available - maxNextCharInd)) == -1)\n        {\n           inputStream.close();\n           throw new java.io.IOException();\n        }\n        else\n           maxNextCharInd += i;\n        return;\n     }\n     catch(java.io.IOException e) {\n        --bufpos;\n        backup(0);\n        if (tokenBegin == -1)\n           tokenBegin = bufpos;\n        throw e;\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/demohtml/SimpleCharStream#FillBuff().mjava","sourceNew":null,"sourceOld":"  protected void FillBuff() throws java.io.IOException\n  {\n     if (maxNextCharInd == available)\n     {\n        if (available == bufsize)\n        {\n           if (tokenBegin > 2048)\n           {\n              bufpos = maxNextCharInd = 0;\n              available = tokenBegin;\n           }\n           else if (tokenBegin < 0)\n              bufpos = maxNextCharInd = 0;\n           else\n              ExpandBuff(false);\n        }\n        else if (available > tokenBegin)\n           available = bufsize;\n        else if ((tokenBegin - available) < 2048)\n           ExpandBuff(true);\n        else\n           available = tokenBegin;\n     }\n\n     int i;\n     try {\n        if ((i = inputStream.read(buffer, maxNextCharInd,\n                                    available - maxNextCharInd)) == -1)\n        {\n           inputStream.close();\n           throw new java.io.IOException();\n        }\n        else\n           maxNextCharInd += i;\n        return;\n     }\n     catch(java.io.IOException e) {\n        --bufpos;\n        backup(0);\n        if (tokenBegin == -1)\n           tokenBegin = bufpos;\n        throw e;\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/demohtml/SimpleCharStream#FillBuff().mjava","sourceNew":null,"sourceOld":"  protected void FillBuff() throws java.io.IOException\n  {\n     if (maxNextCharInd == available)\n     {\n        if (available == bufsize)\n        {\n           if (tokenBegin > 2048)\n           {\n              bufpos = maxNextCharInd = 0;\n              available = tokenBegin;\n           }\n           else if (tokenBegin < 0)\n              bufpos = maxNextCharInd = 0;\n           else\n              ExpandBuff(false);\n        }\n        else if (available > tokenBegin)\n           available = bufsize;\n        else if ((tokenBegin - available) < 2048)\n           ExpandBuff(true);\n        else\n           available = tokenBegin;\n     }\n\n     int i;\n     try {\n        if ((i = inputStream.read(buffer, maxNextCharInd,\n                                    available - maxNextCharInd)) == -1)\n        {\n           inputStream.close();\n           throw new java.io.IOException();\n        }\n        else\n           maxNextCharInd += i;\n        return;\n     }\n     catch(java.io.IOException e) {\n        --bufpos;\n        backup(0);\n        if (tokenBegin == -1)\n           tokenBegin = bufpos;\n        throw e;\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"07824ded99e000918eebde3bd9f44559382ce5c7":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","07824ded99e000918eebde3bd9f44559382ce5c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2acf500f78aa12b92e371fd89c719291986b6b90"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"07824ded99e000918eebde3bd9f44559382ce5c7":["2acf500f78aa12b92e371fd89c719291986b6b90"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["07824ded99e000918eebde3bd9f44559382ce5c7","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}