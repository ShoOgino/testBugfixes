{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#next(int,int,int,Transition).mjava","commits":[{"id":"d6e1f11b7318d917420b640db7b796381c39c7c8","date":1578907651,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#next(int,int,int,Transition).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Looks for the next transition that matches the provided label, assuming determinism.\n   *\n   * @param state               The source state.\n   * @param fromTransitionIndex The transition index to start the lookup from (inclusive); negative interpreted as 0.\n   * @param label               The codepoint to look up.\n   * @param transition          The output transition to update with the matching transition; or null for no update.\n   * @return The destination state; or -1 if no matching outgoing transition.\n   */\n  private int next(int state, int fromTransitionIndex, int label, Transition transition) {\n    assert state >= 0;\n    assert label >= 0;\n    int stateIndex = 2 * state;\n    int firstTransitionIndex = states[stateIndex];\n    int numTransitions = states[stateIndex + 1];\n\n    // Since transitions are sorted,\n    // binary search the transition for which label is within [minLabel, maxLabel].\n    int low = Math.max(fromTransitionIndex, 0);\n    int high = numTransitions - 1;\n    while (low <= high) {\n      int mid = (low + high) >>> 1;\n      int transitionIndex = firstTransitionIndex + 3 * mid;\n      int minLabel = transitions[transitionIndex + 1];\n      if (minLabel > label) {\n        high = mid - 1;\n      } else {\n        int maxLabel = transitions[transitionIndex + 2];\n        if (maxLabel < label){\n          low = mid + 1;\n        } else {\n          int destState = transitions[transitionIndex];\n          if (transition != null) {\n            transition.dest = destState;\n            transition.min = minLabel;\n            transition.max = maxLabel;\n            transition.transitionUpto = mid;\n          }\n          return destState;\n        }\n      }\n    }\n    int destState = -1;\n    if (transition != null) {\n      transition.dest = destState;\n      transition.transitionUpto = low;\n    }\n    return destState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2509bad1fbf30792438821cc94f7a5e1a13d5473","date":1578934553,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#next(int,int,int,Transition).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Looks for the next transition that matches the provided label, assuming determinism.\n   *\n   * @param state               The source state.\n   * @param fromTransitionIndex The transition index to start the lookup from (inclusive); negative interpreted as 0.\n   * @param label               The codepoint to look up.\n   * @param transition          The output transition to update with the matching transition; or null for no update.\n   * @return The destination state; or -1 if no matching outgoing transition.\n   */\n  private int next(int state, int fromTransitionIndex, int label, Transition transition) {\n    assert state >= 0;\n    assert label >= 0;\n    int stateIndex = 2 * state;\n    int firstTransitionIndex = states[stateIndex];\n    int numTransitions = states[stateIndex + 1];\n\n    // Since transitions are sorted,\n    // binary search the transition for which label is within [minLabel, maxLabel].\n    int low = Math.max(fromTransitionIndex, 0);\n    int high = numTransitions - 1;\n    while (low <= high) {\n      int mid = (low + high) >>> 1;\n      int transitionIndex = firstTransitionIndex + 3 * mid;\n      int minLabel = transitions[transitionIndex + 1];\n      if (minLabel > label) {\n        high = mid - 1;\n      } else {\n        int maxLabel = transitions[transitionIndex + 2];\n        if (maxLabel < label){\n          low = mid + 1;\n        } else {\n          int destState = transitions[transitionIndex];\n          if (transition != null) {\n            transition.dest = destState;\n            transition.min = minLabel;\n            transition.max = maxLabel;\n            transition.transitionUpto = mid;\n          }\n          return destState;\n        }\n      }\n    }\n    int destState = -1;\n    if (transition != null) {\n      transition.dest = destState;\n      transition.transitionUpto = low;\n    }\n    return destState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d6e1f11b7318d917420b640db7b796381c39c7c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d6e1f11b7318d917420b640db7b796381c39c7c8"],"2509bad1fbf30792438821cc94f7a5e1a13d5473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6e1f11b7318d917420b640db7b796381c39c7c8"]},"commit2Childs":{"d6e1f11b7318d917420b640db7b796381c39c7c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e1f11b7318d917420b640db7b796381c39c7c8","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2509bad1fbf30792438821cc94f7a5e1a13d5473":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}