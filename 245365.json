{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"/dev/null","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}