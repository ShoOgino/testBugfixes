{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#pushBoolean(Type,boolean).mjava","commits":[{"id":"06b29443688b24c8ad26729a4a05578e0c12a3bf","date":1379203716,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#pushBoolean(Type,boolean).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#truthCompile(Type,boolean).mjava","sourceNew":"  private void pushBoolean(Type expected, boolean truth) {\n    switch (expected.getSort()) {\n      case Type.INT:\n        methodVisitor.push(truth);\n        break;\n      case Type.LONG:\n        methodVisitor.push(truth ? 1L : 0L);\n        break;\n      case Type.DOUBLE:\n        methodVisitor.push(truth ? 1. : 0.);\n        break;\n      default:\n        throw new IllegalStateException(\"Invalid expected type: \" + expected);\n    }\n  }\n\n","sourceOld":"  private void truthCompile(Type expected, boolean truth) {\n    if (expected == Type.INT_TYPE) {\n        methodVisitor.push(truth);\n    } else if (expected == Type.LONG_TYPE) {\n        methodVisitor.push(truth ? 1L : 0L);\n    } else if (expected == Type.DOUBLE_TYPE) {\n        methodVisitor.push(truth ? 1. : 0.);\n    } else {\n      throw new IllegalStateException(\"Invalid expected type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"210086cb958f3201adecda171f8de0b71d51e15b","date":1379203888,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#pushBoolean(Type,boolean).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#pushBoolean(Type,boolean).mjava","sourceNew":"  private void pushBoolean(Type expected, boolean truth) {\n    switch (expected.getSort()) {\n      case Type.INT:\n        gen.push(truth);\n        break;\n      case Type.LONG:\n        gen.push(truth ? 1L : 0L);\n        break;\n      case Type.DOUBLE:\n        gen.push(truth ? 1. : 0.);\n        break;\n      default:\n        throw new IllegalStateException(\"Invalid expected type: \" + expected);\n    }\n  }\n\n","sourceOld":"  private void pushBoolean(Type expected, boolean truth) {\n    switch (expected.getSort()) {\n      case Type.INT:\n        methodVisitor.push(truth);\n        break;\n      case Type.LONG:\n        methodVisitor.push(truth ? 1L : 0L);\n        break;\n      case Type.DOUBLE:\n        methodVisitor.push(truth ? 1. : 0.);\n        break;\n      default:\n        throw new IllegalStateException(\"Invalid expected type: \" + expected);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#pushBoolean(Type,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void pushBoolean(Type expected, boolean truth) {\n    switch (expected.getSort()) {\n      case Type.INT:\n        gen.push(truth);\n        break;\n      case Type.LONG:\n        gen.push(truth ? 1L : 0L);\n        break;\n      case Type.DOUBLE:\n        gen.push(truth ? 1. : 0.);\n        break;\n      default:\n        throw new IllegalStateException(\"Invalid expected type: \" + expected);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d23d4828afa583ebf35b4a541763af6206133458","date":1438931440,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#pushBoolean(Type,boolean).mjava","sourceNew":null,"sourceOld":"  private void pushBoolean(Type expected, boolean truth) {\n    switch (expected.getSort()) {\n      case Type.INT:\n        gen.push(truth);\n        break;\n      case Type.LONG:\n        gen.push(truth ? 1L : 0L);\n        break;\n      case Type.DOUBLE:\n        gen.push(truth ? 1. : 0.);\n        break;\n      default:\n        throw new IllegalStateException(\"Invalid expected type: \" + expected);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d23d4828afa583ebf35b4a541763af6206133458":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"06b29443688b24c8ad26729a4a05578e0c12a3bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"210086cb958f3201adecda171f8de0b71d51e15b":["06b29443688b24c8ad26729a4a05578e0c12a3bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d23d4828afa583ebf35b4a541763af6206133458"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","210086cb958f3201adecda171f8de0b71d51e15b"]},"commit2Childs":{"d23d4828afa583ebf35b4a541763af6206133458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06b29443688b24c8ad26729a4a05578e0c12a3bf":["210086cb958f3201adecda171f8de0b71d51e15b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06b29443688b24c8ad26729a4a05578e0c12a3bf","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"210086cb958f3201adecda171f8de0b71d51e15b":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["d23d4828afa583ebf35b4a541763af6206133458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}