{"path":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#assertSameSeekBehavior(String,IndexInput,IndexInput).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#assertSameSeekBehavior(String,IndexInput,IndexInput).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#assertSameSeekBehavior(String,IndexInput,IndexInput).mjava","sourceNew":"    private void assertSameSeekBehavior(String msg,\n                                        IndexInput expected,\n                                        IndexInput actual)\n    throws IOException\n    {\n        // seek to 0\n        long point = 0;\n        assertSameStreams(msg + \", seek(0)\", expected, actual, point);\n\n        // seek to middle\n        point = expected.length() / 2l;\n        assertSameStreams(msg + \", seek(mid)\", expected, actual, point);\n\n        // seek to end - 2\n        point = expected.length() - 2;\n        assertSameStreams(msg + \", seek(end-2)\", expected, actual, point);\n\n        // seek to end - 1\n        point = expected.length() - 1;\n        assertSameStreams(msg + \", seek(end-1)\", expected, actual, point);\n\n        // seek to the end\n        point = expected.length();\n        assertSameStreams(msg + \", seek(end)\", expected, actual, point);\n\n        // seek past end\n        point = expected.length() + 1;\n        assertSameStreams(msg + \", seek(end+1)\", expected, actual, point);\n    }\n\n","sourceOld":"    private void assertSameSeekBehavior(String msg,\n                                        IndexInput expected,\n                                        IndexInput actual)\n    throws IOException\n    {\n        // seek to 0\n        long point = 0;\n        assertSameStreams(msg + \", seek(0)\", expected, actual, point);\n\n        // seek to middle\n        point = expected.length() / 2l;\n        assertSameStreams(msg + \", seek(mid)\", expected, actual, point);\n\n        // seek to end - 2\n        point = expected.length() - 2;\n        assertSameStreams(msg + \", seek(end-2)\", expected, actual, point);\n\n        // seek to end - 1\n        point = expected.length() - 1;\n        assertSameStreams(msg + \", seek(end-1)\", expected, actual, point);\n\n        // seek to the end\n        point = expected.length();\n        assertSameStreams(msg + \", seek(end)\", expected, actual, point);\n\n        // seek past end\n        point = expected.length() + 1;\n        assertSameStreams(msg + \", seek(end+1)\", expected, actual, point);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","date":1412231650,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#assertSameSeekBehavior(String,IndexInput,IndexInput).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#assertSameSeekBehavior(String,IndexInput,IndexInput).mjava","sourceNew":"  static void assertSameSeekBehavior(String msg, IndexInput expected, IndexInput actual) throws IOException {\n    // seek to 0\n    long point = 0;\n    assertSameStreams(msg + \", seek(0)\", expected, actual, point);\n    \n    // seek to middle\n    point = expected.length() / 2l;\n    assertSameStreams(msg + \", seek(mid)\", expected, actual, point);\n    \n    // seek to end - 2\n    point = expected.length() - 2;\n    assertSameStreams(msg + \", seek(end-2)\", expected, actual, point);\n    \n    // seek to end - 1\n    point = expected.length() - 1;\n    assertSameStreams(msg + \", seek(end-1)\", expected, actual, point);\n    \n    // seek to the end\n    point = expected.length();\n    assertSameStreams(msg + \", seek(end)\", expected, actual, point);\n    \n    // seek past end\n    point = expected.length() + 1;\n    assertSameStreams(msg + \", seek(end+1)\", expected, actual, point);\n  }\n\n","sourceOld":"    private void assertSameSeekBehavior(String msg,\n                                        IndexInput expected,\n                                        IndexInput actual)\n    throws IOException\n    {\n        // seek to 0\n        long point = 0;\n        assertSameStreams(msg + \", seek(0)\", expected, actual, point);\n\n        // seek to middle\n        point = expected.length() / 2l;\n        assertSameStreams(msg + \", seek(mid)\", expected, actual, point);\n\n        // seek to end - 2\n        point = expected.length() - 2;\n        assertSameStreams(msg + \", seek(end-2)\", expected, actual, point);\n\n        // seek to end - 1\n        point = expected.length() - 1;\n        assertSameStreams(msg + \", seek(end-1)\", expected, actual, point);\n\n        // seek to the end\n        point = expected.length();\n        assertSameStreams(msg + \", seek(end)\", expected, actual, point);\n\n        // seek past end\n        point = expected.length() + 1;\n        assertSameStreams(msg + \", seek(end+1)\", expected, actual, point);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#assertSameSeekBehavior(String,IndexInput,IndexInput).mjava","sourceNew":null,"sourceOld":"  static void assertSameSeekBehavior(String msg, IndexInput expected, IndexInput actual) throws IOException {\n    // seek to 0\n    long point = 0;\n    assertSameStreams(msg + \", seek(0)\", expected, actual, point);\n    \n    // seek to middle\n    point = expected.length() / 2l;\n    assertSameStreams(msg + \", seek(mid)\", expected, actual, point);\n    \n    // seek to end - 2\n    point = expected.length() - 2;\n    assertSameStreams(msg + \", seek(end-2)\", expected, actual, point);\n    \n    // seek to end - 1\n    point = expected.length() - 1;\n    assertSameStreams(msg + \", seek(end-1)\", expected, actual, point);\n    \n    // seek to the end\n    point = expected.length();\n    assertSameStreams(msg + \", seek(end)\", expected, actual, point);\n    \n    // seek past end\n    point = expected.length() + 1;\n    assertSameStreams(msg + \", seek(end+1)\", expected, actual, point);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#assertSameSeekBehavior(String,IndexInput,IndexInput).mjava","sourceNew":null,"sourceOld":"    private void assertSameSeekBehavior(String msg,\n                                        IndexInput expected,\n                                        IndexInput actual)\n    throws IOException\n    {\n        // seek to 0\n        long point = 0;\n        assertSameStreams(msg + \", seek(0)\", expected, actual, point);\n\n        // seek to middle\n        point = expected.length() / 2l;\n        assertSameStreams(msg + \", seek(mid)\", expected, actual, point);\n\n        // seek to end - 2\n        point = expected.length() - 2;\n        assertSameStreams(msg + \", seek(end-2)\", expected, actual, point);\n\n        // seek to end - 1\n        point = expected.length() - 1;\n        assertSameStreams(msg + \", seek(end-1)\", expected, actual, point);\n\n        // seek to the end\n        point = expected.length();\n        assertSameStreams(msg + \", seek(end)\", expected, actual, point);\n\n        // seek past end\n        point = expected.length() + 1;\n        assertSameStreams(msg + \", seek(end+1)\", expected, actual, point);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"989d940c4bf402188f4f0ae13736836885227383":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","989d940c4bf402188f4f0ae13736836885227383"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"989d940c4bf402188f4f0ae13736836885227383":["9bb9a29a5e71a90295f175df8919802993142c9a"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["989d940c4bf402188f4f0ae13736836885227383"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}