{"path":"lucene/src/java/org/apache/lucene/index/codecs/DefaultFieldsReader#DefaultFieldsReader(Directory,String,FieldInfos,IOContext,int,int).mjava","commits":[{"id":"4b1110660886afcc62f57e9af901cd3f5dd294bc","date":1317830374,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultFieldsReader#DefaultFieldsReader(Directory,String,FieldInfos,IOContext,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,IOContext,int,int).mjava","sourceNew":"  public DefaultFieldsReader(Directory d, String segment, FieldInfos fn, IOContext context, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, context);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < DefaultFieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(indexStreamFN, format, DefaultFieldsWriter.FORMAT_MINIMUM, DefaultFieldsWriter.FORMAT_CURRENT);\n      if (format > DefaultFieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(indexStreamFN, format, DefaultFieldsWriter.FORMAT_MINIMUM, DefaultFieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public FieldsReader(Directory d, String segment, FieldInfos fn, IOContext context, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, context);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < FieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(indexStreamFN, format, FieldsWriter.FORMAT_MINIMUM, FieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultFieldsReader#DefaultFieldsReader(Directory,String,FieldInfos,IOContext,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultFieldsReader#DefaultFieldsReader(Directory,String,FieldInfos,IOContext,int,int).mjava","sourceNew":"  public DefaultFieldsReader(Directory d, String segment, FieldInfos fn, IOContext context, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", DefaultFieldsWriter.FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", DefaultFieldsWriter.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, context);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < DefaultFieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(indexStreamFN, format, DefaultFieldsWriter.FORMAT_MINIMUM, DefaultFieldsWriter.FORMAT_CURRENT);\n      if (format > DefaultFieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(indexStreamFN, format, DefaultFieldsWriter.FORMAT_MINIMUM, DefaultFieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public DefaultFieldsReader(Directory d, String segment, FieldInfos fn, IOContext context, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, context);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < DefaultFieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(indexStreamFN, format, DefaultFieldsWriter.FORMAT_MINIMUM, DefaultFieldsWriter.FORMAT_CURRENT);\n      if (format > DefaultFieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(indexStreamFN, format, DefaultFieldsWriter.FORMAT_MINIMUM, DefaultFieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1efe3edca215dd9891cb42af283fed96f792ca0","date":1320428891,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultFieldsReader#DefaultFieldsReader(Directory,String,FieldInfos,IOContext,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultFieldsReader#DefaultFieldsReader(Directory,String,FieldInfos,IOContext,int,int).mjava","sourceNew":"  public DefaultFieldsReader(Directory d, String segment, FieldInfos fn, IOContext context, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", DefaultFieldsWriter.FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", DefaultFieldsWriter.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, context);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < DefaultFieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(cloneableIndexStream, format, DefaultFieldsWriter.FORMAT_MINIMUM, DefaultFieldsWriter.FORMAT_CURRENT);\n      if (format > DefaultFieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(cloneableIndexStream, format, DefaultFieldsWriter.FORMAT_MINIMUM, DefaultFieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public DefaultFieldsReader(Directory d, String segment, FieldInfos fn, IOContext context, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", DefaultFieldsWriter.FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", DefaultFieldsWriter.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, context);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < DefaultFieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(indexStreamFN, format, DefaultFieldsWriter.FORMAT_MINIMUM, DefaultFieldsWriter.FORMAT_CURRENT);\n      if (format > DefaultFieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(indexStreamFN, format, DefaultFieldsWriter.FORMAT_MINIMUM, DefaultFieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultStoredFieldsReader#DefaultStoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultFieldsReader#DefaultFieldsReader(Directory,String,FieldInfos,IOContext,int,int).mjava","sourceNew":"  public DefaultStoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.getDocStoreSegment();\n    final int docStoreOffset = si.getDocStoreOffset();\n    final int size = si.docCount;\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", DefaultStoredFieldsWriter.FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", DefaultStoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, context);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < DefaultStoredFieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(cloneableIndexStream, format, DefaultStoredFieldsWriter.FORMAT_MINIMUM, DefaultStoredFieldsWriter.FORMAT_CURRENT);\n      if (format > DefaultStoredFieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(cloneableIndexStream, format, DefaultStoredFieldsWriter.FORMAT_MINIMUM, DefaultStoredFieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n        // Verify two sources of \"maxDoc\" agree:\n        if (this.size != si.docCount) {\n          throw new CorruptIndexException(\"doc counts differ for segment \" + segment + \": fieldsReader shows \" + this.size + \" but segmentInfo shows \" + si.docCount);\n        }\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public DefaultFieldsReader(Directory d, String segment, FieldInfos fn, IOContext context, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", DefaultFieldsWriter.FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", DefaultFieldsWriter.FIELDS_INDEX_EXTENSION);\n      cloneableIndexStream = d.openInput(indexStreamFN, context);\n      \n      format = cloneableIndexStream.readInt();\n\n      if (format < DefaultFieldsWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(cloneableIndexStream, format, DefaultFieldsWriter.FORMAT_MINIMUM, DefaultFieldsWriter.FORMAT_CURRENT);\n      if (format > DefaultFieldsWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(cloneableIndexStream, format, DefaultFieldsWriter.FORMAT_MINIMUM, DefaultFieldsWriter.FORMAT_CURRENT);\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length() - FORMAT_SIZE;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["4b1110660886afcc62f57e9af901cd3f5dd294bc"],"06584e6e98d592b34e1329b384182f368d2025e8":["f1efe3edca215dd9891cb42af283fed96f792ca0"],"f1efe3edca215dd9891cb42af283fed96f792ca0":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b1110660886afcc62f57e9af901cd3f5dd294bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06584e6e98d592b34e1329b384182f368d2025e8"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["f1efe3edca215dd9891cb42af283fed96f792ca0"],"06584e6e98d592b34e1329b384182f368d2025e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f1efe3edca215dd9891cb42af283fed96f792ca0":["06584e6e98d592b34e1329b384182f368d2025e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4b1110660886afcc62f57e9af901cd3f5dd294bc"],"4b1110660886afcc62f57e9af901cd3f5dd294bc":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}