{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainTimeRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":1,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainTimeRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    // the client believes this is the mostRecent collection name.  We assert this if provided.\n    final String ifMostRecentCollName = message.getStr(IF_MOST_RECENT_COLL_NAME); // optional\n\n    // TODO collection param (or intervalDateMath override?), useful for data capped collections\n\n    //---- PARSE ALIAS INFO FROM ZK\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Alias \" + aliasName + \" does not exist.\"); // if it did exist, we'd have a non-null map\n    }\n    final TimeRoutedAlias timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasMetadata);\n\n    final List<Map.Entry<Instant, String>> parsedCollections =\n        timeRoutedAlias.parseCollections(aliases);\n\n    //---- GET MOST RECENT COLL\n    final Map.Entry<Instant, String> mostRecentEntry = parsedCollections.get(0);\n    final Instant mostRecentCollTimestamp = mostRecentEntry.getKey();\n    final String mostRecentCollName = mostRecentEntry.getValue();\n    if (ifMostRecentCollName != null) {\n      if (!mostRecentCollName.equals(ifMostRecentCollName)) {\n        // Possibly due to race conditions in URPs on multiple leaders calling us at the same time\n        String msg = IF_MOST_RECENT_COLL_NAME + \" expected \" + ifMostRecentCollName + \" but it's \" + mostRecentCollName;\n        if (parsedCollections.stream().map(Map.Entry::getValue).noneMatch(ifMostRecentCollName::equals)) {\n          msg += \". Furthermore this collection isn't in the list of collections referenced by the alias.\";\n        }\n        log.info(msg);\n        results.add(\"message\", msg);\n        return;\n      }\n    } else if (mostRecentCollTimestamp.isAfter(Instant.now())) {\n      final String msg = \"Most recent collection is in the future, so we won't create another.\";\n      log.info(msg);\n      results.add(\"message\", msg);\n      return;\n    }\n\n    //---- COMPUTE NEXT COLLECTION NAME\n    final Instant nextCollTimestamp = timeRoutedAlias.computeNextCollTimestamp(mostRecentCollTimestamp);\n    final String createCollName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, nextCollTimestamp);\n\n    //---- DELETE OLDEST COLLECTIONS AND REMOVE FROM ALIAS (if configured)\n    NamedList deleteResults = deleteOldestCollectionsAndUpdateAlias(timeRoutedAlias, aliasesManager, nextCollTimestamp);\n    if (deleteResults != null) {\n      results.add(\"delete\", deleteResults);\n    }\n\n    //---- CREATE THE COLLECTION\n    NamedList createResults = createCollectionAndWait(clusterState, aliasName, aliasMetadata,\n        createCollName, ocmh);\n    if (createResults != null) {\n      results.add(\"create\", createResults);\n    }\n\n    //---- UPDATE THE ALIAS WITH NEW COLLECTION\n    updateAlias(aliasName, aliasesManager, createCollName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    // the client believes this is the mostRecent collection name.  We assert this if provided.\n    final String ifMostRecentCollName = message.getStr(IF_MOST_RECENT_COLL_NAME); // optional\n\n    // TODO collection param (or intervalDateMath override?), useful for data capped collections\n\n    //---- PARSE ALIAS INFO FROM ZK\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(aliasName); // if it did exist, we'd have a non-null map\n    }\n    final TimeRoutedAlias timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasMetadata);\n\n    final List<Map.Entry<Instant, String>> parsedCollections =\n        timeRoutedAlias.parseCollections(aliases, () -> newAliasMustExistException(aliasName));\n\n    //---- GET MOST RECENT COLL\n    final Map.Entry<Instant, String> mostRecentEntry = parsedCollections.get(0);\n    final Instant mostRecentCollTimestamp = mostRecentEntry.getKey();\n    final String mostRecentCollName = mostRecentEntry.getValue();\n    if (ifMostRecentCollName != null) {\n      if (!mostRecentCollName.equals(ifMostRecentCollName)) {\n        // Possibly due to race conditions in URPs on multiple leaders calling us at the same time\n        String msg = IF_MOST_RECENT_COLL_NAME + \" expected \" + ifMostRecentCollName + \" but it's \" + mostRecentCollName;\n        if (parsedCollections.stream().map(Map.Entry::getValue).noneMatch(ifMostRecentCollName::equals)) {\n          msg += \". Furthermore this collection isn't in the list of collections referenced by the alias.\";\n        }\n        log.info(msg);\n        results.add(\"message\", msg);\n        return;\n      }\n    } else if (mostRecentCollTimestamp.isAfter(Instant.now())) {\n      final String msg = \"Most recent collection is in the future, so we won't create another.\";\n      log.info(msg);\n      results.add(\"message\", msg);\n      return;\n    }\n\n    //---- COMPUTE NEXT COLLECTION NAME\n    final Instant nextCollTimestamp = timeRoutedAlias.computeNextCollTimestamp(mostRecentCollTimestamp);\n    final String createCollName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, nextCollTimestamp);\n\n    //---- DELETE OLDEST COLLECTIONS AND REMOVE FROM ALIAS (if configured)\n    NamedList deleteResults = deleteOldestCollectionsAndUpdateAlias(timeRoutedAlias, aliasesManager, nextCollTimestamp);\n    if (deleteResults != null) {\n      results.add(\"delete\", deleteResults);\n    }\n\n    //---- CREATE THE COLLECTION\n    NamedList createResults = createCollectionAndWait(clusterState, aliasName, aliasMetadata,\n        createCollName, ocmh);\n    if (createResults != null) {\n      results.add(\"create\", createResults);\n    }\n\n    //---- UPDATE THE ALIAS WITH NEW COLLECTION\n    aliasesManager.applyModificationAndExportToZk(curAliases -> {\n      final List<String> curTargetCollections = curAliases.getCollectionAliasListMap().get(aliasName);\n      if (curTargetCollections.contains(createCollName)) {\n        return curAliases;\n      } else {\n        List<String> newTargetCollections = new ArrayList<>(curTargetCollections.size() + 1);\n        // prepend it on purpose (thus reverse sorted). Solr alias resolution defaults to the first collection in a list\n        newTargetCollections.add(createCollName);\n        newTargetCollections.addAll(curTargetCollections);\n        return curAliases.cloneWithCollectionAlias(aliasName, StrUtils.join(newTargetCollections, ','));\n      }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27f8671abed52d7fc3010c636b6fd43ae36804ac","date":1556533169,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainTimeRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainTimeRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    // the client believes this is the mostRecent collection name.  We assert this if provided.\n    final String ifMostRecentCollName = message.getStr(IF_MOST_RECENT_COLL_NAME); // optional\n\n    // TODO collection param (or intervalDateMath override?), useful for data capped collections\n\n    //---- PARSE ALIAS INFO FROM ZK\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Alias \" + aliasName + \" does not exist or is not a routed alias.\"); // if it did exist, we'd have a non-null map\n    }\n    final TimeRoutedAlias timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasMetadata);\n\n    final List<Map.Entry<Instant, String>> parsedCollections =\n        timeRoutedAlias.parseCollections(aliases);\n\n    //---- GET MOST RECENT COLL\n    final Map.Entry<Instant, String> mostRecentEntry = parsedCollections.get(0);\n    final Instant mostRecentCollTimestamp = mostRecentEntry.getKey();\n    final String mostRecentCollName = mostRecentEntry.getValue();\n    if (ifMostRecentCollName != null) {\n      if (!mostRecentCollName.equals(ifMostRecentCollName)) {\n        // Possibly due to race conditions in URPs on multiple leaders calling us at the same time\n        String msg = IF_MOST_RECENT_COLL_NAME + \" expected \" + ifMostRecentCollName + \" but it's \" + mostRecentCollName;\n        if (parsedCollections.stream().map(Map.Entry::getValue).noneMatch(ifMostRecentCollName::equals)) {\n          msg += \". Furthermore this collection isn't in the list of collections referenced by the alias.\";\n        }\n        log.info(msg);\n        results.add(\"message\", msg);\n        return;\n      }\n    } else if (mostRecentCollTimestamp.isAfter(Instant.now())) {\n      final String msg = \"Most recent collection is in the future, so we won't create another.\";\n      log.info(msg);\n      results.add(\"message\", msg);\n      return;\n    }\n\n    //---- COMPUTE NEXT COLLECTION NAME\n    final Instant nextCollTimestamp = timeRoutedAlias.computeNextCollTimestamp(mostRecentCollTimestamp);\n    final String createCollName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, nextCollTimestamp);\n\n    //---- DELETE OLDEST COLLECTIONS AND REMOVE FROM ALIAS (if configured)\n    NamedList deleteResults = deleteOldestCollectionsAndUpdateAlias(timeRoutedAlias, aliasesManager, nextCollTimestamp);\n    if (deleteResults != null) {\n      results.add(\"delete\", deleteResults);\n    }\n\n    //---- CREATE THE COLLECTION\n    NamedList createResults = createCollectionAndWait(clusterState, aliasName, aliasMetadata,\n        createCollName, ocmh);\n    if (createResults != null) {\n      results.add(\"create\", createResults);\n    }\n\n    //---- UPDATE THE ALIAS WITH NEW COLLECTION\n    updateAlias(aliasName, aliasesManager, createCollName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    // the client believes this is the mostRecent collection name.  We assert this if provided.\n    final String ifMostRecentCollName = message.getStr(IF_MOST_RECENT_COLL_NAME); // optional\n\n    // TODO collection param (or intervalDateMath override?), useful for data capped collections\n\n    //---- PARSE ALIAS INFO FROM ZK\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Alias \" + aliasName + \" does not exist.\"); // if it did exist, we'd have a non-null map\n    }\n    final TimeRoutedAlias timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasMetadata);\n\n    final List<Map.Entry<Instant, String>> parsedCollections =\n        timeRoutedAlias.parseCollections(aliases);\n\n    //---- GET MOST RECENT COLL\n    final Map.Entry<Instant, String> mostRecentEntry = parsedCollections.get(0);\n    final Instant mostRecentCollTimestamp = mostRecentEntry.getKey();\n    final String mostRecentCollName = mostRecentEntry.getValue();\n    if (ifMostRecentCollName != null) {\n      if (!mostRecentCollName.equals(ifMostRecentCollName)) {\n        // Possibly due to race conditions in URPs on multiple leaders calling us at the same time\n        String msg = IF_MOST_RECENT_COLL_NAME + \" expected \" + ifMostRecentCollName + \" but it's \" + mostRecentCollName;\n        if (parsedCollections.stream().map(Map.Entry::getValue).noneMatch(ifMostRecentCollName::equals)) {\n          msg += \". Furthermore this collection isn't in the list of collections referenced by the alias.\";\n        }\n        log.info(msg);\n        results.add(\"message\", msg);\n        return;\n      }\n    } else if (mostRecentCollTimestamp.isAfter(Instant.now())) {\n      final String msg = \"Most recent collection is in the future, so we won't create another.\";\n      log.info(msg);\n      results.add(\"message\", msg);\n      return;\n    }\n\n    //---- COMPUTE NEXT COLLECTION NAME\n    final Instant nextCollTimestamp = timeRoutedAlias.computeNextCollTimestamp(mostRecentCollTimestamp);\n    final String createCollName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, nextCollTimestamp);\n\n    //---- DELETE OLDEST COLLECTIONS AND REMOVE FROM ALIAS (if configured)\n    NamedList deleteResults = deleteOldestCollectionsAndUpdateAlias(timeRoutedAlias, aliasesManager, nextCollTimestamp);\n    if (deleteResults != null) {\n      results.add(\"delete\", deleteResults);\n    }\n\n    //---- CREATE THE COLLECTION\n    NamedList createResults = createCollectionAndWait(clusterState, aliasName, aliasMetadata,\n        createCollName, ocmh);\n    if (createResults != null) {\n      results.add(\"create\", createResults);\n    }\n\n    //---- UPDATE THE ALIAS WITH NEW COLLECTION\n    updateAlias(aliasName, aliasesManager, createCollName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":4,"author":"Gus Heck","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainTimeRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    // the client believes this is the mostRecent collection name.  We assert this if provided.\n    final String ifMostRecentCollName = message.getStr(IF_MOST_RECENT_COLL_NAME); // optional\n\n    // TODO collection param (or intervalDateMath override?), useful for data capped collections\n\n    //---- PARSE ALIAS INFO FROM ZK\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Alias \" + aliasName + \" does not exist or is not a routed alias.\"); // if it did exist, we'd have a non-null map\n    }\n    final TimeRoutedAlias timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasMetadata);\n\n    final List<Map.Entry<Instant, String>> parsedCollections =\n        timeRoutedAlias.parseCollections(aliases);\n\n    //---- GET MOST RECENT COLL\n    final Map.Entry<Instant, String> mostRecentEntry = parsedCollections.get(0);\n    final Instant mostRecentCollTimestamp = mostRecentEntry.getKey();\n    final String mostRecentCollName = mostRecentEntry.getValue();\n    if (ifMostRecentCollName != null) {\n      if (!mostRecentCollName.equals(ifMostRecentCollName)) {\n        // Possibly due to race conditions in URPs on multiple leaders calling us at the same time\n        String msg = IF_MOST_RECENT_COLL_NAME + \" expected \" + ifMostRecentCollName + \" but it's \" + mostRecentCollName;\n        if (parsedCollections.stream().map(Map.Entry::getValue).noneMatch(ifMostRecentCollName::equals)) {\n          msg += \". Furthermore this collection isn't in the list of collections referenced by the alias.\";\n        }\n        log.info(msg);\n        results.add(\"message\", msg);\n        return;\n      }\n    } else if (mostRecentCollTimestamp.isAfter(Instant.now())) {\n      final String msg = \"Most recent collection is in the future, so we won't create another.\";\n      log.info(msg);\n      results.add(\"message\", msg);\n      return;\n    }\n\n    //---- COMPUTE NEXT COLLECTION NAME\n    final Instant nextCollTimestamp = timeRoutedAlias.computeNextCollTimestamp(mostRecentCollTimestamp);\n    final String createCollName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, nextCollTimestamp);\n\n    //---- DELETE OLDEST COLLECTIONS AND REMOVE FROM ALIAS (if configured)\n    NamedList deleteResults = deleteOldestCollectionsAndUpdateAlias(timeRoutedAlias, aliasesManager, nextCollTimestamp);\n    if (deleteResults != null) {\n      results.add(\"delete\", deleteResults);\n    }\n\n    //---- CREATE THE COLLECTION\n    NamedList createResults = createCollectionAndWait(clusterState, aliasName, aliasMetadata,\n        createCollName, ocmh);\n    if (createResults != null) {\n      results.add(\"create\", createResults);\n    }\n\n    //---- UPDATE THE ALIAS WITH NEW COLLECTION\n    updateAlias(aliasName, aliasesManager, createCollName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["27f8671abed52d7fc3010c636b6fd43ae36804ac"],"27f8671abed52d7fc3010c636b6fd43ae36804ac":["b627755385655c7cd3fb296f17593658805cf4d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b627755385655c7cd3fb296f17593658805cf4d5"],"b627755385655c7cd3fb296f17593658805cf4d5":["27f8671abed52d7fc3010c636b6fd43ae36804ac"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"27f8671abed52d7fc3010c636b6fd43ae36804ac":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}