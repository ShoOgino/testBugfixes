{"path":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBlockJoin().mjava","commits":[{"id":"637a392e2e05d4e1179ac3c532cfeef0cde977ba","date":1376347977,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBlockJoin().mjava","pathOld":"/dev/null","sourceNew":"  public void testBlockJoin() throws Exception {\n    assertQueryEquals(\"parent\", \"{!parent which=foo_s:parent}dude\",\n        \"{!parent which=foo_s:parent}dude\");\n    assertQueryEquals(\"child\", \"{!child of=foo_s:parent}dude\",\n        \"{!child of=foo_s:parent}dude\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBlockJoin().mjava","pathOld":"/dev/null","sourceNew":"  public void testBlockJoin() throws Exception {\n    assertQueryEquals(\"parent\", \"{!parent which=foo_s:parent}dude\",\n        \"{!parent which=foo_s:parent}dude\");\n    assertQueryEquals(\"child\", \"{!child of=foo_s:parent}dude\",\n        \"{!child of=foo_s:parent}dude\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f7c69c29432074b666568db5e84001acd540dee","date":1520745905,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBlockJoin().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBlockJoin().mjava","sourceNew":"  public void testBlockJoin() throws Exception {\n    assertQueryEquals(\"parent\", \"{!parent which=foo_s:parent}dude\",\n        \"{!parent which=foo_s:parent}dude\");\n    assertQueryEquals(\"child\", \"{!child of=foo_s:parent}dude\",\n        \"{!child of=foo_s:parent}dude\");\n    // zero query case \n    assertQueryEquals(null, \"{!parent which=foo_s:parent}\",\n        \"{!parent which=foo_s:parent}\");\n    assertQueryEquals(null, \"{!child of=foo_s:parent}\",\n        \"{!child of=foo_s:parent}\");\n    assertQueryEquals(null, \"{!parent which='+*:* -foo_s:parent'}\",\n        \"{!child of=foo_s:parent}\");\n    \n    final SolrQueryRequest req = req(\n        \"fq\",\"bar_s:baz\",\"fq\",\"{!tag=fqban}bar_s:ban\",\n        \"ffq\",\"bar_s:baz\",\"ffq\",\"{!tag=ffqban}bar_s:ban\");\n    try {\n    assertQueryEquals(\"filters\", req,\n        \"{!parent which=foo_s:parent param=$fq}foo_s:bar\",\n        \"{!parent which=foo_s:parent param=$ffq}foo_s:bar\" // differently named params\n        );\n    assertQueryEquals(\"filters\", req,\n        \"{!parent which=foo_s:parent param=$fq excludeTags=fqban}foo_s:bar\",\n        \"{!parent which=foo_s:parent param=$ffq excludeTags=ffqban}foo_s:bar\" // differently named params\n        );\n    \n    QueryUtils.checkUnequal(// parent filter is not an equal to child\n        QParser.getParser(\"{!child of=foo_s:parent}\", req).getQuery(),\n        QParser.getParser(\"{!parent which=foo_s:parent}\", req).getQuery());\n    \n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testBlockJoin() throws Exception {\n    assertQueryEquals(\"parent\", \"{!parent which=foo_s:parent}dude\",\n        \"{!parent which=foo_s:parent}dude\");\n    assertQueryEquals(\"child\", \"{!child of=foo_s:parent}dude\",\n        \"{!child of=foo_s:parent}dude\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0","date":1576656084,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBlockJoin().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBlockJoin().mjava","sourceNew":"  public void testBlockJoin() throws Exception {\n    assertQueryEquals(\"parent\", \"{!parent which=foo_s:parent}dude\",\n        \"{!parent which=foo_s:parent}dude\");\n    assertQueryEquals(\"child\", \"{!child of=foo_s:parent}dude\",\n        \"{!child of=foo_s:parent}dude\");\n    // zero query case\n    assertQueryEquals(null, \"{!parent which=foo_s:parent}\",\n        \"{!parent which=foo_s:parent}\");\n    assertQueryEquals(null, \"{!child of=foo_s:parent}\",\n        \"{!child of=foo_s:parent}\");\n    assertQueryEquals(null, \"{!parent which='+*:* -foo_s:parent'}\",\n        \"{!child of=foo_s:parent}\");\n\n    final SolrQueryRequest req = req(\n        \"fq\",\"bar_s:baz\",\"fq\",\"{!tag=fqban}bar_s:ban\",\n        \"ffq\",\"bar_s:baz\",\"ffq\",\"{!tag=ffqban}bar_s:ban\");\n    try {\n    assertQueryEquals(\"filters\", req,\n        \"{!parent which=foo_s:parent param=$fq}foo_s:bar\",\n        \"{!parent which=foo_s:parent param=$ffq}foo_s:bar\" // differently named params\n        );\n    assertQueryEquals(\"filters\", req,\n        \"{!parent which=foo_s:parent param=$fq excludeTags=fqban}foo_s:bar\",\n        \"{!parent which=foo_s:parent param=$ffq excludeTags=ffqban}foo_s:bar\" // differently named params\n        );\n\n    QueryUtils.checkUnequal(// parent filter is not an equal to child\n        QParser.getParser(\"{!child of=foo_s:parent}\", req).getQuery(),\n        QParser.getParser(\"{!parent which=foo_s:parent}\", req).getQuery());\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testBlockJoin() throws Exception {\n    assertQueryEquals(\"parent\", \"{!parent which=foo_s:parent}dude\",\n        \"{!parent which=foo_s:parent}dude\");\n    assertQueryEquals(\"child\", \"{!child of=foo_s:parent}dude\",\n        \"{!child of=foo_s:parent}dude\");\n    // zero query case \n    assertQueryEquals(null, \"{!parent which=foo_s:parent}\",\n        \"{!parent which=foo_s:parent}\");\n    assertQueryEquals(null, \"{!child of=foo_s:parent}\",\n        \"{!child of=foo_s:parent}\");\n    assertQueryEquals(null, \"{!parent which='+*:* -foo_s:parent'}\",\n        \"{!child of=foo_s:parent}\");\n    \n    final SolrQueryRequest req = req(\n        \"fq\",\"bar_s:baz\",\"fq\",\"{!tag=fqban}bar_s:ban\",\n        \"ffq\",\"bar_s:baz\",\"ffq\",\"{!tag=ffqban}bar_s:ban\");\n    try {\n    assertQueryEquals(\"filters\", req,\n        \"{!parent which=foo_s:parent param=$fq}foo_s:bar\",\n        \"{!parent which=foo_s:parent param=$ffq}foo_s:bar\" // differently named params\n        );\n    assertQueryEquals(\"filters\", req,\n        \"{!parent which=foo_s:parent param=$fq excludeTags=fqban}foo_s:bar\",\n        \"{!parent which=foo_s:parent param=$ffq excludeTags=ffqban}foo_s:bar\" // differently named params\n        );\n    \n    QueryUtils.checkUnequal(// parent filter is not an equal to child\n        QParser.getParser(\"{!child of=foo_s:parent}\", req).getQuery(),\n        QParser.getParser(\"{!parent which=foo_s:parent}\", req).getQuery());\n    \n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBlockJoin().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBlockJoin().mjava","sourceNew":"  public void testBlockJoin() throws Exception {\n    assertQueryEquals(\"parent\", \"{!parent which=foo_s:parent}dude\",\n        \"{!parent which=foo_s:parent}dude\");\n    assertQueryEquals(\"child\", \"{!child of=foo_s:parent}dude\",\n        \"{!child of=foo_s:parent}dude\");\n    // zero query case\n    assertQueryEquals(null, \"{!parent which=foo_s:parent}\",\n        \"{!parent which=foo_s:parent}\");\n    assertQueryEquals(null, \"{!child of=foo_s:parent}\",\n        \"{!child of=foo_s:parent}\");\n    assertQueryEquals(null, \"{!parent which='+*:* -foo_s:parent'}\",\n        \"{!child of=foo_s:parent}\");\n\n    final SolrQueryRequest req = req(\n        \"fq\",\"bar_s:baz\",\"fq\",\"{!tag=fqban}bar_s:ban\",\n        \"ffq\",\"bar_s:baz\",\"ffq\",\"{!tag=ffqban}bar_s:ban\");\n    try {\n    assertQueryEquals(\"filters\", req,\n        \"{!parent which=foo_s:parent param=$fq}foo_s:bar\",\n        \"{!parent which=foo_s:parent param=$ffq}foo_s:bar\" // differently named params\n        );\n    assertQueryEquals(\"filters\", req,\n        \"{!parent which=foo_s:parent param=$fq excludeTags=fqban}foo_s:bar\",\n        \"{!parent which=foo_s:parent param=$ffq excludeTags=ffqban}foo_s:bar\" // differently named params\n        );\n\n    QueryUtils.checkUnequal(// parent filter is not an equal to child\n        QParser.getParser(\"{!child of=foo_s:parent}\", req).getQuery(),\n        QParser.getParser(\"{!parent which=foo_s:parent}\", req).getQuery());\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testBlockJoin() throws Exception {\n    assertQueryEquals(\"parent\", \"{!parent which=foo_s:parent}dude\",\n        \"{!parent which=foo_s:parent}dude\");\n    assertQueryEquals(\"child\", \"{!child of=foo_s:parent}dude\",\n        \"{!child of=foo_s:parent}dude\");\n    // zero query case \n    assertQueryEquals(null, \"{!parent which=foo_s:parent}\",\n        \"{!parent which=foo_s:parent}\");\n    assertQueryEquals(null, \"{!child of=foo_s:parent}\",\n        \"{!child of=foo_s:parent}\");\n    assertQueryEquals(null, \"{!parent which='+*:* -foo_s:parent'}\",\n        \"{!child of=foo_s:parent}\");\n    \n    final SolrQueryRequest req = req(\n        \"fq\",\"bar_s:baz\",\"fq\",\"{!tag=fqban}bar_s:ban\",\n        \"ffq\",\"bar_s:baz\",\"ffq\",\"{!tag=ffqban}bar_s:ban\");\n    try {\n    assertQueryEquals(\"filters\", req,\n        \"{!parent which=foo_s:parent param=$fq}foo_s:bar\",\n        \"{!parent which=foo_s:parent param=$ffq}foo_s:bar\" // differently named params\n        );\n    assertQueryEquals(\"filters\", req,\n        \"{!parent which=foo_s:parent param=$fq excludeTags=fqban}foo_s:bar\",\n        \"{!parent which=foo_s:parent param=$ffq excludeTags=ffqban}foo_s:bar\" // differently named params\n        );\n    \n    QueryUtils.checkUnequal(// parent filter is not an equal to child\n        QParser.getParser(\"{!child of=foo_s:parent}\", req).getQuery(),\n        QParser.getParser(\"{!parent which=foo_s:parent}\", req).getQuery());\n    \n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b5e0da3b576580fb2128e87467fa5f579ca2c33","date":1599081383,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBlockJoin().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBlockJoin().mjava","sourceNew":"  public void testBlockJoin() throws Exception {\n    assertQueryEquals(\"parent\", \"{!parent which=foo_s:parent}dude\",\n        \"{!parent which=foo_s:parent}dude\");\n    assertQueryEquals(\"child\", \"{!child of=foo_s:parent}dude\",\n        \"{!child of=foo_s:parent}dude\");\n    // zero query case\n    assertQueryEquals(null, \"{!parent which=foo_s:parent}\",\n        \"{!parent which=foo_s:parent}\");\n    assertQueryEquals(null, \"{!child of=foo_s:parent}\",\n        \"{!child of=foo_s:parent}\");\n    assertQueryEquals(null, \"{!parent which='+*:* -foo_s:parent'}\",\n        \"{!child of=foo_s:parent}\");\n\n    try (SolrQueryRequest req = req(\"fq\",\"bar_s:baz\",\"fq\",\"{!tag=fqban}bar_s:ban\",\n                                    \"ffq\",\"bar_s:baz\",\"ffq\",\"{!tag=ffqban}bar_s:ban\")) {\n      assertQueryEquals(\"filters\", req,\n                        \"{!parent which=foo_s:parent param=$fq}foo_s:bar\",\n                        \"{!parent which=foo_s:parent param=$ffq}foo_s:bar\" // differently named params\n                        );\n      assertQueryEquals(\"filters\", req,\n                        \"{!parent which=foo_s:parent param=$fq excludeTags=fqban}foo_s:bar\",\n                        \"{!parent which=foo_s:parent param=$ffq excludeTags=ffqban}foo_s:bar\" // differently named params\n                        );\n\n      QueryUtils.checkUnequal(// parent filter is not an equal to child\n                              QParser.getParser(\"{!child of=foo_s:parent}\", req).getQuery(),\n                              QParser.getParser(\"{!parent which=foo_s:parent}\", req).getQuery());\n    }\n\n    // sanity check multiple ways of specifing _nest_path_ prefixes\n    final String parent_path = \"/aa/bb\";\n    try (SolrQueryRequest req = req(\"parent_filt\", \"(*:* -{!prefix f='_nest_path_' v='\"+parent_path+\"/'})\",\n                                    \"child_q\", \"(+foo +{!prefix f='_nest_path_' v='\"+parent_path+\"/'})\",\n                                    \"parent_q\", \"(+bar +{!field f='_nest_path_' v='\"+parent_path+\"'})\")) {\n      \n      assertQueryEquals(\"parent\", req,\n                        \n                        // using local params to refer to other query params using 'prefix' parser...\n                        \"{!parent which=$parent_filt v=$child_q}\",\n                        \n                        // using 'inline' prefix query syntax...\n                        //\n                        // '/' has to be escaped other wise it will be treated as a regex query...\n                        // ...and when used inside the 'which' param it has to be escaped *AGAIN* because of\n                        // the \"quoted\" localparam evaluation layer...\n                        // (and of course '\\' escaping is the java syntax as well, we have to double it)\n                        \"{!parent which='*:* -_nest_path_:\"+(parent_path + \"/\").replace(\"/\",\"\\\\\\\\/\") +\"*'}\"\n                        + \"(+foo +_nest_path_:\" + (parent_path + \"/\").replace(\"/\", \"\\\\/\") + \"*)\");\n\n      assertQueryEquals(\"child\", req,\n                        \n                        // using local params to refer to other query params using 'prefix' parser...\n                        \"{!child of=$parent_filt v=$parent_q}\",\n                        \n                        // using 'inline' prefix query syntax...\n                        //\n                        // '/' has to be escaped other wise it will be treated as a regex query...\n                        // ...and when used inside the 'which' param it has to be escaped *AGAIN* because of\n                        // the \"quoted\" localparam evaluation layer...\n                        // (and of course '\\' escaping is the java syntax as well, we have to double it)\n                        \"{!child of='*:* -_nest_path_:\"+(parent_path + \"/\").replace(\"/\",\"\\\\\\\\/\") +\"*'}\"\n                        + \"(+bar +_nest_path_:\" + parent_path.replace(\"/\", \"\\\\/\") + \")\");\n\n    }\n  }\n\n","sourceOld":"  public void testBlockJoin() throws Exception {\n    assertQueryEquals(\"parent\", \"{!parent which=foo_s:parent}dude\",\n        \"{!parent which=foo_s:parent}dude\");\n    assertQueryEquals(\"child\", \"{!child of=foo_s:parent}dude\",\n        \"{!child of=foo_s:parent}dude\");\n    // zero query case\n    assertQueryEquals(null, \"{!parent which=foo_s:parent}\",\n        \"{!parent which=foo_s:parent}\");\n    assertQueryEquals(null, \"{!child of=foo_s:parent}\",\n        \"{!child of=foo_s:parent}\");\n    assertQueryEquals(null, \"{!parent which='+*:* -foo_s:parent'}\",\n        \"{!child of=foo_s:parent}\");\n\n    final SolrQueryRequest req = req(\n        \"fq\",\"bar_s:baz\",\"fq\",\"{!tag=fqban}bar_s:ban\",\n        \"ffq\",\"bar_s:baz\",\"ffq\",\"{!tag=ffqban}bar_s:ban\");\n    try {\n    assertQueryEquals(\"filters\", req,\n        \"{!parent which=foo_s:parent param=$fq}foo_s:bar\",\n        \"{!parent which=foo_s:parent param=$ffq}foo_s:bar\" // differently named params\n        );\n    assertQueryEquals(\"filters\", req,\n        \"{!parent which=foo_s:parent param=$fq excludeTags=fqban}foo_s:bar\",\n        \"{!parent which=foo_s:parent param=$ffq excludeTags=ffqban}foo_s:bar\" // differently named params\n        );\n\n    QueryUtils.checkUnequal(// parent filter is not an equal to child\n        QParser.getParser(\"{!child of=foo_s:parent}\", req).getQuery(),\n        QParser.getParser(\"{!parent which=foo_s:parent}\", req).getQuery());\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"246314af59d76a47fccc31e9494eefee01ec9c00":["5f7c69c29432074b666568db5e84001acd540dee","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f7c69c29432074b666568db5e84001acd540dee":["637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["5f7c69c29432074b666568db5e84001acd540dee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0b5e0da3b576580fb2128e87467fa5f579ca2c33"],"0b5e0da3b576580fb2128e87467fa5f579ca2c33":["a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"]},"commit2Childs":{"246314af59d76a47fccc31e9494eefee01ec9c00":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","5f7c69c29432074b666568db5e84001acd540dee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"5f7c69c29432074b666568db5e84001acd540dee":["246314af59d76a47fccc31e9494eefee01ec9c00","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["246314af59d76a47fccc31e9494eefee01ec9c00","0b5e0da3b576580fb2128e87467fa5f579ca2c33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0b5e0da3b576580fb2128e87467fa5f579ca2c33":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["246314af59d76a47fccc31e9494eefee01ec9c00","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}