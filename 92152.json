{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      DirectoryReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      DirectoryReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      DirectoryReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      DirectoryReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"527cc14542789f47d75da436cb4287d1ab887e34","date":1391705548,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      DirectoryReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      DirectoryReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      DirectoryReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      DirectoryReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.shutdown();\n\n    TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      DirectoryReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      DirectoryReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.shutdown();\n\n    TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      DirectoryReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.shutdown();\n\n    TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      DirectoryReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      DirectoryReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.shutdown();\n\n    TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      DirectoryReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n\n    expectThrows(AlreadyClosedException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      DirectoryReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits.value);\n\n    expectThrows(AlreadyClosedException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n\n    expectThrows(AlreadyClosedException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d82f2f7ad0b5fdfd0dcb7a59bbcc834853180f1f","date":1533501662,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.count(q));\n\n    expectThrows(AlreadyClosedException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits.value);\n\n    expectThrows(AlreadyClosedException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f354ba79a5a3e8491ec2953f14f365a02c058ac","date":1598293148,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())).setMaxFullFlushMergeWaitMillis(0));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.count(q));\n\n    expectThrows(AlreadyClosedException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.count(q));\n\n    expectThrows(AlreadyClosedException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"527cc14542789f47d75da436cb4287d1ab887e34":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["527cc14542789f47d75da436cb4287d1ab887e34"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"05fe562aa248790944d43cdd478f512572835ba0":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d82f2f7ad0b5fdfd0dcb7a59bbcc834853180f1f":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["05fe562aa248790944d43cdd478f512572835ba0"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["d82f2f7ad0b5fdfd0dcb7a59bbcc834853180f1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"]},"commit2Childs":{"527cc14542789f47d75da436cb4287d1ab887e34":["6613659748fe4411a7dcf85266e55db1f95f7315"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"05fe562aa248790944d43cdd478f512572835ba0":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"d82f2f7ad0b5fdfd0dcb7a59bbcc834853180f1f":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["05fe562aa248790944d43cdd478f512572835ba0"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["527cc14542789f47d75da436cb4287d1ab887e34"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["d82f2f7ad0b5fdfd0dcb7a59bbcc834853180f1f"],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}