{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","commits":[{"id":"18359c8e12d55f66c27cfe7babe86283f06a6aa5","date":1250426225,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","pathOld":"/dev/null","sourceNew":"  public void testReset() throws Exception {\n    String[] dict = { \"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\" };\n\n    Reader reader = getHyphenationReader(\"de_DR.xml\");\n    if (reader == null) {\n      // we gracefully die if we have no reader\n      return;\n    }\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        wsTokenizer, hyphenator, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    TermAttribute termAtt = (TermAttribute) tf.getAttribute(TermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.term());\n    wsTokenizer.reset(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    String[] dict = { \"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\" };\n\n    Reader reader = getHyphenationReader(\"de_DR.xml\");\n    if (reader == null) {\n      // we gracefully die if we have no reader\n      return;\n    }\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        wsTokenizer, hyphenator, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    TermAttribute termAtt = tf.getAttribute(TermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.term());\n    wsTokenizer.reset(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    String[] dict = { \"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\" };\n\n    Reader reader = getHyphenationReader(\"de_DR.xml\");\n    if (reader == null) {\n      // we gracefully die if we have no reader\n      return;\n    }\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        wsTokenizer, hyphenator, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    TermAttribute termAtt = (TermAttribute) tf.getAttribute(TermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.term());\n    wsTokenizer.reset(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f496009c9f6039ed409630c8ecc249b279924d1f","date":1261164324,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    String[] dict = { \"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\" };\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(\n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    TermAttribute termAtt = tf.getAttribute(TermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.term());\n    wsTokenizer.reset(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    String[] dict = { \"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\" };\n\n    Reader reader = getHyphenationReader(\"de_DR.xml\");\n    if (reader == null) {\n      // we gracefully die if we have no reader\n      return;\n    }\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        wsTokenizer, hyphenator, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    TermAttribute termAtt = tf.getAttribute(TermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.term());\n    wsTokenizer.reset(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85722042902595d9b0fbf38b7b57b139bdc12e4b","date":1264953677,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    String[] dict = { \"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\" };\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(Version.LUCENE_CURRENT, \n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    TermAttribute termAtt = tf.getAttribute(TermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.term());\n    wsTokenizer.reset(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    String[] dict = { \"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\" };\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(\n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    TermAttribute termAtt = tf.getAttribute(TermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.term());\n    wsTokenizer.reset(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    String[] dict = { \"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\" };\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    TermAttribute termAtt = tf.getAttribute(TermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.term());\n    wsTokenizer.reset(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    String[] dict = { \"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\" };\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(Version.LUCENE_CURRENT, \n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    TermAttribute termAtt = tf.getAttribute(TermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.term());\n    wsTokenizer.reset(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    String[] dict = { \"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\" };\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    TermAttribute termAtt = tf.getAttribute(TermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.term());\n    wsTokenizer.reset(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    String[] dict = { \"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\" };\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    TermAttribute termAtt = tf.getAttribute(TermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.term());\n    wsTokenizer.reset(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.term());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"18359c8e12d55f66c27cfe7babe86283f06a6aa5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f496009c9f6039ed409630c8ecc249b279924d1f":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d78f014fded44fbde905f4f84cdc21907b371e8":["18359c8e12d55f66c27cfe7babe86283f06a6aa5"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["f496009c9f6039ed409630c8ecc249b279924d1f"]},"commit2Childs":{"18359c8e12d55f66c27cfe7babe86283f06a6aa5":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"f496009c9f6039ed409630c8ecc249b279924d1f":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["18359c8e12d55f66c27cfe7babe86283f06a6aa5"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["f496009c9f6039ed409630c8ecc249b279924d1f"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}