{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockReader#initializeHeader(BytesRef,long).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockReader#initializeHeader(BytesRef,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads and sets {@link #blockHeader}. Sets null if there is no block for the field anymore.\n   *\n   * @param searchedTerm       The searched term; or null if none.\n   * @param targetBlockStartFP The file pointer of the block to read.\n   */\n  protected void initializeHeader(BytesRef searchedTerm, long targetBlockStartFP) throws IOException {\n    initializeBlockReadLazily();\n    if (blockStartFP == targetBlockStartFP) {\n      // Optimization: If the block to read is already the current block, then\n      // reuse it directly without reading nor decoding the block bytes.\n      assert blockHeader != null;\n      if (searchedTerm == null || blockLine == null || searchedTerm.compareTo(blockLine.getTermBytes().getTerm()) <= 0) {\n        // If the searched term precedes lexicographically the current term,\n        // then reset the position to the first term line of the block.\n        // If the searched term equals the current term, we also need to reset\n        // to scan again the current line.\n        blockReadBuffer.setPosition(blockFirstLineStart);\n        lineIndexInBlock = 0;\n      }\n    } else {\n      blockInput.seek(targetBlockStartFP);\n      blockStartFP = targetBlockStartFP;\n      readHeader();\n      blockFirstLineStart = blockReadBuffer.getPosition();\n      lineIndexInBlock = 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f6185d883389450f593fb00103d2e89a0b8336","date":1577705030,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockReader#initializeHeader(BytesRef,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockReader#initializeHeader(BytesRef,long).mjava","sourceNew":"  /**\n   * Reads and sets {@link #blockHeader}. Sets null if there is no block for the field anymore.\n   *\n   * @param searchedTerm       The searched term; or null if none.\n   * @param targetBlockStartFP The file pointer of the block to read.\n   */\n  protected void initializeHeader(BytesRef searchedTerm, long targetBlockStartFP) throws IOException {\n    initializeBlockReadLazily();\n    if (blockStartFP == targetBlockStartFP) {\n      // Optimization: If the block to read is already the current block, then\n      // reuse it directly without reading nor decoding the block bytes.\n      if (blockHeader == null) {\n        throw newCorruptIndexException(\"Illegal absence of block\", blockStartFP);\n      }\n      if (searchedTerm == null || blockLine == null || searchedTerm.compareTo(blockLine.getTermBytes().getTerm()) <= 0) {\n        // If the searched term precedes lexicographically the current term,\n        // then reset the position to the first term line of the block.\n        // If the searched term equals the current term, we also need to reset\n        // to scan again the current line.\n        blockReadBuffer.setPosition(blockFirstLineStart);\n        lineIndexInBlock = 0;\n      }\n    } else {\n      blockInput.seek(targetBlockStartFP);\n      blockStartFP = targetBlockStartFP;\n      readHeader();\n      blockFirstLineStart = blockReadBuffer.getPosition();\n      lineIndexInBlock = 0;\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads and sets {@link #blockHeader}. Sets null if there is no block for the field anymore.\n   *\n   * @param searchedTerm       The searched term; or null if none.\n   * @param targetBlockStartFP The file pointer of the block to read.\n   */\n  protected void initializeHeader(BytesRef searchedTerm, long targetBlockStartFP) throws IOException {\n    initializeBlockReadLazily();\n    if (blockStartFP == targetBlockStartFP) {\n      // Optimization: If the block to read is already the current block, then\n      // reuse it directly without reading nor decoding the block bytes.\n      assert blockHeader != null;\n      if (searchedTerm == null || blockLine == null || searchedTerm.compareTo(blockLine.getTermBytes().getTerm()) <= 0) {\n        // If the searched term precedes lexicographically the current term,\n        // then reset the position to the first term line of the block.\n        // If the searched term equals the current term, we also need to reset\n        // to scan again the current line.\n        blockReadBuffer.setPosition(blockFirstLineStart);\n        lineIndexInBlock = 0;\n      }\n    } else {\n      blockInput.seek(targetBlockStartFP);\n      blockStartFP = targetBlockStartFP;\n      readHeader();\n      blockFirstLineStart = blockReadBuffer.getPosition();\n      lineIndexInBlock = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e478fa10594a2ef9d1ddf7d195020300453c4e","date":1577783287,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockReader#initializeHeader(BytesRef,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockReader#initializeHeader(BytesRef,long).mjava","sourceNew":"  /**\n   * Reads and sets {@link #blockHeader}. Sets null if there is no block for the field anymore.\n   *\n   * @param searchedTerm       The searched term; or null if none.\n   * @param targetBlockStartFP The file pointer of the block to read.\n   */\n  protected void initializeHeader(BytesRef searchedTerm, long targetBlockStartFP) throws IOException {\n    initializeBlockReadLazily();\n    if (blockStartFP == targetBlockStartFP) {\n      // Optimization: If the block to read is already the current block, then\n      // reuse it directly without reading nor decoding the block bytes.\n      if (blockHeader == null) {\n        throw newCorruptIndexException(\"Illegal absence of block\", blockStartFP);\n      }\n      if (searchedTerm == null || blockLine == null || searchedTerm.compareTo(blockLine.getTermBytes().getTerm()) <= 0) {\n        // If the searched term precedes lexicographically the current term,\n        // then reset the position to the first term line of the block.\n        // If the searched term equals the current term, we also need to reset\n        // to scan again the current line.\n        blockReadBuffer.setPosition(blockFirstLineStart);\n        lineIndexInBlock = 0;\n      }\n    } else {\n      blockInput.seek(targetBlockStartFP);\n      blockStartFP = targetBlockStartFP;\n      readHeader();\n      blockFirstLineStart = blockReadBuffer.getPosition();\n      lineIndexInBlock = 0;\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads and sets {@link #blockHeader}. Sets null if there is no block for the field anymore.\n   *\n   * @param searchedTerm       The searched term; or null if none.\n   * @param targetBlockStartFP The file pointer of the block to read.\n   */\n  protected void initializeHeader(BytesRef searchedTerm, long targetBlockStartFP) throws IOException {\n    initializeBlockReadLazily();\n    if (blockStartFP == targetBlockStartFP) {\n      // Optimization: If the block to read is already the current block, then\n      // reuse it directly without reading nor decoding the block bytes.\n      assert blockHeader != null;\n      if (searchedTerm == null || blockLine == null || searchedTerm.compareTo(blockLine.getTermBytes().getTerm()) <= 0) {\n        // If the searched term precedes lexicographically the current term,\n        // then reset the position to the first term line of the block.\n        // If the searched term equals the current term, we also need to reset\n        // to scan again the current line.\n        blockReadBuffer.setPosition(blockFirstLineStart);\n        lineIndexInBlock = 0;\n      }\n    } else {\n      blockInput.seek(targetBlockStartFP);\n      blockStartFP = targetBlockStartFP;\n      readHeader();\n      blockFirstLineStart = blockReadBuffer.getPosition();\n      lineIndexInBlock = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42f6185d883389450f593fb00103d2e89a0b8336":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62e478fa10594a2ef9d1ddf7d195020300453c4e":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","42f6185d883389450f593fb00103d2e89a0b8336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42f6185d883389450f593fb00103d2e89a0b8336"]},"commit2Childs":{"42f6185d883389450f593fb00103d2e89a0b8336":["62e478fa10594a2ef9d1ddf7d195020300453c4e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["42f6185d883389450f593fb00103d2e89a0b8336","62e478fa10594a2ef9d1ddf7d195020300453c4e"],"62e478fa10594a2ef9d1ddf7d195020300453c4e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e478fa10594a2ef9d1ddf7d195020300453c4e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}