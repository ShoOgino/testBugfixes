{"path":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testResetToAutoDefault().mjava","commits":[{"id":"f1db7bd2068060be0b68fcca95c8270c7cb60f6c","date":1419003415,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testResetToAutoDefault().mjava","pathOld":"/dev/null","sourceNew":"  public void testResetToAutoDefault() throws Exception {\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxMergeCount());\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxThreadCount());\n    cms.setMaxMergesAndThreads(4, 3);\n    assertEquals(4, cms.getMaxMergeCount());\n    assertEquals(3, cms.getMaxThreadCount());\n\n    try {\n      cms.setMaxMergesAndThreads(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, 4);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    try {\n      cms.setMaxMergesAndThreads(4, ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    cms.setMaxMergesAndThreads(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxMergeCount());\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxThreadCount());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testResetToAutoDefault().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testResetToAutoDefault().mjava","sourceNew":"  public void testResetToAutoDefault() throws Exception {\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxMergeCount());\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxThreadCount());\n    cms.setMaxMergesAndThreads(4, 3);\n    assertEquals(4, cms.getMaxMergeCount());\n    assertEquals(3, cms.getMaxThreadCount());\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      cms.setMaxMergesAndThreads(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, 4);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      cms.setMaxMergesAndThreads(4, ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n    });\n\n    cms.setMaxMergesAndThreads(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxMergeCount());\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxThreadCount());\n  }\n\n","sourceOld":"  public void testResetToAutoDefault() throws Exception {\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxMergeCount());\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxThreadCount());\n    cms.setMaxMergesAndThreads(4, 3);\n    assertEquals(4, cms.getMaxMergeCount());\n    assertEquals(3, cms.getMaxThreadCount());\n\n    try {\n      cms.setMaxMergesAndThreads(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, 4);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    try {\n      cms.setMaxMergesAndThreads(4, ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    cms.setMaxMergesAndThreads(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS);\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxMergeCount());\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxThreadCount());\n  }\n\n","bugFix":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"f1db7bd2068060be0b68fcca95c8270c7cb60f6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f1db7bd2068060be0b68fcca95c8270c7cb60f6c":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}