{"path":"src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","commits":[{"id":"8d38e6f83876012dcad7baa43e8297a09a7f7c28","date":1019242415,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","pathOld":"/dev/null","sourceNew":"    /*\n     *\n     */\n    public void testAsterisk()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n\tdoc1.add(Field.Text(\"body\", \"metal\"));\n        doc2.add(Field.Text(\"body\", \"metals\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n\twriter.optimize();\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\tQuery query1 = new TermQuery(new Term(\"body\", \"metal\"));\n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n        Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n\n\tHits result;\n\n\tresult = searcher.search(query1);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(2, result.length());\n\n\tresult = searcher.search(query3);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query4);\n\tassertEquals(2, result.length());\n\n\twriter.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03f833b5ec0d601205f139d7738cdc62b5b79d91","date":1027003299,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","sourceNew":"    /**\n     *\n     */\n    public void testAsterisk()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n\tdoc1.add(Field.Text(\"body\", \"metal\"));\n        doc2.add(Field.Text(\"body\", \"metals\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n\twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\tQuery query1 = new TermQuery(new Term(\"body\", \"metal\"));\n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n        Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n\n\tHits result;\n\n\tresult = searcher.search(query1);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(2, result.length());\n\n\tresult = searcher.search(query3);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query4);\n\tassertEquals(2, result.length());\n    }\n\n","sourceOld":"    /*\n     *\n     */\n    public void testAsterisk()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n\tdoc1.add(Field.Text(\"body\", \"metal\"));\n        doc2.add(Field.Text(\"body\", \"metals\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n\twriter.optimize();\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\tQuery query1 = new TermQuery(new Term(\"body\", \"metal\"));\n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n        Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n\n\tHits result;\n\n\tresult = searcher.search(query1);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(2, result.length());\n\n\tresult = searcher.search(query3);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query4);\n\tassertEquals(2, result.length());\n\n\twriter.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"674cb7971f8fa511a6c4f3968780fd6fa7f84cdc","date":1043088019,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","sourceNew":"    /**\n     *\n     */\n    public void testAsterisk()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n\tdoc1.add(Field.Text(\"body\", \"metal\"));\n        doc2.add(Field.Text(\"body\", \"metals\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n\twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\tQuery query1 = new TermQuery(new Term(\"body\", \"metal\"));\n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n        Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n        Query query5 = new WildcardQuery(new Term(\"body\", \"m*tals\"));\n\n        BooleanQuery query6 = new BooleanQuery();\n        query6.add(query5, false, false);\n\n        BooleanQuery query7 = new BooleanQuery();\n        query7.add(query3, false, false);\n        query7.add(query5, false, false);\n\n\tHits result;\n\n\tresult = searcher.search(query1);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(2, result.length());\n\n\tresult = searcher.search(query3);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query4);\n\tassertEquals(2, result.length());\n\n        result = searcher.search(query5);\n\tassertEquals(1, result.length());\n\n        result = searcher.search(query6);\n\tassertEquals(1, result.length());\n\n        result = searcher.search(query7);\n\tassertEquals(2, result.length());\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public void testAsterisk()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n\tdoc1.add(Field.Text(\"body\", \"metal\"));\n        doc2.add(Field.Text(\"body\", \"metals\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n\twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\tQuery query1 = new TermQuery(new Term(\"body\", \"metal\"));\n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n        Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n\n\tHits result;\n\n\tresult = searcher.search(query1);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(2, result.length());\n\n\tresult = searcher.search(query3);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query4);\n\tassertEquals(2, result.length());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dca593206e9e07eee9839b23d0c0b435915af416","date":1046539941,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","sourceNew":"    /**\n     * Tests Wildcard queries with an asterisk.\n     *\n     */\n    public void testAsterisk()\n        throws IOException\n    {\n        RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n\t    { \"metal\", \"metals\" }\n\t\t\t\t\t\t);\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\tQuery query1 = new TermQuery(new Term(\"body\", \"metal\"));\n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n        Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n        Query query5 = new WildcardQuery(new Term(\"body\", \"m*tals\"));\n\n        BooleanQuery query6 = new BooleanQuery();\n        query6.add(query5, false, false);\n\n        BooleanQuery query7 = new BooleanQuery();\n        query7.add(query3, false, false);\n        query7.add(query5, false, false);\n\n\t// Queries do not automatically lower-case search terms:\n        Query query8 = new WildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n\tassertMatches(searcher, query1, 1);\n\tassertMatches(searcher, query2, 2);\n\tassertMatches(searcher, query3, 1);\n\tassertMatches(searcher, query4, 2);\n\tassertMatches(searcher, query5, 1);\n\tassertMatches(searcher, query6, 1);\n\tassertMatches(searcher, query7, 2);\n\tassertMatches(searcher, query8, 0);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public void testAsterisk()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n\tdoc1.add(Field.Text(\"body\", \"metal\"));\n        doc2.add(Field.Text(\"body\", \"metals\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n\twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\tQuery query1 = new TermQuery(new Term(\"body\", \"metal\"));\n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n        Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n        Query query5 = new WildcardQuery(new Term(\"body\", \"m*tals\"));\n\n        BooleanQuery query6 = new BooleanQuery();\n        query6.add(query5, false, false);\n\n        BooleanQuery query7 = new BooleanQuery();\n        query7.add(query3, false, false);\n        query7.add(query5, false, false);\n\n\tHits result;\n\n\tresult = searcher.search(query1);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(2, result.length());\n\n\tresult = searcher.search(query3);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query4);\n\tassertEquals(2, result.length());\n\n        result = searcher.search(query5);\n\tassertEquals(1, result.length());\n\n        result = searcher.search(query6);\n\tassertEquals(1, result.length());\n\n        result = searcher.search(query7);\n\tassertEquals(2, result.length());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72e756875123955582aefc8e36c7ad4f13aafd0a","date":1093643971,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","sourceNew":"    /**\n     * Tests Wildcard queries with an asterisk.\n     *\n     */\n    public void testAsterisk()\n        throws IOException\n    {\n        RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n\t    { \"metal\", \"metals\" }\n\t\t\t\t\t\t);\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\tQuery query1 = new TermQuery(new Term(\"body\", \"metal\"));\n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n        Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n        Query query5 = new WildcardQuery(new Term(\"body\", \"m*tals\"));\n\n        BooleanQuery query6 = new BooleanQuery();\n        query6.add(query5, BooleanClause.Occur.SHOULD);\n\n        BooleanQuery query7 = new BooleanQuery();\n        query7.add(query3, BooleanClause.Occur.SHOULD);\n        query7.add(query5, BooleanClause.Occur.SHOULD);\n\n\t// Queries do not automatically lower-case search terms:\n        Query query8 = new WildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n\tassertMatches(searcher, query1, 1);\n\tassertMatches(searcher, query2, 2);\n\tassertMatches(searcher, query3, 1);\n\tassertMatches(searcher, query4, 2);\n\tassertMatches(searcher, query5, 1);\n\tassertMatches(searcher, query6, 1);\n\tassertMatches(searcher, query7, 2);\n\tassertMatches(searcher, query8, 0);\n    }\n\n","sourceOld":"    /**\n     * Tests Wildcard queries with an asterisk.\n     *\n     */\n    public void testAsterisk()\n        throws IOException\n    {\n        RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n\t    { \"metal\", \"metals\" }\n\t\t\t\t\t\t);\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\tQuery query1 = new TermQuery(new Term(\"body\", \"metal\"));\n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n        Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n        Query query5 = new WildcardQuery(new Term(\"body\", \"m*tals\"));\n\n        BooleanQuery query6 = new BooleanQuery();\n        query6.add(query5, false, false);\n\n        BooleanQuery query7 = new BooleanQuery();\n        query7.add(query3, false, false);\n        query7.add(query5, false, false);\n\n\t// Queries do not automatically lower-case search terms:\n        Query query8 = new WildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n\tassertMatches(searcher, query1, 1);\n\tassertMatches(searcher, query2, 2);\n\tassertMatches(searcher, query3, 1);\n\tassertMatches(searcher, query4, 2);\n\tassertMatches(searcher, query5, 1);\n\tassertMatches(searcher, query6, 1);\n\tassertMatches(searcher, query7, 2);\n\tassertMatches(searcher, query8, 0);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fb70d5d797131bf722eac86615eae787b5af9ea","date":1112363464,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","sourceNew":"  /**\n   * Tests Wildcard queries with an asterisk.\n   */\n  public void testAsterisk()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore);\n    Query query1 = new TermQuery(new Term(\"body\", \"metal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"m*tals\"));\n\n    BooleanQuery query6 = new BooleanQuery();\n    query6.add(query5, BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query7 = new BooleanQuery();\n    query7.add(query3, BooleanClause.Occur.SHOULD);\n    query7.add(query5, BooleanClause.Occur.SHOULD);\n\n// Queries do not automatically lower-case search terms:\n    Query query8 = new WildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n    assertMatches(searcher, query1, 1);\n    assertMatches(searcher, query2, 2);\n    assertMatches(searcher, query3, 1);\n    assertMatches(searcher, query4, 2);\n    assertMatches(searcher, query5, 1);\n    assertMatches(searcher, query6, 1);\n    assertMatches(searcher, query7, 2);\n    assertMatches(searcher, query8, 0);\n  }\n\n","sourceOld":"    /**\n     * Tests Wildcard queries with an asterisk.\n     *\n     */\n    public void testAsterisk()\n        throws IOException\n    {\n        RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n\t    { \"metal\", \"metals\" }\n\t\t\t\t\t\t);\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\tQuery query1 = new TermQuery(new Term(\"body\", \"metal\"));\n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n        Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n        Query query5 = new WildcardQuery(new Term(\"body\", \"m*tals\"));\n\n        BooleanQuery query6 = new BooleanQuery();\n        query6.add(query5, BooleanClause.Occur.SHOULD);\n\n        BooleanQuery query7 = new BooleanQuery();\n        query7.add(query3, BooleanClause.Occur.SHOULD);\n        query7.add(query5, BooleanClause.Occur.SHOULD);\n\n\t// Queries do not automatically lower-case search terms:\n        Query query8 = new WildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n\tassertMatches(searcher, query1, 1);\n\tassertMatches(searcher, query2, 2);\n\tassertMatches(searcher, query3, 1);\n\tassertMatches(searcher, query4, 2);\n\tassertMatches(searcher, query5, 1);\n\tassertMatches(searcher, query6, 1);\n\tassertMatches(searcher, query7, 2);\n\tassertMatches(searcher, query8, 0);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"019475e4db1040d4d1de532de6d1eb66957a6729","date":1116879414,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","sourceNew":"  /**\n   * Tests Wildcard queries with an asterisk.\n   */\n  public void testAsterisk()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore);\n    Query query1 = new TermQuery(new Term(\"body\", \"metal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"m*tals\"));\n\n    BooleanQuery query6 = new BooleanQuery();\n    query6.add(query5, BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query7 = new BooleanQuery();\n    query7.add(query3, BooleanClause.Occur.SHOULD);\n    query7.add(query5, BooleanClause.Occur.SHOULD);\n\n    // Queries do not automatically lower-case search terms:\n    Query query8 = new WildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n    assertMatches(searcher, query1, 1);\n    assertMatches(searcher, query2, 2);\n    assertMatches(searcher, query3, 1);\n    assertMatches(searcher, query4, 2);\n    assertMatches(searcher, query5, 1);\n    assertMatches(searcher, query6, 1);\n    assertMatches(searcher, query7, 2);\n    assertMatches(searcher, query8, 0);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tall\")), 0);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tal\")), 1);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tal*\")), 2);\n  }\n\n","sourceOld":"  /**\n   * Tests Wildcard queries with an asterisk.\n   */\n  public void testAsterisk()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore);\n    Query query1 = new TermQuery(new Term(\"body\", \"metal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"m*tals\"));\n\n    BooleanQuery query6 = new BooleanQuery();\n    query6.add(query5, BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query7 = new BooleanQuery();\n    query7.add(query3, BooleanClause.Occur.SHOULD);\n    query7.add(query5, BooleanClause.Occur.SHOULD);\n\n// Queries do not automatically lower-case search terms:\n    Query query8 = new WildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n    assertMatches(searcher, query1, 1);\n    assertMatches(searcher, query2, 2);\n    assertMatches(searcher, query3, 1);\n    assertMatches(searcher, query4, 2);\n    assertMatches(searcher, query5, 1);\n    assertMatches(searcher, query6, 1);\n    assertMatches(searcher, query7, 2);\n    assertMatches(searcher, query8, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","sourceNew":"  /**\n   * Tests Wildcard queries with an asterisk.\n   */\n  public void testAsterisk()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    Query query1 = new TermQuery(new Term(\"body\", \"metal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"m*tals\"));\n\n    BooleanQuery query6 = new BooleanQuery();\n    query6.add(query5, BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query7 = new BooleanQuery();\n    query7.add(query3, BooleanClause.Occur.SHOULD);\n    query7.add(query5, BooleanClause.Occur.SHOULD);\n\n    // Queries do not automatically lower-case search terms:\n    Query query8 = new WildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n    assertMatches(searcher, query1, 1);\n    assertMatches(searcher, query2, 2);\n    assertMatches(searcher, query3, 1);\n    assertMatches(searcher, query4, 2);\n    assertMatches(searcher, query5, 1);\n    assertMatches(searcher, query6, 1);\n    assertMatches(searcher, query7, 2);\n    assertMatches(searcher, query8, 0);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tall\")), 0);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tal\")), 1);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tal*\")), 2);\n  }\n\n","sourceOld":"  /**\n   * Tests Wildcard queries with an asterisk.\n   */\n  public void testAsterisk()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore);\n    Query query1 = new TermQuery(new Term(\"body\", \"metal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"m*tals\"));\n\n    BooleanQuery query6 = new BooleanQuery();\n    query6.add(query5, BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query7 = new BooleanQuery();\n    query7.add(query3, BooleanClause.Occur.SHOULD);\n    query7.add(query5, BooleanClause.Occur.SHOULD);\n\n    // Queries do not automatically lower-case search terms:\n    Query query8 = new WildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n    assertMatches(searcher, query1, 1);\n    assertMatches(searcher, query2, 2);\n    assertMatches(searcher, query3, 1);\n    assertMatches(searcher, query4, 2);\n    assertMatches(searcher, query5, 1);\n    assertMatches(searcher, query6, 1);\n    assertMatches(searcher, query7, 2);\n    assertMatches(searcher, query8, 0);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tall\")), 0);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tal\")), 1);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tal*\")), 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","sourceNew":"  /**\n   * Tests Wildcard queries with an asterisk.\n   */\n  public void testAsterisk()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    Query query1 = new TermQuery(new Term(\"body\", \"metal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"m*tals\"));\n\n    BooleanQuery query6 = new BooleanQuery();\n    query6.add(query5, BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query7 = new BooleanQuery();\n    query7.add(query3, BooleanClause.Occur.SHOULD);\n    query7.add(query5, BooleanClause.Occur.SHOULD);\n\n    // Queries do not automatically lower-case search terms:\n    Query query8 = new WildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n    assertMatches(searcher, query1, 1);\n    assertMatches(searcher, query2, 2);\n    assertMatches(searcher, query3, 1);\n    assertMatches(searcher, query4, 2);\n    assertMatches(searcher, query5, 1);\n    assertMatches(searcher, query6, 1);\n    assertMatches(searcher, query7, 2);\n    assertMatches(searcher, query8, 0);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tall\")), 0);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tal\")), 1);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tal*\")), 2);\n  }\n\n","sourceOld":"  /**\n   * Tests Wildcard queries with an asterisk.\n   */\n  public void testAsterisk()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore);\n    Query query1 = new TermQuery(new Term(\"body\", \"metal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"m*tals\"));\n\n    BooleanQuery query6 = new BooleanQuery();\n    query6.add(query5, BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query7 = new BooleanQuery();\n    query7.add(query3, BooleanClause.Occur.SHOULD);\n    query7.add(query5, BooleanClause.Occur.SHOULD);\n\n    // Queries do not automatically lower-case search terms:\n    Query query8 = new WildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n    assertMatches(searcher, query1, 1);\n    assertMatches(searcher, query2, 2);\n    assertMatches(searcher, query3, 1);\n    assertMatches(searcher, query4, 2);\n    assertMatches(searcher, query5, 1);\n    assertMatches(searcher, query6, 1);\n    assertMatches(searcher, query7, 2);\n    assertMatches(searcher, query8, 0);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tall\")), 0);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tal\")), 1);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tal*\")), 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","sourceNew":"  /**\n   * Tests Wildcard queries with an asterisk.\n   */\n  public void testAsterisk()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    Query query1 = new TermQuery(new Term(\"body\", \"metal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"m*tals\"));\n\n    BooleanQuery query6 = new BooleanQuery();\n    query6.add(query5, BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query7 = new BooleanQuery();\n    query7.add(query3, BooleanClause.Occur.SHOULD);\n    query7.add(query5, BooleanClause.Occur.SHOULD);\n\n    // Queries do not automatically lower-case search terms:\n    Query query8 = new WildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n    assertMatches(searcher, query1, 1);\n    assertMatches(searcher, query2, 2);\n    assertMatches(searcher, query3, 1);\n    assertMatches(searcher, query4, 2);\n    assertMatches(searcher, query5, 1);\n    assertMatches(searcher, query6, 1);\n    assertMatches(searcher, query7, 2);\n    assertMatches(searcher, query8, 0);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tall\")), 0);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tal\")), 1);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tal*\")), 2);\n  }\n\n","sourceOld":"  /**\n   * Tests Wildcard queries with an asterisk.\n   */\n  public void testAsterisk()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    Query query1 = new TermQuery(new Term(\"body\", \"metal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"m*tals\"));\n\n    BooleanQuery query6 = new BooleanQuery();\n    query6.add(query5, BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query7 = new BooleanQuery();\n    query7.add(query3, BooleanClause.Occur.SHOULD);\n    query7.add(query5, BooleanClause.Occur.SHOULD);\n\n    // Queries do not automatically lower-case search terms:\n    Query query8 = new WildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n    assertMatches(searcher, query1, 1);\n    assertMatches(searcher, query2, 2);\n    assertMatches(searcher, query3, 1);\n    assertMatches(searcher, query4, 2);\n    assertMatches(searcher, query5, 1);\n    assertMatches(searcher, query6, 1);\n    assertMatches(searcher, query7, 2);\n    assertMatches(searcher, query8, 0);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tall\")), 0);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tal\")), 1);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tal*\")), 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1fb70d5d797131bf722eac86615eae787b5af9ea":["72e756875123955582aefc8e36c7ad4f13aafd0a"],"03f833b5ec0d601205f139d7738cdc62b5b79d91":["8d38e6f83876012dcad7baa43e8297a09a7f7c28"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["019475e4db1040d4d1de532de6d1eb66957a6729"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["019475e4db1040d4d1de532de6d1eb66957a6729","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"019475e4db1040d4d1de532de6d1eb66957a6729":["1fb70d5d797131bf722eac86615eae787b5af9ea"],"72e756875123955582aefc8e36c7ad4f13aafd0a":["dca593206e9e07eee9839b23d0c0b435915af416"],"dca593206e9e07eee9839b23d0c0b435915af416":["674cb7971f8fa511a6c4f3968780fd6fa7f84cdc"],"8d38e6f83876012dcad7baa43e8297a09a7f7c28":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0a046c0c310bc77931fc8441bd920053b607dd14"],"674cb7971f8fa511a6c4f3968780fd6fa7f84cdc":["03f833b5ec0d601205f139d7738cdc62b5b79d91"]},"commit2Childs":{"1fb70d5d797131bf722eac86615eae787b5af9ea":["019475e4db1040d4d1de532de6d1eb66957a6729"],"03f833b5ec0d601205f139d7738cdc62b5b79d91":["674cb7971f8fa511a6c4f3968780fd6fa7f84cdc"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d38e6f83876012dcad7baa43e8297a09a7f7c28"],"0a046c0c310bc77931fc8441bd920053b607dd14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"019475e4db1040d4d1de532de6d1eb66957a6729":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"72e756875123955582aefc8e36c7ad4f13aafd0a":["1fb70d5d797131bf722eac86615eae787b5af9ea"],"8d38e6f83876012dcad7baa43e8297a09a7f7c28":["03f833b5ec0d601205f139d7738cdc62b5b79d91"],"dca593206e9e07eee9839b23d0c0b435915af416":["72e756875123955582aefc8e36c7ad4f13aafd0a"],"674cb7971f8fa511a6c4f3968780fd6fa7f84cdc":["dca593206e9e07eee9839b23d0c0b435915af416"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}