{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SolrWriter#log(int,String,Object).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SolrWriter#log(int,String,Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method is used for verbose debugging\n   *\n   * @param event The event name start.entity ,end.entity ,transformer.row\n   * @param name  Name of the entity/transformer\n   * @param row   The actual data . Can be a Map<String,object> or a List<Map<String,object>>\n   */\n  public abstract void log(int event, String name, Object row);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"157728c1f42b384dfc049157cc95adc767da3415","date":1224572739,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SolrWriter#log(int,String,Object).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SolrWriter#log(int,String,Object).mjava","sourceNew":"  /**\n   * This method is used for verbose debugging\n   *\n   * @param event The event name start.entity ,end.entity ,transformer.row\n   * @param name  Name of the entity/transformer\n   * @param row   The actual data . Can be a Map<String,object> or a List<Map<String,object>>\n   */\n  public void log(int event, String name, Object row) {\n    if (debugLogger == null) {\n      debugLogger = new DebugLogger();\n    }\n    debugLogger.log(event, name, row);\n  }\n\n","sourceOld":"  /**\n   * This method is used for verbose debugging\n   *\n   * @param event The event name start.entity ,end.entity ,transformer.row\n   * @param name  Name of the entity/transformer\n   * @param row   The actual data . Can be a Map<String,object> or a List<Map<String,object>>\n   */\n  public abstract void log(int event, String name, Object row);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"758fdd153bb361b47f22db79ace6af6f6b7b9330","date":1240213015,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SolrWriter#log(int,String,Object).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SolrWriter#log(int,String,Object).mjava","sourceNew":"  /**\n   * This method is used for verbose debugging\n   *\n   * @param event The event name start.entity ,end.entity ,transformer.row\n   * @param name  Name of the entity/transformer\n   * @param row   The actual data . Can be a Map<String,object> or a List<Map<String,object>>\n   */\n  public void log(int event, String name, Object row) {\n    getDebugLogger().log(event, name, row);\n  }\n\n","sourceOld":"  /**\n   * This method is used for verbose debugging\n   *\n   * @param event The event name start.entity ,end.entity ,transformer.row\n   * @param name  Name of the entity/transformer\n   * @param row   The actual data . Can be a Map<String,object> or a List<Map<String,object>>\n   */\n  public void log(int event, String name, Object row) {\n    if (debugLogger == null) {\n      debugLogger = new DebugLogger();\n    }\n    debugLogger.log(event, name, row);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SolrWriter#log(int,String,Object).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SolrWriter#log(int,String,Object).mjava","sourceNew":"  /**\n   * This method is used for verbose debugging\n   *\n   * @param event The event name start.entity ,end.entity ,transformer.row\n   * @param name  Name of the entity/transformer\n   * @param row   The actual data . Can be a Map<String,object> or a List<Map<String,object>>\n   */\n  public void log(int event, String name, Object row) {\n    getDebugLogger().log(event, name, row);\n  }\n\n","sourceOld":"  /**\n   * This method is used for verbose debugging\n   *\n   * @param event The event name start.entity ,end.entity ,transformer.row\n   * @param name  Name of the entity/transformer\n   * @param row   The actual data . Can be a Map<String,object> or a List<Map<String,object>>\n   */\n  public void log(int event, String name, Object row) {\n    getDebugLogger().log(event, name, row);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"758fdd153bb361b47f22db79ace6af6f6b7b9330":["157728c1f42b384dfc049157cc95adc767da3415"],"ad94625fb8d088209f46650c8097196fec67f00c":["758fdd153bb361b47f22db79ace6af6f6b7b9330"],"157728c1f42b384dfc049157cc95adc767da3415":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["157728c1f42b384dfc049157cc95adc767da3415"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"758fdd153bb361b47f22db79ace6af6f6b7b9330":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"157728c1f42b384dfc049157cc95adc767da3415":["758fdd153bb361b47f22db79ace6af6f6b7b9330"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}