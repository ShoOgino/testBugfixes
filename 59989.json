{"path":"src/java/org/apache/solr/util/xslt/TransformerProvider#TransformerProvider().mjava","commits":[{"id":"8eb6c8a345eb88b08768b150ffd0bd8088827260","date":1161193988,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/xslt/TransformerProvider#TransformerProvider().mjava","pathOld":"/dev/null","sourceNew":"  /** singleton */\n  private TransformerProvider() {\n    log = Logger.getLogger(TransformerProvider.class.getName());\n    \n    // tell'em: currently, we only cache the last used XSLT transform, and blindly recompile it\n    // once cacheLifetimeSeconds expires\n    log.warning(\n        \"The TransformerProvider's simplistic XSLT caching mechanism is not appropriate \"\n        + \"for high load scenarios, unless a single XSLT transform is used\"\n        + \" and xsltCacheLifetimeSeconds is set to a sufficiently high value.\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/xslt/TransformerProvider#TransformerProvider().mjava","pathOld":"src/java/org/apache/solr/util/xslt/TransformerProvider#TransformerProvider().mjava","sourceNew":"  /** singleton */\n  private TransformerProvider() {\n    log = LoggerFactory.getLogger(TransformerProvider.class.getName());\n    \n    // tell'em: currently, we only cache the last used XSLT transform, and blindly recompile it\n    // once cacheLifetimeSeconds expires\n    log.warn(\n        \"The TransformerProvider's simplistic XSLT caching mechanism is not appropriate \"\n        + \"for high load scenarios, unless a single XSLT transform is used\"\n        + \" and xsltCacheLifetimeSeconds is set to a sufficiently high value.\"\n    );\n  }\n\n","sourceOld":"  /** singleton */\n  private TransformerProvider() {\n    log = Logger.getLogger(TransformerProvider.class.getName());\n    \n    // tell'em: currently, we only cache the last used XSLT transform, and blindly recompile it\n    // once cacheLifetimeSeconds expires\n    log.warning(\n        \"The TransformerProvider's simplistic XSLT caching mechanism is not appropriate \"\n        + \"for high load scenarios, unless a single XSLT transform is used\"\n        + \" and xsltCacheLifetimeSeconds is set to a sufficiently high value.\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#TransformerProvider().mjava","pathOld":"src/java/org/apache/solr/util/xslt/TransformerProvider#TransformerProvider().mjava","sourceNew":"  /** singleton */\n  private TransformerProvider() {\n    log = LoggerFactory.getLogger(TransformerProvider.class.getName());\n    \n    // tell'em: currently, we only cache the last used XSLT transform, and blindly recompile it\n    // once cacheLifetimeSeconds expires\n    log.warn(\n        \"The TransformerProvider's simplistic XSLT caching mechanism is not appropriate \"\n        + \"for high load scenarios, unless a single XSLT transform is used\"\n        + \" and xsltCacheLifetimeSeconds is set to a sufficiently high value.\"\n    );\n  }\n\n","sourceOld":"  /** singleton */\n  private TransformerProvider() {\n    log = LoggerFactory.getLogger(TransformerProvider.class.getName());\n    \n    // tell'em: currently, we only cache the last used XSLT transform, and blindly recompile it\n    // once cacheLifetimeSeconds expires\n    log.warn(\n        \"The TransformerProvider's simplistic XSLT caching mechanism is not appropriate \"\n        + \"for high load scenarios, unless a single XSLT transform is used\"\n        + \" and xsltCacheLifetimeSeconds is set to a sufficiently high value.\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["8eb6c8a345eb88b08768b150ffd0bd8088827260"],"8eb6c8a345eb88b08768b150ffd0bd8088827260":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8eb6c8a345eb88b08768b150ffd0bd8088827260"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["ad94625fb8d088209f46650c8097196fec67f00c"],"8eb6c8a345eb88b08768b150ffd0bd8088827260":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}