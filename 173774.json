{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#expandTermsIfRewrite(BytesRef[],Map[BytesRef,Spans]).mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#expandTermsIfRewrite(BytesRef[],Map[BytesRef,Spans]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns terms as a List, but expanded to any terms in strictPhrases' keySet if present.  That can only\n   * happen if willRewrite() is true.\n   */\n  List<BytesRef> expandTermsIfRewrite(BytesRef[] terms, Map<BytesRef, Spans> strictPhrasesTermToSpans) {\n    if (willRewrite()) {\n      Set<BytesRef> allTermSet = new LinkedHashSet<>(terms.length + strictPhrasesTermToSpans.size());\n      Collections.addAll(allTermSet, terms);//FYI already sorted; will keep order\n      if (allTermSet.addAll(strictPhrasesTermToSpans.keySet())) { // true if any were added\n        List<BytesRef> sourceTerms = Arrays.asList(allTermSet.toArray(new BytesRef[allTermSet.size()]));\n        sourceTerms.sort(Comparator.naturalOrder());\n        return sourceTerms;\n      }\n    }\n    return Arrays.asList(terms); // no rewrite; use original terms\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#expandTermsIfRewrite(BytesRef[],Map[BytesRef,Spans]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns terms as a List, but expanded to any terms in strictPhrases' keySet if present.  That can only\n   * happen if willRewrite() is true.\n   */\n  List<BytesRef> expandTermsIfRewrite(BytesRef[] terms, Map<BytesRef, Spans> strictPhrasesTermToSpans) {\n    if (willRewrite()) {\n      Set<BytesRef> allTermSet = new LinkedHashSet<>(terms.length + strictPhrasesTermToSpans.size());\n      Collections.addAll(allTermSet, terms);//FYI already sorted; will keep order\n      if (allTermSet.addAll(strictPhrasesTermToSpans.keySet())) { // true if any were added\n        List<BytesRef> sourceTerms = Arrays.asList(allTermSet.toArray(new BytesRef[allTermSet.size()]));\n        sourceTerms.sort(Comparator.naturalOrder());\n        return sourceTerms;\n      }\n    }\n    return Arrays.asList(terms); // no rewrite; use original terms\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2e9861e4a2b724d9fc51b618714c579491b78d7","date":1479244606,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#expandTermsIfRewrite(BytesRef[],Map[BytesRef,Spans]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#expandTermsIfRewrite(BytesRef[],Map[BytesRef,Spans]).mjava","sourceNew":"  /**\n   * Returns terms as a List, but expanded to any terms in phraseHelper' keySet if present.  That can only\n   * happen if willRewrite() is true.\n   */\n  List<BytesRef> expandTermsIfRewrite(BytesRef[] terms, Map<BytesRef, Spans> strictPhrasesTermToSpans) {\n    if (willRewrite()) {\n      Set<BytesRef> allTermSet = new LinkedHashSet<>(terms.length + strictPhrasesTermToSpans.size());\n      Collections.addAll(allTermSet, terms);//FYI already sorted; will keep order\n      if (allTermSet.addAll(strictPhrasesTermToSpans.keySet())) { // true if any were added\n        List<BytesRef> sourceTerms = Arrays.asList(allTermSet.toArray(new BytesRef[allTermSet.size()]));\n        sourceTerms.sort(Comparator.naturalOrder());\n        return sourceTerms;\n      }\n    }\n    return Arrays.asList(terms); // no rewrite; use original terms\n  }\n\n","sourceOld":"  /**\n   * Returns terms as a List, but expanded to any terms in strictPhrases' keySet if present.  That can only\n   * happen if willRewrite() is true.\n   */\n  List<BytesRef> expandTermsIfRewrite(BytesRef[] terms, Map<BytesRef, Spans> strictPhrasesTermToSpans) {\n    if (willRewrite()) {\n      Set<BytesRef> allTermSet = new LinkedHashSet<>(terms.length + strictPhrasesTermToSpans.size());\n      Collections.addAll(allTermSet, terms);//FYI already sorted; will keep order\n      if (allTermSet.addAll(strictPhrasesTermToSpans.keySet())) { // true if any were added\n        List<BytesRef> sourceTerms = Arrays.asList(allTermSet.toArray(new BytesRef[allTermSet.size()]));\n        sourceTerms.sort(Comparator.naturalOrder());\n        return sourceTerms;\n      }\n    }\n    return Arrays.asList(terms); // no rewrite; use original terms\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#expandTermsIfRewrite(BytesRef[],Map[BytesRef,Spans]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#expandTermsIfRewrite(BytesRef[],Map[BytesRef,Spans]).mjava","sourceNew":"  /**\n   * Returns terms as a List, but expanded to any terms in phraseHelper' keySet if present.  That can only\n   * happen if willRewrite() is true.\n   */\n  List<BytesRef> expandTermsIfRewrite(BytesRef[] terms, Map<BytesRef, Spans> strictPhrasesTermToSpans) {\n    if (willRewrite()) {\n      Set<BytesRef> allTermSet = new LinkedHashSet<>(terms.length + strictPhrasesTermToSpans.size());\n      Collections.addAll(allTermSet, terms);//FYI already sorted; will keep order\n      if (allTermSet.addAll(strictPhrasesTermToSpans.keySet())) { // true if any were added\n        List<BytesRef> sourceTerms = Arrays.asList(allTermSet.toArray(new BytesRef[allTermSet.size()]));\n        sourceTerms.sort(Comparator.naturalOrder());\n        return sourceTerms;\n      }\n    }\n    return Arrays.asList(terms); // no rewrite; use original terms\n  }\n\n","sourceOld":"  /**\n   * Returns terms as a List, but expanded to any terms in strictPhrases' keySet if present.  That can only\n   * happen if willRewrite() is true.\n   */\n  List<BytesRef> expandTermsIfRewrite(BytesRef[] terms, Map<BytesRef, Spans> strictPhrasesTermToSpans) {\n    if (willRewrite()) {\n      Set<BytesRef> allTermSet = new LinkedHashSet<>(terms.length + strictPhrasesTermToSpans.size());\n      Collections.addAll(allTermSet, terms);//FYI already sorted; will keep order\n      if (allTermSet.addAll(strictPhrasesTermToSpans.keySet())) { // true if any were added\n        List<BytesRef> sourceTerms = Arrays.asList(allTermSet.toArray(new BytesRef[allTermSet.size()]));\n        sourceTerms.sort(Comparator.naturalOrder());\n        return sourceTerms;\n      }\n    }\n    return Arrays.asList(terms); // no rewrite; use original terms\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571","date":1515642580,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#expandTermsIfRewrite(BytesRef[],Map[BytesRef,Spans]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns terms as a List, but expanded to any terms in phraseHelper' keySet if present.  That can only\n   * happen if willRewrite() is true.\n   */\n  List<BytesRef> expandTermsIfRewrite(BytesRef[] terms, Map<BytesRef, Spans> strictPhrasesTermToSpans) {\n    if (willRewrite()) {\n      Set<BytesRef> allTermSet = new LinkedHashSet<>(terms.length + strictPhrasesTermToSpans.size());\n      Collections.addAll(allTermSet, terms);//FYI already sorted; will keep order\n      if (allTermSet.addAll(strictPhrasesTermToSpans.keySet())) { // true if any were added\n        List<BytesRef> sourceTerms = Arrays.asList(allTermSet.toArray(new BytesRef[allTermSet.size()]));\n        sourceTerms.sort(Comparator.naturalOrder());\n        return sourceTerms;\n      }\n    }\n    return Arrays.asList(terms); // no rewrite; use original terms\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#expandTermsIfRewrite(BytesRef[],Map[BytesRef,Spans]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns terms as a List, but expanded to any terms in phraseHelper' keySet if present.  That can only\n   * happen if willRewrite() is true.\n   */\n  List<BytesRef> expandTermsIfRewrite(BytesRef[] terms, Map<BytesRef, Spans> strictPhrasesTermToSpans) {\n    if (willRewrite()) {\n      Set<BytesRef> allTermSet = new LinkedHashSet<>(terms.length + strictPhrasesTermToSpans.size());\n      Collections.addAll(allTermSet, terms);//FYI already sorted; will keep order\n      if (allTermSet.addAll(strictPhrasesTermToSpans.keySet())) { // true if any were added\n        List<BytesRef> sourceTerms = Arrays.asList(allTermSet.toArray(new BytesRef[allTermSet.size()]));\n        sourceTerms.sort(Comparator.naturalOrder());\n        return sourceTerms;\n      }\n    }\n    return Arrays.asList(terms); // no rewrite; use original terms\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["f2e9861e4a2b724d9fc51b618714c579491b78d7","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"f2e9861e4a2b724d9fc51b618714c579491b78d7":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f2e9861e4a2b724d9fc51b618714c579491b78d7"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["f2e9861e4a2b724d9fc51b618714c579491b78d7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2e9861e4a2b724d9fc51b618714c579491b78d7":["b94236357aaa22b76c10629851fe4e376e0cea82","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["f2e9861e4a2b724d9fc51b618714c579491b78d7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}