{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosFormat#getDocValuesType(IndexInput,byte).mjava","commits":[{"id":"e2fe60a17a7a0cfd101b1169acf089221bc6c166","date":1412767493,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosFormat#getDocValuesType(IndexInput,byte).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosReader#getDocValuesType(IndexInput,byte).mjava","sourceNew":"  private static DocValuesType getDocValuesType(IndexInput input, byte b) throws IOException {\n    if (b == 0) {\n      return null;\n    } else if (b == 1) {\n      return DocValuesType.NUMERIC;\n    } else if (b == 2) {\n      return DocValuesType.BINARY;\n    } else if (b == 3) {\n      return DocValuesType.SORTED;\n    } else if (b == 4) {\n      return DocValuesType.SORTED_SET;\n    } else if (b == 5) {\n      return DocValuesType.SORTED_NUMERIC;\n    } else {\n      throw new CorruptIndexException(\"invalid docvalues byte: \" + b, input);\n    }\n  }\n\n","sourceOld":"  private static DocValuesType getDocValuesType(IndexInput input, byte b) throws IOException {\n    if (b == 0) {\n      return null;\n    } else if (b == 1) {\n      return DocValuesType.NUMERIC;\n    } else if (b == 2) {\n      return DocValuesType.BINARY;\n    } else if (b == 3) {\n      return DocValuesType.SORTED;\n    } else if (b == 4) {\n      return DocValuesType.SORTED_SET;\n    } else if (b == 5) {\n      return DocValuesType.SORTED_NUMERIC;\n    } else {\n      throw new CorruptIndexException(\"invalid docvalues byte: \" + b, input);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosFormat#getDocValuesType(IndexInput,byte).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosReader#getDocValuesType(IndexInput,byte).mjava","sourceNew":"  private static DocValuesType getDocValuesType(IndexInput input, byte b) throws IOException {\n    if (b == 0) {\n      return null;\n    } else if (b == 1) {\n      return DocValuesType.NUMERIC;\n    } else if (b == 2) {\n      return DocValuesType.BINARY;\n    } else if (b == 3) {\n      return DocValuesType.SORTED;\n    } else if (b == 4) {\n      return DocValuesType.SORTED_SET;\n    } else if (b == 5) {\n      return DocValuesType.SORTED_NUMERIC;\n    } else {\n      throw new CorruptIndexException(\"invalid docvalues byte: \" + b, input);\n    }\n  }\n\n","sourceOld":"  private static DocValuesType getDocValuesType(IndexInput input, byte b) throws IOException {\n    if (b == 0) {\n      return null;\n    } else if (b == 1) {\n      return DocValuesType.NUMERIC;\n    } else if (b == 2) {\n      return DocValuesType.BINARY;\n    } else if (b == 3) {\n      return DocValuesType.SORTED;\n    } else if (b == 4) {\n      return DocValuesType.SORTED_SET;\n    } else if (b == 5) {\n      return DocValuesType.SORTED_NUMERIC;\n    } else {\n      throw new CorruptIndexException(\"invalid docvalues byte: \" + b, input);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosFormat#getDocValuesType(IndexInput,byte).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosFormat#getDocValuesType(IndexInput,byte).mjava","sourceNew":"  private static DocValuesType getDocValuesType(IndexInput input, byte b) throws IOException {\n    switch(b) {\n    case 0:\n      return null;\n    case 1:\n      return DocValuesType.NUMERIC;\n    case 2:\n      return DocValuesType.BINARY;\n    case 3:\n      return DocValuesType.SORTED;\n    case 4:\n      return DocValuesType.SORTED_SET;\n    case 5:\n      return DocValuesType.SORTED_NUMERIC;\n    default:\n      throw new CorruptIndexException(\"invalid docvalues byte: \" + b, input);\n    }\n  }\n\n","sourceOld":"  private static DocValuesType getDocValuesType(IndexInput input, byte b) throws IOException {\n    if (b == 0) {\n      return null;\n    } else if (b == 1) {\n      return DocValuesType.NUMERIC;\n    } else if (b == 2) {\n      return DocValuesType.BINARY;\n    } else if (b == 3) {\n      return DocValuesType.SORTED;\n    } else if (b == 4) {\n      return DocValuesType.SORTED_SET;\n    } else if (b == 5) {\n      return DocValuesType.SORTED_NUMERIC;\n    } else {\n      throw new CorruptIndexException(\"invalid docvalues byte: \" + b, input);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosFormat#getDocValuesType(IndexInput,byte).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosFormat#getDocValuesType(IndexInput,byte).mjava","sourceNew":"  private static DocValuesType getDocValuesType(IndexInput input, byte b) throws IOException {\n    switch(b) {\n    case 0:\n      return null;\n    case 1:\n      return DocValuesType.NUMERIC;\n    case 2:\n      return DocValuesType.BINARY;\n    case 3:\n      return DocValuesType.SORTED;\n    case 4:\n      return DocValuesType.SORTED_SET;\n    case 5:\n      return DocValuesType.SORTED_NUMERIC;\n    default:\n      throw new CorruptIndexException(\"invalid docvalues byte: \" + b, input);\n    }\n  }\n\n","sourceOld":"  private static DocValuesType getDocValuesType(IndexInput input, byte b) throws IOException {\n    if (b == 0) {\n      return null;\n    } else if (b == 1) {\n      return DocValuesType.NUMERIC;\n    } else if (b == 2) {\n      return DocValuesType.BINARY;\n    } else if (b == 3) {\n      return DocValuesType.SORTED;\n    } else if (b == 4) {\n      return DocValuesType.SORTED_SET;\n    } else if (b == 5) {\n      return DocValuesType.SORTED_NUMERIC;\n    } else {\n      throw new CorruptIndexException(\"invalid docvalues byte: \" + b, input);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosFormat#getDocValuesType(IndexInput,byte).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosFormat#getDocValuesType(IndexInput,byte).mjava","sourceNew":"  private static DocValuesType getDocValuesType(IndexInput input, byte b) throws IOException {\n    switch(b) {\n    case 0:\n      return DocValuesType.NO;\n    case 1:\n      return DocValuesType.NUMERIC;\n    case 2:\n      return DocValuesType.BINARY;\n    case 3:\n      return DocValuesType.SORTED;\n    case 4:\n      return DocValuesType.SORTED_SET;\n    case 5:\n      return DocValuesType.SORTED_NUMERIC;\n    default:\n      throw new CorruptIndexException(\"invalid docvalues byte: \" + b, input);\n    }\n  }\n\n","sourceOld":"  private static DocValuesType getDocValuesType(IndexInput input, byte b) throws IOException {\n    switch(b) {\n    case 0:\n      return null;\n    case 1:\n      return DocValuesType.NUMERIC;\n    case 2:\n      return DocValuesType.BINARY;\n    case 3:\n      return DocValuesType.SORTED;\n    case 4:\n      return DocValuesType.SORTED_SET;\n    case 5:\n      return DocValuesType.SORTED_NUMERIC;\n    default:\n      throw new CorruptIndexException(\"invalid docvalues byte: \" + b, input);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosFormat#getDocValuesType(IndexInput,byte).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosFormat#getDocValuesType(IndexInput,byte).mjava","sourceNew":"  private static DocValuesType getDocValuesType(IndexInput input, byte b) throws IOException {\n    switch(b) {\n    case 0:\n      return DocValuesType.NONE;\n    case 1:\n      return DocValuesType.NUMERIC;\n    case 2:\n      return DocValuesType.BINARY;\n    case 3:\n      return DocValuesType.SORTED;\n    case 4:\n      return DocValuesType.SORTED_SET;\n    case 5:\n      return DocValuesType.SORTED_NUMERIC;\n    default:\n      throw new CorruptIndexException(\"invalid docvalues byte: \" + b, input);\n    }\n  }\n\n","sourceOld":"  private static DocValuesType getDocValuesType(IndexInput input, byte b) throws IOException {\n    switch(b) {\n    case 0:\n      return DocValuesType.NO;\n    case 1:\n      return DocValuesType.NUMERIC;\n    case 2:\n      return DocValuesType.BINARY;\n    case 3:\n      return DocValuesType.SORTED;\n    case 4:\n      return DocValuesType.SORTED_SET;\n    case 5:\n      return DocValuesType.SORTED_NUMERIC;\n    default:\n      throw new CorruptIndexException(\"invalid docvalues byte: \" + b, input);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f8973f28b29873ff0d7a016e562c9036ae649a9","date":1428098193,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosFormat#getDocValuesType(IndexInput,byte).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosFormat#getDocValuesType(IndexInput,byte).mjava","sourceNew":"  private static DocValuesType getDocValuesType(IndexInput input, byte b) throws IOException {\n    switch(b) {\n    case 0:\n      return DocValuesType.NONE;\n    case 1:\n      return DocValuesType.NUMERIC;\n    case 2:\n      return DocValuesType.BINARY;\n    case 3:\n      return DocValuesType.SORTED;\n    case 4:\n      return DocValuesType.SORTED_SET;\n    case 5:\n      return DocValuesType.SORTED_NUMERIC;\n    default:\n      throw new CorruptIndexException(\"invalid docvalues byte: \" + b, input);\n    }\n  }\n\n","sourceOld":"  private static DocValuesType getDocValuesType(IndexInput input, byte b) throws IOException {\n    switch(b) {\n    case 0:\n      return DocValuesType.NONE;\n    case 1:\n      return DocValuesType.NUMERIC;\n    case 2:\n      return DocValuesType.BINARY;\n    case 3:\n      return DocValuesType.SORTED;\n    case 4:\n      return DocValuesType.SORTED_SET;\n    case 5:\n      return DocValuesType.SORTED_NUMERIC;\n    default:\n      throw new CorruptIndexException(\"invalid docvalues byte: \" + b, input);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["55980207f1977bd1463465de1659b821347e2fa8","3184874f7f3aca850248483485b4995343066875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"3f8973f28b29873ff0d7a016e562c9036ae649a9":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f8973f28b29873ff0d7a016e562c9036ae649a9"]},"commit2Childs":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["55980207f1977bd1463465de1659b821347e2fa8","3184874f7f3aca850248483485b4995343066875"],"55980207f1977bd1463465de1659b821347e2fa8":["0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e2fe60a17a7a0cfd101b1169acf089221bc6c166","55980207f1977bd1463465de1659b821347e2fa8"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"3f8973f28b29873ff0d7a016e562c9036ae649a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","2bb2842e561df4e8e9ad89010605fc86ac265465"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["3f8973f28b29873ff0d7a016e562c9036ae649a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}