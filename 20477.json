{"path":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#assertQueryEquals(String,String...).mjava","commits":[{"id":"69227e655c7a72315c68e596f0a899f339b1ec2b","date":1340137626,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#assertQueryEquals(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * NOTE: defType is not only used to pick the parser, but also to record \n   * the parser being tested for coverage sanity checking\n   * @see #testParserCoverage\n   * @see #assertQueryEquals\n   */\n  protected void assertQueryEquals(final String defType,\n                                   final String... inputs) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      assertQueryEquals(defType, req, inputs);\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a144790859eb303122988cd315215ff30f449d2","date":1493938430,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#assertQueryEquals(String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#assertQueryEquals(String,String...).mjava","sourceNew":"  /**\n   * NOTE: defType is not only used to pick the parser, but also to record \n   * the parser being tested for coverage sanity checking\n   * @see #testParserCoverage\n   * @see #assertQueryEquals\n   */\n  protected void assertQueryEquals(final String defType,\n                                   final String... inputs) throws Exception {\n    SolrQueryRequest req = req(new String[] {\"df\", \"text\"});\n    try {\n      assertQueryEquals(defType, req, inputs);\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * NOTE: defType is not only used to pick the parser, but also to record \n   * the parser being tested for coverage sanity checking\n   * @see #testParserCoverage\n   * @see #assertQueryEquals\n   */\n  protected void assertQueryEquals(final String defType,\n                                   final String... inputs) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      assertQueryEquals(defType, req, inputs);\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#assertQueryEquals(String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#assertQueryEquals(String,String...).mjava","sourceNew":"  /**\n   * NOTE: defType is not only used to pick the parser, but also to record \n   * the parser being tested for coverage sanity checking\n   * @see #testParserCoverage\n   * @see #assertQueryEquals\n   */\n  protected void assertQueryEquals(final String defType,\n                                   final String... inputs) throws Exception {\n    SolrQueryRequest req = req(new String[] {\"df\", \"text\"});\n    try {\n      assertQueryEquals(defType, req, inputs);\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * NOTE: defType is not only used to pick the parser, but also to record \n   * the parser being tested for coverage sanity checking\n   * @see #testParserCoverage\n   * @see #assertQueryEquals\n   */\n  protected void assertQueryEquals(final String defType,\n                                   final String... inputs) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      assertQueryEquals(defType, req, inputs);\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0","date":1576656084,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#assertQueryEquals(String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#assertQueryEquals(String,String...).mjava","sourceNew":"  /**\n   * NOTE: defType is not only used to pick the parser, but also to record\n   * the parser being tested for coverage sanity checking\n   * @see #testParserCoverage\n   * @see #assertQueryEquals\n   */\n  protected void assertQueryEquals(final String defType,\n                                   final String... inputs) throws Exception {\n    SolrQueryRequest req = req(new String[] {\"df\", \"text\"});\n    try {\n      assertQueryEquals(defType, req, inputs);\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * NOTE: defType is not only used to pick the parser, but also to record \n   * the parser being tested for coverage sanity checking\n   * @see #testParserCoverage\n   * @see #assertQueryEquals\n   */\n  protected void assertQueryEquals(final String defType,\n                                   final String... inputs) throws Exception {\n    SolrQueryRequest req = req(new String[] {\"df\", \"text\"});\n    try {\n      assertQueryEquals(defType, req, inputs);\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#assertQueryEquals(String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#assertQueryEquals(String,String...).mjava","sourceNew":"  /**\n   * NOTE: defType is not only used to pick the parser, but also to record\n   * the parser being tested for coverage sanity checking\n   * @see #testParserCoverage\n   * @see #assertQueryEquals\n   */\n  protected void assertQueryEquals(final String defType,\n                                   final String... inputs) throws Exception {\n    SolrQueryRequest req = req(new String[] {\"df\", \"text\"});\n    try {\n      assertQueryEquals(defType, req, inputs);\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * NOTE: defType is not only used to pick the parser, but also to record \n   * the parser being tested for coverage sanity checking\n   * @see #testParserCoverage\n   * @see #assertQueryEquals\n   */\n  protected void assertQueryEquals(final String defType,\n                                   final String... inputs) throws Exception {\n    SolrQueryRequest req = req(new String[] {\"df\", \"text\"});\n    try {\n      assertQueryEquals(defType, req, inputs);\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"246314af59d76a47fccc31e9494eefee01ec9c00":["1a144790859eb303122988cd315215ff30f449d2","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["69227e655c7a72315c68e596f0a899f339b1ec2b","1a144790859eb303122988cd315215ff30f449d2"],"69227e655c7a72315c68e596f0a899f339b1ec2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1a144790859eb303122988cd315215ff30f449d2":["69227e655c7a72315c68e596f0a899f339b1ec2b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["1a144790859eb303122988cd315215ff30f449d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"]},"commit2Childs":{"246314af59d76a47fccc31e9494eefee01ec9c00":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"69227e655c7a72315c68e596f0a899f339b1ec2b":["e9017cf144952056066919f1ebc7897ff9bd71b1","1a144790859eb303122988cd315215ff30f449d2"],"1a144790859eb303122988cd315215ff30f449d2":["246314af59d76a47fccc31e9494eefee01ec9c00","e9017cf144952056066919f1ebc7897ff9bd71b1","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["69227e655c7a72315c68e596f0a899f339b1ec2b"],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["246314af59d76a47fccc31e9494eefee01ec9c00","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}