{"path":"src/java/org/apache/lucene/search/spans/SpanNearQuery#hashCode().mjava","commits":[{"id":"bad80f233c792910046d4541105f48b3fc1cfb0e","date":1116898513,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanNearQuery#hashCode().mjava","pathOld":"/dev/null","sourceNew":"  public int hashCode() {\n    int result;\n    result = clauses.hashCode();\n    result = 29 * result + slop;\n    result = 29 * result + (inOrder ? 1 : 0);\n    result = 29 * result + field.hashCode();\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60334587d25d1f029fc139c0a379df43ce7c7248","date":1116929723,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanNearQuery#hashCode().mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#hashCode().mjava","sourceNew":"  public int hashCode() {\n    int result;\n    result = clauses.hashCode();\n    result += slop * 29;\n    result +=  (inOrder ? 1 : 0);\n    result ^= field.hashCode();\n    return result;\n  }\n\n","sourceOld":"  public int hashCode() {\n    int result;\n    result = clauses.hashCode();\n    result = 29 * result + slop;\n    result = 29 * result + (inOrder ? 1 : 0);\n    result = 29 * result + field.hashCode();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37727c003d0055afbc22d49ba0434cc4028166db","date":1135617136,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanNearQuery#hashCode().mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#hashCode().mjava","sourceNew":"  public int hashCode() {\n    int result;\n    result = clauses.hashCode();\n    // Mix bits before folding in things like boost, since it could cancel the\n    // last element of clauses.  This particular mix also serves to\n    // differentiate SpanNearQuery hashcodes from others.\n    result ^= (result << 14) | (result >>> 19);  // reversible\n    result += Float.floatToRawIntBits(getBoost());\n    result += slop;\n    result ^= (inOrder ? 0x99AFD3BD : 0);\n    return result;\n  }\n\n","sourceOld":"  public int hashCode() {\n    int result;\n    result = clauses.hashCode();\n    result += slop * 29;\n    result +=  (inOrder ? 1 : 0);\n    result ^= field.hashCode();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanNearQuery#hashCode().mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    int result;\n    result = clauses.hashCode();\n    // Mix bits before folding in things like boost, since it could cancel the\n    // last element of clauses.  This particular mix also serves to\n    // differentiate SpanNearQuery hashcodes from others.\n    result ^= (result << 14) | (result >>> 19);  // reversible\n    result += Float.floatToRawIntBits(getBoost());\n    result += slop;\n    result ^= (inOrder ? 0x99AFD3BD : 0);\n    return result;\n  }\n\n","sourceOld":"  public int hashCode() {\n    int result;\n    result = clauses.hashCode();\n    // Mix bits before folding in things like boost, since it could cancel the\n    // last element of clauses.  This particular mix also serves to\n    // differentiate SpanNearQuery hashcodes from others.\n    result ^= (result << 14) | (result >>> 19);  // reversible\n    result += Float.floatToRawIntBits(getBoost());\n    result += slop;\n    result ^= (inOrder ? 0x99AFD3BD : 0);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanNearQuery#hashCode().mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    int result;\n    result = clauses.hashCode();\n    // Mix bits before folding in things like boost, since it could cancel the\n    // last element of clauses.  This particular mix also serves to\n    // differentiate SpanNearQuery hashcodes from others.\n    result ^= (result << 14) | (result >>> 19);  // reversible\n    result += Float.floatToRawIntBits(getBoost());\n    result += slop;\n    result ^= (inOrder ? 0x99AFD3BD : 0);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    int result;\n    result = clauses.hashCode();\n    // Mix bits before folding in things like boost, since it could cancel the\n    // last element of clauses.  This particular mix also serves to\n    // differentiate SpanNearQuery hashcodes from others.\n    result ^= (result << 14) | (result >>> 19);  // reversible\n    result += Float.floatToRawIntBits(getBoost());\n    result += slop;\n    result ^= (inOrder ? 0x99AFD3BD : 0);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a9e385641d717e641408d8fbbc62be8fc766357":["37727c003d0055afbc22d49ba0434cc4028166db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37727c003d0055afbc22d49ba0434cc4028166db":["60334587d25d1f029fc139c0a379df43ce7c7248"],"60334587d25d1f029fc139c0a379df43ce7c7248":["bad80f233c792910046d4541105f48b3fc1cfb0e"],"bad80f233c792910046d4541105f48b3fc1cfb0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bad80f233c792910046d4541105f48b3fc1cfb0e"],"37727c003d0055afbc22d49ba0434cc4028166db":["8a9e385641d717e641408d8fbbc62be8fc766357"],"60334587d25d1f029fc139c0a379df43ce7c7248":["37727c003d0055afbc22d49ba0434cc4028166db"],"bad80f233c792910046d4541105f48b3fc1cfb0e":["60334587d25d1f029fc139c0a379df43ce7c7248"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}