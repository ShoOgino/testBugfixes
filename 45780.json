{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","commits":[{"id":"f51cb06175d6fae01dc608dd7ab884973354e4bf","date":1207240926,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    SinkTokenizer tokens = new SinkTokenizer();\n    Token t = new Token();\n    t.setTermText(\"a\");\n    t.setPositionIncrement(0);\n    tokens.add(t);\n    t.setTermText(\"b\");\n    t.setPositionIncrement(1);\n    tokens.add(t);\n    t.setTermText(\"c\");\n    tokens.add(t);\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    Hits hits = s.search(pq);\n    assertEquals(1, hits.length());\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q);\n    assertEquals(1, hits.length());\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["abfdd5170b43f046dfac9dafd6e12c1a65f3018c","abfdd5170b43f046dfac9dafd6e12c1a65f3018c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abfdd5170b43f046dfac9dafd6e12c1a65f3018c","date":1209502915,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    SinkTokenizer tokens = new SinkTokenizer();\n    Token t = new Token();\n    t.setTermText(\"a\");\n    t.setPositionIncrement(0);\n    tokens.add(t);\n    t.setTermText(\"b\");\n    t.setPositionIncrement(1);\n    tokens.add(t);\n    t.setTermText(\"c\");\n    tokens.add(t);\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    Hits hits = s.search(pq);\n    assertEquals(1, hits.length());\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q);\n    assertEquals(1, hits.length());\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(-1, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    SinkTokenizer tokens = new SinkTokenizer();\n    Token t = new Token();\n    t.setTermText(\"a\");\n    t.setPositionIncrement(0);\n    tokens.add(t);\n    t.setTermText(\"b\");\n    t.setPositionIncrement(1);\n    tokens.add(t);\n    t.setTermText(\"c\");\n    tokens.add(t);\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    Hits hits = s.search(pq);\n    assertEquals(1, hits.length());\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q);\n    assertEquals(1, hits.length());\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":["f51cb06175d6fae01dc608dd7ab884973354e4bf"],"bugIntro":["9c576fba1e3c6d11c61fa0802214d5150fb5c633","9c576fba1e3c6d11c61fa0802214d5150fb5c633"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    SinkTokenizer tokens = new SinkTokenizer();\n    Token t = new Token();\n    t.setTermText(\"a\");\n    t.setPositionIncrement(0);\n    tokens.add(t);\n    t.setTermText(\"b\");\n    t.setPositionIncrement(1);\n    tokens.add(t);\n    t.setTermText(\"c\");\n    tokens.add(t);\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(-1, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    SinkTokenizer tokens = new SinkTokenizer();\n    Token t = new Token();\n    t.setTermText(\"a\");\n    t.setPositionIncrement(0);\n    tokens.add(t);\n    t.setTermText(\"b\");\n    t.setPositionIncrement(1);\n    tokens.add(t);\n    t.setTermText(\"c\");\n    tokens.add(t);\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    Hits hits = s.search(pq);\n    assertEquals(1, hits.length());\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q);\n    assertEquals(1, hits.length());\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(-1, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    SinkTokenizer tokens = new SinkTokenizer();\n    Token t = new Token();\n    t.setTermBuffer(\"a\");\n    t.setPositionIncrement(0);\n    tokens.add(t);\n    t.setTermBuffer(\"b\");\n    t.setPositionIncrement(1);\n    tokens.add(t);\n    t.setTermBuffer(\"c\");\n    tokens.add(t);\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(-1, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    SinkTokenizer tokens = new SinkTokenizer();\n    Token t = new Token();\n    t.setTermText(\"a\");\n    t.setPositionIncrement(0);\n    tokens.add(t);\n    t.setTermText(\"b\");\n    t.setPositionIncrement(1);\n    tokens.add(t);\n    t.setTermText(\"c\");\n    tokens.add(t);\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(-1, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    SinkTokenizer tokens = new SinkTokenizer();\n    Token t = new Token();\n    t.setTermBuffer(\"a\");\n    t.setPositionIncrement(0);\n    tokens.add(t);\n    t.setTermBuffer(\"b\");\n    t.setPositionIncrement(1);\n    tokens.add(t);\n    t.setTermBuffer(\"c\");\n    tokens.add(t);\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(-1, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    SinkTokenizer tokens = new SinkTokenizer();\n    Token t = new Token();\n    t.setTermBuffer(\"a\");\n    t.setPositionIncrement(0);\n    tokens.add(t);\n    t.setTermBuffer(\"b\");\n    t.setPositionIncrement(1);\n    tokens.add(t);\n    t.setTermBuffer(\"c\");\n    tokens.add(t);\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(-1, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    SinkTokenizer tokens = new SinkTokenizer();\n    tokens.addAttribute(TermAttribute.class);\n    tokens.addAttribute(PositionIncrementAttribute.class);\n\n    AttributeSource state = new AttributeSource();\n    TermAttribute termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n    termAtt.setTermBuffer(\"a\");\n    posIncrAtt.setPositionIncrement(0);\n    tokens.add(state);\n\n    state = new AttributeSource();\n    termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n\n    termAtt.setTermBuffer(\"b\");\n    posIncrAtt.setPositionIncrement(1);\n    tokens.add(state);\n    \n    state = new AttributeSource();\n    termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n\n    termAtt.setTermBuffer(\"c\");\n    posIncrAtt.setPositionIncrement(1);\n    tokens.add(state);\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new MyAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(-1, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    SinkTokenizer tokens = new SinkTokenizer();\n    Token t = new Token();\n    t.setTermBuffer(\"a\");\n    t.setPositionIncrement(0);\n    tokens.add(t);\n    t.setTermBuffer(\"b\");\n    t.setPositionIncrement(1);\n    tokens.add(t);\n    t.setTermBuffer(\"c\");\n    tokens.add(t);\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(-1, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void xxxtestNegativePositions() throws Throwable {\n    SinkTokenizer tokens = new SinkTokenizer();\n    tokens.addAttribute(TermAttribute.class);\n    tokens.addAttribute(PositionIncrementAttribute.class);\n\n    AttributeSource state = new AttributeSource();\n    TermAttribute termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n    termAtt.setTermBuffer(\"a\");\n    posIncrAtt.setPositionIncrement(0);\n    tokens.add(state);\n\n    state = new AttributeSource();\n    termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n\n    termAtt.setTermBuffer(\"b\");\n    posIncrAtt.setPositionIncrement(1);\n    tokens.add(state);\n    \n    state = new AttributeSource();\n    termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n\n    termAtt.setTermBuffer(\"c\");\n    posIncrAtt.setPositionIncrement(1);\n    tokens.add(state);\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new MyAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(-1, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    SinkTokenizer tokens = new SinkTokenizer();\n    tokens.addAttribute(TermAttribute.class);\n    tokens.addAttribute(PositionIncrementAttribute.class);\n\n    AttributeSource state = new AttributeSource();\n    TermAttribute termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n    termAtt.setTermBuffer(\"a\");\n    posIncrAtt.setPositionIncrement(0);\n    tokens.add(state);\n\n    state = new AttributeSource();\n    termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n\n    termAtt.setTermBuffer(\"b\");\n    posIncrAtt.setPositionIncrement(1);\n    tokens.add(state);\n    \n    state = new AttributeSource();\n    termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n\n    termAtt.setTermBuffer(\"c\");\n    posIncrAtt.setPositionIncrement(1);\n    tokens.add(state);\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new MyAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(-1, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    SinkTokenizer tokens = new SinkTokenizer();\n    tokens.addAttribute(TermAttribute.class);\n    tokens.addAttribute(PositionIncrementAttribute.class);\n\n    AttributeSource state = new AttributeSource();\n    TermAttribute termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n    termAtt.setTermBuffer(\"a\");\n    posIncrAtt.setPositionIncrement(0);\n    tokens.add(state);\n\n    state = new AttributeSource();\n    termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n\n    termAtt.setTermBuffer(\"b\");\n    posIncrAtt.setPositionIncrement(1);\n    tokens.add(state);\n    \n    state = new AttributeSource();\n    termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n\n    termAtt.setTermBuffer(\"c\");\n    posIncrAtt.setPositionIncrement(1);\n    tokens.add(state);\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new MyAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(-1, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void xxxtestNegativePositions() throws Throwable {\n    SinkTokenizer tokens = new SinkTokenizer();\n    tokens.addAttribute(TermAttribute.class);\n    tokens.addAttribute(PositionIncrementAttribute.class);\n\n    AttributeSource state = new AttributeSource();\n    TermAttribute termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n    termAtt.setTermBuffer(\"a\");\n    posIncrAtt.setPositionIncrement(0);\n    tokens.add(state);\n\n    state = new AttributeSource();\n    termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n\n    termAtt.setTermBuffer(\"b\");\n    posIncrAtt.setPositionIncrement(1);\n    tokens.add(state);\n    \n    state = new AttributeSource();\n    termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n\n    termAtt.setTermBuffer(\"c\");\n    posIncrAtt.setPositionIncrement(1);\n    tokens.add(state);\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new MyAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(-1, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c576fba1e3c6d11c61fa0802214d5150fb5c633","date":1243676170,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    SinkTokenizer tokens = new SinkTokenizer();\n    tokens.addAttribute(TermAttribute.class);\n    tokens.addAttribute(PositionIncrementAttribute.class);\n\n    AttributeSource state = new AttributeSource();\n    TermAttribute termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n    termAtt.setTermBuffer(\"a\");\n    posIncrAtt.setPositionIncrement(0);\n    tokens.add(state);\n\n    state = new AttributeSource();\n    termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n\n    termAtt.setTermBuffer(\"b\");\n    posIncrAtt.setPositionIncrement(1);\n    tokens.add(state);\n    \n    state = new AttributeSource();\n    termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n\n    termAtt.setTermBuffer(\"c\");\n    posIncrAtt.setPositionIncrement(1);\n    tokens.add(state);\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new MyAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    SinkTokenizer tokens = new SinkTokenizer();\n    tokens.addAttribute(TermAttribute.class);\n    tokens.addAttribute(PositionIncrementAttribute.class);\n\n    AttributeSource state = new AttributeSource();\n    TermAttribute termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n    termAtt.setTermBuffer(\"a\");\n    posIncrAtt.setPositionIncrement(0);\n    tokens.add(state);\n\n    state = new AttributeSource();\n    termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n\n    termAtt.setTermBuffer(\"b\");\n    posIncrAtt.setPositionIncrement(1);\n    tokens.add(state);\n    \n    state = new AttributeSource();\n    termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n\n    termAtt.setTermBuffer(\"c\");\n    posIncrAtt.setPositionIncrement(1);\n    tokens.add(state);\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new MyAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(-1, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":["abfdd5170b43f046dfac9dafd6e12c1a65f3018c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    SinkTokenizer tokens = new SinkTokenizer();\n    Token t = new Token();\n    t.setTermBuffer(\"a\");\n    t.setPositionIncrement(0);\n    tokens.add(t);\n    t.setTermBuffer(\"b\");\n    t.setPositionIncrement(1);\n    tokens.add(t);\n    t.setTermBuffer(\"c\");\n    tokens.add(t);\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    SinkTokenizer tokens = new SinkTokenizer();\n    tokens.addAttribute(TermAttribute.class);\n    tokens.addAttribute(PositionIncrementAttribute.class);\n\n    AttributeSource state = new AttributeSource();\n    TermAttribute termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n    termAtt.setTermBuffer(\"a\");\n    posIncrAtt.setPositionIncrement(0);\n    tokens.add(state);\n\n    state = new AttributeSource();\n    termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n\n    termAtt.setTermBuffer(\"b\");\n    posIncrAtt.setPositionIncrement(1);\n    tokens.add(state);\n    \n    state = new AttributeSource();\n    termAtt = (TermAttribute) state.addAttribute(TermAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) state.addAttribute(PositionIncrementAttribute.class);\n\n    termAtt.setTermBuffer(\"c\");\n    posIncrAtt.setPositionIncrement(1);\n    tokens.add(state);\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new MyAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31141e8d8b7422f85e58a0745bdaed5fa8b4b0b3","date":1250944809,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator tokens = Arrays.asList(new String[]{\"a\",\"b\",\"c\"}).iterator();\n      boolean first = true;\n      \n      public boolean incrementToken() {\n        if (!tokens.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer((String) tokens.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    SinkTokenizer tokens = new SinkTokenizer();\n    Token t = new Token();\n    t.setTermBuffer(\"a\");\n    t.setPositionIncrement(0);\n    tokens.add(t);\n    t.setTermBuffer(\"b\");\n    t.setPositionIncrement(1);\n    tokens.add(t);\n    t.setTermBuffer(\"c\");\n    tokens.add(t);\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator tokens = Arrays.asList(new String[]{\"a\",\"b\",\"c\"}).iterator();\n      boolean first = true;\n      \n      public boolean incrementToken() {\n        if (!tokens.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer((String) tokens.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator tokens = Arrays.asList(new String[]{\"a\",\"b\",\"c\"}).iterator();\n      boolean first = true;\n      \n      public boolean incrementToken() {\n        if (!tokens.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer((String) tokens.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator tokens = Arrays.asList(new String[]{\"a\",\"b\",\"c\"}).iterator();\n      boolean first = true;\n      \n      public boolean incrementToken() {\n        if (!tokens.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer((String) tokens.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir, false);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator tokens = Arrays.asList(new String[]{\"a\",\"b\",\"c\"}).iterator();\n      boolean first = true;\n      \n      public boolean incrementToken() {\n        if (!tokens.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer((String) tokens.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator tokens = Arrays.asList(new String[]{\"a\",\"b\",\"c\"}).iterator();\n      boolean first = true;\n      \n      public boolean incrementToken() {\n        if (!tokens.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer((String) tokens.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir, false);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator tokens = Arrays.asList(new String[]{\"a\",\"b\",\"c\"}).iterator();\n      boolean first = true;\n      \n      public boolean incrementToken() {\n        if (!tokens.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer((String) tokens.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator tokens = Arrays.asList(new String[]{\"a\",\"b\",\"c\"}).iterator();\n      boolean first = true;\n      \n      @Override\n      public boolean incrementToken() {\n        if (!tokens.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer((String) tokens.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir, false);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator tokens = Arrays.asList(new String[]{\"a\",\"b\",\"c\"}).iterator();\n      boolean first = true;\n      \n      public boolean incrementToken() {\n        if (!tokens.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer((String) tokens.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir, false);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator<String> tokens = Arrays.asList(new String[]{\"a\",\"b\",\"c\"}).iterator();\n      boolean first = true;\n      \n      @Override\n      public boolean incrementToken() {\n        if (!tokens.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer( tokens.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir, false);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator tokens = Arrays.asList(new String[]{\"a\",\"b\",\"c\"}).iterator();\n      boolean first = true;\n      \n      @Override\n      public boolean incrementToken() {\n        if (!tokens.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer((String) tokens.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir, false);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator<String> tokens = Arrays.asList(new String[]{\"a\",\"b\",\"c\"}).iterator();\n      boolean first = true;\n      \n      @Override\n      public boolean incrementToken() {\n        if (!tokens.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer( tokens.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir, false);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator<String> tokens = Arrays.asList(new String[]{\"a\",\"b\",\"c\"}).iterator();\n      boolean first = true;\n      \n      @Override\n      public boolean incrementToken() {\n        if (!tokens.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer( tokens.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir, false);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator<String> tokens = Arrays.asList(new String[]{\"a\",\"b\",\"c\"}).iterator();\n      boolean first = true;\n      \n      @Override\n      public boolean incrementToken() {\n        if (!tokens.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer( tokens.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir, false);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator<String> tokens = Arrays.asList(new String[]{\"a\",\"b\",\"c\"}).iterator();\n      boolean first = true;\n      \n      @Override\n      public boolean incrementToken() {\n        if (!tokens.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer( tokens.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir, false);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator<String> terms = Arrays.asList(\"a\",\"b\",\"c\").iterator();\n      boolean first = true;\n      \n      @Override\n      public boolean incrementToken() {\n        if (!terms.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer( terms.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir, false);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator<String> tokens = Arrays.asList(new String[]{\"a\",\"b\",\"c\"}).iterator();\n      boolean first = true;\n      \n      @Override\n      public boolean incrementToken() {\n        if (!tokens.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer( tokens.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir, false);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator<String> terms = Arrays.asList(\"a\",\"b\",\"c\").iterator();\n      boolean first = true;\n      \n      @Override\n      public boolean incrementToken() {\n        if (!terms.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer( terms.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir, false);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator<String> terms = Arrays.asList(\"a\",\"b\",\"c\").iterator();\n      boolean first = true;\n      \n      @Override\n      public boolean incrementToken() {\n        if (!terms.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer( terms.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir, false);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator<String> terms = Arrays.asList(\"a\",\"b\",\"c\").iterator();\n      boolean first = true;\n      \n      @Override\n      public boolean incrementToken() {\n        if (!terms.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer( terms.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir, false);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator<String> terms = Arrays.asList(\"a\",\"b\",\"c\").iterator();\n      boolean first = true;\n      \n      @Override\n      public boolean incrementToken() {\n        if (!terms.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer( terms.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir, false);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator<String> terms = Arrays.asList(\"a\",\"b\",\"c\").iterator();\n      boolean first = true;\n      \n      @Override\n      public boolean incrementToken() {\n        if (!terms.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer( terms.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir, false);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator<String> terms = Arrays.asList(\"a\",\"b\",\"c\").iterator();\n      boolean first = true;\n      \n      @Override\n      public boolean incrementToken() {\n        if (!terms.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer( terms.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir, false);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNegativePositions().mjava","sourceNew":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator<String> terms = Arrays.asList(\"a\",\"b\",\"c\").iterator();\n      boolean first = true;\n      \n      @Override\n      public boolean incrementToken() {\n        if (!terms.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer( terms.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir, false);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1255\n  public void testNegativePositions() throws Throwable {\n    final TokenStream tokens = new TokenStream() {\n      final TermAttribute termAtt = addAttribute(TermAttribute.class);\n      final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      \n      final Iterator<String> terms = Arrays.asList(\"a\",\"b\",\"c\").iterator();\n      boolean first = true;\n      \n      @Override\n      public boolean incrementToken() {\n        if (!terms.hasNext()) return false;\n        clearAttributes();\n        termAtt.setTermBuffer( terms.next());\n        posIncrAtt.setPositionIncrement(first ? 0 : 1);\n        first = false;\n        return true;\n      }\n    };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", tokens));\n    w.addDocument(doc);\n    w.commit();\n\n    IndexSearcher s = new IndexSearcher(dir, false);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n    pq.add(new Term(\"field\", \"c\"));\n    ScoreDoc[] hits = s.search(pq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Query q = new SpanTermQuery(new Term(\"field\", \"a\"));\n    hits = s.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    TermPositions tps = s.getIndexReader().termPositions(new Term(\"field\", \"a\"));\n    assertTrue(tps.next());\n    assertEquals(1, tps.freq());\n    assertEquals(0, tps.nextPosition());\n    w.close();\n\n    assertTrue(_TestUtil.checkIndex(dir));\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a046c0c310bc77931fc8441bd920053b607dd14":["8d78f014fded44fbde905f4f84cdc21907b371e8","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["0a046c0c310bc77931fc8441bd920053b607dd14"],"31141e8d8b7422f85e58a0745bdaed5fa8b4b0b3":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["abfdd5170b43f046dfac9dafd6e12c1a65f3018c"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["31141e8d8b7422f85e58a0745bdaed5fa8b4b0b3"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"7e2cb543b41c145f33390f460ee743d6693c9c6c":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"abfdd5170b43f046dfac9dafd6e12c1a65f3018c":["f51cb06175d6fae01dc608dd7ab884973354e4bf"],"f51cb06175d6fae01dc608dd7ab884973354e4bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["31141e8d8b7422f85e58a0745bdaed5fa8b4b0b3"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["9c576fba1e3c6d11c61fa0802214d5150fb5c633"],"9c576fba1e3c6d11c61fa0802214d5150fb5c633":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"0a046c0c310bc77931fc8441bd920053b607dd14":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"31141e8d8b7422f85e58a0745bdaed5fa8b4b0b3":["8d78f014fded44fbde905f4f84cdc21907b371e8","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f51cb06175d6fae01dc608dd7ab884973354e4bf"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"09c482d1e63332617181729a225b215c452d8a79":["9c576fba1e3c6d11c61fa0802214d5150fb5c633"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7e2cb543b41c145f33390f460ee743d6693c9c6c":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"abfdd5170b43f046dfac9dafd6e12c1a65f3018c":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"f51cb06175d6fae01dc608dd7ab884973354e4bf":["abfdd5170b43f046dfac9dafd6e12c1a65f3018c"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["31141e8d8b7422f85e58a0745bdaed5fa8b4b0b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9c576fba1e3c6d11c61fa0802214d5150fb5c633":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}