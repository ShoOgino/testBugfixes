{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadByteField(FieldInfo).mjava","commits":[{"id":"6a549b1cf014471a1824fa0dfb77c82ed061ee1d","date":1358966558,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadByteField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private NumericDocValues loadByteField(FieldInfo field) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n    IndexInput input = dir.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME, \n                                   Lucene40DocValuesFormat.INTS_VERSION_START, \n                                   Lucene40DocValuesFormat.INTS_VERSION_CURRENT);\n      input.readInt();\n      int maxDoc = state.segmentInfo.getDocCount();\n      final byte values[] = new byte[maxDoc];\n      input.readBytes(values, 0, values.length);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return values[docID];\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1982459c2ac4916bf3c0644b801f0cb3e4ee159f","date":1359034079,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesFixedStraight(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadByteField(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBytesFixedStraight(FieldInfo field) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n    IndexInput input = dir.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_CODEC_NAME, \n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_START, \n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_CURRENT);\n      final int fixedLength = input.readInt();\n      // nocommit? can the current impl even handle > 2G?\n      final byte bytes[] = new byte[state.segmentInfo.getDocCount() * fixedLength];\n      input.readBytes(bytes, 0, bytes.length);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          result.bytes = bytes;\n          result.offset = docID * fixedLength;\n          result.length = fixedLength;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadByteField(FieldInfo field) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n    IndexInput input = dir.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME, \n                                   Lucene40DocValuesFormat.INTS_VERSION_START, \n                                   Lucene40DocValuesFormat.INTS_VERSION_CURRENT);\n      input.readInt();\n      int maxDoc = state.segmentInfo.getDocCount();\n      final byte values[] = new byte[maxDoc];\n      input.readBytes(values, 0, values.length);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return values[docID];\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["dac1db31006989ae24922811f00f909d30f1391d"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1982459c2ac4916bf3c0644b801f0cb3e4ee159f":["6a549b1cf014471a1824fa0dfb77c82ed061ee1d"],"6a549b1cf014471a1824fa0dfb77c82ed061ee1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6a549b1cf014471a1824fa0dfb77c82ed061ee1d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1982459c2ac4916bf3c0644b801f0cb3e4ee159f":[],"6a549b1cf014471a1824fa0dfb77c82ed061ee1d":["1982459c2ac4916bf3c0644b801f0cb3e4ee159f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1982459c2ac4916bf3c0644b801f0cb3e4ee159f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}