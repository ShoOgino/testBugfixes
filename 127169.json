{"path":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#LongRangeFacetCounts(String,ValueSource,FacetsCollector,Filter,LongRange...).mjava","commits":[{"id":"40640359164f629dd440a47df2e145d084ce9645","date":1391711808,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#LongRangeFacetCounts(String,ValueSource,FacetsCollector,Filter,LongRange...).mjava","pathOld":"/dev/null","sourceNew":"  /** Create {@code RangeFacetCounts}, using the provided\n   *  {@link ValueSource}, and using the provided Filter as\n   *  a fastmatch: only documents passing the filter are\n   *  checked for the matching ranges.  The filter must be\n   *  random access (implement {@link DocIdSet#bits}). */\n  public LongRangeFacetCounts(String field, ValueSource valueSource, FacetsCollector hits, Filter fastMatchFilter, LongRange... ranges) throws IOException {\n    super(field, ranges, fastMatchFilter);\n    count(valueSource, hits.getMatchingDocs());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd6be878365e339c75cc43ad7d5df95ab4ea21e5","date":1435762101,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#LongRangeFacetCounts(String,ValueSource,FacetsCollector,Query,LongRange...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#LongRangeFacetCounts(String,ValueSource,FacetsCollector,Filter,LongRange...).mjava","sourceNew":"  /** Create {@code RangeFacetCounts}, using the provided\n   *  {@link ValueSource}, and using the provided Filter as\n   *  a fastmatch: only documents passing the filter are\n   *  checked for the matching ranges.  The filter must be\n   *  random access (implement {@link DocIdSet#bits}). */\n  public LongRangeFacetCounts(String field, ValueSource valueSource, FacetsCollector hits, Query fastMatchQuery, LongRange... ranges) throws IOException {\n    super(field, ranges, fastMatchQuery);\n    count(valueSource, hits.getMatchingDocs());\n  }\n\n","sourceOld":"  /** Create {@code RangeFacetCounts}, using the provided\n   *  {@link ValueSource}, and using the provided Filter as\n   *  a fastmatch: only documents passing the filter are\n   *  checked for the matching ranges.  The filter must be\n   *  random access (implement {@link DocIdSet#bits}). */\n  public LongRangeFacetCounts(String field, ValueSource valueSource, FacetsCollector hits, Filter fastMatchFilter, LongRange... ranges) throws IOException {\n    super(field, ranges, fastMatchFilter);\n    count(valueSource, hits.getMatchingDocs());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"40640359164f629dd440a47df2e145d084ce9645":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["40640359164f629dd440a47df2e145d084ce9645"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["40640359164f629dd440a47df2e145d084ce9645"],"40640359164f629dd440a47df2e145d084ce9645":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}