{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer#collapseTokens(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer#collapseTokens(int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer#collapseTokens(int).mjava","sourceNew":"  private void collapseTokens(int tokenType) throws IOException {\n    //collapse\n    StringBuilder buffer = new StringBuilder(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    // TODO: this is inefficient\n    String s = buffer.toString().trim();\n    termAtt.setEmpty().append(s);\n    offsetAtt.setOffset(correctOffset(theStart), correctOffset(theStart + s.length()));\n    flagsAtt.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    } else {\n      tokens = null;\n    }\n  }\n\n","sourceOld":"  private void collapseTokens(int tokenType) throws IOException {\n    //collapse\n    StringBuilder buffer = new StringBuilder(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    // TODO: this is inefficient\n    String s = buffer.toString().trim();\n    termAtt.setEmpty().append(s);\n    offsetAtt.setOffset(correctOffset(theStart), correctOffset(theStart + s.length()));\n    flagsAtt.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    } else {\n      tokens = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}