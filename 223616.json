{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#testIndexAscRefineConsistency().mjava","commits":[{"id":"2e37e44751b75fc8091af8134b209afde83f6174","date":1593980888,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#testIndexAscRefineConsistency().mjava","pathOld":"/dev/null","sourceNew":"  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-14595\")\n  public void testIndexAscRefineConsistency() throws Exception {\n    initServers();\n    final Client client = servers.getClient(random().nextInt());\n    client.queryDefaults().set(\"shards\", servers.getShards(), \"debugQuery\", Boolean.toString(random().nextBoolean()));\n\n    List<SolrClient> clients = client.getClientProvider().all();\n    assertTrue(clients.size() >= 3);\n    final SolrClient c0 = clients.get(0);\n    final SolrClient c1 = clients.get(1);\n    final SolrClient c2 = clients.get(2);\n\n    client.deleteByQuery(\"*:*\", null);\n    int id = 0;\n    \n    c0.add(sdoc(\"id\", id++, \"cat_s\", \"Z\", \"price_i\", 10));\n    \n    c1.add(sdoc(\"id\", id++, \"cat_s\", \"Z\", \"price_i\", -5000));\n    c1.add(sdoc(\"id\", id++, \"cat_s\", \"X\", \"price_i\", 2,       \"child_s\", \"A\" ));\n    \n    c2.add(sdoc(\"id\", id++, \"cat_s\", \"X\", \"price_i\", 2,       \"child_s\", \"B\" ));\n    c2.add(sdoc(\"id\", id++, \"cat_s\", \"X\", \"price_i\", 2,       \"child_s\", \"C\" ));\n    \n    client.commit();\n\n    // TODO once SOLR-14595 is fixed, modify test to check full EnumSet, not just these two...\n    for (String m : Arrays.asList(\"smart\", \"enum\")) {\n      client.testJQ(params(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{\"\n                           + \" cat : { type:terms, field:cat_s, limit:1, refine:true,\"\n                           + \"         overrequest:0, \" // to trigger parent refinement given small data set\n                           + \"         sort:'sum desc', \"\n                           + \"         facet: { sum : 'sum(price_i)', \"\n                           + \"                  child_\"+m+\" : { \"\n                           + \"                     type:terms, field:child_s, limit:1, refine:true,\"\n                           + \"                     sort:'index asc', method:\" + m + \" } \"\n                           + \"       }} }\"\n                           )\n                    , \"facets=={ count:5\"\n                    + \", cat:{buckets:[ { val:X, count:3, sum:6.0, \"\n                    + \"                   child_\"+m+\":{buckets:[{val:A, count:1}]}}]}}\"\n                    );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2e37e44751b75fc8091af8134b209afde83f6174":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2e37e44751b75fc8091af8134b209afde83f6174"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e37e44751b75fc8091af8134b209afde83f6174"],"2e37e44751b75fc8091af8134b209afde83f6174":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}