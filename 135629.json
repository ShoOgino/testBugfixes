{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeQuery.ContainsVisitor#getDocs(Cell,Bits).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeQuery.ContainsVisitor#getDocs(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeQuery.ContainsVisitor#getDocs(Cell,Bits).mjava","sourceNew":"    /** Get prefix & leaf docs at this cell. */\n    private SmallDocSet getDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert indexedCell.compareToNoLeaf(cell) == 0;\n      //called when we've reached detailLevel.\n      if (indexedCell.isLeaf()) {//only a leaf\n        SmallDocSet result = collectDocs(acceptContains);\n        nextTerm();\n        return result;\n      } else {\n        SmallDocSet docsAtPrefix = collectDocs(acceptContains);\n        if (!nextTerm()) {\n          return docsAtPrefix;\n        }\n        //collect leaf too\n        if (indexedCell.isLeaf() && indexedCell.compareToNoLeaf(cell) == 0) {\n          SmallDocSet docsAtLeaf = collectDocs(acceptContains);\n          nextTerm();\n          return union(docsAtPrefix, docsAtLeaf);\n        } else {\n          return docsAtPrefix;\n        }\n      }\n    }\n\n","sourceOld":"    /** Get prefix & leaf docs at this cell. */\n    private SmallDocSet getDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert indexedCell.compareToNoLeaf(cell) == 0;\n      //called when we've reached detailLevel.\n      if (indexedCell.isLeaf()) {//only a leaf\n        SmallDocSet result = collectDocs(acceptContains);\n        nextTerm();\n        return result;\n      } else {\n        SmallDocSet docsAtPrefix = collectDocs(acceptContains);\n        if (!nextTerm()) {\n          return docsAtPrefix;\n        }\n        //collect leaf too\n        if (indexedCell.isLeaf() && indexedCell.compareToNoLeaf(cell) == 0) {\n          SmallDocSet docsAtLeaf = collectDocs(acceptContains);\n          nextTerm();\n          return union(docsAtPrefix, docsAtLeaf);\n        } else {\n          return docsAtPrefix;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeQuery.ContainsVisitor#getDocs(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeQuery.ContainsVisitor#getDocs(Cell,Bits).mjava","sourceNew":"    /** Get prefix & leaf docs at this cell. */\n    private SmallDocSet getDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert indexedCell.compareToNoLeaf(cell) == 0;\n      //called when we've reached detailLevel.\n      if (indexedCell.isLeaf()) {//only a leaf\n        SmallDocSet result = collectDocs(acceptContains);\n        nextTerm();\n        return result;\n      } else {\n        SmallDocSet docsAtPrefix = collectDocs(acceptContains);\n        if (!nextTerm()) {\n          return docsAtPrefix;\n        }\n        //collect leaf too\n        if (indexedCell.isLeaf() && indexedCell.compareToNoLeaf(cell) == 0) {\n          SmallDocSet docsAtLeaf = collectDocs(acceptContains);\n          nextTerm();\n          return union(docsAtPrefix, docsAtLeaf);\n        } else {\n          return docsAtPrefix;\n        }\n      }\n    }\n\n","sourceOld":"    /** Get prefix & leaf docs at this cell. */\n    private SmallDocSet getDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert indexedCell.compareToNoLeaf(cell) == 0;\n      //called when we've reached detailLevel.\n      if (indexedCell.isLeaf()) {//only a leaf\n        SmallDocSet result = collectDocs(acceptContains);\n        nextTerm();\n        return result;\n      } else {\n        SmallDocSet docsAtPrefix = collectDocs(acceptContains);\n        if (!nextTerm()) {\n          return docsAtPrefix;\n        }\n        //collect leaf too\n        if (indexedCell.isLeaf() && indexedCell.compareToNoLeaf(cell) == 0) {\n          SmallDocSet docsAtLeaf = collectDocs(acceptContains);\n          nextTerm();\n          return union(docsAtPrefix, docsAtLeaf);\n        } else {\n          return docsAtPrefix;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}