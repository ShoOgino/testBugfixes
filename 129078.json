{"path":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","sourceNew":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery newq = new BooleanQuery(false);\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true, true);\n    searcher.search(newq, null, topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","sourceOld":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery newq = new BooleanQuery(false);\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true, true);\n    searcher.search(newq, null, topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","sourceNew":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery newq = new BooleanQuery(false);\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true);\n    searcher.search(newq, null, topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","sourceOld":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery newq = new BooleanQuery(false);\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true, true);\n    searcher.search(newq, null, topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","sourceNew":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery newq = new BooleanQuery(false);\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true);\n    searcher.search(newq, topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","sourceOld":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery newq = new BooleanQuery(false);\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true);\n    searcher.search(newq, null, topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","sourceNew":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery.Builder newq = new BooleanQuery.Builder();\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true);\n    searcher.search(newq.build(), topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","sourceOld":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery newq = new BooleanQuery(false);\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true);\n    searcher.search(newq, topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","sourceNew":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery.Builder newq = new BooleanQuery.Builder();\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true);\n    searcher.search(newq.build(), topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","sourceOld":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery.Builder newq = new BooleanQuery.Builder();\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true);\n    searcher.search(newq.build(), topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","sourceNew":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery.Builder newq = new BooleanQuery.Builder();\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true);\n    searcher.search(newq.build(), topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","sourceOld":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery.Builder newq = new BooleanQuery.Builder();\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true);\n    searcher.search(newq.build(), topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"404d1ab7f6f396235047017c88d545fec15dafb7","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","sourceNew":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery.Builder newq = new BooleanQuery.Builder();\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true, true);\n    searcher.search(newq.build(), topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","sourceOld":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery.Builder newq = new BooleanQuery.Builder();\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true);\n    searcher.search(newq.build(), topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","sourceNew":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery.Builder newq = new BooleanQuery.Builder();\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true, true);\n    searcher.search(newq.build(), topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","sourceOld":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery.Builder newq = new BooleanQuery.Builder();\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true);\n    searcher.search(newq.build(), topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","sourceNew":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery.Builder newq = new BooleanQuery.Builder();\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true);\n    searcher.search(newq.build(), topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","sourceOld":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery.Builder newq = new BooleanQuery.Builder();\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true, true);\n    searcher.search(newq.build(), topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","sourceNew":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery.Builder newq = new BooleanQuery.Builder();\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true);\n    searcher.search(newq.build(), topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","sourceOld":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery.Builder newq = new BooleanQuery.Builder();\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true, true);\n    searcher.search(newq.build(), topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","sourceNew":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery.Builder newq = new BooleanQuery.Builder();\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, true, true);\n    searcher.search(newq.build(), topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","sourceOld":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery.Builder newq = new BooleanQuery.Builder();\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, false, true, true);\n    searcher.search(newq.build(), topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","sourceNew":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery.Builder newq = new BooleanQuery.Builder();\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, true);\n    searcher.search(newq.build(), topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","sourceOld":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery.Builder newq = new BooleanQuery.Builder();\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, true, true);\n    searcher.search(newq.build(), topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#runTest(IndexSearcher,boolean).mjava","sourceNew":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery.Builder newq = new BooleanQuery.Builder();\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, Integer.MAX_VALUE);\n    searcher.search(newq.build(), topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","sourceOld":"  private void runTest(IndexSearcher searcher, boolean reversed) throws Throwable {\n\n    BooleanQuery.Builder newq = new BooleanQuery.Builder();\n    TermQuery query = new TermQuery(new Term(\"title\", \"ipod\"));\n\n    newq.add(query, BooleanClause.Occur.SHOULD);\n    newq.add(getElevatedQuery(new String[] {\"id\", \"a\", \"id\", \"x\"}), BooleanClause.Occur.SHOULD);\n\n    Sort sort = new Sort(\n        new SortField(\"id\", new ElevationComparatorSource(priority), false),\n        new SortField(null, SortField.Type.SCORE, reversed)\n      );\n\n    TopDocsCollector<Entry> topCollector = TopFieldCollector.create(sort, 50, true);\n    searcher.search(newq.build(), topCollector);\n\n    TopDocs topDocs = topCollector.topDocs(0, 10);\n    int nDocsReturned = topDocs.scoreDocs.length;\n\n    assertEquals(4, nDocsReturned);\n\n    // 0 & 3 were elevated\n    assertEquals(0, topDocs.scoreDocs[0].doc);\n    assertEquals(3, topDocs.scoreDocs[1].doc);\n\n    if (reversed) {\n      assertEquals(1, topDocs.scoreDocs[2].doc);\n      assertEquals(2, topDocs.scoreDocs[3].doc);\n    } else {\n      assertEquals(2, topDocs.scoreDocs[2].doc);\n      assertEquals(1, topDocs.scoreDocs[3].doc);\n    }\n\n    /*\n    for (int i = 0; i < nDocsReturned; i++) {\n     ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n     ids[i] = scoreDoc.doc;\n     scores[i] = scoreDoc.score;\n     documents[i] = searcher.doc(ids[i]);\n     System.out.println(\"ids[i] = \" + ids[i]);\n     System.out.println(\"documents[i] = \" + documents[i]);\n     System.out.println(\"scores[i] = \" + scores[i]);\n   }\n    */\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"404d1ab7f6f396235047017c88d545fec15dafb7":["615370d2b876c3435773b5174df2e2242ad7981a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04c370507e5521b2eb998530736f1c19b851ed5a":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["04c370507e5521b2eb998530736f1c19b851ed5a"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["615370d2b876c3435773b5174df2e2242ad7981a","404d1ab7f6f396235047017c88d545fec15dafb7"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","615370d2b876c3435773b5174df2e2242ad7981a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["1aad05eeff7818b0833c02ac6b743aa72054963b","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"615370d2b876c3435773b5174df2e2242ad7981a":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["1d3f7ab1a502671bbdb03bcced21e764d2483221"]},"commit2Childs":{"404d1ab7f6f396235047017c88d545fec15dafb7":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"04c370507e5521b2eb998530736f1c19b851ed5a":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"615370d2b876c3435773b5174df2e2242ad7981a":["404d1ab7f6f396235047017c88d545fec15dafb7","1aad05eeff7818b0833c02ac6b743aa72054963b","e9017cf144952056066919f1ebc7897ff9bd71b1"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["04c370507e5521b2eb998530736f1c19b851ed5a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}