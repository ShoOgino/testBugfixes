{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeLostTrigger#removeMarker(String).mjava","commits":[{"id":"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1","date":1503489512,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeLostTrigger#removeMarker(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeLostTrigger#removeNodeLostMarker(String).mjava","sourceNew":"  private void removeMarker(String nodeName) {\n    String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeName;\n    try {\n      if (container.getZkController().getZkClient().exists(path, true)) {\n        container.getZkController().getZkClient().delete(path, -1, true);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      // ignore\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Exception removing nodeLost marker \" + nodeName, e);\n    }\n  }\n\n","sourceOld":"  private void removeNodeLostMarker(String nodeName) {\n    String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeName;\n    try {\n      if (container.getZkController().getZkClient().exists(path, true)) {\n        container.getZkController().getZkClient().delete(path, -1, true);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      // ignore\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Exception removing nodeLost marker \" + nodeName, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeLostTrigger#removeMarker(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeLostTrigger#removeMarker(String).mjava","sourceNew":"  private void removeMarker(String nodeName) {\n    String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeName;\n    try {\n      if (clusterDataProvider.hasData(path)) {\n        clusterDataProvider.removeData(path, -1);\n      }\n    } catch (NoSuchElementException e) {\n      // ignore\n    } catch (Exception e) {\n      log.warn(\"Exception removing nodeLost marker \" + nodeName, e);\n    }\n  }\n\n","sourceOld":"  private void removeMarker(String nodeName) {\n    String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeName;\n    try {\n      if (container.getZkController().getZkClient().exists(path, true)) {\n        container.getZkController().getZkClient().delete(path, -1, true);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      // ignore\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Exception removing nodeLost marker \" + nodeName, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeLostTrigger#removeMarker(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeLostTrigger#removeMarker(String).mjava","sourceNew":"  private void removeMarker(String nodeName) {\n    String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeName;\n    try {\n      if (container.getZkController().getZkClient().exists(path, true)) {\n        container.getZkController().getZkClient().delete(path, -1, true);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      // ignore\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Exception removing nodeLost marker \" + nodeName, e);\n    }\n  }\n\n","sourceOld":"  private void removeMarker(String nodeName) {\n    String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeName;\n    try {\n      if (clusterDataProvider.hasData(path)) {\n        clusterDataProvider.removeData(path, -1);\n      }\n    } catch (NoSuchElementException e) {\n      // ignore\n    } catch (Exception e) {\n      log.warn(\"Exception removing nodeLost marker \" + nodeName, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8cffee0b9c10b78bd087c71485b482217fe84f","date":1505950827,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeLostTrigger#removeMarker(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeLostTrigger#removeMarker(String).mjava","sourceNew":"  private void removeMarker(String nodeName) {\n    String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeName;\n    try {\n      if (zkClient.exists(path, true)) {\n        zkClient.delete(path, -1, true);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      // ignore\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Exception removing nodeLost marker \" + nodeName, e);\n    }\n  }\n\n","sourceOld":"  private void removeMarker(String nodeName) {\n    String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeName;\n    try {\n      if (container.getZkController().getZkClient().exists(path, true)) {\n        container.getZkController().getZkClient().delete(path, -1, true);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      // ignore\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Exception removing nodeLost marker \" + nodeName, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeLostTrigger#removeMarker(String).mjava","pathOld":"/dev/null","sourceNew":"  private void removeMarker(String nodeName) {\n    String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeName;\n    try {\n      if (zkClient.exists(path, true)) {\n        zkClient.delete(path, -1, true);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      // ignore\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Exception removing nodeLost marker \" + nodeName, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeLostTrigger#removeMarker(String).mjava","pathOld":"/dev/null","sourceNew":"  private void removeMarker(String nodeName) {\n    String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeName;\n    try {\n      if (zkClient.exists(path, true)) {\n        zkClient.delete(path, -1, true);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      // ignore\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Exception removing nodeLost marker \" + nodeName, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeLostTrigger#removeMarker(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeLostTrigger#removeMarker(String).mjava","sourceNew":"  private void removeMarker(String nodeName) {\n    String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeName;\n    try {\n      if (stateManager.hasData(path)) {\n        stateManager.removeData(path, -1);\n      }\n    } catch (NoSuchElementException e) {\n      // ignore\n    } catch (Exception e) {\n      log.warn(\"Exception removing nodeLost marker \" + nodeName, e);\n    }\n  }\n\n","sourceOld":"  private void removeMarker(String nodeName) {\n    String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeName;\n    try {\n      if (zkClient.exists(path, true)) {\n        zkClient.delete(path, -1, true);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      // ignore\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Exception removing nodeLost marker \" + nodeName, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7fb1186f5b61e0b74289e6786df8cbecfa471bc","date":1545308188,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeLostTrigger#removeMarker(String).mjava","sourceNew":null,"sourceOld":"  private void removeMarker(String nodeName) {\n    String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeName;\n    try {\n      if (stateManager.hasData(path)) {\n        stateManager.removeData(path, -1);\n      }\n    } catch (NoSuchElementException e) {\n      // ignore\n    } catch (Exception e) {\n      log.warn(\"Exception removing nodeLost marker \" + nodeName, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8cffee0b9c10b78bd087c71485b482217fe84f"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"]},"commit2Childs":{"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","cc5ed4ca39a59c23d13866a1e110e608d93cbcc1","560c18d71dad43d675158783c3840f8c80d6d39c"],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["5b8cffee0b9c10b78bd087c71485b482217fe84f"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}