{"path":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#assertIntRangeSplit(int,int,int,boolean,Iterator).mjava","commits":[{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#assertIntRangeSplit(int,int,int,boolean,Iterator).mjava","pathOld":"/dev/null","sourceNew":"  /** Note: The neededBounds iterator must be unsigned (easier understanding what's happening) */\n  protected void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterator neededBounds\n  ) throws Exception {\n    final OpenBitSet bits=useBitSet ? new OpenBitSet(upper-lower+1) : null;\n    \n    TrieUtils.splitIntRange(new TrieUtils.IntRangeBuilder() {\n      public void addRange(int precisionStep, int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n        }\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"new Integer(0x\"+Integer.toHexString(min>>>shift)+\"),new Integer(0x\"+Integer.toHexString(max>>>shift)+\"),\");\n        assertEquals( \"inner min bound\", ((Integer)neededBounds.next()).intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", ((Integer)neededBounds.next()).intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertTrue(\"The sub-range concenated should match the whole range\", bits.isEmpty());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08566707eaac91c2a59f35d09c29d3423b8b0caf","date":1235326633,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#assertIntRangeSplit(int,int,int,boolean,Iterator).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#assertIntRangeSplit(int,int,int,boolean,Iterator).mjava","sourceNew":"  /** Note: The neededBounds iterator must be unsigned (easier understanding what's happening) */\n  protected void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterator neededBounds\n  ) throws Exception {\n    final OpenBitSet bits=useBitSet ? new OpenBitSet(upper-lower+1) : null;\n    \n    TrieUtils.splitIntRange(new TrieUtils.IntRangeBuilder() {\n      //@Override\n      public void addRange(int min, int max, int shift, int level) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n        }\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"new Integer(0x\"+Integer.toHexString(min>>>shift)+\"),new Integer(0x\"+Integer.toHexString(max>>>shift)+\"),\");\n        assertEquals( \"inner min bound\", ((Integer)neededBounds.next()).intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", ((Integer)neededBounds.next()).intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertTrue(\"The sub-range concenated should match the whole range\", bits.isEmpty());\n    }\n  }\n\n","sourceOld":"  /** Note: The neededBounds iterator must be unsigned (easier understanding what's happening) */\n  protected void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterator neededBounds\n  ) throws Exception {\n    final OpenBitSet bits=useBitSet ? new OpenBitSet(upper-lower+1) : null;\n    \n    TrieUtils.splitIntRange(new TrieUtils.IntRangeBuilder() {\n      public void addRange(int precisionStep, int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n        }\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"new Integer(0x\"+Integer.toHexString(min>>>shift)+\"),new Integer(0x\"+Integer.toHexString(max>>>shift)+\"),\");\n        assertEquals( \"inner min bound\", ((Integer)neededBounds.next()).intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", ((Integer)neededBounds.next()).intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertTrue(\"The sub-range concenated should match the whole range\", bits.isEmpty());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1","date":1239104855,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#assertIntRangeSplit(int,int,int,boolean,Iterator).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#assertIntRangeSplit(int,int,int,boolean,Iterator).mjava","sourceNew":"  /** Note: The neededBounds iterator must be unsigned (easier understanding what's happening) */\n  protected void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterator neededBounds\n  ) throws Exception {\n    final OpenBitSet bits=useBitSet ? new OpenBitSet(upper-lower+1) : null;\n    \n    TrieUtils.splitIntRange(new TrieUtils.IntRangeBuilder() {\n      //@Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n        }\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"new Integer(0x\"+Integer.toHexString(min>>>shift)+\"),new Integer(0x\"+Integer.toHexString(max>>>shift)+\"),\");\n        assertEquals( \"inner min bound\", ((Integer)neededBounds.next()).intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", ((Integer)neededBounds.next()).intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertTrue(\"The sub-range concenated should match the whole range\", bits.isEmpty());\n    }\n  }\n\n","sourceOld":"  /** Note: The neededBounds iterator must be unsigned (easier understanding what's happening) */\n  protected void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterator neededBounds\n  ) throws Exception {\n    final OpenBitSet bits=useBitSet ? new OpenBitSet(upper-lower+1) : null;\n    \n    TrieUtils.splitIntRange(new TrieUtils.IntRangeBuilder() {\n      //@Override\n      public void addRange(int min, int max, int shift, int level) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n        }\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"new Integer(0x\"+Integer.toHexString(min>>>shift)+\"),new Integer(0x\"+Integer.toHexString(max>>>shift)+\"),\");\n        assertEquals( \"inner min bound\", ((Integer)neededBounds.next()).intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", ((Integer)neededBounds.next()).intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertTrue(\"The sub-range concenated should match the whole range\", bits.isEmpty());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7997e20249c312f7420d4e348cde0a36c22d9a8c","date":1245413812,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#assertIntRangeSplit(int,int,int,boolean,Iterator).mjava","sourceNew":null,"sourceOld":"  /** Note: The neededBounds iterator must be unsigned (easier understanding what's happening) */\n  protected void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterator neededBounds\n  ) throws Exception {\n    final OpenBitSet bits=useBitSet ? new OpenBitSet(upper-lower+1) : null;\n    \n    TrieUtils.splitIntRange(new TrieUtils.IntRangeBuilder() {\n      //@Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n        }\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"new Integer(0x\"+Integer.toHexString(min>>>shift)+\"),new Integer(0x\"+Integer.toHexString(max>>>shift)+\"),\");\n        assertEquals( \"inner min bound\", ((Integer)neededBounds.next()).intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", ((Integer)neededBounds.next()).intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertTrue(\"The sub-range concenated should match the whole range\", bits.isEmpty());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["08566707eaac91c2a59f35d09c29d3423b8b0caf"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"08566707eaac91c2a59f35d09c29d3423b8b0caf":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7997e20249c312f7420d4e348cde0a36c22d9a8c"]},"commit2Childs":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["7997e20249c312f7420d4e348cde0a36c22d9a8c"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["08566707eaac91c2a59f35d09c29d3423b8b0caf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"08566707eaac91c2a59f35d09c29d3423b8b0caf":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}