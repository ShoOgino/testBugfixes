{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_2\", \"segments\");\n    copyFile(dir, \"segments_2\", \"segments_1\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_1.cfs\", \"_2.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_2\", \"segments\");\n    copyFile(dir, \"segments_2\", \"segments_1\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_1.cfs\", \"_2.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","bugFix":null,"bugIntro":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_2\", \"segments\");\n    copyFile(dir, \"segments_2\", \"segments_1\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_1.cfs\", \"_2.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","bugFix":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":null,"sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_2\", \"segments\");\n    copyFile(dir, \"segments_2\", \"segments_1\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_1.cfs\", \"_2.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}