{"path":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#getOffsetGap(IndexableField).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#getOffsetGap(IndexableField).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/Analyzer#getOffsetGap(IndexableField).mjava","sourceNew":"  /**\n   * Just like {@link #getPositionIncrementGap}, except for\n   * Token offsets instead.  By default this returns 1 for\n   * tokenized fields and, as if the fields were joined\n   * with an extra space character, and 0 for un-tokenized\n   * fields.  This method is only called if the field\n   * produced at least one token for indexing.\n   *\n   * @param field the field just indexed\n   * @return offset gap, added to the next token emitted from {@link #tokenStream(String,Reader)}\n   */\n  public int getOffsetGap(IndexableField field) {\n    if (field.fieldType().tokenized()) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #getPositionIncrementGap}, except for\n   * Token offsets instead.  By default this returns 1 for\n   * tokenized fields and, as if the fields were joined\n   * with an extra space character, and 0 for un-tokenized\n   * fields.  This method is only called if the field\n   * produced at least one token for indexing.\n   *\n   * @param field the field just indexed\n   * @return offset gap, added to the next token emitted from {@link #tokenStream(String,Reader)}\n   */\n  public int getOffsetGap(IndexableField field) {\n    if (field.fieldType().tokenized()) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c59b968cd5180c64260dcc70c3f53320d2f848a","date":1342796758,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#getOffsetGap(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#getOffsetGap(IndexableField).mjava","sourceNew":"  /**\n   * Just like {@link #getPositionIncrementGap}, except for\n   * Token offsets instead.  By default this returns 1.\n   * This method is only called if the field\n   * produced at least one token for indexing.\n   *\n   * @param fieldName the field just indexed\n   * @return offset gap, added to the next token emitted from {@link #tokenStream(String,Reader)}\n   */\n  public int getOffsetGap(String fieldName) {\n    return 1;\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #getPositionIncrementGap}, except for\n   * Token offsets instead.  By default this returns 1 for\n   * tokenized fields and, as if the fields were joined\n   * with an extra space character, and 0 for un-tokenized\n   * fields.  This method is only called if the field\n   * produced at least one token for indexing.\n   *\n   * @param field the field just indexed\n   * @return offset gap, added to the next token emitted from {@link #tokenStream(String,Reader)}\n   */\n  public int getOffsetGap(IndexableField field) {\n    if (field.fieldType().tokenized()) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#getOffsetGap(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#getOffsetGap(IndexableField).mjava","sourceNew":"  /**\n   * Just like {@link #getPositionIncrementGap}, except for\n   * Token offsets instead.  By default this returns 1.\n   * This method is only called if the field\n   * produced at least one token for indexing.\n   *\n   * @param fieldName the field just indexed\n   * @return offset gap, added to the next token emitted from {@link #tokenStream(String,Reader)}\n   */\n  public int getOffsetGap(String fieldName) {\n    return 1;\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #getPositionIncrementGap}, except for\n   * Token offsets instead.  By default this returns 1 for\n   * tokenized fields and, as if the fields were joined\n   * with an extra space character, and 0 for un-tokenized\n   * fields.  This method is only called if the field\n   * produced at least one token for indexing.\n   *\n   * @param field the field just indexed\n   * @return offset gap, added to the next token emitted from {@link #tokenStream(String,Reader)}\n   */\n  public int getOffsetGap(IndexableField field) {\n    if (field.fieldType().tokenized()) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#getOffsetGap(IndexableField).mjava","sourceNew":null,"sourceOld":"  /**\n   * Just like {@link #getPositionIncrementGap}, except for\n   * Token offsets instead.  By default this returns 1 for\n   * tokenized fields and, as if the fields were joined\n   * with an extra space character, and 0 for un-tokenized\n   * fields.  This method is only called if the field\n   * produced at least one token for indexing.\n   *\n   * @param field the field just indexed\n   * @return offset gap, added to the next token emitted from {@link #tokenStream(String,Reader)}\n   */\n  public int getOffsetGap(IndexableField field) {\n    if (field.fieldType().tokenized()) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c59b968cd5180c64260dcc70c3f53320d2f848a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"aba371508186796cc6151d8223a5b4e16d02e26e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0c59b968cd5180c64260dcc70c3f53320d2f848a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0c59b968cd5180c64260dcc70c3f53320d2f848a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0c59b968cd5180c64260dcc70c3f53320d2f848a"]},"commit2Childs":{"0c59b968cd5180c64260dcc70c3f53320d2f848a":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0c59b968cd5180c64260dcc70c3f53320d2f848a","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}