{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[Policy.ReplicaInfo,Row]]).mjava","commits":[{"id":"0c51a42fa59b8539f35fd21ba7d88ee912af931d","date":1493700805,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[Policy.ReplicaInfo,Row]]).mjava","pathOld":"/dev/null","sourceNew":"    void addReplicaToList(Row r, boolean isSource, List<Pair<Policy.ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<Policy.ReplicaInfo>>> e : r.replicaInfo.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<Policy.ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(e.getKey(), Hint.SHARD)) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa61ea06d4d27acb465d77e15f20aae84531d73","date":1495784617,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[Policy.ReplicaInfo,Row]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[Policy.ReplicaInfo,Row]]).mjava","sourceNew":"    void addReplicaToList(Row r, boolean isSource, List<Pair<Policy.ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<Policy.ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<Policy.ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(e.getKey(), Hint.SHARD)) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","sourceOld":"    void addReplicaToList(Row r, boolean isSource, List<Pair<Policy.ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<Policy.ReplicaInfo>>> e : r.replicaInfo.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<Policy.ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(e.getKey(), Hint.SHARD)) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[Policy.ReplicaInfo,Row]]).mjava","pathOld":"/dev/null","sourceNew":"    void addReplicaToList(Row r, boolean isSource, List<Pair<Policy.ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<Policy.ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<Policy.ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(e.getKey(), Hint.SHARD)) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[Policy.ReplicaInfo,Row]]).mjava","pathOld":"/dev/null","sourceNew":"    void addReplicaToList(Row r, boolean isSource, List<Pair<Policy.ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<Policy.ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<Policy.ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(e.getKey(), Hint.SHARD)) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852ff897aecd2f7c8376a02aedfd44104533f28","date":1498224361,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[Policy.ReplicaInfo,Row]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[Policy.ReplicaInfo,Row]]).mjava","sourceNew":"    void addReplicaToList(Row r, boolean isSource, List<Pair<Policy.ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<Policy.ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<Policy.ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(e.getKey(), Hint.SHARD)) continue;//todo fix\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","sourceOld":"    void addReplicaToList(Row r, boolean isSource, List<Pair<Policy.ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<Policy.ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<Policy.ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(e.getKey(), Hint.SHARD)) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10045de9275704756e7af4fce8210fadeb3b2014","date":1498484321,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[Policy.ReplicaInfo,Row]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[Policy.ReplicaInfo,Row]]).mjava","sourceNew":"    void addReplicaToList(Row r, boolean isSource, List<Pair<Policy.ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<Policy.ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<Policy.ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(e.getKey(), Hint.SHARD)) continue;//todo fix\n          if(shard.getValue() == null || shard.getValue().isEmpty()) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","sourceOld":"    void addReplicaToList(Row r, boolean isSource, List<Pair<Policy.ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<Policy.ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<Policy.ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(e.getKey(), Hint.SHARD)) continue;//todo fix\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d1f7b3f5e5e45b15b9649564c72301c248de1b8","date":1498557572,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[ReplicaInfo,Row]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[Policy.ReplicaInfo,Row]]).mjava","sourceNew":"    void addReplicaToList(Row r, boolean isSource, List<Pair<ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(e.getKey(), Hint.SHARD)) continue;//todo fix\n          if(shard.getValue() == null || shard.getValue().isEmpty()) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","sourceOld":"    void addReplicaToList(Row r, boolean isSource, List<Pair<Policy.ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<Policy.ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<Policy.ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(e.getKey(), Hint.SHARD)) continue;//todo fix\n          if(shard.getValue() == null || shard.getValue().isEmpty()) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[Policy.ReplicaInfo,Row]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[Policy.ReplicaInfo,Row]]).mjava","sourceNew":"    void addReplicaToList(Row r, boolean isSource, List<Pair<Policy.ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<Policy.ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<Policy.ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(e.getKey(), Hint.SHARD)) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","sourceOld":"    void addReplicaToList(Row r, boolean isSource, List<Pair<Policy.ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<Policy.ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<Policy.ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(e.getKey(), Hint.SHARD)) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c51a42fa59b8539f35fd21ba7d88ee912af931d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["10045de9275704756e7af4fce8210fadeb3b2014"],"10045de9275704756e7af4fce8210fadeb3b2014":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["0c51a42fa59b8539f35fd21ba7d88ee912af931d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c51a42fa59b8539f35fd21ba7d88ee912af931d":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":[],"1852ff897aecd2f7c8376a02aedfd44104533f28":["10045de9275704756e7af4fce8210fadeb3b2014"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":[],"10045de9275704756e7af4fce8210fadeb3b2014":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0c51a42fa59b8539f35fd21ba7d88ee912af931d","74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","8d1f7b3f5e5e45b15b9649564c72301c248de1b8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}