{"path":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder#build(IntsRef,Iterable[CategoryPath]).mjava","commits":[{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder#build(IntsRef,Iterable[CategoryPath]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Every returned {@link BytesRef} corresponds to a single partition (as\n   * defined by {@link FacetIndexingParams#getPartitionSize()}) and the key\n   * denotes the partition ID. When no partitions are defined, the returned map\n   * contains only one value.\n   * <p>\n   * <b>NOTE:</b> the {@code ordinals} array is modified by adding parent\n   * ordinals to it. Also, some encoders may sort the array and remove duplicate\n   * ordinals. Therefore you may want to invoke this method after you finished\n   * processing the array for other purposes.\n   */\n  @Override\n  public Map<String,BytesRef> build(IntsRef ordinals, Iterable<CategoryPath> categories) throws IOException {\n    int upto = ordinals.length; // since we add ordinals to IntsRef, iterate upto original length\n    \n    for (int i = 0; i < upto; i++) {\n      int ordinal = ordinals.ints[i];\n      int parent = taxoWriter.getParent(ordinal);\n      while (parent > 0) {\n        if (ordinalPolicy.shouldAdd(parent)) {\n          ordinals.ints[ordinals.length++] = parent;\n        }\n        parent = taxoWriter.getParent(parent);\n      }\n    }\n    return ordinalsEncoder.encode(ordinals);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f799def92dd641ab877459be5f6182bb811df6ff"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder#build(IntsRef,Iterable[CategoryPath]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Every returned {@link BytesRef} corresponds to a single partition (as\n   * defined by {@link FacetIndexingParams#getPartitionSize()}) and the key\n   * denotes the partition ID. When no partitions are defined, the returned map\n   * contains only one value.\n   * <p>\n   * <b>NOTE:</b> the {@code ordinals} array is modified by adding parent\n   * ordinals to it. Also, some encoders may sort the array and remove duplicate\n   * ordinals. Therefore you may want to invoke this method after you finished\n   * processing the array for other purposes.\n   */\n  @Override\n  public Map<String,BytesRef> build(IntsRef ordinals, Iterable<CategoryPath> categories) throws IOException {\n    int upto = ordinals.length; // since we add ordinals to IntsRef, iterate upto original length\n    \n    for (int i = 0; i < upto; i++) {\n      int ordinal = ordinals.ints[i];\n      int parent = taxoWriter.getParent(ordinal);\n      while (parent > 0) {\n        if (ordinalPolicy.shouldAdd(parent)) {\n          ordinals.ints[ordinals.length++] = parent;\n        }\n        parent = taxoWriter.getParent(parent);\n      }\n    }\n    return ordinalsEncoder.encode(ordinals);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66644845192a1c92d87d5324cc0b5af16ad31b42","date":1358970583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder#build(IntsRef,Iterable[CategoryPath]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder#build(IntsRef,Iterable[CategoryPath]).mjava","sourceNew":"  /**\n   * Every returned {@link BytesRef} corresponds to a single partition (as\n   * defined by {@link FacetIndexingParams#getPartitionSize()}) and the key\n   * denotes the partition ID. When no partitions are defined, the returned map\n   * contains only one value.\n   * <p>\n   * <b>NOTE:</b> the {@code ordinals} array is modified by adding parent\n   * ordinals to it. Also, some encoders may sort the array and remove duplicate\n   * ordinals. Therefore you may want to invoke this method after you finished\n   * processing the array for other purposes.\n   */\n  @Override\n  public Map<String,BytesRef> build(IntsRef ordinals, Iterable<CategoryPath> categories) throws IOException {\n    int upto = ordinals.length; // since we add ordinals to IntsRef, iterate upto original length\n    \n    if (ordinalPolicy == OrdinalPolicy.ALL_PARENTS) { // add all parents too\n      for (int i = 0; i < upto; i++) {\n        int ordinal = ordinals.ints[i];\n        int parent = taxoWriter.getParent(ordinal);\n        while (parent > 0) {\n          ordinals.ints[ordinals.length++] = parent;\n          parent = taxoWriter.getParent(parent);\n        }\n      }\n    }\n    return ordinalsEncoder.encode(ordinals);\n  }\n\n","sourceOld":"  /**\n   * Every returned {@link BytesRef} corresponds to a single partition (as\n   * defined by {@link FacetIndexingParams#getPartitionSize()}) and the key\n   * denotes the partition ID. When no partitions are defined, the returned map\n   * contains only one value.\n   * <p>\n   * <b>NOTE:</b> the {@code ordinals} array is modified by adding parent\n   * ordinals to it. Also, some encoders may sort the array and remove duplicate\n   * ordinals. Therefore you may want to invoke this method after you finished\n   * processing the array for other purposes.\n   */\n  @Override\n  public Map<String,BytesRef> build(IntsRef ordinals, Iterable<CategoryPath> categories) throws IOException {\n    int upto = ordinals.length; // since we add ordinals to IntsRef, iterate upto original length\n    \n    for (int i = 0; i < upto; i++) {\n      int ordinal = ordinals.ints[i];\n      int parent = taxoWriter.getParent(ordinal);\n      while (parent > 0) {\n        if (ordinalPolicy.shouldAdd(parent)) {\n          ordinals.ints[ordinals.length++] = parent;\n        }\n        parent = taxoWriter.getParent(parent);\n      }\n    }\n    return ordinalsEncoder.encode(ordinals);\n  }\n\n","bugFix":null,"bugIntro":["f799def92dd641ab877459be5f6182bb811df6ff"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder#build(IntsRef,Iterable[CategoryPath]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder#build(IntsRef,Iterable[CategoryPath]).mjava","sourceNew":"  /**\n   * Every returned {@link BytesRef} corresponds to a single partition (as\n   * defined by {@link FacetIndexingParams#getPartitionSize()}) and the key\n   * denotes the partition ID. When no partitions are defined, the returned map\n   * contains only one value.\n   * <p>\n   * <b>NOTE:</b> the {@code ordinals} array is modified by adding parent\n   * ordinals to it. Also, some encoders may sort the array and remove duplicate\n   * ordinals. Therefore you may want to invoke this method after you finished\n   * processing the array for other purposes.\n   */\n  @Override\n  public Map<String,BytesRef> build(IntsRef ordinals, Iterable<CategoryPath> categories) throws IOException {\n    int upto = ordinals.length; // since we add ordinals to IntsRef, iterate upto original length\n    \n    if (ordinalPolicy == OrdinalPolicy.ALL_PARENTS) { // add all parents too\n      for (int i = 0; i < upto; i++) {\n        int ordinal = ordinals.ints[i];\n        int parent = taxoWriter.getParent(ordinal);\n        while (parent > 0) {\n          ordinals.ints[ordinals.length++] = parent;\n          parent = taxoWriter.getParent(parent);\n        }\n      }\n    }\n    return ordinalsEncoder.encode(ordinals);\n  }\n\n","sourceOld":"  /**\n   * Every returned {@link BytesRef} corresponds to a single partition (as\n   * defined by {@link FacetIndexingParams#getPartitionSize()}) and the key\n   * denotes the partition ID. When no partitions are defined, the returned map\n   * contains only one value.\n   * <p>\n   * <b>NOTE:</b> the {@code ordinals} array is modified by adding parent\n   * ordinals to it. Also, some encoders may sort the array and remove duplicate\n   * ordinals. Therefore you may want to invoke this method after you finished\n   * processing the array for other purposes.\n   */\n  @Override\n  public Map<String,BytesRef> build(IntsRef ordinals, Iterable<CategoryPath> categories) throws IOException {\n    int upto = ordinals.length; // since we add ordinals to IntsRef, iterate upto original length\n    \n    for (int i = 0; i < upto; i++) {\n      int ordinal = ordinals.ints[i];\n      int parent = taxoWriter.getParent(ordinal);\n      while (parent > 0) {\n        if (ordinalPolicy.shouldAdd(parent)) {\n          ordinals.ints[ordinals.length++] = parent;\n        }\n        parent = taxoWriter.getParent(parent);\n      }\n    }\n    return ordinalsEncoder.encode(ordinals);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"239f79ed06f0979cfe1911ec5fba32b94fda43c1","date":1359553898,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder#build(IntsRef,Iterable[CategoryPath]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder#build(IntsRef,Iterable[CategoryPath]).mjava","sourceNew":"  /**\n   * Every returned {@link BytesRef} corresponds to a single partition (as\n   * defined by {@link FacetIndexingParams#getPartitionSize()}) and the key\n   * denotes the partition ID. When no partitions are defined, the returned map\n   * contains only one value.\n   * <p>\n   * <b>NOTE:</b> the {@code ordinals} array is modified by adding parent\n   * ordinals to it. Also, some encoders may sort the array and remove duplicate\n   * ordinals. Therefore you may want to invoke this method after you finished\n   * processing the array for other purposes.\n   */\n  @Override\n  public Map<String,BytesRef> build(IntsRef ordinals, Iterable<CategoryPath> categories) throws IOException {\n    int upto = ordinals.length; // since we may add ordinals to IntsRef, iterate upto original length\n\n    Iterator<CategoryPath> iter = categories.iterator();\n    for (int i = 0; i < upto; i++) {\n      int ordinal = ordinals.ints[i];\n      CategoryPath cp = iter.next();\n      OrdinalPolicy op = clp.getOrdinalPolicy(cp.components[0]);\n      if (op != OrdinalPolicy.NO_PARENTS) {\n        // need to add parents too\n        int parent = taxoWriter.getParent(ordinal);\n        while (parent > 0) {\n          ordinals.ints[ordinals.length++] = parent;\n          parent = taxoWriter.getParent(parent);\n        }\n        if (op == OrdinalPolicy.ALL_BUT_DIMENSION) { // discard the last added parent, which is the dimension\n          ordinals.length--;\n        }\n      }\n    }\n    return ordinalsEncoder.encode(ordinals);\n  }\n\n","sourceOld":"  /**\n   * Every returned {@link BytesRef} corresponds to a single partition (as\n   * defined by {@link FacetIndexingParams#getPartitionSize()}) and the key\n   * denotes the partition ID. When no partitions are defined, the returned map\n   * contains only one value.\n   * <p>\n   * <b>NOTE:</b> the {@code ordinals} array is modified by adding parent\n   * ordinals to it. Also, some encoders may sort the array and remove duplicate\n   * ordinals. Therefore you may want to invoke this method after you finished\n   * processing the array for other purposes.\n   */\n  @Override\n  public Map<String,BytesRef> build(IntsRef ordinals, Iterable<CategoryPath> categories) throws IOException {\n    int upto = ordinals.length; // since we add ordinals to IntsRef, iterate upto original length\n    \n    if (ordinalPolicy == OrdinalPolicy.ALL_PARENTS) { // add all parents too\n      for (int i = 0; i < upto; i++) {\n        int ordinal = ordinals.ints[i];\n        int parent = taxoWriter.getParent(ordinal);\n        while (parent > 0) {\n          ordinals.ints[ordinals.length++] = parent;\n          parent = taxoWriter.getParent(parent);\n        }\n      }\n    }\n    return ordinalsEncoder.encode(ordinals);\n  }\n\n","bugFix":null,"bugIntro":["f799def92dd641ab877459be5f6182bb811df6ff"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder#build(IntsRef,Iterable[CategoryPath]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder#build(IntsRef,Iterable[CategoryPath]).mjava","sourceNew":"  /**\n   * Every returned {@link BytesRef} corresponds to a single partition (as\n   * defined by {@link FacetIndexingParams#getPartitionSize()}) and the key\n   * denotes the partition ID. When no partitions are defined, the returned map\n   * contains only one value.\n   * <p>\n   * <b>NOTE:</b> the {@code ordinals} array is modified by adding parent\n   * ordinals to it. Also, some encoders may sort the array and remove duplicate\n   * ordinals. Therefore you may want to invoke this method after you finished\n   * processing the array for other purposes.\n   */\n  @Override\n  public Map<String,BytesRef> build(IntsRef ordinals, Iterable<CategoryPath> categories) throws IOException {\n    int upto = ordinals.length; // since we may add ordinals to IntsRef, iterate upto original length\n\n    Iterator<CategoryPath> iter = categories.iterator();\n    for (int i = 0; i < upto; i++) {\n      int ordinal = ordinals.ints[i];\n      CategoryPath cp = iter.next();\n      OrdinalPolicy op = clp.getOrdinalPolicy(cp.components[0]);\n      if (op != OrdinalPolicy.NO_PARENTS) {\n        // need to add parents too\n        int parent = taxoWriter.getParent(ordinal);\n        while (parent > 0) {\n          ordinals.ints[ordinals.length++] = parent;\n          parent = taxoWriter.getParent(parent);\n        }\n        if (op == OrdinalPolicy.ALL_BUT_DIMENSION) { // discard the last added parent, which is the dimension\n          ordinals.length--;\n        }\n      }\n    }\n    return ordinalsEncoder.encode(ordinals);\n  }\n\n","sourceOld":"  /**\n   * Every returned {@link BytesRef} corresponds to a single partition (as\n   * defined by {@link FacetIndexingParams#getPartitionSize()}) and the key\n   * denotes the partition ID. When no partitions are defined, the returned map\n   * contains only one value.\n   * <p>\n   * <b>NOTE:</b> the {@code ordinals} array is modified by adding parent\n   * ordinals to it. Also, some encoders may sort the array and remove duplicate\n   * ordinals. Therefore you may want to invoke this method after you finished\n   * processing the array for other purposes.\n   */\n  @Override\n  public Map<String,BytesRef> build(IntsRef ordinals, Iterable<CategoryPath> categories) throws IOException {\n    int upto = ordinals.length; // since we add ordinals to IntsRef, iterate upto original length\n    \n    if (ordinalPolicy == OrdinalPolicy.ALL_PARENTS) { // add all parents too\n      for (int i = 0; i < upto; i++) {\n        int ordinal = ordinals.ints[i];\n        int parent = taxoWriter.getParent(ordinal);\n        while (parent > 0) {\n          ordinals.ints[ordinals.length++] = parent;\n          parent = taxoWriter.getParent(parent);\n        }\n      }\n    }\n    return ordinalsEncoder.encode(ordinals);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f799def92dd641ab877459be5f6182bb811df6ff","date":1364274773,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder#build(IntsRef,Iterable[CategoryPath]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder#build(IntsRef,Iterable[CategoryPath]).mjava","sourceNew":"  /**\n   * Every returned {@link BytesRef} corresponds to a single partition (as\n   * defined by {@link FacetIndexingParams#getPartitionSize()}) and the key\n   * denotes the partition ID. When no partitions are defined, the returned map\n   * contains only one value.\n   * <p>\n   * <b>NOTE:</b> the {@code ordinals} array is modified by adding parent\n   * ordinals to it. Also, some encoders may sort the array and remove duplicate\n   * ordinals. Therefore you may want to invoke this method after you finished\n   * processing the array for other purposes.\n   */\n  @Override\n  public Map<String,BytesRef> build(IntsRef ordinals, Iterable<CategoryPath> categories) throws IOException {\n    int upto = ordinals.length; // since we may add ordinals to IntsRef, iterate upto original length\n\n    Iterator<CategoryPath> iter = categories.iterator();\n    for (int i = 0; i < upto; i++) {\n      int ordinal = ordinals.ints[i];\n      CategoryPath cp = iter.next();\n      OrdinalPolicy op = clp.getOrdinalPolicy(cp.components[0]);\n      if (op != OrdinalPolicy.NO_PARENTS) {\n        // need to add parents too\n        int parent = taxoWriter.getParent(ordinal);\n        if (parent > 0) {\n          // only do this if the category is not a dimension itself, otherwise, it was just discarded by the 'if' below\n          while (parent > 0) {\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n          if (op == OrdinalPolicy.ALL_BUT_DIMENSION) { // discard the last added parent, which is the dimension\n            ordinals.length--;\n          }\n        }\n      }\n    }\n    return ordinalsEncoder.encode(ordinals);\n  }\n\n","sourceOld":"  /**\n   * Every returned {@link BytesRef} corresponds to a single partition (as\n   * defined by {@link FacetIndexingParams#getPartitionSize()}) and the key\n   * denotes the partition ID. When no partitions are defined, the returned map\n   * contains only one value.\n   * <p>\n   * <b>NOTE:</b> the {@code ordinals} array is modified by adding parent\n   * ordinals to it. Also, some encoders may sort the array and remove duplicate\n   * ordinals. Therefore you may want to invoke this method after you finished\n   * processing the array for other purposes.\n   */\n  @Override\n  public Map<String,BytesRef> build(IntsRef ordinals, Iterable<CategoryPath> categories) throws IOException {\n    int upto = ordinals.length; // since we may add ordinals to IntsRef, iterate upto original length\n\n    Iterator<CategoryPath> iter = categories.iterator();\n    for (int i = 0; i < upto; i++) {\n      int ordinal = ordinals.ints[i];\n      CategoryPath cp = iter.next();\n      OrdinalPolicy op = clp.getOrdinalPolicy(cp.components[0]);\n      if (op != OrdinalPolicy.NO_PARENTS) {\n        // need to add parents too\n        int parent = taxoWriter.getParent(ordinal);\n        while (parent > 0) {\n          ordinals.ints[ordinals.length++] = parent;\n          parent = taxoWriter.getParent(parent);\n        }\n        if (op == OrdinalPolicy.ALL_BUT_DIMENSION) { // discard the last added parent, which is the dimension\n          ordinals.length--;\n        }\n      }\n    }\n    return ordinalsEncoder.encode(ordinals);\n  }\n\n","bugFix":["66644845192a1c92d87d5324cc0b5af16ad31b42","bceb02c33032dd9bbf107cd06d0b74e5db4f110a","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder#build(IntsRef,Iterable[FacetLabel]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder#build(IntsRef,Iterable[CategoryPath]).mjava","sourceNew":"  /**\n   * Every returned {@link BytesRef} corresponds to a single partition (as\n   * defined by {@link FacetIndexingParams#getPartitionSize()}) and the key\n   * denotes the partition ID. When no partitions are defined, the returned map\n   * contains only one value.\n   * <p>\n   * <b>NOTE:</b> the {@code ordinals} array is modified by adding parent\n   * ordinals to it. Also, some encoders may sort the array and remove duplicate\n   * ordinals. Therefore you may want to invoke this method after you finished\n   * processing the array for other purposes.\n   */\n  @Override\n  public Map<String,BytesRef> build(IntsRef ordinals, Iterable<FacetLabel> categories) throws IOException {\n    int upto = ordinals.length; // since we may add ordinals to IntsRef, iterate upto original length\n\n    Iterator<FacetLabel> iter = categories.iterator();\n    for (int i = 0; i < upto; i++) {\n      int ordinal = ordinals.ints[i];\n      FacetLabel cp = iter.next();\n      OrdinalPolicy op = clp.getOrdinalPolicy(cp.components[0]);\n      if (op != OrdinalPolicy.NO_PARENTS) {\n        // need to add parents too\n        int parent = taxoWriter.getParent(ordinal);\n        if (parent > 0) {\n          // only do this if the category is not a dimension itself, otherwise, it was just discarded by the 'if' below\n          while (parent > 0) {\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n          if (op == OrdinalPolicy.ALL_BUT_DIMENSION) { // discard the last added parent, which is the dimension\n            ordinals.length--;\n          }\n        }\n      }\n    }\n    return ordinalsEncoder.encode(ordinals);\n  }\n\n","sourceOld":"  /**\n   * Every returned {@link BytesRef} corresponds to a single partition (as\n   * defined by {@link FacetIndexingParams#getPartitionSize()}) and the key\n   * denotes the partition ID. When no partitions are defined, the returned map\n   * contains only one value.\n   * <p>\n   * <b>NOTE:</b> the {@code ordinals} array is modified by adding parent\n   * ordinals to it. Also, some encoders may sort the array and remove duplicate\n   * ordinals. Therefore you may want to invoke this method after you finished\n   * processing the array for other purposes.\n   */\n  @Override\n  public Map<String,BytesRef> build(IntsRef ordinals, Iterable<CategoryPath> categories) throws IOException {\n    int upto = ordinals.length; // since we may add ordinals to IntsRef, iterate upto original length\n\n    Iterator<CategoryPath> iter = categories.iterator();\n    for (int i = 0; i < upto; i++) {\n      int ordinal = ordinals.ints[i];\n      CategoryPath cp = iter.next();\n      OrdinalPolicy op = clp.getOrdinalPolicy(cp.components[0]);\n      if (op != OrdinalPolicy.NO_PARENTS) {\n        // need to add parents too\n        int parent = taxoWriter.getParent(ordinal);\n        if (parent > 0) {\n          // only do this if the category is not a dimension itself, otherwise, it was just discarded by the 'if' below\n          while (parent > 0) {\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n          if (op == OrdinalPolicy.ALL_BUT_DIMENSION) { // discard the last added parent, which is the dimension\n            ordinals.length--;\n          }\n        }\n      }\n    }\n    return ordinalsEncoder.encode(ordinals);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder#build(IntsRef,Iterable[CategoryPath]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Every returned {@link BytesRef} corresponds to a single partition (as\n   * defined by {@link FacetIndexingParams#getPartitionSize()}) and the key\n   * denotes the partition ID. When no partitions are defined, the returned map\n   * contains only one value.\n   * <p>\n   * <b>NOTE:</b> the {@code ordinals} array is modified by adding parent\n   * ordinals to it. Also, some encoders may sort the array and remove duplicate\n   * ordinals. Therefore you may want to invoke this method after you finished\n   * processing the array for other purposes.\n   */\n  @Override\n  public Map<String,BytesRef> build(IntsRef ordinals, Iterable<CategoryPath> categories) throws IOException {\n    int upto = ordinals.length; // since we may add ordinals to IntsRef, iterate upto original length\n\n    Iterator<CategoryPath> iter = categories.iterator();\n    for (int i = 0; i < upto; i++) {\n      int ordinal = ordinals.ints[i];\n      CategoryPath cp = iter.next();\n      OrdinalPolicy op = clp.getOrdinalPolicy(cp.components[0]);\n      if (op != OrdinalPolicy.NO_PARENTS) {\n        // need to add parents too\n        int parent = taxoWriter.getParent(ordinal);\n        if (parent > 0) {\n          // only do this if the category is not a dimension itself, otherwise, it was just discarded by the 'if' below\n          while (parent > 0) {\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n          if (op == OrdinalPolicy.ALL_BUT_DIMENSION) { // discard the last added parent, which is the dimension\n            ordinals.length--;\n          }\n        }\n      }\n    }\n    return ordinalsEncoder.encode(ordinals);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61d5f95d14e5b9b046998c51e16709a398c15226":["b2d5244a676b83c2d551c3746e8181588ba619e1","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"66644845192a1c92d87d5324cc0b5af16ad31b42":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["66644845192a1c92d87d5324cc0b5af16ad31b42"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["f799def92dd641ab877459be5f6182bb811df6ff","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"f799def92dd641ab877459be5f6182bb811df6ff":["239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["f799def92dd641ab877459be5f6182bb811df6ff"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["4e6354dd7c71fe122926fc53d7d29f715b1283db","66644845192a1c92d87d5324cc0b5af16ad31b42"]},"commit2Childs":{"61d5f95d14e5b9b046998c51e16709a398c15226":[],"66644845192a1c92d87d5324cc0b5af16ad31b42":["239f79ed06f0979cfe1911ec5fba32b94fda43c1","b2d5244a676b83c2d551c3746e8181588ba619e1"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["66644845192a1c92d87d5324cc0b5af16ad31b42","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["61d5f95d14e5b9b046998c51e16709a398c15226","f799def92dd641ab877459be5f6182bb811df6ff"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f799def92dd641ab877459be5f6182bb811df6ff":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["b2d5244a676b83c2d551c3746e8181588ba619e1"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["61d5f95d14e5b9b046998c51e16709a398c15226"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}