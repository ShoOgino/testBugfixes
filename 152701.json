{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OldAnalyticsParams.RangeFacetParamParser#applyParam(AnalyticsRangeFacetRequest,String,String[]).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OldAnalyticsParams.RangeFacetParamParser#applyParam(AnalyticsRangeFacetRequest,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"    public static void applyParam(AnalyticsRangeFacetRequest facet, String param, String[] values) {\n      if (isStart.test(param)) {\n        facet.start = values[0];\n      } else if (isEnd.test(param)) {\n        facet.end = values[0];\n      } else if (isGap.test(param)) {\n        facet.gaps = Arrays.asList(values[0].split(\",\"));\n      } else if (isHardEnd.test(param)) {\n        if (isTrue.test(values[0])) {\n          facet.hardend = true;\n        } else if (isFalse.test(values[0])) {\n          facet.hardend = false;\n        }\n      } else if (isInclude.test(param)) {\n        facet.include = Arrays.asList(values);\n      } else if (isOther.test(param)) {\n        facet.others = Arrays.asList(values);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OldAnalyticsParams.RangeFacetParamParser#applyParam(AnalyticsRangeFacetRequest,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"    public static void applyParam(AnalyticsRangeFacetRequest facet, String param, String[] values) {\n      if (isStart.test(param)) {\n        facet.start = values[0];\n      } else if (isEnd.test(param)) {\n        facet.end = values[0];\n      } else if (isGap.test(param)) {\n        facet.gaps = Arrays.asList(values[0].split(\",\"));\n      } else if (isHardEnd.test(param)) {\n        if (isTrue.test(values[0])) {\n          facet.hardend = true;\n        } else if (isFalse.test(values[0])) {\n          facet.hardend = false;\n        }\n      } else if (isInclude.test(param)) {\n        facet.include = Arrays.asList(values);\n      } else if (isOther.test(param)) {\n        facet.others = Arrays.asList(values);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OldAnalyticsParams.RangeFacetParamParser#applyParam(AnalyticsRangeFacetRequest,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"    public static void applyParam(AnalyticsRangeFacetRequest facet, String param, String[] values) {\n      if (isStart.test(param)) {\n        facet.start = values[0];\n      } else if (isEnd.test(param)) {\n        facet.end = values[0];\n      } else if (isGap.test(param)) {\n        facet.gaps = Arrays.asList(values[0].split(\",\"));\n      } else if (isHardEnd.test(param)) {\n        if (isTrue.test(values[0])) {\n          facet.hardend = true;\n        } else if (isFalse.test(values[0])) {\n          facet.hardend = false;\n        }\n      } else if (isInclude.test(param)) {\n        facet.include = Arrays.asList(values);\n      } else if (isOther.test(param)) {\n        facet.others = Arrays.asList(values);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}