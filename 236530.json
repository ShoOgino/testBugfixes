{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer#updateSlice(CloudState,String,Slice).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#updateSlice(CloudState,String,Slice).mjava","pathOld":"/dev/null","sourceNew":"  private CloudState updateSlice(CloudState state, String collection, Slice slice) {\n    \n    final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n    newStates.putAll(state.getCollectionStates());\n    \n    if (!newStates.containsKey(collection)) {\n      newStates.put(collection, new LinkedHashMap<String,Slice>());\n    }\n    \n    final Map<String, Slice> slices = newStates.get(collection);\n    if (!slices.containsKey(slice.getName())) {\n      slices.put(slice.getName(), slice);\n    } else {\n      final Map<String,ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n      final Slice existingSlice = slices.get(slice.getName());\n      shards.putAll(existingSlice.getShards());\n      //XXX preserve existing leader\n      for(Entry<String, ZkNodeProps> edit: slice.getShards().entrySet()) {\n        if(existingSlice.getShards().get(edit.getKey())!=null && existingSlice.getShards().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n          HashMap<String, String> newProps = new HashMap<String,String>();\n          newProps.putAll(edit.getValue().getProperties());\n          newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getShards().get(edit.getKey()).get(ZkStateReader.LEADER_PROP));\n          shards.put(edit.getKey(), new ZkNodeProps(newProps));\n        } else {\n          shards.put(edit.getKey(), edit.getValue());\n        }\n      }\n      final Slice updatedSlice = new Slice(slice.getName(), shards);\n      slices.put(slice.getName(), updatedSlice);\n    }\n    return new CloudState(state.getLiveNodes(), newStates);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#updateSlice(CloudState,String,Slice).mjava","pathOld":"/dev/null","sourceNew":"  private CloudState updateSlice(CloudState state, String collection, Slice slice) {\n    \n    final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n    newStates.putAll(state.getCollectionStates());\n    \n    if (!newStates.containsKey(collection)) {\n      newStates.put(collection, new LinkedHashMap<String,Slice>());\n    }\n    \n    final Map<String, Slice> slices = newStates.get(collection);\n    if (!slices.containsKey(slice.getName())) {\n      slices.put(slice.getName(), slice);\n    } else {\n      final Map<String,ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n      final Slice existingSlice = slices.get(slice.getName());\n      shards.putAll(existingSlice.getShards());\n      //XXX preserve existing leader\n      for(Entry<String, ZkNodeProps> edit: slice.getShards().entrySet()) {\n        if(existingSlice.getShards().get(edit.getKey())!=null && existingSlice.getShards().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n          HashMap<String, String> newProps = new HashMap<String,String>();\n          newProps.putAll(edit.getValue().getProperties());\n          newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getShards().get(edit.getKey()).get(ZkStateReader.LEADER_PROP));\n          shards.put(edit.getKey(), new ZkNodeProps(newProps));\n        } else {\n          shards.put(edit.getKey(), edit.getValue());\n        }\n      }\n      final Slice updatedSlice = new Slice(slice.getName(), shards);\n      slices.put(slice.getName(), updatedSlice);\n    }\n    return new CloudState(state.getLiveNodes(), newStates);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#updateSlice(CloudState,String,Slice).mjava","pathOld":"/dev/null","sourceNew":"  private CloudState updateSlice(CloudState state, String collection, Slice slice) {\n    \n    final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n    newStates.putAll(state.getCollectionStates());\n    \n    if (!newStates.containsKey(collection)) {\n      newStates.put(collection, new LinkedHashMap<String,Slice>());\n    }\n    \n    final Map<String, Slice> slices = newStates.get(collection);\n    if (!slices.containsKey(slice.getName())) {\n      slices.put(slice.getName(), slice);\n    } else {\n      final Map<String,ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n      final Slice existingSlice = slices.get(slice.getName());\n      shards.putAll(existingSlice.getShards());\n      //XXX preserve existing leader\n      for(Entry<String, ZkNodeProps> edit: slice.getShards().entrySet()) {\n        if(existingSlice.getShards().get(edit.getKey())!=null && existingSlice.getShards().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n          HashMap<String, String> newProps = new HashMap<String,String>();\n          newProps.putAll(edit.getValue().getProperties());\n          newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getShards().get(edit.getKey()).get(ZkStateReader.LEADER_PROP));\n          shards.put(edit.getKey(), new ZkNodeProps(newProps));\n        } else {\n          shards.put(edit.getKey(), edit.getValue());\n        }\n      }\n      final Slice updatedSlice = new Slice(slice.getName(), shards);\n      slices.put(slice.getName(), updatedSlice);\n    }\n    return new CloudState(state.getLiveNodes(), newStates);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0492616b11aace806d95ec9df44f57a60160bf7","date":1327803775,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#updateSlice(CloudState,String,Slice).mjava","sourceNew":null,"sourceOld":"  private CloudState updateSlice(CloudState state, String collection, Slice slice) {\n    \n    final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n    newStates.putAll(state.getCollectionStates());\n    \n    if (!newStates.containsKey(collection)) {\n      newStates.put(collection, new LinkedHashMap<String,Slice>());\n    }\n    \n    final Map<String, Slice> slices = newStates.get(collection);\n    if (!slices.containsKey(slice.getName())) {\n      slices.put(slice.getName(), slice);\n    } else {\n      final Map<String,ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n      final Slice existingSlice = slices.get(slice.getName());\n      shards.putAll(existingSlice.getShards());\n      //XXX preserve existing leader\n      for(Entry<String, ZkNodeProps> edit: slice.getShards().entrySet()) {\n        if(existingSlice.getShards().get(edit.getKey())!=null && existingSlice.getShards().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n          HashMap<String, String> newProps = new HashMap<String,String>();\n          newProps.putAll(edit.getValue().getProperties());\n          newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getShards().get(edit.getKey()).get(ZkStateReader.LEADER_PROP));\n          shards.put(edit.getKey(), new ZkNodeProps(newProps));\n        } else {\n          shards.put(edit.getKey(), edit.getValue());\n        }\n      }\n      final Slice updatedSlice = new Slice(slice.getName(), shards);\n      slices.put(slice.getName(), updatedSlice);\n    }\n    return new CloudState(state.getLiveNodes(), newStates);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4a0c306589f8607dc4b33f7abaf753db19f76e","date":1327836084,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#updateSlice(CloudState,String,Slice).mjava","sourceNew":null,"sourceOld":"  private CloudState updateSlice(CloudState state, String collection, Slice slice) {\n    \n    final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n    newStates.putAll(state.getCollectionStates());\n    \n    if (!newStates.containsKey(collection)) {\n      newStates.put(collection, new LinkedHashMap<String,Slice>());\n    }\n    \n    final Map<String, Slice> slices = newStates.get(collection);\n    if (!slices.containsKey(slice.getName())) {\n      slices.put(slice.getName(), slice);\n    } else {\n      final Map<String,ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n      final Slice existingSlice = slices.get(slice.getName());\n      shards.putAll(existingSlice.getShards());\n      //XXX preserve existing leader\n      for(Entry<String, ZkNodeProps> edit: slice.getShards().entrySet()) {\n        if(existingSlice.getShards().get(edit.getKey())!=null && existingSlice.getShards().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n          HashMap<String, String> newProps = new HashMap<String,String>();\n          newProps.putAll(edit.getValue().getProperties());\n          newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getShards().get(edit.getKey()).get(ZkStateReader.LEADER_PROP));\n          shards.put(edit.getKey(), new ZkNodeProps(newProps));\n        } else {\n          shards.put(edit.getKey(), edit.getValue());\n        }\n      }\n      final Slice updatedSlice = new Slice(slice.getName(), shards);\n      slices.put(slice.getName(), updatedSlice);\n    }\n    return new CloudState(state.getLiveNodes(), newStates);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#updateSlice(CloudState,String,Slice).mjava","sourceNew":null,"sourceOld":"  private CloudState updateSlice(CloudState state, String collection, Slice slice) {\n    \n    final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n    newStates.putAll(state.getCollectionStates());\n    \n    if (!newStates.containsKey(collection)) {\n      newStates.put(collection, new LinkedHashMap<String,Slice>());\n    }\n    \n    final Map<String, Slice> slices = newStates.get(collection);\n    if (!slices.containsKey(slice.getName())) {\n      slices.put(slice.getName(), slice);\n    } else {\n      final Map<String,ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n      final Slice existingSlice = slices.get(slice.getName());\n      shards.putAll(existingSlice.getShards());\n      //XXX preserve existing leader\n      for(Entry<String, ZkNodeProps> edit: slice.getShards().entrySet()) {\n        if(existingSlice.getShards().get(edit.getKey())!=null && existingSlice.getShards().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n          HashMap<String, String> newProps = new HashMap<String,String>();\n          newProps.putAll(edit.getValue().getProperties());\n          newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getShards().get(edit.getKey()).get(ZkStateReader.LEADER_PROP));\n          shards.put(edit.getKey(), new ZkNodeProps(newProps));\n        } else {\n          shards.put(edit.getKey(), edit.getValue());\n        }\n      }\n      final Slice updatedSlice = new Slice(slice.getName(), shards);\n      slices.put(slice.getName(), updatedSlice);\n    }\n    return new CloudState(state.getLiveNodes(), newStates);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","d0492616b11aace806d95ec9df44f57a60160bf7"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0492616b11aace806d95ec9df44f57a60160bf7":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d0492616b11aace806d95ec9df44f57a60160bf7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0492616b11aace806d95ec9df44f57a60160bf7"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["8f4a0c306589f8607dc4b33f7abaf753db19f76e"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d0492616b11aace806d95ec9df44f57a60160bf7"],"d0492616b11aace806d95ec9df44f57a60160bf7":["fd92b8bcc88e969302510acf77bd6970da3994c4","8f4a0c306589f8607dc4b33f7abaf753db19f76e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","8f4a0c306589f8607dc4b33f7abaf753db19f76e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}