{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    TFIDFSimilarity sim = asTFIDF(searcher.getSimilarity(), field);\n    if (sim == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    int docfreq = searcher.getIndexReader().docFreq(new Term(indexedField, indexedBytes));\n    float idf = sim.idf(docfreq, searcher.getIndexReader().maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"485545da3b4429d6f138b4baac573a97820ee93b","date":1433876557,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    TFIDFSimilarity sim = asTFIDF(searcher.getSimilarity(true), field);\n    if (sim == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    int docfreq = searcher.getIndexReader().docFreq(new Term(indexedField, indexedBytes));\n    float idf = sim.idf(docfreq, searcher.getIndexReader().maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    TFIDFSimilarity sim = asTFIDF(searcher.getSimilarity(), field);\n    if (sim == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    int docfreq = searcher.getIndexReader().docFreq(new Term(indexedField, indexedBytes));\n    float idf = sim.idf(docfreq, searcher.getIndexReader().maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    TFIDFSimilarity sim = asTFIDF(searcher.getSimilarity(true), field);\n    if (sim == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    int docfreq = searcher.getIndexReader().docFreq(new Term(indexedField, indexedBytes));\n    float idf = sim.idf(docfreq, searcher.getIndexReader().maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    TFIDFSimilarity sim = asTFIDF(searcher.getSimilarity(true), field);\n    if (sim == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    int docfreq = searcher.getIndexReader().docFreq(new Term(indexedField, indexedBytes));\n    float idf = sim.idf(docfreq, searcher.getIndexReader().maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    TFIDFSimilarity sim = asTFIDF(searcher.getSimilarity(), field);\n    if (sim == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    int docfreq = searcher.getIndexReader().docFreq(new Term(indexedField, indexedBytes));\n    float idf = sim.idf(docfreq, searcher.getIndexReader().maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    TFIDFSimilarity sim = asTFIDF(searcher.getSimilarity(true), field);\n    if (sim == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    int docfreq = searcher.getIndexReader().docFreq(new Term(indexedField, indexedBytes));\n    float idf = sim.idf(docfreq, searcher.getIndexReader().maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    TFIDFSimilarity sim = asTFIDF(searcher.getSimilarity(), field);\n    if (sim == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    int docfreq = searcher.getIndexReader().docFreq(new Term(indexedField, indexedBytes));\n    float idf = sim.idf(docfreq, searcher.getIndexReader().maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    TFIDFSimilarity sim = asTFIDF(searcher.getSimilarity(true), field);\n    if (sim == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    int docfreq = searcher.getIndexReader().docFreq(new Term(indexedField, indexedBytes));\n    float idf = sim.idf(docfreq, searcher.getIndexReader().maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16e64ef643e003f0e20bb000b803c75b135664f9","date":1590597399,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    TFIDFSimilarity sim = asTFIDF(searcher.getSimilarity(), field);\n    if (sim == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    int docfreq = searcher.getIndexReader().docFreq(new Term(indexedField, indexedBytes));\n    float idf = sim.idf(docfreq, searcher.getIndexReader().maxDoc());\n    return new DocFreqValueSource.ConstDoubleDocValues(idf, this);\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    TFIDFSimilarity sim = asTFIDF(searcher.getSimilarity(), field);\n    if (sim == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    int docfreq = searcher.getIndexReader().docFreq(new Term(indexedField, indexedBytes));\n    float idf = sim.idf(docfreq, searcher.getIndexReader().maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":5,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource#getValues(Map[Object,Object],LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    TFIDFSimilarity sim = asTFIDF(searcher.getSimilarity(), field);\n    if (sim == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    int docfreq = searcher.getIndexReader().docFreq(new Term(indexedField, indexedBytes));\n    float idf = sim.idf(docfreq, searcher.getIndexReader().maxDoc());\n    return new DocFreqValueSource.ConstDoubleDocValues(idf, this);\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    TFIDFSimilarity sim = asTFIDF(searcher.getSimilarity(), field);\n    if (sim == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    int docfreq = searcher.getIndexReader().docFreq(new Term(indexedField, indexedBytes));\n    float idf = sim.idf(docfreq, searcher.getIndexReader().maxDoc());\n    return new DocFreqValueSource.ConstDoubleDocValues(idf, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["81d0720146de53dd3a4a023d2a3d1089d86d748d","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"16e64ef643e003f0e20bb000b803c75b135664f9":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"485545da3b4429d6f138b4baac573a97820ee93b":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["16e64ef643e003f0e20bb000b803c75b135664f9"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["485545da3b4429d6f138b4baac573a97820ee93b"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["16e64ef643e003f0e20bb000b803c75b135664f9"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"16e64ef643e003f0e20bb000b803c75b135664f9":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"485545da3b4429d6f138b4baac573a97820ee93b":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["485545da3b4429d6f138b4baac573a97820ee93b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}