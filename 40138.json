{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#sameUser(String).mjava","commits":[{"id":"9b95105f40584c3ef98e6a1ab1b55ad47d67f136","date":1476256601,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#sameUser(String).mjava","pathOld":"/dev/null","sourceNew":"    public static int sameUser(String directory) throws Exception {\n      if (Files.exists(Paths.get(directory))) {\n        String userForDir = userForDir(Paths.get(directory));\n        if (!currentUser().equals(userForDir)) {\n          return exitOrException(\"Must run as user \" + userForDir + \". We are \" + currentUser());\n        }\n      } else {\n        return exitOrException(\"Directory \" + directory + \" does not exist.\");\n      }\n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#sameUser(String).mjava","pathOld":"/dev/null","sourceNew":"    public static int sameUser(String directory) throws Exception {\n      if (Files.exists(Paths.get(directory))) {\n        String userForDir = userForDir(Paths.get(directory));\n        if (!currentUser().equals(userForDir)) {\n          return exitOrException(\"Must run as user \" + userForDir + \". We are \" + currentUser());\n        }\n      } else {\n        return exitOrException(\"Directory \" + directory + \" does not exist.\");\n      }\n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#sameUser(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#sameUser(String).mjava","sourceNew":"    public static int sameUser(String directory) throws Exception {\n      if (Files.exists(Paths.get(directory))) {\n        String userForDir = userForDir(Paths.get(directory));\n        if (!currentUser().equals(userForDir)) {\n          return exitOrException(\"Must run as user \" + userForDir + \". We are \" + currentUser());\n        }\n      } else {\n        return exitOrException(\"Directory \" + directory + \" does not exist.\");\n      }\n      return 0;\n    }\n\n","sourceOld":"    public static int sameUser(String directory) throws Exception {\n      if (Files.exists(Paths.get(directory))) {\n        String userForDir = userForDir(Paths.get(directory));\n        if (!currentUser().equals(userForDir)) {\n          return exitOrException(\"Must run as user \" + userForDir + \". We are \" + currentUser());\n        }\n      } else {\n        return exitOrException(\"Directory \" + directory + \" does not exist.\");\n      }\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#sameUser(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#sameUser(String).mjava","sourceNew":"    public static int sameUser(String directory) throws Exception {\n      if (Files.exists(Paths.get(directory))) {\n        String userForDir = userForDir(Paths.get(directory));\n        if (!currentUser().equals(userForDir)) {\n          return exitOrException(\"Must run as user \" + userForDir + \". We are \" + currentUser());\n        }\n      } else {\n        return exitOrException(\"Directory \" + directory + \" does not exist.\");\n      }\n      return 0;\n    }\n\n","sourceOld":"    public static int sameUser(String directory) throws Exception {\n      if (Files.exists(Paths.get(directory))) {\n        String userForDir = userForDir(Paths.get(directory));\n        if (!currentUser().equals(userForDir)) {\n          return exitOrException(\"Must run as user \" + userForDir + \". We are \" + currentUser());\n        }\n      } else {\n        return exitOrException(\"Directory \" + directory + \" does not exist.\");\n      }\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#sameUser(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#sameUser(String).mjava","sourceNew":"    public static int sameUser(String directory) throws Exception {\n      if (Files.exists(Paths.get(directory))) {\n        String userForDir = userForDir(Paths.get(directory));\n        if (!currentUser().equals(userForDir)) {\n          return exitOrException(\"Must run as user \" + userForDir + \". We are \" + currentUser());\n        }\n      } else {\n        return exitOrException(\"Directory \" + directory + \" does not exist.\");\n      }\n      return 0;\n    }\n\n","sourceOld":"    public static int sameUser(String directory) throws Exception {\n      if (Files.exists(Paths.get(directory))) {\n        String userForDir = userForDir(Paths.get(directory));\n        if (!currentUser().equals(userForDir)) {\n          return exitOrException(\"Must run as user \" + userForDir + \". We are \" + currentUser());\n        }\n      } else {\n        return exitOrException(\"Directory \" + directory + \" does not exist.\");\n      }\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["9b95105f40584c3ef98e6a1ab1b55ad47d67f136","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b95105f40584c3ef98e6a1ab1b55ad47d67f136":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9b95105f40584c3ef98e6a1ab1b55ad47d67f136"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["9b95105f40584c3ef98e6a1ab1b55ad47d67f136"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["9b95105f40584c3ef98e6a1ab1b55ad47d67f136","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b95105f40584c3ef98e6a1ab1b55ad47d67f136","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9b95105f40584c3ef98e6a1ab1b55ad47d67f136":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b79a5db147a1c6f95d1625ddbc3561ef56955225","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}