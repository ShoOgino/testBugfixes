{"path":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","commits":[{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedNumericDocValues dvs[] = toMerge.toArray(new SortedNumericDocValues[toMerge.size()]);\n    \n    // step 3: add field\n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = dv.count();\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = dvs[readerUpto].valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    valueUpto = 0;\n                    valueLength = dv.count();\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedNumericDocValues dvs[] = toMerge.toArray(new SortedNumericDocValues[toMerge.size()]);\n    \n    // step 3: add field\n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = dv.count();\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = dvs[readerUpto].valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    valueUpto = 0;\n                    valueLength = dv.count();\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    final LeafReader readers[] = mergeState.readers.toArray(new LeafReader[toMerge.size()]);\n    final SortedNumericDocValues dvs[] = toMerge.toArray(new SortedNumericDocValues[toMerge.size()]);\n    \n    // step 3: add field\n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              LeafReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = dv.count();\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              LeafReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = dvs[readerUpto].valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    valueUpto = 0;\n                    valueLength = dv.count();\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    final AtomicReader readers[] = mergeState.readers.toArray(new AtomicReader[toMerge.size()]);\n    final SortedNumericDocValues dvs[] = toMerge.toArray(new SortedNumericDocValues[toMerge.size()]);\n    \n    // step 3: add field\n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = dv.count();\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              AtomicReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = dvs[readerUpto].valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    valueUpto = 0;\n                    valueLength = dv.count();\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2131047ecceac64b54ba70feec3d26bbd7e483d7","date":1411862069,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    final int numReaders = toMerge.size();\n    final SortedNumericDocValues dvs[] = toMerge.toArray(new SortedNumericDocValues[numReaders]);\n    \n    // step 3: add field\n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = dv.count();\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = dvs[readerUpto].valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentMaxDoc;\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    valueUpto = 0;\n                    valueLength = dv.count();\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    final LeafReader readers[] = mergeState.readers.toArray(new LeafReader[toMerge.size()]);\n    final SortedNumericDocValues dvs[] = toMerge.toArray(new SortedNumericDocValues[toMerge.size()]);\n    \n    // step 3: add field\n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              LeafReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = dv.count();\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              LeafReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = dvs[readerUpto].valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    valueUpto = 0;\n                    valueLength = dv.count();\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    final int numReaders = toMerge.size();\n    final SortedNumericDocValues dvs[] = toMerge.toArray(new SortedNumericDocValues[numReaders]);\n    \n    // step 3: add field\n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = dv.count();\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = dvs[readerUpto].valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentMaxDoc;\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    valueUpto = 0;\n                    valueLength = dv.count();\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    final LeafReader readers[] = mergeState.readers.toArray(new LeafReader[toMerge.size()]);\n    final SortedNumericDocValues dvs[] = toMerge.toArray(new SortedNumericDocValues[toMerge.size()]);\n    \n    // step 3: add field\n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              LeafReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = dv.count();\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              LeafReader currentReader;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == readers.length) {\n                    return false;\n                  }\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = dvs[readerUpto].valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                    readerUpto++;\n                    if (readerUpto < readers.length) {\n                      currentReader = readers[readerUpto];\n                      currentLiveDocs = currentReader.getLiveDocs();\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentReader.maxDoc();\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    valueUpto = 0;\n                    valueLength = dv.count();\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    \n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], mergeState.liveDocs[i], toMerge.get(i), mergeState.maxDocs[i]));\n            }\n\n            final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              int nextValue;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  SortedNumericDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  nextIsSet = true;\n                  nextValue = sub.values.count();\n                  return true;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], mergeState.liveDocs[i], toMerge.get(i), mergeState.maxDocs[i]));\n            }\n\n            final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              long nextValue;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n              SortedNumericDocValuesSub current;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = current.values.valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  current = docIDMerger.next();\n                  if (current == null) {\n                    return false;\n                  }\n                  valueUpto = 0;\n                  valueLength = current.values.count();\n                  continue;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    final int numReaders = toMerge.size();\n    final SortedNumericDocValues dvs[] = toMerge.toArray(new SortedNumericDocValues[numReaders]);\n    \n    // step 3: add field\n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = dv.count();\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = dvs[readerUpto].valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentMaxDoc;\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    valueUpto = 0;\n                    valueLength = dv.count();\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14","date":1462698019,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    \n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i]));\n            }\n\n            final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              int nextValue;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  SortedNumericDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  nextIsSet = true;\n                  nextValue = sub.values.count();\n                  return true;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i]));\n            }\n\n            final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              long nextValue;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n              SortedNumericDocValuesSub current;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = current.values.valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  current = docIDMerger.next();\n                  if (current == null) {\n                    return false;\n                  }\n                  valueUpto = 0;\n                  valueLength = current.values.count();\n                  continue;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    \n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], mergeState.liveDocs[i], toMerge.get(i), mergeState.maxDocs[i]));\n            }\n\n            final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              int nextValue;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  SortedNumericDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  nextIsSet = true;\n                  nextValue = sub.values.count();\n                  return true;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], mergeState.liveDocs[i], toMerge.get(i), mergeState.maxDocs[i]));\n            }\n\n            final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              long nextValue;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n              SortedNumericDocValuesSub current;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = current.values.valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  current = docIDMerger.next();\n                  if (current == null) {\n                    return false;\n                  }\n                  valueUpto = 0;\n                  valueLength = current.values.count();\n                  continue;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    \n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i]));\n            }\n\n            final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              int nextValue;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  SortedNumericDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  nextIsSet = true;\n                  nextValue = sub.values.count();\n                  return true;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i]));\n            }\n\n            final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              long nextValue;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n              SortedNumericDocValuesSub current;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = current.values.valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  current = docIDMerger.next();\n                  if (current == null) {\n                    return false;\n                  }\n                  valueUpto = 0;\n                  valueLength = current.values.count();\n                  continue;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    final int numReaders = toMerge.size();\n    final SortedNumericDocValues dvs[] = toMerge.toArray(new SortedNumericDocValues[numReaders]);\n    \n    // step 3: add field\n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = dv.count();\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = dvs[readerUpto].valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentMaxDoc;\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    valueUpto = 0;\n                    valueLength = dv.count();\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    \n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i]));\n            }\n\n            final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              int nextValue;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  SortedNumericDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  nextIsSet = true;\n                  nextValue = sub.values.count();\n                  return true;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i]));\n            }\n\n            final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              long nextValue;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n              SortedNumericDocValuesSub current;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = current.values.valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  current = docIDMerger.next();\n                  if (current == null) {\n                    return false;\n                  }\n                  valueUpto = 0;\n                  valueLength = current.values.count();\n                  continue;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    final int numReaders = toMerge.size();\n    final SortedNumericDocValues dvs[] = toMerge.toArray(new SortedNumericDocValues[numReaders]);\n    \n    // step 3: add field\n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = dv.count();\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = dvs[readerUpto].valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentMaxDoc;\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    valueUpto = 0;\n                    valueLength = dv.count();\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    \n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i]));\n            }\n\n            final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              int nextValue;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  SortedNumericDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  nextIsSet = true;\n                  nextValue = sub.values.count();\n                  return true;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i]));\n            }\n\n            final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              long nextValue;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n              SortedNumericDocValuesSub current;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = current.values.valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  current = docIDMerger.next();\n                  if (current == null) {\n                    return false;\n                  }\n                  valueUpto = 0;\n                  valueLength = current.values.count();\n                  continue;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","sourceOld":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    final int numReaders = toMerge.size();\n    final SortedNumericDocValues dvs[] = toMerge.toArray(new SortedNumericDocValues[numReaders]);\n    \n    // step 3: add field\n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = dv.count();\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = dvs[readerUpto].valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentMaxDoc;\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    valueUpto = 0;\n                    valueLength = dv.count();\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    \n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i]));\n            }\n\n            final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              int nextValue;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  SortedNumericDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  nextIsSet = true;\n                  nextValue = sub.values.count();\n                  return true;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i]));\n            }\n\n            final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              long nextValue;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n              SortedNumericDocValuesSub current;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = current.values.valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  current = docIDMerger.next();\n                  if (current == null) {\n                    return false;\n                  }\n                  valueUpto = 0;\n                  valueLength = current.values.count();\n                  continue;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    \n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i]));\n            }\n\n            final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              int nextValue;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  SortedNumericDocValuesSub sub = docIDMerger.next();\n                  if (sub == null) {\n                    return false;\n                  }\n                  nextIsSet = true;\n                  nextValue = sub.values.count();\n                  return true;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            // We must make a new DocIDMerger for each iterator:\n            List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n            assert mergeState.docMaps.length == toMerge.size();\n            for(int i=0;i<toMerge.size();i++) {\n              subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], toMerge.get(i), mergeState.maxDocs[i]));\n            }\n\n            final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n            return new Iterator<Number>() {\n              long nextValue;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n              SortedNumericDocValuesSub current;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (hasNext() == false) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = current.values.valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  current = docIDMerger.next();\n                  if (current == null) {\n                    return false;\n                  }\n                  valueUpto = 0;\n                  valueLength = current.values.count();\n                  continue;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState,List[SortedNumericDocValues]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo fieldInfo, final MergeState mergeState, List<SortedNumericDocValues> toMerge) throws IOException {\n    final int numReaders = toMerge.size();\n    final SortedNumericDocValues dvs[] = toMerge.toArray(new SortedNumericDocValues[numReaders]);\n    \n    // step 3: add field\n    addSortedNumericField(fieldInfo,\n        // doc -> value count\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              int nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n\n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    nextIsSet = true;\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    nextValue = dv.count();\n                    docIDUpto++;\n                    return true;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        },\n        // values\n        new Iterable<Number>() {\n          @Override\n          public Iterator<Number> iterator() {\n            return new Iterator<Number>() {\n              int readerUpto = -1;\n              int docIDUpto;\n              long nextValue;\n              int currentMaxDoc;\n              Bits currentLiveDocs;\n              boolean nextIsSet;\n              int valueUpto;\n              int valueLength;\n\n              @Override\n              public boolean hasNext() {\n                return nextIsSet || setNext();\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public Number next() {\n                if (!hasNext()) {\n                  throw new NoSuchElementException();\n                }\n                assert nextIsSet;\n                nextIsSet = false;\n                return nextValue;\n              }\n\n              private boolean setNext() {\n                while (true) {\n                  if (readerUpto == numReaders) {\n                    return false;\n                  }\n                  \n                  if (valueUpto < valueLength) {\n                    nextValue = dvs[readerUpto].valueAt(valueUpto);\n                    valueUpto++;\n                    nextIsSet = true;\n                    return true;\n                  }\n\n                  if (docIDUpto == currentMaxDoc) {\n                    readerUpto++;\n                    if (readerUpto < numReaders) {\n                      currentLiveDocs = mergeState.liveDocs[readerUpto];\n                      currentMaxDoc = mergeState.maxDocs[readerUpto];\n                    }\n                    docIDUpto = 0;\n                    continue;\n                  }\n                  \n                  if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                    assert docIDUpto < currentMaxDoc;\n                    SortedNumericDocValues dv = dvs[readerUpto];\n                    dv.setDocument(docIDUpto);\n                    valueUpto = 0;\n                    valueLength = dv.count();\n                    docIDUpto++;\n                    continue;\n                  }\n\n                  docIDUpto++;\n                }\n              }\n            };\n          }\n        }\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ad30c6a479e764150a3316e57263319775f1df2":["9bb9a29a5e71a90295f175df8919802993142c9a","3d33e731a93d4b57e662ff094f64f94a745422d4"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9bb9a29a5e71a90295f175df8919802993142c9a","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["9bb9a29a5e71a90295f175df8919802993142c9a","0ad30c6a479e764150a3316e57263319775f1df2"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["c9fb5f46e264daf5ba3860defe623a89d202dd87","2131047ecceac64b54ba70feec3d26bbd7e483d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["9bb9a29a5e71a90295f175df8919802993142c9a","6d8200beeffd3fa5155855f4cb8a8a5e38aeff14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["9bb9a29a5e71a90295f175df8919802993142c9a","2131047ecceac64b54ba70feec3d26bbd7e483d7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["6d8200beeffd3fa5155855f4cb8a8a5e38aeff14"],"9bb9a29a5e71a90295f175df8919802993142c9a":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["9bb9a29a5e71a90295f175df8919802993142c9a"],"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}