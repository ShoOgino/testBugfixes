{"path":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","commits":[{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testMoreMerges().mjava","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n    Directory aux2 = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(aux2, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    writer.addIndexes(new Directory[] { aux });\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(6));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, aux2 });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n  }\n\n","sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n    Directory aux2 = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(aux2, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    writer.addIndexesNoOptimize(new Directory[] { aux });\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(6));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux, aux2 });\n    assertEquals(1025, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1025);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n    Directory aux2 = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(aux2, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    writer.addIndexes(new Directory[] { aux });\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(6));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, aux2 });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n  }\n\n","sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n    Directory aux2 = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(aux2, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    writer.addIndexes(new Directory[] { aux });\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(6));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, aux2 });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = new MockRAMDirectory();\n    // auxiliary directory\n    Directory aux = new MockRAMDirectory();\n    Directory aux2 = new MockRAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(aux2, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    writer.addIndexes(new Directory[] { aux });\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(6));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, aux2 });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n  }\n\n","sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n    Directory aux2 = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(aux2, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    writer.addIndexes(new Directory[] { aux });\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(6));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, aux2 });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory(random);\n    // auxiliary directory\n    Directory aux = newDirectory(random);\n    Directory aux2 = newDirectory(random);\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(aux2, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    writer.addIndexes(new Directory[] { aux });\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(6));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, aux2 });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = new MockRAMDirectory();\n    // auxiliary directory\n    Directory aux = new MockRAMDirectory();\n    Directory aux2 = new MockRAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(aux2, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    writer.addIndexes(new Directory[] { aux });\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(6));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, aux2 });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(aux2, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    writer.addIndexes(new Directory[] { aux });\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(6));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, aux2 });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory(random);\n    // auxiliary directory\n    Directory aux = newDirectory(random);\n    Directory aux2 = newDirectory(random);\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(aux2, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    writer.addIndexes(new Directory[] { aux });\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(6));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, aux2 });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(aux2, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    writer.addIndexes(new Directory[] { aux });\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(6));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, aux2 });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(aux2, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    writer.addIndexes(new Directory[] { aux });\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(6));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, aux2 });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n    Directory aux2 = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(aux2, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    writer.addIndexes(new Directory[] { aux });\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(6));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, aux2 });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd641edd796340315609425e9f70819e6d9ef0e","date":1295970051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","sourceNew":null,"sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a5add30a9848573adf40d6bee75fef89d67beb2","date":1323363846,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"/dev/null","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux, true);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(aux, dontMergeConfig);\n    for (int i = 0; i < 27; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + i));\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(aux);\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n    .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(aux2, dontMergeConfig);\n    for (int i = 0; i < 8; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + i));\n    }\n    writer.close();\n    reader = IndexReader.open(aux2);\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux, true);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(aux, dontMergeConfig);\n    for (int i = 0; i < 27; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + i));\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(aux);\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n    .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(aux2, dontMergeConfig);\n    for (int i = 0; i < 8; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + i));\n    }\n    writer.close();\n    reader = IndexReader.open(aux2);\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux, true);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(aux, dontMergeConfig);\n    for (int i = 0; i < 27; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + i));\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(aux);\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n    .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(aux2, dontMergeConfig);\n    for (int i = 0; i < 8; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + i));\n    }\n    writer.close();\n    reader = IndexReader.open(aux2);\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 27; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    reader = IndexReader.open(aux2, false);\n    for (int i = 0; i < 8; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMoreMerges().mjava","sourceNew":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux, true);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(aux, dontMergeConfig);\n    for (int i = 0; i < 27; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + i));\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(aux);\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n    .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(aux2, dontMergeConfig);\n    for (int i = 0; i < 8; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + i));\n    }\n    writer.close();\n    reader = IndexReader.open(aux2);\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","sourceOld":"  // case 5: tail segments, invariants not hold\n  public void testMoreMerges() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n    Directory aux2 = newDirectory();\n\n    setUpDirs(dir, aux, true);\n\n    IndexWriter writer = newWriter(\n        aux2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addIndexes(aux);\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(aux, dontMergeConfig);\n    for (int i = 0; i < 27; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + i));\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(aux);\n    assertEquals(3, reader.numDocs());\n    reader.close();\n\n    dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n    .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(aux2, dontMergeConfig);\n    for (int i = 0; i < 8; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + i));\n    }\n    writer.close();\n    reader = IndexReader.open(aux2);\n    assertEquals(22, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(6).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, aux2);\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n    aux2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["06584e6e98d592b34e1329b384182f368d2025e8"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["06584e6e98d592b34e1329b384182f368d2025e8","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"06584e6e98d592b34e1329b384182f368d2025e8":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"6a5add30a9848573adf40d6bee75fef89d67beb2":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"cfd641edd796340315609425e9f70819e6d9ef0e":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"c19f985e36a65cc969e8e564fe337a0d41512075":["cfd641edd796340315609425e9f70819e6d9ef0e"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c19f985e36a65cc969e8e564fe337a0d41512075"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","c19f985e36a65cc969e8e564fe337a0d41512075"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["06584e6e98d592b34e1329b384182f368d2025e8","6a5add30a9848573adf40d6bee75fef89d67beb2"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1f653cfcf159baeaafe5d01682a911e95bba4012"]},"commit2Childs":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["6a5add30a9848573adf40d6bee75fef89d67beb2"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"06584e6e98d592b34e1329b384182f368d2025e8":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6a5add30a9848573adf40d6bee75fef89d67beb2":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cfd641edd796340315609425e9f70819e6d9ef0e":["c19f985e36a65cc969e8e564fe337a0d41512075"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["06584e6e98d592b34e1329b384182f368d2025e8","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["cfd641edd796340315609425e9f70819e6d9ef0e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}