{"path":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#MMapIndexInput(String,RandomAccessFile,long,long,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#MMapIndexInput(String,RandomAccessFile,long,long,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#MMapIndexInput(String,RandomAccessFile,long,long,int).mjava","sourceNew":"    MMapIndexInput(String resourceDescription, RandomAccessFile raf, long offset, long length, int chunkSizePower) throws IOException {\n      super(resourceDescription);\n      this.length = length;\n      this.chunkSizePower = chunkSizePower;\n      this.chunkSize = 1L << chunkSizePower;\n      this.chunkSizeMask = chunkSize - 1L;\n      \n      if (chunkSizePower < 0 || chunkSizePower > 30)\n        throw new IllegalArgumentException(\"Invalid chunkSizePower used for ByteBuffer size: \" + chunkSizePower);\n      \n      if ((length >>> chunkSizePower) >= Integer.MAX_VALUE)\n        throw new IllegalArgumentException(\"RandomAccessFile too big for chunk size: \" + raf.toString());\n      \n      // we always allocate one more buffer, the last one may be a 0 byte one\n      final int nrBuffers = (int) (length >>> chunkSizePower) + 1;\n      \n      //System.out.println(\"length=\"+length+\", chunkSizePower=\" + chunkSizePower + \", chunkSizeMask=\" + chunkSizeMask + \", nrBuffers=\" + nrBuffers);\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      \n      long bufferStart = 0L;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (int) ( (length > (bufferStart + chunkSize))\n          ? chunkSize\n          : (length - bufferStart)\n        );\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY, offset + bufferStart, bufSize);\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","sourceOld":"    MMapIndexInput(String resourceDescription, RandomAccessFile raf, long offset, long length, int chunkSizePower) throws IOException {\n      super(resourceDescription);\n      this.length = length;\n      this.chunkSizePower = chunkSizePower;\n      this.chunkSize = 1L << chunkSizePower;\n      this.chunkSizeMask = chunkSize - 1L;\n      \n      if (chunkSizePower < 0 || chunkSizePower > 30)\n        throw new IllegalArgumentException(\"Invalid chunkSizePower used for ByteBuffer size: \" + chunkSizePower);\n      \n      if ((length >>> chunkSizePower) >= Integer.MAX_VALUE)\n        throw new IllegalArgumentException(\"RandomAccessFile too big for chunk size: \" + raf.toString());\n      \n      // we always allocate one more buffer, the last one may be a 0 byte one\n      final int nrBuffers = (int) (length >>> chunkSizePower) + 1;\n      \n      //System.out.println(\"length=\"+length+\", chunkSizePower=\" + chunkSizePower + \", chunkSizeMask=\" + chunkSizeMask + \", nrBuffers=\" + nrBuffers);\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      \n      long bufferStart = 0L;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (int) ( (length > (bufferStart + chunkSize))\n          ? chunkSize\n          : (length - bufferStart)\n        );\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY, offset + bufferStart, bufSize);\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","date":1347072117,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#MMapIndexInput(String,RandomAccessFile,long,long,int).mjava","sourceNew":null,"sourceOld":"    MMapIndexInput(String resourceDescription, RandomAccessFile raf, long offset, long length, int chunkSizePower) throws IOException {\n      super(resourceDescription);\n      this.length = length;\n      this.chunkSizePower = chunkSizePower;\n      this.chunkSize = 1L << chunkSizePower;\n      this.chunkSizeMask = chunkSize - 1L;\n      \n      if (chunkSizePower < 0 || chunkSizePower > 30)\n        throw new IllegalArgumentException(\"Invalid chunkSizePower used for ByteBuffer size: \" + chunkSizePower);\n      \n      if ((length >>> chunkSizePower) >= Integer.MAX_VALUE)\n        throw new IllegalArgumentException(\"RandomAccessFile too big for chunk size: \" + raf.toString());\n      \n      // we always allocate one more buffer, the last one may be a 0 byte one\n      final int nrBuffers = (int) (length >>> chunkSizePower) + 1;\n      \n      //System.out.println(\"length=\"+length+\", chunkSizePower=\" + chunkSizePower + \", chunkSizeMask=\" + chunkSizeMask + \", nrBuffers=\" + nrBuffers);\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      \n      long bufferStart = 0L;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (int) ( (length > (bufferStart + chunkSize))\n          ? chunkSize\n          : (length - bufferStart)\n        );\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY, offset + bufferStart, bufSize);\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"]},"commit2Childs":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}