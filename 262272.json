{"path":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#compress(int[],IntBuffer).mjava","commits":[{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#compress(int[],IntBuffer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/ForUtil#compress(int[],IntBuffer).mjava","sourceNew":"  /** Compress given int[] into Integer buffer, with For format\n   *\n   * @param data        uncompressed data\n   * @param size        num of ints to compress\n   * @param intBuffer   integer buffer to hold compressed data\n   * @return encoded block byte size\n   */\n  public static int compress(final int[] data, IntBuffer intBuffer) {\n    int numBits=getNumBits(data);\n    if (numBits == 0) {\n      return compressDuplicateBlock(data,intBuffer);\n    }\n \n    int size=data.length;\n    int encodedSize = (size*numBits+31)/32;\n\n    for (int i=0; i<size; ++i) {\n      encodeNormalValue(intBuffer,i,data[i], numBits);\n    }\n\n    return getHeader(encodedSize, numBits);\n  }\n\n","sourceOld":"  /** Compress given int[] into Integer buffer, with For format\n   *\n   * @param data        uncompressed data\n   * @param size        num of ints to compress\n   * @param intBuffer   integer buffer to hold compressed data\n   * @return encoded block byte size\n   */\n  public static int compress(final int[] data, IntBuffer intBuffer) {\n    int numBits=getNumBits(data);\n    if (numBits == 0) {\n      return compressDuplicateBlock(data,intBuffer);\n    }\n \n    int size=data.length;\n    int encodedSize = (size*numBits+31)/32;\n\n    for (int i=0; i<size; ++i) {\n      encodeNormalValue(intBuffer,i,data[i], numBits);\n    }\n\n    return getHeader(encodedSize, numBits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8081d5018e8846bf4080f2809432c759996e749f","date":1344206372,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#compress(int[],IntBuffer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#compress(int[],IntBuffer).mjava","sourceNew":"  /** Compress given int[] into Integer buffer, with For format\n   *\n   * @param data        uncompressed data\n   * @param intBuffer   integer buffer to hold compressed data\n   * @return the header for current block \n   */\n  public static int compress(final int[] data, IntBuffer intBuffer) {\n    int numBits = getNumBits(data);\n    if (numBits == 0) {\n      return compressDuplicateBlock(data, intBuffer);\n    }\n \n    int encodedSize = (blockSize*numBits+31)/32;\n\n    for (int i=0; i<blockSize; ++i) {\n      encodeNormalValue(intBuffer, i, data[i], numBits);\n    }\n\n    return getHeader(encodedSize, numBits);\n  }\n\n","sourceOld":"  /** Compress given int[] into Integer buffer, with For format\n   *\n   * @param data        uncompressed data\n   * @param size        num of ints to compress\n   * @param intBuffer   integer buffer to hold compressed data\n   * @return encoded block byte size\n   */\n  public static int compress(final int[] data, IntBuffer intBuffer) {\n    int numBits=getNumBits(data);\n    if (numBits == 0) {\n      return compressDuplicateBlock(data,intBuffer);\n    }\n \n    int size=data.length;\n    int encodedSize = (size*numBits+31)/32;\n\n    for (int i=0; i<size; ++i) {\n      encodeNormalValue(intBuffer,i,data[i], numBits);\n    }\n\n    return getHeader(encodedSize, numBits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b26a6a87f8d4abff54e2d160286e34f9418075b","date":1344342307,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#compress(int[],IntBuffer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#compress(int[],IntBuffer).mjava","sourceNew":"  /** Compress given int[] into Integer buffer, with For format\n   *\n   * @param data        uncompressed data\n   * @param intBuffer   integer buffer to hold compressed data\n   * @return the number of frame bits for current block \n   */\n  static int compress(final int[] data, IntBuffer intBuffer) {\n    int numBits = getNumBits(data);\n    if (numBits == 0) {\n      return compressDuplicateBlock(data, intBuffer);\n    }\n \n    for (int i=0; i<blockSize; ++i) {\n      encodeNormalValue(intBuffer, i, data[i], numBits);\n    }\n\n    return numBits;\n  }\n\n","sourceOld":"  /** Compress given int[] into Integer buffer, with For format\n   *\n   * @param data        uncompressed data\n   * @param intBuffer   integer buffer to hold compressed data\n   * @return the header for current block \n   */\n  public static int compress(final int[] data, IntBuffer intBuffer) {\n    int numBits = getNumBits(data);\n    if (numBits == 0) {\n      return compressDuplicateBlock(data, intBuffer);\n    }\n \n    int encodedSize = (blockSize*numBits+31)/32;\n\n    for (int i=0; i<blockSize; ++i) {\n      encodeNormalValue(intBuffer, i, data[i], numBits);\n    }\n\n    return getHeader(encodedSize, numBits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8a5b726b57b22e5a983b2de19b1f1d10edbeaaa","date":1344355287,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#compress(int[],IntBuffer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#compress(int[],IntBuffer).mjava","sourceNew":"  /** Compress given int[] into Integer buffer, with For format\n   *\n   * @param data        uncompressed data\n   * @param intBuffer   integer buffer to hold compressed data\n   * @return the number of frame bits for current block \n   */\n  static int compress(final int[] data, IntBuffer intBuffer) {\n    int numBits = getNumBits(data);\n    if (numBits == 0) {\n      return compressDuplicateBlock(data, intBuffer);\n    }\n \n    for (int i=0; i<blockSize; ++i) {\n      assert data[i] >= 0;\n      encodeNormalValue(intBuffer, i, data[i], numBits);\n    }\n\n    return numBits;\n  }\n\n","sourceOld":"  /** Compress given int[] into Integer buffer, with For format\n   *\n   * @param data        uncompressed data\n   * @param intBuffer   integer buffer to hold compressed data\n   * @return the number of frame bits for current block \n   */\n  static int compress(final int[] data, IntBuffer intBuffer) {\n    int numBits = getNumBits(data);\n    if (numBits == 0) {\n      return compressDuplicateBlock(data, intBuffer);\n    }\n \n    for (int i=0; i<blockSize; ++i) {\n      encodeNormalValue(intBuffer, i, data[i], numBits);\n    }\n\n    return numBits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"660e1649fe0b5350127e9a2f7c4c3a5861883bee","date":1344374774,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#compress(int[],IntBuffer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#compress(int[],IntBuffer).mjava","sourceNew":"  /** Compress given int[] into Integer buffer, with For format\n   *\n   * @param data        uncompressed data\n   * @param intBuffer   integer buffer to hold compressed data\n   * @return the header for the current block \n   */\n  static int compress(final int[] data, IntBuffer intBuffer) {\n    int numBits = getNumBits(data);\n    if (numBits == 0) {\n      return compressDuplicateBlock(data, intBuffer);\n    }\n \n    for (int i=0; i<blockSize; ++i) {\n      assert data[i] >= 0;\n      encodeNormalValue(intBuffer, i, data[i], numBits);\n    }\n\n    return numBits;\n  }\n\n","sourceOld":"  /** Compress given int[] into Integer buffer, with For format\n   *\n   * @param data        uncompressed data\n   * @param intBuffer   integer buffer to hold compressed data\n   * @return the number of frame bits for current block \n   */\n  static int compress(final int[] data, IntBuffer intBuffer) {\n    int numBits = getNumBits(data);\n    if (numBits == 0) {\n      return compressDuplicateBlock(data, intBuffer);\n    }\n \n    for (int i=0; i<blockSize; ++i) {\n      assert data[i] >= 0;\n      encodeNormalValue(intBuffer, i, data[i], numBits);\n    }\n\n    return numBits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09bba736cce2e2d1f3d853af49cbc7d87b6361fa","date":1344466978,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#compress(int[],IntBuffer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#compress(int[],IntBuffer).mjava","sourceNew":"  /** Compress given int[] into Integer buffer, with For format\n   *\n   * @param data        uncompressed data\n   * @param intBuffer   integer buffer to hold compressed data\n   * @return the header for the current block \n   */\n  static int compress(final int[] data, IntBuffer intBuffer) {\n    int numBits = getNumBits(data);\n    if (numBits == 0) {\n      return compressDuplicateBlock(data, intBuffer);\n    }\n \n    for (int i=0; i<BLOCK_SIZE; ++i) {\n      assert data[i] >= 0;\n      encodeNormalValue(intBuffer, i, data[i], numBits);\n    }\n\n    return numBits;\n  }\n\n","sourceOld":"  /** Compress given int[] into Integer buffer, with For format\n   *\n   * @param data        uncompressed data\n   * @param intBuffer   integer buffer to hold compressed data\n   * @return the header for the current block \n   */\n  static int compress(final int[] data, IntBuffer intBuffer) {\n    int numBits = getNumBits(data);\n    if (numBits == 0) {\n      return compressDuplicateBlock(data, intBuffer);\n    }\n \n    for (int i=0; i<blockSize; ++i) {\n      assert data[i] >= 0;\n      encodeNormalValue(intBuffer, i, data[i], numBits);\n    }\n\n    return numBits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#compress(int[],IntBuffer).mjava","sourceNew":null,"sourceOld":"  /** Compress given int[] into Integer buffer, with For format\n   *\n   * @param data        uncompressed data\n   * @param intBuffer   integer buffer to hold compressed data\n   * @return the header for the current block \n   */\n  static int compress(final int[] data, IntBuffer intBuffer) {\n    int numBits = getNumBits(data);\n    if (numBits == 0) {\n      return compressDuplicateBlock(data, intBuffer);\n    }\n \n    for (int i=0; i<BLOCK_SIZE; ++i) {\n      assert data[i] >= 0;\n      encodeNormalValue(intBuffer, i, data[i], numBits);\n    }\n\n    return numBits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"660e1649fe0b5350127e9a2f7c4c3a5861883bee":["f8a5b726b57b22e5a983b2de19b1f1d10edbeaaa"],"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1b26a6a87f8d4abff54e2d160286e34f9418075b":["8081d5018e8846bf4080f2809432c759996e749f"],"8081d5018e8846bf4080f2809432c759996e749f":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"09bba736cce2e2d1f3d853af49cbc7d87b6361fa":["660e1649fe0b5350127e9a2f7c4c3a5861883bee"],"f8a5b726b57b22e5a983b2de19b1f1d10edbeaaa":["1b26a6a87f8d4abff54e2d160286e34f9418075b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["09bba736cce2e2d1f3d853af49cbc7d87b6361fa"]},"commit2Childs":{"660e1649fe0b5350127e9a2f7c4c3a5861883bee":["09bba736cce2e2d1f3d853af49cbc7d87b6361fa"],"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["8081d5018e8846bf4080f2809432c759996e749f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1b26a6a87f8d4abff54e2d160286e34f9418075b":["f8a5b726b57b22e5a983b2de19b1f1d10edbeaaa"],"8081d5018e8846bf4080f2809432c759996e749f":["1b26a6a87f8d4abff54e2d160286e34f9418075b"],"09bba736cce2e2d1f3d853af49cbc7d87b6361fa":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"f8a5b726b57b22e5a983b2de19b1f1d10edbeaaa":["660e1649fe0b5350127e9a2f7c4c3a5861883bee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}