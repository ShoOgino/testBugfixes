{"path":"lucene/core/src/java/org/apache/lucene/search/TermRangeTermsEnum#TermRangeTermsEnum(TermsEnum,BytesRef,BytesRef,boolean,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermRangeTermsEnum#TermRangeTermsEnum(TermsEnum,BytesRef,BytesRef,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeTermsEnum#TermRangeTermsEnum(TermsEnum,BytesRef,BytesRef,boolean,boolean).mjava","sourceNew":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param tenum\n   *          TermsEnum to filter\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * \n   * @throws IOException\n   */\n  public TermRangeTermsEnum(TermsEnum tenum, BytesRef lowerTerm, BytesRef upperTerm, \n    boolean includeLower, boolean includeUpper) throws IOException {\n    super(tenum);\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (lowerTerm == null) {\n      this.lowerBytesRef = new BytesRef();\n      this.includeLower = true;\n    } else {\n      this.lowerBytesRef = lowerTerm;\n      this.includeLower = includeLower;\n    }\n\n    if (upperTerm == null) {\n      this.includeUpper = true;\n      upperBytesRef = null;\n    } else {\n      this.includeUpper = includeUpper;\n      upperBytesRef = upperTerm;\n    }\n\n    setInitialSeekTerm(lowerBytesRef);\n    termComp = getComparator();\n  }\n\n","sourceOld":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param tenum\n   *          TermsEnum to filter\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * \n   * @throws IOException\n   */\n  public TermRangeTermsEnum(TermsEnum tenum, BytesRef lowerTerm, BytesRef upperTerm, \n    boolean includeLower, boolean includeUpper) throws IOException {\n    super(tenum);\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (lowerTerm == null) {\n      this.lowerBytesRef = new BytesRef();\n      this.includeLower = true;\n    } else {\n      this.lowerBytesRef = lowerTerm;\n      this.includeLower = includeLower;\n    }\n\n    if (upperTerm == null) {\n      this.includeUpper = true;\n      upperBytesRef = null;\n    } else {\n      this.includeUpper = includeUpper;\n      upperBytesRef = upperTerm;\n    }\n\n    setInitialSeekTerm(lowerBytesRef);\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermRangeTermsEnum#TermRangeTermsEnum(TermsEnum,BytesRef,BytesRef,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermRangeTermsEnum#TermRangeTermsEnum(TermsEnum,BytesRef,BytesRef,boolean,boolean).mjava","sourceNew":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param tenum\n   *          TermsEnum to filter\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   */\n  public TermRangeTermsEnum(TermsEnum tenum, BytesRef lowerTerm, BytesRef upperTerm, \n    boolean includeLower, boolean includeUpper) {\n    super(tenum);\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (lowerTerm == null) {\n      this.lowerBytesRef = new BytesRef();\n      this.includeLower = true;\n    } else {\n      this.lowerBytesRef = lowerTerm;\n      this.includeLower = includeLower;\n    }\n\n    if (upperTerm == null) {\n      this.includeUpper = true;\n      upperBytesRef = null;\n    } else {\n      this.includeUpper = includeUpper;\n      upperBytesRef = upperTerm;\n    }\n\n    setInitialSeekTerm(lowerBytesRef);\n    termComp = getComparator();\n  }\n\n","sourceOld":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param tenum\n   *          TermsEnum to filter\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * \n   * @throws IOException\n   */\n  public TermRangeTermsEnum(TermsEnum tenum, BytesRef lowerTerm, BytesRef upperTerm, \n    boolean includeLower, boolean includeUpper) throws IOException {\n    super(tenum);\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (lowerTerm == null) {\n      this.lowerBytesRef = new BytesRef();\n      this.includeLower = true;\n    } else {\n      this.lowerBytesRef = lowerTerm;\n      this.includeLower = includeLower;\n    }\n\n    if (upperTerm == null) {\n      this.includeUpper = true;\n      upperBytesRef = null;\n    } else {\n      this.includeUpper = includeUpper;\n      upperBytesRef = upperTerm;\n    }\n\n    setInitialSeekTerm(lowerBytesRef);\n    termComp = getComparator();\n  }\n\n","bugFix":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermRangeTermsEnum#TermRangeTermsEnum(TermsEnum,BytesRef,BytesRef,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermRangeTermsEnum#TermRangeTermsEnum(TermsEnum,BytesRef,BytesRef,boolean,boolean).mjava","sourceNew":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param tenum\n   *          TermsEnum to filter\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   */\n  public TermRangeTermsEnum(TermsEnum tenum, BytesRef lowerTerm, BytesRef upperTerm, \n    boolean includeLower, boolean includeUpper) {\n    super(tenum);\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (lowerTerm == null) {\n      this.lowerBytesRef = new BytesRef();\n      this.includeLower = true;\n    } else {\n      this.lowerBytesRef = lowerTerm;\n      this.includeLower = includeLower;\n    }\n\n    if (upperTerm == null) {\n      this.includeUpper = true;\n      upperBytesRef = null;\n    } else {\n      this.includeUpper = includeUpper;\n      upperBytesRef = upperTerm;\n    }\n\n    setInitialSeekTerm(lowerBytesRef);\n    termComp = getComparator();\n  }\n\n","sourceOld":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param tenum\n   *          TermsEnum to filter\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * \n   * @throws IOException\n   */\n  public TermRangeTermsEnum(TermsEnum tenum, BytesRef lowerTerm, BytesRef upperTerm, \n    boolean includeLower, boolean includeUpper) throws IOException {\n    super(tenum);\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (lowerTerm == null) {\n      this.lowerBytesRef = new BytesRef();\n      this.includeLower = true;\n    } else {\n      this.lowerBytesRef = lowerTerm;\n      this.includeLower = includeLower;\n    }\n\n    if (upperTerm == null) {\n      this.includeUpper = true;\n      upperBytesRef = null;\n    } else {\n      this.includeUpper = includeUpper;\n      upperBytesRef = upperTerm;\n    }\n\n    setInitialSeekTerm(lowerBytesRef);\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermRangeTermsEnum#TermRangeTermsEnum(TermsEnum,BytesRef,BytesRef,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermRangeTermsEnum#TermRangeTermsEnum(TermsEnum,BytesRef,BytesRef,boolean,boolean).mjava","sourceNew":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param tenum\n   *          TermsEnum to filter\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   */\n  public TermRangeTermsEnum(TermsEnum tenum, BytesRef lowerTerm, BytesRef upperTerm, \n    boolean includeLower, boolean includeUpper) {\n    super(tenum);\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (lowerTerm == null) {\n      this.lowerBytesRef = new BytesRef();\n      this.includeLower = true;\n    } else {\n      this.lowerBytesRef = lowerTerm;\n      this.includeLower = includeLower;\n    }\n\n    if (upperTerm == null) {\n      this.includeUpper = true;\n      upperBytesRef = null;\n    } else {\n      this.includeUpper = includeUpper;\n      upperBytesRef = upperTerm;\n    }\n\n    setInitialSeekTerm(lowerBytesRef);\n  }\n\n","sourceOld":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param tenum\n   *          TermsEnum to filter\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   */\n  public TermRangeTermsEnum(TermsEnum tenum, BytesRef lowerTerm, BytesRef upperTerm, \n    boolean includeLower, boolean includeUpper) {\n    super(tenum);\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (lowerTerm == null) {\n      this.lowerBytesRef = new BytesRef();\n      this.includeLower = true;\n    } else {\n      this.lowerBytesRef = lowerTerm;\n      this.includeLower = includeLower;\n    }\n\n    if (upperTerm == null) {\n      this.includeUpper = true;\n      upperBytesRef = null;\n    } else {\n      this.includeUpper = includeUpper;\n      upperBytesRef = upperTerm;\n    }\n\n    setInitialSeekTerm(lowerBytesRef);\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermRangeTermsEnum#TermRangeTermsEnum(TermsEnum,BytesRef,BytesRef,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param tenum\n   *          TermsEnum to filter\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   */\n  public TermRangeTermsEnum(TermsEnum tenum, BytesRef lowerTerm, BytesRef upperTerm, \n    boolean includeLower, boolean includeUpper) {\n    super(tenum);\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (lowerTerm == null) {\n      this.lowerBytesRef = new BytesRef();\n      this.includeLower = true;\n    } else {\n      this.lowerBytesRef = lowerTerm;\n      this.includeLower = includeLower;\n    }\n\n    if (upperTerm == null) {\n      this.includeUpper = true;\n      upperBytesRef = null;\n    } else {\n      this.includeUpper = includeUpper;\n      upperBytesRef = upperTerm;\n    }\n\n    setInitialSeekTerm(lowerBytesRef);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermRangeTermsEnum#TermRangeTermsEnum(TermsEnum,BytesRef,BytesRef,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param tenum\n   *          TermsEnum to filter\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   */\n  public TermRangeTermsEnum(TermsEnum tenum, BytesRef lowerTerm, BytesRef upperTerm, \n    boolean includeLower, boolean includeUpper) {\n    super(tenum);\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (lowerTerm == null) {\n      this.lowerBytesRef = new BytesRef();\n      this.includeLower = true;\n    } else {\n      this.lowerBytesRef = lowerTerm;\n      this.includeLower = includeLower;\n    }\n\n    if (upperTerm == null) {\n      this.includeUpper = true;\n      upperBytesRef = null;\n    } else {\n      this.includeUpper = includeUpper;\n      upperBytesRef = upperTerm;\n    }\n\n    setInitialSeekTerm(lowerBytesRef);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","3e8715d826e588419327562287d5d6a8040d63d6"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3e8715d826e588419327562287d5d6a8040d63d6":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e8715d826e588419327562287d5d6a8040d63d6"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}