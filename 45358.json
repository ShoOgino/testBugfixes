{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ThreadedEntityProcessorWrapper#nextRow().mjava","commits":[{"id":"65f4e997b946a4eadce22b758749046a63ba2eff","date":1263282580,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ThreadedEntityProcessorWrapper#nextRow().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if (rowcache != null) {\n      return getFromRowCache();\n    }\n    while (true) {\n      Map<String, Object> arow = null;\n      synchronized (delegate) {\n        if(entityRunner.entityEnded.get()) return null;\n        try {\n          arow = delegate.nextRow();\n        } catch (Exception e) {\n          if (ABORT.equals(onError)) {\n            wrapAndThrow(SEVERE, e);\n          } else {\n            //SKIP is not really possible. If this calls the nextRow() again the Entityprocessor would be in an inconisttent state\n            LOG.error(\"Exception in entity : \" + entityName, e);\n            return null;\n          }\n        }\n        LOG.info(\"arow : \"+arow);\n        if(arow == null) entityRunner.entityEnded.set(true);\n      }\n      if (arow == null) {\n        return null;\n      } else {\n        arow = applyTransformer(arow);\n        if (arow != null) {\n          delegate.postTransform(arow);\n          return arow;\n        }\n      }\n    } \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7ec0d5e9105277591879116e94248c4c5b9fb85d","7ec0d5e9105277591879116e94248c4c5b9fb85d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f6f8ed32404460038e008343a859665a79070baf","date":1263298922,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ThreadedEntityProcessorWrapper#nextRow().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ThreadedEntityProcessorWrapper#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if (rowcache != null) {\n      return getFromRowCache();\n    }\n    while (true) {\n      Map<String, Object> arow = null;\n      synchronized (delegate) {\n        if(entityRunner.entityEnded.get()) return null;\n        try {\n          arow = delegate.nextRow();\n        } catch (Exception e) {\n          if (ABORT.equals(onError)) {\n            wrapAndThrow(SEVERE, e);\n          } else {\n            //SKIP is not really possible. If this calls the nextRow() again the Entityprocessor would be in an inconistent state\n            LOG.error(\"Exception in entity : \" + entityName, e);\n            return null;\n          }\n        }\n        LOG.info(\"arow : \"+arow);\n        if(arow == null) entityRunner.entityEnded.set(true);\n      }\n      if (arow == null) {\n        return null;\n      } else {\n        arow = applyTransformer(arow);\n        if (arow != null) {\n          delegate.postTransform(arow);\n          return arow;\n        }\n      }\n    } \n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if (rowcache != null) {\n      return getFromRowCache();\n    }\n    while (true) {\n      Map<String, Object> arow = null;\n      synchronized (delegate) {\n        if(entityRunner.entityEnded.get()) return null;\n        try {\n          arow = delegate.nextRow();\n        } catch (Exception e) {\n          if (ABORT.equals(onError)) {\n            wrapAndThrow(SEVERE, e);\n          } else {\n            //SKIP is not really possible. If this calls the nextRow() again the Entityprocessor would be in an inconisttent state\n            LOG.error(\"Exception in entity : \" + entityName, e);\n            return null;\n          }\n        }\n        LOG.info(\"arow : \"+arow);\n        if(arow == null) entityRunner.entityEnded.set(true);\n      }\n      if (arow == null) {\n        return null;\n      } else {\n        arow = applyTransformer(arow);\n        if (arow != null) {\n          delegate.postTransform(arow);\n          return arow;\n        }\n      }\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ThreadedEntityProcessorWrapper#nextRow().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ThreadedEntityProcessorWrapper#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if (rowcache != null) {\n      return getFromRowCache();\n    }\n    while (true) {\n      Map<String, Object> arow = null;\n      synchronized (delegate) {\n        if(entityRunner.entityEnded.get()) return null;\n        try {\n          arow = delegate.nextRow();\n        } catch (Exception e) {\n          if (ABORT.equals(onError)) {\n            wrapAndThrow(SEVERE, e);\n          } else {\n            //SKIP is not really possible. If this calls the nextRow() again the Entityprocessor would be in an inconistent state\n            LOG.error(\"Exception in entity : \" + entityName, e);\n            return null;\n          }\n        }\n        LOG.info(\"arow : \"+arow);\n        if(arow == null) entityRunner.entityEnded.set(true);\n      }\n      if (arow == null) {\n        return null;\n      } else {\n        arow = applyTransformer(arow);\n        if (arow != null) {\n          delegate.postTransform(arow);\n          return arow;\n        }\n      }\n    } \n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if (rowcache != null) {\n      return getFromRowCache();\n    }\n    while (true) {\n      Map<String, Object> arow = null;\n      synchronized (delegate) {\n        if(entityRunner.entityEnded.get()) return null;\n        try {\n          arow = delegate.nextRow();\n        } catch (Exception e) {\n          if (ABORT.equals(onError)) {\n            wrapAndThrow(SEVERE, e);\n          } else {\n            //SKIP is not really possible. If this calls the nextRow() again the Entityprocessor would be in an inconistent state\n            LOG.error(\"Exception in entity : \" + entityName, e);\n            return null;\n          }\n        }\n        LOG.info(\"arow : \"+arow);\n        if(arow == null) entityRunner.entityEnded.set(true);\n      }\n      if (arow == null) {\n        return null;\n      } else {\n        arow = applyTransformer(arow);\n        if (arow != null) {\n          delegate.postTransform(arow);\n          return arow;\n        }\n      }\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"65f4e997b946a4eadce22b758749046a63ba2eff":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["f6f8ed32404460038e008343a859665a79070baf"],"f6f8ed32404460038e008343a859665a79070baf":["65f4e997b946a4eadce22b758749046a63ba2eff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"65f4e997b946a4eadce22b758749046a63ba2eff":["f6f8ed32404460038e008343a859665a79070baf"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["65f4e997b946a4eadce22b758749046a63ba2eff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"f6f8ed32404460038e008343a859665a79070baf":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}