{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstTargetArc(Arc[T],Arc[T]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstTargetArc(Arc[T],Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstTargetArc(Arc[T],Arc[T]).mjava","sourceNew":"  /**\n   * Follow the <code>follow</code> arc and read the first arc of its target;\n   * this changes the provided <code>arc</code> (2nd arg) in-place and returns\n   * it.\n   * \n   * @return Returns the second argument (<code>arc</code>).\n   */\n  public Arc<T> readFirstTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //int pos = address;\n    //System.out.println(\"    readFirstTarget follow.target=\" + follow.target + \" isFinal=\" + follow.isFinal());\n    if (follow.isFinal()) {\n      // Insert \"fake\" final first arc:\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_FINAL_ARC;\n      if (follow.target <= 0) {\n        arc.flags |= BIT_LAST_ARC;\n      } else {\n        arc.node = follow.target;\n        // NOTE: nextArc is a node (not an address!) in this case:\n        arc.nextArc = follow.target;\n      }\n      arc.target = FINAL_END_NODE;\n      //System.out.println(\"    insert isFinal; nextArc=\" + follow.target + \" isLast=\" + arc.isLast() + \" output=\" + outputs.outputToString(arc.output));\n      return arc;\n    } else {\n      return readFirstRealTargetArc(follow.target, arc, getBytesReader(0));\n    }\n  }\n\n","sourceOld":"  /**\n   * Follow the <code>follow</code> arc and read the first arc of its target;\n   * this changes the provided <code>arc</code> (2nd arg) in-place and returns\n   * it.\n   * \n   * @return Returns the second argument (<code>arc</code>).\n   */\n  public Arc<T> readFirstTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //int pos = address;\n    //System.out.println(\"    readFirstTarget follow.target=\" + follow.target + \" isFinal=\" + follow.isFinal());\n    if (follow.isFinal()) {\n      // Insert \"fake\" final first arc:\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_FINAL_ARC;\n      if (follow.target <= 0) {\n        arc.flags |= BIT_LAST_ARC;\n      } else {\n        arc.node = follow.target;\n        // NOTE: nextArc is a node (not an address!) in this case:\n        arc.nextArc = follow.target;\n      }\n      arc.target = FINAL_END_NODE;\n      //System.out.println(\"    insert isFinal; nextArc=\" + follow.target + \" isLast=\" + arc.isLast() + \" output=\" + outputs.outputToString(arc.output));\n      return arc;\n    } else {\n      return readFirstRealTargetArc(follow.target, arc, getBytesReader(0));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8","date":1339238489,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstTargetArc(Arc[T],Arc[T]).mjava","sourceNew":"  /**\n   * Follow the <code>follow</code> arc and read the first arc of its target;\n   * this changes the provided <code>arc</code> (2nd arg) in-place and returns\n   * it.\n   * \n   * @return Returns the second argument (<code>arc</code>).\n   */\n  public Arc<T> readFirstTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //int pos = address;\n    //System.out.println(\"    readFirstTarget follow.target=\" + follow.target + \" isFinal=\" + follow.isFinal());\n    if (follow.isFinal()) {\n      // Insert \"fake\" final first arc:\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_FINAL_ARC;\n      if (follow.target <= 0) {\n        arc.flags |= BIT_LAST_ARC;\n      } else {\n        arc.node = follow.target;\n        // NOTE: nextArc is a node (not an address!) in this case:\n        arc.nextArc = follow.target;\n      }\n      arc.target = FINAL_END_NODE;\n      //System.out.println(\"    insert isFinal; nextArc=\" + follow.target + \" isLast=\" + arc.isLast() + \" output=\" + outputs.outputToString(arc.output));\n      return arc;\n    } else {\n      return readFirstRealTargetArc(follow.target, arc, in);\n    }\n  }\n\n","sourceOld":"  /**\n   * Follow the <code>follow</code> arc and read the first arc of its target;\n   * this changes the provided <code>arc</code> (2nd arg) in-place and returns\n   * it.\n   * \n   * @return Returns the second argument (<code>arc</code>).\n   */\n  public Arc<T> readFirstTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //int pos = address;\n    //System.out.println(\"    readFirstTarget follow.target=\" + follow.target + \" isFinal=\" + follow.isFinal());\n    if (follow.isFinal()) {\n      // Insert \"fake\" final first arc:\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_FINAL_ARC;\n      if (follow.target <= 0) {\n        arc.flags |= BIT_LAST_ARC;\n      } else {\n        arc.node = follow.target;\n        // NOTE: nextArc is a node (not an address!) in this case:\n        arc.nextArc = follow.target;\n      }\n      arc.target = FINAL_END_NODE;\n      //System.out.println(\"    insert isFinal; nextArc=\" + follow.target + \" isLast=\" + arc.isLast() + \" output=\" + outputs.outputToString(arc.output));\n      return arc;\n    } else {\n      return readFirstRealTargetArc(follow.target, arc, getBytesReader(0));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8"]},"commit2Childs":{"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}