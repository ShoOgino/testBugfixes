{"path":"lucene/src/test/org/apache/lucene/index/TestParallelAtomicReader#testQueries().mjava","commits":[{"id":"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b","date":1328624680,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelAtomicReader#testQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testQueries().mjava","sourceNew":"  public void testQueries() throws Exception {\n    single = single(random);\n    parallel = parallel(random);\n    \n    queryTest(new TermQuery(new Term(\"f1\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f1\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v2\")));\n\n    BooleanQuery bq1 = new BooleanQuery();\n    bq1.add(new TermQuery(new Term(\"f1\", \"v1\")), Occur.MUST);\n    bq1.add(new TermQuery(new Term(\"f4\", \"v1\")), Occur.MUST);\n    queryTest(bq1);\n    \n    single.getIndexReader().close(); single = null;\n    parallel.getIndexReader().close(); parallel = null;\n    dir.close(); dir = null;\n    dir1.close(); dir1 = null;\n    dir2.close(); dir2 = null;\n  }\n\n","sourceOld":"  public void testQueries() throws Exception {\n    queryTest(new TermQuery(new Term(\"f1\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f1\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v2\")));\n\n    BooleanQuery bq1 = new BooleanQuery();\n    bq1.add(new TermQuery(new Term(\"f1\", \"v1\")), Occur.MUST);\n    bq1.add(new TermQuery(new Term(\"f4\", \"v1\")), Occur.MUST);\n    queryTest(bq1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08b385e33541f6749e71618c9ab36fad908a7ed0","date":1328629771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelAtomicReader#testQueries().mjava","sourceNew":"  public void testQueries() throws Exception {\n    queryTest(new TermQuery(new Term(\"f1\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f1\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v2\")));\n\n    BooleanQuery bq1 = new BooleanQuery();\n    bq1.add(new TermQuery(new Term(\"f1\", \"v1\")), Occur.MUST);\n    bq1.add(new TermQuery(new Term(\"f4\", \"v1\")), Occur.MUST);\n    queryTest(bq1);\n  }\n\n","sourceOld":"  public void testQueries() throws Exception {\n    single = single(random);\n    parallel = parallel(random);\n    \n    queryTest(new TermQuery(new Term(\"f1\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f1\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v2\")));\n\n    BooleanQuery bq1 = new BooleanQuery();\n    bq1.add(new TermQuery(new Term(\"f1\", \"v1\")), Occur.MUST);\n    bq1.add(new TermQuery(new Term(\"f4\", \"v1\")), Occur.MUST);\n    queryTest(bq1);\n    \n    single.getIndexReader().close(); single = null;\n    parallel.getIndexReader().close(); parallel = null;\n    dir.close(); dir = null;\n    dir1.close(); dir1 = null;\n    dir2.close(); dir2 = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08b385e33541f6749e71618c9ab36fad908a7ed0":["9ecf541c11d0df215aa1ea806f826d88fb9b5b9b"],"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08b385e33541f6749e71618c9ab36fad908a7ed0"]},"commit2Childs":{"08b385e33541f6749e71618c9ab36fad908a7ed0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b":["08b385e33541f6749e71618c9ab36fad908a7ed0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ecf541c11d0df215aa1ea806f826d88fb9b5b9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}