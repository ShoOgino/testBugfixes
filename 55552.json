{"path":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","commits":[{"id":"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1","date":1423220905,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","pathOld":"/dev/null","sourceNew":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (op.getStr(\"lib\", null) == null) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          SolrCore.createInstance(clz, expected, expected.getSimpleName(), req.getCore());\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","sourceNew":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (clz == null) return true;\n      if ( !\"true\".equals(String.valueOf(op.getStr(\"runtimeLib\", null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), expected, clz, \"\");\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","sourceOld":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (op.getStr(\"lib\", null) == null) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          SolrCore.createInstance(clz, expected, expected.getSimpleName(), req.getCore());\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","sourceNew":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (clz == null) return true;\n      if (!\"true\".equals(String.valueOf(op.getStr(\"runtimeLib\", null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), expected, clz, \"\");\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","sourceOld":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (clz == null) return true;\n      if ( !\"true\".equals(String.valueOf(op.getStr(\"runtimeLib\", null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), expected, clz, \"\");\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","sourceNew":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (clz == null) return true;\n      if (!\"true\".equals(String.valueOf(op.getStr(\"runtimeLib\", null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), expected, clz, \"\");\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","sourceOld":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (op.getStr(\"lib\", null) == null) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          SolrCore.createInstance(clz, expected, expected.getSimpleName(), req.getCore());\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","sourceNew":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (clz == null) return true;\n      if (!\"true\".equals(String.valueOf(op.getStr(RuntimeLib.TYPE, null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), expected, clz, \"\");\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","sourceOld":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (clz == null) return true;\n      if (!\"true\".equals(String.valueOf(op.getStr(\"runtimeLib\", null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), expected, clz, \"\");\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74","date":1563736916,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,SolrConfig.SolrPluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","sourceNew":"    private boolean verifyClass(CommandOperation op, String clz, SolrConfig.SolrPluginInfo pluginMeta) {\n      if (clz == null) return true;\n      PluginInfo info = new PluginInfo(pluginMeta.getCleanTag(), op.getDataMap());\n      if(info.getRuntimeLibType() != null && !RuntimeLib.isEnabled()){\n        op.addError(\"node not started with enable.runtime.lib=true\");\n        return false;\n      }\n\n\n      if ( !\"true\".equals(String.valueOf(op.getStr(RuntimeLib.TYPE, null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), pluginMeta.clazz, clz, \"\");\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","sourceOld":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (clz == null) return true;\n      if (!\"true\".equals(String.valueOf(op.getStr(RuntimeLib.TYPE, null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), expected, clz, \"\");\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,SolrConfig.SolrPluginInfo).mjava","sourceNew":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (clz == null) return true;\n      if (!\"true\".equals(String.valueOf(op.getStr(\"runtimeLib\", null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), expected, clz, \"\");\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","sourceOld":"    private boolean verifyClass(CommandOperation op, String clz, SolrConfig.SolrPluginInfo pluginMeta) {\n      if (clz == null) return true;\n      PluginInfo info = new PluginInfo(pluginMeta.getCleanTag(), op.getDataMap());\n\n      if (info.isRuntimePlugin() && !RuntimeLib.isEnabled()) {\n        op.addError(\"node not started with enable.runtime.lib=true\");\n        return false;\n      }\n\n      if (!\"true\".equals(String.valueOf(op.getStr(RuntimeLib.TYPE, null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), pluginMeta.clazz, clz, \"\");\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","pathOld":"/dev/null","sourceNew":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (clz == null) return true;\n      if (!\"true\".equals(String.valueOf(op.getStr(\"runtimeLib\", null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), expected, clz, \"\");\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","sourceNew":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (clz == null) return true;\n      if (!\"true\".equals(String.valueOf(op.getStr(\"runtimeLib\", null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), expected, clz, \"\");\n        } catch (Exception e) {\n          log.error(\"Error checking plugin : \", e);\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","sourceOld":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (clz == null) return true;\n      if (!\"true\".equals(String.valueOf(op.getStr(\"runtimeLib\", null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), expected, clz, \"\");\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60c716cf818aff6857d8490cd0fb8b5aa432408f","date":1577074826,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","sourceNew":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (clz == null) return true;\n      if (!\"true\".equals(String.valueOf(op.getStr(\"runtimeLib\", null)))) {\n        PluginInfo info = new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap());\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          if(expected == Expressible.class) {\n            SolrResourceLoader resourceLoader = info.pkgName == null ?\n                req.getCore().getResourceLoader() :\n                req.getCore().getResourceLoader(info.pkgName);\n            resourceLoader.findClass(info.className, expected);\n          } else {\n            req.getCore().createInitInstance(info, expected, clz, \"\");\n          }\n        } catch (Exception e) {\n          log.error(\"Error checking plugin : \", e);\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","sourceOld":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (clz == null) return true;\n      if (!\"true\".equals(String.valueOf(op.getStr(\"runtimeLib\", null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), expected, clz, \"\");\n        } catch (Exception e) {\n          log.error(\"Error checking plugin : \", e);\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","date":1577276097,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","sourceNew":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (clz == null) return true;\n      if (!\"true\".equals(String.valueOf(op.getStr(\"runtimeLib\", null)))) {\n        PluginInfo info = new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap());\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          if(expected == Expressible.class) {\n            SolrResourceLoader resourceLoader = info.pkgName == null ?\n                req.getCore().getResourceLoader() :\n                req.getCore().getResourceLoader(info.pkgName);\n            resourceLoader.findClass(info.className, expected);\n          } else {\n            req.getCore().createInitInstance(info, expected, clz, \"\");\n          }\n        } catch (Exception e) {\n          log.error(\"Error checking plugin : \", e);\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","sourceOld":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (clz == null) return true;\n      if (!\"true\".equals(String.valueOf(op.getStr(\"runtimeLib\", null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), expected, clz, \"\");\n        } catch (Exception e) {\n          log.error(\"Error checking plugin : \", e);\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","sourceNew":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (clz == null) return true;\n      if (!\"true\".equals(String.valueOf(op.getStr(\"runtimeLib\", null)))) {\n        PluginInfo info = new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap());\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          if(expected == Expressible.class) {\n            @SuppressWarnings(\"resource\")\n            SolrResourceLoader resourceLoader = info.pkgName == null ?\n                req.getCore().getResourceLoader() :\n                req.getCore().getResourceLoader(info.pkgName);\n            resourceLoader.findClass(info.className, expected);\n          } else {\n            req.getCore().createInitInstance(info, expected, clz, \"\");\n          }\n        } catch (Exception e) {\n          log.error(\"Error checking plugin : \", e);\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","sourceOld":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (clz == null) return true;\n      if (!\"true\".equals(String.valueOf(op.getStr(\"runtimeLib\", null)))) {\n        PluginInfo info = new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap());\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          if(expected == Expressible.class) {\n            SolrResourceLoader resourceLoader = info.pkgName == null ?\n                req.getCore().getResourceLoader() :\n                req.getCore().getResourceLoader(info.pkgName);\n            resourceLoader.findClass(info.className, expected);\n          } else {\n            req.getCore().createInitInstance(info, expected, clz, \"\");\n          }\n        } catch (Exception e) {\n          log.error(\"Error checking plugin : \", e);\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    private boolean verifyClass(CommandOperation op, String clz, @SuppressWarnings({\"rawtypes\"})Class expected) {\n      if (clz == null) return true;\n      if (!\"true\".equals(String.valueOf(op.getStr(\"runtimeLib\", null)))) {\n        PluginInfo info = new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap());\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          if(expected == Expressible.class) {\n            @SuppressWarnings(\"resource\")\n            SolrResourceLoader resourceLoader = info.pkgName == null ?\n                req.getCore().getResourceLoader() :\n                req.getCore().getResourceLoader(info.pkgName);\n            resourceLoader.findClass(info.className, expected);\n          } else {\n            req.getCore().createInitInstance(info, expected, clz, \"\");\n          }\n        } catch (Exception e) {\n          log.error(\"Error checking plugin : \", e);\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","sourceOld":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (clz == null) return true;\n      if (!\"true\".equals(String.valueOf(op.getStr(\"runtimeLib\", null)))) {\n        PluginInfo info = new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap());\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          if(expected == Expressible.class) {\n            @SuppressWarnings(\"resource\")\n            SolrResourceLoader resourceLoader = info.pkgName == null ?\n                req.getCore().getResourceLoader() :\n                req.getCore().getResourceLoader(info.pkgName);\n            resourceLoader.findClass(info.className, expected);\n          } else {\n            req.getCore().createInitInstance(info, expected, clz, \"\");\n          }\n        } catch (Exception e) {\n          log.error(\"Error checking plugin : \", e);\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60c716cf818aff6857d8490cd0fb8b5aa432408f":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"c44cc06c26e456fe9c215072b79fce30babe3975":["d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":["954ae83b7dfacaa33d48ea056448ae11f7745a93","60c716cf818aff6857d8490cd0fb8b5aa432408f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["c44cc06c26e456fe9c215072b79fce30babe3975"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"ba055e19afc289adcb5bedaf68513793a7254012":["60c716cf818aff6857d8490cd0fb8b5aa432408f"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["ba055e19afc289adcb5bedaf68513793a7254012"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"b0b597c65628ca9e73913a07e81691f8229bae35":["d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"60c716cf818aff6857d8490cd0fb8b5aa432408f":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","ba055e19afc289adcb5bedaf68513793a7254012"],"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"c44cc06c26e456fe9c215072b79fce30babe3975":["954ae83b7dfacaa33d48ea056448ae11f7745a93","b0b597c65628ca9e73913a07e81691f8229bae35"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fb50877dc038c021eba3a70999fd1f6ed85001c1"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["60c716cf818aff6857d8490cd0fb8b5aa432408f","96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74"],"ba055e19afc289adcb5bedaf68513793a7254012":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1"],"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}