{"path":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#buildShardQuery(ResponseBuilder,String,String).mjava","commits":[{"id":"b38d50314a7281b1ef90bfb3bb0bc91a38f0078f","date":1355410999,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#buildShardQuery(ResponseBuilder,String,String).mjava","pathOld":"/dev/null","sourceNew":"  ShardRequest buildShardQuery(ResponseBuilder rb, String q, String key) {\n    ShardRequest s = new ShardRequest();\n    s.params = new ModifiableSolrParams(rb.req.getParams());\n    s.purpose |= ShardRequest.PURPOSE_GET_MLT_RESULTS;\n    // Maybe unnecessary, but safe.\n    s.purpose |= ShardRequest.PURPOSE_PRIVATE;\n    \n    s.params.remove(ShardParams.SHARDS);\n    // s.params.remove(MoreLikeThisComponent.COMPONENT_NAME);\n    \n    // needed to correlate results\n    s.params.set(MoreLikeThisComponent.DIST_DOC_ID, key);\n    s.params.set(CommonParams.START, 0);\n    int mltcount = s.params.getInt(MoreLikeThisParams.DOC_COUNT, 20);\n    s.params.set(CommonParams.ROWS, mltcount);\n    \n    // adding score to rank moreLikeThis\n    s.params.remove(CommonParams.FL);\n    \n    // Should probably add something like this:\n    // String fl = s.params.get(MoreLikeThisParams.RETURN_FL, \"*\");\n    // if(fl != null){\n    // s.params.set(CommonParams.FL, fl + \",score\");\n    // }\n    String id = rb.req.getSchema().getUniqueKeyField()\n    .getName();\n    s.params.set(CommonParams.FL, \"score,\" + id);\n    s.params.set(\"sort\", \"score desc\");\n    // MLT Query is submitted as normal query to shards.\n    s.params.set(CommonParams.Q, q);\n    \n    s.shards = ShardRequest.ALL_SHARDS;\n    return s;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98ef9d9ecf768191e0c139463409e9297f8367de","date":1356019463,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#buildShardQuery(ResponseBuilder,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#buildShardQuery(ResponseBuilder,String,String).mjava","sourceNew":"  ShardRequest buildShardQuery(ResponseBuilder rb, String q, String key) {\n    ShardRequest s = new ShardRequest();\n    s.params = new ModifiableSolrParams(rb.req.getParams());\n    s.purpose |= ShardRequest.PURPOSE_GET_MLT_RESULTS;\n    // Maybe unnecessary, but safe.\n    s.purpose |= ShardRequest.PURPOSE_PRIVATE;\n    \n    s.params.remove(ShardParams.SHARDS);\n    // s.params.remove(MoreLikeThisComponent.COMPONENT_NAME);\n    \n    // needed to correlate results\n    s.params.set(MoreLikeThisComponent.DIST_DOC_ID, key);\n    s.params.set(CommonParams.START, 0);\n    int mltcount = s.params.getInt(MoreLikeThisParams.DOC_COUNT, 20);\n    s.params.set(CommonParams.ROWS, mltcount);\n    \n    // adding score to rank moreLikeThis\n    s.params.remove(CommonParams.FL);\n    \n    // Should probably add something like this:\n    // String fl = s.params.get(MoreLikeThisParams.RETURN_FL, \"*\");\n    // if(fl != null){\n    // s.params.set(CommonParams.FL, fl + \",score\");\n    // }\n    String id = rb.req.getSchema().getUniqueKeyField()\n    .getName();\n    s.params.set(CommonParams.FL, \"score,\" + id);\n    s.params.set(\"sort\", \"score desc\");\n    // MLT Query is submitted as normal query to shards.\n    s.params.set(CommonParams.Q, q);\n    \n    return s;\n  }\n\n","sourceOld":"  ShardRequest buildShardQuery(ResponseBuilder rb, String q, String key) {\n    ShardRequest s = new ShardRequest();\n    s.params = new ModifiableSolrParams(rb.req.getParams());\n    s.purpose |= ShardRequest.PURPOSE_GET_MLT_RESULTS;\n    // Maybe unnecessary, but safe.\n    s.purpose |= ShardRequest.PURPOSE_PRIVATE;\n    \n    s.params.remove(ShardParams.SHARDS);\n    // s.params.remove(MoreLikeThisComponent.COMPONENT_NAME);\n    \n    // needed to correlate results\n    s.params.set(MoreLikeThisComponent.DIST_DOC_ID, key);\n    s.params.set(CommonParams.START, 0);\n    int mltcount = s.params.getInt(MoreLikeThisParams.DOC_COUNT, 20);\n    s.params.set(CommonParams.ROWS, mltcount);\n    \n    // adding score to rank moreLikeThis\n    s.params.remove(CommonParams.FL);\n    \n    // Should probably add something like this:\n    // String fl = s.params.get(MoreLikeThisParams.RETURN_FL, \"*\");\n    // if(fl != null){\n    // s.params.set(CommonParams.FL, fl + \",score\");\n    // }\n    String id = rb.req.getSchema().getUniqueKeyField()\n    .getName();\n    s.params.set(CommonParams.FL, \"score,\" + id);\n    s.params.set(\"sort\", \"score desc\");\n    // MLT Query is submitted as normal query to shards.\n    s.params.set(CommonParams.Q, q);\n    \n    s.shards = ShardRequest.ALL_SHARDS;\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a97a2a60d1ce1ac2bd6ca3f40ed674baab554095","date":1356979334,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#buildShardQuery(ResponseBuilder,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#buildShardQuery(ResponseBuilder,String,String).mjava","sourceNew":"  ShardRequest buildShardQuery(ResponseBuilder rb, String q, String key) {\n    ShardRequest s = new ShardRequest();\n    s.params = new ModifiableSolrParams(rb.req.getParams());\n    s.purpose |= ShardRequest.PURPOSE_GET_MLT_RESULTS;\n    // Maybe unnecessary, but safe.\n    s.purpose |= ShardRequest.PURPOSE_PRIVATE;\n    \n    s.params.remove(ShardParams.SHARDS);\n    // s.params.remove(MoreLikeThisComponent.COMPONENT_NAME);\n    \n    // needed to correlate results\n    s.params.set(MoreLikeThisComponent.DIST_DOC_ID, key);\n    s.params.set(CommonParams.START, 0);\n    int mltcount = s.params.getInt(MoreLikeThisParams.DOC_COUNT, 20); // overrequest\n    s.params.set(CommonParams.ROWS, mltcount);\n    \n    // adding score to rank moreLikeThis\n    s.params.remove(CommonParams.FL);\n    \n    // Should probably add something like this:\n    // String fl = s.params.get(MoreLikeThisParams.RETURN_FL, \"*\");\n    // if(fl != null){\n    // s.params.set(CommonParams.FL, fl + \",score\");\n    // }\n    String id = rb.req.getSchema().getUniqueKeyField()\n    .getName();\n    s.params.set(CommonParams.FL, \"score,\" + id);\n    s.params.set(\"sort\", \"score desc\");\n    // MLT Query is submitted as normal query to shards.\n    s.params.set(CommonParams.Q, q);\n    \n    return s;\n  }\n\n","sourceOld":"  ShardRequest buildShardQuery(ResponseBuilder rb, String q, String key) {\n    ShardRequest s = new ShardRequest();\n    s.params = new ModifiableSolrParams(rb.req.getParams());\n    s.purpose |= ShardRequest.PURPOSE_GET_MLT_RESULTS;\n    // Maybe unnecessary, but safe.\n    s.purpose |= ShardRequest.PURPOSE_PRIVATE;\n    \n    s.params.remove(ShardParams.SHARDS);\n    // s.params.remove(MoreLikeThisComponent.COMPONENT_NAME);\n    \n    // needed to correlate results\n    s.params.set(MoreLikeThisComponent.DIST_DOC_ID, key);\n    s.params.set(CommonParams.START, 0);\n    int mltcount = s.params.getInt(MoreLikeThisParams.DOC_COUNT, 20);\n    s.params.set(CommonParams.ROWS, mltcount);\n    \n    // adding score to rank moreLikeThis\n    s.params.remove(CommonParams.FL);\n    \n    // Should probably add something like this:\n    // String fl = s.params.get(MoreLikeThisParams.RETURN_FL, \"*\");\n    // if(fl != null){\n    // s.params.set(CommonParams.FL, fl + \",score\");\n    // }\n    String id = rb.req.getSchema().getUniqueKeyField()\n    .getName();\n    s.params.set(CommonParams.FL, \"score,\" + id);\n    s.params.set(\"sort\", \"score desc\");\n    // MLT Query is submitted as normal query to shards.\n    s.params.set(CommonParams.Q, q);\n    \n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#buildShardQuery(ResponseBuilder,String,String).mjava","pathOld":"/dev/null","sourceNew":"  ShardRequest buildShardQuery(ResponseBuilder rb, String q, String key) {\n    ShardRequest s = new ShardRequest();\n    s.params = new ModifiableSolrParams(rb.req.getParams());\n    s.purpose |= ShardRequest.PURPOSE_GET_MLT_RESULTS;\n    // Maybe unnecessary, but safe.\n    s.purpose |= ShardRequest.PURPOSE_PRIVATE;\n    \n    s.params.remove(ShardParams.SHARDS);\n    // s.params.remove(MoreLikeThisComponent.COMPONENT_NAME);\n    \n    // needed to correlate results\n    s.params.set(MoreLikeThisComponent.DIST_DOC_ID, key);\n    s.params.set(CommonParams.START, 0);\n    int mltcount = s.params.getInt(MoreLikeThisParams.DOC_COUNT, 20); // overrequest\n    s.params.set(CommonParams.ROWS, mltcount);\n    \n    // adding score to rank moreLikeThis\n    s.params.remove(CommonParams.FL);\n    \n    // Should probably add something like this:\n    // String fl = s.params.get(MoreLikeThisParams.RETURN_FL, \"*\");\n    // if(fl != null){\n    // s.params.set(CommonParams.FL, fl + \",score\");\n    // }\n    String id = rb.req.getSchema().getUniqueKeyField()\n    .getName();\n    s.params.set(CommonParams.FL, \"score,\" + id);\n    s.params.set(\"sort\", \"score desc\");\n    // MLT Query is submitted as normal query to shards.\n    s.params.set(CommonParams.Q, q);\n    \n    return s;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#buildShardQuery(ResponseBuilder,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#buildShardQuery(ResponseBuilder,String,String).mjava","sourceNew":"  ShardRequest buildShardQuery(ResponseBuilder rb, String q, String key) {\n    ShardRequest s = new ShardRequest();\n    s.params = new ModifiableSolrParams(rb.req.getParams());\n    s.purpose |= ShardRequest.PURPOSE_GET_MLT_RESULTS;\n    // Maybe unnecessary, but safe.\n    s.purpose |= ShardRequest.PURPOSE_PRIVATE;\n    \n    s.params.remove(ShardParams.SHARDS);\n    // s.params.remove(MoreLikeThisComponent.COMPONENT_NAME);\n    \n    // needed to correlate results\n    s.params.set(MoreLikeThisComponent.DIST_DOC_ID, key);\n    s.params.set(CommonParams.START, 0);\n    int mltcount = s.params.getInt(MoreLikeThisParams.DOC_COUNT, 20); // overrequest\n    s.params.set(CommonParams.ROWS, mltcount);\n    \n    // adding score to rank moreLikeThis\n    s.params.remove(CommonParams.FL);\n    \n    // Should probably add something like this:\n    // String fl = s.params.get(MoreLikeThisParams.RETURN_FL, \"*\");\n    // if(fl != null){\n    // s.params.set(CommonParams.FL, fl + \",score\");\n    // }\n    String id = rb.req.getSchema().getUniqueKeyField()\n    .getName();\n    s.params.set(CommonParams.FL, \"score,\" + id);\n    s.params.set(SORT, \"score desc\");\n    // MLT Query is submitted as normal query to shards.\n    s.params.set(CommonParams.Q, q);\n    \n    return s;\n  }\n\n","sourceOld":"  ShardRequest buildShardQuery(ResponseBuilder rb, String q, String key) {\n    ShardRequest s = new ShardRequest();\n    s.params = new ModifiableSolrParams(rb.req.getParams());\n    s.purpose |= ShardRequest.PURPOSE_GET_MLT_RESULTS;\n    // Maybe unnecessary, but safe.\n    s.purpose |= ShardRequest.PURPOSE_PRIVATE;\n    \n    s.params.remove(ShardParams.SHARDS);\n    // s.params.remove(MoreLikeThisComponent.COMPONENT_NAME);\n    \n    // needed to correlate results\n    s.params.set(MoreLikeThisComponent.DIST_DOC_ID, key);\n    s.params.set(CommonParams.START, 0);\n    int mltcount = s.params.getInt(MoreLikeThisParams.DOC_COUNT, 20); // overrequest\n    s.params.set(CommonParams.ROWS, mltcount);\n    \n    // adding score to rank moreLikeThis\n    s.params.remove(CommonParams.FL);\n    \n    // Should probably add something like this:\n    // String fl = s.params.get(MoreLikeThisParams.RETURN_FL, \"*\");\n    // if(fl != null){\n    // s.params.set(CommonParams.FL, fl + \",score\");\n    // }\n    String id = rb.req.getSchema().getUniqueKeyField()\n    .getName();\n    s.params.set(CommonParams.FL, \"score,\" + id);\n    s.params.set(\"sort\", \"score desc\");\n    // MLT Query is submitted as normal query to shards.\n    s.params.set(CommonParams.Q, q);\n    \n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#buildShardQuery(ResponseBuilder,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#buildShardQuery(ResponseBuilder,String,String).mjava","sourceNew":"  ShardRequest buildShardQuery(ResponseBuilder rb, String q, String key) {\n    ShardRequest s = new ShardRequest();\n    s.params = new ModifiableSolrParams(rb.req.getParams());\n    s.purpose |= ShardRequest.PURPOSE_GET_MLT_RESULTS;\n    // Maybe unnecessary, but safe.\n    s.purpose |= ShardRequest.PURPOSE_PRIVATE;\n    \n    s.params.remove(ShardParams.SHARDS);\n    // s.params.remove(MoreLikeThisComponent.COMPONENT_NAME);\n    \n    // needed to correlate results\n    s.params.set(MoreLikeThisComponent.DIST_DOC_ID, key);\n    s.params.set(CommonParams.START, 0);\n    int mltcount = s.params.getInt(MoreLikeThisParams.DOC_COUNT, 20); // overrequest\n    s.params.set(CommonParams.ROWS, mltcount);\n    \n    // adding score to rank moreLikeThis\n    s.params.remove(CommonParams.FL);\n    \n    // Should probably add something like this:\n    // String fl = s.params.get(MoreLikeThisParams.RETURN_FL, \"*\");\n    // if(fl != null){\n    // s.params.set(CommonParams.FL, fl + \",score\");\n    // }\n    String id = rb.req.getSchema().getUniqueKeyField()\n    .getName();\n    s.params.set(CommonParams.FL, \"score,\" + id);\n    s.params.set(SORT, \"score desc\");\n    // MLT Query is submitted as normal query to shards.\n    s.params.set(CommonParams.Q, q);\n    \n    return s;\n  }\n\n","sourceOld":"  ShardRequest buildShardQuery(ResponseBuilder rb, String q, String key) {\n    ShardRequest s = new ShardRequest();\n    s.params = new ModifiableSolrParams(rb.req.getParams());\n    s.purpose |= ShardRequest.PURPOSE_GET_MLT_RESULTS;\n    // Maybe unnecessary, but safe.\n    s.purpose |= ShardRequest.PURPOSE_PRIVATE;\n    \n    s.params.remove(ShardParams.SHARDS);\n    // s.params.remove(MoreLikeThisComponent.COMPONENT_NAME);\n    \n    // needed to correlate results\n    s.params.set(MoreLikeThisComponent.DIST_DOC_ID, key);\n    s.params.set(CommonParams.START, 0);\n    int mltcount = s.params.getInt(MoreLikeThisParams.DOC_COUNT, 20); // overrequest\n    s.params.set(CommonParams.ROWS, mltcount);\n    \n    // adding score to rank moreLikeThis\n    s.params.remove(CommonParams.FL);\n    \n    // Should probably add something like this:\n    // String fl = s.params.get(MoreLikeThisParams.RETURN_FL, \"*\");\n    // if(fl != null){\n    // s.params.set(CommonParams.FL, fl + \",score\");\n    // }\n    String id = rb.req.getSchema().getUniqueKeyField()\n    .getName();\n    s.params.set(CommonParams.FL, \"score,\" + id);\n    s.params.set(\"sort\", \"score desc\");\n    // MLT Query is submitted as normal query to shards.\n    s.params.set(CommonParams.Q, q);\n    \n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a97a2a60d1ce1ac2bd6ca3f40ed674baab554095"],"98ef9d9ecf768191e0c139463409e9297f8367de":["b38d50314a7281b1ef90bfb3bb0bc91a38f0078f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["a97a2a60d1ce1ac2bd6ca3f40ed674baab554095"],"b38d50314a7281b1ef90bfb3bb0bc91a38f0078f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"01624b85de12fb02335810bdf325124e59040772":["a97a2a60d1ce1ac2bd6ca3f40ed674baab554095"],"a97a2a60d1ce1ac2bd6ca3f40ed674baab554095":["98ef9d9ecf768191e0c139463409e9297f8367de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["01624b85de12fb02335810bdf325124e59040772"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"98ef9d9ecf768191e0c139463409e9297f8367de":["a97a2a60d1ce1ac2bd6ca3f40ed674baab554095"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b38d50314a7281b1ef90bfb3bb0bc91a38f0078f"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"b38d50314a7281b1ef90bfb3bb0bc91a38f0078f":["98ef9d9ecf768191e0c139463409e9297f8367de"],"a97a2a60d1ce1ac2bd6ca3f40ed674baab554095":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772"],"01624b85de12fb02335810bdf325124e59040772":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6f4c5d3859373c3a74734e85efa122b17514e3e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}