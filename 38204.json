{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","sourceNew":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (StrUtils.parseBool((String)requestParams.get(\"debug\"),false)) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = StrUtils.parseBool((String)requestParams.get(\"verbose\"),false);\n      }\n      syncMode = StrUtils.parseBool((String)requestParams.get(\"synchronous\"),false);\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = StrUtils.parseBool((String) requestParams.get(\"commit\"),true);\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = StrUtils.parseBool((String) requestParams.get(\"clean\"),true);\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"),true);\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","sourceOld":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (StrUtils.parseBool((String)requestParams.get(\"debug\"),false)) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = StrUtils.parseBool((String)requestParams.get(\"verbose\"),false);\n      }\n      syncMode = StrUtils.parseBool((String)requestParams.get(\"synchronous\"),false);\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = StrUtils.parseBool((String) requestParams.get(\"commit\"),true);\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = StrUtils.parseBool((String) requestParams.get(\"clean\"),true);\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"),true);\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","sourceNew":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (StrUtils.parseBool((String)requestParams.get(\"debug\"),false)) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = StrUtils.parseBool((String)requestParams.get(\"verbose\"),false);\n      }\n      syncMode = StrUtils.parseBool((String)requestParams.get(\"synchronous\"),false);\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = StrUtils.parseBool((String) requestParams.get(\"commit\"),true);\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = StrUtils.parseBool((String) requestParams.get(\"clean\"),true);\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"),true);\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","sourceOld":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (StrUtils.parseBool((String)requestParams.get(\"debug\"),false)) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = StrUtils.parseBool((String)requestParams.get(\"verbose\"),false);\n      }\n      syncMode = StrUtils.parseBool((String)requestParams.get(\"synchronous\"),false);\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = StrUtils.parseBool((String) requestParams.get(\"commit\"),true);\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = StrUtils.parseBool((String) requestParams.get(\"clean\"),true);\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"),true);\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88ce570efa5e16fddc35c34495194cfd8bb828b2","date":1329702309,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","sourceNew":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (StrUtils.parseBool((String)requestParams.get(\"debug\"),false)) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = StrUtils.parseBool((String)requestParams.get(\"verbose\"),false);\n      }\n      syncMode = StrUtils.parseBool((String)requestParams.get(\"synchronous\"),false);\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = StrUtils.parseBool((String) requestParams.get(\"commit\"),true);\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = StrUtils.parseBool((String) requestParams.get(\"clean\"),true);\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"),false);\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","sourceOld":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (StrUtils.parseBool((String)requestParams.get(\"debug\"),false)) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = StrUtils.parseBool((String)requestParams.get(\"verbose\"),false);\n      }\n      syncMode = StrUtils.parseBool((String)requestParams.get(\"synchronous\"),false);\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = StrUtils.parseBool((String) requestParams.get(\"commit\"),true);\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = StrUtils.parseBool((String) requestParams.get(\"clean\"),true);\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"),true);\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","bugFix":["c9f9c250dfa2238c6fa2cb7c83894edc84e1c5a8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":4,"author":"James Dyer","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (StrUtils.parseBool((String)requestParams.get(\"debug\"),false)) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = StrUtils.parseBool((String)requestParams.get(\"verbose\"),false);\n      }\n      syncMode = StrUtils.parseBool((String)requestParams.get(\"synchronous\"),false);\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = StrUtils.parseBool((String) requestParams.get(\"commit\"),true);\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = StrUtils.parseBool((String) requestParams.get(\"clean\"),true);\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"),false);\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["88ce570efa5e16fddc35c34495194cfd8bb828b2"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"88ce570efa5e16fddc35c34495194cfd8bb828b2":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"]},"commit2Childs":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["88ce570efa5e16fddc35c34495194cfd8bb828b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"88ce570efa5e16fddc35c34495194cfd8bb828b2":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}