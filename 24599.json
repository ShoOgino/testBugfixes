{"path":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustContentSource().mjava","commits":[{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustContentSource().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustDocMaker().mjava","sourceNew":"  /**\n   * Test Exhasting Doc Maker logic\n   */\n  public void testExhaustContentSource() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n        \"content.source.log.step=1\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"{ AddDoc } : * \",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 100\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 30\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",139,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1 docs were added to the index, this is what we expect to find!\",1,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Test Exhasting Doc Maker logic\n   */\n  public void testExhaustDocMaker() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.SimpleDocMaker\",\n        \"doc.add.log.step=1\",\n        \"doc.term.vector=false\",\n        \"doc.maker.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"{ AddDoc } : * \",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 100\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 30\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",139,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1 docs were added to the index, this is what we expect to find!\",1,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustContentSource().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustContentSource().mjava","sourceNew":"  /**\n   * Test Exhasting Doc Maker logic\n   */\n  public void testExhaustContentSource() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n        \"content.source.log.step=1\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"{ AddDoc } : * \",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 100\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 30\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",139,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1 docs were added to the index, this is what we expect to find!\",1,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Test Exhasting Doc Maker logic\n   */\n  public void testExhaustContentSource() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n        \"content.source.log.step=1\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"{ AddDoc } : * \",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 100\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 30\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",139,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1 docs were added to the index, this is what we expect to find!\",1,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustContentSource().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustContentSource().mjava","sourceNew":"  /**\n   * Test Exhasting Doc Maker logic\n   */\n  public void testExhaustContentSource() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n        \"content.source.log.step=1\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"{ AddDoc } : * \",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 100\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 30\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",139,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1 docs were added to the index, this is what we expect to find!\",1,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Test Exhasting Doc Maker logic\n   */\n  public void testExhaustContentSource() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n        \"content.source.log.step=1\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"{ AddDoc } : * \",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 100\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 30\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",139,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1 docs were added to the index, this is what we expect to find!\",1,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustContentSource().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustContentSource().mjava","sourceNew":"  /**\n   * Test Exhasting Doc Maker logic\n   */\n  public void testExhaustContentSource() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n        \"content.source.log.step=1\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"{ AddDoc } : * \",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 100\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 30\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",139,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1 docs were added to the index, this is what we expect to find!\",1,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Test Exhasting Doc Maker logic\n   */\n  public void testExhaustContentSource() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n        \"content.source.log.step=1\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"{ AddDoc } : * \",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 100\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 30\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",139,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1 docs were added to the index, this is what we expect to find!\",1,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustContentSource().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustContentSource().mjava","sourceNew":"  /**\n   * Test Exhasting Doc Maker logic\n   */\n  public void testExhaustContentSource() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n        \"content.source.log.step=1\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"{ AddDoc } : * \",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 100\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 30\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",139,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1 docs were added to the index, this is what we expect to find!\",1,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Test Exhasting Doc Maker logic\n   */\n  public void testExhaustContentSource() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n        \"content.source.log.step=1\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"{ AddDoc } : * \",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 100\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 30\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",139,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1 docs were added to the index, this is what we expect to find!\",1,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustContentSource().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustContentSource().mjava","sourceNew":"  /**\n   * Test Exhasting Doc Maker logic\n   */\n  public void testExhaustContentSource() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n        \"content.source.log.step=1\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"{ AddDoc } : * \",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 100\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 30\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",139,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1 docs were added to the index, this is what we expect to find!\",1,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Test Exhasting Doc Maker logic\n   */\n  public void testExhaustContentSource() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n        \"content.source.log.step=1\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"{ AddDoc } : * \",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 100\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 30\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",139,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1 docs were added to the index, this is what we expect to find!\",1,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["4256bc1b3c94786287ccdfc751230374521843cf"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"4256bc1b3c94786287ccdfc751230374521843cf":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["4256bc1b3c94786287ccdfc751230374521843cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4256bc1b3c94786287ccdfc751230374521843cf":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}