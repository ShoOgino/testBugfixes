{"path":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/morphline/MorphlineMapper.MyDocumentLoader#load(SolrInputDocument).mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/morphline/MorphlineMapper.MyDocumentLoader#load(SolrInputDocument).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/morphline/MorphlineMapper.MyDocumentLoader#load(SolrInputDocument).mjava","sourceNew":"    @Override\n    public void load(SolrInputDocument doc) throws IOException, SolrServerException {\n      String uniqueKeyFieldName = getSchema().getUniqueKeyField().getName();\n      Object id = doc.getFieldValue(uniqueKeyFieldName);\n      if (id == null) {\n        throw new IllegalArgumentException(\"Missing value for (required) unique document key: \" + uniqueKeyFieldName\n            + \" (see Solr schema.xml)\");\n      }\n      try {\n        context.write(new Text(id.toString()), new SolrInputDocumentWritable(doc));\n      } catch (InterruptedException e) {\n        throw new IOException(\"Interrupted while writing \" + doc, e);\n      }\n\n      if (LOG.isDebugEnabled()) {\n        long numParserOutputBytes = 0;\n        for (SolrInputField field : doc.values()) {\n          numParserOutputBytes += sizeOf(field.getValue());\n        }\n        context.getCounter(MorphlineCounters.class.getName(), MorphlineCounters.PARSER_OUTPUT_BYTES.toString()).increment(numParserOutputBytes);\n      }\n      context.getCounter(MorphlineCounters.class.getName(), MorphlineCounters.DOCS_READ.toString()).increment(1);\n    }\n\n","sourceOld":"    @Override\n    public void load(SolrInputDocument doc) throws IOException, SolrServerException {\n      String uniqueKeyFieldName = getSchema().getUniqueKeyField().getName();\n      Object id = doc.getFieldValue(uniqueKeyFieldName);\n      if (id == null) {\n        throw new IllegalArgumentException(\"Missing value for (required) unique document key: \" + uniqueKeyFieldName\n            + \" (see Solr schema.xml)\");\n      }\n      try {\n        context.write(new Text(id.toString()), new SolrInputDocumentWritable(doc));\n      } catch (InterruptedException e) {\n        throw new IOException(\"Interrupted while writing \" + doc, e);\n      }\n\n      if (LOG.isDebugEnabled()) {\n        long numParserOutputBytes = 0;\n        for (SolrInputField field : doc.values()) {\n          numParserOutputBytes += sizeOf(field.getValue());\n        }\n        context.getCounter(MorphlineCounters.class.getName(), MorphlineCounters.PARSER_OUTPUT_BYTES.toString()).increment(numParserOutputBytes);\n      }\n      context.getCounter(MorphlineCounters.class.getName(), MorphlineCounters.DOCS_READ.toString()).increment(1);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/morphline/MorphlineMapper.MyDocumentLoader#load(SolrInputDocument).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void load(SolrInputDocument doc) throws IOException, SolrServerException {\n      String uniqueKeyFieldName = getSchema().getUniqueKeyField().getName();\n      Object id = doc.getFieldValue(uniqueKeyFieldName);\n      if (id == null) {\n        throw new IllegalArgumentException(\"Missing value for (required) unique document key: \" + uniqueKeyFieldName\n            + \" (see Solr schema.xml)\");\n      }\n      try {\n        context.write(new Text(id.toString()), new SolrInputDocumentWritable(doc));\n      } catch (InterruptedException e) {\n        throw new IOException(\"Interrupted while writing \" + doc, e);\n      }\n\n      if (LOG.isDebugEnabled()) {\n        long numParserOutputBytes = 0;\n        for (SolrInputField field : doc.values()) {\n          numParserOutputBytes += sizeOf(field.getValue());\n        }\n        context.getCounter(MorphlineCounters.class.getName(), MorphlineCounters.PARSER_OUTPUT_BYTES.toString()).increment(numParserOutputBytes);\n      }\n      context.getCounter(MorphlineCounters.class.getName(), MorphlineCounters.DOCS_READ.toString()).increment(1);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/morphline/MorphlineMapper.MyDocumentLoader#load(SolrInputDocument).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void load(SolrInputDocument doc) throws IOException, SolrServerException {\n      String uniqueKeyFieldName = getSchema().getUniqueKeyField().getName();\n      Object id = doc.getFieldValue(uniqueKeyFieldName);\n      if (id == null) {\n        throw new IllegalArgumentException(\"Missing value for (required) unique document key: \" + uniqueKeyFieldName\n            + \" (see Solr schema.xml)\");\n      }\n      try {\n        context.write(new Text(id.toString()), new SolrInputDocumentWritable(doc));\n      } catch (InterruptedException e) {\n        throw new IOException(\"Interrupted while writing \" + doc, e);\n      }\n\n      if (LOG.isDebugEnabled()) {\n        long numParserOutputBytes = 0;\n        for (SolrInputField field : doc.values()) {\n          numParserOutputBytes += sizeOf(field.getValue());\n        }\n        context.getCounter(MorphlineCounters.class.getName(), MorphlineCounters.PARSER_OUTPUT_BYTES.toString()).increment(numParserOutputBytes);\n      }\n      context.getCounter(MorphlineCounters.class.getName(), MorphlineCounters.DOCS_READ.toString()).increment(1);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/morphline/MorphlineMapper.MyDocumentLoader#load(SolrInputDocument).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void load(SolrInputDocument doc) throws IOException, SolrServerException {\n      String uniqueKeyFieldName = getSchema().getUniqueKeyField().getName();\n      Object id = doc.getFieldValue(uniqueKeyFieldName);\n      if (id == null) {\n        throw new IllegalArgumentException(\"Missing value for (required) unique document key: \" + uniqueKeyFieldName\n            + \" (see Solr schema.xml)\");\n      }\n      try {\n        context.write(new Text(id.toString()), new SolrInputDocumentWritable(doc));\n      } catch (InterruptedException e) {\n        throw new IOException(\"Interrupted while writing \" + doc, e);\n      }\n\n      if (LOG.isDebugEnabled()) {\n        long numParserOutputBytes = 0;\n        for (SolrInputField field : doc.values()) {\n          numParserOutputBytes += sizeOf(field.getValue());\n        }\n        context.getCounter(MorphlineCounters.class.getName(), MorphlineCounters.PARSER_OUTPUT_BYTES.toString()).increment(numParserOutputBytes);\n      }\n      context.getCounter(MorphlineCounters.class.getName(), MorphlineCounters.DOCS_READ.toString()).increment(1);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["12109b652e9210b8d58fca47f6c4a725d058a58e","74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}