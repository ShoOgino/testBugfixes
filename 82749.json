{"path":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","sourceNew":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n\n      new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), false)\n        .upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n\n      new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), false)\n        .upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f1e5b432d4a0520e976622998d1c85a0fa4f9fa","date":1379529236,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","sourceNew":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n\n      newIndexUpgrader(dir).upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n\n      new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), false)\n        .upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","sourceNew":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n\n      newIndexUpgrader(dir).upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n\n      newIndexUpgrader(dir).upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","sourceNew":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n\n      newIndexUpgrader(dir).upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n\n      newIndexUpgrader(dir).upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","sourceNew":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n\n      newIndexUpgrader(dir).upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n\n      newIndexUpgrader(dir).upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6f1e5b432d4a0520e976622998d1c85a0fa4f9fa"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6f1e5b432d4a0520e976622998d1c85a0fa4f9fa":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6f1e5b432d4a0520e976622998d1c85a0fa4f9fa"],"6f1e5b432d4a0520e976622998d1c85a0fa4f9fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}