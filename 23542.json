{"path":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 45;\n    } else {\n      expected = 46;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.maxDoc());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 45;\n    } else {\n      expected = 46;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.maxDoc());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 45;\n    } else {\n      expected = 46;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.maxDoc());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 45;\n    } else {\n      expected = 46;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.maxDoc());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 45;\n    } else {\n      expected = 46;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.maxDoc());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 45;\n    } else {\n      expected = 46;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.maxDoc());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String).mjava","sourceNew":"  public void changeIndexWithAdds(String dirName) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 45;\n    } else {\n      expected = 46;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.maxDoc());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 45;\n    } else {\n      expected = 46;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.maxDoc());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, String dirName) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 45;\n    } else {\n      expected = 46;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.maxDoc());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = new IndexSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", (float) 2.0);\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(String dirName) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 45;\n    } else {\n      expected = 46;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.maxDoc());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String).mjava","sourceNew":null,"sourceOld":"  public void changeIndexWithAdds(String dirName) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 45;\n    } else {\n      expected = 46;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.maxDoc());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6267e1ce56c2eec111425690cd04e251b6f14952":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["6267e1ce56c2eec111425690cd04e251b6f14952","b21422ff1d1d56499dec481f193b402e5e8def5b"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["6267e1ce56c2eec111425690cd04e251b6f14952"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6267e1ce56c2eec111425690cd04e251b6f14952":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d572389229127c297dd1fa5ce4758e1cec41e799":["6267e1ce56c2eec111425690cd04e251b6f14952"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["d572389229127c297dd1fa5ce4758e1cec41e799"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}