{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#score().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#score().mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#score().mjava","sourceNew":"    @Override\n    public float score() throws IOException {\n      float score = qWeight * vals.floatVal(doc);\n\n      // Current Lucene priority queues can't handle NaN and -Infinity, so\n      // map to -Float.MAX_VALUE. This conditional handles both -infinity\n      // and NaN since comparisons with NaN are always false.\n      return score>Float.NEGATIVE_INFINITY ? score : -Float.MAX_VALUE;\n    }\n\n","sourceOld":"    @Override\n    public float score() throws IOException {\n      float score = qWeight * vals.floatVal(doc);\n\n      // Current Lucene priority queues can't handle NaN and -Infinity, so\n      // map to -Float.MAX_VALUE. This conditional handles both -infinity\n      // and NaN since comparisons with NaN are always false.\n      return score>Float.NEGATIVE_INFINITY ? score : -Float.MAX_VALUE;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#score().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#score().mjava","sourceNew":"    @Override\n    public float score() throws IOException {\n      float score = qWeight * vals.floatVal(docID());\n\n      // Current Lucene priority queues can't handle NaN and -Infinity, so\n      // map to -Float.MAX_VALUE. This conditional handles both -infinity\n      // and NaN since comparisons with NaN are always false.\n      return score>Float.NEGATIVE_INFINITY ? score : -Float.MAX_VALUE;\n    }\n\n","sourceOld":"    @Override\n    public float score() throws IOException {\n      float score = qWeight * vals.floatVal(doc);\n\n      // Current Lucene priority queues can't handle NaN and -Infinity, so\n      // map to -Float.MAX_VALUE. This conditional handles both -infinity\n      // and NaN since comparisons with NaN are always false.\n      return score>Float.NEGATIVE_INFINITY ? score : -Float.MAX_VALUE;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#score().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#score().mjava","sourceNew":"    @Override\n    public float score() throws IOException {\n      float score = boost * vals.floatVal(docID());\n\n      // Current Lucene priority queues can't handle NaN and -Infinity, so\n      // map to -Float.MAX_VALUE. This conditional handles both -infinity\n      // and NaN since comparisons with NaN are always false.\n      return score>Float.NEGATIVE_INFINITY ? score : -Float.MAX_VALUE;\n    }\n\n","sourceOld":"    @Override\n    public float score() throws IOException {\n      float score = qWeight * vals.floatVal(docID());\n\n      // Current Lucene priority queues can't handle NaN and -Infinity, so\n      // map to -Float.MAX_VALUE. This conditional handles both -infinity\n      // and NaN since comparisons with NaN are always false.\n      return score>Float.NEGATIVE_INFINITY ? score : -Float.MAX_VALUE;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#score().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#score().mjava","sourceNew":"    @Override\n    public float score() throws IOException {\n      float score = boost * vals.floatVal(docID());\n\n      // Current Lucene priority queues can't handle NaN and -Infinity, so\n      // map to -Float.MAX_VALUE. This conditional handles both -infinity\n      // and NaN since comparisons with NaN are always false.\n      return score>Float.NEGATIVE_INFINITY ? score : -Float.MAX_VALUE;\n    }\n\n","sourceOld":"    @Override\n    public float score() throws IOException {\n      float score = qWeight * vals.floatVal(docID());\n\n      // Current Lucene priority queues can't handle NaN and -Infinity, so\n      // map to -Float.MAX_VALUE. This conditional handles both -infinity\n      // and NaN since comparisons with NaN are always false.\n      return score>Float.NEGATIVE_INFINITY ? score : -Float.MAX_VALUE;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","date":1512565563,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#score().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#score().mjava","sourceNew":"    @Override\n    public float score() throws IOException {\n      float val = vals.floatVal(docID());\n      if (val >= 0 == false) { // this covers NaN as well since comparisons with NaN return false\n        return 0;\n      } else {\n        return boost * val;\n      }\n    }\n\n","sourceOld":"    @Override\n    public float score() throws IOException {\n      float score = boost * vals.floatVal(docID());\n\n      // Current Lucene priority queues can't handle NaN and -Infinity, so\n      // map to -Float.MAX_VALUE. This conditional handles both -infinity\n      // and NaN since comparisons with NaN are always false.\n      return score>Float.NEGATIVE_INFINITY ? score : -Float.MAX_VALUE;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}