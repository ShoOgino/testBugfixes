{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/dXYZSolid#dXYZSolid(PlanetModel,double,double,double,double,double).mjava","commits":[{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/dXYZSolid#dXYZSolid(PlanetModel,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sole constructor\n   *\n   *@param planetModel is the planet model.\n   *@param X is the X value.\n   *@param minY is the minimum Y value.\n   *@param maxY is the maximum Y value.\n   *@param minZ is the minimum Z value.\n   *@param maxZ is the maximum Z value.\n   */\n  public dXYZSolid(final PlanetModel planetModel,\n    final double X,\n    final double minY,\n    final double maxY,\n    final double minZ,\n    final double maxZ) {\n    super(planetModel);\n    // Argument checking\n    if (maxY - minY < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Y values in wrong order or identical\");\n    if (maxZ - minZ < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Z values in wrong order or identical\");\n\n    final double worldMinX = planetModel.getMinimumXValue();\n    final double worldMaxX = planetModel.getMaximumXValue();\n    \n    // Construct the planes\n    xPlane = new Plane(xUnitVector,-X);\n    minYPlane = new SidedPlane(0.0,maxY,0.0,yUnitVector,-minY);\n    maxYPlane = new SidedPlane(0.0,minY,0.0,yUnitVector,-maxY);\n    minZPlane = new SidedPlane(0.0,0.0,maxZ,zUnitVector,-minZ);\n    maxZPlane = new SidedPlane(0.0,0.0,minZ,zUnitVector,-maxZ);\n      \n    // We need at least one point on the planet surface for each manifestation of the shape.\n    // There can be up to 2 (on opposite sides of the world).  But we have to go through\n    // 4 combinations of adjacent planes in order to find out if any have 2 intersection solution.\n    // Typically, this requires 4 square root operations. \n    final GeoPoint[] XminY = xPlane.findIntersections(planetModel,minYPlane,maxYPlane,minZPlane,maxZPlane);\n    final GeoPoint[] XmaxY = xPlane.findIntersections(planetModel,maxYPlane,minYPlane,minZPlane,maxZPlane);\n    final GeoPoint[] XminZ = xPlane.findIntersections(planetModel,minZPlane,maxZPlane,minYPlane,maxYPlane);\n    final GeoPoint[] XmaxZ = xPlane.findIntersections(planetModel,maxZPlane,minZPlane,minYPlane,maxYPlane);\n\n    notableXPoints = glueTogether(XminY, XmaxY, XminZ, XmaxZ);\n\n    // Now, compute the edge points.\n    // This is the trickiest part of setting up an XYZSolid.  We've computed intersections already, so\n    // we'll start there.  We know that at most there will be two disconnected shapes on the planet surface.\n    // But there's also a case where exactly one plane slices through the world, and none of the bounding plane\n    // intersections do.  Thus, if we don't find any of the edge intersection cases, we have to look for that last case.\n      \n    // We need to look at single-plane/world intersections.\n    // We detect these by looking at the world model and noting its x, y, and z bounds.\n    // For the single-dimension degenerate case, there's really only one plane that can possibly intersect the world.\n    // The cases we are looking for are when the four corner points for any given\n    // plane are all outside of the world, AND that plane intersects the world.\n    // There are four corner points all told; we must evaluate these WRT the planet surface.\n    final boolean XminYminZ = planetModel.pointOutside(X, minY, minZ);\n    final boolean XminYmaxZ = planetModel.pointOutside(X, minY, maxZ);\n    final boolean XmaxYminZ = planetModel.pointOutside(X, maxY, minZ);\n    final boolean XmaxYmaxZ = planetModel.pointOutside(X, maxY, maxZ);\n\n    final GeoPoint[] xEdges;\n    if (X - worldMinX >= -Vector.MINIMUM_RESOLUTION && X - worldMaxX <= Vector.MINIMUM_RESOLUTION &&\n      minY < 0.0 && maxY > 0.0 && minZ < 0.0 && maxZ > 0.0 &&\n      XminYminZ && XminYmaxZ && XmaxYminZ && XmaxYmaxZ) {\n      // Find any point on the X plane that intersects the world\n      // First construct a perpendicular plane that will allow us to find a sample point.\n      // This plane is vertical and goes through the points (0,0,0) and (1,0,0)\n      // Then use it to compute a sample point.\n      xEdges = new GeoPoint[]{xPlane.getSampleIntersectionPoint(planetModel, xVerticalPlane)};\n    } else {\n      xEdges = EMPTY_POINTS;\n    }\n\n    this.edgePoints = glueTogether(XminY,XmaxY,XminZ,XmaxZ,xEdges);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d8f71af177fad4bbfdf462d318247e573faac27f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8f71af177fad4bbfdf462d318247e573faac27f","date":1441729530,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/dXYZSolid#dXYZSolid(PlanetModel,double,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/dXYZSolid#dXYZSolid(PlanetModel,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Sole constructor\n   *\n   *@param planetModel is the planet model.\n   *@param X is the X value.\n   *@param minY is the minimum Y value.\n   *@param maxY is the maximum Y value.\n   *@param minZ is the minimum Z value.\n   *@param maxZ is the maximum Z value.\n   */\n  public dXYZSolid(final PlanetModel planetModel,\n    final double X,\n    final double minY,\n    final double maxY,\n    final double minZ,\n    final double maxZ) {\n    super(planetModel);\n    // Argument checking\n    if (maxY - minY < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Y values in wrong order or identical\");\n    if (maxZ - minZ < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Z values in wrong order or identical\");\n\n    final double worldMinX = planetModel.getMinimumXValue();\n    final double worldMaxX = planetModel.getMaximumXValue();\n    \n    // Construct the planes\n    xPlane = new Plane(xUnitVector,-X);\n    minYPlane = new SidedPlane(0.0,maxY,0.0,yUnitVector,-minY);\n    maxYPlane = new SidedPlane(0.0,minY,0.0,yUnitVector,-maxY);\n    minZPlane = new SidedPlane(0.0,0.0,maxZ,zUnitVector,-minZ);\n    maxZPlane = new SidedPlane(0.0,0.0,minZ,zUnitVector,-maxZ);\n      \n    // We need at least one point on the planet surface for each manifestation of the shape.\n    // There can be up to 2 (on opposite sides of the world).  But we have to go through\n    // 4 combinations of adjacent planes in order to find out if any have 2 intersection solution.\n    // Typically, this requires 4 square root operations. \n    final GeoPoint[] XminY = xPlane.findIntersections(planetModel,minYPlane,maxYPlane,minZPlane,maxZPlane);\n    final GeoPoint[] XmaxY = xPlane.findIntersections(planetModel,maxYPlane,minYPlane,minZPlane,maxZPlane);\n    final GeoPoint[] XminZ = xPlane.findIntersections(planetModel,minZPlane,maxZPlane,minYPlane,maxYPlane);\n    final GeoPoint[] XmaxZ = xPlane.findIntersections(planetModel,maxZPlane,minZPlane,minYPlane,maxYPlane);\n\n    notableXPoints = glueTogether(XminY, XmaxY, XminZ, XmaxZ);\n\n    // Now, compute the edge points.\n    // This is the trickiest part of setting up an XYZSolid.  We've computed intersections already, so\n    // we'll start there.  We know that at most there will be two disconnected shapes on the planet surface.\n    // But there's also a case where exactly one plane slices through the world, and none of the bounding plane\n    // intersections do.  Thus, if we don't find any of the edge intersection cases, we have to look for that last case.\n      \n    // We need to look at single-plane/world intersections.\n    // We detect these by looking at the world model and noting its x, y, and z bounds.\n    // For the single-dimension degenerate case, there's really only one plane that can possibly intersect the world.\n    // The cases we are looking for are when the four corner points for any given\n    // plane are all outside of the world, AND that plane intersects the world.\n    // There are four corner points all told; we must evaluate these WRT the planet surface.\n    final boolean XminYminZ = planetModel.pointOutside(X, minY, minZ);\n    final boolean XminYmaxZ = planetModel.pointOutside(X, minY, maxZ);\n    final boolean XmaxYminZ = planetModel.pointOutside(X, maxY, minZ);\n    final boolean XmaxYmaxZ = planetModel.pointOutside(X, maxY, maxZ);\n\n    final GeoPoint[] xEdges;\n    if (X - worldMinX >= -Vector.MINIMUM_RESOLUTION && X - worldMaxX <= Vector.MINIMUM_RESOLUTION &&\n      minY < 0.0 && maxY > 0.0 && minZ < 0.0 && maxZ > 0.0 &&\n      XminYminZ && XminYmaxZ && XmaxYminZ && XmaxYmaxZ) {\n      // Find any point on the X plane that intersects the world\n      // First construct a perpendicular plane that will allow us to find a sample point.\n      // This plane is vertical and goes through the points (0,0,0) and (1,0,0)\n      // Then use it to compute a sample point.\n      final GeoPoint intPoint = xPlane.getSampleIntersectionPoint(planetModel, xVerticalPlane);\n      if (intPoint != null) {\n        xEdges = new GeoPoint[]{intPoint};\n      } else {\n        xEdges = EMPTY_POINTS;\n      }\n    } else {\n      xEdges = EMPTY_POINTS;\n    }\n\n    this.edgePoints = glueTogether(XminY,XmaxY,XminZ,XmaxZ,xEdges);\n  }\n\n","sourceOld":"  /**\n   * Sole constructor\n   *\n   *@param planetModel is the planet model.\n   *@param X is the X value.\n   *@param minY is the minimum Y value.\n   *@param maxY is the maximum Y value.\n   *@param minZ is the minimum Z value.\n   *@param maxZ is the maximum Z value.\n   */\n  public dXYZSolid(final PlanetModel planetModel,\n    final double X,\n    final double minY,\n    final double maxY,\n    final double minZ,\n    final double maxZ) {\n    super(planetModel);\n    // Argument checking\n    if (maxY - minY < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Y values in wrong order or identical\");\n    if (maxZ - minZ < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Z values in wrong order or identical\");\n\n    final double worldMinX = planetModel.getMinimumXValue();\n    final double worldMaxX = planetModel.getMaximumXValue();\n    \n    // Construct the planes\n    xPlane = new Plane(xUnitVector,-X);\n    minYPlane = new SidedPlane(0.0,maxY,0.0,yUnitVector,-minY);\n    maxYPlane = new SidedPlane(0.0,minY,0.0,yUnitVector,-maxY);\n    minZPlane = new SidedPlane(0.0,0.0,maxZ,zUnitVector,-minZ);\n    maxZPlane = new SidedPlane(0.0,0.0,minZ,zUnitVector,-maxZ);\n      \n    // We need at least one point on the planet surface for each manifestation of the shape.\n    // There can be up to 2 (on opposite sides of the world).  But we have to go through\n    // 4 combinations of adjacent planes in order to find out if any have 2 intersection solution.\n    // Typically, this requires 4 square root operations. \n    final GeoPoint[] XminY = xPlane.findIntersections(planetModel,minYPlane,maxYPlane,minZPlane,maxZPlane);\n    final GeoPoint[] XmaxY = xPlane.findIntersections(planetModel,maxYPlane,minYPlane,minZPlane,maxZPlane);\n    final GeoPoint[] XminZ = xPlane.findIntersections(planetModel,minZPlane,maxZPlane,minYPlane,maxYPlane);\n    final GeoPoint[] XmaxZ = xPlane.findIntersections(planetModel,maxZPlane,minZPlane,minYPlane,maxYPlane);\n\n    notableXPoints = glueTogether(XminY, XmaxY, XminZ, XmaxZ);\n\n    // Now, compute the edge points.\n    // This is the trickiest part of setting up an XYZSolid.  We've computed intersections already, so\n    // we'll start there.  We know that at most there will be two disconnected shapes on the planet surface.\n    // But there's also a case where exactly one plane slices through the world, and none of the bounding plane\n    // intersections do.  Thus, if we don't find any of the edge intersection cases, we have to look for that last case.\n      \n    // We need to look at single-plane/world intersections.\n    // We detect these by looking at the world model and noting its x, y, and z bounds.\n    // For the single-dimension degenerate case, there's really only one plane that can possibly intersect the world.\n    // The cases we are looking for are when the four corner points for any given\n    // plane are all outside of the world, AND that plane intersects the world.\n    // There are four corner points all told; we must evaluate these WRT the planet surface.\n    final boolean XminYminZ = planetModel.pointOutside(X, minY, minZ);\n    final boolean XminYmaxZ = planetModel.pointOutside(X, minY, maxZ);\n    final boolean XmaxYminZ = planetModel.pointOutside(X, maxY, minZ);\n    final boolean XmaxYmaxZ = planetModel.pointOutside(X, maxY, maxZ);\n\n    final GeoPoint[] xEdges;\n    if (X - worldMinX >= -Vector.MINIMUM_RESOLUTION && X - worldMaxX <= Vector.MINIMUM_RESOLUTION &&\n      minY < 0.0 && maxY > 0.0 && minZ < 0.0 && maxZ > 0.0 &&\n      XminYminZ && XminYmaxZ && XmaxYminZ && XmaxYmaxZ) {\n      // Find any point on the X plane that intersects the world\n      // First construct a perpendicular plane that will allow us to find a sample point.\n      // This plane is vertical and goes through the points (0,0,0) and (1,0,0)\n      // Then use it to compute a sample point.\n      xEdges = new GeoPoint[]{xPlane.getSampleIntersectionPoint(planetModel, xVerticalPlane)};\n    } else {\n      xEdges = EMPTY_POINTS;\n    }\n\n    this.edgePoints = glueTogether(XminY,XmaxY,XminZ,XmaxZ,xEdges);\n  }\n\n","bugFix":["f64b7098768253180859cd8faeae6b1a185b06ed"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/dXYZSolid#dXYZSolid(PlanetModel,double,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/dXYZSolid#dXYZSolid(PlanetModel,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Sole constructor\n   *\n   *@param planetModel is the planet model.\n   *@param X is the X value.\n   *@param minY is the minimum Y value.\n   *@param maxY is the maximum Y value.\n   *@param minZ is the minimum Z value.\n   *@param maxZ is the maximum Z value.\n   */\n  public dXYZSolid(final PlanetModel planetModel,\n    final double X,\n    final double minY,\n    final double maxY,\n    final double minZ,\n    final double maxZ) {\n    super(planetModel);\n    // Argument checking\n    if (maxY - minY < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Y values in wrong order or identical\");\n    if (maxZ - minZ < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Z values in wrong order or identical\");\n\n    final double worldMinX = planetModel.getMinimumXValue();\n    final double worldMaxX = planetModel.getMaximumXValue();\n    \n    // Construct the planes\n    xPlane = new Plane(xUnitVector,-X);\n    minYPlane = new SidedPlane(0.0,maxY,0.0,yUnitVector,-minY);\n    maxYPlane = new SidedPlane(0.0,minY,0.0,yUnitVector,-maxY);\n    minZPlane = new SidedPlane(0.0,0.0,maxZ,zUnitVector,-minZ);\n    maxZPlane = new SidedPlane(0.0,0.0,minZ,zUnitVector,-maxZ);\n      \n    // We need at least one point on the planet surface for each manifestation of the shape.\n    // There can be up to 2 (on opposite sides of the world).  But we have to go through\n    // 4 combinations of adjacent planes in order to find out if any have 2 intersection solution.\n    // Typically, this requires 4 square root operations. \n    final GeoPoint[] XminY = xPlane.findIntersections(planetModel,minYPlane,maxYPlane,minZPlane,maxZPlane);\n    final GeoPoint[] XmaxY = xPlane.findIntersections(planetModel,maxYPlane,minYPlane,minZPlane,maxZPlane);\n    final GeoPoint[] XminZ = xPlane.findIntersections(planetModel,minZPlane,maxZPlane,minYPlane,maxYPlane);\n    final GeoPoint[] XmaxZ = xPlane.findIntersections(planetModel,maxZPlane,minZPlane,minYPlane,maxYPlane);\n\n    notableXPoints = glueTogether(XminY, XmaxY, XminZ, XmaxZ);\n\n    // Now, compute the edge points.\n    // This is the trickiest part of setting up an XYZSolid.  We've computed intersections already, so\n    // we'll start there.  We know that at most there will be two disconnected shapes on the planet surface.\n    // But there's also a case where exactly one plane slices through the world, and none of the bounding plane\n    // intersections do.  Thus, if we don't find any of the edge intersection cases, we have to look for that last case.\n      \n    // We need to look at single-plane/world intersections.\n    // We detect these by looking at the world model and noting its x, y, and z bounds.\n    // For the single-dimension degenerate case, there's really only one plane that can possibly intersect the world.\n    // The cases we are looking for are when the four corner points for any given\n    // plane are all outside of the world, AND that plane intersects the world.\n    // There are four corner points all told; we must evaluate these WRT the planet surface.\n    final boolean XminYminZ = planetModel.pointOutside(X, minY, minZ);\n    final boolean XminYmaxZ = planetModel.pointOutside(X, minY, maxZ);\n    final boolean XmaxYminZ = planetModel.pointOutside(X, maxY, minZ);\n    final boolean XmaxYmaxZ = planetModel.pointOutside(X, maxY, maxZ);\n\n    final GeoPoint[] xEdges;\n    if (X - worldMinX >= -Vector.MINIMUM_RESOLUTION && X - worldMaxX <= Vector.MINIMUM_RESOLUTION &&\n      minY < 0.0 && maxY > 0.0 && minZ < 0.0 && maxZ > 0.0 &&\n      XminYminZ && XminYmaxZ && XmaxYminZ && XmaxYmaxZ) {\n      // Find any point on the X plane that intersects the world\n      // First construct a perpendicular plane that will allow us to find a sample point.\n      // This plane is vertical and goes through the points (0,0,0) and (1,0,0)\n      // Then use it to compute a sample point.\n      final GeoPoint intPoint = xPlane.getSampleIntersectionPoint(planetModel, xVerticalPlane);\n      if (intPoint != null) {\n        xEdges = new GeoPoint[]{intPoint};\n      } else {\n        xEdges = EMPTY_POINTS;\n      }\n    } else {\n      xEdges = EMPTY_POINTS;\n    }\n\n    this.edgePoints = glueTogether(XminY,XmaxY,XminZ,XmaxZ,xEdges);\n  }\n\n","sourceOld":"  /**\n   * Sole constructor\n   *\n   *@param planetModel is the planet model.\n   *@param X is the X value.\n   *@param minY is the minimum Y value.\n   *@param maxY is the maximum Y value.\n   *@param minZ is the minimum Z value.\n   *@param maxZ is the maximum Z value.\n   */\n  public dXYZSolid(final PlanetModel planetModel,\n    final double X,\n    final double minY,\n    final double maxY,\n    final double minZ,\n    final double maxZ) {\n    super(planetModel);\n    // Argument checking\n    if (maxY - minY < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Y values in wrong order or identical\");\n    if (maxZ - minZ < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Z values in wrong order or identical\");\n\n    final double worldMinX = planetModel.getMinimumXValue();\n    final double worldMaxX = planetModel.getMaximumXValue();\n    \n    // Construct the planes\n    xPlane = new Plane(xUnitVector,-X);\n    minYPlane = new SidedPlane(0.0,maxY,0.0,yUnitVector,-minY);\n    maxYPlane = new SidedPlane(0.0,minY,0.0,yUnitVector,-maxY);\n    minZPlane = new SidedPlane(0.0,0.0,maxZ,zUnitVector,-minZ);\n    maxZPlane = new SidedPlane(0.0,0.0,minZ,zUnitVector,-maxZ);\n      \n    // We need at least one point on the planet surface for each manifestation of the shape.\n    // There can be up to 2 (on opposite sides of the world).  But we have to go through\n    // 4 combinations of adjacent planes in order to find out if any have 2 intersection solution.\n    // Typically, this requires 4 square root operations. \n    final GeoPoint[] XminY = xPlane.findIntersections(planetModel,minYPlane,maxYPlane,minZPlane,maxZPlane);\n    final GeoPoint[] XmaxY = xPlane.findIntersections(planetModel,maxYPlane,minYPlane,minZPlane,maxZPlane);\n    final GeoPoint[] XminZ = xPlane.findIntersections(planetModel,minZPlane,maxZPlane,minYPlane,maxYPlane);\n    final GeoPoint[] XmaxZ = xPlane.findIntersections(planetModel,maxZPlane,minZPlane,minYPlane,maxYPlane);\n\n    notableXPoints = glueTogether(XminY, XmaxY, XminZ, XmaxZ);\n\n    // Now, compute the edge points.\n    // This is the trickiest part of setting up an XYZSolid.  We've computed intersections already, so\n    // we'll start there.  We know that at most there will be two disconnected shapes on the planet surface.\n    // But there's also a case where exactly one plane slices through the world, and none of the bounding plane\n    // intersections do.  Thus, if we don't find any of the edge intersection cases, we have to look for that last case.\n      \n    // We need to look at single-plane/world intersections.\n    // We detect these by looking at the world model and noting its x, y, and z bounds.\n    // For the single-dimension degenerate case, there's really only one plane that can possibly intersect the world.\n    // The cases we are looking for are when the four corner points for any given\n    // plane are all outside of the world, AND that plane intersects the world.\n    // There are four corner points all told; we must evaluate these WRT the planet surface.\n    final boolean XminYminZ = planetModel.pointOutside(X, minY, minZ);\n    final boolean XminYmaxZ = planetModel.pointOutside(X, minY, maxZ);\n    final boolean XmaxYminZ = planetModel.pointOutside(X, maxY, minZ);\n    final boolean XmaxYmaxZ = planetModel.pointOutside(X, maxY, maxZ);\n\n    final GeoPoint[] xEdges;\n    if (X - worldMinX >= -Vector.MINIMUM_RESOLUTION && X - worldMaxX <= Vector.MINIMUM_RESOLUTION &&\n      minY < 0.0 && maxY > 0.0 && minZ < 0.0 && maxZ > 0.0 &&\n      XminYminZ && XminYmaxZ && XmaxYminZ && XmaxYmaxZ) {\n      // Find any point on the X plane that intersects the world\n      // First construct a perpendicular plane that will allow us to find a sample point.\n      // This plane is vertical and goes through the points (0,0,0) and (1,0,0)\n      // Then use it to compute a sample point.\n      final GeoPoint intPoint = xPlane.getSampleIntersectionPoint(planetModel, xVerticalPlane);\n      if (intPoint != null) {\n        xEdges = new GeoPoint[]{intPoint};\n      } else {\n        xEdges = EMPTY_POINTS;\n      }\n    } else {\n      xEdges = EMPTY_POINTS;\n    }\n\n    this.edgePoints = glueTogether(XminY,XmaxY,XminZ,XmaxZ,xEdges);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d8f71af177fad4bbfdf462d318247e573faac27f":["f64b7098768253180859cd8faeae6b1a185b06ed"],"f64b7098768253180859cd8faeae6b1a185b06ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e444678504caf66a8060b1d514383aa4feac0c":["d8f71af177fad4bbfdf462d318247e573faac27f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"d8f71af177fad4bbfdf462d318247e573faac27f":["b4e444678504caf66a8060b1d514383aa4feac0c"],"f64b7098768253180859cd8faeae6b1a185b06ed":["d8f71af177fad4bbfdf462d318247e573faac27f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f64b7098768253180859cd8faeae6b1a185b06ed"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}