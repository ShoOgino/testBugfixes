{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","sourceNew":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg changing intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false, fieldName);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                // docFreq counts deletes\n                if(totalNumDocs < docFreq) {\n                  docFreq = totalNumDocs;\n                }\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","sourceOld":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg changing intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false, fieldName);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                // docFreq counts deletes\n                if(totalNumDocs < docFreq) {\n                  docFreq = totalNumDocs;\n                }\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","sourceNew":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg changing intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false, fieldName);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                // docFreq counts deletes\n                if(totalNumDocs < docFreq) {\n                  docFreq = totalNumDocs;\n                }\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","sourceOld":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg changing intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false, fieldName);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                // docFreq counts deletes\n                if(totalNumDocs < docFreq) {\n                  docFreq = totalNumDocs;\n                }\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}