{"path":"solr/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testAlgorithms().mjava","commits":[{"id":"45e349695223fccf7b1b9d08ba85a1c919b06f7c","date":1277292317,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testAlgorithms().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPhoneticFilter#testAlgorithms().mjava","sourceNew":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(\"Metaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(\"Metaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(\"DoubleMetaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(\"DoubleMetaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(\"Soundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(\"Soundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(\"RefinedSoundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(\"RefinedSoundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(\"Caverphone\", \"true\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(\"Caverphone\", \"false\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n  }\n\n","sourceOld":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(\"Metaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(\"Metaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(\"DoubleMetaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(\"DoubleMetaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(\"Soundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(\"Soundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(\"RefinedSoundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(\"RefinedSoundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(\"Caverphone\", \"true\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(\"Caverphone\", \"false\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testAlgorithms().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPhoneticFilter#testAlgorithms().mjava","sourceNew":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(\"Metaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(\"Metaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(\"DoubleMetaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(\"DoubleMetaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(\"Soundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(\"Soundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(\"RefinedSoundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(\"RefinedSoundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(\"Caverphone\", \"true\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(\"Caverphone\", \"false\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n  }\n\n","sourceOld":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(\"Metaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(\"Metaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(\"DoubleMetaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(\"DoubleMetaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(\"Soundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(\"Soundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(\"RefinedSoundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(\"RefinedSoundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(\"Caverphone\", \"true\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(\"Caverphone\", \"false\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testAlgorithms().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testAlgorithms().mjava","sourceNew":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(\"Metaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(\"Metaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(\"DoubleMetaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(\"DoubleMetaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(\"Soundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(\"Soundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(\"RefinedSoundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(\"RefinedSoundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(\"Caverphone\", \"true\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(\"Caverphone\", \"false\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n  }\n\n","sourceOld":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(\"Metaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(\"Metaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(\"DoubleMetaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(\"DoubleMetaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(\"Soundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(\"Soundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(\"RefinedSoundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(\"RefinedSoundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(\"Caverphone\", \"true\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(\"Caverphone\", \"false\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testAlgorithms().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testAlgorithms().mjava","sourceNew":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(\"Metaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(\"Metaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(\"DoubleMetaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(\"DoubleMetaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(\"Soundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(\"Soundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(\"RefinedSoundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(\"RefinedSoundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(\"Caverphone\", \"true\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(\"Caverphone\", \"false\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n  }\n\n","sourceOld":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(\"Metaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(\"Metaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(\"DoubleMetaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(\"DoubleMetaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(\"Soundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(\"Soundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(\"RefinedSoundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(\"RefinedSoundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(\"Caverphone\", \"true\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(\"Caverphone\", \"false\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testAlgorithms().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testAlgorithms().mjava","sourceNew":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(\"Metaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(\"Metaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(\"DoubleMetaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(\"DoubleMetaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(\"Soundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(\"Soundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(\"RefinedSoundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(\"RefinedSoundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(\"Caverphone\", \"true\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(\"Caverphone\", \"false\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n  }\n\n","sourceOld":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(\"Metaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(\"Metaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(\"DoubleMetaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(\"DoubleMetaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(\"Soundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(\"Soundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(\"RefinedSoundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(\"RefinedSoundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(\"Caverphone\", \"true\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(\"Caverphone\", \"false\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"45e349695223fccf7b1b9d08ba85a1c919b06f7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["45e349695223fccf7b1b9d08ba85a1c919b06f7c"],"c26f00b574427b55127e869b935845554afde1fa":["45e349695223fccf7b1b9d08ba85a1c919b06f7c","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["45e349695223fccf7b1b9d08ba85a1c919b06f7c"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45e349695223fccf7b1b9d08ba85a1c919b06f7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"45e349695223fccf7b1b9d08ba85a1c919b06f7c":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45e349695223fccf7b1b9d08ba85a1c919b06f7c","5f4e87790277826a2aea119328600dfb07761f32"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}