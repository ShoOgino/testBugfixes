{"path":"solr/core/src/test/org/apache/solr/CursorPagingTest#randomUsableUnicodeString().mjava","commits":[{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#randomUsableUnicodeString().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * We want \"realistic\" unicode strings beyond simple ascii, but because our\n   * updates use XML we need to ensure we don't get \"special\" code block.\n   */\n  private static String randomUsableUnicodeString() {\n    String result = _TestUtil.randomRealisticUnicodeString(random());\n    if (result.matches(\".*\\\\p{InSpecials}.*\")) {\n      // oh well\n      result = _TestUtil.randomSimpleString(random());\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#randomUsableUnicodeString().mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#randomUsableUnicodeString().mjava","sourceNew":"  /**\n   * We want \"realistic\" unicode strings beyond simple ascii, but because our\n   * updates use XML we need to ensure we don't get \"special\" code block.\n   */\n  private static String randomUsableUnicodeString() {\n    String result = TestUtil.randomRealisticUnicodeString(random());\n    if (result.matches(\".*\\\\p{InSpecials}.*\")) {\n      // oh well\n      result = TestUtil.randomSimpleString(random());\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * We want \"realistic\" unicode strings beyond simple ascii, but because our\n   * updates use XML we need to ensure we don't get \"special\" code block.\n   */\n  private static String randomUsableUnicodeString() {\n    String result = _TestUtil.randomRealisticUnicodeString(random());\n    if (result.matches(\".*\\\\p{InSpecials}.*\")) {\n      // oh well\n      result = _TestUtil.randomSimpleString(random());\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomXmlUsableUnicodeString().mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#randomUsableUnicodeString().mjava","sourceNew":"  /**\n   * We want \"realistic\" unicode strings beyond simple ascii, but because our\n   * updates use XML we need to ensure we don't get \"special\" code block.\n   */\n  public static String randomXmlUsableUnicodeString() {\n    String result = TestUtil.randomRealisticUnicodeString(random());\n    if (result.matches(\".*\\\\p{InSpecials}.*\")) {\n      result = TestUtil.randomSimpleString(random());\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * We want \"realistic\" unicode strings beyond simple ascii, but because our\n   * updates use XML we need to ensure we don't get \"special\" code block.\n   */\n  private static String randomUsableUnicodeString() {\n    String result = TestUtil.randomRealisticUnicodeString(random());\n    if (result.matches(\".*\\\\p{InSpecials}.*\")) {\n      // oh well\n      result = TestUtil.randomSimpleString(random());\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92751ba9273251eab6a2e379ec42a1697a32ff96"]},"commit2Childs":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}