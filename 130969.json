{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","sourceNew":"  static Integer readInterval(String interval) {\n    if (interval == null)\n      return null;\n    int result = 0;\n    if (interval != null) {\n      Matcher m = INTERVAL_PATTERN.matcher(interval.trim());\n      if (m.find()) {\n        String hr = m.group(1);\n        String min = m.group(2);\n        String sec = m.group(3);\n        result = 0;\n        try {\n          if (sec != null && sec.length() > 0)\n            result += Integer.parseInt(sec);\n          if (min != null && min.length() > 0)\n            result += (60 * Integer.parseInt(min));\n          if (hr != null && hr.length() > 0)\n            result += (60 * 60 * Integer.parseInt(hr));\n          result *= 1000;\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  INTERVAL_ERR_MSG);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                INTERVAL_ERR_MSG);\n      }\n\n    }\n    return result;\n  }\n\n","sourceOld":"  static Integer readInterval(String interval) {\n    if (interval == null)\n      return null;\n    int result = 0;\n    if (interval != null) {\n      Matcher m = INTERVAL_PATTERN.matcher(interval.trim());\n      if (m.find()) {\n        String hr = m.group(1);\n        String min = m.group(2);\n        String sec = m.group(3);\n        result = 0;\n        try {\n          if (sec != null && sec.length() > 0)\n            result += Integer.parseInt(sec);\n          if (min != null && min.length() > 0)\n            result += (60 * Integer.parseInt(min));\n          if (hr != null && hr.length() > 0)\n            result += (60 * 60 * Integer.parseInt(hr));\n          result *= 1000;\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  INTERVAL_ERR_MSG);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                INTERVAL_ERR_MSG);\n      }\n\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","sourceNew":"  static Integer readInterval(String interval) {\n    if (interval == null)\n      return null;\n    int result = 0;\n    if (interval != null) {\n      Matcher m = INTERVAL_PATTERN.matcher(interval.trim());\n      if (m.find()) {\n        String hr = m.group(1);\n        String min = m.group(2);\n        String sec = m.group(3);\n        result = 0;\n        try {\n          if (sec != null && sec.length() > 0)\n            result += Integer.parseInt(sec);\n          if (min != null && min.length() > 0)\n            result += (60 * Integer.parseInt(min));\n          if (hr != null && hr.length() > 0)\n            result += (60 * 60 * Integer.parseInt(hr));\n          result *= 1000;\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  INTERVAL_ERR_MSG);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                INTERVAL_ERR_MSG);\n      }\n\n    }\n    return result;\n  }\n\n","sourceOld":"  static Integer readInterval(String interval) {\n    if (interval == null)\n      return null;\n    int result = 0;\n    if (interval != null) {\n      Matcher m = INTERVAL_PATTERN.matcher(interval.trim());\n      if (m.find()) {\n        String hr = m.group(1);\n        String min = m.group(2);\n        String sec = m.group(3);\n        result = 0;\n        try {\n          if (sec != null && sec.length() > 0)\n            result += Integer.parseInt(sec);\n          if (min != null && min.length() > 0)\n            result += (60 * Integer.parseInt(min));\n          if (hr != null && hr.length() > 0)\n            result += (60 * 60 * Integer.parseInt(hr));\n          result *= 1000;\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  INTERVAL_ERR_MSG);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                INTERVAL_ERR_MSG);\n      }\n\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","sourceNew":"  static Integer readInterval(String interval) {\n    if (interval == null)\n      return null;\n    int result = 0;\n    if (interval != null) {\n      Matcher m = INTERVAL_PATTERN.matcher(interval.trim());\n      if (m.find()) {\n        String hr = m.group(1);\n        String min = m.group(2);\n        String sec = m.group(3);\n        result = 0;\n        try {\n          if (sec != null && sec.length() > 0)\n            result += Integer.parseInt(sec);\n          if (min != null && min.length() > 0)\n            result += (60 * Integer.parseInt(min));\n          if (hr != null && hr.length() > 0)\n            result += (60 * 60 * Integer.parseInt(hr));\n          result *= 1000;\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  INTERVAL_ERR_MSG);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                INTERVAL_ERR_MSG);\n      }\n\n    }\n    return result;\n  }\n\n","sourceOld":"  static Integer readInterval(String interval) {\n    if (interval == null)\n      return null;\n    int result = 0;\n    if (interval != null) {\n      Matcher m = INTERVAL_PATTERN.matcher(interval.trim());\n      if (m.find()) {\n        String hr = m.group(1);\n        String min = m.group(2);\n        String sec = m.group(3);\n        result = 0;\n        try {\n          if (sec != null && sec.length() > 0)\n            result += Integer.parseInt(sec);\n          if (min != null && min.length() > 0)\n            result += (60 * Integer.parseInt(min));\n          if (hr != null && hr.length() > 0)\n            result += (60 * 60 * Integer.parseInt(hr));\n          result *= 1000;\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  INTERVAL_ERR_MSG);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                INTERVAL_ERR_MSG);\n      }\n\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dea8e36e8c36d610840396c282a5affe3f722f4e","date":1422297045,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","sourceNew":"  static Integer readInterval(String interval) {\n    if (interval == null)\n      return null;\n    int result = 0;\n    Matcher m = INTERVAL_PATTERN.matcher(interval.trim());\n    if (m.find()) {\n      String hr = m.group(1);\n      String min = m.group(2);\n      String sec = m.group(3);\n      result = 0;\n      try {\n        if (sec != null && sec.length() > 0)\n          result += Integer.parseInt(sec);\n        if (min != null && min.length() > 0)\n          result += (60 * Integer.parseInt(min));\n        if (hr != null && hr.length() > 0)\n          result += (60 * 60 * Integer.parseInt(hr));\n        result *= 1000;\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, INTERVAL_ERR_MSG);\n      }\n    } else {\n      throw new SolrException(ErrorCode.SERVER_ERROR, INTERVAL_ERR_MSG);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  static Integer readInterval(String interval) {\n    if (interval == null)\n      return null;\n    int result = 0;\n    if (interval != null) {\n      Matcher m = INTERVAL_PATTERN.matcher(interval.trim());\n      if (m.find()) {\n        String hr = m.group(1);\n        String min = m.group(2);\n        String sec = m.group(3);\n        result = 0;\n        try {\n          if (sec != null && sec.length() > 0)\n            result += Integer.parseInt(sec);\n          if (min != null && min.length() > 0)\n            result += (60 * Integer.parseInt(min));\n          if (hr != null && hr.length() > 0)\n            result += (60 * 60 * Integer.parseInt(hr));\n          result *= 1000;\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  INTERVAL_ERR_MSG);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                INTERVAL_ERR_MSG);\n      }\n\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":4,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","sourceNew":null,"sourceOld":"  static Integer readInterval(String interval) {\n    if (interval == null)\n      return null;\n    int result = 0;\n    Matcher m = INTERVAL_PATTERN.matcher(interval.trim());\n    if (m.find()) {\n      String hr = m.group(1);\n      String min = m.group(2);\n      String sec = m.group(3);\n      result = 0;\n      try {\n        if (sec != null && sec.length() > 0)\n          result += Integer.parseInt(sec);\n        if (min != null && min.length() > 0)\n          result += (60 * Integer.parseInt(min));\n        if (hr != null && hr.length() > 0)\n          result += (60 * 60 * Integer.parseInt(hr));\n        result *= 1000;\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, INTERVAL_ERR_MSG);\n      }\n    } else {\n      throw new SolrException(ErrorCode.SERVER_ERROR, INTERVAL_ERR_MSG);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","sourceNew":null,"sourceOld":"  static Integer readInterval(String interval) {\n    if (interval == null)\n      return null;\n    int result = 0;\n    Matcher m = INTERVAL_PATTERN.matcher(interval.trim());\n    if (m.find()) {\n      String hr = m.group(1);\n      String min = m.group(2);\n      String sec = m.group(3);\n      result = 0;\n      try {\n        if (sec != null && sec.length() > 0)\n          result += Integer.parseInt(sec);\n        if (min != null && min.length() > 0)\n          result += (60 * Integer.parseInt(min));\n        if (hr != null && hr.length() > 0)\n          result += (60 * 60 * Integer.parseInt(hr));\n        result *= 1000;\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, INTERVAL_ERR_MSG);\n      }\n    } else {\n      throw new SolrException(ErrorCode.SERVER_ERROR, INTERVAL_ERR_MSG);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["dea8e36e8c36d610840396c282a5affe3f722f4e","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["dea8e36e8c36d610840396c282a5affe3f722f4e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20f6b7cff3771384f27af0f059795d7e64aff6b9"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["dea8e36e8c36d610840396c282a5affe3f722f4e"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}