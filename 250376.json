{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testIllegalIndexableField().mjava","commits":[{"id":"ba3734ff991a3f9e0bd261c0e163ca407dfd235d","date":1375724104,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testIllegalIndexableField().mjava","pathOld":"/dev/null","sourceNew":"  public void testIllegalIndexableField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorPayloads(true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads without term vector positions (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorOffsets(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPositions(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector positions when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    w.close();\n    \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testIllegalIndexableField().mjava","pathOld":"/dev/null","sourceNew":"  public void testIllegalIndexableField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorPayloads(true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads without term vector positions (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorOffsets(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPositions(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector positions when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    w.close();\n    \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testIllegalIndexableField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testIllegalIndexableField().mjava","sourceNew":"  public void testIllegalIndexableField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorPayloads(true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads without term vector positions (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorOffsets(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPositions(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector positions when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    w.shutdown();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testIllegalIndexableField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorPayloads(true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads without term vector positions (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorOffsets(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPositions(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector positions when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    w.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testIllegalIndexableField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testIllegalIndexableField().mjava","sourceNew":"  public void testIllegalIndexableField() throws Exception {\n    Directory dir = newDirectory();\n    MockAnalyzer a = new MockAnalyzer(random());\n    a.setEnableChecks(false);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, a);\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorPayloads(true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads without term vector positions (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorOffsets(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPositions(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector positions when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads without term vector positions (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectors(true);\n    try {\n      new Field(\"field\", \"value\", ft);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vectors for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectorPositions(true);\n    try {\n      new Field(\"field\", \"value\", ft);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vector positions for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectorOffsets(true);\n    try {\n      new Field(\"field\", \"value\", ft);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vector offsets for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectorPayloads(true);\n    try {\n      new Field(\"field\", \"value\", ft);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vector payloads for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    w.shutdown();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testIllegalIndexableField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorPayloads(true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads without term vector positions (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorOffsets(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPositions(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector positions when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    w.shutdown();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testIllegalIndexableField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testIllegalIndexableField().mjava","sourceNew":"  public void testIllegalIndexableField() throws Exception {\n    Directory dir = newDirectory();\n    MockAnalyzer a = new MockAnalyzer(random());\n    a.setEnableChecks(false);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, a);\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorPayloads(true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads without term vector positions (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorOffsets(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPositions(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector positions when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads without term vector positions (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectors(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vectors for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectorPositions(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vector positions for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectorOffsets(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vector offsets for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vector payloads for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    w.shutdown();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testIllegalIndexableField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorPayloads(true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads without term vector positions (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorOffsets(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPositions(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector positions when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    w.shutdown();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testIllegalIndexableField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testIllegalIndexableField().mjava","sourceNew":"  public void testIllegalIndexableField() throws Exception {\n    Directory dir = newDirectory();\n    MockAnalyzer a = new MockAnalyzer(random());\n    a.setEnableChecks(false);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, a);\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorPayloads(true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads without term vector positions (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorOffsets(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPositions(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector positions when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads without term vector positions (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectors(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vectors for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectorPositions(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vector positions for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectorOffsets(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vector offsets for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vector payloads for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    w.shutdown();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testIllegalIndexableField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorPayloads(true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads without term vector positions (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorOffsets(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPositions(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector positions when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    w.shutdown();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testIllegalIndexableField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testIllegalIndexableField().mjava","sourceNew":"  public void testIllegalIndexableField() throws Exception {\n    Directory dir = newDirectory();\n    MockAnalyzer a = new MockAnalyzer(random());\n    a.setEnableChecks(false);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, a);\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorPayloads(true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads without term vector positions (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorOffsets(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPositions(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector positions when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads without term vector positions (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectors(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vectors for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectorPositions(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vector positions for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectorOffsets(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vector offsets for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vector payloads for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    w.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testIllegalIndexableField() throws Exception {\n    Directory dir = newDirectory();\n    MockAnalyzer a = new MockAnalyzer(random());\n    a.setEnableChecks(false);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, a);\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorPayloads(true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads without term vector positions (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorOffsets(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPositions(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector positions when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads without term vector positions (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectors(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vectors for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectorPositions(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vector positions for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectorOffsets(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vector offsets for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vector payloads for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    w.shutdown();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testIllegalIndexableField().mjava","sourceNew":null,"sourceOld":"  public void testIllegalIndexableField() throws Exception {\n    Directory dir = newDirectory();\n    MockAnalyzer a = new MockAnalyzer(random());\n    a.setEnableChecks(false);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, a);\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorPayloads(true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads without term vector positions (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorOffsets(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPositions(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector positions when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(false);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot index term vector payloads without term vector positions (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectors(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vectors for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectorPositions(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vector positions for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectorOffsets(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vector offsets for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    ft = new FieldType(StoredField.TYPE);\n    ft.setStoreTermVectorPayloads(true);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"value\", ft));\n    try {\n      w.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // Expected\n      assertEquals(\"cannot store term vector payloads for a field that is not indexed (field=\\\"field\\\")\", iae.getMessage());\n    }\n\n    w.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","52c7e49be259508735752fba88085255014a6ecf"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","3394716f52b34ab259ad5247e7595d9f9db6e935"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["ba3734ff991a3f9e0bd261c0e163ca407dfd235d"],"ba3734ff991a3f9e0bd261c0e163ca407dfd235d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"52c7e49be259508735752fba88085255014a6ecf":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","d0ef034a4f10871667ae75181537775ddcf8ade4"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","ba3734ff991a3f9e0bd261c0e163ca407dfd235d"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["05fe562aa248790944d43cdd478f512572835ba0"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","52c7e49be259508735752fba88085255014a6ecf"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"ba3734ff991a3f9e0bd261c0e163ca407dfd235d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}