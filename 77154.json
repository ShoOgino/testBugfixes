{"path":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == 0;\n          bottomOrd = 0;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == 0;\n          bottomOrd = 0;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f7cc7c185412da66c1d0089d9e75da01329a00","date":1353364851,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // -1 ord is null for all segments\n          assert ords[bottomSlot] == -1;\n          bottomOrd = -1;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == 0;\n          bottomOrd = 0;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // -1 ord is null for all segments\n          assert ords[bottomSlot] == -1;\n          bottomOrd = -1;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = termsIndex.lookupTerm(bottomValue, tempBR);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // -1 ord is null for all segments\n          assert ords[bottomSlot] == -1;\n          bottomOrd = -1;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b","date":1359664357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // -1 ord is null for all segments\n          assert ords[bottomSlot] == -1;\n          bottomOrd = -1;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = termsIndex.lookupTerm(bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // -1 ord is null for all segments\n          assert ords[bottomSlot] == -1;\n          bottomOrd = -1;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = termsIndex.lookupTerm(bottomValue, tempBR);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // -1 ord is null for all segments\n          assert ords[bottomSlot] == -1;\n          bottomOrd = -1;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = termsIndex.lookupTerm(bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == 0;\n          bottomOrd = 0;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":["85dda036bb5a8f3a7207746dd1e4f97b39efa1be"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7615b855702e008d91a95a2578bf05d27372f599","date":1389802891,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // missingOrd is null for all segments\n          assert ords[bottomSlot] == missingOrd;\n          bottomOrd = missingOrd;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int ord = termsIndex.lookupTerm(bottomValue);\n          if (ord < 0) {\n            bottomOrd = -ord - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = ord;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // -1 ord is null for all segments\n          assert ords[bottomSlot] == -1;\n          bottomOrd = -1;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = termsIndex.lookupTerm(bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // missingOrd is null for all segments\n          assert ords[bottomSlot] == missingOrd;\n          bottomOrd = missingOrd;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int ord = termsIndex.lookupTerm(bottomValue);\n          if (ord < 0) {\n            bottomOrd = -ord - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = ord;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // -1 ord is null for all segments\n          assert ords[bottomSlot] == -1;\n          bottomOrd = -1;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = termsIndex.lookupTerm(bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) throws IOException {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // missingOrd is null for all segments\n          assert ords[bottomSlot] == missingOrd;\n          bottomOrd = missingOrd;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int ord = termsIndex.lookupTerm(bottomValue);\n          if (ord < 0) {\n            bottomOrd = -ord - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = ord;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // missingOrd is null for all segments\n          assert ords[bottomSlot] == missingOrd;\n          bottomOrd = missingOrd;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int ord = termsIndex.lookupTerm(bottomValue);\n          if (ord < 0) {\n            bottomOrd = -ord - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = ord;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":["63bc3238545c6012bd44f5d294077997f236bc4e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) throws IOException {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // missingOrd is null for all segments\n          assert ords[bottomSlot] == missingOrd;\n          bottomOrd = missingOrd;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int ord = termsIndex.lookupTerm(bottomValue);\n          if (ord < 0) {\n            bottomOrd = -ord - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = ord;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // missingOrd is null for all segments\n          assert ords[bottomSlot] == missingOrd;\n          bottomOrd = missingOrd;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int ord = termsIndex.lookupTerm(bottomValue);\n          if (ord < 0) {\n            bottomOrd = -ord - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = ord;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7558b5077dd4abd457be151475f13b541f4f13e":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b"],"29f7cc7c185412da66c1d0089d9e75da01329a00":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["d4d69c535930b5cce125cff868d40f6373dc27d4","7615b855702e008d91a95a2578bf05d27372f599"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"7615b855702e008d91a95a2578bf05d27372f599":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["29f7cc7c185412da66c1d0089d9e75da01329a00"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["27ab7b234eab0cbc020836989b96ed430e1065bb","f7558b5077dd4abd457be151475f13b541f4f13e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7558b5077dd4abd457be151475f13b541f4f13e"]},"commit2Childs":{"f7558b5077dd4abd457be151475f13b541f4f13e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["27ab7b234eab0cbc020836989b96ed430e1065bb","7615b855702e008d91a95a2578bf05d27372f599"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["f7558b5077dd4abd457be151475f13b541f4f13e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"29f7cc7c185412da66c1d0089d9e75da01329a00":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4d69c535930b5cce125cff868d40f6373dc27d4","29f7cc7c185412da66c1d0089d9e75da01329a00"],"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7615b855702e008d91a95a2578bf05d27372f599":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}