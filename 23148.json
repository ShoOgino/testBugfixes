{"path":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#fill(int,int,long).mjava","commits":[{"id":"747628bb19a950ac2141b16756bdce9a47e94cc2","date":1338661284,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#fill(int,int,long).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void fill(int fromIndex, int toIndex, long val) {\n    assert PackedInts.bitsRequired(val) <= getBitsPerValue();\n    assert fromIndex <= toIndex;\n\n    // minimum number of values that use an exact number of full blocks\n    final int nAlignedValues = 64 / pgcd(64, bitsPerValue);\n    final int span = toIndex - fromIndex;\n    if (span <= 3 * nAlignedValues) {\n      // there needs be at least 2 * nAlignedValues aligned values for the\n      // block approach to be worth trying\n      super.fill(fromIndex, toIndex, val);\n      return;\n    }\n\n    // fill the first values naively until the next block start\n    final int fromIndexModNAlignedValues = fromIndex % nAlignedValues;\n    if (fromIndexModNAlignedValues != 0) {\n      for (int i = fromIndexModNAlignedValues; i < nAlignedValues; ++i) {\n        set(fromIndex++, val);\n      }\n    }\n    assert fromIndex % nAlignedValues == 0;\n\n    // compute the long[] blocks for nAlignedValues consecutive values and\n    // use them to set as many values as possible without applying any mask\n    // or shift\n    final int nAlignedBlocks = (nAlignedValues * bitsPerValue) >> 6;\n    final long[] nAlignedValuesBlocks;\n    {\n      Packed64 values = new Packed64(nAlignedValues, bitsPerValue);\n      for (int i = 0; i < nAlignedValues; ++i) {\n        values.set(i, val);\n      }\n      nAlignedValuesBlocks = values.blocks;\n      assert nAlignedBlocks <= nAlignedValuesBlocks.length;\n    }\n    final int startBlock = (int) (((long) fromIndex * bitsPerValue) >>> 6);\n    final int endBlock = (int) (((long) toIndex * bitsPerValue) >>> 6);\n    for (int  block = startBlock; block < endBlock; ++block) {\n      final long blockValue = nAlignedValuesBlocks[block % nAlignedBlocks];\n      blocks[block] = blockValue;\n    }\n\n    // fill the gap\n    for (int i = (int) (((long) endBlock << 6) / bitsPerValue); i < toIndex; ++i) {\n      set(i, val);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e88d4ca668409948aba3fb1b3708964e6035630b","date":1340974374,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#fill(int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#fill(int,int,long).mjava","sourceNew":"  @Override\n  public void fill(int fromIndex, int toIndex, long val) {\n    assert PackedInts.bitsRequired(val) <= getBitsPerValue();\n    assert fromIndex <= toIndex;\n\n    // minimum number of values that use an exact number of full blocks\n    final int nAlignedValues = 64 / gcd(64, bitsPerValue);\n    final int span = toIndex - fromIndex;\n    if (span <= 3 * nAlignedValues) {\n      // there needs be at least 2 * nAlignedValues aligned values for the\n      // block approach to be worth trying\n      super.fill(fromIndex, toIndex, val);\n      return;\n    }\n\n    // fill the first values naively until the next block start\n    final int fromIndexModNAlignedValues = fromIndex % nAlignedValues;\n    if (fromIndexModNAlignedValues != 0) {\n      for (int i = fromIndexModNAlignedValues; i < nAlignedValues; ++i) {\n        set(fromIndex++, val);\n      }\n    }\n    assert fromIndex % nAlignedValues == 0;\n\n    // compute the long[] blocks for nAlignedValues consecutive values and\n    // use them to set as many values as possible without applying any mask\n    // or shift\n    final int nAlignedBlocks = (nAlignedValues * bitsPerValue) >> 6;\n    final long[] nAlignedValuesBlocks;\n    {\n      Packed64 values = new Packed64(nAlignedValues, bitsPerValue);\n      for (int i = 0; i < nAlignedValues; ++i) {\n        values.set(i, val);\n      }\n      nAlignedValuesBlocks = values.blocks;\n      assert nAlignedBlocks <= nAlignedValuesBlocks.length;\n    }\n    final int startBlock = (int) (((long) fromIndex * bitsPerValue) >>> 6);\n    final int endBlock = (int) (((long) toIndex * bitsPerValue) >>> 6);\n    for (int  block = startBlock; block < endBlock; ++block) {\n      final long blockValue = nAlignedValuesBlocks[block % nAlignedBlocks];\n      blocks[block] = blockValue;\n    }\n\n    // fill the gap\n    for (int i = (int) (((long) endBlock << 6) / bitsPerValue); i < toIndex; ++i) {\n      set(i, val);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void fill(int fromIndex, int toIndex, long val) {\n    assert PackedInts.bitsRequired(val) <= getBitsPerValue();\n    assert fromIndex <= toIndex;\n\n    // minimum number of values that use an exact number of full blocks\n    final int nAlignedValues = 64 / pgcd(64, bitsPerValue);\n    final int span = toIndex - fromIndex;\n    if (span <= 3 * nAlignedValues) {\n      // there needs be at least 2 * nAlignedValues aligned values for the\n      // block approach to be worth trying\n      super.fill(fromIndex, toIndex, val);\n      return;\n    }\n\n    // fill the first values naively until the next block start\n    final int fromIndexModNAlignedValues = fromIndex % nAlignedValues;\n    if (fromIndexModNAlignedValues != 0) {\n      for (int i = fromIndexModNAlignedValues; i < nAlignedValues; ++i) {\n        set(fromIndex++, val);\n      }\n    }\n    assert fromIndex % nAlignedValues == 0;\n\n    // compute the long[] blocks for nAlignedValues consecutive values and\n    // use them to set as many values as possible without applying any mask\n    // or shift\n    final int nAlignedBlocks = (nAlignedValues * bitsPerValue) >> 6;\n    final long[] nAlignedValuesBlocks;\n    {\n      Packed64 values = new Packed64(nAlignedValues, bitsPerValue);\n      for (int i = 0; i < nAlignedValues; ++i) {\n        values.set(i, val);\n      }\n      nAlignedValuesBlocks = values.blocks;\n      assert nAlignedBlocks <= nAlignedValuesBlocks.length;\n    }\n    final int startBlock = (int) (((long) fromIndex * bitsPerValue) >>> 6);\n    final int endBlock = (int) (((long) toIndex * bitsPerValue) >>> 6);\n    for (int  block = startBlock; block < endBlock; ++block) {\n      final long blockValue = nAlignedValuesBlocks[block % nAlignedBlocks];\n      blocks[block] = blockValue;\n    }\n\n    // fill the gap\n    for (int i = (int) (((long) endBlock << 6) / bitsPerValue); i < toIndex; ++i) {\n      set(i, val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#fill(int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#fill(int,int,long).mjava","sourceNew":"  @Override\n  public void fill(int fromIndex, int toIndex, long val) {\n    assert PackedInts.bitsRequired(val) <= getBitsPerValue();\n    assert fromIndex <= toIndex;\n\n    // minimum number of values that use an exact number of full blocks\n    final int nAlignedValues = 64 / gcd(64, bitsPerValue);\n    final int span = toIndex - fromIndex;\n    if (span <= 3 * nAlignedValues) {\n      // there needs be at least 2 * nAlignedValues aligned values for the\n      // block approach to be worth trying\n      super.fill(fromIndex, toIndex, val);\n      return;\n    }\n\n    // fill the first values naively until the next block start\n    final int fromIndexModNAlignedValues = fromIndex % nAlignedValues;\n    if (fromIndexModNAlignedValues != 0) {\n      for (int i = fromIndexModNAlignedValues; i < nAlignedValues; ++i) {\n        set(fromIndex++, val);\n      }\n    }\n    assert fromIndex % nAlignedValues == 0;\n\n    // compute the long[] blocks for nAlignedValues consecutive values and\n    // use them to set as many values as possible without applying any mask\n    // or shift\n    final int nAlignedBlocks = (nAlignedValues * bitsPerValue) >> 6;\n    final long[] nAlignedValuesBlocks;\n    {\n      Packed64 values = new Packed64(nAlignedValues, bitsPerValue);\n      for (int i = 0; i < nAlignedValues; ++i) {\n        values.set(i, val);\n      }\n      nAlignedValuesBlocks = values.blocks;\n      assert nAlignedBlocks <= nAlignedValuesBlocks.length;\n    }\n    final int startBlock = (int) (((long) fromIndex * bitsPerValue) >>> 6);\n    final int endBlock = (int) (((long) toIndex * bitsPerValue) >>> 6);\n    for (int  block = startBlock; block < endBlock; ++block) {\n      final long blockValue = nAlignedValuesBlocks[block % nAlignedBlocks];\n      blocks[block] = blockValue;\n    }\n\n    // fill the gap\n    for (int i = (int) (((long) endBlock << 6) / bitsPerValue); i < toIndex; ++i) {\n      set(i, val);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void fill(int fromIndex, int toIndex, long val) {\n    assert PackedInts.bitsRequired(val) <= getBitsPerValue();\n    assert fromIndex <= toIndex;\n\n    // minimum number of values that use an exact number of full blocks\n    final int nAlignedValues = 64 / pgcd(64, bitsPerValue);\n    final int span = toIndex - fromIndex;\n    if (span <= 3 * nAlignedValues) {\n      // there needs be at least 2 * nAlignedValues aligned values for the\n      // block approach to be worth trying\n      super.fill(fromIndex, toIndex, val);\n      return;\n    }\n\n    // fill the first values naively until the next block start\n    final int fromIndexModNAlignedValues = fromIndex % nAlignedValues;\n    if (fromIndexModNAlignedValues != 0) {\n      for (int i = fromIndexModNAlignedValues; i < nAlignedValues; ++i) {\n        set(fromIndex++, val);\n      }\n    }\n    assert fromIndex % nAlignedValues == 0;\n\n    // compute the long[] blocks for nAlignedValues consecutive values and\n    // use them to set as many values as possible without applying any mask\n    // or shift\n    final int nAlignedBlocks = (nAlignedValues * bitsPerValue) >> 6;\n    final long[] nAlignedValuesBlocks;\n    {\n      Packed64 values = new Packed64(nAlignedValues, bitsPerValue);\n      for (int i = 0; i < nAlignedValues; ++i) {\n        values.set(i, val);\n      }\n      nAlignedValuesBlocks = values.blocks;\n      assert nAlignedBlocks <= nAlignedValuesBlocks.length;\n    }\n    final int startBlock = (int) (((long) fromIndex * bitsPerValue) >>> 6);\n    final int endBlock = (int) (((long) toIndex * bitsPerValue) >>> 6);\n    for (int  block = startBlock; block < endBlock; ++block) {\n      final long blockValue = nAlignedValuesBlocks[block % nAlignedBlocks];\n      blocks[block] = blockValue;\n    }\n\n    // fill the gap\n    for (int i = (int) (((long) endBlock << 6) / bitsPerValue); i < toIndex; ++i) {\n      set(i, val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff0cb4eabd8bb5c27d3a284e18c812a89958a66","date":1402928522,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#fill(int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#fill(int,int,long).mjava","sourceNew":"  @Override\n  public void fill(int fromIndex, int toIndex, long val) {\n    assert PackedInts.unsignedBitsRequired(val) <= getBitsPerValue();\n    assert fromIndex <= toIndex;\n\n    // minimum number of values that use an exact number of full blocks\n    final int nAlignedValues = 64 / gcd(64, bitsPerValue);\n    final int span = toIndex - fromIndex;\n    if (span <= 3 * nAlignedValues) {\n      // there needs be at least 2 * nAlignedValues aligned values for the\n      // block approach to be worth trying\n      super.fill(fromIndex, toIndex, val);\n      return;\n    }\n\n    // fill the first values naively until the next block start\n    final int fromIndexModNAlignedValues = fromIndex % nAlignedValues;\n    if (fromIndexModNAlignedValues != 0) {\n      for (int i = fromIndexModNAlignedValues; i < nAlignedValues; ++i) {\n        set(fromIndex++, val);\n      }\n    }\n    assert fromIndex % nAlignedValues == 0;\n\n    // compute the long[] blocks for nAlignedValues consecutive values and\n    // use them to set as many values as possible without applying any mask\n    // or shift\n    final int nAlignedBlocks = (nAlignedValues * bitsPerValue) >> 6;\n    final long[] nAlignedValuesBlocks;\n    {\n      Packed64 values = new Packed64(nAlignedValues, bitsPerValue);\n      for (int i = 0; i < nAlignedValues; ++i) {\n        values.set(i, val);\n      }\n      nAlignedValuesBlocks = values.blocks;\n      assert nAlignedBlocks <= nAlignedValuesBlocks.length;\n    }\n    final int startBlock = (int) (((long) fromIndex * bitsPerValue) >>> 6);\n    final int endBlock = (int) (((long) toIndex * bitsPerValue) >>> 6);\n    for (int  block = startBlock; block < endBlock; ++block) {\n      final long blockValue = nAlignedValuesBlocks[block % nAlignedBlocks];\n      blocks[block] = blockValue;\n    }\n\n    // fill the gap\n    for (int i = (int) (((long) endBlock << 6) / bitsPerValue); i < toIndex; ++i) {\n      set(i, val);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void fill(int fromIndex, int toIndex, long val) {\n    assert PackedInts.bitsRequired(val) <= getBitsPerValue();\n    assert fromIndex <= toIndex;\n\n    // minimum number of values that use an exact number of full blocks\n    final int nAlignedValues = 64 / gcd(64, bitsPerValue);\n    final int span = toIndex - fromIndex;\n    if (span <= 3 * nAlignedValues) {\n      // there needs be at least 2 * nAlignedValues aligned values for the\n      // block approach to be worth trying\n      super.fill(fromIndex, toIndex, val);\n      return;\n    }\n\n    // fill the first values naively until the next block start\n    final int fromIndexModNAlignedValues = fromIndex % nAlignedValues;\n    if (fromIndexModNAlignedValues != 0) {\n      for (int i = fromIndexModNAlignedValues; i < nAlignedValues; ++i) {\n        set(fromIndex++, val);\n      }\n    }\n    assert fromIndex % nAlignedValues == 0;\n\n    // compute the long[] blocks for nAlignedValues consecutive values and\n    // use them to set as many values as possible without applying any mask\n    // or shift\n    final int nAlignedBlocks = (nAlignedValues * bitsPerValue) >> 6;\n    final long[] nAlignedValuesBlocks;\n    {\n      Packed64 values = new Packed64(nAlignedValues, bitsPerValue);\n      for (int i = 0; i < nAlignedValues; ++i) {\n        values.set(i, val);\n      }\n      nAlignedValuesBlocks = values.blocks;\n      assert nAlignedBlocks <= nAlignedValuesBlocks.length;\n    }\n    final int startBlock = (int) (((long) fromIndex * bitsPerValue) >>> 6);\n    final int endBlock = (int) (((long) toIndex * bitsPerValue) >>> 6);\n    for (int  block = startBlock; block < endBlock; ++block) {\n      final long blockValue = nAlignedValuesBlocks[block % nAlignedBlocks];\n      blocks[block] = blockValue;\n    }\n\n    // fill the gap\n    for (int i = (int) (((long) endBlock << 6) / bitsPerValue); i < toIndex; ++i) {\n      set(i, val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#fill(int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#fill(int,int,long).mjava","sourceNew":"  @Override\n  public void fill(int fromIndex, int toIndex, long val) {\n    assert PackedInts.unsignedBitsRequired(val) <= getBitsPerValue();\n    assert fromIndex <= toIndex;\n\n    // minimum number of values that use an exact number of full blocks\n    final int nAlignedValues = 64 / gcd(64, bitsPerValue);\n    final int span = toIndex - fromIndex;\n    if (span <= 3 * nAlignedValues) {\n      // there needs be at least 2 * nAlignedValues aligned values for the\n      // block approach to be worth trying\n      super.fill(fromIndex, toIndex, val);\n      return;\n    }\n\n    // fill the first values naively until the next block start\n    final int fromIndexModNAlignedValues = fromIndex % nAlignedValues;\n    if (fromIndexModNAlignedValues != 0) {\n      for (int i = fromIndexModNAlignedValues; i < nAlignedValues; ++i) {\n        set(fromIndex++, val);\n      }\n    }\n    assert fromIndex % nAlignedValues == 0;\n\n    // compute the long[] blocks for nAlignedValues consecutive values and\n    // use them to set as many values as possible without applying any mask\n    // or shift\n    final int nAlignedBlocks = (nAlignedValues * bitsPerValue) >> 6;\n    final long[] nAlignedValuesBlocks;\n    {\n      Packed64 values = new Packed64(nAlignedValues, bitsPerValue);\n      for (int i = 0; i < nAlignedValues; ++i) {\n        values.set(i, val);\n      }\n      nAlignedValuesBlocks = values.blocks;\n      assert nAlignedBlocks <= nAlignedValuesBlocks.length;\n    }\n    final int startBlock = (int) (((long) fromIndex * bitsPerValue) >>> 6);\n    final int endBlock = (int) (((long) toIndex * bitsPerValue) >>> 6);\n    for (int  block = startBlock; block < endBlock; ++block) {\n      final long blockValue = nAlignedValuesBlocks[block % nAlignedBlocks];\n      blocks[block] = blockValue;\n    }\n\n    // fill the gap\n    for (int i = (int) (((long) endBlock << 6) / bitsPerValue); i < toIndex; ++i) {\n      set(i, val);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void fill(int fromIndex, int toIndex, long val) {\n    assert PackedInts.bitsRequired(val) <= getBitsPerValue();\n    assert fromIndex <= toIndex;\n\n    // minimum number of values that use an exact number of full blocks\n    final int nAlignedValues = 64 / gcd(64, bitsPerValue);\n    final int span = toIndex - fromIndex;\n    if (span <= 3 * nAlignedValues) {\n      // there needs be at least 2 * nAlignedValues aligned values for the\n      // block approach to be worth trying\n      super.fill(fromIndex, toIndex, val);\n      return;\n    }\n\n    // fill the first values naively until the next block start\n    final int fromIndexModNAlignedValues = fromIndex % nAlignedValues;\n    if (fromIndexModNAlignedValues != 0) {\n      for (int i = fromIndexModNAlignedValues; i < nAlignedValues; ++i) {\n        set(fromIndex++, val);\n      }\n    }\n    assert fromIndex % nAlignedValues == 0;\n\n    // compute the long[] blocks for nAlignedValues consecutive values and\n    // use them to set as many values as possible without applying any mask\n    // or shift\n    final int nAlignedBlocks = (nAlignedValues * bitsPerValue) >> 6;\n    final long[] nAlignedValuesBlocks;\n    {\n      Packed64 values = new Packed64(nAlignedValues, bitsPerValue);\n      for (int i = 0; i < nAlignedValues; ++i) {\n        values.set(i, val);\n      }\n      nAlignedValuesBlocks = values.blocks;\n      assert nAlignedBlocks <= nAlignedValuesBlocks.length;\n    }\n    final int startBlock = (int) (((long) fromIndex * bitsPerValue) >>> 6);\n    final int endBlock = (int) (((long) toIndex * bitsPerValue) >>> 6);\n    for (int  block = startBlock; block < endBlock; ++block) {\n      final long blockValue = nAlignedValuesBlocks[block % nAlignedBlocks];\n      blocks[block] = blockValue;\n    }\n\n    // fill the gap\n    for (int i = (int) (((long) endBlock << 6) / bitsPerValue); i < toIndex; ++i) {\n      set(i, val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["e88d4ca668409948aba3fb1b3708964e6035630b"],"e88d4ca668409948aba3fb1b3708964e6035630b":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["747628bb19a950ac2141b16756bdce9a47e94cc2","e88d4ca668409948aba3fb1b3708964e6035630b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["e88d4ca668409948aba3fb1b3708964e6035630b","dff0cb4eabd8bb5c27d3a284e18c812a89958a66"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66"]},"commit2Childs":{"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e88d4ca668409948aba3fb1b3708964e6035630b":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66","fe33227f6805edab2036cbb80645cc4e2d1fa424","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"747628bb19a950ac2141b16756bdce9a47e94cc2":["e88d4ca668409948aba3fb1b3708964e6035630b","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}