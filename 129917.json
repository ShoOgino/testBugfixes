{"path":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#unpackEntries(TarArchiveInputStream,TarArchiveEntry,File).mjava","commits":[{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#unpackEntries(TarArchiveInputStream,TarArchiveEntry,File).mjava","pathOld":"/dev/null","sourceNew":"  private static void unpackEntries(TarArchiveInputStream tis,\n                                    TarArchiveEntry entry, File outputDir) throws IOException {\n    String targetDirPath = outputDir.getCanonicalPath() + File.separator;\n    File outputFile = new File(outputDir, entry.getName());\n    if (!outputFile.getCanonicalPath().startsWith(targetDirPath)) {\n      throw new IOException(\"expanding \" + entry.getName()\n          + \" would create entry outside of \" + outputDir);\n    }\n\n    if (entry.isDirectory()) {\n      File subDir = new File(outputDir, entry.getName());\n      if (!subDir.mkdirs() && !subDir.isDirectory()) {\n        throw new IOException(\"Mkdirs failed to create tar internal dir \"\n            + outputDir);\n      }\n\n      for (TarArchiveEntry e : entry.getDirectoryEntries()) {\n        unpackEntries(tis, e, subDir);\n      }\n\n      return;\n    }\n\n    if (entry.isSymbolicLink()) {\n      // Create symbolic link relative to tar parent dir\n      Files.createSymbolicLink(FileSystems.getDefault()\n              .getPath(outputDir.getPath(), entry.getName()),\n          FileSystems.getDefault().getPath(entry.getLinkName()));\n      return;\n    }\n\n    if (!outputFile.getParentFile().exists()) {\n      if (!outputFile.getParentFile().mkdirs()) {\n        throw new IOException(\"Mkdirs failed to create tar internal dir \"\n            + outputDir);\n      }\n    }\n\n    if (entry.isLink()) {\n      File src = new File(outputDir, entry.getLinkName());\n      HardLink.createHardLink(src, outputFile);\n      return;\n    }\n\n    int count;\n    byte data[] = new byte[2048];\n    try (BufferedOutputStream outputStream = new BufferedOutputStream(\n        new FileOutputStream(outputFile));) {\n\n      while ((count = tis.read(data)) != -1) {\n        outputStream.write(data, 0, count);\n      }\n\n      outputStream.flush();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#unpackEntries(TarArchiveInputStream,TarArchiveEntry,File).mjava","pathOld":"/dev/null","sourceNew":"  private static void unpackEntries(TarArchiveInputStream tis,\n                                    TarArchiveEntry entry, File outputDir) throws IOException {\n    String targetDirPath = outputDir.getCanonicalPath() + File.separator;\n    File outputFile = new File(outputDir, entry.getName());\n    if (!outputFile.getCanonicalPath().startsWith(targetDirPath)) {\n      throw new IOException(\"expanding \" + entry.getName()\n          + \" would create entry outside of \" + outputDir);\n    }\n\n    if (entry.isDirectory()) {\n      File subDir = new File(outputDir, entry.getName());\n      if (!subDir.mkdirs() && !subDir.isDirectory()) {\n        throw new IOException(\"Mkdirs failed to create tar internal dir \"\n            + outputDir);\n      }\n\n      for (TarArchiveEntry e : entry.getDirectoryEntries()) {\n        unpackEntries(tis, e, subDir);\n      }\n\n      return;\n    }\n\n    if (entry.isSymbolicLink()) {\n      // Create symbolic link relative to tar parent dir\n      Files.createSymbolicLink(FileSystems.getDefault()\n              .getPath(outputDir.getPath(), entry.getName()),\n          FileSystems.getDefault().getPath(entry.getLinkName()));\n      return;\n    }\n\n    if (!outputFile.getParentFile().exists()) {\n      if (!outputFile.getParentFile().mkdirs()) {\n        throw new IOException(\"Mkdirs failed to create tar internal dir \"\n            + outputDir);\n      }\n    }\n\n    if (entry.isLink()) {\n      File src = new File(outputDir, entry.getLinkName());\n      HardLink.createHardLink(src, outputFile);\n      return;\n    }\n\n    int count;\n    byte data[] = new byte[2048];\n    try (BufferedOutputStream outputStream = new BufferedOutputStream(\n        new FileOutputStream(outputFile));) {\n\n      while ((count = tis.read(data)) != -1) {\n        outputStream.write(data, 0, count);\n      }\n\n      outputStream.flush();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bdf107cf16be0f22504ae184fed81596665a244"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}