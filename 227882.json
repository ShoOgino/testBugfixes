{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(line.substring(flagSep + 1, end)));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n        if(ignoreCase) {\n          entry = entry.toLowerCase(Locale.ENGLISH);\n        }\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(line.substring(flagSep + 1, end)));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n        if(ignoreCase) {\n          entry = entry.toLowerCase(Locale.ENGLISH);\n        }\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640a015a5b43a8d9d05b311071bf93beb685e6b1","date":1338352782,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(flagPart));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n        if(ignoreCase) {\n          entry = entry.toLowerCase(Locale.ENGLISH);\n        }\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(line.substring(flagSep + 1, end)));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n        if(ignoreCase) {\n          entry = entry.toLowerCase(Locale.ENGLISH);\n        }\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(flagPart));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n        if(ignoreCase) {\n          entry = entry.toLowerCase(Locale.ROOT);\n        }\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(flagPart));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n        if(ignoreCase) {\n          entry = entry.toLowerCase(Locale.ENGLISH);\n        }\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","bugFix":null,"bugIntro":["3a23c50842ff5508c8cf403efde22f0255055700"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(flagPart));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n        if(ignoreCase) {\n          entry = entry.toLowerCase(Locale.ROOT);\n        }\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(flagPart));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n        if(ignoreCase) {\n          entry = entry.toLowerCase(Locale.ENGLISH);\n        }\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(flagPart));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n        if(ignoreCase) {\n          entry = entry.toLowerCase(Locale.ROOT);\n        }\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(flagPart));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n        if(ignoreCase) {\n          entry = entry.toLowerCase(Locale.ENGLISH);\n        }\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(flagPart));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n        if(ignoreCase) {\n          entry = entry.toLowerCase(Locale.ROOT);\n        }\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(flagPart));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n        if(ignoreCase) {\n          entry = entry.toLowerCase(Locale.ENGLISH);\n        }\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c011b4031a2ac8357f86f6998552baf0c74ea214","date":1372811779,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(flagPart));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n        if(ignoreCase) {\n          entry = entry.toLowerCase(Locale.ROOT);\n        }\n      }\n      \n      List<HunspellWord> entries = new ArrayList<HunspellWord>();\n      entries.add(wordForm);\n      words.put(entry, entries);\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(flagPart));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n        if(ignoreCase) {\n          entry = entry.toLowerCase(Locale.ROOT);\n        }\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a23c50842ff5508c8cf403efde22f0255055700","date":1372818356,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(flagPart));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n      }\n      if(ignoreCase) {\n        entry = entry.toLowerCase(Locale.ROOT);\n      }\n\n      List<HunspellWord> entries = new ArrayList<HunspellWord>();\n      entries.add(wordForm);\n      words.put(entry, entries);\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(flagPart));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n        if(ignoreCase) {\n          entry = entry.toLowerCase(Locale.ROOT);\n        }\n      }\n      \n      List<HunspellWord> entries = new ArrayList<HunspellWord>();\n      entries.add(wordForm);\n      words.put(entry, entries);\n    }\n  }\n\n","bugFix":["8f976917c54bb925b908d73fc4c2092e4abb8508","77d6144bb77983c683128c11b708057809173cff","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(flagPart));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n      }\n      if(ignoreCase) {\n        entry = entry.toLowerCase(Locale.ROOT);\n      }\n\n      List<HunspellWord> entries = new ArrayList<HunspellWord>();\n      entries.add(wordForm);\n      words.put(entry, entries);\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(flagPart));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n        if(ignoreCase) {\n          entry = entry.toLowerCase(Locale.ROOT);\n        }\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","sourceNew":null,"sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(flagPart));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n      }\n      if(ignoreCase) {\n        entry = entry.toLowerCase(Locale.ROOT);\n      }\n\n      List<HunspellWord> entries = new ArrayList<HunspellWord>();\n      entries.add(wordForm);\n      words.put(entry, entries);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","sourceNew":null,"sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(flagPart));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n      }\n      if(ignoreCase) {\n        entry = entry.toLowerCase(Locale.ROOT);\n      }\n\n      List<HunspellWord> entries = new ArrayList<HunspellWord>();\n      entries.add(wordForm);\n      words.put(entry, entries);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a23c50842ff5508c8cf403efde22f0255055700":["c011b4031a2ac8357f86f6998552baf0c74ea214"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["2acf500f78aa12b92e371fd89c719291986b6b90","3a23c50842ff5508c8cf403efde22f0255055700"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["640a015a5b43a8d9d05b311071bf93beb685e6b1"],"c011b4031a2ac8357f86f6998552baf0c74ea214":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["640a015a5b43a8d9d05b311071bf93beb685e6b1","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"46d8ada1fff8d18cb197c38c7983225162599948":["640a015a5b43a8d9d05b311071bf93beb685e6b1","2acf500f78aa12b92e371fd89c719291986b6b90"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["3a23c50842ff5508c8cf403efde22f0255055700","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["3a23c50842ff5508c8cf403efde22f0255055700"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["640a015a5b43a8d9d05b311071bf93beb685e6b1","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"640a015a5b43a8d9d05b311071bf93beb685e6b1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba791bce8103c79e38f957e9c5a53a75871bd918"]},"commit2Childs":{"3a23c50842ff5508c8cf403efde22f0255055700":["37a0f60745e53927c4c876cfe5b5a58170f0646c","ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"c011b4031a2ac8357f86f6998552baf0c74ea214":["3a23c50842ff5508c8cf403efde22f0255055700"],"2acf500f78aa12b92e371fd89c719291986b6b90":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c011b4031a2ac8357f86f6998552baf0c74ea214","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["640a015a5b43a8d9d05b311071bf93beb685e6b1"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"640a015a5b43a8d9d05b311071bf93beb685e6b1":["9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}