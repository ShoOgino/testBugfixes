{"path":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String,String,boolean).mjava","commits":[{"id":"52c5280f6286c7546ab75b72c663f7bb1dc10e96","date":1427372570,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix,\n                                             String contains,\n                                             boolean ignoreCase) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBytesRef = prefix != null ? new BytesRef(prefix) : null;\n    BytesRef containsRef = contains != null ? new BytesRef(contains) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBytesRef, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // it's a single-valued numeric field: we must currently create insanity :(\n      // there isn't a GroupedFacetCollector that works on numerics right now...\n      searcher.search(new FilteredQuery(new MatchAllDocsQuery(), base.getTopFilter()), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          LeafReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(new FilteredQuery(new MatchAllDocsQuery(), base.getTopFilter()), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      //:TODO:can we do contains earlier than this to make it more efficient?\n      if (containsRef != null && !StringHelper.contains(facetEntry.getValue(), containsRef, ignoreCase)) {\n        continue;\n      }\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // it's a single-valued numeric field: we must currently create insanity :(\n      // there isn't a GroupedFacetCollector that works on numerics right now...\n      searcher.search(new FilteredQuery(new MatchAllDocsQuery(), base.getTopFilter()), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          LeafReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(new FilteredQuery(new MatchAllDocsQuery(), base.getTopFilter()), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix,\n                                             String contains,\n                                             boolean ignoreCase) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBytesRef = prefix != null ? new BytesRef(prefix) : null;\n    BytesRef containsRef = contains != null ? new BytesRef(contains) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBytesRef, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // it's a single-valued numeric field: we must currently create insanity :(\n      // there isn't a GroupedFacetCollector that works on numerics right now...\n      searcher.search(new FilteredQuery(new MatchAllDocsQuery(), base.getTopFilter()), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          LeafReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(new FilteredQuery(new MatchAllDocsQuery(), base.getTopFilter()), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      //:TODO:can we do contains earlier than this to make it more efficient?\n      if (containsRef != null && !StringHelper.contains(facetEntry.getValue(), containsRef, ignoreCase)) {\n        continue;\n      }\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5963c53b53608d00d165849e6b52e71b0209c9b6","date":1428506893,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String,String,boolean).mjava","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix,\n                                             String contains,\n                                             boolean ignoreCase) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBytesRef = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBytesRef, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // it's a single-valued numeric field: we must currently create insanity :(\n      // there isn't a GroupedFacetCollector that works on numerics right now...\n      searcher.search(new FilteredQuery(new MatchAllDocsQuery(), base.getTopFilter()), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          LeafReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(new FilteredQuery(new MatchAllDocsQuery(), base.getTopFilter()), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      //:TODO:can we do contains earlier than this to make it more efficient?\n      if (contains != null && !contains(facetEntry.getValue().utf8ToString(), contains, ignoreCase)) {\n        continue;\n      }\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix,\n                                             String contains,\n                                             boolean ignoreCase) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBytesRef = prefix != null ? new BytesRef(prefix) : null;\n    BytesRef containsRef = contains != null ? new BytesRef(contains) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBytesRef, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // it's a single-valued numeric field: we must currently create insanity :(\n      // there isn't a GroupedFacetCollector that works on numerics right now...\n      searcher.search(new FilteredQuery(new MatchAllDocsQuery(), base.getTopFilter()), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          LeafReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(new FilteredQuery(new MatchAllDocsQuery(), base.getTopFilter()), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      //:TODO:can we do contains earlier than this to make it more efficient?\n      if (containsRef != null && !StringHelper.contains(facetEntry.getValue(), containsRef, ignoreCase)) {\n        continue;\n      }\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String,String,boolean).mjava","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix,\n                                             String contains,\n                                             boolean ignoreCase) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBytesRef = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBytesRef, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // it's a single-valued numeric field: we must currently create insanity :(\n      // there isn't a GroupedFacetCollector that works on numerics right now...\n      searcher.search(base.getTopFilter(), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          LeafReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(base.getTopFilter(), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      //:TODO:can we do contains earlier than this to make it more efficient?\n      if (contains != null && !contains(facetEntry.getValue().utf8ToString(), contains, ignoreCase)) {\n        continue;\n      }\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix,\n                                             String contains,\n                                             boolean ignoreCase) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBytesRef = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBytesRef, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // it's a single-valued numeric field: we must currently create insanity :(\n      // there isn't a GroupedFacetCollector that works on numerics right now...\n      searcher.search(new FilteredQuery(new MatchAllDocsQuery(), base.getTopFilter()), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          LeafReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(new FilteredQuery(new MatchAllDocsQuery(), base.getTopFilter()), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      //:TODO:can we do contains earlier than this to make it more efficient?\n      if (contains != null && !contains(facetEntry.getValue().utf8ToString(), contains, ignoreCase)) {\n        continue;\n      }\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","bugFix":null,"bugIntro":["7de000bbb5f66603221a528f0fe972afe72a6b97"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7de000bbb5f66603221a528f0fe972afe72a6b97","date":1483586729,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String,String,boolean).mjava","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix,\n                                             String contains,\n                                             boolean ignoreCase) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBytesRef = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBytesRef, 128);\n    \n    Collector groupWrapper = getInsanityWrapper(groupField, collector);\n    Collector fieldWrapper = getInsanityWrapper(field, groupWrapper);\n    // When GroupedFacetCollector can handle numerics we can remove the wrapped collectors\n    searcher.search(base.getTopFilter(), fieldWrapper);\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      //:TODO:can we do contains earlier than this to make it more efficient?\n      if (contains != null && !contains(facetEntry.getValue().utf8ToString(), contains, ignoreCase)) {\n        continue;\n      }\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix,\n                                             String contains,\n                                             boolean ignoreCase) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBytesRef = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBytesRef, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // it's a single-valued numeric field: we must currently create insanity :(\n      // there isn't a GroupedFacetCollector that works on numerics right now...\n      searcher.search(base.getTopFilter(), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          LeafReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(base.getTopFilter(), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      //:TODO:can we do contains earlier than this to make it more efficient?\n      if (contains != null && !contains(facetEntry.getValue().utf8ToString(), contains, ignoreCase)) {\n        continue;\n      }\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","7e8b89f40d84573f3342b8fee0d8ff5408444c7e","1db68e96dd908fcd79ef809095822736aa601d08","8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String,String,boolean).mjava","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix,\n                                             String contains,\n                                             boolean ignoreCase) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBytesRef = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBytesRef, 128);\n    \n    Collector groupWrapper = getInsanityWrapper(groupField, collector);\n    Collector fieldWrapper = getInsanityWrapper(field, groupWrapper);\n    // When GroupedFacetCollector can handle numerics we can remove the wrapped collectors\n    searcher.search(base.getTopFilter(), fieldWrapper);\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      //:TODO:can we do contains earlier than this to make it more efficient?\n      if (contains != null && !contains(facetEntry.getValue().utf8ToString(), contains, ignoreCase)) {\n        continue;\n      }\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix,\n                                             String contains,\n                                             boolean ignoreCase) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBytesRef = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBytesRef, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // it's a single-valued numeric field: we must currently create insanity :(\n      // there isn't a GroupedFacetCollector that works on numerics right now...\n      searcher.search(base.getTopFilter(), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          LeafReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(base.getTopFilter(), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      //:TODO:can we do contains earlier than this to make it more efficient?\n      if (contains != null && !contains(facetEntry.getValue().utf8ToString(), contains, ignoreCase)) {\n        continue;\n      }\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"862ed062e72c1c01ecd8593b17804ac02b69cf0e","date":1486641184,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String,Predicate[BytesRef]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String,String,boolean).mjava","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix,\n                                             Predicate<BytesRef> termFilter) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBytesRef = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBytesRef, 128);\n    \n    Collector groupWrapper = getInsanityWrapper(groupField, collector);\n    Collector fieldWrapper = getInsanityWrapper(field, groupWrapper);\n    // When GroupedFacetCollector can handle numerics we can remove the wrapped collectors\n    searcher.search(base.getTopFilter(), fieldWrapper);\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      //:TODO:can we filter earlier than this to make it more efficient?\n      if (termFilter != null && !termFilter.test(facetEntry.getValue())) {\n        continue;\n      }\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix,\n                                             String contains,\n                                             boolean ignoreCase) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBytesRef = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBytesRef, 128);\n    \n    Collector groupWrapper = getInsanityWrapper(groupField, collector);\n    Collector fieldWrapper = getInsanityWrapper(field, groupWrapper);\n    // When GroupedFacetCollector can handle numerics we can remove the wrapped collectors\n    searcher.search(base.getTopFilter(), fieldWrapper);\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      //:TODO:can we do contains earlier than this to make it more efficient?\n      if (contains != null && !contains(facetEntry.getValue().utf8ToString(), contains, ignoreCase)) {\n        continue;\n      }\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","52c5280f6286c7546ab75b72c663f7bb1dc10e96"],"1db68e96dd908fcd79ef809095822736aa601d08":["5963c53b53608d00d165849e6b52e71b0209c9b6"],"862ed062e72c1c01ecd8593b17804ac02b69cf0e":["7de000bbb5f66603221a528f0fe972afe72a6b97"],"5963c53b53608d00d165849e6b52e71b0209c9b6":["52c5280f6286c7546ab75b72c663f7bb1dc10e96"],"52c5280f6286c7546ab75b72c663f7bb1dc10e96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7de000bbb5f66603221a528f0fe972afe72a6b97":["1db68e96dd908fcd79ef809095822736aa601d08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["862ed062e72c1c01ecd8593b17804ac02b69cf0e"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["1db68e96dd908fcd79ef809095822736aa601d08","7de000bbb5f66603221a528f0fe972afe72a6b97"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1db68e96dd908fcd79ef809095822736aa601d08":["7de000bbb5f66603221a528f0fe972afe72a6b97","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"862ed062e72c1c01ecd8593b17804ac02b69cf0e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5963c53b53608d00d165849e6b52e71b0209c9b6":["1db68e96dd908fcd79ef809095822736aa601d08"],"52c5280f6286c7546ab75b72c663f7bb1dc10e96":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5963c53b53608d00d165849e6b52e71b0209c9b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","52c5280f6286c7546ab75b72c663f7bb1dc10e96"],"7de000bbb5f66603221a528f0fe972afe72a6b97":["862ed062e72c1c01ecd8593b17804ac02b69cf0e","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"491c9672ec42582fe43960452dbd37f1c80fe0f0":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}