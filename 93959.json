{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#appendTo(Appendable,char).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#appendTo(Appendable,char).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#appendTo(Appendable,char).mjava","sourceNew":"  /**\n   * Build a string representation of the path, with its components separated\n   * by the given delimiter character. The resulting string is appended to a\n   * given Appendable, e.g., a StringBuilder, CharBuffer or Writer.\n   * <P>\n   * Note that the two cases of zero components and one component with zero\n   * length produce indistinguishable results (both of them append nothing).\n   * This is normally not a problem, because components should not normally\n   * have zero lengths.\n   * <P>\n   * An IOException can be thrown if the given Appendable's append() throws\n   * this exception.\n   */\n  public void appendTo(Appendable out, char delimiter) throws IOException {\n    if (ncomponents == 0) {\n      return; // just append nothing...\n    }\n    for (int i = 0; i < ends[0]; i++) {\n      out.append(chars[i]);\n    }\n    for (int j = 1; j < ncomponents; j++) {\n      out.append(delimiter);\n      for (int i = ends[j - 1]; i < ends[j]; i++) {\n        out.append(chars[i]);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Build a string representation of the path, with its components separated\n   * by the given delimiter character. The resulting string is appended to a\n   * given Appendable, e.g., a StringBuilder, CharBuffer or Writer.\n   * <P>\n   * Note that the two cases of zero components and one component with zero\n   * length produce indistinguishable results (both of them append nothing).\n   * This is normally not a problem, because components should not normally\n   * have zero lengths.\n   * <P>\n   * An IOException can be thrown if the given Appendable's append() throws\n   * this exception.\n   */\n  public void appendTo(Appendable out, char delimiter) throws IOException {\n    if (ncomponents == 0) {\n      return; // just append nothing...\n    }\n    for (int i = 0; i < ends[0]; i++) {\n      out.append(chars[i]);\n    }\n    for (int j = 1; j < ncomponents; j++) {\n      out.append(delimiter);\n      for (int i = ends[j - 1]; i < ends[j]; i++) {\n        out.append(chars[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#appendTo(Appendable,char).mjava","sourceNew":null,"sourceOld":"  /**\n   * Build a string representation of the path, with its components separated\n   * by the given delimiter character. The resulting string is appended to a\n   * given Appendable, e.g., a StringBuilder, CharBuffer or Writer.\n   * <P>\n   * Note that the two cases of zero components and one component with zero\n   * length produce indistinguishable results (both of them append nothing).\n   * This is normally not a problem, because components should not normally\n   * have zero lengths.\n   * <P>\n   * An IOException can be thrown if the given Appendable's append() throws\n   * this exception.\n   */\n  public void appendTo(Appendable out, char delimiter) throws IOException {\n    if (ncomponents == 0) {\n      return; // just append nothing...\n    }\n    for (int i = 0; i < ends[0]; i++) {\n      out.append(chars[i]);\n    }\n    for (int j = 1; j < ncomponents; j++) {\n      out.append(delimiter);\n      for (int i = ends[j - 1]; i < ends[j]; i++) {\n        out.append(chars[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#appendTo(Appendable,char).mjava","sourceNew":null,"sourceOld":"  /**\n   * Build a string representation of the path, with its components separated\n   * by the given delimiter character. The resulting string is appended to a\n   * given Appendable, e.g., a StringBuilder, CharBuffer or Writer.\n   * <P>\n   * Note that the two cases of zero components and one component with zero\n   * length produce indistinguishable results (both of them append nothing).\n   * This is normally not a problem, because components should not normally\n   * have zero lengths.\n   * <P>\n   * An IOException can be thrown if the given Appendable's append() throws\n   * this exception.\n   */\n  public void appendTo(Appendable out, char delimiter) throws IOException {\n    if (ncomponents == 0) {\n      return; // just append nothing...\n    }\n    for (int i = 0; i < ends[0]; i++) {\n      out.append(chars[i]);\n    }\n    for (int j = 1; j < ncomponents; j++) {\n      out.append(delimiter);\n      for (int i = ends[j - 1]; i < ends[j]; i++) {\n        out.append(chars[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}