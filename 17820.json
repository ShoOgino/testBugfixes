{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#calcRowsOrCols(double,double,double,double,double).mjava","commits":[{"id":"d19946da5b8a6505034a72adcb5bae87dd043ddd","date":1423451445,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#calcRowsOrCols(double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Computes the number of intervals (rows or columns) to cover a range given the sizes. */\n  private static int calcRowsOrCols(double cellRange, double cellMin, double requestRange, double requestMin,\n                                    double worldRange) {\n    assert requestMin >= cellMin;\n    //Idealistically this wouldn't be so complicated but we concern ourselves with overflow and edge cases\n    double range = (requestRange + (requestMin - cellMin));\n    if (range == 0) {\n      return 1;\n    }\n    final double intervals = Math.ceil(range / cellRange);\n    if (intervals > Integer.MAX_VALUE) {\n      return Integer.MAX_VALUE;//should result in an error soon (exceed thresholds)\n    }\n    // ensures we don't have more intervals than world bounds (possibly due to rounding/edge issue)\n    final long intervalsMax = Math.round(worldRange / cellRange);\n    if (intervalsMax > Integer.MAX_VALUE) {\n      //just return intervals\n      return (int) intervals;\n    }\n    return Math.min((int)intervalsMax, (int)intervals);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#calcRowsOrCols(double,double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#calcRowsOrCols(double,double,double,double,double).mjava","sourceNew":"  /** Computes the number of intervals (rows or columns) to cover a range given the sizes. */\n  private static int calcRowsOrCols(double cellRange, double cellMin, double requestRange, double requestMin,\n                                    double worldRange) {\n    assert requestMin >= cellMin;\n    //Idealistically this wouldn't be so complicated but we concern ourselves with overflow and edge cases\n    double range = (requestRange + (requestMin - cellMin));\n    if (range == 0) {\n      return 1;\n    }\n    final double intervals = Math.ceil(range / cellRange);\n    if (intervals > Integer.MAX_VALUE) {\n      return Integer.MAX_VALUE;//should result in an error soon (exceed thresholds)\n    }\n    // ensures we don't have more intervals than world bounds (possibly due to rounding/edge issue)\n    final long intervalsMax = Math.round(worldRange / cellRange);\n    if (intervalsMax > Integer.MAX_VALUE) {\n      //just return intervals\n      return (int) intervals;\n    }\n    return Math.min((int)intervalsMax, (int)intervals);\n  }\n\n","sourceOld":"  /** Computes the number of intervals (rows or columns) to cover a range given the sizes. */\n  private static int calcRowsOrCols(double cellRange, double cellMin, double requestRange, double requestMin,\n                                    double worldRange) {\n    assert requestMin >= cellMin;\n    //Idealistically this wouldn't be so complicated but we concern ourselves with overflow and edge cases\n    double range = (requestRange + (requestMin - cellMin));\n    if (range == 0) {\n      return 1;\n    }\n    final double intervals = Math.ceil(range / cellRange);\n    if (intervals > Integer.MAX_VALUE) {\n      return Integer.MAX_VALUE;//should result in an error soon (exceed thresholds)\n    }\n    // ensures we don't have more intervals than world bounds (possibly due to rounding/edge issue)\n    final long intervalsMax = Math.round(worldRange / cellRange);\n    if (intervalsMax > Integer.MAX_VALUE) {\n      //just return intervals\n      return (int) intervals;\n    }\n    return Math.min((int)intervalsMax, (int)intervals);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#calcRowsOrCols(double,double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#calcRowsOrCols(double,double,double,double,double).mjava","sourceNew":"  /** Computes the number of intervals (rows or columns) to cover a range given the sizes. */\n  private static int calcRowsOrCols(double cellRange, double cellMin, double requestRange, double requestMin,\n                                    double worldRange) {\n    assert requestMin >= cellMin;\n    //Idealistically this wouldn't be so complicated but we concern ourselves with overflow and edge cases\n    double range = (requestRange + (requestMin - cellMin));\n    if (range == 0) {\n      return 1;\n    }\n    final double intervals = Math.ceil(range / cellRange);\n    if (intervals > Integer.MAX_VALUE) {\n      return Integer.MAX_VALUE;//should result in an error soon (exceed thresholds)\n    }\n    // ensures we don't have more intervals than world bounds (possibly due to rounding/edge issue)\n    final long intervalsMax = Math.round(worldRange / cellRange);\n    if (intervalsMax > Integer.MAX_VALUE) {\n      //just return intervals\n      return (int) intervals;\n    }\n    return Math.min((int)intervalsMax, (int)intervals);\n  }\n\n","sourceOld":"  /** Computes the number of intervals (rows or columns) to cover a range given the sizes. */\n  private static int calcRowsOrCols(double cellRange, double cellMin, double requestRange, double requestMin,\n                                    double worldRange) {\n    assert requestMin >= cellMin;\n    //Idealistically this wouldn't be so complicated but we concern ourselves with overflow and edge cases\n    double range = (requestRange + (requestMin - cellMin));\n    if (range == 0) {\n      return 1;\n    }\n    final double intervals = Math.ceil(range / cellRange);\n    if (intervals > Integer.MAX_VALUE) {\n      return Integer.MAX_VALUE;//should result in an error soon (exceed thresholds)\n    }\n    // ensures we don't have more intervals than world bounds (possibly due to rounding/edge issue)\n    final long intervalsMax = Math.round(worldRange / cellRange);\n    if (intervalsMax > Integer.MAX_VALUE) {\n      //just return intervals\n      return (int) intervals;\n    }\n    return Math.min((int)intervalsMax, (int)intervals);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["d19946da5b8a6505034a72adcb5bae87dd043ddd","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["d19946da5b8a6505034a72adcb5bae87dd043ddd"],"d19946da5b8a6505034a72adcb5bae87dd043ddd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d19946da5b8a6505034a72adcb5bae87dd043ddd"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"d19946da5b8a6505034a72adcb5bae87dd043ddd":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}