{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finish(long,long,int).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finish(long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finish(long,long,int).mjava","sourceNew":"    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (termCount > 0) {\n        out.writeVInt(termCount);\n        out.writeVInt(field.number);\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(sumTotalTermFreq);\n        }\n        out.writeVLong(sumDocFreq);\n        out.writeVInt(docCount);\n        FST<BytesRef> fst = builder.finish();\n        if (doPackFST) {\n          fst = fst.pack(3, Math.max(10, fst.getNodeCount()/4), acceptableOverheadRatio);\n        }\n        fst.save(out);\n        //System.out.println(\"finish field=\" + field.name + \" fp=\" + out.getFilePointer());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (termCount > 0) {\n        out.writeVInt(termCount);\n        out.writeVInt(field.number);\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(sumTotalTermFreq);\n        }\n        out.writeVLong(sumDocFreq);\n        out.writeVInt(docCount);\n        FST<BytesRef> fst = builder.finish();\n        if (doPackFST) {\n          fst = fst.pack(3, Math.max(10, fst.getNodeCount()/4), acceptableOverheadRatio);\n        }\n        fst.save(out);\n        //System.out.println(\"finish field=\" + field.name + \" fp=\" + out.getFilePointer());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49f4d9c4e29f2345e789073801e7945431a23ca3","date":1355344131,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finish(long,long,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finish(long,long,int).mjava","sourceNew":"    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (termCount > 0) {\n        out.writeVInt(termCount);\n        out.writeVInt(field.number);\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(sumTotalTermFreq);\n        }\n        out.writeVLong(sumDocFreq);\n        out.writeVInt(docCount);\n        FST<BytesRef> fst = builder.finish();\n        fst.save(out);\n        //System.out.println(\"finish field=\" + field.name + \" fp=\" + out.getFilePointer());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (termCount > 0) {\n        out.writeVInt(termCount);\n        out.writeVInt(field.number);\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(sumTotalTermFreq);\n        }\n        out.writeVLong(sumDocFreq);\n        out.writeVInt(docCount);\n        FST<BytesRef> fst = builder.finish();\n        if (doPackFST) {\n          fst = fst.pack(3, Math.max(10, fst.getNodeCount()/4), acceptableOverheadRatio);\n        }\n        fst.save(out);\n        //System.out.println(\"finish field=\" + field.name + \" fp=\" + out.getFilePointer());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finish(long,long,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finish(long,long,int).mjava","sourceNew":"    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (termCount > 0) {\n        out.writeVInt(termCount);\n        out.writeVInt(field.number);\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(sumTotalTermFreq);\n        }\n        out.writeVLong(sumDocFreq);\n        out.writeVInt(docCount);\n        FST<BytesRef> fst = builder.finish();\n        fst.save(out);\n        //System.out.println(\"finish field=\" + field.name + \" fp=\" + out.getFilePointer());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (termCount > 0) {\n        out.writeVInt(termCount);\n        out.writeVInt(field.number);\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(sumTotalTermFreq);\n        }\n        out.writeVLong(sumDocFreq);\n        out.writeVInt(docCount);\n        FST<BytesRef> fst = builder.finish();\n        if (doPackFST) {\n          fst = fst.pack(3, Math.max(10, fst.getNodeCount()/4), acceptableOverheadRatio);\n        }\n        fst.save(out);\n        //System.out.println(\"finish field=\" + field.name + \" fp=\" + out.getFilePointer());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finish(long,long,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finish(long,long,int).mjava","sourceNew":"    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (termCount > 0) {\n        out.writeVInt(termCount);\n        out.writeVInt(field.number);\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(sumTotalTermFreq);\n        }\n        out.writeVLong(sumDocFreq);\n        out.writeVInt(docCount);\n        FST<BytesRef> fst = builder.finish();\n        fst.save(out);\n        //System.out.println(\"finish field=\" + field.name + \" fp=\" + out.getFilePointer());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (termCount > 0) {\n        out.writeVInt(termCount);\n        out.writeVInt(field.number);\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(sumTotalTermFreq);\n        }\n        out.writeVLong(sumDocFreq);\n        out.writeVInt(docCount);\n        FST<BytesRef> fst = builder.finish();\n        fst.save(out);\n        //System.out.println(\"finish field=\" + field.name + \" fp=\" + out.getFilePointer());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finish(long,long,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finish(long,long,int).mjava","sourceNew":"    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (termCount > 0) {\n        out.writeVInt(termCount);\n        out.writeVInt(field.number);\n        if (field.getIndexOptions() != IndexOptions.DOCS) {\n          out.writeVLong(sumTotalTermFreq);\n        }\n        out.writeVLong(sumDocFreq);\n        out.writeVInt(docCount);\n        FST<BytesRef> fst = builder.finish();\n        fst.save(out);\n        //System.out.println(\"finish field=\" + field.name + \" fp=\" + out.getFilePointer());\n      }\n    }\n\n","sourceOld":"    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (termCount > 0) {\n        out.writeVInt(termCount);\n        out.writeVInt(field.number);\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(sumTotalTermFreq);\n        }\n        out.writeVLong(sumDocFreq);\n        out.writeVInt(docCount);\n        FST<BytesRef> fst = builder.finish();\n        fst.save(out);\n        //System.out.println(\"finish field=\" + field.name + \" fp=\" + out.getFilePointer());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finish(long,long,int).mjava","sourceNew":null,"sourceOld":"    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (termCount > 0) {\n        out.writeVInt(termCount);\n        out.writeVInt(field.number);\n        if (field.getIndexOptions() != IndexOptions.DOCS) {\n          out.writeVLong(sumTotalTermFreq);\n        }\n        out.writeVLong(sumDocFreq);\n        out.writeVInt(docCount);\n        FST<BytesRef> fst = builder.finish();\n        fst.save(out);\n        //System.out.println(\"finish field=\" + field.name + \" fp=\" + out.getFilePointer());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","49f4d9c4e29f2345e789073801e7945431a23ca3"],"24f89e8a6aac05753cde4c83d62a74356098200d":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["49f4d9c4e29f2345e789073801e7945431a23ca3"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"],"49f4d9c4e29f2345e789073801e7945431a23ca3":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","49f4d9c4e29f2345e789073801e7945431a23ca3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["24f89e8a6aac05753cde4c83d62a74356098200d"],"49f4d9c4e29f2345e789073801e7945431a23ca3":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}