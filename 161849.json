{"path":"src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"e34a66231ee53fe909c5f7c0e71131fcb5246d89","date":1226598668,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/CSVRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(processor, params, false) && !RequestHandlerUtils.handleRollback(processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(processor, params, false);\n        RequestHandlerUtils.handleRollback(processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain( params.get( UpdateParams.UPDATE_PROCESSOR ) );\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      CSVLoader loader = new SingleThreadedCSVLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if( streams == null ) {\n        if (!RequestHandlerUtils.handleCommit(processor, params, false) && !RequestHandlerUtils.handleRollback(processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      }\n      else {\n\n        for(ContentStream stream : streams) {\n          Reader reader = stream.getReader();\n          try {\n            loader.errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n            loader.load(reader);\n          } finally {\n            IOUtils.closeQuietly(reader);\n          }\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit( processor, params, false );\n        RequestHandlerUtils.handleRollback(processor,  params, false );\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(processor, params, false) && !RequestHandlerUtils.handleRollback(processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(processor, params, false);\n        RequestHandlerUtils.handleRollback(processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(processor, params, false) && !RequestHandlerUtils.handleRollback(processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(processor, params, false);\n        RequestHandlerUtils.handleRollback(processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e34a66231ee53fe909c5f7c0e71131fcb5246d89"],"e34a66231ee53fe909c5f7c0e71131fcb5246d89":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e34a66231ee53fe909c5f7c0e71131fcb5246d89"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"e34a66231ee53fe909c5f7c0e71131fcb5246d89":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}