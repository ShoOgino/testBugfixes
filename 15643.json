{"path":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new RandomAccessWeight(this, boost) {\n\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        return context.reader().getDocsWithField(field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new RandomAccessWeight(this) {\n\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        return context.reader().getDocsWithField(field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new RandomAccessWeight(this, boost) {\n\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        return context.reader().getDocsWithField(field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new RandomAccessWeight(this, boost) {\n\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        return context.reader().getDocsWithField(field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8914a0d123cdba0648288fc001c35ec78dfe698a","date":1499266234,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e73d8d559120669b47658108d818b637df5456ea":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","8914a0d123cdba0648288fc001c35ec78dfe698a"],"8914a0d123cdba0648288fc001c35ec78dfe698a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8914a0d123cdba0648288fc001c35ec78dfe698a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e73d8d559120669b47658108d818b637df5456ea","8914a0d123cdba0648288fc001c35ec78dfe698a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"e73d8d559120669b47658108d818b637df5456ea":[],"8914a0d123cdba0648288fc001c35ec78dfe698a":["e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e73d8d559120669b47658108d818b637df5456ea","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}