{"path":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#testKeys().mjava","commits":[{"id":"eee9156bf08d7eaae5e8d8ab5f855ba61012e257","date":1285443157,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#testKeys().mjava","pathOld":"/dev/null","sourceNew":"  public void testKeys() throws IOException {\r\n    // Check that the keys are unique for different fields\r\n\r\n    EntryKey key_1 = new ByteValuesCreator( \"field1\", null ).getCacheKey();\r\n    EntryKey key_2 = new ByteValuesCreator( \"field2\", null ).getCacheKey();\r\n    assertThat(\"different fields should have a different key\", key_1, not(key_2) );\r\n\r\n    key_1 = new ByteValuesCreator(  \"field1\", null ).getCacheKey();\r\n    key_2 = new ShortValuesCreator( \"field1\", null ).getCacheKey();\r\n    assertThat( \"same field different type should have different key\", key_1, not( key_2 ) );\r\n\r\n    key_1 = new ByteValuesCreator( \"ff\", null ).getCacheKey();\r\n    key_2 = new ByteValuesCreator( \"ff\", null ).getCacheKey();\r\n    assertThat( \"same args should have same key\", key_1, is( key_2 ) );\r\n\r\n    key_1 = new ByteValuesCreator( \"ff\", null, ByteValuesCreator.OPTION_CACHE_BITS ^ ByteValuesCreator.OPTION_CACHE_VALUES ).getCacheKey();\r\n    key_2 = new ByteValuesCreator( \"ff\", null ).getCacheKey();\r\n    assertThat( \"different options should share same key\", key_1, is( key_2 ) );\r\n\r\n    key_1 = new IntValuesCreator( \"ff\", FieldCache.DEFAULT_INT_PARSER ).getCacheKey();\r\n    key_2 = new IntValuesCreator( \"ff\", FieldCache.NUMERIC_UTILS_INT_PARSER ).getCacheKey();\r\n    assertThat( \"diferent parser should have same key\", key_1, is( key_2 ) );\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","date":1286051536,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#testKeys().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#testKeys().mjava","sourceNew":"  public void testKeys() throws IOException {\n    // Check that the keys are unique for different fields\n\n    EntryKey key_1 = new ByteValuesCreator( \"field1\", null ).getCacheKey();\n    EntryKey key_2 = new ByteValuesCreator( \"field2\", null ).getCacheKey();\n    assertThat(\"different fields should have a different key\", key_1, not(key_2) );\n\n    key_1 = new ByteValuesCreator(  \"field1\", null ).getCacheKey();\n    key_2 = new ShortValuesCreator( \"field1\", null ).getCacheKey();\n    assertThat( \"same field different type should have different key\", key_1, not( key_2 ) );\n\n    key_1 = new ByteValuesCreator( \"ff\", null ).getCacheKey();\n    key_2 = new ByteValuesCreator( \"ff\", null ).getCacheKey();\n    assertThat( \"same args should have same key\", key_1, is( key_2 ) );\n\n    key_1 = new ByteValuesCreator( \"ff\", null, ByteValuesCreator.OPTION_CACHE_BITS ^ ByteValuesCreator.OPTION_CACHE_VALUES ).getCacheKey();\n    key_2 = new ByteValuesCreator( \"ff\", null ).getCacheKey();\n    assertThat( \"different options should share same key\", key_1, is( key_2 ) );\n\n    key_1 = new IntValuesCreator( \"ff\", FieldCache.DEFAULT_INT_PARSER ).getCacheKey();\n    key_2 = new IntValuesCreator( \"ff\", FieldCache.NUMERIC_UTILS_INT_PARSER ).getCacheKey();\n    assertThat( \"diferent parser should have same key\", key_1, is( key_2 ) );\n  }\n\n","sourceOld":"  public void testKeys() throws IOException {\r\n    // Check that the keys are unique for different fields\r\n\r\n    EntryKey key_1 = new ByteValuesCreator( \"field1\", null ).getCacheKey();\r\n    EntryKey key_2 = new ByteValuesCreator( \"field2\", null ).getCacheKey();\r\n    assertThat(\"different fields should have a different key\", key_1, not(key_2) );\r\n\r\n    key_1 = new ByteValuesCreator(  \"field1\", null ).getCacheKey();\r\n    key_2 = new ShortValuesCreator( \"field1\", null ).getCacheKey();\r\n    assertThat( \"same field different type should have different key\", key_1, not( key_2 ) );\r\n\r\n    key_1 = new ByteValuesCreator( \"ff\", null ).getCacheKey();\r\n    key_2 = new ByteValuesCreator( \"ff\", null ).getCacheKey();\r\n    assertThat( \"same args should have same key\", key_1, is( key_2 ) );\r\n\r\n    key_1 = new ByteValuesCreator( \"ff\", null, ByteValuesCreator.OPTION_CACHE_BITS ^ ByteValuesCreator.OPTION_CACHE_VALUES ).getCacheKey();\r\n    key_2 = new ByteValuesCreator( \"ff\", null ).getCacheKey();\r\n    assertThat( \"different options should share same key\", key_1, is( key_2 ) );\r\n\r\n    key_1 = new IntValuesCreator( \"ff\", FieldCache.DEFAULT_INT_PARSER ).getCacheKey();\r\n    key_2 = new IntValuesCreator( \"ff\", FieldCache.NUMERIC_UTILS_INT_PARSER ).getCacheKey();\r\n    assertThat( \"diferent parser should have same key\", key_1, is( key_2 ) );\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#testKeys().mjava","pathOld":"/dev/null","sourceNew":"  public void testKeys() throws IOException {\n    // Check that the keys are unique for different fields\n\n    EntryKey key_1 = new ByteValuesCreator( \"field1\", null ).getCacheKey();\n    EntryKey key_2 = new ByteValuesCreator( \"field2\", null ).getCacheKey();\n    assertThat(\"different fields should have a different key\", key_1, not(key_2) );\n\n    key_1 = new ByteValuesCreator(  \"field1\", null ).getCacheKey();\n    key_2 = new ShortValuesCreator( \"field1\", null ).getCacheKey();\n    assertThat( \"same field different type should have different key\", key_1, not( key_2 ) );\n\n    key_1 = new ByteValuesCreator( \"ff\", null ).getCacheKey();\n    key_2 = new ByteValuesCreator( \"ff\", null ).getCacheKey();\n    assertThat( \"same args should have same key\", key_1, is( key_2 ) );\n\n    key_1 = new ByteValuesCreator( \"ff\", null, ByteValuesCreator.OPTION_CACHE_BITS ^ ByteValuesCreator.OPTION_CACHE_VALUES ).getCacheKey();\n    key_2 = new ByteValuesCreator( \"ff\", null ).getCacheKey();\n    assertThat( \"different options should share same key\", key_1, is( key_2 ) );\n\n    key_1 = new IntValuesCreator( \"ff\", FieldCache.DEFAULT_INT_PARSER ).getCacheKey();\n    key_2 = new IntValuesCreator( \"ff\", FieldCache.NUMERIC_UTILS_INT_PARSER ).getCacheKey();\n    assertThat( \"diferent parser should have same key\", key_1, is( key_2 ) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#testKeys().mjava","sourceNew":null,"sourceOld":"  public void testKeys() throws IOException {\n    // Check that the keys are unique for different fields\n\n    EntryKey key_1 = new ByteValuesCreator( \"field1\", null ).getCacheKey();\n    EntryKey key_2 = new ByteValuesCreator( \"field2\", null ).getCacheKey();\n    assertThat(\"different fields should have a different key\", key_1, not(key_2) );\n\n    key_1 = new ByteValuesCreator(  \"field1\", null ).getCacheKey();\n    key_2 = new ShortValuesCreator( \"field1\", null ).getCacheKey();\n    assertThat( \"same field different type should have different key\", key_1, not( key_2 ) );\n\n    key_1 = new ByteValuesCreator( \"ff\", null ).getCacheKey();\n    key_2 = new ByteValuesCreator( \"ff\", null ).getCacheKey();\n    assertThat( \"same args should have same key\", key_1, is( key_2 ) );\n\n    key_1 = new ByteValuesCreator( \"ff\", null, ByteValuesCreator.OPTION_CACHE_BITS ^ ByteValuesCreator.OPTION_CACHE_VALUES ).getCacheKey();\n    key_2 = new ByteValuesCreator( \"ff\", null ).getCacheKey();\n    assertThat( \"different options should share same key\", key_1, is( key_2 ) );\n\n    key_1 = new IntValuesCreator( \"ff\", FieldCache.DEFAULT_INT_PARSER ).getCacheKey();\n    key_2 = new IntValuesCreator( \"ff\", FieldCache.NUMERIC_UTILS_INT_PARSER ).getCacheKey();\n    assertThat( \"diferent parser should have same key\", key_1, is( key_2 ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eee9156bf08d7eaae5e8d8ab5f855ba61012e257":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"382fe3a6ca9745891afebda9b9a57cc158305545":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["382fe3a6ca9745891afebda9b9a57cc158305545"]},"commit2Childs":{"eee9156bf08d7eaae5e8d8ab5f855ba61012e257":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","382fe3a6ca9745891afebda9b9a57cc158305545"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"382fe3a6ca9745891afebda9b9a57cc158305545":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}