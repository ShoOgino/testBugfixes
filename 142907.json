{"path":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#undeploy(String,String[]).mjava","commits":[{"id":"120bc33d5cbe83eca2e5fce597baf4fef208d579","date":1573735895,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#undeploy(String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Undeploys a packge from given collections.\n   */\n  public void undeploy(String packageName, String[] collections) throws SolrException {\n    for (String collection: collections) {\n      SolrPackageInstance deployedPackage = getPackagesDeployed(collection).get(packageName);\n      Map<String, String> collectionParameterOverrides = getPackageParams(packageName, collection);\n\n      // Run the uninstall command for all plugins\n      Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", deployedPackage.name, \"package-version\", deployedPackage.version);\n\n      for (Plugin plugin: deployedPackage.plugins) {\n        Command cmd = plugin.uninstallCommand;\n        if (cmd != null && !Strings.isNullOrEmpty(cmd.method)) {\n          if (\"POST\".equalsIgnoreCase(cmd.method)) {\n            try {\n              String payload = PackageUtils.resolve(getMapper().writeValueAsString(cmd.payload), deployedPackage.parameterDefaults, collectionParameterOverrides, systemParams);\n              String path = PackageUtils.resolve(cmd.path, deployedPackage.parameterDefaults, collectionParameterOverrides, systemParams);\n              PackageUtils.printGreen(\"Executing \" + payload + \" for path:\" + path);\n              SolrCLI.postJsonToSolr(solrClient, path, payload);\n            } catch (Exception ex) {\n              throw new SolrException(ErrorCode.SERVER_ERROR, ex);\n            }\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-POST method not supported for uninstall commands\");\n          }\n        } else {\n          PackageUtils.printRed(\"There is no uninstall command to execute for plugin: \" + plugin.name);\n        }\n      }\n\n      // Set the package version in the collection's parameters\n      try {\n        SolrCLI.postJsonToSolr(solrClient, \"/api/collections/\" + collection + \"/config/params\", \"{set: {PKG_VERSIONS: {\"+packageName+\": null}}}\");\n        SolrCLI.postJsonToSolr(solrClient, \"/api/cluster/package\", \"{\\\"refresh\\\": \\\"\" + packageName + \"\\\"}\");\n      } catch (Exception ex) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, ex);\n      }\n\n      // TODO: Also better to remove the package parameters\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62d55718cd611235e975fa73a6bdf263fbd58859","date":1576386842,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#undeploy(String,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#undeploy(String,String[]).mjava","sourceNew":"  /**\n   * Undeploys a package from given collections.\n   */\n  public void undeploy(String packageName, String[] collections) throws SolrException {\n    ensureCollectionsExist(Arrays.asList(collections));\n    \n    for (String collection: collections) {\n      SolrPackageInstance deployedPackage = getPackagesDeployed(collection).get(packageName);\n      if (deployedPackage == null) {\n        PackageUtils.printRed(\"Package \"+packageName+\" not deployed on collection \"+collection);\n        continue;\n      }\n      Map<String, String> collectionParameterOverrides = getPackageParams(packageName, collection);\n\n      // Run the uninstall command for all plugins\n      Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", deployedPackage.name, \"package-version\", deployedPackage.version);\n\n      for (Plugin plugin: deployedPackage.plugins) {\n        Command cmd = plugin.uninstallCommand;\n        if (cmd != null && !Strings.isNullOrEmpty(cmd.method)) {\n          if (\"POST\".equalsIgnoreCase(cmd.method)) {\n            try {\n              String payload = PackageUtils.resolve(getMapper().writeValueAsString(cmd.payload), deployedPackage.parameterDefaults, collectionParameterOverrides, systemParams);\n              String path = PackageUtils.resolve(cmd.path, deployedPackage.parameterDefaults, collectionParameterOverrides, systemParams);\n              PackageUtils.printGreen(\"Executing \" + payload + \" for path:\" + path);\n              SolrCLI.postJsonToSolr(solrClient, path, payload);\n            } catch (Exception ex) {\n              throw new SolrException(ErrorCode.SERVER_ERROR, ex);\n            }\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-POST method not supported for uninstall commands\");\n          }\n        } else {\n          PackageUtils.printRed(\"There is no uninstall command to execute for plugin: \" + plugin.name);\n        }\n      }\n\n      // Set the package version in the collection's parameters\n      try {\n        SolrCLI.postJsonToSolr(solrClient, PackageUtils.getCollectionParamsPath(collection),\n            \"{set: {PKG_VERSIONS: {\"+packageName+\": null}}}\"); // Is it better to \"unset\"? If so, build support in params API for \"unset\"\n        SolrCLI.postJsonToSolr(solrClient, PackageUtils.PACKAGE_PATH, \"{\\\"refresh\\\": \\\"\" + packageName + \"\\\"}\");\n      } catch (Exception ex) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, ex);\n      }\n\n      // TODO: Also better to remove the package parameters PKG_VERSION etc.\n    }\n  }\n\n","sourceOld":"  /**\n   * Undeploys a packge from given collections.\n   */\n  public void undeploy(String packageName, String[] collections) throws SolrException {\n    for (String collection: collections) {\n      SolrPackageInstance deployedPackage = getPackagesDeployed(collection).get(packageName);\n      Map<String, String> collectionParameterOverrides = getPackageParams(packageName, collection);\n\n      // Run the uninstall command for all plugins\n      Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", deployedPackage.name, \"package-version\", deployedPackage.version);\n\n      for (Plugin plugin: deployedPackage.plugins) {\n        Command cmd = plugin.uninstallCommand;\n        if (cmd != null && !Strings.isNullOrEmpty(cmd.method)) {\n          if (\"POST\".equalsIgnoreCase(cmd.method)) {\n            try {\n              String payload = PackageUtils.resolve(getMapper().writeValueAsString(cmd.payload), deployedPackage.parameterDefaults, collectionParameterOverrides, systemParams);\n              String path = PackageUtils.resolve(cmd.path, deployedPackage.parameterDefaults, collectionParameterOverrides, systemParams);\n              PackageUtils.printGreen(\"Executing \" + payload + \" for path:\" + path);\n              SolrCLI.postJsonToSolr(solrClient, path, payload);\n            } catch (Exception ex) {\n              throw new SolrException(ErrorCode.SERVER_ERROR, ex);\n            }\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-POST method not supported for uninstall commands\");\n          }\n        } else {\n          PackageUtils.printRed(\"There is no uninstall command to execute for plugin: \" + plugin.name);\n        }\n      }\n\n      // Set the package version in the collection's parameters\n      try {\n        SolrCLI.postJsonToSolr(solrClient, \"/api/collections/\" + collection + \"/config/params\", \"{set: {PKG_VERSIONS: {\"+packageName+\": null}}}\");\n        SolrCLI.postJsonToSolr(solrClient, \"/api/cluster/package\", \"{\\\"refresh\\\": \\\"\" + packageName + \"\\\"}\");\n      } catch (Exception ex) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, ex);\n      }\n\n      // TODO: Also better to remove the package parameters\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06595b0c22c7d3075c4104d3820cccf95d9d8a43","date":1576491645,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#undeploy(String,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#undeploy(String,String[]).mjava","sourceNew":"  /**\n   * Undeploys a package from given collections.\n   */\n  public void undeploy(String packageName, String[] collections) throws SolrException {\n    ensureCollectionsExist(Arrays.asList(collections));\n    \n    for (String collection: collections) {\n      SolrPackageInstance deployedPackage = getPackagesDeployed(collection).get(packageName);\n      if (deployedPackage == null) {\n        PackageUtils.printRed(\"Package \"+packageName+\" not deployed on collection \"+collection);\n        continue;\n      }\n      Map<String, String> collectionParameterOverrides = getPackageParams(packageName, collection);\n\n      // Run the uninstall command for all plugins\n      Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", deployedPackage.name, \"package-version\", deployedPackage.version);\n\n      for (Plugin plugin: deployedPackage.plugins) {\n        Command cmd = plugin.uninstallCommand;\n        if (cmd != null && !Strings.isNullOrEmpty(cmd.method)) {\n          if (\"POST\".equalsIgnoreCase(cmd.method)) {\n            try {\n              String payload = PackageUtils.resolve(getMapper().writeValueAsString(cmd.payload), deployedPackage.parameterDefaults, collectionParameterOverrides, systemParams);\n              String path = PackageUtils.resolve(cmd.path, deployedPackage.parameterDefaults, collectionParameterOverrides, systemParams);\n              PackageUtils.printGreen(\"Executing \" + payload + \" for path:\" + path);\n              SolrCLI.postJsonToSolr(solrClient, path, payload);\n            } catch (Exception ex) {\n              throw new SolrException(ErrorCode.SERVER_ERROR, ex);\n            }\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-POST method not supported for uninstall commands\");\n          }\n        } else {\n          PackageUtils.printRed(\"There is no uninstall command to execute for plugin: \" + plugin.name);\n        }\n      }\n\n      // Set the package version in the collection's parameters\n      try {\n        SolrCLI.postJsonToSolr(solrClient, PackageUtils.getCollectionParamsPath(collection),\n            \"{set: {PKG_VERSIONS: {\"+packageName+\": null}}}\"); // Is it better to \"unset\"? If so, build support in params API for \"unset\"\n        SolrCLI.postJsonToSolr(solrClient, PackageUtils.PACKAGE_PATH, \"{\\\"refresh\\\": \\\"\" + packageName + \"\\\"}\");\n      } catch (Exception ex) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, ex);\n      }\n\n      // TODO: Also better to remove the package parameters PKG_VERSION etc.\n    }\n  }\n\n","sourceOld":"  /**\n   * Undeploys a packge from given collections.\n   */\n  public void undeploy(String packageName, String[] collections) throws SolrException {\n    for (String collection: collections) {\n      SolrPackageInstance deployedPackage = getPackagesDeployed(collection).get(packageName);\n      Map<String, String> collectionParameterOverrides = getPackageParams(packageName, collection);\n\n      // Run the uninstall command for all plugins\n      Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", deployedPackage.name, \"package-version\", deployedPackage.version);\n\n      for (Plugin plugin: deployedPackage.plugins) {\n        Command cmd = plugin.uninstallCommand;\n        if (cmd != null && !Strings.isNullOrEmpty(cmd.method)) {\n          if (\"POST\".equalsIgnoreCase(cmd.method)) {\n            try {\n              String payload = PackageUtils.resolve(getMapper().writeValueAsString(cmd.payload), deployedPackage.parameterDefaults, collectionParameterOverrides, systemParams);\n              String path = PackageUtils.resolve(cmd.path, deployedPackage.parameterDefaults, collectionParameterOverrides, systemParams);\n              PackageUtils.printGreen(\"Executing \" + payload + \" for path:\" + path);\n              SolrCLI.postJsonToSolr(solrClient, path, payload);\n            } catch (Exception ex) {\n              throw new SolrException(ErrorCode.SERVER_ERROR, ex);\n            }\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-POST method not supported for uninstall commands\");\n          }\n        } else {\n          PackageUtils.printRed(\"There is no uninstall command to execute for plugin: \" + plugin.name);\n        }\n      }\n\n      // Set the package version in the collection's parameters\n      try {\n        SolrCLI.postJsonToSolr(solrClient, \"/api/collections/\" + collection + \"/config/params\", \"{set: {PKG_VERSIONS: {\"+packageName+\": null}}}\");\n        SolrCLI.postJsonToSolr(solrClient, \"/api/cluster/package\", \"{\\\"refresh\\\": \\\"\" + packageName + \"\\\"}\");\n      } catch (Exception ex) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, ex);\n      }\n\n      // TODO: Also better to remove the package parameters\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a688687cbff91a8f44c95d31697c3ba8a47c8c25","date":1593512440,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#undeploy(String,String[],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#undeploy(String,String[]).mjava","sourceNew":"  /**\n   * Undeploys a package from given collections.\n   */\n  public void undeploy(String packageName, String[] collections, boolean shouldUndeployClusterPlugins) throws SolrException {\n    ensureCollectionsExist(Arrays.asList(collections));\n    \n    // Undeploy cluster level plugins\n    if (shouldUndeployClusterPlugins) {\n      SolrPackageInstance deployedPackage = getPackagesDeployedAsClusterLevelPlugins().get(packageName);\n      if (deployedPackage == null) {\n        PackageUtils.printRed(\"Cluster level plugins from package \"+packageName+\" not deployed.\");\n      } else {\n        for (Plugin plugin: deployedPackage.plugins) {\n          if (!shouldUndeployClusterPlugins || \"cluster\".equalsIgnoreCase(plugin.type) == false) continue;\n            \n          Map<String, String> systemParams = Map.of(\"package-name\", deployedPackage.name, \"package-version\", deployedPackage.version, \"plugin-name\", plugin.name);\n          Command cmd = plugin.uninstallCommand;\n          if (cmd != null && !Strings.isNullOrEmpty(cmd.method)) {\n            if (\"POST\".equalsIgnoreCase(cmd.method)) {\n              try {\n                String payload = PackageUtils.resolve(getMapper().writeValueAsString(cmd.payload), deployedPackage.parameterDefaults, Collections.emptyMap(), systemParams);\n                String path = PackageUtils.resolve(cmd.path, deployedPackage.parameterDefaults, Collections.emptyMap(), systemParams);\n                PackageUtils.printGreen(\"Executing \" + payload + \" for path:\" + path);\n                SolrCLI.postJsonToSolr(solrClient, path, payload);\n              } catch (Exception ex) {\n                throw new SolrException(ErrorCode.SERVER_ERROR, ex);\n              }\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-POST method not supported for uninstall commands\");\n            }\n          } else {\n            PackageUtils.printRed(\"There is no uninstall command to execute for plugin: \" + plugin.name);\n          }\n\n        }\n      }\n    }\n    // Undeploy collection level plugins\n    for (String collection: collections) {\n      SolrPackageInstance deployedPackage = getPackagesDeployed(collection).get(packageName);\n      if (deployedPackage == null) {\n        PackageUtils.printRed(\"Package \"+packageName+\" not deployed on collection \"+collection);\n        continue;\n      }\n      Map<String, String> collectionParameterOverrides = getPackageParams(packageName, collection);\n\n      // Run the uninstall command for all plugins\n      for (Plugin plugin: deployedPackage.plugins) {\n        if (\"collection\".equalsIgnoreCase(plugin.type) == false) continue;\n\n        Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", deployedPackage.name, \"package-version\", deployedPackage.version, \"plugin-name\", plugin.name);\n        Command cmd = plugin.uninstallCommand;\n        if (cmd != null && !Strings.isNullOrEmpty(cmd.method)) {\n          if (\"POST\".equalsIgnoreCase(cmd.method)) {\n            try {\n              String payload = PackageUtils.resolve(getMapper().writeValueAsString(cmd.payload), deployedPackage.parameterDefaults, collectionParameterOverrides, systemParams);\n              String path = PackageUtils.resolve(cmd.path, deployedPackage.parameterDefaults, collectionParameterOverrides, systemParams);\n              PackageUtils.printGreen(\"Executing \" + payload + \" for path:\" + path);\n              SolrCLI.postJsonToSolr(solrClient, path, payload);\n            } catch (Exception ex) {\n              throw new SolrException(ErrorCode.SERVER_ERROR, ex);\n            }\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-POST method not supported for uninstall commands\");\n          }\n        } else {\n          PackageUtils.printRed(\"There is no uninstall command to execute for plugin: \" + plugin.name);\n        }\n      }\n\n      // Set the package version in the collection's parameters\n      try {\n        SolrCLI.postJsonToSolr(solrClient, PackageUtils.getCollectionParamsPath(collection),\n            \"{set: {PKG_VERSIONS: {\"+packageName+\": null}}}\"); // Is it better to \"unset\"? If so, build support in params API for \"unset\"\n        SolrCLI.postJsonToSolr(solrClient, PackageUtils.PACKAGE_PATH, \"{\\\"refresh\\\": \\\"\" + packageName + \"\\\"}\");\n      } catch (Exception ex) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, ex);\n      }\n\n      // TODO: Also better to remove the package parameters PKG_VERSION etc.\n    }\n  }\n\n","sourceOld":"  /**\n   * Undeploys a package from given collections.\n   */\n  public void undeploy(String packageName, String[] collections) throws SolrException {\n    ensureCollectionsExist(Arrays.asList(collections));\n    \n    for (String collection: collections) {\n      SolrPackageInstance deployedPackage = getPackagesDeployed(collection).get(packageName);\n      if (deployedPackage == null) {\n        PackageUtils.printRed(\"Package \"+packageName+\" not deployed on collection \"+collection);\n        continue;\n      }\n      Map<String, String> collectionParameterOverrides = getPackageParams(packageName, collection);\n\n      // Run the uninstall command for all plugins\n      Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", deployedPackage.name, \"package-version\", deployedPackage.version);\n\n      for (Plugin plugin: deployedPackage.plugins) {\n        Command cmd = plugin.uninstallCommand;\n        if (cmd != null && !Strings.isNullOrEmpty(cmd.method)) {\n          if (\"POST\".equalsIgnoreCase(cmd.method)) {\n            try {\n              String payload = PackageUtils.resolve(getMapper().writeValueAsString(cmd.payload), deployedPackage.parameterDefaults, collectionParameterOverrides, systemParams);\n              String path = PackageUtils.resolve(cmd.path, deployedPackage.parameterDefaults, collectionParameterOverrides, systemParams);\n              PackageUtils.printGreen(\"Executing \" + payload + \" for path:\" + path);\n              SolrCLI.postJsonToSolr(solrClient, path, payload);\n            } catch (Exception ex) {\n              throw new SolrException(ErrorCode.SERVER_ERROR, ex);\n            }\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-POST method not supported for uninstall commands\");\n          }\n        } else {\n          PackageUtils.printRed(\"There is no uninstall command to execute for plugin: \" + plugin.name);\n        }\n      }\n\n      // Set the package version in the collection's parameters\n      try {\n        SolrCLI.postJsonToSolr(solrClient, PackageUtils.getCollectionParamsPath(collection),\n            \"{set: {PKG_VERSIONS: {\"+packageName+\": null}}}\"); // Is it better to \"unset\"? If so, build support in params API for \"unset\"\n        SolrCLI.postJsonToSolr(solrClient, PackageUtils.PACKAGE_PATH, \"{\\\"refresh\\\": \\\"\" + packageName + \"\\\"}\");\n      } catch (Exception ex) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, ex);\n      }\n\n      // TODO: Also better to remove the package parameters PKG_VERSION etc.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":["120bc33d5cbe83eca2e5fce597baf4fef208d579","62d55718cd611235e975fa73a6bdf263fbd58859"],"62d55718cd611235e975fa73a6bdf263fbd58859":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a688687cbff91a8f44c95d31697c3ba8a47c8c25":["62d55718cd611235e975fa73a6bdf263fbd58859"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a688687cbff91a8f44c95d31697c3ba8a47c8c25"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":[],"62d55718cd611235e975fa73a6bdf263fbd58859":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","a688687cbff91a8f44c95d31697c3ba8a47c8c25"],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","62d55718cd611235e975fa73a6bdf263fbd58859"],"a688687cbff91a8f44c95d31697c3ba8a47c8c25":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}