{"path":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#timSort(int,int).mjava","commits":[{"id":"d666f5b596b5ce43296739e9453ff761c7ddde3f","date":1363451610,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#timSort(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Sorts using TimSort, see http://svn.python.org/projects/python/trunk/Objects/listsort.txt\n   *  and http://svn.python.org/projects/python/trunk/Objects/listobject.c.\n   *  TimSort is a stable sorting algorithm based on MergeSort but known to\n   *  perform extremely well on partially-sorted inputs.\n   *  For small collections, falls back to {@link #binarySort(int, int)}. */\n  public final void timSort(int lo, int hi) {\n    if (hi - lo <= TIMSORT_THRESHOLD) {\n      binarySort(lo, hi);\n      return;\n    }\n\n    new TimSort(lo, hi).sort();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94becf27613d0cdcfe2a6245a8c88a2a850b2ffa","date":1363456993,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#timSort(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#timSort(int,int).mjava","sourceNew":"  /** Sorts using <a href=\"http://svn.python.org/projects/python/trunk/Objects/listsort.txt\">TimSort</a>, see \n   *  also <a href=\"http://svn.python.org/projects/python/trunk/Objects/listobject.c\">source code</a>.\n   *  TimSort is a stable sorting algorithm based on MergeSort but known to\n   *  perform extremely well on partially-sorted inputs.\n   *  For small collections, falls back to {@link #binarySort(int, int)}. */\n  public final void timSort(int lo, int hi) {\n    if (hi - lo <= TIMSORT_THRESHOLD) {\n      binarySort(lo, hi);\n      return;\n    }\n\n    new TimSort(lo, hi).sort();\n  }\n\n","sourceOld":"  /** Sorts using TimSort, see http://svn.python.org/projects/python/trunk/Objects/listsort.txt\n   *  and http://svn.python.org/projects/python/trunk/Objects/listobject.c.\n   *  TimSort is a stable sorting algorithm based on MergeSort but known to\n   *  perform extremely well on partially-sorted inputs.\n   *  For small collections, falls back to {@link #binarySort(int, int)}. */\n  public final void timSort(int lo, int hi) {\n    if (hi - lo <= TIMSORT_THRESHOLD) {\n      binarySort(lo, hi);\n      return;\n    }\n\n    new TimSort(lo, hi).sort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#timSort(int,int).mjava","sourceNew":null,"sourceOld":"  /** Sorts using <a href=\"http://svn.python.org/projects/python/trunk/Objects/listsort.txt\">TimSort</a>, see \n   *  also <a href=\"http://svn.python.org/projects/python/trunk/Objects/listobject.c\">source code</a>.\n   *  TimSort is a stable sorting algorithm based on MergeSort but known to\n   *  perform extremely well on partially-sorted inputs.\n   *  For small collections, falls back to {@link #binarySort(int, int)}. */\n  public final void timSort(int lo, int hi) {\n    if (hi - lo <= TIMSORT_THRESHOLD) {\n      binarySort(lo, hi);\n      return;\n    }\n\n    new TimSort(lo, hi).sort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d666f5b596b5ce43296739e9453ff761c7ddde3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["94becf27613d0cdcfe2a6245a8c88a2a850b2ffa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"94becf27613d0cdcfe2a6245a8c88a2a850b2ffa":["d666f5b596b5ce43296739e9453ff761c7ddde3f"]},"commit2Childs":{"d666f5b596b5ce43296739e9453ff761c7ddde3f":["94becf27613d0cdcfe2a6245a8c88a2a850b2ffa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d666f5b596b5ce43296739e9453ff761c7ddde3f"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"94becf27613d0cdcfe2a6245a8c88a2a850b2ffa":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}