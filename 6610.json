{"path":"solr/core/src/java/org/apache/solr/cloud/NodesSysPropsCacher#fetchRemoteProps(String,int).mjava","commits":[{"id":"033183e9e2da4609614733f0226a38c88c49ed36","date":1557334549,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/NodesSysPropsCacher#fetchRemoteProps(String,int).mjava","pathOld":"/dev/null","sourceNew":"  private void fetchRemoteProps(String node, int fetchRound) {\n    for (int i = 0; i < NUM_RETRY; i++) {\n      if (isClosed && fetchRound != fetchCounting.get())\n        return;\n\n      try {\n        Map<String, Object> props = nodeStateProvider.getNodeValues(node, tags);\n        cache.put(node, Collections.unmodifiableMap(props));\n        break;\n      } catch (Exception e) {\n        try {\n          // 1, 4, 9\n          int backOffTime = 1000 * (i+1);\n          backOffTime = backOffTime * backOffTime;\n          backOffTime = Math.min(10000, backOffTime);\n          Thread.sleep(backOffTime);\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n          log.info(\"Exception on caching node:{} system.properties:{}, retry {}/{}\", node, tags, i+1, NUM_RETRY, e);\n          break;\n        }\n        log.info(\"Exception on caching node:{} system.properties:{}, retry {}/{}\", node, tags, i+1, NUM_RETRY, e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/NodesSysPropsCacher#fetchRemoteProps(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/NodesSysPropsCacher#fetchRemoteProps(String,int).mjava","sourceNew":"  private void fetchRemoteProps(String node, int fetchRound) {\n    for (int i = 0; i < NUM_RETRY; i++) {\n      if (isClosed && fetchRound != fetchCounting.get())\n        return;\n\n      try {\n        Map<String, Object> props = nodeStateProvider.getNodeValues(node, tags);\n        cache.put(node, Collections.unmodifiableMap(props));\n        break;\n      } catch (Exception e) {\n        try {\n          // 1, 4, 9\n          int backOffTime = 1000 * (i+1);\n          backOffTime = backOffTime * backOffTime;\n          backOffTime = Math.min(10000, backOffTime);\n          Thread.sleep(backOffTime);\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n          log.info(\"Exception on caching node:{} system.properties:{}, retry {}/{}\", node, tags, i+1, NUM_RETRY, e);\n          break;\n        }\n        log.info(\"Exception on caching node:{} system.properties:{}, retry {}/{}\", node, tags, i+1, NUM_RETRY, e);\n      }\n    }\n  }\n\n","sourceOld":"  private void fetchRemoteProps(String node, int fetchRound) {\n    for (int i = 0; i < NUM_RETRY; i++) {\n      if (isClosed && fetchRound != fetchCounting.get())\n        return;\n\n      try {\n        Map<String, Object> props = nodeStateProvider.getNodeValues(node, tags);\n        cache.put(node, Collections.unmodifiableMap(props));\n        break;\n      } catch (Exception e) {\n        try {\n          // 1, 4, 9\n          int backOffTime = 1000 * (i+1);\n          backOffTime = backOffTime * backOffTime;\n          backOffTime = Math.min(10000, backOffTime);\n          Thread.sleep(backOffTime);\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n          log.info(\"Exception on caching node:{} system.properties:{}, retry {}/{}\", node, tags, i+1, NUM_RETRY, e);\n          break;\n        }\n        log.info(\"Exception on caching node:{} system.properties:{}, retry {}/{}\", node, tags, i+1, NUM_RETRY, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"833432c363468a5df50f87446a68015404b1fbcf":["033183e9e2da4609614733f0226a38c88c49ed36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["833432c363468a5df50f87446a68015404b1fbcf"],"033183e9e2da4609614733f0226a38c88c49ed36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"833432c363468a5df50f87446a68015404b1fbcf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["033183e9e2da4609614733f0226a38c88c49ed36"],"033183e9e2da4609614733f0226a38c88c49ed36":["833432c363468a5df50f87446a68015404b1fbcf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}