{"path":"solr/core/src/test/org/apache/solr/security/JWTVerificationkeyResolverTest#setUp().mjava","commits":[{"id":"43b93409dee3306c3446b1f24bced7b660398bd3","date":1568113307,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/JWTVerificationkeyResolverTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    k1 = new KeyHolder(\"k1\");\n    k2 = new KeyHolder(\"k2\");\n    k3 = new KeyHolder(\"k3\");\n    k4 = new KeyHolder(\"k4\");\n    k5 = new KeyHolder(\"k5\");\n\n    when(firstJwkList.getJsonWebKeys()).thenReturn(asList(k1.getJwk(), k2.getJwk()));\n    doAnswer(invocation -> {\n      keysToReturnFromSecondJwk = (List<JsonWebKey>) refreshSequenceForSecondJwk.next();\n      System.out.println(\"Refresh called, next to return is \" + keysToReturnFromSecondJwk);\n      return null;\n    }).when(secondJwkList).refresh();\n    when(secondJwkList.getJsonWebKeys()).then(inv -> {\n      if (keysToReturnFromSecondJwk == null)\n        keysToReturnFromSecondJwk = (List<JsonWebKey>) refreshSequenceForSecondJwk.next();\n      return keysToReturnFromSecondJwk;\n    });\n    when(httpsJwksFactory.createList(anyList())).thenReturn(asList(firstJwkList, secondJwkList));\n\n    IssuerConfig issuerConfig = new IssuerConfig(\"foo\", asList(\"url1\", \"url2\"));\n    issuerConfig.setHttpsJwksFactory(httpsJwksFactory);\n    resolver = new JWTVerificationkeyResolver(issuerConfig);\n\n    assumeWorkingMockito();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ac780c217504f0ca673ac5dcb98768984267c60","date":1568879420,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/JWTVerificationkeyResolverTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/JWTVerificationkeyResolverTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    k1 = new KeyHolder(\"k1\");\n    k2 = new KeyHolder(\"k2\");\n    k3 = new KeyHolder(\"k3\");\n    k4 = new KeyHolder(\"k4\");\n    k5 = new KeyHolder(\"k5\");\n\n    when(firstJwkList.getJsonWebKeys()).thenReturn(asList(k1.getJwk(), k2.getJwk()));\n    doAnswer(invocation -> {\n      keysToReturnFromSecondJwk = (List<JsonWebKey>) refreshSequenceForSecondJwk.next();\n      System.out.println(\"Refresh called, next to return is \" + keysToReturnFromSecondJwk);\n      return null;\n    }).when(secondJwkList).refresh();\n    when(secondJwkList.getJsonWebKeys()).then(inv -> {\n      if (keysToReturnFromSecondJwk == null)\n        keysToReturnFromSecondJwk = (List<JsonWebKey>) refreshSequenceForSecondJwk.next();\n      return keysToReturnFromSecondJwk;\n    });\n    when(httpsJwksFactory.createList(anyList())).thenReturn(asList(firstJwkList, secondJwkList));\n\n    JWTIssuerConfig issuerConfig = new JWTIssuerConfig(\"primary\").setIss(\"foo\").setJwksUrl(asList(\"url1\", \"url2\"));\n    issuerConfig.setHttpsJwksFactory(httpsJwksFactory);\n    resolver = new JWTVerificationkeyResolver(Arrays.asList(issuerConfig), true);\n\n    assumeWorkingMockito();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    k1 = new KeyHolder(\"k1\");\n    k2 = new KeyHolder(\"k2\");\n    k3 = new KeyHolder(\"k3\");\n    k4 = new KeyHolder(\"k4\");\n    k5 = new KeyHolder(\"k5\");\n\n    when(firstJwkList.getJsonWebKeys()).thenReturn(asList(k1.getJwk(), k2.getJwk()));\n    doAnswer(invocation -> {\n      keysToReturnFromSecondJwk = (List<JsonWebKey>) refreshSequenceForSecondJwk.next();\n      System.out.println(\"Refresh called, next to return is \" + keysToReturnFromSecondJwk);\n      return null;\n    }).when(secondJwkList).refresh();\n    when(secondJwkList.getJsonWebKeys()).then(inv -> {\n      if (keysToReturnFromSecondJwk == null)\n        keysToReturnFromSecondJwk = (List<JsonWebKey>) refreshSequenceForSecondJwk.next();\n      return keysToReturnFromSecondJwk;\n    });\n    when(httpsJwksFactory.createList(anyList())).thenReturn(asList(firstJwkList, secondJwkList));\n\n    IssuerConfig issuerConfig = new IssuerConfig(\"foo\", asList(\"url1\", \"url2\"));\n    issuerConfig.setHttpsJwksFactory(httpsJwksFactory);\n    resolver = new JWTVerificationkeyResolver(issuerConfig);\n\n    assumeWorkingMockito();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dd6cf7e1b30a14801c9e290183b875c6801bbe9","date":1591734817,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/JWTVerificationkeyResolverTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/JWTVerificationkeyResolverTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    k1 = new KeyHolder(\"k1\");\n    k2 = new KeyHolder(\"k2\");\n    k3 = new KeyHolder(\"k3\");\n    k4 = new KeyHolder(\"k4\");\n    k5 = new KeyHolder(\"k5\");\n\n    when(firstJwkList.getJsonWebKeys()).thenReturn(asList(k1.getJwk(), k2.getJwk()));\n    doAnswer(invocation -> {\n      keysToReturnFromSecondJwk = (List<JsonWebKey>) refreshSequenceForSecondJwk.next();\n      System.out.println(\"Refresh called, next to return is \" + keysToReturnFromSecondJwk);\n      return null;\n    }).when(secondJwkList).refresh();\n    when(secondJwkList.getJsonWebKeys()).then(inv -> {\n      if (keysToReturnFromSecondJwk == null)\n        keysToReturnFromSecondJwk = (List<JsonWebKey>) refreshSequenceForSecondJwk.next();\n      return keysToReturnFromSecondJwk;\n    });\n    when(httpsJwksFactory.createList(anyList())).thenReturn(asList(firstJwkList, secondJwkList));\n\n    JWTIssuerConfig issuerConfig = new JWTIssuerConfig(\"primary\").setIss(\"foo\").setJwksUrl(asList(\"url1\", \"url2\"));\n    JWTIssuerConfig.setHttpsJwksFactory(httpsJwksFactory);\n    resolver = new JWTVerificationkeyResolver(Arrays.asList(issuerConfig), true);\n\n    assumeWorkingMockito();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    k1 = new KeyHolder(\"k1\");\n    k2 = new KeyHolder(\"k2\");\n    k3 = new KeyHolder(\"k3\");\n    k4 = new KeyHolder(\"k4\");\n    k5 = new KeyHolder(\"k5\");\n\n    when(firstJwkList.getJsonWebKeys()).thenReturn(asList(k1.getJwk(), k2.getJwk()));\n    doAnswer(invocation -> {\n      keysToReturnFromSecondJwk = (List<JsonWebKey>) refreshSequenceForSecondJwk.next();\n      System.out.println(\"Refresh called, next to return is \" + keysToReturnFromSecondJwk);\n      return null;\n    }).when(secondJwkList).refresh();\n    when(secondJwkList.getJsonWebKeys()).then(inv -> {\n      if (keysToReturnFromSecondJwk == null)\n        keysToReturnFromSecondJwk = (List<JsonWebKey>) refreshSequenceForSecondJwk.next();\n      return keysToReturnFromSecondJwk;\n    });\n    when(httpsJwksFactory.createList(anyList())).thenReturn(asList(firstJwkList, secondJwkList));\n\n    JWTIssuerConfig issuerConfig = new JWTIssuerConfig(\"primary\").setIss(\"foo\").setJwksUrl(asList(\"url1\", \"url2\"));\n    issuerConfig.setHttpsJwksFactory(httpsJwksFactory);\n    resolver = new JWTVerificationkeyResolver(Arrays.asList(issuerConfig), true);\n\n    assumeWorkingMockito();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/JWTVerificationkeyResolverTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/JWTVerificationkeyResolverTest#setUp().mjava","sourceNew":"  @Before\n  @SuppressWarnings({\"unchecked\"})\n  public void setUp() throws Exception {\n    super.setUp();\n    k1 = new KeyHolder(\"k1\");\n    k2 = new KeyHolder(\"k2\");\n    k3 = new KeyHolder(\"k3\");\n    k4 = new KeyHolder(\"k4\");\n    k5 = new KeyHolder(\"k5\");\n\n    when(firstJwkList.getJsonWebKeys()).thenReturn(asList(k1.getJwk(), k2.getJwk()));\n    doAnswer(invocation -> {\n      keysToReturnFromSecondJwk = (List<JsonWebKey>) refreshSequenceForSecondJwk.next();\n      System.out.println(\"Refresh called, next to return is \" + keysToReturnFromSecondJwk);\n      return null;\n    }).when(secondJwkList).refresh();\n    when(secondJwkList.getJsonWebKeys()).then(inv -> {\n      if (keysToReturnFromSecondJwk == null)\n        keysToReturnFromSecondJwk = (List<JsonWebKey>) refreshSequenceForSecondJwk.next();\n      return keysToReturnFromSecondJwk;\n    });\n    when(httpsJwksFactory.createList(anyList())).thenReturn(asList(firstJwkList, secondJwkList));\n\n    JWTIssuerConfig issuerConfig = new JWTIssuerConfig(\"primary\").setIss(\"foo\").setJwksUrl(asList(\"url1\", \"url2\"));\n    JWTIssuerConfig.setHttpsJwksFactory(httpsJwksFactory);\n    resolver = new JWTVerificationkeyResolver(Arrays.asList(issuerConfig), true);\n\n    assumeWorkingMockito();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    k1 = new KeyHolder(\"k1\");\n    k2 = new KeyHolder(\"k2\");\n    k3 = new KeyHolder(\"k3\");\n    k4 = new KeyHolder(\"k4\");\n    k5 = new KeyHolder(\"k5\");\n\n    when(firstJwkList.getJsonWebKeys()).thenReturn(asList(k1.getJwk(), k2.getJwk()));\n    doAnswer(invocation -> {\n      keysToReturnFromSecondJwk = (List<JsonWebKey>) refreshSequenceForSecondJwk.next();\n      System.out.println(\"Refresh called, next to return is \" + keysToReturnFromSecondJwk);\n      return null;\n    }).when(secondJwkList).refresh();\n    when(secondJwkList.getJsonWebKeys()).then(inv -> {\n      if (keysToReturnFromSecondJwk == null)\n        keysToReturnFromSecondJwk = (List<JsonWebKey>) refreshSequenceForSecondJwk.next();\n      return keysToReturnFromSecondJwk;\n    });\n    when(httpsJwksFactory.createList(anyList())).thenReturn(asList(firstJwkList, secondJwkList));\n\n    JWTIssuerConfig issuerConfig = new JWTIssuerConfig(\"primary\").setIss(\"foo\").setJwksUrl(asList(\"url1\", \"url2\"));\n    JWTIssuerConfig.setHttpsJwksFactory(httpsJwksFactory);\n    resolver = new JWTVerificationkeyResolver(Arrays.asList(issuerConfig), true);\n\n    assumeWorkingMockito();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9dd6cf7e1b30a14801c9e290183b875c6801bbe9":["1ac780c217504f0ca673ac5dcb98768984267c60"],"1ac780c217504f0ca673ac5dcb98768984267c60":["43b93409dee3306c3446b1f24bced7b660398bd3"],"43b93409dee3306c3446b1f24bced7b660398bd3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["9dd6cf7e1b30a14801c9e290183b875c6801bbe9"]},"commit2Childs":{"9dd6cf7e1b30a14801c9e290183b875c6801bbe9":["e98520789adb1d5ad05afb4956eca0944a929688"],"1ac780c217504f0ca673ac5dcb98768984267c60":["9dd6cf7e1b30a14801c9e290183b875c6801bbe9"],"43b93409dee3306c3446b1f24bced7b660398bd3":["1ac780c217504f0ca673ac5dcb98768984267c60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43b93409dee3306c3446b1f24bced7b660398bd3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}