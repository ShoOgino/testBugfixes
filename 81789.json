{"path":"src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","commits":[{"id":"6eb6723414c7578e3be2fa28b281a224547cdf93","date":1144287642,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","pathOld":"/dev/null","sourceNew":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\r\n  {\r\n    boolean fail = false;\r\n    IndexReader reader = IndexReader.open(directory);\r\n\r\n    int max = reader.maxDoc();\r\n    for (int i = 0; i < max; i++)\r\n    {\r\n      Document temp = reader.document(i);\r\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\r\n      //compare the index doc number to the value that it should be\r\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\r\n      {\r\n        fail = true;\r\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\r\n      }\r\n    }\r\n    return fail;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","sourceNew":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\r\n  {\r\n    boolean fail = false;\r\n    IndexReader reader = IndexReader.open(directory);\r\n\r\n    int max = reader.maxDoc();\r\n    for (int i = 0; i < max; i++)\r\n    {\r\n      Document temp = reader.document(i);\r\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\r\n      //compare the index doc number to the value that it should be\r\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\r\n      {\r\n        fail = true;\r\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\r\n      }\r\n    }\r\n    reader.close();\r\n    return fail;\r\n  }\r\n\n","sourceOld":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\r\n  {\r\n    boolean fail = false;\r\n    IndexReader reader = IndexReader.open(directory);\r\n\r\n    int max = reader.maxDoc();\r\n    for (int i = 0; i < max; i++)\r\n    {\r\n      Document temp = reader.document(i);\r\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\r\n      //compare the index doc number to the value that it should be\r\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\r\n      {\r\n        fail = true;\r\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\r\n      }\r\n    }\r\n    return fail;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","sourceNew":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\n  {\n    boolean fail = false;\n    IndexReader reader = IndexReader.open(directory);\n\n    int max = reader.maxDoc();\n    for (int i = 0; i < max; i++)\n    {\n      Document temp = reader.document(i);\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\n      //compare the index doc number to the value that it should be\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\n      {\n        fail = true;\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\n      }\n    }\n    reader.close();\n    return fail;\n  }\n\n","sourceOld":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\r\n  {\r\n    boolean fail = false;\r\n    IndexReader reader = IndexReader.open(directory);\r\n\r\n    int max = reader.maxDoc();\r\n    for (int i = 0; i < max; i++)\r\n    {\r\n      Document temp = reader.document(i);\r\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\r\n      //compare the index doc number to the value that it should be\r\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\r\n      {\r\n        fail = true;\r\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\r\n      }\r\n    }\r\n    reader.close();\r\n    return fail;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","sourceNew":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\n  {\n    boolean fail = false;\n    IndexReader reader = IndexReader.open(directory, true);\n\n    int max = reader.maxDoc();\n    for (int i = 0; i < max; i++)\n    {\n      Document temp = reader.document(i);\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\n      //compare the index doc number to the value that it should be\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\n      {\n        fail = true;\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\n      }\n    }\n    reader.close();\n    return fail;\n  }\n\n","sourceOld":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\n  {\n    boolean fail = false;\n    IndexReader reader = IndexReader.open(directory);\n\n    int max = reader.maxDoc();\n    for (int i = 0; i < max; i++)\n    {\n      Document temp = reader.document(i);\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\n      //compare the index doc number to the value that it should be\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\n      {\n        fail = true;\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\n      }\n    }\n    reader.close();\n    return fail;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","sourceNew":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\n  {\n    boolean fail = false;\n    IndexReader reader = IndexReader.open(directory, true);\n\n    int max = reader.maxDoc();\n    for (int i = 0; i < max; i++)\n    {\n      Document temp = reader.document(i);\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\n      //compare the index doc number to the value that it should be\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\n      {\n        fail = true;\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\n      }\n    }\n    reader.close();\n    return fail;\n  }\n\n","sourceOld":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\n  {\n    boolean fail = false;\n    IndexReader reader = IndexReader.open(directory);\n\n    int max = reader.maxDoc();\n    for (int i = 0; i < max; i++)\n    {\n      Document temp = reader.document(i);\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\n      //compare the index doc number to the value that it should be\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\n      {\n        fail = true;\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\n      }\n    }\n    reader.close();\n    return fail;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","sourceNew":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\n  {\n    boolean fail = false;\n    IndexReader reader = IndexReader.open(directory, true);\n\n    int max = reader.maxDoc();\n    for (int i = 0; i < max; i++)\n    {\n      Document temp = reader.document(i);\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\n      //compare the index doc number to the value that it should be\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\n      {\n        fail = true;\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\n      }\n    }\n    reader.close();\n    return fail;\n  }\n\n","sourceOld":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\n  {\n    boolean fail = false;\n    IndexReader reader = IndexReader.open(directory, true);\n\n    int max = reader.maxDoc();\n    for (int i = 0; i < max; i++)\n    {\n      Document temp = reader.document(i);\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\n      //compare the index doc number to the value that it should be\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\n      {\n        fail = true;\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\n      }\n    }\n    reader.close();\n    return fail;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["6eb6723414c7578e3be2fa28b281a224547cdf93"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["2123bddbd65dea198cac380540636ce43a880403"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["2123bddbd65dea198cac380540636ce43a880403","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"2123bddbd65dea198cac380540636ce43a880403":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0a046c0c310bc77931fc8441bd920053b607dd14"],"6eb6723414c7578e3be2fa28b281a224547cdf93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["2123bddbd65dea198cac380540636ce43a880403"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6eb6723414c7578e3be2fa28b281a224547cdf93"],"0a046c0c310bc77931fc8441bd920053b607dd14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2123bddbd65dea198cac380540636ce43a880403":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"6eb6723414c7578e3be2fa28b281a224547cdf93":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}