{"path":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_addDocument(Iterable[T]).mjava","commits":[{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_addDocument(Iterable[T]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#addDocument(Document).mjava","sourceNew":"  /**\n   * Adds a Document.\n   * @see IndexWriter#addDocument(Iterable)\n   */\n  public <T extends IndexableField> void addDocument(final Iterable<T> doc) throws IOException {\n    if (doDocValues && doc instanceof Document) {\n      randomPerDocFieldValues(r, (Document) doc);\n    }\n    if (r.nextInt(5) == 3) {\n      // TODO: maybe, we should simply buffer up added docs\n      // (but we need to clone them), and only when\n      // getReader, commit, etc. are called, we do an\n      // addDocuments?  Would be better testing.\n      w.addDocuments(new Iterable<Iterable<T>>() {\n\n        @Override\n        public Iterator<Iterable<T>> iterator() {\n          return new Iterator<Iterable<T>>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Iterable<T> next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.addDocument(doc);\n    }\n    \n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Adds a Document.\n   * @see IndexWriter#addDocument(Document)\n   */\n  public void addDocument(final Document doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues(r, doc);\n    }\n\n    if (r.nextInt(5) == 3) {\n      // TODO: maybe, we should simply buffer up added docs\n      // (but we need to clone them), and only when\n      // getReader, commit, etc. are called, we do an\n      // addDocuments?  Would be better testing.\n      w.addDocuments(new Iterable<Document>() {\n\n        @Override\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Document next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.addDocument(doc);\n    }\n    \n    maybeCommit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_addDocument(Iterable[T]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_addDocument(Iterable[T]).mjava","sourceNew":"  /**\n   * Adds a Document.\n   * @see IndexWriter#addDocument(Iterable)\n   */\n  public <T extends IndexableField> void addDocument(final Iterable<T> doc) throws IOException {\n    if (doDocValues && doc instanceof Document) {\n      randomPerDocFieldValues(r, (Document) doc);\n    }\n    if (r.nextInt(5) == 3) {\n      // TODO: maybe, we should simply buffer up added docs\n      // (but we need to clone them), and only when\n      // getReader, commit, etc. are called, we do an\n      // addDocuments?  Would be better testing.\n      w.addDocuments(new Iterable<Iterable<T>>() {\n\n        @Override\n        public Iterator<Iterable<T>> iterator() {\n          return new Iterator<Iterable<T>>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Iterable<T> next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.addDocument(doc);\n    }\n    \n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Adds a Document.\n   * @see IndexWriter#addDocument(Iterable)\n   */\n  public <T extends IndexableField> void addDocument(final Iterable<T> doc) throws IOException {\n    if (doDocValues && doc instanceof Document) {\n      randomPerDocFieldValues(r, (Document) doc);\n    }\n    if (r.nextInt(5) == 3) {\n      // TODO: maybe, we should simply buffer up added docs\n      // (but we need to clone them), and only when\n      // getReader, commit, etc. are called, we do an\n      // addDocuments?  Would be better testing.\n      w.addDocuments(new Iterable<Iterable<T>>() {\n\n        @Override\n        public Iterator<Iterable<T>> iterator() {\n          return new Iterator<Iterable<T>>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Iterable<T> next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.addDocument(doc);\n    }\n    \n    maybeCommit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}