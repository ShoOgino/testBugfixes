{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader.AutomatonNextTermCalculator#setLinear(int).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader.AutomatonNextTermCalculator#setLinear(int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Sets the enum to operate in linear fashion, as we have found\n     * a looping transition at position: we set an upper bound and\n     * act like a TermRangeQuery for this portion of the term space.\n     */\n    protected void setLinear(int position) {\n      assert linear == false;\n\n      int state = 0;\n      assert state == 0;\n      int maxInterval = 0xff;\n      //System.out.println(\"setLinear pos=\" + position + \" seekbytesRef=\" + seekBytesRef);\n      for (int i = 0; i < position; i++) {\n        state = runAutomaton.step(state, seekBytesRef.byteAt(i) & 0xff);\n        assert state >= 0: \"state=\" + state;\n      }\n      final int numTransitions = automaton.getNumTransitions(state);\n      automaton.initTransition(state, transition);\n      for (int i = 0; i < numTransitions; i++) {\n        automaton.getNextTransition(transition);\n        if (transition.min <= (seekBytesRef.byteAt(position) & 0xff) &&\n            (seekBytesRef.byteAt(position) & 0xff) <= transition.max) {\n          maxInterval = transition.max;\n          break;\n        }\n      }\n      // 0xff terms don't get the optimization... not worth the trouble.\n      if (maxInterval != 0xff)\n        maxInterval++;\n      int length = position + 1; /* position + maxTransition */\n      if (linearUpperBound.bytes.length < length)\n        linearUpperBound.bytes = new byte[length];\n      System.arraycopy(seekBytesRef.bytes(), 0, linearUpperBound.bytes, 0, position);\n      linearUpperBound.bytes[position] = (byte) maxInterval;\n      linearUpperBound.length = length;\n\n      linear = true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23fcccd57316410c404dd37307a496ab850efa9c","date":1582897939,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader.AutomatonNextTermCalculator#setLinear(int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader.AutomatonNextTermCalculator#setLinear(int).mjava","sourceNew":"    /**\n     * Sets the enum to operate in linear fashion, as we have found\n     * a looping transition at position: we set an upper bound and\n     * act like a TermRangeQuery for this portion of the term space.\n     */\n    protected void setLinear(int position) {\n      assert linear == false;\n\n      int state = 0;\n      int maxInterval = 0xff;\n      //System.out.println(\"setLinear pos=\" + position + \" seekbytesRef=\" + seekBytesRef);\n      for (int i = 0; i < position; i++) {\n        state = runAutomaton.step(state, seekBytesRef.byteAt(i) & 0xff);\n        assert state >= 0 : \"state=\" + state;\n      }\n      final int numTransitions = automaton.getNumTransitions(state);\n      automaton.initTransition(state, transition);\n      for (int i = 0; i < numTransitions; i++) {\n        automaton.getNextTransition(transition);\n        if (transition.min <= (seekBytesRef.byteAt(position) & 0xff) &&\n            (seekBytesRef.byteAt(position) & 0xff) <= transition.max) {\n          maxInterval = transition.max;\n          break;\n        }\n      }\n      // 0xff terms don't get the optimization... not worth the trouble.\n      if (maxInterval != 0xff)\n        maxInterval++;\n      int length = position + 1; /* position + maxTransition */\n      if (linearUpperBound.bytes.length < length) {\n        linearUpperBound.bytes = new byte[ArrayUtil.oversize(length, Byte.BYTES)];\n      }\n      System.arraycopy(seekBytesRef.bytes(), 0, linearUpperBound.bytes, 0, position);\n      linearUpperBound.bytes[position] = (byte) maxInterval;\n      linearUpperBound.length = length;\n\n      linear = true;\n    }\n\n","sourceOld":"    /**\n     * Sets the enum to operate in linear fashion, as we have found\n     * a looping transition at position: we set an upper bound and\n     * act like a TermRangeQuery for this portion of the term space.\n     */\n    protected void setLinear(int position) {\n      assert linear == false;\n\n      int state = 0;\n      assert state == 0;\n      int maxInterval = 0xff;\n      //System.out.println(\"setLinear pos=\" + position + \" seekbytesRef=\" + seekBytesRef);\n      for (int i = 0; i < position; i++) {\n        state = runAutomaton.step(state, seekBytesRef.byteAt(i) & 0xff);\n        assert state >= 0: \"state=\" + state;\n      }\n      final int numTransitions = automaton.getNumTransitions(state);\n      automaton.initTransition(state, transition);\n      for (int i = 0; i < numTransitions; i++) {\n        automaton.getNextTransition(transition);\n        if (transition.min <= (seekBytesRef.byteAt(position) & 0xff) &&\n            (seekBytesRef.byteAt(position) & 0xff) <= transition.max) {\n          maxInterval = transition.max;\n          break;\n        }\n      }\n      // 0xff terms don't get the optimization... not worth the trouble.\n      if (maxInterval != 0xff)\n        maxInterval++;\n      int length = position + 1; /* position + maxTransition */\n      if (linearUpperBound.bytes.length < length)\n        linearUpperBound.bytes = new byte[length];\n      System.arraycopy(seekBytesRef.bytes(), 0, linearUpperBound.bytes, 0, position);\n      linearUpperBound.bytes[position] = (byte) maxInterval;\n      linearUpperBound.length = length;\n\n      linear = true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"23fcccd57316410c404dd37307a496ab850efa9c":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23fcccd57316410c404dd37307a496ab850efa9c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["23fcccd57316410c404dd37307a496ab850efa9c"],"23fcccd57316410c404dd37307a496ab850efa9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}