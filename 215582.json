{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","sourceNew":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n      assertEquals(a.getNumberOfStates(), b.getNumberOfStates());\n      assertEquals(a.getNumberOfTransitions(), b.getNumberOfTransitions());\n    }\n  }\n\n","sourceOld":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n      assertEquals(a.getNumberOfStates(), b.getNumberOfStates());\n      assertEquals(a.getNumberOfTransitions(), b.getNumberOfTransitions());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","sourceNew":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n      assertEquals(a.getNumberOfStates(), b.getNumberOfStates());\n      assertEquals(a.getNumberOfTransitions(), b.getNumberOfTransitions());\n    }\n  }\n\n","sourceOld":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n      assertEquals(a.getNumberOfStates(), b.getNumberOfStates());\n      assertEquals(a.getNumberOfTransitions(), b.getNumberOfTransitions());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","sourceNew":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      LightAutomaton a = AutomatonTestUtil.randomAutomaton(random());\n      a = AutomatonTestUtil.minimizeSimple(a);\n      LightAutomaton b = MinimizationOperationsLight.minimize(a);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n      assertEquals(a.getNumStates(), b.getNumStates());\n      int numStates = a.getNumStates();\n\n      int sum1 = 0;\n      for(int s=0;s<numStates;s++) {\n        sum1 += a.getNumTransitions(s);\n      }\n      int sum2 = 0;\n      for(int s=0;s<numStates;s++) {\n        sum2 += b.getNumTransitions(s);\n      }\n\n      assertEquals(sum1, sum2);\n    }\n  }\n\n","sourceOld":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n      assertEquals(a.getNumberOfStates(), b.getNumberOfStates());\n      assertEquals(a.getNumberOfTransitions(), b.getNumberOfTransitions());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","sourceNew":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      a = AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = MinimizationOperations.minimize(a);\n      assertTrue(Operations.sameLanguage(a, b));\n      assertEquals(a.getNumStates(), b.getNumStates());\n      int numStates = a.getNumStates();\n\n      int sum1 = 0;\n      for(int s=0;s<numStates;s++) {\n        sum1 += a.getNumTransitions(s);\n      }\n      int sum2 = 0;\n      for(int s=0;s<numStates;s++) {\n        sum2 += b.getNumTransitions(s);\n      }\n\n      assertEquals(sum1, sum2);\n    }\n  }\n\n","sourceOld":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      LightAutomaton a = AutomatonTestUtil.randomAutomaton(random());\n      a = AutomatonTestUtil.minimizeSimple(a);\n      LightAutomaton b = MinimizationOperationsLight.minimize(a);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n      assertEquals(a.getNumStates(), b.getNumStates());\n      int numStates = a.getNumStates();\n\n      int sum1 = 0;\n      for(int s=0;s<numStates;s++) {\n        sum1 += a.getNumTransitions(s);\n      }\n      int sum2 = 0;\n      for(int s=0;s<numStates;s++) {\n        sum2 += b.getNumTransitions(s);\n      }\n\n      assertEquals(sum1, sum2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","sourceNew":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      a = AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = MinimizationOperations.minimize(a);\n      assertTrue(Operations.sameLanguage(a, b));\n      assertEquals(a.getNumStates(), b.getNumStates());\n      int numStates = a.getNumStates();\n\n      int sum1 = 0;\n      for(int s=0;s<numStates;s++) {\n        sum1 += a.getNumTransitions(s);\n      }\n      int sum2 = 0;\n      for(int s=0;s<numStates;s++) {\n        sum2 += b.getNumTransitions(s);\n      }\n\n      assertEquals(sum1, sum2);\n    }\n  }\n\n","sourceOld":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n      assertEquals(a.getNumberOfStates(), b.getNumberOfStates());\n      assertEquals(a.getNumberOfTransitions(), b.getNumberOfTransitions());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","sourceNew":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      a = AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = MinimizationOperations.minimize(a,\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      assertTrue(Operations.sameLanguage(a, b));\n      assertEquals(a.getNumStates(), b.getNumStates());\n      int numStates = a.getNumStates();\n\n      int sum1 = 0;\n      for(int s=0;s<numStates;s++) {\n        sum1 += a.getNumTransitions(s);\n      }\n      int sum2 = 0;\n      for(int s=0;s<numStates;s++) {\n        sum2 += b.getNumTransitions(s);\n      }\n\n      assertEquals(sum1, sum2);\n    }\n  }\n\n","sourceOld":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      a = AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = MinimizationOperations.minimize(a);\n      assertTrue(Operations.sameLanguage(a, b));\n      assertEquals(a.getNumStates(), b.getNumStates());\n      int numStates = a.getNumStates();\n\n      int sum1 = 0;\n      for(int s=0;s<numStates;s++) {\n        sum1 += a.getNumTransitions(s);\n      }\n      int sum2 = 0;\n      for(int s=0;s<numStates;s++) {\n        sum2 += b.getNumTransitions(s);\n      }\n\n      assertEquals(sum1, sum2);\n    }\n  }\n\n","bugFix":null,"bugIntro":["7c69b0e51e02e191025c0417fcecfd32205f5d45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c69b0e51e02e191025c0417fcecfd32205f5d45","date":1415272618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","sourceNew":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      a = AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = MinimizationOperations.minimize(a,\n        Integer.MAX_VALUE);\n      assertTrue(Operations.sameLanguage(a, b));\n      assertEquals(a.getNumStates(), b.getNumStates());\n      int numStates = a.getNumStates();\n\n      int sum1 = 0;\n      for(int s=0;s<numStates;s++) {\n        sum1 += a.getNumTransitions(s);\n      }\n      int sum2 = 0;\n      for(int s=0;s<numStates;s++) {\n        sum2 += b.getNumTransitions(s);\n      }\n\n      assertEquals(sum1, sum2);\n    }\n  }\n\n","sourceOld":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      a = AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = MinimizationOperations.minimize(a,\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      assertTrue(Operations.sameLanguage(a, b));\n      assertEquals(a.getNumStates(), b.getNumStates());\n      int numStates = a.getNumStates();\n\n      int sum1 = 0;\n      for(int s=0;s<numStates;s++) {\n        sum1 += a.getNumTransitions(s);\n      }\n      int sum2 = 0;\n      for(int s=0;s<numStates;s++) {\n        sum2 += b.getNumTransitions(s);\n      }\n\n      assertEquals(sum1, sum2);\n    }\n  }\n\n","bugFix":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c69b0e51e02e191025c0417fcecfd32205f5d45":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c69b0e51e02e191025c0417fcecfd32205f5d45"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7c69b0e51e02e191025c0417fcecfd32205f5d45":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["7c69b0e51e02e191025c0417fcecfd32205f5d45"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}