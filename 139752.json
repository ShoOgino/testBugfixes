{"path":"solr/core/src/java/org/apache/solr/logging/log4j2/Log4j2Watcher#setLogLevel(String,String).mjava","commits":[{"id":"93baf46bd12096e0de407258b3b32cfaaf58e448","date":1522030569,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/log4j2/Log4j2Watcher#setLogLevel(String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setLogLevel(String loggerName, String level) {\n    assert loggerName != null;\n    assert level != null;\n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    Configuration config = ctx.getConfiguration();\n    LoggerConfig loggerConfig = getLoggerConfig(ctx, loggerName);\n    assert loggerConfig != null;\n    boolean madeChanges = false;\n    if (loggerName.equals(loggerConfig.getName()) || isRootLogger(loggerName)) {\n      if (level == null || \"unset\".equals(level) || \"null\".equals(level)) {\n        level = Level.OFF.toString();\n        loggerConfig.setLevel(Level.OFF);\n        madeChanges = true;\n      } else {\n        try {\n          loggerConfig.setLevel(Level.valueOf(level));\n          madeChanges = true;\n        } catch (IllegalArgumentException iae) {\n          log.error(\"{} is not a valid log level! Valid values are: {}\", level, getAllLevels());\n        }\n      }\n    } else {\n      //It doesn't have it's own logger yet so let's create one\n      LoggerConfig explicitConfig = new LoggerConfig(loggerName, Level.valueOf(level), true);\n      explicitConfig.setParent(loggerConfig);\n      config.addLogger(loggerName, explicitConfig);\n      madeChanges = true;\n    }\n\n    if (madeChanges) {\n      ctx.updateLoggers();\n      if (log.isInfoEnabled()) {\n        log.info(\"Setting log level to '{}' for logger: {}\", level, loggerName);\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","date":1522059649,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/logging/log4j2/Log4j2Watcher#setLogLevel(String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setLogLevel(String loggerName, String level) {\n    assert loggerName != null;\n    assert level != null;\n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    Configuration config = ctx.getConfiguration();\n    LoggerConfig loggerConfig = getLoggerConfig(ctx, loggerName);\n    assert loggerConfig != null;\n    boolean madeChanges = false;\n    if (loggerName.equals(loggerConfig.getName()) || isRootLogger(loggerName)) {\n      if (level == null || \"unset\".equals(level) || \"null\".equals(level)) {\n        level = Level.OFF.toString();\n        loggerConfig.setLevel(Level.OFF);\n        madeChanges = true;\n      } else {\n        try {\n          loggerConfig.setLevel(Level.valueOf(level));\n          madeChanges = true;\n        } catch (IllegalArgumentException iae) {\n          log.error(\"{} is not a valid log level! Valid values are: {}\", level, getAllLevels());\n        }\n      }\n    } else {\n      //It doesn't have it's own logger yet so let's create one\n      LoggerConfig explicitConfig = new LoggerConfig(loggerName, Level.valueOf(level), true);\n      explicitConfig.setParent(loggerConfig);\n      config.addLogger(loggerName, explicitConfig);\n      madeChanges = true;\n    }\n\n    if (madeChanges) {\n      ctx.updateLoggers();\n      if (log.isInfoEnabled()) {\n        log.info(\"Setting log level to '{}' for logger: {}\", level, loggerName);\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c342e04e879b5c549539944338f5ec0ff3000f3","date":1539630497,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/log4j2/Log4j2Watcher#setLogLevel(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/log4j2/Log4j2Watcher#setLogLevel(String,String).mjava","sourceNew":"  @Override\n  public void setLogLevel(String loggerName, String level) {\n    assert loggerName != null;\n    assert level != null;\n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    Configuration config = ctx.getConfiguration();\n    LoggerConfig loggerConfig = getLoggerConfig(ctx, loggerName);\n    assert loggerConfig != null;\n    boolean madeChanges = false;\n    if (loggerName.equals(loggerConfig.getName()) || isRootLogger(loggerName)) {\n      if (level == null || \"unset\".equals(level) || \"null\".equals(level)) {\n        level = Level.OFF.toString();\n        loggerConfig.setLevel(Level.OFF);\n        madeChanges = true;\n      } else {\n        try {\n          loggerConfig.setLevel(Level.valueOf(level));\n          madeChanges = true;\n        } catch (IllegalArgumentException iae) {\n          log.error(\"{} is not a valid log level! Valid values are: {}\", level, getAllLevels());\n        }\n      }\n    } else {\n      //It doesn't have its own logger yet so let's create one\n      LoggerConfig explicitConfig = new LoggerConfig(loggerName, Level.valueOf(level), true);\n      explicitConfig.setParent(loggerConfig);\n      config.addLogger(loggerName, explicitConfig);\n      madeChanges = true;\n    }\n\n    if (madeChanges) {\n      ctx.updateLoggers();\n      if (log.isInfoEnabled()) {\n        log.info(\"Setting log level to '{}' for logger: {}\", level, loggerName);\n      }\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void setLogLevel(String loggerName, String level) {\n    assert loggerName != null;\n    assert level != null;\n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    Configuration config = ctx.getConfiguration();\n    LoggerConfig loggerConfig = getLoggerConfig(ctx, loggerName);\n    assert loggerConfig != null;\n    boolean madeChanges = false;\n    if (loggerName.equals(loggerConfig.getName()) || isRootLogger(loggerName)) {\n      if (level == null || \"unset\".equals(level) || \"null\".equals(level)) {\n        level = Level.OFF.toString();\n        loggerConfig.setLevel(Level.OFF);\n        madeChanges = true;\n      } else {\n        try {\n          loggerConfig.setLevel(Level.valueOf(level));\n          madeChanges = true;\n        } catch (IllegalArgumentException iae) {\n          log.error(\"{} is not a valid log level! Valid values are: {}\", level, getAllLevels());\n        }\n      }\n    } else {\n      //It doesn't have it's own logger yet so let's create one\n      LoggerConfig explicitConfig = new LoggerConfig(loggerName, Level.valueOf(level), true);\n      explicitConfig.setParent(loggerConfig);\n      config.addLogger(loggerName, explicitConfig);\n      madeChanges = true;\n    }\n\n    if (madeChanges) {\n      ctx.updateLoggers();\n      if (log.isInfoEnabled()) {\n        log.info(\"Setting log level to '{}' for logger: {}\", level, loggerName);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93baf46bd12096e0de407258b3b32cfaaf58e448":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c342e04e879b5c549539944338f5ec0ff3000f3":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c342e04e879b5c549539944338f5ec0ff3000f3"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93baf46bd12096e0de407258b3b32cfaaf58e448"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93baf46bd12096e0de407258b3b32cfaaf58e448","f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"5c342e04e879b5c549539944338f5ec0ff3000f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["5c342e04e879b5c549539944338f5ec0ff3000f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}