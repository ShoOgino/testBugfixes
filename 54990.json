{"path":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.LongComparator#setNextReader(AtomicReaderContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.LongComparator#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.LongComparator#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n      // NOTE: must do this before calling super otherwise\n      // we compute the docsWithField Bits twice!\n      currentReaderValues = FieldCache.DEFAULT.getLongs(context.reader(), field, parser, missingValue != null);\n      return super.setNextReader(context);\n    }\n\n","sourceOld":"    @Override\n    public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n      // NOTE: must do this before calling super otherwise\n      // we compute the docsWithField Bits twice!\n      currentReaderValues = FieldCache.DEFAULT.getLongs(context.reader(), field, parser, missingValue != null);\n      return super.setNextReader(context);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.LongComparator#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.LongComparator#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public FieldComparator<Long> setNextReader(AtomicReaderContext context) throws IOException {\n      // NOTE: must do this before calling super otherwise\n      // we compute the docsWithField Bits twice!\n      currentReaderValues = FieldCache.DEFAULT.getLongs(context.reader(), field, parser, missingValue != null);\n      return super.setNextReader(context);\n    }\n\n","sourceOld":"    @Override\n    public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n      // NOTE: must do this before calling super otherwise\n      // we compute the docsWithField Bits twice!\n      currentReaderValues = FieldCache.DEFAULT.getLongs(context.reader(), field, parser, missingValue != null);\n      return super.setNextReader(context);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.LongComparator#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.LongComparator#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public FieldComparator<Long> setNextReader(AtomicReaderContext context) throws IOException {\n      // NOTE: must do this before calling super otherwise\n      // we compute the docsWithField Bits twice!\n      currentReaderValues = FieldCache.DEFAULT.getLongs(context.reader(), field, parser, missingValue != null);\n      return super.setNextReader(context);\n    }\n\n","sourceOld":"    @Override\n    public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n      // NOTE: must do this before calling super otherwise\n      // we compute the docsWithField Bits twice!\n      currentReaderValues = FieldCache.DEFAULT.getLongs(context.reader(), field, parser, missingValue != null);\n      return super.setNextReader(context);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.LongComparator#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.LongComparator#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public FieldComparator<Long> setNextReader(AtomicReaderContext context) throws IOException {\n      currentReaderValues = DocValues.getNumeric(context.reader(), field);\n      return super.setNextReader(context);\n    }\n\n","sourceOld":"    @Override\n    public FieldComparator<Long> setNextReader(AtomicReaderContext context) throws IOException {\n      // NOTE: must do this before calling super otherwise\n      // we compute the docsWithField Bits twice!\n      currentReaderValues = FieldCache.DEFAULT.getLongs(context.reader(), field, parser, missingValue != null);\n      return super.setNextReader(context);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.LongComparator#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.LongComparator#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public FieldComparator<Long> setNextReader(AtomicReaderContext context) throws IOException {\n      currentReaderValues = DocValues.getNumeric(context.reader(), field);\n      return super.setNextReader(context);\n    }\n\n","sourceOld":"    @Override\n    public FieldComparator<Long> setNextReader(AtomicReaderContext context) throws IOException {\n      // NOTE: must do this before calling super otherwise\n      // we compute the docsWithField Bits twice!\n      currentReaderValues = FieldCache.DEFAULT.getLongs(context.reader(), field, parser, missingValue != null);\n      return super.setNextReader(context);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.LongComparator#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.LongComparator#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public FieldComparator<Long> setNextReader(AtomicReaderContext context) throws IOException {\n      currentReaderValues = DocValues.getNumeric(context.reader(), field);\n      return super.setNextReader(context);\n    }\n\n","sourceOld":"    @Override\n    public FieldComparator<Long> setNextReader(AtomicReaderContext context) throws IOException {\n      // NOTE: must do this before calling super otherwise\n      // we compute the docsWithField Bits twice!\n      currentReaderValues = FieldCache.DEFAULT.getLongs(context.reader(), field, parser, missingValue != null);\n      return super.setNextReader(context);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.LongComparator#setNextReader(AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    public FieldComparator<Long> setNextReader(AtomicReaderContext context) throws IOException {\n      currentReaderValues = DocValues.getNumeric(context.reader(), field);\n      return super.setNextReader(context);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.LongComparator#setNextReader(AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    public FieldComparator<Long> setNextReader(AtomicReaderContext context) throws IOException {\n      currentReaderValues = DocValues.getNumeric(context.reader(), field);\n      return super.setNextReader(context);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["93dd449115a9247533e44bab47e8429e5dccbc6d","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"56572ec06f1407c066d6b7399413178b33176cd8":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","56572ec06f1407c066d6b7399413178b33176cd8","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c6f080a2ab37c464dd98db173f6cbf10dc74f211","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}