{"path":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizerFactory#inform(ResourceLoader).mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizerFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/JapaneseTokenizerFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    mode = getMode(args);\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    try {\n      if (userDictionaryPath != null) {\n        InputStream stream = loader.openResource(userDictionaryPath);\n        String encoding = args.get(USER_DICT_ENCODING);\n        if (encoding == null) {\n          encoding = IOUtils.UTF_8;\n        }\n        CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n            .onMalformedInput(CodingErrorAction.REPORT)\n            .onUnmappableCharacter(CodingErrorAction.REPORT);\n        Reader reader = new InputStreamReader(stream, decoder);\n        userDictionary = new UserDictionary(reader);\n      } else {\n        userDictionary = null;\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading dictionary\", e);\n    }\n    discardPunctuation = getBoolean(DISCARD_PUNCTUATION, true);\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    mode = getMode(args);\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    try {\n      if (userDictionaryPath != null) {\n        InputStream stream = loader.openResource(userDictionaryPath);\n        String encoding = args.get(USER_DICT_ENCODING);\n        if (encoding == null) {\n          encoding = IOUtils.UTF_8;\n        }\n        CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n            .onMalformedInput(CodingErrorAction.REPORT)\n            .onUnmappableCharacter(CodingErrorAction.REPORT);\n        Reader reader = new InputStreamReader(stream, decoder);\n        userDictionary = new UserDictionary(reader);\n      } else {\n        userDictionary = null;\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading dictionary\", e);\n    }\n    discardPunctuation = getBoolean(DISCARD_PUNCTUATION, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizerFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/JapaneseTokenizerFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    mode = getMode(args);\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    try {\n      if (userDictionaryPath != null) {\n        InputStream stream = loader.openResource(userDictionaryPath);\n        String encoding = args.get(USER_DICT_ENCODING);\n        if (encoding == null) {\n          encoding = IOUtils.UTF_8;\n        }\n        CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n            .onMalformedInput(CodingErrorAction.REPORT)\n            .onUnmappableCharacter(CodingErrorAction.REPORT);\n        Reader reader = new InputStreamReader(stream, decoder);\n        userDictionary = new UserDictionary(reader);\n      } else {\n        userDictionary = null;\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading dictionary\", e);\n    }\n    discardPunctuation = getBoolean(DISCARD_PUNCTUATION, true);\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    mode = getMode(args);\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    try {\n      if (userDictionaryPath != null) {\n        InputStream stream = loader.openResource(userDictionaryPath);\n        String encoding = args.get(USER_DICT_ENCODING);\n        if (encoding == null) {\n          encoding = IOUtils.UTF_8;\n        }\n        CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n            .onMalformedInput(CodingErrorAction.REPORT)\n            .onUnmappableCharacter(CodingErrorAction.REPORT);\n        Reader reader = new InputStreamReader(stream, decoder);\n        userDictionary = new UserDictionary(reader);\n      } else {\n        userDictionary = null;\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading dictionary\", e);\n    }\n    discardPunctuation = getBoolean(DISCARD_PUNCTUATION, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f80818731469e00f54165ec94aae2db868ea05","date":1343266866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizerFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizerFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    mode = getMode(args);\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    if (userDictionaryPath != null) {\n      InputStream stream = loader.openResource(userDictionaryPath);\n      String encoding = args.get(USER_DICT_ENCODING);\n      if (encoding == null) {\n        encoding = IOUtils.UTF_8;\n      }\n      CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT);\n      Reader reader = new InputStreamReader(stream, decoder);\n      userDictionary = new UserDictionary(reader);\n    } else {\n      userDictionary = null;\n    }\n    discardPunctuation = getBoolean(DISCARD_PUNCTUATION, true);\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    mode = getMode(args);\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    try {\n      if (userDictionaryPath != null) {\n        InputStream stream = loader.openResource(userDictionaryPath);\n        String encoding = args.get(USER_DICT_ENCODING);\n        if (encoding == null) {\n          encoding = IOUtils.UTF_8;\n        }\n        CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n            .onMalformedInput(CodingErrorAction.REPORT)\n            .onUnmappableCharacter(CodingErrorAction.REPORT);\n        Reader reader = new InputStreamReader(stream, decoder);\n        userDictionary = new UserDictionary(reader);\n      } else {\n        userDictionary = null;\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading dictionary\", e);\n    }\n    discardPunctuation = getBoolean(DISCARD_PUNCTUATION, true);\n  }\n\n","bugFix":null,"bugIntro":["3e0e5dacb8158de7670b41d1a749a4b7487e6acf","ab6bd7083690e5bf77d5527bcd0d62f198b3f320"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizerFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    mode = getMode(args);\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    if (userDictionaryPath != null) {\n      InputStream stream = loader.openResource(userDictionaryPath);\n      String encoding = args.get(USER_DICT_ENCODING);\n      if (encoding == null) {\n        encoding = IOUtils.UTF_8;\n      }\n      CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT);\n      Reader reader = new InputStreamReader(stream, decoder);\n      userDictionary = new UserDictionary(reader);\n    } else {\n      userDictionary = null;\n    }\n    discardPunctuation = getBoolean(DISCARD_PUNCTUATION, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizerFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    mode = getMode(args);\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    if (userDictionaryPath != null) {\n      InputStream stream = loader.openResource(userDictionaryPath);\n      String encoding = args.get(USER_DICT_ENCODING);\n      if (encoding == null) {\n        encoding = IOUtils.UTF_8;\n      }\n      CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT);\n      Reader reader = new InputStreamReader(stream, decoder);\n      userDictionary = new UserDictionary(reader);\n    } else {\n      userDictionary = null;\n    }\n    discardPunctuation = getBoolean(DISCARD_PUNCTUATION, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizerFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizerFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    if (userDictionaryPath != null) {\n      InputStream stream = loader.openResource(userDictionaryPath);\n      String encoding = userDictionaryEncoding;\n      if (encoding == null) {\n        encoding = IOUtils.UTF_8;\n      }\n      CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT);\n      Reader reader = new InputStreamReader(stream, decoder);\n      userDictionary = new UserDictionary(reader);\n    } else {\n      userDictionary = null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    mode = getMode(args);\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    if (userDictionaryPath != null) {\n      InputStream stream = loader.openResource(userDictionaryPath);\n      String encoding = args.get(USER_DICT_ENCODING);\n      if (encoding == null) {\n        encoding = IOUtils.UTF_8;\n      }\n      CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT);\n      Reader reader = new InputStreamReader(stream, decoder);\n      userDictionary = new UserDictionary(reader);\n    } else {\n      userDictionary = null;\n    }\n    discardPunctuation = getBoolean(DISCARD_PUNCTUATION, true);\n  }\n\n","bugFix":null,"bugIntro":["ab6bd7083690e5bf77d5527bcd0d62f198b3f320"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e0e5dacb8158de7670b41d1a749a4b7487e6acf","date":1431331436,"type":3,"author":"Christian Moen","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizerFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizerFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    if (userDictionaryPath != null) {\n      InputStream stream = loader.openResource(userDictionaryPath);\n      String encoding = userDictionaryEncoding;\n      if (encoding == null) {\n        encoding = IOUtils.UTF_8;\n      }\n      CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT);\n      Reader reader = new InputStreamReader(stream, decoder);\n      userDictionary = UserDictionary.open(reader);\n    } else {\n      userDictionary = null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    if (userDictionaryPath != null) {\n      InputStream stream = loader.openResource(userDictionaryPath);\n      String encoding = userDictionaryEncoding;\n      if (encoding == null) {\n        encoding = IOUtils.UTF_8;\n      }\n      CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT);\n      Reader reader = new InputStreamReader(stream, decoder);\n      userDictionary = new UserDictionary(reader);\n    } else {\n      userDictionary = null;\n    }\n  }\n\n","bugFix":["f6f80818731469e00f54165ec94aae2db868ea05"],"bugIntro":["ab6bd7083690e5bf77d5527bcd0d62f198b3f320"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab6bd7083690e5bf77d5527bcd0d62f198b3f320","date":1478889726,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizerFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizerFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    if (userDictionaryPath != null) {\n      try (InputStream stream = loader.openResource(userDictionaryPath)) {\n        String encoding = userDictionaryEncoding;\n        if (encoding == null) {\n          encoding = IOUtils.UTF_8;\n        }\n        CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT);\n        Reader reader = new InputStreamReader(stream, decoder);\n        userDictionary = UserDictionary.open(reader);\n      }\n    } else {\n      userDictionary = null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    if (userDictionaryPath != null) {\n      InputStream stream = loader.openResource(userDictionaryPath);\n      String encoding = userDictionaryEncoding;\n      if (encoding == null) {\n        encoding = IOUtils.UTF_8;\n      }\n      CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT);\n      Reader reader = new InputStreamReader(stream, decoder);\n      userDictionary = UserDictionary.open(reader);\n    } else {\n      userDictionary = null;\n    }\n  }\n\n","bugFix":["3e0e5dacb8158de7670b41d1a749a4b7487e6acf","f6f80818731469e00f54165ec94aae2db868ea05","57da959ec15bb701bd1d1bf3c613b69009ff4bfd","6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2459db523605752a3affcf444fb717d625904488","date":1478970978,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizerFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizerFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    if (userDictionaryPath != null) {\n      try (InputStream stream = loader.openResource(userDictionaryPath)) {\n        String encoding = userDictionaryEncoding;\n        if (encoding == null) {\n          encoding = IOUtils.UTF_8;\n        }\n        CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT);\n        Reader reader = new InputStreamReader(stream, decoder);\n        userDictionary = UserDictionary.open(reader);\n      }\n    } else {\n      userDictionary = null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    if (userDictionaryPath != null) {\n      InputStream stream = loader.openResource(userDictionaryPath);\n      String encoding = userDictionaryEncoding;\n      if (encoding == null) {\n        encoding = IOUtils.UTF_8;\n      }\n      CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT);\n      Reader reader = new InputStreamReader(stream, decoder);\n      userDictionary = UserDictionary.open(reader);\n    } else {\n      userDictionary = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e0e5dacb8158de7670b41d1a749a4b7487e6acf":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"f6f80818731469e00f54165ec94aae2db868ea05":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["f6f80818731469e00f54165ec94aae2db868ea05"],"2459db523605752a3affcf444fb717d625904488":["3e0e5dacb8158de7670b41d1a749a4b7487e6acf","ab6bd7083690e5bf77d5527bcd0d62f198b3f320"],"ab6bd7083690e5bf77d5527bcd0d62f198b3f320":["3e0e5dacb8158de7670b41d1a749a4b7487e6acf"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ab6bd7083690e5bf77d5527bcd0d62f198b3f320"]},"commit2Childs":{"3e0e5dacb8158de7670b41d1a749a4b7487e6acf":["2459db523605752a3affcf444fb717d625904488","ab6bd7083690e5bf77d5527bcd0d62f198b3f320"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"f6f80818731469e00f54165ec94aae2db868ea05":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["3e0e5dacb8158de7670b41d1a749a4b7487e6acf"],"2459db523605752a3affcf444fb717d625904488":[],"5a1a22b1ad88b436661458df567f3fdb446392a4":["f6f80818731469e00f54165ec94aae2db868ea05"],"ab6bd7083690e5bf77d5527bcd0d62f198b3f320":["2459db523605752a3affcf444fb717d625904488","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","2459db523605752a3affcf444fb717d625904488","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}