{"path":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyFacetedSearch(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","commits":[{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyFacetedSearch(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyFacetedSearch(Map<String,Integer> expectedCounts, FacetIndexingParams fip, \n      DirectoryReader indexReader, TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // run faceted search and assert expected counts\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(expectedCounts.size());\n    for (String dim : expectedCounts.keySet()) {\n      requests.add(new CountFacetRequest(new CategoryPath(dim), 5));\n    }\n    FacetSearchParams fsp = new FacetSearchParams(requests, fip);\n    FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    MatchAllDocsQuery base = new MatchAllDocsQuery();\n    searcher.search(base, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(requests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode node = res.getFacetResultNode();\n      String dim = node.getLabel().components[0];\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) node.getValue());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyFacetedSearch(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyFacetedSearch(Map<String,Integer> expectedCounts, FacetIndexingParams fip, \n      DirectoryReader indexReader, TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // run faceted search and assert expected counts\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(expectedCounts.size());\n    for (String dim : expectedCounts.keySet()) {\n      requests.add(new CountFacetRequest(new CategoryPath(dim), 5));\n    }\n    FacetSearchParams fsp = new FacetSearchParams(requests, fip);\n    FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    MatchAllDocsQuery base = new MatchAllDocsQuery();\n    searcher.search(base, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(requests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode node = res.getFacetResultNode();\n      String dim = node.getLabel().components[0];\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) node.getValue());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyFacetedSearch(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyFacetedSearch(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","sourceNew":"  private void verifyFacetedSearch(Map<String,Integer> expectedCounts, FacetIndexingParams fip, \n      DirectoryReader indexReader, TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // run faceted search and assert expected counts\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(expectedCounts.size());\n    for (String dim : expectedCounts.keySet()) {\n      requests.add(new CountFacetRequest(new CategoryPath(dim), 5));\n    }\n    FacetSearchParams fsp = new FacetSearchParams(requests, fip);\n    FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    MatchAllDocsQuery base = new MatchAllDocsQuery();\n    searcher.search(base, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(requests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode node = res.getFacetResultNode();\n      String dim = node.label.components[0];\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) node.value);\n    }\n  }\n\n","sourceOld":"  private void verifyFacetedSearch(Map<String,Integer> expectedCounts, FacetIndexingParams fip, \n      DirectoryReader indexReader, TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // run faceted search and assert expected counts\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(expectedCounts.size());\n    for (String dim : expectedCounts.keySet()) {\n      requests.add(new CountFacetRequest(new CategoryPath(dim), 5));\n    }\n    FacetSearchParams fsp = new FacetSearchParams(requests, fip);\n    FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    MatchAllDocsQuery base = new MatchAllDocsQuery();\n    searcher.search(base, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(requests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode node = res.getFacetResultNode();\n      String dim = node.getLabel().components[0];\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) node.getValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyFacetedSearch(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyFacetedSearch(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","sourceNew":"  private void verifyFacetedSearch(Map<String,Integer> expectedCounts, FacetIndexingParams fip, \n      DirectoryReader indexReader, TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // run faceted search and assert expected counts\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(expectedCounts.size());\n    for (String dim : expectedCounts.keySet()) {\n      requests.add(new CountFacetRequest(new CategoryPath(dim), 5));\n    }\n    FacetSearchParams fsp = new FacetSearchParams(requests, fip);\n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    MatchAllDocsQuery base = new MatchAllDocsQuery();\n    searcher.search(base, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(requests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode node = res.getFacetResultNode();\n      String dim = node.label.components[0];\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) node.value);\n    }\n  }\n\n","sourceOld":"  private void verifyFacetedSearch(Map<String,Integer> expectedCounts, FacetIndexingParams fip, \n      DirectoryReader indexReader, TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // run faceted search and assert expected counts\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(expectedCounts.size());\n    for (String dim : expectedCounts.keySet()) {\n      requests.add(new CountFacetRequest(new CategoryPath(dim), 5));\n    }\n    FacetSearchParams fsp = new FacetSearchParams(requests, fip);\n    FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    MatchAllDocsQuery base = new MatchAllDocsQuery();\n    searcher.search(base, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(requests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode node = res.getFacetResultNode();\n      String dim = node.label.components[0];\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) node.value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyFacetedSearch(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyFacetedSearch(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","sourceNew":"  private void verifyFacetedSearch(Map<String,Integer> expectedCounts, FacetIndexingParams fip, \n      DirectoryReader indexReader, TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // run faceted search and assert expected counts\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(expectedCounts.size());\n    for (String dim : expectedCounts.keySet()) {\n      requests.add(new CountFacetRequest(new CategoryPath(dim), 5));\n    }\n    FacetSearchParams fsp = new FacetSearchParams(requests, fip);\n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    MatchAllDocsQuery base = new MatchAllDocsQuery();\n    searcher.search(base, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(requests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode node = res.getFacetResultNode();\n      String dim = node.label.components[0];\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) node.value);\n    }\n  }\n\n","sourceOld":"  private void verifyFacetedSearch(Map<String,Integer> expectedCounts, FacetIndexingParams fip, \n      DirectoryReader indexReader, TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // run faceted search and assert expected counts\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(expectedCounts.size());\n    for (String dim : expectedCounts.keySet()) {\n      requests.add(new CountFacetRequest(new CategoryPath(dim), 5));\n    }\n    FacetSearchParams fsp = new FacetSearchParams(requests, fip);\n    FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    MatchAllDocsQuery base = new MatchAllDocsQuery();\n    searcher.search(base, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(requests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode node = res.getFacetResultNode();\n      String dim = node.getLabel().components[0];\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) node.getValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyFacetedSearch(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyFacetedSearch(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","sourceNew":"  private void verifyFacetedSearch(Map<String,Integer> expectedCounts, FacetIndexingParams fip, \n      DirectoryReader indexReader, TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // run faceted search and assert expected counts\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(expectedCounts.size());\n    for (String dim : expectedCounts.keySet()) {\n      requests.add(new CountFacetRequest(new CategoryPath(dim), 5));\n    }\n    FacetSearchParams fsp = new FacetSearchParams(fip, requests);\n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    MatchAllDocsQuery base = new MatchAllDocsQuery();\n    searcher.search(base, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(requests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode node = res.getFacetResultNode();\n      String dim = node.label.components[0];\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) node.value);\n    }\n  }\n\n","sourceOld":"  private void verifyFacetedSearch(Map<String,Integer> expectedCounts, FacetIndexingParams fip, \n      DirectoryReader indexReader, TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // run faceted search and assert expected counts\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(expectedCounts.size());\n    for (String dim : expectedCounts.keySet()) {\n      requests.add(new CountFacetRequest(new CategoryPath(dim), 5));\n    }\n    FacetSearchParams fsp = new FacetSearchParams(requests, fip);\n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    MatchAllDocsQuery base = new MatchAllDocsQuery();\n    searcher.search(base, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(requests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode node = res.getFacetResultNode();\n      String dim = node.label.components[0];\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) node.value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestFacetsPayloadMigrationReader#verifyFacetedSearch(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyFacetedSearch(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","sourceNew":"  private void verifyFacetedSearch(Map<String,Integer> expectedCounts, FacetIndexingParams fip, \n      DirectoryReader indexReader, TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // run faceted search and assert expected counts\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(expectedCounts.size());\n    for (String dim : expectedCounts.keySet()) {\n      requests.add(new CountFacetRequest(new CategoryPath(dim), 5));\n    }\n    FacetSearchParams fsp = new FacetSearchParams(fip, requests);\n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    MatchAllDocsQuery base = new MatchAllDocsQuery();\n    searcher.search(base, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(requests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode node = res.getFacetResultNode();\n      String dim = node.label.components[0];\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) node.value);\n    }\n  }\n\n","sourceOld":"  private void verifyFacetedSearch(Map<String,Integer> expectedCounts, FacetIndexingParams fip, \n      DirectoryReader indexReader, TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // run faceted search and assert expected counts\n    ArrayList<FacetRequest> requests = new ArrayList<FacetRequest>(expectedCounts.size());\n    for (String dim : expectedCounts.keySet()) {\n      requests.add(new CountFacetRequest(new CategoryPath(dim), 5));\n    }\n    FacetSearchParams fsp = new FacetSearchParams(fip, requests);\n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    MatchAllDocsQuery base = new MatchAllDocsQuery();\n    searcher.search(base, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(requests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode node = res.getFacetResultNode();\n      String dim = node.label.components[0];\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) node.value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["811cdb4a80352766eb0c762e48972707a924e5cd"],"607428da722dcb3e86bbd11c63de8986e6275c36":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["c4015cd39dff8d4dec562d909f9766debac53aa6","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"],"811cdb4a80352766eb0c762e48972707a924e5cd":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"]},"commit2Childs":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["07155cdd910937cdf6877e48884d5782845c8b8b","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["07155cdd910937cdf6877e48884d5782845c8b8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4015cd39dff8d4dec562d909f9766debac53aa6","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["607428da722dcb3e86bbd11c63de8986e6275c36"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","811cdb4a80352766eb0c762e48972707a924e5cd"],"811cdb4a80352766eb0c762e48972707a924e5cd":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}