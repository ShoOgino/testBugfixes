{"path":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#createIndex(boolean).mjava","commits":[{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#createIndex(boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.shutdown();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#createIndex(boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.shutdown();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#createIndex(boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.shutdown();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#createIndex(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#createIndex(boolean).mjava","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.shutdown();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.shutdown();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#createIndex(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#createIndex(boolean).mjava","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.shutdown();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"9274621789ce990dbfef455dabdf026bb3184821":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9274621789ce990dbfef455dabdf026bb3184821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9274621789ce990dbfef455dabdf026bb3184821","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}