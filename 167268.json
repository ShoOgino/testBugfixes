{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#VerifyPointsVisitor(String,int,PointValues).mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#VerifyPointsVisitor(String,int,PointValues).mjava","pathOld":"/dev/null","sourceNew":"    /** Sole constructor */\n    public VerifyPointsVisitor(String fieldName, int maxDoc, PointValues values) throws IOException {\n      this.maxDoc = maxDoc;\n      this.fieldName = fieldName;\n      numDims = values.getNumDimensions();\n      bytesPerDim = values.getBytesPerDimension();\n      packedBytesCount = numDims * bytesPerDim;\n      globalMinPackedValue = values.getMinPackedValue();\n      globalMaxPackedValue = values.getMaxPackedValue();\n      docsSeen = new FixedBitSet(maxDoc);\n      lastMinPackedValue = new byte[packedBytesCount];\n      lastMaxPackedValue = new byte[packedBytesCount];\n      lastPackedValue = new byte[packedBytesCount];\n\n      if (values.getDocCount() > values.size()) {\n        throw new RuntimeException(\"point values for field \\\"\" + fieldName + \"\\\" claims to have size=\" + values.size() + \" points and inconsistent docCount=\" + values.getDocCount());\n      }\n\n      if (values.getDocCount() > maxDoc) {\n        throw new RuntimeException(\"point values for field \\\"\" + fieldName + \"\\\" claims to have docCount=\" + values.getDocCount() + \" but that's greater than maxDoc=\" + maxDoc);\n      }\n\n      if (globalMinPackedValue == null) {\n        if (values.size() != 0) {\n          throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldName + \"\\\" yet size=\" + values.size());\n        }\n      } else if (globalMinPackedValue.length != packedBytesCount) {\n        throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldName + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n      }\n      if (globalMaxPackedValue == null) {\n        if (values.size() != 0) {\n          throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldName + \"\\\" yet size=\" + values.size());\n        }\n      } else if (globalMaxPackedValue.length != packedBytesCount) {\n        throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldName + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#VerifyPointsVisitor(String,int,PointValues).mjava","pathOld":"/dev/null","sourceNew":"    /** Sole constructor */\n    public VerifyPointsVisitor(String fieldName, int maxDoc, PointValues values) throws IOException {\n      this.maxDoc = maxDoc;\n      this.fieldName = fieldName;\n      numDims = values.getNumDimensions();\n      bytesPerDim = values.getBytesPerDimension();\n      packedBytesCount = numDims * bytesPerDim;\n      globalMinPackedValue = values.getMinPackedValue();\n      globalMaxPackedValue = values.getMaxPackedValue();\n      docsSeen = new FixedBitSet(maxDoc);\n      lastMinPackedValue = new byte[packedBytesCount];\n      lastMaxPackedValue = new byte[packedBytesCount];\n      lastPackedValue = new byte[packedBytesCount];\n\n      if (values.getDocCount() > values.size()) {\n        throw new RuntimeException(\"point values for field \\\"\" + fieldName + \"\\\" claims to have size=\" + values.size() + \" points and inconsistent docCount=\" + values.getDocCount());\n      }\n\n      if (values.getDocCount() > maxDoc) {\n        throw new RuntimeException(\"point values for field \\\"\" + fieldName + \"\\\" claims to have docCount=\" + values.getDocCount() + \" but that's greater than maxDoc=\" + maxDoc);\n      }\n\n      if (globalMinPackedValue == null) {\n        if (values.size() != 0) {\n          throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldName + \"\\\" yet size=\" + values.size());\n        }\n      } else if (globalMinPackedValue.length != packedBytesCount) {\n        throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldName + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n      }\n      if (globalMaxPackedValue == null) {\n        if (values.size() != 0) {\n          throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldName + \"\\\" yet size=\" + values.size());\n        }\n      } else if (globalMaxPackedValue.length != packedBytesCount) {\n        throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldName + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#VerifyPointsVisitor(String,int,PointValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#VerifyPointsVisitor(String,int,PointValues).mjava","sourceNew":"    /** Sole constructor */\n    public VerifyPointsVisitor(String fieldName, int maxDoc, PointValues values) throws IOException {\n      this.maxDoc = maxDoc;\n      this.fieldName = fieldName;\n      numDataDims = values.getNumDataDimensions();\n      numIndexDims = values.getNumIndexDimensions();\n      bytesPerDim = values.getBytesPerDimension();\n      packedBytesCount = numDataDims * bytesPerDim;\n      packedIndexBytesCount = numIndexDims * bytesPerDim;\n      globalMinPackedValue = values.getMinPackedValue();\n      globalMaxPackedValue = values.getMaxPackedValue();\n      docsSeen = new FixedBitSet(maxDoc);\n      lastMinPackedValue = new byte[packedIndexBytesCount];\n      lastMaxPackedValue = new byte[packedIndexBytesCount];\n      lastPackedValue = new byte[packedBytesCount];\n\n      if (values.getDocCount() > values.size()) {\n        throw new RuntimeException(\"point values for field \\\"\" + fieldName + \"\\\" claims to have size=\" + values.size() + \" points and inconsistent docCount=\" + values.getDocCount());\n      }\n\n      if (values.getDocCount() > maxDoc) {\n        throw new RuntimeException(\"point values for field \\\"\" + fieldName + \"\\\" claims to have docCount=\" + values.getDocCount() + \" but that's greater than maxDoc=\" + maxDoc);\n      }\n\n      if (globalMinPackedValue == null) {\n        if (values.size() != 0) {\n          throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldName + \"\\\" yet size=\" + values.size());\n        }\n      } else if (globalMinPackedValue.length != packedIndexBytesCount) {\n        throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldName + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n      }\n      if (globalMaxPackedValue == null) {\n        if (values.size() != 0) {\n          throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldName + \"\\\" yet size=\" + values.size());\n        }\n      } else if (globalMaxPackedValue.length != packedIndexBytesCount) {\n        throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldName + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n      }\n    }\n\n","sourceOld":"    /** Sole constructor */\n    public VerifyPointsVisitor(String fieldName, int maxDoc, PointValues values) throws IOException {\n      this.maxDoc = maxDoc;\n      this.fieldName = fieldName;\n      numDims = values.getNumDimensions();\n      bytesPerDim = values.getBytesPerDimension();\n      packedBytesCount = numDims * bytesPerDim;\n      globalMinPackedValue = values.getMinPackedValue();\n      globalMaxPackedValue = values.getMaxPackedValue();\n      docsSeen = new FixedBitSet(maxDoc);\n      lastMinPackedValue = new byte[packedBytesCount];\n      lastMaxPackedValue = new byte[packedBytesCount];\n      lastPackedValue = new byte[packedBytesCount];\n\n      if (values.getDocCount() > values.size()) {\n        throw new RuntimeException(\"point values for field \\\"\" + fieldName + \"\\\" claims to have size=\" + values.size() + \" points and inconsistent docCount=\" + values.getDocCount());\n      }\n\n      if (values.getDocCount() > maxDoc) {\n        throw new RuntimeException(\"point values for field \\\"\" + fieldName + \"\\\" claims to have docCount=\" + values.getDocCount() + \" but that's greater than maxDoc=\" + maxDoc);\n      }\n\n      if (globalMinPackedValue == null) {\n        if (values.size() != 0) {\n          throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldName + \"\\\" yet size=\" + values.size());\n        }\n      } else if (globalMinPackedValue.length != packedBytesCount) {\n        throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldName + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n      }\n      if (globalMaxPackedValue == null) {\n        if (values.size() != 0) {\n          throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldName + \"\\\" yet size=\" + values.size());\n        }\n      } else if (globalMaxPackedValue.length != packedBytesCount) {\n        throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldName + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#VerifyPointsVisitor(String,int,PointValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#VerifyPointsVisitor(String,int,PointValues).mjava","sourceNew":"    /** Sole constructor */\n    public VerifyPointsVisitor(String fieldName, int maxDoc, PointValues values) throws IOException {\n      this.maxDoc = maxDoc;\n      this.fieldName = fieldName;\n      numDataDims = values.getNumDimensions();\n      numIndexDims = values.getNumIndexDimensions();\n      bytesPerDim = values.getBytesPerDimension();\n      packedBytesCount = numDataDims * bytesPerDim;\n      packedIndexBytesCount = numIndexDims * bytesPerDim;\n      globalMinPackedValue = values.getMinPackedValue();\n      globalMaxPackedValue = values.getMaxPackedValue();\n      docsSeen = new FixedBitSet(maxDoc);\n      lastMinPackedValue = new byte[packedIndexBytesCount];\n      lastMaxPackedValue = new byte[packedIndexBytesCount];\n      lastPackedValue = new byte[packedBytesCount];\n\n      if (values.getDocCount() > values.size()) {\n        throw new RuntimeException(\"point values for field \\\"\" + fieldName + \"\\\" claims to have size=\" + values.size() + \" points and inconsistent docCount=\" + values.getDocCount());\n      }\n\n      if (values.getDocCount() > maxDoc) {\n        throw new RuntimeException(\"point values for field \\\"\" + fieldName + \"\\\" claims to have docCount=\" + values.getDocCount() + \" but that's greater than maxDoc=\" + maxDoc);\n      }\n\n      if (globalMinPackedValue == null) {\n        if (values.size() != 0) {\n          throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldName + \"\\\" yet size=\" + values.size());\n        }\n      } else if (globalMinPackedValue.length != packedIndexBytesCount) {\n        throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldName + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n      }\n      if (globalMaxPackedValue == null) {\n        if (values.size() != 0) {\n          throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldName + \"\\\" yet size=\" + values.size());\n        }\n      } else if (globalMaxPackedValue.length != packedIndexBytesCount) {\n        throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldName + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n      }\n    }\n\n","sourceOld":"    /** Sole constructor */\n    public VerifyPointsVisitor(String fieldName, int maxDoc, PointValues values) throws IOException {\n      this.maxDoc = maxDoc;\n      this.fieldName = fieldName;\n      numDataDims = values.getNumDataDimensions();\n      numIndexDims = values.getNumIndexDimensions();\n      bytesPerDim = values.getBytesPerDimension();\n      packedBytesCount = numDataDims * bytesPerDim;\n      packedIndexBytesCount = numIndexDims * bytesPerDim;\n      globalMinPackedValue = values.getMinPackedValue();\n      globalMaxPackedValue = values.getMaxPackedValue();\n      docsSeen = new FixedBitSet(maxDoc);\n      lastMinPackedValue = new byte[packedIndexBytesCount];\n      lastMaxPackedValue = new byte[packedIndexBytesCount];\n      lastPackedValue = new byte[packedBytesCount];\n\n      if (values.getDocCount() > values.size()) {\n        throw new RuntimeException(\"point values for field \\\"\" + fieldName + \"\\\" claims to have size=\" + values.size() + \" points and inconsistent docCount=\" + values.getDocCount());\n      }\n\n      if (values.getDocCount() > maxDoc) {\n        throw new RuntimeException(\"point values for field \\\"\" + fieldName + \"\\\" claims to have docCount=\" + values.getDocCount() + \" but that's greater than maxDoc=\" + maxDoc);\n      }\n\n      if (globalMinPackedValue == null) {\n        if (values.size() != 0) {\n          throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldName + \"\\\" yet size=\" + values.size());\n        }\n      } else if (globalMinPackedValue.length != packedIndexBytesCount) {\n        throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldName + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n      }\n      if (globalMaxPackedValue == null) {\n        if (values.size() != 0) {\n          throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldName + \"\\\" yet size=\" + values.size());\n        }\n      } else if (globalMaxPackedValue.length != packedIndexBytesCount) {\n        throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldName + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["f6652c943595e92c187ee904c382863013eae28f","9856095f7afb5a607bf5e65077615ed91273508c"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}