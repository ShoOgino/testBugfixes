{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testSolrExceptionCodeNotFromSolr().mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testSolrExceptionCodeNotFromSolr().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testSolrExceptionCodeNotFromSolr().mjava","sourceNew":"  /**\n   * test that SolrExceptions thrown by HttpSolrClient can\n   * correctly encapsulate http status codes even when not on the list of\n   * ErrorCodes solr may return.\n   */\n  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {\n    final int status = 527;\n    assertEquals(status + \" didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way\",\n                 ErrorCode.UNKNOWN, ErrorCode.getErrorCode(status));\n\n    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n    try {\n      DebugServlet.setErrorCode(status);\n      try {\n        SolrQuery q = new SolrQuery(\"foo\");\n        client.query(q, METHOD.GET);\n        fail(\"Didn't get excepted exception from oversided request\");\n      } catch (SolrException e) {\n        System.out.println(e);\n        assertEquals(\"Unexpected exception status code\", status, e.code());\n      }\n    } finally {\n      client.shutdown();\n      DebugServlet.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * test that SolrExceptions thrown by HttpSolrServer can\n   * correctly encapsulate http status codes even when not on the list of\n   * ErrorCodes solr may return.\n   */\n  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {\n    final int status = 527;\n    assertEquals(status + \" didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way\",\n                 ErrorCode.UNKNOWN, ErrorCode.getErrorCode(status));\n\n    HttpSolrServer server = new HttpSolrServer(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n    try {\n      DebugServlet.setErrorCode(status);\n      try {\n        SolrQuery q = new SolrQuery(\"foo\");\n        server.query(q, METHOD.GET);\n        fail(\"Didn't get excepted exception from oversided request\");\n      } catch (SolrException e) {\n        System.out.println(e);\n        assertEquals(\"Unexpected exception status code\", status, e.code());\n      }\n    } finally {\n      server.shutdown();\n      DebugServlet.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testSolrExceptionCodeNotFromSolr().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testSolrExceptionCodeNotFromSolr().mjava","sourceNew":"  /**\n   * test that SolrExceptions thrown by HttpSolrClient can\n   * correctly encapsulate http status codes even when not on the list of\n   * ErrorCodes solr may return.\n   */\n  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {\n    final int status = 527;\n    assertEquals(status + \" didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way\",\n                 ErrorCode.UNKNOWN, ErrorCode.getErrorCode(status));\n\n    try ( HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      DebugServlet.setErrorCode(status);\n      try {\n        SolrQuery q = new SolrQuery(\"foo\");\n        client.query(q, METHOD.GET);\n        fail(\"Didn't get excepted exception from oversided request\");\n      } catch (SolrException e) {\n        System.out.println(e);\n        assertEquals(\"Unexpected exception status code\", status, e.code());\n      }\n    } finally {\n      DebugServlet.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * test that SolrExceptions thrown by HttpSolrClient can\n   * correctly encapsulate http status codes even when not on the list of\n   * ErrorCodes solr may return.\n   */\n  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {\n    final int status = 527;\n    assertEquals(status + \" didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way\",\n                 ErrorCode.UNKNOWN, ErrorCode.getErrorCode(status));\n\n    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n    try {\n      DebugServlet.setErrorCode(status);\n      try {\n        SolrQuery q = new SolrQuery(\"foo\");\n        client.query(q, METHOD.GET);\n        fail(\"Didn't get excepted exception from oversided request\");\n      } catch (SolrException e) {\n        System.out.println(e);\n        assertEquals(\"Unexpected exception status code\", status, e.code());\n      }\n    } finally {\n      client.shutdown();\n      DebugServlet.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b4407017a35dea85f652ec066e4565818dd75436","date":1431296729,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testSolrExceptionCodeNotFromSolr().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testSolrExceptionCodeNotFromSolr().mjava","sourceNew":"  /**\n   * test that SolrExceptions thrown by HttpSolrClient can\n   * correctly encapsulate http status codes even when not on the list of\n   * ErrorCodes solr may return.\n   */\n  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {\n    final int status = 527;\n    assertEquals(status + \" didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way\",\n        ErrorCode.UNKNOWN, ErrorCode.getErrorCode(status));\n\n    try ( HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      DebugServlet.setErrorCode(status);\n      try {\n        SolrQuery q = new SolrQuery(\"foo\");\n        client.query(q, METHOD.GET);\n        fail(\"Didn't get excepted exception from oversided request\");\n      } catch (SolrException e) {\n        assertEquals(\"Unexpected exception status code\", status, e.code());\n      }\n    } finally {\n      DebugServlet.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * test that SolrExceptions thrown by HttpSolrClient can\n   * correctly encapsulate http status codes even when not on the list of\n   * ErrorCodes solr may return.\n   */\n  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {\n    final int status = 527;\n    assertEquals(status + \" didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way\",\n                 ErrorCode.UNKNOWN, ErrorCode.getErrorCode(status));\n\n    try ( HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      DebugServlet.setErrorCode(status);\n      try {\n        SolrQuery q = new SolrQuery(\"foo\");\n        client.query(q, METHOD.GET);\n        fail(\"Didn't get excepted exception from oversided request\");\n      } catch (SolrException e) {\n        System.out.println(e);\n        assertEquals(\"Unexpected exception status code\", status, e.code());\n      }\n    } finally {\n      DebugServlet.clear();\n    }\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testSolrExceptionCodeNotFromSolr().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testSolrExceptionCodeNotFromSolr().mjava","sourceNew":"  /**\n   * test that SolrExceptions thrown by HttpSolrClient can\n   * correctly encapsulate http status codes even when not on the list of\n   * ErrorCodes solr may return.\n   */\n  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {\n    final int status = 527;\n    assertEquals(status + \" didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way\",\n        ErrorCode.UNKNOWN, ErrorCode.getErrorCode(status));\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      DebugServlet.setErrorCode(status);\n      try {\n        SolrQuery q = new SolrQuery(\"foo\");\n        client.query(q, METHOD.GET);\n        fail(\"Didn't get excepted exception from oversided request\");\n      } catch (SolrException e) {\n        assertEquals(\"Unexpected exception status code\", status, e.code());\n      }\n    } finally {\n      DebugServlet.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * test that SolrExceptions thrown by HttpSolrClient can\n   * correctly encapsulate http status codes even when not on the list of\n   * ErrorCodes solr may return.\n   */\n  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {\n    final int status = 527;\n    assertEquals(status + \" didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way\",\n        ErrorCode.UNKNOWN, ErrorCode.getErrorCode(status));\n\n    try ( HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      DebugServlet.setErrorCode(status);\n      try {\n        SolrQuery q = new SolrQuery(\"foo\");\n        client.query(q, METHOD.GET);\n        fail(\"Didn't get excepted exception from oversided request\");\n      } catch (SolrException e) {\n        assertEquals(\"Unexpected exception status code\", status, e.code());\n      }\n    } finally {\n      DebugServlet.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testSolrExceptionCodeNotFromSolr().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testSolrExceptionCodeNotFromSolr().mjava","sourceNew":"  /**\n   * test that SolrExceptions thrown by HttpSolrClient can\n   * correctly encapsulate http status codes even when not on the list of\n   * ErrorCodes solr may return.\n   */\n  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {\n    final int status = 527;\n    assertEquals(status + \" didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way\",\n        ErrorCode.UNKNOWN, ErrorCode.getErrorCode(status));\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      DebugServlet.setErrorCode(status);\n      try {\n        SolrQuery q = new SolrQuery(\"foo\");\n        client.query(q, METHOD.GET);\n        fail(\"Didn't get excepted exception from oversided request\");\n      } catch (SolrException e) {\n        assertEquals(\"Unexpected exception status code\", status, e.code());\n      }\n    } finally {\n      DebugServlet.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * test that SolrExceptions thrown by HttpSolrClient can\n   * correctly encapsulate http status codes even when not on the list of\n   * ErrorCodes solr may return.\n   */\n  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {\n    final int status = 527;\n    assertEquals(status + \" didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way\",\n        ErrorCode.UNKNOWN, ErrorCode.getErrorCode(status));\n\n    try ( HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      DebugServlet.setErrorCode(status);\n      try {\n        SolrQuery q = new SolrQuery(\"foo\");\n        client.query(q, METHOD.GET);\n        fail(\"Didn't get excepted exception from oversided request\");\n      } catch (SolrException e) {\n        assertEquals(\"Unexpected exception status code\", status, e.code());\n      }\n    } finally {\n      DebugServlet.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testSolrExceptionCodeNotFromSolr().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testSolrExceptionCodeNotFromSolr().mjava","sourceNew":"  /**\n   * test that SolrExceptions thrown by HttpSolrClient can\n   * correctly encapsulate http status codes even when not on the list of\n   * ErrorCodes solr may return.\n   */\n  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {\n    final int status = 527;\n    assertEquals(status + \" didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way\",\n        ErrorCode.UNKNOWN, ErrorCode.getErrorCode(status));\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      DebugServlet.setErrorCode(status);\n      SolrQuery q = new SolrQuery(\"foo\");\n      SolrException e = expectThrows(SolrException.class, () -> client.query(q, METHOD.GET));\n      assertEquals(\"Unexpected exception status code\", status, e.code());\n    } finally {\n      DebugServlet.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * test that SolrExceptions thrown by HttpSolrClient can\n   * correctly encapsulate http status codes even when not on the list of\n   * ErrorCodes solr may return.\n   */\n  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {\n    final int status = 527;\n    assertEquals(status + \" didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way\",\n        ErrorCode.UNKNOWN, ErrorCode.getErrorCode(status));\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      DebugServlet.setErrorCode(status);\n      try {\n        SolrQuery q = new SolrQuery(\"foo\");\n        client.query(q, METHOD.GET);\n        fail(\"Didn't get excepted exception from oversided request\");\n      } catch (SolrException e) {\n        assertEquals(\"Unexpected exception status code\", status, e.code());\n      }\n    } finally {\n      DebugServlet.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testSolrExceptionCodeNotFromSolr().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testSolrExceptionCodeNotFromSolr().mjava","sourceNew":"  /**\n   * test that SolrExceptions thrown by HttpSolrClient can\n   * correctly encapsulate http status codes even when not on the list of\n   * ErrorCodes solr may return.\n   */\n  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {\n    final int status = 527;\n    assertEquals(status + \" didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way\",\n        ErrorCode.UNKNOWN, ErrorCode.getErrorCode(status));\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      DebugServlet.setErrorCode(status);\n      SolrQuery q = new SolrQuery(\"foo\");\n      SolrException e = expectThrows(SolrException.class, () -> client.query(q, METHOD.GET));\n      assertEquals(\"Unexpected exception status code\", status, e.code());\n    } finally {\n      DebugServlet.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * test that SolrExceptions thrown by HttpSolrClient can\n   * correctly encapsulate http status codes even when not on the list of\n   * ErrorCodes solr may return.\n   */\n  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {\n    final int status = 527;\n    assertEquals(status + \" didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way\",\n        ErrorCode.UNKNOWN, ErrorCode.getErrorCode(status));\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      DebugServlet.setErrorCode(status);\n      try {\n        SolrQuery q = new SolrQuery(\"foo\");\n        client.query(q, METHOD.GET);\n        fail(\"Didn't get excepted exception from oversided request\");\n      } catch (SolrException e) {\n        assertEquals(\"Unexpected exception status code\", status, e.code());\n      }\n    } finally {\n      DebugServlet.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testSolrExceptionCodeNotFromSolr().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testSolrExceptionCodeNotFromSolr().mjava","sourceNew":"  /**\n   * test that SolrExceptions thrown by HttpSolrClient can\n   * correctly encapsulate http status codes even when not on the list of\n   * ErrorCodes solr may return.\n   */\n  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {\n    final int status = 527;\n    assertEquals(status + \" didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way\",\n        ErrorCode.UNKNOWN, ErrorCode.getErrorCode(status));\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      DebugServlet.setErrorCode(status);\n      SolrQuery q = new SolrQuery(\"foo\");\n      SolrException e = expectThrows(SolrException.class, () -> client.query(q, METHOD.GET));\n      assertEquals(\"Unexpected exception status code\", status, e.code());\n    } finally {\n      DebugServlet.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * test that SolrExceptions thrown by HttpSolrClient can\n   * correctly encapsulate http status codes even when not on the list of\n   * ErrorCodes solr may return.\n   */\n  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {\n    final int status = 527;\n    assertEquals(status + \" didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way\",\n        ErrorCode.UNKNOWN, ErrorCode.getErrorCode(status));\n\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      DebugServlet.setErrorCode(status);\n      try {\n        SolrQuery q = new SolrQuery(\"foo\");\n        client.query(q, METHOD.GET);\n        fail(\"Didn't get excepted exception from oversided request\");\n      } catch (SolrException e) {\n        assertEquals(\"Unexpected exception status code\", status, e.code());\n      }\n    } finally {\n      DebugServlet.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["b4407017a35dea85f652ec066e4565818dd75436"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["b4407017a35dea85f652ec066e4565818dd75436","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"b4407017a35dea85f652ec066e4565818dd75436":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"b4407017a35dea85f652ec066e4565818dd75436":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["b4407017a35dea85f652ec066e4565818dd75436"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}