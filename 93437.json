{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[TO-extends-Throwable,TW-extends-Throwable]_expectThrows(Class[TO],Class[TW],ThrowingRunnable).mjava","commits":[{"id":"eca6c16577c72bb12bfca3a7717d968c85ea729c","date":1486164338,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[TO-extends-Throwable,TW-extends-Throwable]_expectThrows(Class[TO],Class[TW],ThrowingRunnable).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Checks that specific wrapped and outer exception classes are thrown\n   * by the given runnable, and returns the wrapped exception. \n   */\n  public static <TO extends Throwable, TW extends Throwable> TW expectThrows\n  (Class<TO> expectedOuterType, Class<TW> expectedWrappedType, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      if (expectedOuterType.isInstance(e)) {\n        Throwable cause = e.getCause();\n        if (expectedWrappedType.isInstance(cause)) {\n          return expectedWrappedType.cast(cause);\n        } else {\n          AssertionFailedError assertion = new AssertionFailedError\n              (\"Unexpected wrapped exception type, expected \" + expectedWrappedType.getSimpleName());\n          assertion.initCause(e);\n          throw assertion;\n        }\n      }\n      AssertionFailedError assertion = new AssertionFailedError\n          (\"Unexpected outer exception type, expected \" + expectedOuterType.getSimpleName());\n      assertion.initCause(e);\n      throw assertion;\n    }\n    throw new AssertionFailedError(\"Expected outer exception \" + expectedOuterType.getSimpleName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3def6097490d483908343e95c16631f2580e2489","date":1533005389,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[TO-extends-Throwable,TW-extends-Throwable]_expectThrows(Class[TO],Class[TW],ThrowingRunnable).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[TO-extends-Throwable,TW-extends-Throwable]_expectThrows(Class[TO],Class[TW],ThrowingRunnable).mjava","sourceNew":"  /**\n   * Checks that specific wrapped and outer exception classes are thrown\n   * by the given runnable, and returns the wrapped exception. \n   */\n  public static <TO extends Throwable, TW extends Throwable> TW expectThrows\n  (Class<TO> expectedOuterType, Class<TW> expectedWrappedType, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      if (expectedOuterType.isInstance(e)) {\n        Throwable cause = e.getCause();\n        if (expectedWrappedType.isInstance(cause)) {\n          return expectedWrappedType.cast(cause);\n        } else {\n          AssertionFailedError assertion = new AssertionFailedError\n              (\"Unexpected wrapped exception type, expected \" + expectedWrappedType.getSimpleName() \n                  + \" but got: \" + cause);\n          assertion.initCause(e);\n          throw assertion;\n        }\n      }\n      AssertionFailedError assertion = new AssertionFailedError\n          (\"Unexpected outer exception type, expected \" + expectedOuterType.getSimpleName()\n           + \" but got: \" + e);\n      assertion.initCause(e);\n      throw assertion;\n    }\n    throw new AssertionFailedError(\"Expected outer exception \" + expectedOuterType.getSimpleName()\n        + \" but no exception was thrown.\");\n  }\n\n","sourceOld":"  /**\n   * Checks that specific wrapped and outer exception classes are thrown\n   * by the given runnable, and returns the wrapped exception. \n   */\n  public static <TO extends Throwable, TW extends Throwable> TW expectThrows\n  (Class<TO> expectedOuterType, Class<TW> expectedWrappedType, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      if (expectedOuterType.isInstance(e)) {\n        Throwable cause = e.getCause();\n        if (expectedWrappedType.isInstance(cause)) {\n          return expectedWrappedType.cast(cause);\n        } else {\n          AssertionFailedError assertion = new AssertionFailedError\n              (\"Unexpected wrapped exception type, expected \" + expectedWrappedType.getSimpleName());\n          assertion.initCause(e);\n          throw assertion;\n        }\n      }\n      AssertionFailedError assertion = new AssertionFailedError\n          (\"Unexpected outer exception type, expected \" + expectedOuterType.getSimpleName());\n      assertion.initCause(e);\n      throw assertion;\n    }\n    throw new AssertionFailedError(\"Expected outer exception \" + expectedOuterType.getSimpleName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d592ac9e6400869a47757802651c715b4e88219","date":1570470117,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[TO-extends-Throwable,TW-extends-Throwable]_expectThrows(Class[TO],Class[TW],ThrowingRunnable).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[TO-extends-Throwable,TW-extends-Throwable]_expectThrows(Class[TO],Class[TW],ThrowingRunnable).mjava","sourceNew":"  /**\n   * Checks that specific wrapped and outer exception classes are thrown\n   * by the given runnable, and returns the wrapped exception. \n   */\n  public static <TO extends Throwable, TW extends Throwable> TW expectThrows\n  (Class<TO> expectedOuterType, Class<TW> expectedWrappedType, ThrowingRunnable runnable) {\n    final Throwable thrown = _expectThrows(Collections.singletonList(expectedOuterType), runnable);\n    if (null == thrown) {\n      throw new AssertionFailedError(\"Expected outer exception \" + expectedOuterType.getSimpleName()\n                                     + \" but no exception was thrown.\");\n    }\n    if (expectedOuterType.isInstance(thrown)) {\n      Throwable cause = thrown.getCause();\n      if (expectedWrappedType.isInstance(cause)) {\n        return expectedWrappedType.cast(cause);\n      } else {\n        AssertionFailedError assertion = new AssertionFailedError\n          (\"Unexpected wrapped exception type, expected \" + expectedWrappedType.getSimpleName() \n           + \" but got: \" + cause);\n        assertion.initCause(thrown);\n        throw assertion;\n      }\n    }\n    AssertionFailedError assertion = new AssertionFailedError\n      (\"Unexpected outer exception type, expected \" + expectedOuterType.getSimpleName()\n       + \" but got: \" + thrown);\n    assertion.initCause(thrown);\n    throw assertion;\n  }\n\n","sourceOld":"  /**\n   * Checks that specific wrapped and outer exception classes are thrown\n   * by the given runnable, and returns the wrapped exception. \n   */\n  public static <TO extends Throwable, TW extends Throwable> TW expectThrows\n  (Class<TO> expectedOuterType, Class<TW> expectedWrappedType, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      if (expectedOuterType.isInstance(e)) {\n        Throwable cause = e.getCause();\n        if (expectedWrappedType.isInstance(cause)) {\n          return expectedWrappedType.cast(cause);\n        } else {\n          AssertionFailedError assertion = new AssertionFailedError\n              (\"Unexpected wrapped exception type, expected \" + expectedWrappedType.getSimpleName() \n                  + \" but got: \" + cause);\n          assertion.initCause(e);\n          throw assertion;\n        }\n      }\n      AssertionFailedError assertion = new AssertionFailedError\n          (\"Unexpected outer exception type, expected \" + expectedOuterType.getSimpleName()\n           + \" but got: \" + e);\n      assertion.initCause(e);\n      throw assertion;\n    }\n    throw new AssertionFailedError(\"Expected outer exception \" + expectedOuterType.getSimpleName()\n        + \" but no exception was thrown.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[TO-extends-Throwable,TW-extends-Throwable]_expectThrows(Class[TO],Class[TW],ThrowingRunnable).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[TO-extends-Throwable,TW-extends-Throwable]_expectThrows(Class[TO],Class[TW],ThrowingRunnable).mjava","sourceNew":"  /**\n   * Checks that specific wrapped and outer exception classes are thrown\n   * by the given runnable, and returns the wrapped exception. \n   */\n  public static <TO extends Throwable, TW extends Throwable> TW expectThrows\n  (Class<TO> expectedOuterType, Class<TW> expectedWrappedType, ThrowingRunnable runnable) {\n    final Throwable thrown = _expectThrows(Collections.singletonList(expectedOuterType), runnable);\n    if (null == thrown) {\n      throw new AssertionFailedError(\"Expected outer exception \" + expectedOuterType.getSimpleName()\n                                     + \" but no exception was thrown.\");\n    }\n    if (expectedOuterType.isInstance(thrown)) {\n      Throwable cause = thrown.getCause();\n      if (expectedWrappedType.isInstance(cause)) {\n        return expectedWrappedType.cast(cause);\n      } else {\n        AssertionFailedError assertion = new AssertionFailedError\n          (\"Unexpected wrapped exception type, expected \" + expectedWrappedType.getSimpleName() \n           + \" but got: \" + cause);\n        assertion.initCause(thrown);\n        throw assertion;\n      }\n    }\n    AssertionFailedError assertion = new AssertionFailedError\n      (\"Unexpected outer exception type, expected \" + expectedOuterType.getSimpleName()\n       + \" but got: \" + thrown);\n    assertion.initCause(thrown);\n    throw assertion;\n  }\n\n","sourceOld":"  /**\n   * Checks that specific wrapped and outer exception classes are thrown\n   * by the given runnable, and returns the wrapped exception. \n   */\n  public static <TO extends Throwable, TW extends Throwable> TW expectThrows\n  (Class<TO> expectedOuterType, Class<TW> expectedWrappedType, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      if (expectedOuterType.isInstance(e)) {\n        Throwable cause = e.getCause();\n        if (expectedWrappedType.isInstance(cause)) {\n          return expectedWrappedType.cast(cause);\n        } else {\n          AssertionFailedError assertion = new AssertionFailedError\n              (\"Unexpected wrapped exception type, expected \" + expectedWrappedType.getSimpleName() \n                  + \" but got: \" + cause);\n          assertion.initCause(e);\n          throw assertion;\n        }\n      }\n      AssertionFailedError assertion = new AssertionFailedError\n          (\"Unexpected outer exception type, expected \" + expectedOuterType.getSimpleName()\n           + \" but got: \" + e);\n      assertion.initCause(e);\n      throw assertion;\n    }\n    throw new AssertionFailedError(\"Expected outer exception \" + expectedOuterType.getSimpleName()\n        + \" but no exception was thrown.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eca6c16577c72bb12bfca3a7717d968c85ea729c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8d592ac9e6400869a47757802651c715b4e88219":["3def6097490d483908343e95c16631f2580e2489"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d592ac9e6400869a47757802651c715b4e88219"],"3def6097490d483908343e95c16631f2580e2489":["eca6c16577c72bb12bfca3a7717d968c85ea729c"],"b0b597c65628ca9e73913a07e81691f8229bae35":["3def6097490d483908343e95c16631f2580e2489","8d592ac9e6400869a47757802651c715b4e88219"]},"commit2Childs":{"eca6c16577c72bb12bfca3a7717d968c85ea729c":["3def6097490d483908343e95c16631f2580e2489"],"8d592ac9e6400869a47757802651c715b4e88219":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eca6c16577c72bb12bfca3a7717d968c85ea729c"],"3def6097490d483908343e95c16631f2580e2489":["8d592ac9e6400869a47757802651c715b4e88219","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}