{"path":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#measure(Callable[Integer]).mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#measure(Callable[Integer]).mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/LookupBenchmarkTest#measure(Callable[Integer]).mjava","sourceNew":"  /**\n   * Do the measurements.\n   */\n  private BenchmarkResult measure(Callable<Integer> callable) {\n    final double NANOS_PER_MS = 1000000;\n\n    try {\n      List<Double> times = new ArrayList<Double>();\n      for (int i = 0; i < warmup + rounds; i++) {\n          final long start = System.nanoTime();\n          guard = callable.call().intValue();\n          times.add((System.nanoTime() - start) / NANOS_PER_MS);\n      }\n      return new BenchmarkResult(times, warmup, rounds);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Do the measurements.\n   */\n  private BenchmarkResult measure(Callable<Integer> callable) {\n    final double NANOS_PER_MS = 1000000;\n\n    try {\n      List<Double> times = Lists.newArrayList();\n      for (int i = 0; i < warmup + rounds; i++) {\n          final long start = System.nanoTime();\n          guard = callable.call().intValue();\n          times.add((System.nanoTime() - start) / NANOS_PER_MS);\n      }\n      return new BenchmarkResult(times, warmup, rounds);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#measure(Callable[Integer]).mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/LookupBenchmarkTest#measure(Callable[Integer]).mjava","sourceNew":"  /**\n   * Do the measurements.\n   */\n  private BenchmarkResult measure(Callable<Integer> callable) {\n    final double NANOS_PER_MS = 1000000;\n\n    try {\n      List<Double> times = new ArrayList<Double>();\n      for (int i = 0; i < warmup + rounds; i++) {\n          final long start = System.nanoTime();\n          guard = callable.call().intValue();\n          times.add((System.nanoTime() - start) / NANOS_PER_MS);\n      }\n      return new BenchmarkResult(times, warmup, rounds);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Do the measurements.\n   */\n  private BenchmarkResult measure(Callable<Integer> callable) {\n    final double NANOS_PER_MS = 1000000;\n\n    try {\n      List<Double> times = Lists.newArrayList();\n      for (int i = 0; i < warmup + rounds; i++) {\n          final long start = System.nanoTime();\n          guard = callable.call().intValue();\n          times.add((System.nanoTime() - start) / NANOS_PER_MS);\n      }\n      return new BenchmarkResult(times, warmup, rounds);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#measure(Callable[Integer]).mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/LookupBenchmarkTest#measure(Callable[Integer]).mjava","sourceNew":"  /**\n   * Do the measurements.\n   */\n  private BenchmarkResult measure(Callable<Integer> callable) {\n    final double NANOS_PER_MS = 1000000;\n\n    try {\n      List<Double> times = new ArrayList<Double>();\n      for (int i = 0; i < warmup + rounds; i++) {\n          final long start = System.nanoTime();\n          guard = callable.call().intValue();\n          times.add((System.nanoTime() - start) / NANOS_PER_MS);\n      }\n      return new BenchmarkResult(times, warmup, rounds);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Do the measurements.\n   */\n  private BenchmarkResult measure(Callable<Integer> callable) {\n    final double NANOS_PER_MS = 1000000;\n\n    try {\n      List<Double> times = Lists.newArrayList();\n      for (int i = 0; i < warmup + rounds; i++) {\n          final long start = System.nanoTime();\n          guard = callable.call().intValue();\n          times.add((System.nanoTime() - start) / NANOS_PER_MS);\n      }\n      return new BenchmarkResult(times, warmup, rounds);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#measure(Callable[Integer]).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#measure(Callable[Integer]).mjava","sourceNew":"  /**\n   * Do the measurements.\n   */\n  private BenchmarkResult measure(Callable<Integer> callable) {\n    final double NANOS_PER_MS = 1000000;\n\n    try {\n      List<Double> times = new ArrayList<Double>();\n      for (int i = 0; i < warmup + rounds; i++) {\n          final long start = System.nanoTime();\n          guard = callable.call().intValue();\n          times.add((System.nanoTime() - start) / NANOS_PER_MS);\n      }\n      return new BenchmarkResult(times, warmup, rounds);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Do the measurements.\n   */\n  private BenchmarkResult measure(Callable<Integer> callable) {\n    final double NANOS_PER_MS = 1000000;\n\n    try {\n      List<Double> times = new ArrayList<Double>();\n      for (int i = 0; i < warmup + rounds; i++) {\n          final long start = System.nanoTime();\n          guard = callable.call().intValue();\n          times.add((System.nanoTime() - start) / NANOS_PER_MS);\n      }\n      return new BenchmarkResult(times, warmup, rounds);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e230a61047bc041516c811baa08a7174d6f8322a"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e230a61047bc041516c811baa08a7174d6f8322a":["b89678825b68eccaf09e6ab71675fc0b0af1e099","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}