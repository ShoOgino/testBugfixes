{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWTermVectorsWriter#startField(FieldInfo,int,boolean,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWTermVectorsWriter#startField(FieldInfo,int,boolean,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWTermVectorsWriter#startField(FieldInfo,int,boolean,boolean).mjava","sourceNew":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    lastTerm.length = 0;\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene3xTermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene3xTermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n    \n    assert fieldCount <= numVectorFields;\n    if (fieldCount == numVectorFields) {\n      // last field of the document\n      // this is crazy because the file format is crazy!\n      for (int i = 1; i < fieldCount; i++) {\n        tvd.writeVLong(fps[i] - fps[i-1]);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    lastTerm.length = 0;\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene3xTermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene3xTermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n    \n    assert fieldCount <= numVectorFields;\n    if (fieldCount == numVectorFields) {\n      // last field of the document\n      // this is crazy because the file format is crazy!\n      for (int i = 1; i < fieldCount; i++) {\n        tvd.writeVLong(fps[i] - fps[i-1]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWTermVectorsWriter#startField(FieldInfo,int,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    lastTerm.length = 0;\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene3xTermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene3xTermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n    \n    assert fieldCount <= numVectorFields;\n    if (fieldCount == numVectorFields) {\n      // last field of the document\n      // this is crazy because the file format is crazy!\n      for (int i = 1; i < fieldCount; i++) {\n        tvd.writeVLong(fps[i] - fps[i-1]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}