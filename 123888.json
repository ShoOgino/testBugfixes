{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter#incrementToken().mjava","commits":[{"id":"9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a","date":1528168051,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (finiteStrings == null) {\n      if (wasReset == false) {\n        throw new IllegalStateException(\"reset() missing before incrementToken\");\n      }\n      // lazy init/consume\n      Automaton automaton = toAutomaton(); // calls reset(), incrementToken() repeatedly, and end() on inputTokenStream\n      finiteStrings = new LimitedFiniteStringsIterator(automaton, maxGraphExpansions);\n      //note: would be nice to know the startOffset but toAutomaton doesn't capture it.  We'll assume 0\n      endOffset = inputTokenStream.getAttribute(OffsetAttribute.class).endOffset();\n    }\n\n    IntsRef string = finiteStrings.next();\n    if (string == null) {\n      return false;\n    }\n\n    clearAttributes();\n\n    if (finiteStrings.size() > 1) { // if number of iterated strings so far is more than one...\n      posIncrAtt.setPositionIncrement(0); // stacked\n    }\n\n    offsetAtt.setOffset(0, endOffset);\n\n    Util.toBytesRef(string, bytesAtt.builder()); // now we have UTF-8\n    if (charTermAttribute != null) {\n      charTermAttribute.setLength(0);\n      charTermAttribute.append(bytesAtt.toUTF16());\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (finiteStrings == null) {\n      if (wasReset == false) {\n        throw new IllegalStateException(\"reset() missing before incrementToken\");\n      }\n      // lazy init/consume\n      Automaton automaton = toAutomaton(); // calls reset(), incrementToken() repeatedly, and end() on inputTokenStream\n      finiteStrings = new LimitedFiniteStringsIterator(automaton, maxGraphExpansions);\n      //note: would be nice to know the startOffset but toAutomaton doesn't capture it.  We'll assume 0\n      endOffset = inputTokenStream.getAttribute(OffsetAttribute.class).endOffset();\n    }\n\n    IntsRef string = finiteStrings.next();\n    if (string == null) {\n      return false;\n    }\n\n    clearAttributes();\n\n    if (finiteStrings.size() > 1) { // if number of iterated strings so far is more than one...\n      posIncrAtt.setPositionIncrement(0); // stacked\n    }\n\n    offsetAtt.setOffset(0, endOffset);\n\n    Util.toBytesRef(string, bytesAtt.builder()); // now we have UTF-8\n    if (charTermAttribute != null) {\n      charTermAttribute.setLength(0);\n      charTermAttribute.append(bytesAtt.toUTF16());\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (finiteStrings == null) {\n      if (wasReset == false) {\n        throw new IllegalStateException(\"reset() missing before incrementToken\");\n      }\n      // lazy init/consume\n      Automaton automaton = toAutomaton(); // calls reset(), incrementToken() repeatedly, and end() on inputTokenStream\n      finiteStrings = new LimitedFiniteStringsIterator(automaton, maxGraphExpansions);\n      //note: would be nice to know the startOffset but toAutomaton doesn't capture it.  We'll assume 0\n      endOffset = inputTokenStream.getAttribute(OffsetAttribute.class).endOffset();\n    }\n\n    IntsRef string = finiteStrings.next();\n    if (string == null) {\n      return false;\n    }\n\n    clearAttributes();\n\n    if (finiteStrings.size() > 1) { // if number of iterated strings so far is more than one...\n      posIncrAtt.setPositionIncrement(0); // stacked\n    }\n\n    offsetAtt.setOffset(0, endOffset);\n\n    Util.toBytesRef(string, bytesAtt.builder()); // now we have UTF-8\n    if (charTermAttribute != null) {\n      charTermAttribute.setLength(0);\n      charTermAttribute.append(bytesAtt.toUTF16());\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a"],"9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a","f592209545c71895260367152601e9200399776d"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}