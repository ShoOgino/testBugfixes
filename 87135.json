{"path":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","commits":[{"id":"92fb09e8bca7aca9e2fdb63aa568597b0b852880","date":1477990966,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeleteInstanceDirAfterCreateFailure() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    Path dataDir = null;\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      CoreStatus status = CoreAdminRequest.getCoreStatus(\"corex\", true, client);\n      String dataDirectory = status.getDataDirectory();\n      dataDir = Paths.get(dataDirectory);\n      assertTrue(Files.exists(dataDir));\n    }\n\n    File subHome = new File(solrHomeDirectory, \"corex\" + File.separator + \"conf\");\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"bad-error-solrconfig.xml\"), new File(subHome, \"solrconfig.xml\"));\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      try {\n        CoreAdminRequest.reloadCore(\"corex\", client);\n      } catch (Exception e) {\n        // this is expected because we put a bad solrconfig -- ignore\n      }\n\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteDataDir(true);\n      req.setDeleteInstanceDir(false); // important because the data directory is inside the instance directory\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertTrue(\"The data directory was not cleaned up on unload after a failed core reload\", Files.notExists(dataDir));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9799ebcab48102552d92f7807965a91fb6e116f7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5809ad14f6ea649a54ac2b8b8826ec0106bd2c3f","date":1478015910,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeleteInstanceDirAfterCreateFailure() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    Path dataDir = null;\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      CoreStatus status = CoreAdminRequest.getCoreStatus(\"corex\", true, client);\n      String dataDirectory = status.getDataDirectory();\n      dataDir = Paths.get(dataDirectory);\n      assertTrue(Files.exists(dataDir));\n    }\n\n    File subHome = new File(solrHomeDirectory, \"corex\" + File.separator + \"conf\");\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"bad-error-solrconfig.xml\"), new File(subHome, \"solrconfig.xml\"));\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      try {\n        CoreAdminRequest.reloadCore(\"corex\", client);\n      } catch (Exception e) {\n        // this is expected because we put a bad solrconfig -- ignore\n      }\n\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteDataDir(true);\n      req.setDeleteInstanceDir(false); // important because the data directory is inside the instance directory\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertTrue(\"The data directory was not cleaned up on unload after a failed core reload\", Files.notExists(dataDir));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49fbf507c57e929dfb2673b947213225dbf12576","date":1480102282,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDirAfterCreateFailure() throws Exception  {\n    assumeFalse(\"Ignore test on windows because it does not delete data directory immediately after unload\", Constants.WINDOWS);\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    Path dataDir = null;\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      CoreStatus status = CoreAdminRequest.getCoreStatus(\"corex\", true, client);\n      String dataDirectory = status.getDataDirectory();\n      dataDir = Paths.get(dataDirectory);\n      assertTrue(Files.exists(dataDir));\n    }\n\n    File subHome = new File(solrHomeDirectory, \"corex\" + File.separator + \"conf\");\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"bad-error-solrconfig.xml\"), new File(subHome, \"solrconfig.xml\"));\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      try {\n        CoreAdminRequest.reloadCore(\"corex\", client);\n      } catch (Exception e) {\n        // this is expected because we put a bad solrconfig -- ignore\n      }\n\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteDataDir(true);\n      req.setDeleteInstanceDir(false); // important because the data directory is inside the instance directory\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertTrue(\"The data directory was not cleaned up on unload after a failed core reload\", Files.notExists(dataDir));\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDirAfterCreateFailure() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    Path dataDir = null;\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      CoreStatus status = CoreAdminRequest.getCoreStatus(\"corex\", true, client);\n      String dataDirectory = status.getDataDirectory();\n      dataDir = Paths.get(dataDirectory);\n      assertTrue(Files.exists(dataDir));\n    }\n\n    File subHome = new File(solrHomeDirectory, \"corex\" + File.separator + \"conf\");\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"bad-error-solrconfig.xml\"), new File(subHome, \"solrconfig.xml\"));\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      try {\n        CoreAdminRequest.reloadCore(\"corex\", client);\n      } catch (Exception e) {\n        // this is expected because we put a bad solrconfig -- ignore\n      }\n\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteDataDir(true);\n      req.setDeleteInstanceDir(false); // important because the data directory is inside the instance directory\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertTrue(\"The data directory was not cleaned up on unload after a failed core reload\", Files.notExists(dataDir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55b1fe7b6e19ce99f7f02662b4126e0b810ebb1b","date":1480143306,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDirAfterCreateFailure() throws Exception  {\n    assumeFalse(\"Ignore test on windows because it does not delete data directory immediately after unload\", Constants.WINDOWS);\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    Path dataDir = null;\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      CoreStatus status = CoreAdminRequest.getCoreStatus(\"corex\", true, client);\n      String dataDirectory = status.getDataDirectory();\n      dataDir = Paths.get(dataDirectory);\n      assertTrue(Files.exists(dataDir));\n    }\n\n    File subHome = new File(solrHomeDirectory, \"corex\" + File.separator + \"conf\");\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"bad-error-solrconfig.xml\"), new File(subHome, \"solrconfig.xml\"));\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      try {\n        CoreAdminRequest.reloadCore(\"corex\", client);\n      } catch (Exception e) {\n        // this is expected because we put a bad solrconfig -- ignore\n      }\n\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteDataDir(true);\n      req.setDeleteInstanceDir(false); // important because the data directory is inside the instance directory\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertTrue(\"The data directory was not cleaned up on unload after a failed core reload\", Files.notExists(dataDir));\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDirAfterCreateFailure() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    Path dataDir = null;\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      CoreStatus status = CoreAdminRequest.getCoreStatus(\"corex\", true, client);\n      String dataDirectory = status.getDataDirectory();\n      dataDir = Paths.get(dataDirectory);\n      assertTrue(Files.exists(dataDir));\n    }\n\n    File subHome = new File(solrHomeDirectory, \"corex\" + File.separator + \"conf\");\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"bad-error-solrconfig.xml\"), new File(subHome, \"solrconfig.xml\"));\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      try {\n        CoreAdminRequest.reloadCore(\"corex\", client);\n      } catch (Exception e) {\n        // this is expected because we put a bad solrconfig -- ignore\n      }\n\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteDataDir(true);\n      req.setDeleteInstanceDir(false); // important because the data directory is inside the instance directory\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertTrue(\"The data directory was not cleaned up on unload after a failed core reload\", Files.notExists(dataDir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDirAfterCreateFailure() throws Exception  {\n    assumeFalse(\"Ignore test on windows because it does not delete data directory immediately after unload\", Constants.WINDOWS);\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    Path dataDir = null;\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      CoreStatus status = CoreAdminRequest.getCoreStatus(\"corex\", true, client);\n      String dataDirectory = status.getDataDirectory();\n      dataDir = Paths.get(dataDirectory);\n      assertTrue(Files.exists(dataDir));\n    }\n\n    File subHome = new File(solrHomeDirectory, \"corex\" + File.separator + \"conf\");\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"bad-error-solrconfig.xml\"), new File(subHome, \"solrconfig.xml\"));\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      try {\n        CoreAdminRequest.reloadCore(\"corex\", client);\n      } catch (Exception e) {\n        // this is expected because we put a bad solrconfig -- ignore\n      }\n\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteDataDir(true);\n      req.setDeleteInstanceDir(false); // important because the data directory is inside the instance directory\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertTrue(\"The data directory was not cleaned up on unload after a failed core reload\", Files.notExists(dataDir));\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDirAfterCreateFailure() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    Path dataDir = null;\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      CoreStatus status = CoreAdminRequest.getCoreStatus(\"corex\", true, client);\n      String dataDirectory = status.getDataDirectory();\n      dataDir = Paths.get(dataDirectory);\n      assertTrue(Files.exists(dataDir));\n    }\n\n    File subHome = new File(solrHomeDirectory, \"corex\" + File.separator + \"conf\");\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"bad-error-solrconfig.xml\"), new File(subHome, \"solrconfig.xml\"));\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      try {\n        CoreAdminRequest.reloadCore(\"corex\", client);\n      } catch (Exception e) {\n        // this is expected because we put a bad solrconfig -- ignore\n      }\n\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteDataDir(true);\n      req.setDeleteInstanceDir(false); // important because the data directory is inside the instance directory\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertTrue(\"The data directory was not cleaned up on unload after a failed core reload\", Files.notExists(dataDir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDirAfterCreateFailure() throws Exception  {\n    assumeFalse(\"Ignore test on windows because it does not delete data directory immediately after unload\", Constants.WINDOWS);\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    Path dataDir = null;\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      CoreStatus status = CoreAdminRequest.getCoreStatus(\"corex\", true, client);\n      String dataDirectory = status.getDataDirectory();\n      dataDir = Paths.get(dataDirectory);\n      assertTrue(Files.exists(dataDir));\n    }\n\n    File subHome = new File(solrHomeDirectory, \"corex\" + File.separator + \"conf\");\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"bad-error-solrconfig.xml\"), new File(subHome, \"solrconfig.xml\"));\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      try {\n        CoreAdminRequest.reloadCore(\"corex\", client);\n      } catch (Exception e) {\n        // this is expected because we put a bad solrconfig -- ignore\n      }\n\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteDataDir(true);\n      req.setDeleteInstanceDir(false); // important because the data directory is inside the instance directory\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertTrue(\"The data directory was not cleaned up on unload after a failed core reload\", Files.notExists(dataDir));\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDirAfterCreateFailure() throws Exception  {\n    assumeFalse(\"Ignore test on windows because it does not delete data directory immediately after unload\", Constants.WINDOWS);\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    Path dataDir = null;\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      CoreStatus status = CoreAdminRequest.getCoreStatus(\"corex\", true, client);\n      String dataDirectory = status.getDataDirectory();\n      dataDir = Paths.get(dataDirectory);\n      assertTrue(Files.exists(dataDir));\n    }\n\n    File subHome = new File(solrHomeDirectory, \"corex\" + File.separator + \"conf\");\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"bad-error-solrconfig.xml\"), new File(subHome, \"solrconfig.xml\"));\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      try {\n        CoreAdminRequest.reloadCore(\"corex\", client);\n      } catch (Exception e) {\n        // this is expected because we put a bad solrconfig -- ignore\n      }\n\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteDataDir(true);\n      req.setDeleteInstanceDir(false); // important because the data directory is inside the instance directory\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertTrue(\"The data directory was not cleaned up on unload after a failed core reload\", Files.notExists(dataDir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDirAfterCreateFailure() throws Exception  {\n    assumeFalse(\"Ignore test on windows because it does not delete data directory immediately after unload\", Constants.WINDOWS);\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    Path dataDir = null;\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      CoreStatus status = CoreAdminRequest.getCoreStatus(\"corex\", true, client);\n      String dataDirectory = status.getDataDirectory();\n      dataDir = Paths.get(dataDirectory);\n      assertTrue(Files.exists(dataDir));\n    }\n\n    File subHome = new File(solrHomeDirectory, \"corex\" + File.separator + \"conf\");\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"bad-error-solrconfig.xml\"), new File(subHome, \"solrconfig.xml\"));\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      try {\n        CoreAdminRequest.reloadCore(\"corex\", client);\n      } catch (Exception e) {\n        // this is expected because we put a bad solrconfig -- ignore\n      }\n\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteDataDir(true);\n      req.setDeleteInstanceDir(false); // important because the data directory is inside the instance directory\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertTrue(\"The data directory was not cleaned up on unload after a failed core reload\", Files.notExists(dataDir));\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDirAfterCreateFailure() throws Exception  {\n    assumeFalse(\"Ignore test on windows because it does not delete data directory immediately after unload\", Constants.WINDOWS);\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    Path dataDir = null;\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      CoreStatus status = CoreAdminRequest.getCoreStatus(\"corex\", true, client);\n      String dataDirectory = status.getDataDirectory();\n      dataDir = Paths.get(dataDirectory);\n      assertTrue(Files.exists(dataDir));\n    }\n\n    File subHome = new File(solrHomeDirectory, \"corex\" + File.separator + \"conf\");\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"bad-error-solrconfig.xml\"), new File(subHome, \"solrconfig.xml\"));\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      try {\n        CoreAdminRequest.reloadCore(\"corex\", client);\n      } catch (Exception e) {\n        // this is expected because we put a bad solrconfig -- ignore\n      }\n\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteDataDir(true);\n      req.setDeleteInstanceDir(false); // important because the data directory is inside the instance directory\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertTrue(\"The data directory was not cleaned up on unload after a failed core reload\", Files.notExists(dataDir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9799ebcab48102552d92f7807965a91fb6e116f7","date":1564676118,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDirAfterCreateFailure() throws Exception  {\n    assumeFalse(\"Ignore test on windows because it does not delete data directory immediately after unload\", Constants.WINDOWS);\n    File solrHomeDirectory = createTempDir(\"solr-home\").toFile();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    Path dataDir = null;\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      CoreStatus status = CoreAdminRequest.getCoreStatus(\"corex\", true, client);\n      String dataDirectory = status.getDataDirectory();\n      dataDir = Paths.get(dataDirectory);\n      assertTrue(Files.exists(dataDir));\n    }\n\n    File subHome = new File(solrHomeDirectory, \"corex\" + File.separator + \"conf\");\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"bad-error-solrconfig.xml\"), new File(subHome, \"solrconfig.xml\"));\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      try {\n        CoreAdminRequest.reloadCore(\"corex\", client);\n      } catch (Exception e) {\n        // this is expected because we put a bad solrconfig -- ignore\n      }\n\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteDataDir(true);\n      req.setDeleteInstanceDir(false); // important because the data directory is inside the instance directory\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertTrue(\"The data directory was not cleaned up on unload after a failed core reload\", Files.notExists(dataDir));\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDirAfterCreateFailure() throws Exception  {\n    assumeFalse(\"Ignore test on windows because it does not delete data directory immediately after unload\", Constants.WINDOWS);\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    Path dataDir = null;\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      CoreStatus status = CoreAdminRequest.getCoreStatus(\"corex\", true, client);\n      String dataDirectory = status.getDataDirectory();\n      dataDir = Paths.get(dataDirectory);\n      assertTrue(Files.exists(dataDir));\n    }\n\n    File subHome = new File(solrHomeDirectory, \"corex\" + File.separator + \"conf\");\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"bad-error-solrconfig.xml\"), new File(subHome, \"solrconfig.xml\"));\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      try {\n        CoreAdminRequest.reloadCore(\"corex\", client);\n      } catch (Exception e) {\n        // this is expected because we put a bad solrconfig -- ignore\n      }\n\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteDataDir(true);\n      req.setDeleteInstanceDir(false); // important because the data directory is inside the instance directory\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertTrue(\"The data directory was not cleaned up on unload after a failed core reload\", Files.notExists(dataDir));\n  }\n\n","bugFix":["92fb09e8bca7aca9e2fdb63aa568597b0b852880"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDirAfterCreateFailure() throws Exception  {\n    assumeFalse(\"Ignore test on windows because it does not delete data directory immediately after unload\", Constants.WINDOWS);\n    File solrHomeDirectory = createTempDir(\"solr-home\").toFile();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    Path dataDir = null;\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      CoreStatus status = CoreAdminRequest.getCoreStatus(\"corex\", true, client);\n      String dataDirectory = status.getDataDirectory();\n      dataDir = Paths.get(dataDirectory);\n      assertTrue(Files.exists(dataDir));\n    }\n\n    File subHome = new File(solrHomeDirectory, \"corex\" + File.separator + \"conf\");\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"bad-error-solrconfig.xml\"), new File(subHome, \"solrconfig.xml\"));\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      // this is expected because we put a bad solrconfig -- ignore\n      expectThrows(Exception.class, () -> CoreAdminRequest.reloadCore(\"corex\", client));\n\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteDataDir(true);\n      req.setDeleteInstanceDir(false); // important because the data directory is inside the instance directory\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertTrue(\"The data directory was not cleaned up on unload after a failed core reload\", Files.notExists(dataDir));\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDirAfterCreateFailure() throws Exception  {\n    assumeFalse(\"Ignore test on windows because it does not delete data directory immediately after unload\", Constants.WINDOWS);\n    File solrHomeDirectory = createTempDir(\"solr-home\").toFile();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    Path dataDir = null;\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      CoreStatus status = CoreAdminRequest.getCoreStatus(\"corex\", true, client);\n      String dataDirectory = status.getDataDirectory();\n      dataDir = Paths.get(dataDirectory);\n      assertTrue(Files.exists(dataDir));\n    }\n\n    File subHome = new File(solrHomeDirectory, \"corex\" + File.separator + \"conf\");\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"bad-error-solrconfig.xml\"), new File(subHome, \"solrconfig.xml\"));\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      try {\n        CoreAdminRequest.reloadCore(\"corex\", client);\n      } catch (Exception e) {\n        // this is expected because we put a bad solrconfig -- ignore\n      }\n\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteDataDir(true);\n      req.setDeleteInstanceDir(false); // important because the data directory is inside the instance directory\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertTrue(\"The data directory was not cleaned up on unload after a failed core reload\", Files.notExists(dataDir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDirAfterCreateFailure() throws Exception  {\n    assumeFalse(\"Ignore test on windows because it does not delete data directory immediately after unload\", Constants.WINDOWS);\n    File solrHomeDirectory = createTempDir(\"solr-home\").toFile();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    Path dataDir = null;\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      CoreStatus status = CoreAdminRequest.getCoreStatus(\"corex\", true, client);\n      String dataDirectory = status.getDataDirectory();\n      dataDir = Paths.get(dataDirectory);\n      assertTrue(Files.exists(dataDir));\n    }\n\n    File subHome = new File(solrHomeDirectory, \"corex\" + File.separator + \"conf\");\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"bad-error-solrconfig.xml\"), new File(subHome, \"solrconfig.xml\"));\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      // this is expected because we put a bad solrconfig -- ignore\n      expectThrows(Exception.class, () -> CoreAdminRequest.reloadCore(\"corex\", client));\n\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteDataDir(true);\n      req.setDeleteInstanceDir(false); // important because the data directory is inside the instance directory\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertTrue(\"The data directory was not cleaned up on unload after a failed core reload\", Files.notExists(dataDir));\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDirAfterCreateFailure() throws Exception  {\n    assumeFalse(\"Ignore test on windows because it does not delete data directory immediately after unload\", Constants.WINDOWS);\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    Path dataDir = null;\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      CoreStatus status = CoreAdminRequest.getCoreStatus(\"corex\", true, client);\n      String dataDirectory = status.getDataDirectory();\n      dataDir = Paths.get(dataDirectory);\n      assertTrue(Files.exists(dataDir));\n    }\n\n    File subHome = new File(solrHomeDirectory, \"corex\" + File.separator + \"conf\");\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"bad-error-solrconfig.xml\"), new File(subHome, \"solrconfig.xml\"));\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      try {\n        CoreAdminRequest.reloadCore(\"corex\", client);\n      } catch (Exception e) {\n        // this is expected because we put a bad solrconfig -- ignore\n      }\n\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteDataDir(true);\n      req.setDeleteInstanceDir(false); // important because the data directory is inside the instance directory\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertTrue(\"The data directory was not cleaned up on unload after a failed core reload\", Files.notExists(dataDir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDirAfterCreateFailure().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDirAfterCreateFailure() throws Exception  {\n    assumeFalse(\"Ignore test on windows because it does not delete data directory immediately after unload\", Constants.WINDOWS);\n    File solrHomeDirectory = createTempDir(\"solr-home\").toFile();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    Path dataDir = null;\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      CoreStatus status = CoreAdminRequest.getCoreStatus(\"corex\", true, client);\n      String dataDirectory = status.getDataDirectory();\n      dataDir = Paths.get(dataDirectory);\n      assertTrue(Files.exists(dataDir));\n    }\n\n    File subHome = new File(solrHomeDirectory, \"corex\" + File.separator + \"conf\");\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"bad-error-solrconfig.xml\"), new File(subHome, \"solrconfig.xml\"));\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      // this is expected because we put a bad solrconfig -- ignore\n      expectThrows(Exception.class, () -> CoreAdminRequest.reloadCore(\"corex\", client));\n\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteDataDir(true);\n      req.setDeleteInstanceDir(false); // important because the data directory is inside the instance directory\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertTrue(\"The data directory was not cleaned up on unload after a failed core reload\", Files.notExists(dataDir));\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDirAfterCreateFailure() throws Exception  {\n    assumeFalse(\"Ignore test on windows because it does not delete data directory immediately after unload\", Constants.WINDOWS);\n    File solrHomeDirectory = createTempDir(\"solr-home\").toFile();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    Path dataDir = null;\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      CoreStatus status = CoreAdminRequest.getCoreStatus(\"corex\", true, client);\n      String dataDirectory = status.getDataDirectory();\n      dataDir = Paths.get(dataDirectory);\n      assertTrue(Files.exists(dataDir));\n    }\n\n    File subHome = new File(solrHomeDirectory, \"corex\" + File.separator + \"conf\");\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"bad-error-solrconfig.xml\"), new File(subHome, \"solrconfig.xml\"));\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      try {\n        CoreAdminRequest.reloadCore(\"corex\", client);\n      } catch (Exception e) {\n        // this is expected because we put a bad solrconfig -- ignore\n      }\n\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteDataDir(true);\n      req.setDeleteInstanceDir(false); // important because the data directory is inside the instance directory\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertTrue(\"The data directory was not cleaned up on unload after a failed core reload\", Files.notExists(dataDir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"49fbf507c57e929dfb2673b947213225dbf12576":["92fb09e8bca7aca9e2fdb63aa568597b0b852880"],"55b1fe7b6e19ce99f7f02662b4126e0b810ebb1b":["92fb09e8bca7aca9e2fdb63aa568597b0b852880","49fbf507c57e929dfb2673b947213225dbf12576"],"f8061ddd97f3352007d927dae445884a6f3d857b":["43d1e498704edd2bba13548a189eed4dfccff11b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"5809ad14f6ea649a54ac2b8b8826ec0106bd2c3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92fb09e8bca7aca9e2fdb63aa568597b0b852880"],"43d1e498704edd2bba13548a189eed4dfccff11b":["55b1fe7b6e19ce99f7f02662b4126e0b810ebb1b"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["55b1fe7b6e19ce99f7f02662b4126e0b810ebb1b","43d1e498704edd2bba13548a189eed4dfccff11b"],"727bb765ff2542275f6d31f67be18d7104bae148":["5809ad14f6ea649a54ac2b8b8826ec0106bd2c3f","55b1fe7b6e19ce99f7f02662b4126e0b810ebb1b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9799ebcab48102552d92f7807965a91fb6e116f7":["43d1e498704edd2bba13548a189eed4dfccff11b"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["9799ebcab48102552d92f7807965a91fb6e116f7"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["9799ebcab48102552d92f7807965a91fb6e116f7","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"92fb09e8bca7aca9e2fdb63aa568597b0b852880":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"49fbf507c57e929dfb2673b947213225dbf12576":["55b1fe7b6e19ce99f7f02662b4126e0b810ebb1b"],"55b1fe7b6e19ce99f7f02662b4126e0b810ebb1b":["43d1e498704edd2bba13548a189eed4dfccff11b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","727bb765ff2542275f6d31f67be18d7104bae148"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"5809ad14f6ea649a54ac2b8b8826ec0106bd2c3f":["727bb765ff2542275f6d31f67be18d7104bae148"],"43d1e498704edd2bba13548a189eed4dfccff11b":["f8061ddd97f3352007d927dae445884a6f3d857b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","9799ebcab48102552d92f7807965a91fb6e116f7"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5809ad14f6ea649a54ac2b8b8826ec0106bd2c3f","92fb09e8bca7aca9e2fdb63aa568597b0b852880"],"9799ebcab48102552d92f7807965a91fb6e116f7":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["f8061ddd97f3352007d927dae445884a6f3d857b","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"92fb09e8bca7aca9e2fdb63aa568597b0b852880":["49fbf507c57e929dfb2673b947213225dbf12576","55b1fe7b6e19ce99f7f02662b4126e0b810ebb1b","5809ad14f6ea649a54ac2b8b8826ec0106bd2c3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","727bb765ff2542275f6d31f67be18d7104bae148","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}