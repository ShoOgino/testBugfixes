{"path":"solr/core/src/test/org/apache/solr/CursorPagingTest#testBadInputs().mjava","commits":[{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#testBadInputs().mjava","pathOld":"/dev/null","sourceNew":"  /** verify expected error msgs from bad client behavior */\n  public void testBadInputs() throws Exception {\n    // sometimes seed some data, othertimes use an empty index\n    if (random().nextBoolean()) {\n      assertU(adoc(\"id\", \"42\", \"str\", \"z\", \"float\", \"99.99\", \"int\", \"42\"));\n      assertU(adoc(\"id\", \"66\", \"str\", \"x\", \"float\", \"22.00\", \"int\", \"-66\"));\n    } else {\n      assertU(commit());\n    }\n      assertU(commit());\n\n    // empty, blank, or bogus cursor\n    for (String c : new String[] { \"\", \"   \", \"all the docs please!\"}) {\n      assertFail(params(\"q\", \"*:*\", \n                        \"sort\", \"id desc\", \n                        CURSOR_MARK_PARAM, c),\n                 ErrorCode.BAD_REQUEST, \"Unable to parse\");\n    }\n\n    // no id in sort\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"score desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"uniqueKey field\");\n    // _docid_\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"_docid_ asc, id desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"_docid_\");\n\n    // using cursor w/ timeAllowed\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"id desc\", \n                      CommonParams.TIME_ALLOWED, \"1000\",\n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, CommonParams.TIME_ALLOWED);\n\n    // using cursor w/ grouping\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"id desc\", \n                      GroupParams.GROUP, \"true\",\n                      GroupParams.GROUP_FIELD, \"str\",\n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"Grouping\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"]},"commit2Childs":{"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}