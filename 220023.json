{"path":"lucene/src/java/org/apache/lucene/index/ParallelReader#isCurrent().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#isCurrent().mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#isCurrent().mjava","sourceNew":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    for (final IndexReader reader : readers) {\n      if (!reader.isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    for (final IndexReader reader : readers) {\n      if (!reader.isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","date":1316619234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#isCurrent().mjava","sourceNew":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    for (final IndexReader reader : readers) {\n      if (!reader.isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    for (final IndexReader reader : readers) {\n      if (!reader.isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#isCurrent().mjava","sourceNew":null,"sourceOld":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    for (final IndexReader reader : readers) {\n      if (!reader.isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#isCurrent().mjava","sourceNew":null,"sourceOld":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    for (final IndexReader reader : readers) {\n      if (!reader.isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"]},"commit2Childs":{"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}