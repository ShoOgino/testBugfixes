{"path":"src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","commits":[{"id":"ba534479820dee396d07f520ba2a55400a1b6e7d","date":1085439102,"type":0,"author":"Tim Jones","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"/dev/null","sourceNew":"\t// test sorting when the sort field is empty (undefined) for some of the documents\n\tpublic void testEmptyFieldSort() throws Exception {\n\t\tsort.setSort (\"string\");\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"string\", true);\n\t\tassertMatches (full, queryF, sort, \"IJZ\");\n\n\t\tsort.setSort (\"int\");\n\t\tassertMatches (full, queryF, sort, \"IZJ\");\n\n\t\tsort.setSort (\"int\", true);\n\t\tassertMatches (full, queryF, sort, \"JZI\");\n\n\t\tsort.setSort (\"float\");\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"float\", true);\n\t\tassertMatches (full, queryF, sort, \"IJZ\");\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acb3ebf678f736e210a3af045e37b252010c424b","date":1115332904,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"\t// test sorting when the sort field is empty (undefined) for some of the documents\n\tpublic void testEmptyFieldSort() throws Exception {\n\t\tsort.setSort (\"string\");\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"string\", true);\n\t\tassertMatches (full, queryF, sort, \"IJZ\");\n\n\t\tsort.setSort (\"int\");\n\t\tassertMatches (full, queryF, sort, \"IZJ\");\n\n\t\tsort.setSort (\"int\", true);\n\t\tassertMatches (full, queryF, sort, \"JZI\");\n\n\t\tsort.setSort (\"float\");\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\t// using a nonexisting field as first sort key shouldn't make a difference:\n\t\tsort.setSort (new SortField[] { new SortField (\"nosuchfield\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\") });\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"float\", true);\n\t\tassertMatches (full, queryF, sort, \"IJZ\");\n\t}\n\n","sourceOld":"\t// test sorting when the sort field is empty (undefined) for some of the documents\n\tpublic void testEmptyFieldSort() throws Exception {\n\t\tsort.setSort (\"string\");\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"string\", true);\n\t\tassertMatches (full, queryF, sort, \"IJZ\");\n\n\t\tsort.setSort (\"int\");\n\t\tassertMatches (full, queryF, sort, \"IZJ\");\n\n\t\tsort.setSort (\"int\", true);\n\t\tassertMatches (full, queryF, sort, \"JZI\");\n\n\t\tsort.setSort (\"float\");\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"float\", true);\n\t\tassertMatches (full, queryF, sort, \"IJZ\");\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca63621c3d63233090c26fc637033de9726f76c6","date":1131602252,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"\t// test sorting when the sort field is empty (undefined) for some of the documents\n\tpublic void testEmptyFieldSort() throws Exception {\n\t\tsort.setSort (\"string\");\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"string\", true);\n\t\tassertMatches (full, queryF, sort, \"IJZ\");\n\n\t\tsort.setSort (\"int\");\n\t\tassertMatches (full, queryF, sort, \"IZJ\");\n\n\t\tsort.setSort (\"int\", true);\n\t\tassertMatches (full, queryF, sort, \"JZI\");\n\n\t\tsort.setSort (\"float\");\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\t// using a nonexisting field as first sort key shouldn't make a difference:\n\t\tsort.setSort (new SortField[] { new SortField (\"nosuchfield\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\") });\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"float\", true);\n\t\tassertMatches (full, queryF, sort, \"IJZ\");\n\n\t\t// When a field is null for both documents, the next SortField should be used.\n                // Works for\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\") });\n\t\tassertMatches (full, queryG, sort, \"ZWXY\");\n\n\t\t// Reverse the last criterium to make sure the test didn't pass by chance\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\", true) });\n\t\tassertMatches (full, queryG, sort, \"ZYXW\");\n\n\t\t// Do the same for a MultiSearcher\n\t\tSearcher multiSearcher=new MultiSearcher (new Searchable[] { full });\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\") });\n\t\tassertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\", true) });\n\t\tassertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n\t\t// Don't close the multiSearcher. it would close the full searcher too!\n\n\t\t// Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (new Searchable[] { full });\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\") });\n\t\tassertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\", true) });\n\t\tassertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n\t\t// Don't close the parallelSearcher. it would close the full searcher too!\n\t}\n\n","sourceOld":"\t// test sorting when the sort field is empty (undefined) for some of the documents\n\tpublic void testEmptyFieldSort() throws Exception {\n\t\tsort.setSort (\"string\");\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"string\", true);\n\t\tassertMatches (full, queryF, sort, \"IJZ\");\n\n\t\tsort.setSort (\"int\");\n\t\tassertMatches (full, queryF, sort, \"IZJ\");\n\n\t\tsort.setSort (\"int\", true);\n\t\tassertMatches (full, queryF, sort, \"JZI\");\n\n\t\tsort.setSort (\"float\");\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\t// using a nonexisting field as first sort key shouldn't make a difference:\n\t\tsort.setSort (new SortField[] { new SortField (\"nosuchfield\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\") });\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"float\", true);\n\t\tassertMatches (full, queryF, sort, \"IJZ\");\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4806bbe706c8d659fbd09190efb3fa55497dcac2","date":1156108679,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"\t// test sorting when the sort field is empty (undefined) for some of the documents\n\tpublic void testEmptyFieldSort() throws Exception {\n\t\tsort.setSort (\"string\");\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"string\", true);\n\t\tassertMatches (full, queryF, sort, \"IJZ\");\n\t\t\n\t\tsort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\t\t\n\t\tsort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n\t\tassertMatches (full, queryF, sort, \"IJZ\");\n\n\t\tsort.setSort (\"int\");\n\t\tassertMatches (full, queryF, sort, \"IZJ\");\n\n\t\tsort.setSort (\"int\", true);\n\t\tassertMatches (full, queryF, sort, \"JZI\");\n\n\t\tsort.setSort (\"float\");\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\t// using a nonexisting field as first sort key shouldn't make a difference:\n\t\tsort.setSort (new SortField[] { new SortField (\"nosuchfield\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\") });\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"float\", true);\n\t\tassertMatches (full, queryF, sort, \"IJZ\");\n\n\t\t// When a field is null for both documents, the next SortField should be used.\n                // Works for\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\") });\n\t\tassertMatches (full, queryG, sort, \"ZWXY\");\n\n\t\t// Reverse the last criterium to make sure the test didn't pass by chance\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\", true) });\n\t\tassertMatches (full, queryG, sort, \"ZYXW\");\n\n\t\t// Do the same for a MultiSearcher\n\t\tSearcher multiSearcher=new MultiSearcher (new Searchable[] { full });\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\") });\n\t\tassertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\", true) });\n\t\tassertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n\t\t// Don't close the multiSearcher. it would close the full searcher too!\n\n\t\t// Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (new Searchable[] { full });\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\") });\n\t\tassertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\", true) });\n\t\tassertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n\t\t// Don't close the parallelSearcher. it would close the full searcher too!\n\t}\n\n","sourceOld":"\t// test sorting when the sort field is empty (undefined) for some of the documents\n\tpublic void testEmptyFieldSort() throws Exception {\n\t\tsort.setSort (\"string\");\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"string\", true);\n\t\tassertMatches (full, queryF, sort, \"IJZ\");\n\n\t\tsort.setSort (\"int\");\n\t\tassertMatches (full, queryF, sort, \"IZJ\");\n\n\t\tsort.setSort (\"int\", true);\n\t\tassertMatches (full, queryF, sort, \"JZI\");\n\n\t\tsort.setSort (\"float\");\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\t// using a nonexisting field as first sort key shouldn't make a difference:\n\t\tsort.setSort (new SortField[] { new SortField (\"nosuchfield\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\") });\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"float\", true);\n\t\tassertMatches (full, queryF, sort, \"IJZ\");\n\n\t\t// When a field is null for both documents, the next SortField should be used.\n                // Works for\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\") });\n\t\tassertMatches (full, queryG, sort, \"ZWXY\");\n\n\t\t// Reverse the last criterium to make sure the test didn't pass by chance\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\", true) });\n\t\tassertMatches (full, queryG, sort, \"ZYXW\");\n\n\t\t// Do the same for a MultiSearcher\n\t\tSearcher multiSearcher=new MultiSearcher (new Searchable[] { full });\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\") });\n\t\tassertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\", true) });\n\t\tassertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n\t\t// Don't close the multiSearcher. it would close the full searcher too!\n\n\t\t// Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (new Searchable[] { full });\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\") });\n\t\tassertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\", true) });\n\t\tassertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n\t\t// Don't close the parallelSearcher. it would close the full searcher too!\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (\"string\");\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (\"string\", true);\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (\"int\");\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (\"int\", true);\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (\"float\");\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField[] { new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\") });\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (\"float\", true);\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\") });\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", true) });\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\") });\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", true) });\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\") });\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", true) });\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the parallelSearcher. it would close the full searcher too!\n  }\n\n","sourceOld":"\t// test sorting when the sort field is empty (undefined) for some of the documents\n\tpublic void testEmptyFieldSort() throws Exception {\n\t\tsort.setSort (\"string\");\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"string\", true);\n\t\tassertMatches (full, queryF, sort, \"IJZ\");\n\t\t\n\t\tsort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\t\t\n\t\tsort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n\t\tassertMatches (full, queryF, sort, \"IJZ\");\n\n\t\tsort.setSort (\"int\");\n\t\tassertMatches (full, queryF, sort, \"IZJ\");\n\n\t\tsort.setSort (\"int\", true);\n\t\tassertMatches (full, queryF, sort, \"JZI\");\n\n\t\tsort.setSort (\"float\");\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\t// using a nonexisting field as first sort key shouldn't make a difference:\n\t\tsort.setSort (new SortField[] { new SortField (\"nosuchfield\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\") });\n\t\tassertMatches (full, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"float\", true);\n\t\tassertMatches (full, queryF, sort, \"IJZ\");\n\n\t\t// When a field is null for both documents, the next SortField should be used.\n                // Works for\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\") });\n\t\tassertMatches (full, queryG, sort, \"ZWXY\");\n\n\t\t// Reverse the last criterium to make sure the test didn't pass by chance\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\", true) });\n\t\tassertMatches (full, queryG, sort, \"ZYXW\");\n\n\t\t// Do the same for a MultiSearcher\n\t\tSearcher multiSearcher=new MultiSearcher (new Searchable[] { full });\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\") });\n\t\tassertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\", true) });\n\t\tassertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n\t\t// Don't close the multiSearcher. it would close the full searcher too!\n\n\t\t// Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (new Searchable[] { full });\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\") });\n\t\tassertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n\t\t\t\tnew SortField (\"float\", true) });\n\t\tassertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n\t\t// Don't close the parallelSearcher. it would close the full searcher too!\n\t}\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99","date":1255432705,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the parallelSearcher. it would close the full searcher too!\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (\"string\");\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (\"string\", true);\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (\"int\");\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (\"int\", true);\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (\"float\");\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField[] { new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\") });\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (\"float\", true);\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\") });\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", true) });\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\") });\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", true) });\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\") });\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField[] { new SortField (\"int\"),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", true) });\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the parallelSearcher. it would close the full searcher too!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the parallelSearcher. it would close the full searcher too!\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the parallelSearcher. it would close the full searcher too!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"acb3ebf678f736e210a3af045e37b252010c424b":["ba534479820dee396d07f520ba2a55400a1b6e7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4806bbe706c8d659fbd09190efb3fa55497dcac2":["ca63621c3d63233090c26fc637033de9726f76c6"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["63bc3238545c6012bd44f5d294077997f236bc4e"],"ca63621c3d63233090c26fc637033de9726f76c6":["acb3ebf678f736e210a3af045e37b252010c424b"],"63bc3238545c6012bd44f5d294077997f236bc4e":["4806bbe706c8d659fbd09190efb3fa55497dcac2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"ba534479820dee396d07f520ba2a55400a1b6e7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"acb3ebf678f736e210a3af045e37b252010c424b":["ca63621c3d63233090c26fc637033de9726f76c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba534479820dee396d07f520ba2a55400a1b6e7d"],"4806bbe706c8d659fbd09190efb3fa55497dcac2":["63bc3238545c6012bd44f5d294077997f236bc4e"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ca63621c3d63233090c26fc637033de9726f76c6":["4806bbe706c8d659fbd09190efb3fa55497dcac2"],"63bc3238545c6012bd44f5d294077997f236bc4e":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"ba534479820dee396d07f520ba2a55400a1b6e7d":["acb3ebf678f736e210a3af045e37b252010c424b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}