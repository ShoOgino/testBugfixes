{"path":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","sourceNew":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random), false);\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", newIOContext(random));\n        IndexInput e2 = cr.openInput(\"f3\", newIOContext(random));\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","sourceOld":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random), false);\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", newIOContext(random));\n        IndexInput e2 = cr.openInput(\"f3\", newIOContext(random));\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","sourceNew":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random()), false);\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", newIOContext(random()));\n        IndexInput e2 = cr.openInput(\"f3\", newIOContext(random()));\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","sourceOld":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random), false);\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", newIOContext(random));\n        IndexInput e2 = cr.openInput(\"f3\", newIOContext(random));\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7460755aa94143153400f49c8ac2746f5d092e1a","date":1345536974,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","sourceNew":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random()), false);\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", newIOContext(random()));\n        IndexInput e2 = cr.openInput(\"f3\", newIOContext(random()));\n\n        IndexInput a1 = e1.clone();\n        IndexInput a2 = e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","sourceOld":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random()), false);\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", newIOContext(random()));\n        IndexInput e2 = cr.openInput(\"f3\", newIOContext(random()));\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","sourceNew":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random()), false);\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", newIOContext(random()));\n        IndexInput e2 = cr.openInput(\"f3\", newIOContext(random()));\n\n        IndexInput a1 = e1.clone();\n        IndexInput a2 = e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","sourceOld":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random()), false);\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", newIOContext(random()));\n        IndexInput e2 = cr.openInput(\"f3\", newIOContext(random()));\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","date":1412231650,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","sourceNew":null,"sourceOld":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random()), false);\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", newIOContext(random()));\n        IndexInput e2 = cr.openInput(\"f3\", newIOContext(random()));\n\n        IndexInput a1 = e1.clone();\n        IndexInput a2 = e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","sourceNew":null,"sourceOld":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random()), false);\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", newIOContext(random()));\n        IndexInput e2 = cr.openInput(\"f3\", newIOContext(random()));\n\n        IndexInput a1 = e1.clone();\n        IndexInput a2 = e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","7460755aa94143153400f49c8ac2746f5d092e1a"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["7460755aa94143153400f49c8ac2746f5d092e1a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["7460755aa94143153400f49c8ac2746f5d092e1a","f382b2e9f4ca7dbe98e2f15da70983ecfc02b171"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7460755aa94143153400f49c8ac2746f5d092e1a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["9bb9a29a5e71a90295f175df8919802993142c9a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["001b25b42373b22a52f399dbf072f1224632e8e6","7460755aa94143153400f49c8ac2746f5d092e1a"],"7460755aa94143153400f49c8ac2746f5d092e1a":["001b25b42373b22a52f399dbf072f1224632e8e6","f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}