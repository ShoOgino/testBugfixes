{"path":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","commits":[{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRefBuilder result) {\n    String s = val.toString();\n    try {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(Integer.parseInt(s), 0, result);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCodedBytes(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n          break;\n        case LONG:\n          NumericUtils.longToPrefixCodedBytes(Long.parseLong(s), 0, result);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCodedBytes(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n          break;\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(dateField.parseMath(null, s).getTime(), 0, result);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Invalid Number: \" + val);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    try {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(Integer.parseInt(s), 0, result);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCodedBytes(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n          break;\n        case LONG:\n          NumericUtils.longToPrefixCodedBytes(Long.parseLong(s), 0, result);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCodedBytes(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n          break;\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(dateField.parseMath(null, s).getTime(), 0, result);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Invalid Number: \" + val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331","date":1437383270,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRefBuilder result) {\n    String s = val.toString();\n    try {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(Integer.parseInt(s), 0, result);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCodedBytes(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n          break;\n        case LONG:\n          NumericUtils.longToPrefixCodedBytes(Long.parseLong(s), 0, result);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCodedBytes(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n          break;\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(DateFormatUtil.parseMath(null, s).getTime(), 0, result);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Invalid Number: \" + val);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRefBuilder result) {\n    String s = val.toString();\n    try {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(Integer.parseInt(s), 0, result);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCodedBytes(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n          break;\n        case LONG:\n          NumericUtils.longToPrefixCodedBytes(Long.parseLong(s), 0, result);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCodedBytes(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n          break;\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(dateField.parseMath(null, s).getTime(), 0, result);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Invalid Number: \" + val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRefBuilder result) {\n    String s = val.toString();\n    try {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCodedBytes(Integer.parseInt(s), 0, result);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCodedBytes(LegacyNumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n          break;\n        case LONG:\n          LegacyNumericUtils.longToPrefixCodedBytes(Long.parseLong(s), 0, result);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCodedBytes(LegacyNumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n          break;\n        case DATE:\n          LegacyNumericUtils.longToPrefixCodedBytes(DateFormatUtil.parseMath(null, s).getTime(), 0, result);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Invalid Number: \" + val);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRefBuilder result) {\n    String s = val.toString();\n    try {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(Integer.parseInt(s), 0, result);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCodedBytes(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n          break;\n        case LONG:\n          NumericUtils.longToPrefixCodedBytes(Long.parseLong(s), 0, result);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCodedBytes(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n          break;\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(DateFormatUtil.parseMath(null, s).getTime(), 0, result);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Invalid Number: \" + val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2","date":1455407361,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRefBuilder result) {\n    String s = val.toString();\n    try {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCoded(LegacyNumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n          break;\n        case LONG:\n          LegacyNumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCoded(LegacyNumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n          break;\n        case DATE:\n          LegacyNumericUtils.longToPrefixCoded(DateFormatUtil.parseMath(null, s).getTime(), 0, result);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Invalid Number: \" + val);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRefBuilder result) {\n    String s = val.toString();\n    try {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCodedBytes(Integer.parseInt(s), 0, result);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCodedBytes(LegacyNumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n          break;\n        case LONG:\n          LegacyNumericUtils.longToPrefixCodedBytes(Long.parseLong(s), 0, result);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCodedBytes(LegacyNumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n          break;\n        case DATE:\n          LegacyNumericUtils.longToPrefixCodedBytes(DateFormatUtil.parseMath(null, s).getTime(), 0, result);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Invalid Number: \" + val);\n    }\n  }\n\n","bugFix":null,"bugIntro":["92f8ab19a30ff70981e43b8cc78069cb0941476e","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRefBuilder result) {\n    String s = val.toString();\n    try {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n          break;\n        case LONG:\n          LegacyNumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n          break;\n        case DATE:\n          LegacyNumericUtils.longToPrefixCoded(DateFormatUtil.parseMath(null, s).getTime(), 0, result);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Invalid Number: \" + val);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRefBuilder result) {\n    String s = val.toString();\n    try {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCoded(LegacyNumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n          break;\n        case LONG:\n          LegacyNumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCoded(LegacyNumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n          break;\n        case DATE:\n          LegacyNumericUtils.longToPrefixCoded(DateFormatUtil.parseMath(null, s).getTime(), 0, result);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Invalid Number: \" + val);\n    }\n  }\n\n","bugFix":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2"],"bugIntro":["92f8ab19a30ff70981e43b8cc78069cb0941476e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRefBuilder result) {\n    String s = val.toString();\n    try {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n          break;\n        case LONG:\n          LegacyNumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n          break;\n        case DATE:\n          LegacyNumericUtils.longToPrefixCoded(DateFormatUtil.parseMath(null, s).getTime(), 0, result);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Invalid Number: \" + val);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRefBuilder result) {\n    String s = val.toString();\n    try {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCoded(LegacyNumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n          break;\n        case LONG:\n          LegacyNumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCoded(LegacyNumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n          break;\n        case DATE:\n          LegacyNumericUtils.longToPrefixCoded(DateFormatUtil.parseMath(null, s).getTime(), 0, result);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Invalid Number: \" + val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRefBuilder result) {\n    String s = val.toString();\n    try {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n          break;\n        case LONG:\n          LegacyNumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n          break;\n        case DATE:\n          LegacyNumericUtils.longToPrefixCoded(DateMathParser.parseMath(null, s).getTime(), 0, result);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Invalid Number: \" + val);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRefBuilder result) {\n    String s = val.toString();\n    try {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n          break;\n        case LONG:\n          LegacyNumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n          break;\n        case DATE:\n          LegacyNumericUtils.longToPrefixCoded(DateFormatUtil.parseMath(null, s).getTime(), 0, result);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Invalid Number: \" + val);\n    }\n  }\n\n","bugFix":null,"bugIntro":["92f8ab19a30ff70981e43b8cc78069cb0941476e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"92f8ab19a30ff70981e43b8cc78069cb0941476e","date":1497374252,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRefBuilder result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        LegacyNumericUtils.intToPrefixCoded(parseIntFromUser(null, s), 0, result);\n        break;\n      case FLOAT:\n        LegacyNumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(parseFloatFromUser(null, s)), 0, result);\n        break;\n      case LONG:\n        LegacyNumericUtils.longToPrefixCoded(parseLongFromUser(null, s), 0, result);\n        break;\n      case DOUBLE:\n        LegacyNumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(parseDoubleFromUser(null, s)), 0, result);\n        break;\n      case DATE:\n        LegacyNumericUtils.longToPrefixCoded(DateMathParser.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRefBuilder result) {\n    String s = val.toString();\n    try {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n          break;\n        case LONG:\n          LegacyNumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n          break;\n        case DATE:\n          LegacyNumericUtils.longToPrefixCoded(DateMathParser.parseMath(null, s).getTime(), 0, result);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Invalid Number: \" + val);\n    }\n  }\n\n","bugFix":["a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","99c9d8533c954f661481ae44273622957dbf572f","d3f6c7717a0f1decd1668144537943efcc70cd95","651ed0c260e4184c8a85ae7e1c155a4415f2e6e2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRefBuilder result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        LegacyNumericUtils.intToPrefixCoded(parseIntFromUser(null, s), 0, result);\n        break;\n      case FLOAT:\n        LegacyNumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(parseFloatFromUser(null, s)), 0, result);\n        break;\n      case LONG:\n        LegacyNumericUtils.longToPrefixCoded(parseLongFromUser(null, s), 0, result);\n        break;\n      case DOUBLE:\n        LegacyNumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(parseDoubleFromUser(null, s)), 0, result);\n        break;\n      case DATE:\n        LegacyNumericUtils.longToPrefixCoded(DateMathParser.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRefBuilder result) {\n    String s = val.toString();\n    try {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n          break;\n        case LONG:\n          LegacyNumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n          break;\n        case DATE:\n          LegacyNumericUtils.longToPrefixCoded(DateMathParser.parseMath(null, s).getTime(), 0, result);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Invalid Number: \" + val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRefBuilder).mjava","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRefBuilder result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        LegacyNumericUtils.intToPrefixCoded(parseIntFromUser(null, s), 0, result);\n        break;\n      case FLOAT:\n        LegacyNumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(parseFloatFromUser(null, s)), 0, result);\n        break;\n      case LONG:\n        LegacyNumericUtils.longToPrefixCoded(parseLongFromUser(null, s), 0, result);\n        break;\n      case DOUBLE:\n        LegacyNumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(parseDoubleFromUser(null, s)), 0, result);\n        break;\n      case DATE:\n        LegacyNumericUtils.longToPrefixCoded(DateMathParser.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRefBuilder result) {\n    String s = val.toString();\n    try {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n          break;\n        case LONG:\n          LegacyNumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n          break;\n        case DATE:\n          LegacyNumericUtils.longToPrefixCoded(DateMathParser.parseMath(null, s).getTime(), 0, result);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Invalid Number: \" + val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f8ab19a30ff70981e43b8cc78069cb0941476e":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"770342641f7b505eaa8dccdc666158bff2419109":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"28288370235ed02234a64753cdbf0c6ec096304a":["d3f6c7717a0f1decd1668144537943efcc70cd95","92f8ab19a30ff70981e43b8cc78069cb0941476e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["d3f6c7717a0f1decd1668144537943efcc70cd95","92f8ab19a30ff70981e43b8cc78069cb0941476e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2":["770342641f7b505eaa8dccdc666158bff2419109"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2"]},"commit2Childs":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["92f8ab19a30ff70981e43b8cc78069cb0941476e","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"92f8ab19a30ff70981e43b8cc78069cb0941476e":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"770342641f7b505eaa8dccdc666158bff2419109":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["770342641f7b505eaa8dccdc666158bff2419109"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}