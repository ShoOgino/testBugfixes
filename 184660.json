{"path":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#getLocalizedDate(int,int,int,boolean).mjava","commits":[{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#getLocalizedDate(int,int,int,boolean).mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestQueryParserWrapper#getLocalizedDate(int,int,int,boolean).mjava","sourceNew":"  private String getLocalizedDate(int year, int month, int day,\n      boolean extendLastDate) {\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n    Calendar calendar = Calendar.getInstance();\n    calendar.set(year, month, day);\n    if (extendLastDate) {\n      calendar.set(Calendar.HOUR_OF_DAY, 23);\n      calendar.set(Calendar.MINUTE, 59);\n      calendar.set(Calendar.SECOND, 59);\n      calendar.set(Calendar.MILLISECOND, 999);\n    }\n    return df.format(calendar.getTime());\n  }\n\n","sourceOld":"  private String getLocalizedDate(int year, int month, int day,\n      boolean extendLastDate) {\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n    Calendar calendar = Calendar.getInstance();\n    calendar.set(year, month, day);\n    if (extendLastDate) {\n      calendar.set(Calendar.HOUR_OF_DAY, 23);\n      calendar.set(Calendar.MINUTE, 59);\n      calendar.set(Calendar.SECOND, 59);\n      calendar.set(Calendar.MILLISECOND, 999);\n    }\n    return df.format(calendar.getTime());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6c356d9e7be4ba949f083ecd3fb65231bc64008","date":1251182916,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#getLocalizedDate(int,int,int,boolean).mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#getLocalizedDate(int,int,int,boolean).mjava","sourceNew":"  private String getLocalizedDate(int year, int month, int day,\n      boolean extendLastDate) {\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n    Calendar calendar = new GregorianCalendar();\n    calendar.set(year, month, day);\n    if (extendLastDate) {\n      calendar.set(Calendar.HOUR_OF_DAY, 23);\n      calendar.set(Calendar.MINUTE, 59);\n      calendar.set(Calendar.SECOND, 59);\n      calendar.set(Calendar.MILLISECOND, 999);\n    }\n    return df.format(calendar.getTime());\n  }\n\n","sourceOld":"  private String getLocalizedDate(int year, int month, int day,\n      boolean extendLastDate) {\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n    Calendar calendar = Calendar.getInstance();\n    calendar.set(year, month, day);\n    if (extendLastDate) {\n      calendar.set(Calendar.HOUR_OF_DAY, 23);\n      calendar.set(Calendar.MINUTE, 59);\n      calendar.set(Calendar.SECOND, 59);\n      calendar.set(Calendar.MILLISECOND, 999);\n    }\n    return df.format(calendar.getTime());\n  }\n\n","bugFix":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64a84446b679daf1e25d901bf647686ade7fc1f0","date":1260811919,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#getLocalizedDate(int,int,int,boolean).mjava","sourceNew":null,"sourceOld":"  private String getLocalizedDate(int year, int month, int day,\n      boolean extendLastDate) {\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n    Calendar calendar = new GregorianCalendar();\n    calendar.set(year, month, day);\n    if (extendLastDate) {\n      calendar.set(Calendar.HOUR_OF_DAY, 23);\n      calendar.set(Calendar.MINUTE, 59);\n      calendar.set(Calendar.SECOND, 59);\n      calendar.set(Calendar.MILLISECOND, 999);\n    }\n    return df.format(calendar.getTime());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"64a84446b679daf1e25d901bf647686ade7fc1f0":["d6c356d9e7be4ba949f083ecd3fb65231bc64008"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6c356d9e7be4ba949f083ecd3fb65231bc64008":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64a84446b679daf1e25d901bf647686ade7fc1f0"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["d6c356d9e7be4ba949f083ecd3fb65231bc64008"],"64a84446b679daf1e25d901bf647686ade7fc1f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a848e758754282137f42bf85793c278e250390"],"d6c356d9e7be4ba949f083ecd3fb65231bc64008":["64a84446b679daf1e25d901bf647686ade7fc1f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}