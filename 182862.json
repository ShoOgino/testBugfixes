{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,boolean).mjava","commits":[{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this, needsScores);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,boolean).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, int postingsFlags) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this, postingsFlags);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this, needsScores);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,int).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this, needsScores);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, int postingsFlags) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this, postingsFlags);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,boolean).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    query = rewrite(query);\n    Weight weight = createWeight(query, needsScores);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this, needsScores);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,boolean).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    query = rewrite(query);\n    Weight weight = createWeight(query, needsScores);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this, needsScores);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"485545da3b4429d6f138b4baac573a97820ee93b","date":1433876557,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,boolean).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    query = rewrite(query);\n    Weight weight = createWeight(query, needsScores);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity(needsScores).queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    query = rewrite(query);\n    Weight weight = createWeight(query, needsScores);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,boolean).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    query = rewrite(query);\n    return createWeight(query, needsScores, 1f);\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    query = rewrite(query);\n    Weight weight = createWeight(query, needsScores);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity(needsScores).queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,boolean).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    query = rewrite(query);\n    return createWeight(query, needsScores, 1f);\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    query = rewrite(query);\n    Weight weight = createWeight(query, needsScores);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity(needsScores).queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,ScoreMode).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,boolean).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, ScoreMode scoreMode) throws IOException {\n    query = rewrite(query);\n    return createWeight(query, scoreMode, 1f);\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    query = rewrite(query);\n    return createWeight(query, needsScores, 1f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,ScoreMode).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,boolean).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, ScoreMode scoreMode) throws IOException {\n    query = rewrite(query);\n    return createWeight(query, scoreMode, 1f);\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    query = rewrite(query);\n    return createWeight(query, needsScores, 1f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"fb17639909a369c1e64866842e5c213440acc17e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6a47d642ab24da1a811adce4bda9cc52c520ca13","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["485545da3b4429d6f138b4baac573a97820ee93b"],"485545da3b4429d6f138b4baac573a97820ee93b":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"954e59be3da8dc1b046646ad7af4b466852009d3":["fb17639909a369c1e64866842e5c213440acc17e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["485545da3b4429d6f138b4baac573a97820ee93b","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"fb17639909a369c1e64866842e5c213440acc17e":["954e59be3da8dc1b046646ad7af4b466852009d3"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","485545da3b4429d6f138b4baac573a97820ee93b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb17639909a369c1e64866842e5c213440acc17e"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["9fc47cb7b4346802411bb432f501ed0673d7119e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","417142ff08fda9cf0b72d5133e63097a166c6458"],"485545da3b4429d6f138b4baac573a97820ee93b":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}