{"path":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#MorfologikFilterFactory(Map[String,String]).mjava","commits":[{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#MorfologikFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#init(Map[String,String]).mjava","sourceNew":"  /** Creates a new MorfologikFilterFactory */\n  public MorfologikFilterFactory(Map<String,String> args) {\n    super(args);\n    String dictionaryName = args.remove(DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      try {\n        DICTIONARY dictionary = DICTIONARY.valueOf(dictionaryName.toUpperCase(Locale.ROOT));\n        assert dictionary != null;\n        this.dictionary = dictionary;\n      } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute accepts the \"\n            + \"following constants: \" + Arrays.toString(DICTIONARY.values()) + \", this value is invalid: \"  \n            + dictionaryName);\n      }\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String dictionaryName = args.get(DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      try {\n        DICTIONARY dictionary = DICTIONARY.valueOf(dictionaryName.toUpperCase(Locale.ROOT));\n        assert dictionary != null;\n        this.dictionary = dictionary;\n      } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute accepts the \"\n            + \"following constants: \" + Arrays.toString(DICTIONARY.values()) + \", this value is invalid: \"  \n            + dictionaryName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcae30df9fe9300569835aef42ec65802c7c0afb","date":1364859933,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#MorfologikFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#MorfologikFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new MorfologikFilterFactory */\n  public MorfologikFilterFactory(Map<String,String> args) {\n    super(args);\n    String dictionaryName = get(args, DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      try {\n        DICTIONARY dictionary = DICTIONARY.valueOf(dictionaryName.toUpperCase(Locale.ROOT));\n        assert dictionary != null;\n        this.dictionary = dictionary;\n      } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute accepts the \"\n            + \"following constants: \" + Arrays.toString(DICTIONARY.values()) + \", this value is invalid: \"  \n            + dictionaryName);\n      }\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new MorfologikFilterFactory */\n  public MorfologikFilterFactory(Map<String,String> args) {\n    super(args);\n    String dictionaryName = args.remove(DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      try {\n        DICTIONARY dictionary = DICTIONARY.valueOf(dictionaryName.toUpperCase(Locale.ROOT));\n        assert dictionary != null;\n        this.dictionary = dictionary;\n      } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute accepts the \"\n            + \"following constants: \" + Arrays.toString(DICTIONARY.values()) + \", this value is invalid: \"  \n            + dictionaryName);\n      }\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43cfa455b570ba7bf8eefe91de210d46c68a0a2a","date":1372853690,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#MorfologikFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#MorfologikFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new MorfologikFilterFactory */\n  public MorfologikFilterFactory(Map<String,String> args) {\n    super(args);\n\n    // Be specific about no-longer-supported dictionary attribute.\n    String dictionaryName = get(args, DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute is no \"\n          + \"longer supported (Morfologik has one dictionary): \" + dictionaryName);\n    }\n\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new MorfologikFilterFactory */\n  public MorfologikFilterFactory(Map<String,String> args) {\n    super(args);\n    String dictionaryName = get(args, DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      try {\n        DICTIONARY dictionary = DICTIONARY.valueOf(dictionaryName.toUpperCase(Locale.ROOT));\n        assert dictionary != null;\n        this.dictionary = dictionary;\n      } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute accepts the \"\n            + \"following constants: \" + Arrays.toString(DICTIONARY.values()) + \", this value is invalid: \"  \n            + dictionaryName);\n      }\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#MorfologikFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#MorfologikFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new MorfologikFilterFactory */\n  public MorfologikFilterFactory(Map<String,String> args) {\n    super(args);\n\n    // Be specific about no-longer-supported dictionary attribute.\n    String dictionaryName = get(args, DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute is no \"\n          + \"longer supported (Morfologik has one dictionary): \" + dictionaryName);\n    }\n\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new MorfologikFilterFactory */\n  public MorfologikFilterFactory(Map<String,String> args) {\n    super(args);\n    String dictionaryName = get(args, DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      try {\n        DICTIONARY dictionary = DICTIONARY.valueOf(dictionaryName.toUpperCase(Locale.ROOT));\n        assert dictionary != null;\n        this.dictionary = dictionary;\n      } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute accepts the \"\n            + \"following constants: \" + Arrays.toString(DICTIONARY.values()) + \", this value is invalid: \"  \n            + dictionaryName);\n      }\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fe5f0827b0226d3ceab5afaa8badb8af406f3d1","date":1395668848,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#MorfologikFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#MorfologikFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new MorfologikFilterFactory */\n  public MorfologikFilterFactory(Map<String,String> args) {\n    super(args);\n\n    // Be specific about no-longer-supported dictionary attribute.\n    String dictionaryName = get(args, DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute is no \"\n          + \"longer supported (Morfologik now offers one unified Polish dictionary): \" + dictionaryName\n          + \". Perhaps you wanted to use 'dictionary-resource' attribute instead?\");\n    }\n\n    dictionaryResource = get(args, DICTIONARY_RESOURCE_ATTRIBUTE, DEFAULT_DICTIONARY_RESOURCE);\n    \n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new MorfologikFilterFactory */\n  public MorfologikFilterFactory(Map<String,String> args) {\n    super(args);\n\n    // Be specific about no-longer-supported dictionary attribute.\n    String dictionaryName = get(args, DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute is no \"\n          + \"longer supported (Morfologik has one dictionary): \" + dictionaryName);\n    }\n\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3","date":1417215914,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#MorfologikFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#MorfologikFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new MorfologikFilterFactory */\n  public MorfologikFilterFactory(Map<String,String> args) {\n    super(args);\n\n    dictionaryResource = get(args, DICTIONARY_RESOURCE_ATTRIBUTE, DEFAULT_DICTIONARY_RESOURCE);\n    \n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new MorfologikFilterFactory */\n  public MorfologikFilterFactory(Map<String,String> args) {\n    super(args);\n\n    // Be specific about no-longer-supported dictionary attribute.\n    String dictionaryName = get(args, DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute is no \"\n          + \"longer supported (Morfologik now offers one unified Polish dictionary): \" + dictionaryName\n          + \". Perhaps you wanted to use 'dictionary-resource' attribute instead?\");\n    }\n\n    dictionaryResource = get(args, DICTIONARY_RESOURCE_ATTRIBUTE, DEFAULT_DICTIONARY_RESOURCE);\n    \n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c169d7d02a4ec07ef6cb1d119de39443fa7ff786","date":1441835318,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#MorfologikFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#MorfologikFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new MorfologikFilterFactory */\n  public MorfologikFilterFactory(Map<String,String> args) {\n    super(args);\n\n    // first check FSA and features (at least FSA must be given, features name is guessed):\n    dictionaryFsaFile = get(args, DICTIONARY_FSA_FILE_ATTRIBUTE);\n    dictionaryFeaturesFile = get(args, DICTIONARY_FEATURES_FILE_ATTRIBUTE,\n        (dictionaryFsaFile == null) ? null : Dictionary.getExpectedFeaturesName(dictionaryFsaFile));\n    \n    if (dictionaryFsaFile == null && dictionaryFeaturesFile == null) {\n      // if we have no FSA/features combination, we resolve the classpath resource:\n      dictionaryResource = get(args, DICTIONARY_RESOURCE_ATTRIBUTE, DEFAULT_DICTIONARY_RESOURCE);\n    } else if (dictionaryFsaFile == null || dictionaryFeaturesFile == null) {\n      // if we have incomplete FSA/features tuple in args\n      throw new IllegalArgumentException(String.format(Locale.ENGLISH, \"Missing '%s' or '%s' attribute.\",\n          DICTIONARY_FSA_FILE_ATTRIBUTE, DICTIONARY_FEATURES_FILE_ATTRIBUTE));      \n    } else {\n      dictionaryResource = null;\n      if (get(args, DICTIONARY_RESOURCE_ATTRIBUTE) != null) {\n        // fail if both is given: FSA/features files + classpath resource\n        throw new IllegalArgumentException(String.format(Locale.ENGLISH, \"Cannot give '%s' and '%s'/'%s' at the same time.\",\n            DICTIONARY_RESOURCE_ATTRIBUTE, DICTIONARY_FSA_FILE_ATTRIBUTE, DICTIONARY_FEATURES_FILE_ATTRIBUTE));\n      }\n    }\n    \n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new MorfologikFilterFactory */\n  public MorfologikFilterFactory(Map<String,String> args) {\n    super(args);\n\n    dictionaryResource = get(args, DICTIONARY_RESOURCE_ATTRIBUTE, DEFAULT_DICTIONARY_RESOURCE);\n    \n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"764c03efd7b564bc3dcdfe6a13f26035c8971596","date":1444295847,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#MorfologikFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#MorfologikFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new MorfologikFilterFactory */\n  public MorfologikFilterFactory(Map<String,String> args) {\n    super(args);\n\n    // Be specific about no-longer-supported dictionary attribute.\n    final String DICTIONARY_RESOURCE_ATTRIBUTE = \"dictionary-resource\";\n    String dictionaryResource = get(args, DICTIONARY_RESOURCE_ATTRIBUTE);\n    if (dictionaryResource != null && !dictionaryResource.isEmpty()) {\n      throw new IllegalArgumentException(\"The \" + DICTIONARY_RESOURCE_ATTRIBUTE + \" attribute is no \"\n          + \"longer supported. Use the '\" + DICTIONARY_ATTRIBUTE + \"' attribute instead (see LUCENE-6833).\");\n    }\n\n    resourceName = get(args, DICTIONARY_ATTRIBUTE);\n\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new MorfologikFilterFactory */\n  public MorfologikFilterFactory(Map<String,String> args) {\n    super(args);\n\n    // first check FSA and features (at least FSA must be given, features name is guessed):\n    dictionaryFsaFile = get(args, DICTIONARY_FSA_FILE_ATTRIBUTE);\n    dictionaryFeaturesFile = get(args, DICTIONARY_FEATURES_FILE_ATTRIBUTE,\n        (dictionaryFsaFile == null) ? null : Dictionary.getExpectedFeaturesName(dictionaryFsaFile));\n    \n    if (dictionaryFsaFile == null && dictionaryFeaturesFile == null) {\n      // if we have no FSA/features combination, we resolve the classpath resource:\n      dictionaryResource = get(args, DICTIONARY_RESOURCE_ATTRIBUTE, DEFAULT_DICTIONARY_RESOURCE);\n    } else if (dictionaryFsaFile == null || dictionaryFeaturesFile == null) {\n      // if we have incomplete FSA/features tuple in args\n      throw new IllegalArgumentException(String.format(Locale.ENGLISH, \"Missing '%s' or '%s' attribute.\",\n          DICTIONARY_FSA_FILE_ATTRIBUTE, DICTIONARY_FEATURES_FILE_ATTRIBUTE));      \n    } else {\n      dictionaryResource = null;\n      if (get(args, DICTIONARY_RESOURCE_ATTRIBUTE) != null) {\n        // fail if both is given: FSA/features files + classpath resource\n        throw new IllegalArgumentException(String.format(Locale.ENGLISH, \"Cannot give '%s' and '%s'/'%s' at the same time.\",\n            DICTIONARY_RESOURCE_ATTRIBUTE, DICTIONARY_FSA_FILE_ATTRIBUTE, DICTIONARY_FEATURES_FILE_ATTRIBUTE));\n      }\n    }\n    \n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"764c03efd7b564bc3dcdfe6a13f26035c8971596":["c169d7d02a4ec07ef6cb1d119de39443fa7ff786"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["dcae30df9fe9300569835aef42ec65802c7c0afb","43cfa455b570ba7bf8eefe91de210d46c68a0a2a"],"dcae30df9fe9300569835aef42ec65802c7c0afb":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"43cfa455b570ba7bf8eefe91de210d46c68a0a2a":["dcae30df9fe9300569835aef42ec65802c7c0afb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3":["3fe5f0827b0226d3ceab5afaa8badb8af406f3d1"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3fe5f0827b0226d3ceab5afaa8badb8af406f3d1":["43cfa455b570ba7bf8eefe91de210d46c68a0a2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["764c03efd7b564bc3dcdfe6a13f26035c8971596"],"c169d7d02a4ec07ef6cb1d119de39443fa7ff786":["6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3"]},"commit2Childs":{"764c03efd7b564bc3dcdfe6a13f26035c8971596":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"dcae30df9fe9300569835aef42ec65802c7c0afb":["37a0f60745e53927c4c876cfe5b5a58170f0646c","43cfa455b570ba7bf8eefe91de210d46c68a0a2a"],"43cfa455b570ba7bf8eefe91de210d46c68a0a2a":["37a0f60745e53927c4c876cfe5b5a58170f0646c","3fe5f0827b0226d3ceab5afaa8badb8af406f3d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3":["c169d7d02a4ec07ef6cb1d119de39443fa7ff786"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["dcae30df9fe9300569835aef42ec65802c7c0afb"],"3fe5f0827b0226d3ceab5afaa8badb8af406f3d1":["6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3"],"c169d7d02a4ec07ef6cb1d119de39443fa7ff786":["764c03efd7b564bc3dcdfe6a13f26035c8971596"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}