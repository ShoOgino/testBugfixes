{"path":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexBug().mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexBug().mjava","pathOld":"lucene/contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexBug().mjava","sourceNew":"  public void testSpanRegexBug() throws CorruptIndexException, IOException {\n    createRAMDirectories();\n\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"a.*\"));\n    SpanRegexQuery stq = new SpanRegexQuery(new Term(\"field\", \"b.*\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] { srq, stq }, 6,\n        true);\n\n    // 1. Search the same store which works\n    IndexSearcher[] arrSearcher = new IndexSearcher[2];\n    arrSearcher[0] = new IndexSearcher(indexStoreA, true);\n    arrSearcher[1] = new IndexSearcher(indexStoreB, true);\n    MultiSearcher searcher = new MultiSearcher(arrSearcher);\n    int numHits = searcher.search(query, null, 1000).totalHits;\n    arrSearcher[0].close();\n    arrSearcher[1].close();\n\n    // Will fail here\n    // We expect 2 but only one matched\n    // The rewriter function only write it once on the first IndexSearcher\n    // So it's using term: a1 b1 to search on the second IndexSearcher\n    // As a result, it won't match the document in the second IndexSearcher\n    assertEquals(2, numHits);\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","sourceOld":"  public void testSpanRegexBug() throws CorruptIndexException, IOException {\n    createRAMDirectories();\n\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"a.*\"));\n    SpanRegexQuery stq = new SpanRegexQuery(new Term(\"field\", \"b.*\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] { srq, stq }, 6,\n        true);\n\n    // 1. Search the same store which works\n    IndexSearcher[] arrSearcher = new IndexSearcher[2];\n    arrSearcher[0] = new IndexSearcher(indexStoreA, true);\n    arrSearcher[1] = new IndexSearcher(indexStoreB, true);\n    MultiSearcher searcher = new MultiSearcher(arrSearcher);\n    int numHits = searcher.search(query, null, 1000).totalHits;\n    arrSearcher[0].close();\n    arrSearcher[1].close();\n\n    // Will fail here\n    // We expect 2 but only one matched\n    // The rewriter function only write it once on the first IndexSearcher\n    // So it's using term: a1 b1 to search on the second IndexSearcher\n    // As a result, it won't match the document in the second IndexSearcher\n    assertEquals(2, numHits);\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744486748bc5bee772100e49230e5bca39bac99a","date":1289776426,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexBug().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexBug().mjava","sourceNew":"  public void testSpanRegexBug() throws CorruptIndexException, IOException {\n    createRAMDirectories();\n\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"a.*\")));\n    SpanQuery stq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"b.*\")));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] { srq, stq }, 6,\n        true);\n\n    // 1. Search the same store which works\n    IndexSearcher[] arrSearcher = new IndexSearcher[2];\n    arrSearcher[0] = new IndexSearcher(indexStoreA, true);\n    arrSearcher[1] = new IndexSearcher(indexStoreB, true);\n    MultiSearcher searcher = new MultiSearcher(arrSearcher);\n    int numHits = searcher.search(query, null, 1000).totalHits;\n    arrSearcher[0].close();\n    arrSearcher[1].close();\n\n    // Will fail here\n    // We expect 2 but only one matched\n    // The rewriter function only write it once on the first IndexSearcher\n    // So it's using term: a1 b1 to search on the second IndexSearcher\n    // As a result, it won't match the document in the second IndexSearcher\n    assertEquals(2, numHits);\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","sourceOld":"  public void testSpanRegexBug() throws CorruptIndexException, IOException {\n    createRAMDirectories();\n\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"a.*\"));\n    SpanRegexQuery stq = new SpanRegexQuery(new Term(\"field\", \"b.*\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] { srq, stq }, 6,\n        true);\n\n    // 1. Search the same store which works\n    IndexSearcher[] arrSearcher = new IndexSearcher[2];\n    arrSearcher[0] = new IndexSearcher(indexStoreA, true);\n    arrSearcher[1] = new IndexSearcher(indexStoreB, true);\n    MultiSearcher searcher = new MultiSearcher(arrSearcher);\n    int numHits = searcher.search(query, null, 1000).totalHits;\n    arrSearcher[0].close();\n    arrSearcher[1].close();\n\n    // Will fail here\n    // We expect 2 but only one matched\n    // The rewriter function only write it once on the first IndexSearcher\n    // So it's using term: a1 b1 to search on the second IndexSearcher\n    // As a result, it won't match the document in the second IndexSearcher\n    assertEquals(2, numHits);\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexBug().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexBug().mjava","sourceNew":"  public void testSpanRegexBug() throws CorruptIndexException, IOException {\n    createRAMDirectories();\n\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"a.*\")));\n    SpanQuery stq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"b.*\")));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] { srq, stq }, 6,\n        true);\n\n    // 1. Search the same store which works\n    IndexSearcher[] arrSearcher = new IndexSearcher[2];\n    arrSearcher[0] = new IndexSearcher(indexStoreA, true);\n    arrSearcher[1] = new IndexSearcher(indexStoreB, true);\n    MultiSearcher searcher = new MultiSearcher(arrSearcher);\n    int numHits = searcher.search(query, null, 1000).totalHits;\n    arrSearcher[0].close();\n    arrSearcher[1].close();\n\n    // Will fail here\n    // We expect 2 but only one matched\n    // The rewriter function only write it once on the first IndexSearcher\n    // So it's using term: a1 b1 to search on the second IndexSearcher\n    // As a result, it won't match the document in the second IndexSearcher\n    assertEquals(2, numHits);\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","sourceOld":"  public void testSpanRegexBug() throws CorruptIndexException, IOException {\n    createRAMDirectories();\n\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"a.*\"));\n    SpanRegexQuery stq = new SpanRegexQuery(new Term(\"field\", \"b.*\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] { srq, stq }, 6,\n        true);\n\n    // 1. Search the same store which works\n    IndexSearcher[] arrSearcher = new IndexSearcher[2];\n    arrSearcher[0] = new IndexSearcher(indexStoreA, true);\n    arrSearcher[1] = new IndexSearcher(indexStoreB, true);\n    MultiSearcher searcher = new MultiSearcher(arrSearcher);\n    int numHits = searcher.search(query, null, 1000).totalHits;\n    arrSearcher[0].close();\n    arrSearcher[1].close();\n\n    // Will fail here\n    // We expect 2 but only one matched\n    // The rewriter function only write it once on the first IndexSearcher\n    // So it's using term: a1 b1 to search on the second IndexSearcher\n    // As a result, it won't match the document in the second IndexSearcher\n    assertEquals(2, numHits);\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexBug().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexBug().mjava","sourceNew":"  public void testSpanRegexBug() throws CorruptIndexException, IOException {\n    createRAMDirectories();\n\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"a.*\")));\n    SpanQuery stq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"b.*\")));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] { srq, stq }, 6,\n        true);\n\n    // 1. Search the same store which works\n    IndexSearcher[] arrSearcher = new IndexSearcher[2];\n    arrSearcher[0] = new IndexSearcher(indexStoreA, true);\n    arrSearcher[1] = new IndexSearcher(indexStoreB, true);\n    MultiSearcher searcher = new MultiSearcher(arrSearcher);\n    int numHits = searcher.search(query, null, 1000).totalHits;\n    arrSearcher[0].close();\n    arrSearcher[1].close();\n\n    // Will fail here\n    // We expect 2 but only one matched\n    // The rewriter function only write it once on the first IndexSearcher\n    // So it's using term: a1 b1 to search on the second IndexSearcher\n    // As a result, it won't match the document in the second IndexSearcher\n    assertEquals(2, numHits);\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","sourceOld":"  public void testSpanRegexBug() throws CorruptIndexException, IOException {\n    createRAMDirectories();\n\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"a.*\"));\n    SpanRegexQuery stq = new SpanRegexQuery(new Term(\"field\", \"b.*\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] { srq, stq }, 6,\n        true);\n\n    // 1. Search the same store which works\n    IndexSearcher[] arrSearcher = new IndexSearcher[2];\n    arrSearcher[0] = new IndexSearcher(indexStoreA, true);\n    arrSearcher[1] = new IndexSearcher(indexStoreB, true);\n    MultiSearcher searcher = new MultiSearcher(arrSearcher);\n    int numHits = searcher.search(query, null, 1000).totalHits;\n    arrSearcher[0].close();\n    arrSearcher[1].close();\n\n    // Will fail here\n    // We expect 2 but only one matched\n    // The rewriter function only write it once on the first IndexSearcher\n    // So it's using term: a1 b1 to search on the second IndexSearcher\n    // As a result, it won't match the document in the second IndexSearcher\n    assertEquals(2, numHits);\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexBug().mjava","sourceNew":null,"sourceOld":"  public void testSpanRegexBug() throws CorruptIndexException, IOException {\n    createRAMDirectories();\n\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"a.*\")));\n    SpanQuery stq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"b.*\")));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] { srq, stq }, 6,\n        true);\n\n    // 1. Search the same store which works\n    IndexSearcher[] arrSearcher = new IndexSearcher[2];\n    arrSearcher[0] = new IndexSearcher(indexStoreA, true);\n    arrSearcher[1] = new IndexSearcher(indexStoreB, true);\n    MultiSearcher searcher = new MultiSearcher(arrSearcher);\n    int numHits = searcher.search(query, null, 1000).totalHits;\n    arrSearcher[0].close();\n    arrSearcher[1].close();\n\n    // Will fail here\n    // We expect 2 but only one matched\n    // The rewriter function only write it once on the first IndexSearcher\n    // So it's using term: a1 b1 to search on the second IndexSearcher\n    // As a result, it won't match the document in the second IndexSearcher\n    assertEquals(2, numHits);\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexBug().mjava","sourceNew":null,"sourceOld":"  public void testSpanRegexBug() throws CorruptIndexException, IOException {\n    createRAMDirectories();\n\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"a.*\")));\n    SpanQuery stq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"b.*\")));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] { srq, stq }, 6,\n        true);\n\n    // 1. Search the same store which works\n    IndexSearcher[] arrSearcher = new IndexSearcher[2];\n    arrSearcher[0] = new IndexSearcher(indexStoreA, true);\n    arrSearcher[1] = new IndexSearcher(indexStoreB, true);\n    MultiSearcher searcher = new MultiSearcher(arrSearcher);\n    int numHits = searcher.search(query, null, 1000).totalHits;\n    arrSearcher[0].close();\n    arrSearcher[1].close();\n\n    // Will fail here\n    // We expect 2 but only one matched\n    // The rewriter function only write it once on the first IndexSearcher\n    // So it's using term: a1 b1 to search on the second IndexSearcher\n    // As a result, it won't match the document in the second IndexSearcher\n    assertEquals(2, numHits);\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexBug().mjava","sourceNew":null,"sourceOld":"  public void testSpanRegexBug() throws CorruptIndexException, IOException {\n    createRAMDirectories();\n\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"a.*\")));\n    SpanQuery stq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"b.*\")));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] { srq, stq }, 6,\n        true);\n\n    // 1. Search the same store which works\n    IndexSearcher[] arrSearcher = new IndexSearcher[2];\n    arrSearcher[0] = new IndexSearcher(indexStoreA, true);\n    arrSearcher[1] = new IndexSearcher(indexStoreB, true);\n    MultiSearcher searcher = new MultiSearcher(arrSearcher);\n    int numHits = searcher.search(query, null, 1000).totalHits;\n    arrSearcher[0].close();\n    arrSearcher[1].close();\n\n    // Will fail here\n    // We expect 2 but only one matched\n    // The rewriter function only write it once on the first IndexSearcher\n    // So it's using term: a1 b1 to search on the second IndexSearcher\n    // As a result, it won't match the document in the second IndexSearcher\n    assertEquals(2, numHits);\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["744486748bc5bee772100e49230e5bca39bac99a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","744486748bc5bee772100e49230e5bca39bac99a"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","744486748bc5bee772100e49230e5bca39bac99a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"744486748bc5bee772100e49230e5bca39bac99a":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["70ad682703b8585f5d0a637efec044d57ec05efb"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","744486748bc5bee772100e49230e5bca39bac99a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"744486748bc5bee772100e49230e5bca39bac99a":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}