{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter#NumericPayloadTokenFilter(TokenStream,float,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter#NumericPayloadTokenFilter(TokenStream,float,String).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter#NumericPayloadTokenFilter(TokenStream,float,String).mjava","sourceNew":"  public NumericPayloadTokenFilter(TokenStream input, float payload, String typeMatch) {\n    super(input);\n    //Need to encode the payload\n    thePayload = new Payload(PayloadHelper.encodeFloat(payload));\n    this.typeMatch = typeMatch;\n  }\n\n","sourceOld":"  public NumericPayloadTokenFilter(TokenStream input, float payload, String typeMatch) {\n    super(input);\n    //Need to encode the payload\n    thePayload = new Payload(PayloadHelper.encodeFloat(payload));\n    this.typeMatch = typeMatch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter#NumericPayloadTokenFilter(TokenStream,float,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter#NumericPayloadTokenFilter(TokenStream,float,String).mjava","sourceNew":"  public NumericPayloadTokenFilter(TokenStream input, float payload, String typeMatch) {\n    super(input);\n    //Need to encode the payload\n    thePayload = new BytesRef(PayloadHelper.encodeFloat(payload));\n    this.typeMatch = typeMatch;\n  }\n\n","sourceOld":"  public NumericPayloadTokenFilter(TokenStream input, float payload, String typeMatch) {\n    super(input);\n    //Need to encode the payload\n    thePayload = new Payload(PayloadHelper.encodeFloat(payload));\n    this.typeMatch = typeMatch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d3e0b5069dbacda34baa90adceb47cb5c9f3e65","date":1343184871,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter#NumericPayloadTokenFilter(TokenStream,float,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter#NumericPayloadTokenFilter(TokenStream,float,String).mjava","sourceNew":"  public NumericPayloadTokenFilter(TokenStream input, float payload, String typeMatch) {\n    super(input);\n    if (typeMatch == null) {\n      throw new IllegalArgumentException(\"typeMatch cannot be null\");\n    }\n    //Need to encode the payload\n    thePayload = new BytesRef(PayloadHelper.encodeFloat(payload));\n    this.typeMatch = typeMatch;\n  }\n\n","sourceOld":"  public NumericPayloadTokenFilter(TokenStream input, float payload, String typeMatch) {\n    super(input);\n    //Need to encode the payload\n    thePayload = new BytesRef(PayloadHelper.encodeFloat(payload));\n    this.typeMatch = typeMatch;\n  }\n\n","bugFix":null,"bugIntro":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter#NumericPayloadTokenFilter(TokenStream,float,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter#NumericPayloadTokenFilter(TokenStream,float,String).mjava","sourceNew":"  public NumericPayloadTokenFilter(TokenStream input, float payload, String typeMatch) {\n    super(input);\n    if (typeMatch == null) {\n      throw new IllegalArgumentException(\"typeMatch cannot be null\");\n    }\n    //Need to encode the payload\n    thePayload = new BytesRef(PayloadHelper.encodeFloat(payload));\n    this.typeMatch = typeMatch;\n  }\n\n","sourceOld":"  public NumericPayloadTokenFilter(TokenStream input, float payload, String typeMatch) {\n    super(input);\n    //Need to encode the payload\n    thePayload = new BytesRef(PayloadHelper.encodeFloat(payload));\n    this.typeMatch = typeMatch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter#NumericPayloadTokenFilter(TokenStream,float,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter#NumericPayloadTokenFilter(TokenStream,float,String).mjava","sourceNew":"  public NumericPayloadTokenFilter(TokenStream input, float payload, String typeMatch) {\n    super(input);\n    if (typeMatch == null) {\n      throw new IllegalArgumentException(\"typeMatch cannot be null\");\n    }\n    //Need to encode the payload\n    thePayload = new BytesRef(PayloadHelper.encodeFloat(payload));\n    this.typeMatch = typeMatch;\n  }\n\n","sourceOld":"  public NumericPayloadTokenFilter(TokenStream input, float payload, String typeMatch) {\n    super(input);\n    //Need to encode the payload\n    thePayload = new BytesRef(PayloadHelper.encodeFloat(payload));\n    this.typeMatch = typeMatch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter#NumericPayloadTokenFilter(TokenStream,float,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter#NumericPayloadTokenFilter(TokenStream,float,String).mjava","sourceNew":"  public NumericPayloadTokenFilter(TokenStream input, float payload, String typeMatch) {\n    super(input);\n    if (typeMatch == null) {\n      throw new IllegalArgumentException(\"typeMatch cannot be null\");\n    }\n    //Need to encode the payload\n    thePayload = new BytesRef(PayloadHelper.encodeFloat(payload));\n    this.typeMatch = typeMatch;\n  }\n\n","sourceOld":"  public NumericPayloadTokenFilter(TokenStream input, float payload, String typeMatch) {\n    super(input);\n    //Need to encode the payload\n    thePayload = new BytesRef(PayloadHelper.encodeFloat(payload));\n    this.typeMatch = typeMatch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad0d09e969f4763b0df4230f8e3f74357872a4e4","date":1459188769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter#NumericPayloadTokenFilter(TokenStream,float,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter#NumericPayloadTokenFilter(TokenStream,float,String).mjava","sourceNew":"  public NumericPayloadTokenFilter(TokenStream input, float payload, String typeMatch) {\n    super(input);\n    if (typeMatch == null) {\n      throw new IllegalArgumentException(\"typeMatch must not be null\");\n    }\n    //Need to encode the payload\n    thePayload = new BytesRef(PayloadHelper.encodeFloat(payload));\n    this.typeMatch = typeMatch;\n  }\n\n","sourceOld":"  public NumericPayloadTokenFilter(TokenStream input, float payload, String typeMatch) {\n    super(input);\n    if (typeMatch == null) {\n      throw new IllegalArgumentException(\"typeMatch cannot be null\");\n    }\n    //Need to encode the payload\n    thePayload = new BytesRef(PayloadHelper.encodeFloat(payload));\n    this.typeMatch = typeMatch;\n  }\n\n","bugFix":["3d3e0b5069dbacda34baa90adceb47cb5c9f3e65"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["76fa9933adb0556e752e8af9734c4d0ae14622ff","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["76fa9933adb0556e752e8af9734c4d0ae14622ff","5a1a22b1ad88b436661458df567f3fdb446392a4"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"3d3e0b5069dbacda34baa90adceb47cb5c9f3e65":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["76fa9933adb0556e752e8af9734c4d0ae14622ff","3d3e0b5069dbacda34baa90adceb47cb5c9f3e65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3d3e0b5069dbacda34baa90adceb47cb5c9f3e65":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","3d3e0b5069dbacda34baa90adceb47cb5c9f3e65","5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}