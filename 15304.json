{"path":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#setupHarnesses().mjava","commits":[{"id":"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd","date":1426252395,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#setupHarnesses().mjava","pathOld":"/dev/null","sourceNew":"  private void setupHarnesses() {\n    for (final SolrClient client : clients) {\n      RestTestHarness harness = new RestTestHarness(new RESTfulServerProvider() {\n        @Override\n        public String getBaseURL() {\n          return ((HttpSolrClient) client).getBaseURL();\n        }\n      });\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#setupHarnesses().mjava","pathOld":"/dev/null","sourceNew":"  private void setupHarnesses() {\n    for (final SolrClient client : clients) {\n      RestTestHarness harness = new RestTestHarness(new RESTfulServerProvider() {\n        @Override\n        public String getBaseURL() {\n          return ((HttpSolrClient) client).getBaseURL();\n        }\n      });\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b04972a589b63fe694313d3868815a20546c4907","date":1460726888,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#setupHarnesses().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#setupHarnesses().mjava","sourceNew":"  private void setupHarnesses() {\n    for (final SolrClient client : clients) {\n      RestTestHarness harness = new RestTestHarness(() -> ((HttpSolrClient) client).getBaseURL());\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","sourceOld":"  private void setupHarnesses() {\n    for (final SolrClient client : clients) {\n      RestTestHarness harness = new RestTestHarness(new RESTfulServerProvider() {\n        @Override\n        public String getBaseURL() {\n          return ((HttpSolrClient) client).getBaseURL();\n        }\n      });\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73457c9372b4f2f962ca916788a5fe9e1f644a9f","date":1460794059,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#setupHarnesses().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#setupHarnesses().mjava","sourceNew":"  private void setupHarnesses() {\n    for (final SolrClient client : clients) {\n      RestTestHarness harness = new RestTestHarness(() -> ((HttpSolrClient) client).getBaseURL());\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","sourceOld":"  private void setupHarnesses() {\n    for (final SolrClient client : clients) {\n      RestTestHarness harness = new RestTestHarness(new RESTfulServerProvider() {\n        @Override\n        public String getBaseURL() {\n          return ((HttpSolrClient) client).getBaseURL();\n        }\n      });\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0853c291617e0f9d0474b720bf609eb350e9225c","date":1514464265,"type":4,"author":"Christine Poerschke","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#setupHarnesses().mjava","sourceNew":null,"sourceOld":"  private void setupHarnesses() {\n    for (final SolrClient client : clients) {\n      RestTestHarness harness = new RestTestHarness(() -> ((HttpSolrClient) client).getBaseURL());\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd"],"b04972a589b63fe694313d3868815a20546c4907":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd"],"0853c291617e0f9d0474b720bf609eb350e9225c":["73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73457c9372b4f2f962ca916788a5fe9e1f644a9f":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd","b04972a589b63fe694313d3868815a20546c4907"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0853c291617e0f9d0474b720bf609eb350e9225c"]},"commit2Childs":{"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b04972a589b63fe694313d3868815a20546c4907","73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b04972a589b63fe694313d3868815a20546c4907":["73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"0853c291617e0f9d0474b720bf609eb350e9225c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"73457c9372b4f2f962ca916788a5fe9e1f644a9f":["0853c291617e0f9d0474b720bf609eb350e9225c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}