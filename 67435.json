{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(1);\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(1);\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":null,"sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(1);\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}