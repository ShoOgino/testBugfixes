{"path":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoDecoder#advanceToIndex(long).mjava","commits":[{"id":"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c","date":1373406544,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoDecoder#advanceToIndex(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Advance the decoding index to a given index.\n   * and return <code>true</code> iff it is available.\n   */\n  public boolean advanceToIndex(long index) {\n    assert index > efIndex;\n    if (index >= numEncoded) {\n      efIndex = numEncoded;\n      return false;\n    }\n    if (! toAfterCurrentHighBit()) {\n      assert false;\n    }\n    int curSetBits = Long.bitCount(curHighLong);\n    while ((efIndex + curSetBits) < index) { // curHighLong has not enough set bits to reach index\n      efIndex += curSetBits;\n      toNextHighLong();\n      curSetBits = Long.bitCount(curHighLong);\n    }\n    // curHighLong has enough set bits to reach index\n    while (efIndex < index) {\n      /* CHECKME: Instead of the linear search here, use (forward) broadword selection from\n       * \"Broadword Implementation of Rank/Select Queries\", Sebastiano Vigna, January 30, 2012.\n       */\n      if (! toAfterCurrentHighBit()) {\n        assert false;\n      }\n      toNextHighValue();\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoDecoder#advanceToIndex(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Advance the decoding index to a given index.\n   * and return <code>true</code> iff it is available.\n   */\n  public boolean advanceToIndex(long index) {\n    assert index > efIndex;\n    if (index >= numEncoded) {\n      efIndex = numEncoded;\n      return false;\n    }\n    if (! toAfterCurrentHighBit()) {\n      assert false;\n    }\n    int curSetBits = Long.bitCount(curHighLong);\n    while ((efIndex + curSetBits) < index) { // curHighLong has not enough set bits to reach index\n      efIndex += curSetBits;\n      toNextHighLong();\n      curSetBits = Long.bitCount(curHighLong);\n    }\n    // curHighLong has enough set bits to reach index\n    while (efIndex < index) {\n      /* CHECKME: Instead of the linear search here, use (forward) broadword selection from\n       * \"Broadword Implementation of Rank/Select Queries\", Sebastiano Vigna, January 30, 2012.\n       */\n      if (! toAfterCurrentHighBit()) {\n        assert false;\n      }\n      toNextHighValue();\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"423470dff9e19aa0db92590e282e2ca12e34d65a","date":1381851051,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoDecoder#advanceToIndex(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoDecoder#advanceToIndex(long).mjava","sourceNew":"  /** Advance the decoding index to a given index.\n   * and return <code>true</code> iff it is available.\n   * <br>See also {@link #currentValue}.\n   * <br>The current implementation does not use the index on the upper bit zero bit positions.\n   * <br>Note: there is currently no implementation of <code>backToIndex</code>.\n   */\n  public boolean advanceToIndex(long index) {\n    assert index > efIndex;\n    if (index >= numEncoded) {\n      efIndex = numEncoded;\n      return false;\n    }\n    if (! toAfterCurrentHighBit()) {\n      assert false;\n    }\n    /* CHECKME: Add a (binary) search in the upperZeroBitPositions here. */\n    int curSetBits = Long.bitCount(curHighLong);\n    while ((efIndex + curSetBits) < index) { // curHighLong has not enough set bits to reach index\n      efIndex += curSetBits;\n      toNextHighLong();\n      curSetBits = Long.bitCount(curHighLong);\n    }\n    // curHighLong has enough set bits to reach index\n    while (efIndex < index) {\n      /* CHECKME: Instead of the linear search here, use (forward) broadword selection from\n       * \"Broadword Implementation of Rank/Select Queries\", Sebastiano Vigna, January 30, 2012.\n       */\n      if (! toAfterCurrentHighBit()) {\n        assert false;\n      }\n      toNextHighValue();\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Advance the decoding index to a given index.\n   * and return <code>true</code> iff it is available.\n   */\n  public boolean advanceToIndex(long index) {\n    assert index > efIndex;\n    if (index >= numEncoded) {\n      efIndex = numEncoded;\n      return false;\n    }\n    if (! toAfterCurrentHighBit()) {\n      assert false;\n    }\n    int curSetBits = Long.bitCount(curHighLong);\n    while ((efIndex + curSetBits) < index) { // curHighLong has not enough set bits to reach index\n      efIndex += curSetBits;\n      toNextHighLong();\n      curSetBits = Long.bitCount(curHighLong);\n    }\n    // curHighLong has enough set bits to reach index\n    while (efIndex < index) {\n      /* CHECKME: Instead of the linear search here, use (forward) broadword selection from\n       * \"Broadword Implementation of Rank/Select Queries\", Sebastiano Vigna, January 30, 2012.\n       */\n      if (! toAfterCurrentHighBit()) {\n        assert false;\n      }\n      toNextHighValue();\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"556259cdb46d4f7fb27f4688c4efcb3eaee4a550","date":1432028057,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoDecoder#advanceToIndex(long).mjava","sourceNew":null,"sourceOld":"  /** Advance the decoding index to a given index.\n   * and return <code>true</code> iff it is available.\n   * <br>See also {@link #currentValue}.\n   * <br>The current implementation does not use the index on the upper bit zero bit positions.\n   * <br>Note: there is currently no implementation of <code>backToIndex</code>.\n   */\n  public boolean advanceToIndex(long index) {\n    assert index > efIndex;\n    if (index >= numEncoded) {\n      efIndex = numEncoded;\n      return false;\n    }\n    if (! toAfterCurrentHighBit()) {\n      assert false;\n    }\n    /* CHECKME: Add a (binary) search in the upperZeroBitPositions here. */\n    int curSetBits = Long.bitCount(curHighLong);\n    while ((efIndex + curSetBits) < index) { // curHighLong has not enough set bits to reach index\n      efIndex += curSetBits;\n      toNextHighLong();\n      curSetBits = Long.bitCount(curHighLong);\n    }\n    // curHighLong has enough set bits to reach index\n    while (efIndex < index) {\n      /* CHECKME: Instead of the linear search here, use (forward) broadword selection from\n       * \"Broadword Implementation of Rank/Select Queries\", Sebastiano Vigna, January 30, 2012.\n       */\n      if (! toAfterCurrentHighBit()) {\n        assert false;\n      }\n      toNextHighValue();\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"556259cdb46d4f7fb27f4688c4efcb3eaee4a550":["423470dff9e19aa0db92590e282e2ca12e34d65a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"423470dff9e19aa0db92590e282e2ca12e34d65a":["21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["556259cdb46d4f7fb27f4688c4efcb3eaee4a550"]},"commit2Childs":{"556259cdb46d4f7fb27f4688c4efcb3eaee4a550":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c":["37a0f60745e53927c4c876cfe5b5a58170f0646c","423470dff9e19aa0db92590e282e2ca12e34d65a"],"423470dff9e19aa0db92590e282e2ca12e34d65a":["556259cdb46d4f7fb27f4688c4efcb3eaee4a550"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}