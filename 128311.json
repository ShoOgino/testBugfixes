{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#createPoint(PlanetModel,double,double,double,double,double,double).mjava","commits":[{"id":"01f1a345a808c3a24ce12b4540ab4847c0dac9b0","date":1459948931,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#createPoint(PlanetModel,double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  protected static GeoPoint createPoint(final PlanetModel pm,\n    final double angle,\n    final double arcDistance,\n    final double sinLatitude,\n    final double cosLatitude,\n    final double sinLongitude,\n    final double cosLongitude) {\n    // From the angle and arc distance, convert to (x,y,z) in unit space.\n    // We want the perspective to be looking down the x axis.  The \"angle\" measurement is thus in the Y-Z plane.\n    // The arcdistance is in X.\n    final double x = Math.cos(arcDistance);\n    final double yzScale = Math.sin(arcDistance);\n    final double y = Math.cos(angle) * yzScale;\n    final double z = Math.sin(angle) * yzScale;\n    // Now, rotate coordinates so that we shift everything from pole = x-axis to actual coordinates.\n    // This transformation should take the point (1,0,0) and transform it to the pole's actual (x,y,z) coordinates.\n    // Coordinate rotation formula:\n    // x1 = x0 cos T - y0 sin T\n    // y1 = x0 sin T + y0 cos T\n    // We're in essence undoing the following transformation (from GeoPolygonFactory):\n    // x1 = x0 cos az - y0 sin az\n    // y1 = x0 sin az + y0 cos az\n    // z1 = z0\n    // x2 = x1 cos al - z1 sin al\n    // y2 = y1\n    // z2 = x1 sin al + z1 cos al\n    // So, we reverse the order of the transformations, AND we transform backwards.\n    // Transforming backwards means using these identities: sin(-angle) = -sin(angle), cos(-angle) = cos(angle)\n    // So:\n    // x1 = x0 cos al + z0 sin al\n    // y1 = y0\n    // z1 = - x0 sin al + z0 cos al\n    // x2 = x1 cos az + y1 sin az\n    // y2 = - x1 sin az + y1 cos az\n    // z2 = z1\n    final double x1 = x * cosLatitude + z * sinLatitude;\n    final double y1 = y;\n    final double z1 = - x * sinLatitude + z * cosLatitude;\n    final double x2 = x1 * cosLongitude + y1 * sinLongitude;\n    final double y2 = - x1 * sinLongitude + y1 * cosLongitude;\n    final double z2 = z1;\n\n    // Scale final (x,y,z) to land on planet surface\n    // Equation of ellipsoid:  x^2 / a^2 + y^2 / b^2 + z^2 / c^2 - 1 = 0\n    // Use a parameterization, e.g. x = t * x2, y = t * y2, z = t * z2, and find t.\n    // t^2 ( x2^2 / a^2 + y2^2 / b^2 + z2^2 / c^2 ) = 1\n    // t = +/- sqrt( 1 / ( x2^2 / a^2 + y2^2 / b^2 + z2^2 / c^2 ) )\n    // We want the + variant because we're scaling in the same direction as the original vector.\n    final double t = Math.sqrt( 1.0 / (x2 * x2 * pm.inverseAbSquared + y2 * y2 * pm.inverseAbSquared + z2 * z2 * pm.inverseCSquared));\n    return new GeoPoint(x2 * t, y2 * t, z2 * t);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d7b7a8973b4a2628b97962e152e513b0d3af02c8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7b7a8973b4a2628b97962e152e513b0d3af02c8","date":1460145192,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#createPoint(PlanetModel,double,double,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#createPoint(PlanetModel,double,double,double,double,double,double).mjava","sourceNew":"  protected static GeoPoint createPoint(final PlanetModel pm,\n    final double angle,\n    final double arcDistance,\n    final double sinLatitude,\n    final double cosLatitude,\n    final double sinLongitude,\n    final double cosLongitude) {\n    // From the angle and arc distance, convert to (x,y,z) in unit space.\n    // We want the perspective to be looking down the x axis.  The \"angle\" measurement is thus in the Y-Z plane.\n    // The arcdistance is in X.\n    final double x = Math.cos(arcDistance);\n    final double yzScale = Math.sin(arcDistance);\n    final double y = Math.cos(angle) * yzScale;\n    final double z = Math.sin(angle) * yzScale;\n    // Now, rotate coordinates so that we shift everything from pole = x-axis to actual coordinates.\n    // This transformation should take the point (1,0,0) and transform it to the pole's actual (x,y,z) coordinates.\n    // Coordinate rotation formula:\n    // x1 = x0 cos T - y0 sin T\n    // y1 = x0 sin T + y0 cos T\n    // We're in essence undoing the following transformation (from GeoPolygonFactory):\n    // x1 = x0 cos az + y0 sin az\n    // y1 = - x0 sin az + y0 cos az\n    // z1 = z0\n    // x2 = x1 cos al + z1 sin al\n    // y2 = y1\n    // z2 = - x1 sin al + z1 cos al\n    // So, we reverse the order of the transformations, AND we transform backwards.\n    // Transforming backwards means using these identities: sin(-angle) = -sin(angle), cos(-angle) = cos(angle)\n    // So:\n    // x1 = x0 cos al - z0 sin al\n    // y1 = y0\n    // z1 = x0 sin al + z0 cos al\n    // x2 = x1 cos az - y1 sin az\n    // y2 = x1 sin az + y1 cos az\n    // z2 = z1\n    final double x1 = x * cosLatitude - z * sinLatitude;\n    final double y1 = y;\n    final double z1 = x * sinLatitude + z * cosLatitude;\n    final double x2 = x1 * cosLongitude - y1 * sinLongitude;\n    final double y2 = x1 * sinLongitude + y1 * cosLongitude;\n    final double z2 = z1;\n\n    // Scale final (x,y,z) to land on planet surface\n    // Equation of ellipsoid:  x^2 / a^2 + y^2 / b^2 + z^2 / c^2 - 1 = 0\n    // Use a parameterization, e.g. x = t * x2, y = t * y2, z = t * z2, and find t.\n    // t^2 ( x2^2 / a^2 + y2^2 / b^2 + z2^2 / c^2 ) = 1\n    // t = +/- sqrt( 1 / ( x2^2 / a^2 + y2^2 / b^2 + z2^2 / c^2 ) )\n    // We want the + variant because we're scaling in the same direction as the original vector.\n    final double t = Math.sqrt( 1.0 / (x2 * x2 * pm.inverseAbSquared + y2 * y2 * pm.inverseAbSquared + z2 * z2 * pm.inverseCSquared));\n    return new GeoPoint(x2 * t, y2 * t, z2 * t);\n  }\n\n","sourceOld":"  protected static GeoPoint createPoint(final PlanetModel pm,\n    final double angle,\n    final double arcDistance,\n    final double sinLatitude,\n    final double cosLatitude,\n    final double sinLongitude,\n    final double cosLongitude) {\n    // From the angle and arc distance, convert to (x,y,z) in unit space.\n    // We want the perspective to be looking down the x axis.  The \"angle\" measurement is thus in the Y-Z plane.\n    // The arcdistance is in X.\n    final double x = Math.cos(arcDistance);\n    final double yzScale = Math.sin(arcDistance);\n    final double y = Math.cos(angle) * yzScale;\n    final double z = Math.sin(angle) * yzScale;\n    // Now, rotate coordinates so that we shift everything from pole = x-axis to actual coordinates.\n    // This transformation should take the point (1,0,0) and transform it to the pole's actual (x,y,z) coordinates.\n    // Coordinate rotation formula:\n    // x1 = x0 cos T - y0 sin T\n    // y1 = x0 sin T + y0 cos T\n    // We're in essence undoing the following transformation (from GeoPolygonFactory):\n    // x1 = x0 cos az - y0 sin az\n    // y1 = x0 sin az + y0 cos az\n    // z1 = z0\n    // x2 = x1 cos al - z1 sin al\n    // y2 = y1\n    // z2 = x1 sin al + z1 cos al\n    // So, we reverse the order of the transformations, AND we transform backwards.\n    // Transforming backwards means using these identities: sin(-angle) = -sin(angle), cos(-angle) = cos(angle)\n    // So:\n    // x1 = x0 cos al + z0 sin al\n    // y1 = y0\n    // z1 = - x0 sin al + z0 cos al\n    // x2 = x1 cos az + y1 sin az\n    // y2 = - x1 sin az + y1 cos az\n    // z2 = z1\n    final double x1 = x * cosLatitude + z * sinLatitude;\n    final double y1 = y;\n    final double z1 = - x * sinLatitude + z * cosLatitude;\n    final double x2 = x1 * cosLongitude + y1 * sinLongitude;\n    final double y2 = - x1 * sinLongitude + y1 * cosLongitude;\n    final double z2 = z1;\n\n    // Scale final (x,y,z) to land on planet surface\n    // Equation of ellipsoid:  x^2 / a^2 + y^2 / b^2 + z^2 / c^2 - 1 = 0\n    // Use a parameterization, e.g. x = t * x2, y = t * y2, z = t * z2, and find t.\n    // t^2 ( x2^2 / a^2 + y2^2 / b^2 + z2^2 / c^2 ) = 1\n    // t = +/- sqrt( 1 / ( x2^2 / a^2 + y2^2 / b^2 + z2^2 / c^2 ) )\n    // We want the + variant because we're scaling in the same direction as the original vector.\n    final double t = Math.sqrt( 1.0 / (x2 * x2 * pm.inverseAbSquared + y2 * y2 * pm.inverseAbSquared + z2 * z2 * pm.inverseCSquared));\n    return new GeoPoint(x2 * t, y2 * t, z2 * t);\n  }\n\n","bugFix":["01f1a345a808c3a24ce12b4540ab4847c0dac9b0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ae680950e0cfd56d7b4ea40918fee662023726","date":1460293099,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#createPoint(PlanetModel,double,double,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#createPoint(PlanetModel,double,double,double,double,double,double).mjava","sourceNew":"  protected static GeoPoint createPoint(final PlanetModel pm,\n    final double angle,\n    final double arcDistance,\n    final double sinLatitude,\n    final double cosLatitude,\n    final double sinLongitude,\n    final double cosLongitude) {\n    // From the angle and arc distance, convert to (x,y,z) in unit space.\n    // We want the perspective to be looking down the x axis.  The \"angle\" measurement is thus in the Y-Z plane.\n    // The arcdistance is in X.\n    final double x = Math.cos(arcDistance);\n    final double yzScale = Math.sin(arcDistance);\n    final double y = Math.cos(angle) * yzScale;\n    final double z = Math.sin(angle) * yzScale;\n    // Now, rotate coordinates so that we shift everything from pole = x-axis to actual coordinates.\n    // This transformation should take the point (1,0,0) and transform it to the pole's actual (x,y,z) coordinates.\n    // Coordinate rotation formula:\n    // x1 = x0 cos T - y0 sin T\n    // y1 = x0 sin T + y0 cos T\n    // We're in essence undoing the following transformation (from GeoPolygonFactory):\n    // x1 = x0 cos az + y0 sin az\n    // y1 = - x0 sin az + y0 cos az\n    // z1 = z0\n    // x2 = x1 cos al + z1 sin al\n    // y2 = y1\n    // z2 = - x1 sin al + z1 cos al\n    // So, we reverse the order of the transformations, AND we transform backwards.\n    // Transforming backwards means using these identities: sin(-angle) = -sin(angle), cos(-angle) = cos(angle)\n    // So:\n    // x1 = x0 cos al - z0 sin al\n    // y1 = y0\n    // z1 = x0 sin al + z0 cos al\n    // x2 = x1 cos az - y1 sin az\n    // y2 = x1 sin az + y1 cos az\n    // z2 = z1\n    final double x1 = x * cosLatitude - z * sinLatitude;\n    final double y1 = y;\n    final double z1 = x * sinLatitude + z * cosLatitude;\n    final double x2 = x1 * cosLongitude - y1 * sinLongitude;\n    final double y2 = x1 * sinLongitude + y1 * cosLongitude;\n    final double z2 = z1;\n    // Scale to put the point on the surface\n    return pm.createSurfacePoint(x2, y2, z2);\n  }\n\n","sourceOld":"  protected static GeoPoint createPoint(final PlanetModel pm,\n    final double angle,\n    final double arcDistance,\n    final double sinLatitude,\n    final double cosLatitude,\n    final double sinLongitude,\n    final double cosLongitude) {\n    // From the angle and arc distance, convert to (x,y,z) in unit space.\n    // We want the perspective to be looking down the x axis.  The \"angle\" measurement is thus in the Y-Z plane.\n    // The arcdistance is in X.\n    final double x = Math.cos(arcDistance);\n    final double yzScale = Math.sin(arcDistance);\n    final double y = Math.cos(angle) * yzScale;\n    final double z = Math.sin(angle) * yzScale;\n    // Now, rotate coordinates so that we shift everything from pole = x-axis to actual coordinates.\n    // This transformation should take the point (1,0,0) and transform it to the pole's actual (x,y,z) coordinates.\n    // Coordinate rotation formula:\n    // x1 = x0 cos T - y0 sin T\n    // y1 = x0 sin T + y0 cos T\n    // We're in essence undoing the following transformation (from GeoPolygonFactory):\n    // x1 = x0 cos az + y0 sin az\n    // y1 = - x0 sin az + y0 cos az\n    // z1 = z0\n    // x2 = x1 cos al + z1 sin al\n    // y2 = y1\n    // z2 = - x1 sin al + z1 cos al\n    // So, we reverse the order of the transformations, AND we transform backwards.\n    // Transforming backwards means using these identities: sin(-angle) = -sin(angle), cos(-angle) = cos(angle)\n    // So:\n    // x1 = x0 cos al - z0 sin al\n    // y1 = y0\n    // z1 = x0 sin al + z0 cos al\n    // x2 = x1 cos az - y1 sin az\n    // y2 = x1 sin az + y1 cos az\n    // z2 = z1\n    final double x1 = x * cosLatitude - z * sinLatitude;\n    final double y1 = y;\n    final double z1 = x * sinLatitude + z * cosLatitude;\n    final double x2 = x1 * cosLongitude - y1 * sinLongitude;\n    final double y2 = x1 * sinLongitude + y1 * cosLongitude;\n    final double z2 = z1;\n\n    // Scale final (x,y,z) to land on planet surface\n    // Equation of ellipsoid:  x^2 / a^2 + y^2 / b^2 + z^2 / c^2 - 1 = 0\n    // Use a parameterization, e.g. x = t * x2, y = t * y2, z = t * z2, and find t.\n    // t^2 ( x2^2 / a^2 + y2^2 / b^2 + z2^2 / c^2 ) = 1\n    // t = +/- sqrt( 1 / ( x2^2 / a^2 + y2^2 / b^2 + z2^2 / c^2 ) )\n    // We want the + variant because we're scaling in the same direction as the original vector.\n    final double t = Math.sqrt( 1.0 / (x2 * x2 * pm.inverseAbSquared + y2 * y2 * pm.inverseAbSquared + z2 * z2 * pm.inverseCSquared));\n    return new GeoPoint(x2 * t, y2 * t, z2 * t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"01f1a345a808c3a24ce12b4540ab4847c0dac9b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d7b7a8973b4a2628b97962e152e513b0d3af02c8":["01f1a345a808c3a24ce12b4540ab4847c0dac9b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ae680950e0cfd56d7b4ea40918fee662023726"],"d0ae680950e0cfd56d7b4ea40918fee662023726":["d7b7a8973b4a2628b97962e152e513b0d3af02c8"]},"commit2Childs":{"01f1a345a808c3a24ce12b4540ab4847c0dac9b0":["d7b7a8973b4a2628b97962e152e513b0d3af02c8"],"d7b7a8973b4a2628b97962e152e513b0d3af02c8":["d0ae680950e0cfd56d7b4ea40918fee662023726"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01f1a345a808c3a24ce12b4540ab4847c0dac9b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d0ae680950e0cfd56d7b4ea40918fee662023726":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}