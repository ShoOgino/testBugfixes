{"path":"solr/core/src/java/org/apache/solr/search/join/GraphQueryParser#parse().mjava","commits":[{"id":"49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b","date":1444426023,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphQueryParser#parse().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    // grab query params and defaults\n    SolrParams localParams = getLocalParams();\n\n    Query rootNodeQuery = subQuery(localParams.get(QueryParsing.V), null).getQuery();\n    String traversalFilterS = localParams.get(\"traversalFilter\");\n    Query traversalFilter = traversalFilterS == null ? null : subQuery(traversalFilterS, null).getQuery();\n\n    String fromField = localParams.get(\"from\", \"node_id\");\n    String toField = localParams.get(\"to\", \"edge_ids\");\n\n    // only documents that do not have values in the edge id fields.\n    boolean onlyLeafNodes = localParams.getBool(\"returnOnlyLeaf\", false);\n    // choose if you want to return documents that match the initial query or not.\n    boolean returnRootNodes = localParams.getBool(\"returnRoot\", true);\n    // enable or disable the use of an automaton term for the frontier traversal.\n    int maxDepth = localParams.getInt(\"maxDepth\", -1);\n    // if true, an automaton will be compiled to issue the next graph hop\n    // this avoid having a large number of boolean clauses. (and it's faster too!)\n    boolean useAutn = localParams.getBool(\"useAutn\", false);\n\n    // Construct a graph query object based on parameters passed in.\n    GraphQuery gq = new GraphQuery(rootNodeQuery, fromField, toField, traversalFilter);\n    // set additional parameters that are not in the constructor.\n    gq.setMaxDepth(maxDepth);\n    gq.setOnlyLeafNodes(onlyLeafNodes);\n    gq.setReturnRoot(returnRootNodes);\n    gq.setUseAutn(useAutn);\n    // return the parsed graph query.\n    return gq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976","date":1500994164,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphQueryParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/GraphQueryParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    // grab query params and defaults\n    SolrParams localParams = getLocalParams();\n\n    Query rootNodeQuery = subQuery(localParams.get(QueryParsing.V), null).getQuery();\n    String traversalFilterS = localParams.get(\"traversalFilter\");\n    Query traversalFilter = traversalFilterS == null ? null : subQuery(traversalFilterS, null).getQuery();\n\n    // NOTE: the from/to are reversed from {!join}\n    String fromField = localParams.get(\"from\", \"node_id\");\n    String toField = localParams.get(\"to\", \"edge_ids\");\n\n    // only documents that do not have values in the edge id fields.\n    boolean onlyLeafNodes = localParams.getBool(\"returnOnlyLeaf\", false);\n    // choose if you want to return documents that match the initial query or not.\n    boolean returnRootNodes = localParams.getBool(\"returnRoot\", true);\n    // enable or disable the use of an automaton term for the frontier traversal.\n    int maxDepth = localParams.getInt(\"maxDepth\", -1);\n    // if true, an automaton will be compiled to issue the next graph hop\n    // this avoid having a large number of boolean clauses. (and it's faster too!)\n    boolean useAutn = localParams.getBool(\"useAutn\", false);\n\n    // Construct a graph query object based on parameters passed in.\n    GraphQuery gq = new GraphQuery(rootNodeQuery, fromField, toField, traversalFilter);\n    // set additional parameters that are not in the constructor.\n    gq.setMaxDepth(maxDepth);\n    gq.setOnlyLeafNodes(onlyLeafNodes);\n    gq.setReturnRoot(returnRootNodes);\n    gq.setUseAutn(useAutn);\n    // return the parsed graph query.\n    return gq;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    // grab query params and defaults\n    SolrParams localParams = getLocalParams();\n\n    Query rootNodeQuery = subQuery(localParams.get(QueryParsing.V), null).getQuery();\n    String traversalFilterS = localParams.get(\"traversalFilter\");\n    Query traversalFilter = traversalFilterS == null ? null : subQuery(traversalFilterS, null).getQuery();\n\n    String fromField = localParams.get(\"from\", \"node_id\");\n    String toField = localParams.get(\"to\", \"edge_ids\");\n\n    // only documents that do not have values in the edge id fields.\n    boolean onlyLeafNodes = localParams.getBool(\"returnOnlyLeaf\", false);\n    // choose if you want to return documents that match the initial query or not.\n    boolean returnRootNodes = localParams.getBool(\"returnRoot\", true);\n    // enable or disable the use of an automaton term for the frontier traversal.\n    int maxDepth = localParams.getInt(\"maxDepth\", -1);\n    // if true, an automaton will be compiled to issue the next graph hop\n    // this avoid having a large number of boolean clauses. (and it's faster too!)\n    boolean useAutn = localParams.getBool(\"useAutn\", false);\n\n    // Construct a graph query object based on parameters passed in.\n    GraphQuery gq = new GraphQuery(rootNodeQuery, fromField, toField, traversalFilter);\n    // set additional parameters that are not in the constructor.\n    gq.setMaxDepth(maxDepth);\n    gq.setOnlyLeafNodes(onlyLeafNodes);\n    gq.setReturnRoot(returnRootNodes);\n    gq.setUseAutn(useAutn);\n    // return the parsed graph query.\n    return gq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphQueryParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/GraphQueryParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    // grab query params and defaults\n    SolrParams localParams = getLocalParams();\n\n    Query rootNodeQuery = subQuery(localParams.get(QueryParsing.V), null).getQuery();\n    String traversalFilterS = localParams.get(\"traversalFilter\");\n    Query traversalFilter = traversalFilterS == null ? null : subQuery(traversalFilterS, null).getQuery();\n\n    // NOTE: the from/to are reversed from {!join}\n    String fromField = localParams.get(\"from\", \"node_id\");\n    String toField = localParams.get(\"to\", \"edge_ids\");\n\n    // only documents that do not have values in the edge id fields.\n    boolean onlyLeafNodes = localParams.getBool(\"returnOnlyLeaf\", false);\n    // choose if you want to return documents that match the initial query or not.\n    boolean returnRootNodes = localParams.getBool(\"returnRoot\", true);\n    // enable or disable the use of an automaton term for the frontier traversal.\n    int maxDepth = localParams.getInt(\"maxDepth\", -1);\n    // if true, an automaton will be compiled to issue the next graph hop\n    // this avoid having a large number of boolean clauses. (and it's faster too!)\n    boolean useAutn = localParams.getBool(\"useAutn\", false);\n\n    // Construct a graph query object based on parameters passed in.\n    GraphQuery gq = new GraphQuery(rootNodeQuery, fromField, toField, traversalFilter);\n    // set additional parameters that are not in the constructor.\n    gq.setMaxDepth(maxDepth);\n    gq.setOnlyLeafNodes(onlyLeafNodes);\n    gq.setReturnRoot(returnRootNodes);\n    gq.setUseAutn(useAutn);\n    // return the parsed graph query.\n    return gq;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    // grab query params and defaults\n    SolrParams localParams = getLocalParams();\n\n    Query rootNodeQuery = subQuery(localParams.get(QueryParsing.V), null).getQuery();\n    String traversalFilterS = localParams.get(\"traversalFilter\");\n    Query traversalFilter = traversalFilterS == null ? null : subQuery(traversalFilterS, null).getQuery();\n\n    String fromField = localParams.get(\"from\", \"node_id\");\n    String toField = localParams.get(\"to\", \"edge_ids\");\n\n    // only documents that do not have values in the edge id fields.\n    boolean onlyLeafNodes = localParams.getBool(\"returnOnlyLeaf\", false);\n    // choose if you want to return documents that match the initial query or not.\n    boolean returnRootNodes = localParams.getBool(\"returnRoot\", true);\n    // enable or disable the use of an automaton term for the frontier traversal.\n    int maxDepth = localParams.getInt(\"maxDepth\", -1);\n    // if true, an automaton will be compiled to issue the next graph hop\n    // this avoid having a large number of boolean clauses. (and it's faster too!)\n    boolean useAutn = localParams.getBool(\"useAutn\", false);\n\n    // Construct a graph query object based on parameters passed in.\n    GraphQuery gq = new GraphQuery(rootNodeQuery, fromField, toField, traversalFilter);\n    // set additional parameters that are not in the constructor.\n    gq.setMaxDepth(maxDepth);\n    gq.setOnlyLeafNodes(onlyLeafNodes);\n    gq.setReturnRoot(returnRootNodes);\n    gq.setUseAutn(useAutn);\n    // return the parsed graph query.\n    return gq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphQueryParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/GraphQueryParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    // grab query params and defaults\n    SolrParams localParams = getLocalParams();\n\n    Query rootNodeQuery = subQuery(localParams.get(QueryParsing.V), null).getQuery();\n    String traversalFilterS = localParams.get(\"traversalFilter\");\n    Query traversalFilter = traversalFilterS == null ? null : subQuery(traversalFilterS, null).getQuery();\n\n    // NOTE: the from/to are reversed from {!join}\n    String fromField = localParams.get(\"from\", \"node_id\");\n    String toField = localParams.get(\"to\", \"edge_ids\");\n\n    // only documents that do not have values in the edge id fields.\n    boolean onlyLeafNodes = localParams.getBool(\"returnOnlyLeaf\", false);\n    // choose if you want to return documents that match the initial query or not.\n    boolean returnRootNodes = localParams.getBool(\"returnRoot\", true);\n    // enable or disable the use of an automaton term for the frontier traversal.\n    int maxDepth = localParams.getInt(\"maxDepth\", -1);\n    // if true, an automaton will be compiled to issue the next graph hop\n    // this avoid having a large number of boolean clauses. (and it's faster too!)\n    boolean useAutn = localParams.getBool(\"useAutn\", false);\n\n    // Construct a graph query object based on parameters passed in.\n    GraphQuery gq = new GraphQuery(rootNodeQuery, fromField, toField, traversalFilter);\n    // set additional parameters that are not in the constructor.\n    gq.setMaxDepth(maxDepth);\n    gq.setOnlyLeafNodes(onlyLeafNodes);\n    gq.setReturnRoot(returnRootNodes);\n    gq.setUseAutn(useAutn);\n    // return the parsed graph query.\n    return gq;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    // grab query params and defaults\n    SolrParams localParams = getLocalParams();\n\n    Query rootNodeQuery = subQuery(localParams.get(QueryParsing.V), null).getQuery();\n    String traversalFilterS = localParams.get(\"traversalFilter\");\n    Query traversalFilter = traversalFilterS == null ? null : subQuery(traversalFilterS, null).getQuery();\n\n    String fromField = localParams.get(\"from\", \"node_id\");\n    String toField = localParams.get(\"to\", \"edge_ids\");\n\n    // only documents that do not have values in the edge id fields.\n    boolean onlyLeafNodes = localParams.getBool(\"returnOnlyLeaf\", false);\n    // choose if you want to return documents that match the initial query or not.\n    boolean returnRootNodes = localParams.getBool(\"returnRoot\", true);\n    // enable or disable the use of an automaton term for the frontier traversal.\n    int maxDepth = localParams.getInt(\"maxDepth\", -1);\n    // if true, an automaton will be compiled to issue the next graph hop\n    // this avoid having a large number of boolean clauses. (and it's faster too!)\n    boolean useAutn = localParams.getBool(\"useAutn\", false);\n\n    // Construct a graph query object based on parameters passed in.\n    GraphQuery gq = new GraphQuery(rootNodeQuery, fromField, toField, traversalFilter);\n    // set additional parameters that are not in the constructor.\n    gq.setMaxDepth(maxDepth);\n    gq.setOnlyLeafNodes(onlyLeafNodes);\n    gq.setReturnRoot(returnRootNodes);\n    gq.setUseAutn(useAutn);\n    // return the parsed graph query.\n    return gq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"644de864e024cdc6f1631b340e14c6d32c62352b","date":1502307834,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphQueryParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/GraphQueryParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    // grab query params and defaults\n    SolrParams localParams = getLocalParams();\n\n    Query rootNodeQuery = subQuery(localParams.get(QueryParsing.V), null).getQuery();\n    String traversalFilterS = localParams.get(\"traversalFilter\");\n    Query traversalFilter = traversalFilterS == null ? null : subQuery(traversalFilterS, null).getQuery();\n\n    // NOTE: the from/to are reversed from {!join}\n    String fromField = localParams.get(\"from\", \"node_id\");\n    String toField = localParams.get(\"to\", \"edge_ids\");\n\n    validateFields(fromField);\n    validateFields(toField);\n\n    // only documents that do not have values in the edge id fields.\n    boolean onlyLeafNodes = localParams.getBool(\"returnOnlyLeaf\", false);\n    // choose if you want to return documents that match the initial query or not.\n    boolean returnRootNodes = localParams.getBool(\"returnRoot\", true);\n    // enable or disable the use of an automaton term for the frontier traversal.\n    int maxDepth = localParams.getInt(\"maxDepth\", -1);\n    // if true, an automaton will be compiled to issue the next graph hop\n    // this avoid having a large number of boolean clauses. (and it's faster too!)\n    boolean useAutn = localParams.getBool(\"useAutn\", false);\n\n    // Construct a graph query object based on parameters passed in.\n    GraphQuery gq = new GraphQuery(rootNodeQuery, fromField, toField, traversalFilter);\n    // set additional parameters that are not in the constructor.\n    gq.setMaxDepth(maxDepth);\n    gq.setOnlyLeafNodes(onlyLeafNodes);\n    gq.setReturnRoot(returnRootNodes);\n    gq.setUseAutn(useAutn);\n    // return the parsed graph query.\n    return gq;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    // grab query params and defaults\n    SolrParams localParams = getLocalParams();\n\n    Query rootNodeQuery = subQuery(localParams.get(QueryParsing.V), null).getQuery();\n    String traversalFilterS = localParams.get(\"traversalFilter\");\n    Query traversalFilter = traversalFilterS == null ? null : subQuery(traversalFilterS, null).getQuery();\n\n    // NOTE: the from/to are reversed from {!join}\n    String fromField = localParams.get(\"from\", \"node_id\");\n    String toField = localParams.get(\"to\", \"edge_ids\");\n\n    // only documents that do not have values in the edge id fields.\n    boolean onlyLeafNodes = localParams.getBool(\"returnOnlyLeaf\", false);\n    // choose if you want to return documents that match the initial query or not.\n    boolean returnRootNodes = localParams.getBool(\"returnRoot\", true);\n    // enable or disable the use of an automaton term for the frontier traversal.\n    int maxDepth = localParams.getInt(\"maxDepth\", -1);\n    // if true, an automaton will be compiled to issue the next graph hop\n    // this avoid having a large number of boolean clauses. (and it's faster too!)\n    boolean useAutn = localParams.getBool(\"useAutn\", false);\n\n    // Construct a graph query object based on parameters passed in.\n    GraphQuery gq = new GraphQuery(rootNodeQuery, fromField, toField, traversalFilter);\n    // set additional parameters that are not in the constructor.\n    gq.setMaxDepth(maxDepth);\n    gq.setOnlyLeafNodes(onlyLeafNodes);\n    gq.setReturnRoot(returnRootNodes);\n    gq.setUseAutn(useAutn);\n    // return the parsed graph query.\n    return gq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphQueryParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/GraphQueryParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    // grab query params and defaults\n    SolrParams localParams = getLocalParams();\n\n    Query rootNodeQuery = subQuery(localParams.get(QueryParsing.V), null).getQuery();\n    String traversalFilterS = localParams.get(\"traversalFilter\");\n    Query traversalFilter = traversalFilterS == null ? null : subQuery(traversalFilterS, null).getQuery();\n\n    // NOTE: the from/to are reversed from {!join}\n    String fromField = localParams.get(\"from\", \"node_id\");\n    String toField = localParams.get(\"to\", \"edge_ids\");\n\n    validateFields(fromField);\n    validateFields(toField);\n\n    // only documents that do not have values in the edge id fields.\n    boolean onlyLeafNodes = localParams.getBool(\"returnOnlyLeaf\", false);\n    // choose if you want to return documents that match the initial query or not.\n    boolean returnRootNodes = localParams.getBool(\"returnRoot\", true);\n    // enable or disable the use of an automaton term for the frontier traversal.\n    int maxDepth = localParams.getInt(\"maxDepth\", -1);\n    // if true, an automaton will be compiled to issue the next graph hop\n    // this avoid having a large number of boolean clauses. (and it's faster too!)\n    boolean useAutn = localParams.getBool(\"useAutn\", false);\n\n    // Construct a graph query object based on parameters passed in.\n    GraphQuery gq = new GraphQuery(rootNodeQuery, fromField, toField, traversalFilter);\n    // set additional parameters that are not in the constructor.\n    gq.setMaxDepth(maxDepth);\n    gq.setOnlyLeafNodes(onlyLeafNodes);\n    gq.setReturnRoot(returnRootNodes);\n    gq.setUseAutn(useAutn);\n    // return the parsed graph query.\n    return gq;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    // grab query params and defaults\n    SolrParams localParams = getLocalParams();\n\n    Query rootNodeQuery = subQuery(localParams.get(QueryParsing.V), null).getQuery();\n    String traversalFilterS = localParams.get(\"traversalFilter\");\n    Query traversalFilter = traversalFilterS == null ? null : subQuery(traversalFilterS, null).getQuery();\n\n    // NOTE: the from/to are reversed from {!join}\n    String fromField = localParams.get(\"from\", \"node_id\");\n    String toField = localParams.get(\"to\", \"edge_ids\");\n\n    // only documents that do not have values in the edge id fields.\n    boolean onlyLeafNodes = localParams.getBool(\"returnOnlyLeaf\", false);\n    // choose if you want to return documents that match the initial query or not.\n    boolean returnRootNodes = localParams.getBool(\"returnRoot\", true);\n    // enable or disable the use of an automaton term for the frontier traversal.\n    int maxDepth = localParams.getInt(\"maxDepth\", -1);\n    // if true, an automaton will be compiled to issue the next graph hop\n    // this avoid having a large number of boolean clauses. (and it's faster too!)\n    boolean useAutn = localParams.getBool(\"useAutn\", false);\n\n    // Construct a graph query object based on parameters passed in.\n    GraphQuery gq = new GraphQuery(rootNodeQuery, fromField, toField, traversalFilter);\n    // set additional parameters that are not in the constructor.\n    gq.setMaxDepth(maxDepth);\n    gq.setOnlyLeafNodes(onlyLeafNodes);\n    gq.setReturnRoot(returnRootNodes);\n    gq.setUseAutn(useAutn);\n    // return the parsed graph query.\n    return gq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphQueryParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/GraphQueryParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    // grab query params and defaults\n    SolrParams localParams = getLocalParams();\n\n    Query rootNodeQuery = subQuery(localParams.get(QueryParsing.V), null).getQuery();\n    String traversalFilterS = localParams.get(\"traversalFilter\");\n    Query traversalFilter = traversalFilterS == null ? null : subQuery(traversalFilterS, null).getQuery();\n\n    // NOTE: the from/to are reversed from {!join}\n    String fromField = localParams.get(\"from\", \"node_id\");\n    String toField = localParams.get(\"to\", \"edge_ids\");\n\n    validateFields(fromField);\n    validateFields(toField);\n\n    // only documents that do not have values in the edge id fields.\n    boolean onlyLeafNodes = localParams.getBool(\"returnOnlyLeaf\", false);\n    // choose if you want to return documents that match the initial query or not.\n    boolean returnRootNodes = localParams.getBool(\"returnRoot\", true);\n    // enable or disable the use of an automaton term for the frontier traversal.\n    int maxDepth = localParams.getInt(\"maxDepth\", -1);\n    // if true, an automaton will be compiled to issue the next graph hop\n    // this avoid having a large number of boolean clauses. (and it's faster too!)\n    boolean useAutn = localParams.getBool(\"useAutn\", false);\n\n    // Construct a graph query object based on parameters passed in.\n    GraphQuery gq = new GraphQuery(rootNodeQuery, fromField, toField, traversalFilter);\n    // set additional parameters that are not in the constructor.\n    gq.setMaxDepth(maxDepth);\n    gq.setOnlyLeafNodes(onlyLeafNodes);\n    gq.setReturnRoot(returnRootNodes);\n    gq.setUseAutn(useAutn);\n    // return the parsed graph query.\n    return gq;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    // grab query params and defaults\n    SolrParams localParams = getLocalParams();\n\n    Query rootNodeQuery = subQuery(localParams.get(QueryParsing.V), null).getQuery();\n    String traversalFilterS = localParams.get(\"traversalFilter\");\n    Query traversalFilter = traversalFilterS == null ? null : subQuery(traversalFilterS, null).getQuery();\n\n    // NOTE: the from/to are reversed from {!join}\n    String fromField = localParams.get(\"from\", \"node_id\");\n    String toField = localParams.get(\"to\", \"edge_ids\");\n\n    // only documents that do not have values in the edge id fields.\n    boolean onlyLeafNodes = localParams.getBool(\"returnOnlyLeaf\", false);\n    // choose if you want to return documents that match the initial query or not.\n    boolean returnRootNodes = localParams.getBool(\"returnRoot\", true);\n    // enable or disable the use of an automaton term for the frontier traversal.\n    int maxDepth = localParams.getInt(\"maxDepth\", -1);\n    // if true, an automaton will be compiled to issue the next graph hop\n    // this avoid having a large number of boolean clauses. (and it's faster too!)\n    boolean useAutn = localParams.getBool(\"useAutn\", false);\n\n    // Construct a graph query object based on parameters passed in.\n    GraphQuery gq = new GraphQuery(rootNodeQuery, fromField, toField, traversalFilter);\n    // set additional parameters that are not in the constructor.\n    gq.setMaxDepth(maxDepth);\n    gq.setOnlyLeafNodes(onlyLeafNodes);\n    gq.setReturnRoot(returnRootNodes);\n    gq.setUseAutn(useAutn);\n    // return the parsed graph query.\n    return gq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b"],"a52341299179de5479672f7cf518bf4b173f34b3":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b","a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b","a52341299179de5479672f7cf518bf4b173f34b3"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["a52341299179de5479672f7cf518bf4b173f34b3","644de864e024cdc6f1631b340e14c6d32c62352b"],"49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","644de864e024cdc6f1631b340e14c6d32c62352b"],"644de864e024cdc6f1631b340e14c6d32c62352b":["a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["644de864e024cdc6f1631b340e14c6d32c62352b"]},"commit2Childs":{"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976":["a52341299179de5479672f7cf518bf4b173f34b3"],"a52341299179de5479672f7cf518bf4b173f34b3":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","58884af1f68e9d61c217c753fbd6266d86a63b14","644de864e024cdc6f1631b340e14c6d32c62352b"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b":["a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976","a52341299179de5479672f7cf518bf4b173f34b3","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"644de864e024cdc6f1631b340e14c6d32c62352b":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}