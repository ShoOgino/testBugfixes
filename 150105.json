{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testParallelMetricStream().mjava","commits":[{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testParallelMetricStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testParallelMetricStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"100\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Bucket[] buckets = {new Bucket(\"a_s\")};\n    Metric[] metrics = {new SumMetric(\"a_i\", false),\n        new MeanMetric(\"a_i\", false),\n        new CountMetric(),\n        new MinMetric(\"a_i\", false),\n        new MaxMetric(\"a_i\", false)};\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    MetricStream mstream = new MetricStream(stream, buckets, metrics, \"metric1\", new DescBucketComp(0),5);\n    ParallelStream pstream = new ParallelStream(zkHost,\"collection1\",mstream,2,new AscFieldComp(\"a_i\"));\n    getTuples(pstream);\n\n    BucketMetrics[] bucketMetrics = mstream.getBucketMetrics();\n    assert(bucketMetrics.length == 3);\n\n    //Bucket should be is descending order based on Metric 0, which is the SumMetric.\n\n    assert(bucketMetrics[0].getKey().toString().equals(\"hello0\"));\n    assert(bucketMetrics[1].getKey().toString().equals(\"hello3\"));\n    assert(bucketMetrics[2].getKey().toString().equals(\"hello1\"));\n\n    assertMetric(bucketMetrics[0].getMetrics()[0], 102.0d); //Test the first Metric of the first BucketMetrics\n    assertMetric(bucketMetrics[0].getMetrics()[1], 51.0d); //Test the second Metric of the first BucketMetrics\n    assertMetric(bucketMetrics[0].getMetrics()[2], 2.0d); //Test the third Metric of the first BucketMetrics\n    assertMetric(bucketMetrics[0].getMetrics()[3], 2.0d); //Test the fourth Metric of the first BucketMetrics\n    assertMetric(bucketMetrics[0].getMetrics()[4], 100.0d); //Test the fifth Metric of the first BucketMetrics\n\n\n    assertMetric(bucketMetrics[1].getMetrics()[0], 7.0d);\n    assertMetric(bucketMetrics[2].getMetrics()[0], 3.0d);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    mstream = new MetricStream(stream, buckets, metrics, \"metric1\", new AscBucketComp(0),5);\n    getTuples(mstream);\n\n    bucketMetrics = mstream.getBucketMetrics();\n\n    assertMetric(bucketMetrics[0].getMetrics()[0], 3.0d); //Test the first Metric of the first BucketMetrics\n    assertMetric(bucketMetrics[0].getMetrics()[1], 1.0d); //Test the second Metric of the first BucketMetrics\n    assertMetric(bucketMetrics[0].getMetrics()[2], 3.0d); //Test the third Metric of the first BucketMetrics\n    assertMetric(bucketMetrics[0].getMetrics()[3], 1.0d); //Test the fourth Metric of the first BucketMetrics\n    assertMetric(bucketMetrics[0].getMetrics()[4], 1.0d); //Test the fifth Metric of the first BucketMetrics\n\n    assertMetric(bucketMetrics[1].getMetrics()[0], 7.0d);\n    assertMetric(bucketMetrics[2].getMetrics()[0], 102.0d);\n\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"1000\", \"a_f\", \"1\"); //Add a fourth record.\n    commit();\n\n    //Test desc comp with more buckets then priority queue can hold.\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    mstream = new MetricStream(stream, buckets, metrics, \"metric1\", new DescBucketComp(0),3);\n    getTuples(mstream);\n\n    bucketMetrics = mstream.getBucketMetrics();\n    assert(bucketMetrics.length == 3);\n    assert(bucketMetrics[0].getKey().toString().equals(\"hello4\"));\n    assert(bucketMetrics[1].getKey().toString().equals(\"hello0\"));\n    assert(bucketMetrics[2].getKey().toString().equals(\"hello3\"));\n\n    //Test asc comp with more buckets then priority queue can hold.\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    mstream = new MetricStream(stream, buckets, metrics, \"metric1\", new AscBucketComp(0),3);\n    getTuples(mstream);\n\n    bucketMetrics = mstream.getBucketMetrics();\n    assert(bucketMetrics.length == 3);\n    assert(bucketMetrics[0].getKey().toString().equals(\"hello1\"));\n    assert(bucketMetrics[1].getKey().toString().equals(\"hello3\"));\n    assert(bucketMetrics[2].getKey().toString().equals(\"hello0\"));\n\n\n    //Test with no buckets\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    mstream = new MetricStream(stream, metrics, \"metric1\");\n    getTuples(mstream);\n\n    bucketMetrics = mstream.getBucketMetrics();\n    assert(bucketMetrics.length == 1);\n    assert(bucketMetrics[0].getKey().toString().equals(\"metrics\"));\n    assertMetric(bucketMetrics[0].getMetrics()[0], 1112.0d); //Test the first Metric of the first BucketMetrics\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f03b407cd85abd6edd2a1fe7cab9990164aa4b","date":1427303865,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testParallelMetricStream().mjava","sourceNew":null,"sourceOld":"  private void testParallelMetricStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"100\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Bucket[] buckets = {new Bucket(\"a_s\")};\n    Metric[] metrics = {new SumMetric(\"a_i\", false),\n        new MeanMetric(\"a_i\", false),\n        new CountMetric(),\n        new MinMetric(\"a_i\", false),\n        new MaxMetric(\"a_i\", false)};\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    MetricStream mstream = new MetricStream(stream, buckets, metrics, \"metric1\", new DescBucketComp(0),5);\n    ParallelStream pstream = new ParallelStream(zkHost,\"collection1\",mstream,2,new AscFieldComp(\"a_i\"));\n    getTuples(pstream);\n\n    BucketMetrics[] bucketMetrics = mstream.getBucketMetrics();\n    assert(bucketMetrics.length == 3);\n\n    //Bucket should be is descending order based on Metric 0, which is the SumMetric.\n\n    assert(bucketMetrics[0].getKey().toString().equals(\"hello0\"));\n    assert(bucketMetrics[1].getKey().toString().equals(\"hello3\"));\n    assert(bucketMetrics[2].getKey().toString().equals(\"hello1\"));\n\n    assertMetric(bucketMetrics[0].getMetrics()[0], 102.0d); //Test the first Metric of the first BucketMetrics\n    assertMetric(bucketMetrics[0].getMetrics()[1], 51.0d); //Test the second Metric of the first BucketMetrics\n    assertMetric(bucketMetrics[0].getMetrics()[2], 2.0d); //Test the third Metric of the first BucketMetrics\n    assertMetric(bucketMetrics[0].getMetrics()[3], 2.0d); //Test the fourth Metric of the first BucketMetrics\n    assertMetric(bucketMetrics[0].getMetrics()[4], 100.0d); //Test the fifth Metric of the first BucketMetrics\n\n\n    assertMetric(bucketMetrics[1].getMetrics()[0], 7.0d);\n    assertMetric(bucketMetrics[2].getMetrics()[0], 3.0d);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    mstream = new MetricStream(stream, buckets, metrics, \"metric1\", new AscBucketComp(0),5);\n    getTuples(mstream);\n\n    bucketMetrics = mstream.getBucketMetrics();\n\n    assertMetric(bucketMetrics[0].getMetrics()[0], 3.0d); //Test the first Metric of the first BucketMetrics\n    assertMetric(bucketMetrics[0].getMetrics()[1], 1.0d); //Test the second Metric of the first BucketMetrics\n    assertMetric(bucketMetrics[0].getMetrics()[2], 3.0d); //Test the third Metric of the first BucketMetrics\n    assertMetric(bucketMetrics[0].getMetrics()[3], 1.0d); //Test the fourth Metric of the first BucketMetrics\n    assertMetric(bucketMetrics[0].getMetrics()[4], 1.0d); //Test the fifth Metric of the first BucketMetrics\n\n    assertMetric(bucketMetrics[1].getMetrics()[0], 7.0d);\n    assertMetric(bucketMetrics[2].getMetrics()[0], 102.0d);\n\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"1000\", \"a_f\", \"1\"); //Add a fourth record.\n    commit();\n\n    //Test desc comp with more buckets then priority queue can hold.\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    mstream = new MetricStream(stream, buckets, metrics, \"metric1\", new DescBucketComp(0),3);\n    getTuples(mstream);\n\n    bucketMetrics = mstream.getBucketMetrics();\n    assert(bucketMetrics.length == 3);\n    assert(bucketMetrics[0].getKey().toString().equals(\"hello4\"));\n    assert(bucketMetrics[1].getKey().toString().equals(\"hello0\"));\n    assert(bucketMetrics[2].getKey().toString().equals(\"hello3\"));\n\n    //Test asc comp with more buckets then priority queue can hold.\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    mstream = new MetricStream(stream, buckets, metrics, \"metric1\", new AscBucketComp(0),3);\n    getTuples(mstream);\n\n    bucketMetrics = mstream.getBucketMetrics();\n    assert(bucketMetrics.length == 3);\n    assert(bucketMetrics[0].getKey().toString().equals(\"hello1\"));\n    assert(bucketMetrics[1].getKey().toString().equals(\"hello3\"));\n    assert(bucketMetrics[2].getKey().toString().equals(\"hello0\"));\n\n\n    //Test with no buckets\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    mstream = new MetricStream(stream, metrics, \"metric1\");\n    getTuples(mstream);\n\n    bucketMetrics = mstream.getBucketMetrics();\n    assert(bucketMetrics.length == 1);\n    assert(bucketMetrics[0].getKey().toString().equals(\"metrics\"));\n    assertMetric(bucketMetrics[0].getMetrics()[0], 1112.0d); //Test the first Metric of the first BucketMetrics\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["91814ce09be68efd0626969632e79ae47d8876d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91814ce09be68efd0626969632e79ae47d8876d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"]},"commit2Childs":{"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91814ce09be68efd0626969632e79ae47d8876d4"],"91814ce09be68efd0626969632e79ae47d8876d4":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}