{"path":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#doGet(BaseSolrResource,String).mjava","commits":[{"id":"eb58c4024f450cc56f3a748012536d763700adb5","date":1495748960,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#doGet(BaseSolrResource,String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void doGet(BaseSolrResource endpoint, String childId) {\n      SolrQueryResponse response = endpoint.getSolrResponse();\n      if (childId != null) {\n        boolean ignoreCase = getIgnoreCase();\n        String key = applyCaseSetting(ignoreCase, childId);\n\n        // if ignoreCase==true, then we get the mappings using the lower-cased key\n        // and then return a union of all case-sensitive keys, if false, then\n        // we only return the mappings for the exact case requested\n        CasePreservedSynonymMappings cpsm = synonymMappings.get(key);\n        Set<String> mappings = (cpsm != null) ? cpsm.getMappings(ignoreCase, childId) : null;\n        if (mappings == null)\n          throw new SolrException(ErrorCode.NOT_FOUND,\n              String.format(Locale.ROOT, \"%s not found in %s\", childId, getResourceId()));\n\n        response.add(childId, mappings);\n      } else {\n        response.add(SYNONYM_MAPPINGS, buildMapToStore(getStoredView()));\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#doGet(BaseSolrResource,String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void doGet(BaseSolrResource endpoint, String childId) {\n      SolrQueryResponse response = endpoint.getSolrResponse();\n      if (childId != null) {\n        boolean ignoreCase = getIgnoreCase();\n        String key = applyCaseSetting(ignoreCase, childId);\n\n        // if ignoreCase==true, then we get the mappings using the lower-cased key\n        // and then return a union of all case-sensitive keys, if false, then\n        // we only return the mappings for the exact case requested\n        CasePreservedSynonymMappings cpsm = synonymMappings.get(key);\n        Set<String> mappings = (cpsm != null) ? cpsm.getMappings(ignoreCase, childId) : null;\n        if (mappings == null)\n          throw new SolrException(ErrorCode.NOT_FOUND,\n              String.format(Locale.ROOT, \"%s not found in %s\", childId, getResourceId()));\n\n        response.add(childId, mappings);\n      } else {\n        response.add(SYNONYM_MAPPINGS, buildMapToStore(getStoredView()));\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#doGet(BaseSolrResource,String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void doGet(BaseSolrResource endpoint, String childId) {\n      SolrQueryResponse response = endpoint.getSolrResponse();\n      if (childId != null) {\n        boolean ignoreCase = getIgnoreCase();\n        String key = applyCaseSetting(ignoreCase, childId);\n\n        // if ignoreCase==true, then we get the mappings using the lower-cased key\n        // and then return a union of all case-sensitive keys, if false, then\n        // we only return the mappings for the exact case requested\n        CasePreservedSynonymMappings cpsm = synonymMappings.get(key);\n        Set<String> mappings = (cpsm != null) ? cpsm.getMappings(ignoreCase, childId) : null;\n        if (mappings == null)\n          throw new SolrException(ErrorCode.NOT_FOUND,\n              String.format(Locale.ROOT, \"%s not found in %s\", childId, getResourceId()));\n\n        response.add(childId, mappings);\n      } else {\n        response.add(SYNONYM_MAPPINGS, buildMapToStore(getStoredView()));\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb58c4024f450cc56f3a748012536d763700adb5"],"eb58c4024f450cc56f3a748012536d763700adb5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb58c4024f450cc56f3a748012536d763700adb5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"eb58c4024f450cc56f3a748012536d763700adb5":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","eb58c4024f450cc56f3a748012536d763700adb5","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}