{"path":"lucene/backwards/src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","sourceNew":"  /** <b>Expert:</b> Adds a custom AttributeImpl instance with one or more Attribute interfaces.\n   * <p><font color=\"red\"><b>Please note:</b> It is not guaranteed, that <code>att</code> is added to\n   * the <code>AttributeSource</code>, because the provided attributes may already exist.\n   * You should always retrieve the wanted attributes using {@link #getAttribute} after adding\n   * with this method and cast to your class.\n   * The recommended way to use custom implementations is using an {@link AttributeFactory}.\n   * </font></p>\n   */\n  public void addAttributeImpl(final AttributeImpl att) {\n    final Class<? extends AttributeImpl> clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    LinkedList<Class<? extends Attribute>> foundInterfaces;\n    synchronized(knownImplClasses) {\n      foundInterfaces = knownImplClasses.get(clazz);\n      if (foundInterfaces == null) {\n        knownImplClasses.put(clazz, foundInterfaces = new LinkedList<Class<? extends Attribute>>());\n        // find all interfaces that this attribute instance implements\n        // and that extend the Attribute interface\n        Class<?> actClazz = clazz;\n        do {\n          for (Class<?> curInterface : actClazz.getInterfaces()) {\n            if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n              foundInterfaces.add(curInterface.asSubclass(Attribute.class));\n            }\n          }\n          actClazz = actClazz.getSuperclass();\n        } while (actClazz != null);\n      }\n    }\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (Class<? extends Attribute> curInterface : foundInterfaces) {\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","sourceOld":"  /** <b>Expert:</b> Adds a custom AttributeImpl instance with one or more Attribute interfaces.\n   * <p><font color=\"red\"><b>Please note:</b> It is not guaranteed, that <code>att</code> is added to\n   * the <code>AttributeSource</code>, because the provided attributes may already exist.\n   * You should always retrieve the wanted attributes using {@link #getAttribute} after adding\n   * with this method and cast to your class.\n   * The recommended way to use custom implementations is using an {@link AttributeFactory}.\n   * </font></p>\n   */\n  public void addAttributeImpl(final AttributeImpl att) {\n    final Class<? extends AttributeImpl> clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    LinkedList<Class<? extends Attribute>> foundInterfaces;\n    synchronized(knownImplClasses) {\n      foundInterfaces = knownImplClasses.get(clazz);\n      if (foundInterfaces == null) {\n        knownImplClasses.put(clazz, foundInterfaces = new LinkedList<Class<? extends Attribute>>());\n        // find all interfaces that this attribute instance implements\n        // and that extend the Attribute interface\n        Class<?> actClazz = clazz;\n        do {\n          for (Class<?> curInterface : actClazz.getInterfaces()) {\n            if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n              foundInterfaces.add(curInterface.asSubclass(Attribute.class));\n            }\n          }\n          actClazz = actClazz.getSuperclass();\n        } while (actClazz != null);\n      }\n    }\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (Class<? extends Attribute> curInterface : foundInterfaces) {\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","sourceNew":null,"sourceOld":"  /** <b>Expert:</b> Adds a custom AttributeImpl instance with one or more Attribute interfaces.\n   * <p><font color=\"red\"><b>Please note:</b> It is not guaranteed, that <code>att</code> is added to\n   * the <code>AttributeSource</code>, because the provided attributes may already exist.\n   * You should always retrieve the wanted attributes using {@link #getAttribute} after adding\n   * with this method and cast to your class.\n   * The recommended way to use custom implementations is using an {@link AttributeFactory}.\n   * </font></p>\n   */\n  public void addAttributeImpl(final AttributeImpl att) {\n    final Class<? extends AttributeImpl> clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    LinkedList<Class<? extends Attribute>> foundInterfaces;\n    synchronized(knownImplClasses) {\n      foundInterfaces = knownImplClasses.get(clazz);\n      if (foundInterfaces == null) {\n        knownImplClasses.put(clazz, foundInterfaces = new LinkedList<Class<? extends Attribute>>());\n        // find all interfaces that this attribute instance implements\n        // and that extend the Attribute interface\n        Class<?> actClazz = clazz;\n        do {\n          for (Class<?> curInterface : actClazz.getInterfaces()) {\n            if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n              foundInterfaces.add(curInterface.asSubclass(Attribute.class));\n            }\n          }\n          actClazz = actClazz.getSuperclass();\n        } while (actClazz != null);\n      }\n    }\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (Class<? extends Attribute> curInterface : foundInterfaces) {\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}