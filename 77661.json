{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testRamBytesUsedConstantEntryOverhead().mjava","commits":[{"id":"9d6ade6517735e5fca21539f4ff32151bf0a89b8","date":1418291454,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testRamBytesUsedConstantEntryOverhead().mjava","pathOld":"/dev/null","sourceNew":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    final LRUFilterCache filterCache = new LRUFilterCache(1000000, 10000000);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Filter) {\n          return filterCache.ramBytesUsed((Filter) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final int numFilters = atLeast(1000);\n    for (int i = 0; i < numFilters; ++i) {\n      final Filter filter = new DummyFilter();\n      final Filter cached = filterCache.doCache(filter, FilterCachingPolicy.ALWAYS_CACHE);\n      searcher.search(new ConstantScoreQuery(cached), 1);\n    }\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(filterCache, acc);\n    final long expectedRamBytesUsed = filterCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedConstantEntryOverhead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testRamBytesUsedConstantEntryOverhead().mjava","sourceNew":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    final int numQueries = atLeast(1000);\n    for (int i = 0; i < numQueries; ++i) {\n      final Query query = new DummyQuery();\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertTrue(queryCache.getCacheCount() > 0);\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(queryCache, acc);\n    final long expectedRamBytesUsed = queryCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    final LRUFilterCache filterCache = new LRUFilterCache(1000000, 10000000);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Filter) {\n          return filterCache.ramBytesUsed((Filter) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final int numFilters = atLeast(1000);\n    for (int i = 0; i < numFilters; ++i) {\n      final Filter filter = new DummyFilter();\n      final Filter cached = filterCache.doCache(filter, FilterCachingPolicy.ALWAYS_CACHE);\n      searcher.search(new ConstantScoreQuery(cached), 1);\n    }\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(filterCache, acc);\n    final long expectedRamBytesUsed = filterCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testRamBytesUsedConstantEntryOverhead().mjava","sourceNew":null,"sourceOld":"  // Test what happens when the cache contains only filters and doc id sets\n  // that require very little memory. In that case most of the memory is taken\n  // by the cache itself, not cache entries, and we want to make sure that\n  // memory usage is not grossly underestimated.\n  public void testRamBytesUsedConstantEntryOverhead() throws IOException {\n    final LRUFilterCache filterCache = new LRUFilterCache(1000000, 10000000);\n\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Filter) {\n          return filterCache.ramBytesUsed((Filter) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not follow references to core cache keys\n          return 0;\n        }\n        return super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n    };\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final int numFilters = atLeast(1000);\n    for (int i = 0; i < numFilters; ++i) {\n      final Filter filter = new DummyFilter();\n      final Filter cached = filterCache.doCache(filter, FilterCachingPolicy.ALWAYS_CACHE);\n      searcher.search(new ConstantScoreQuery(cached), 1);\n    }\n\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(filterCache, acc);\n    final long expectedRamBytesUsed = filterCache.ramBytesUsed();\n    // error < 30%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, 30 * actualRamBytesUsed / 100);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["9d6ade6517735e5fca21539f4ff32151bf0a89b8","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["9d6ade6517735e5fca21539f4ff32151bf0a89b8"],"9d6ade6517735e5fca21539f4ff32151bf0a89b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d6ade6517735e5fca21539f4ff32151bf0a89b8":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d6ade6517735e5fca21539f4ff32151bf0a89b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}