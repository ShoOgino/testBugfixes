{"path":"solr/core/src/test/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice#getVolumeMap(ReplicaMap,RamDiskReplicaTracker).mjava","commits":[{"id":"44ca189138a5b6e1989d12ab992fab60e235ddc7","date":1549051496,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice#getVolumeMap(ReplicaMap,RamDiskReplicaTracker).mjava","pathOld":"/dev/null","sourceNew":"  void getVolumeMap(ReplicaMap volumeMap,\n                    final RamDiskReplicaTracker lazyWriteReplicaMap)\n      throws IOException {\n    // Recover lazy persist replicas, they will be added to the volumeMap\n    // when we scan the finalized directory.\n    if (lazypersistDir.exists()) {\n      int numRecovered = moveLazyPersistReplicasToFinalized(lazypersistDir);\n      FsDatasetImpl.LOG.info(\n          \"Recovered \" + numRecovered + \" replicas from \" + lazypersistDir);\n    }\n\n    boolean  success = readReplicasFromCache(volumeMap, lazyWriteReplicaMap);\n    if (!success) {\n      List<IOException> exceptions = Collections\n          .synchronizedList(new ArrayList<IOException>());\n      Queue<RecursiveAction> subTaskQueue =\n          new ConcurrentLinkedQueue<RecursiveAction>();\n\n      // add finalized replicas\n      AddReplicaProcessor task = new AddReplicaProcessor(volumeMap,\n          finalizedDir, lazyWriteReplicaMap, true, exceptions, subTaskQueue);\n      ForkJoinTask<Void> finalizedTask = addReplicaThreadPool.submit(task);\n\n      // add rbw replicas\n      task = new AddReplicaProcessor(volumeMap, rbwDir, lazyWriteReplicaMap,\n          false, exceptions, subTaskQueue);\n      ForkJoinTask<Void> rbwTask = addReplicaThreadPool.submit(task);\n\n      try {\n        finalizedTask.get();\n        rbwTask.get();\n      } catch (InterruptedException | ExecutionException e) {\n        exceptions.add(new IOException(\n            \"Failed to start sub tasks to add replica in replica map :\"\n                + e.getMessage()));\n      }\n\n      //wait for all the tasks to finish.\n      waitForSubTaskToFinish(subTaskQueue, exceptions);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44ca189138a5b6e1989d12ab992fab60e235ddc7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44ca189138a5b6e1989d12ab992fab60e235ddc7"],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}