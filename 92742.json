{"path":"src/java/org/apache/solr/core/PluginInfo#loadSubPlugins(Node).mjava","commits":[{"id":"6a7153c5cd4b2cd8054f8e46101442030d8a3c37","date":1253512682,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/PluginInfo#loadSubPlugins(Node).mjava","pathOld":"/dev/null","sourceNew":"  private List<PluginInfo> loadSubPlugins(Node node) {\r\n    List<PluginInfo> children = null;\r\n    try {\r\n      //if there is another sub tag with a 'class' attribute that has to be another plugin\r\n      NodeList nodes = (NodeList) Config.xpathFactory.newXPath().evaluate(\"*[@class]\",node, XPathConstants.NODESET);\r\n      if(nodes.getLength() > 0){\r\n        children = new ArrayList<PluginInfo>(nodes.getLength());\r\n        for (int i=0; i<nodes.getLength(); i++) {\r\n          PluginInfo pluginInfo = new PluginInfo(nodes.item(i), null, false, false);\r\n          if (pluginInfo.isEnabled()) children.add(pluginInfo);\r\n        }\r\n      }\r\n    } catch (XPathExpressionException e) { }\r\n    return children == null ? Collections.<PluginInfo>emptyList(): unmodifiableList(children);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"253df85e347f27dca96300344dd8843427b5fa0c","date":1262669907,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/PluginInfo#loadSubPlugins(Node).mjava","pathOld":"src/java/org/apache/solr/core/PluginInfo#loadSubPlugins(Node).mjava","sourceNew":"  private List<PluginInfo> loadSubPlugins(Node node) {\r\n    List<PluginInfo> children = new ArrayList<PluginInfo>();\r\n    //if there is another sub tag with a non namedlist tag that has to be another plugin\r\n    NodeList nlst = node.getChildNodes();\r\n    for (int i = 0; i < nlst.getLength(); i++) {\r\n      Node nd = nlst.item(i);\r\n      if (nd.getNodeType() != Node.ELEMENT_NODE) continue;\r\n      if (NL_TAGS.contains(nd.getNodeName())) continue;\r\n      PluginInfo pluginInfo = new PluginInfo(nd, null, false, false);\r\n      if (pluginInfo.isEnabled()) children.add(pluginInfo);\r\n    }\r\n    return children.isEmpty() ? Collections.<PluginInfo>emptyList() : unmodifiableList(children);\r\n  }\r\n\n","sourceOld":"  private List<PluginInfo> loadSubPlugins(Node node) {\r\n    List<PluginInfo> children = null;\r\n    try {\r\n      //if there is another sub tag with a 'class' attribute that has to be another plugin\r\n      NodeList nodes = (NodeList) Config.xpathFactory.newXPath().evaluate(\"*[@class]\",node, XPathConstants.NODESET);\r\n      if(nodes.getLength() > 0){\r\n        children = new ArrayList<PluginInfo>(nodes.getLength());\r\n        for (int i=0; i<nodes.getLength(); i++) {\r\n          PluginInfo pluginInfo = new PluginInfo(nodes.item(i), null, false, false);\r\n          if (pluginInfo.isEnabled()) children.add(pluginInfo);\r\n        }\r\n      }\r\n    } catch (XPathExpressionException e) { }\r\n    return children == null ? Collections.<PluginInfo>emptyList(): unmodifiableList(children);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ec88b8391cee0c2a1037c6dbf75623a1773188f","date":1263001848,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/core/PluginInfo#loadSubPlugins(Node).mjava","pathOld":"src/java/org/apache/solr/core/PluginInfo#loadSubPlugins(Node).mjava","sourceNew":"  private List<PluginInfo> loadSubPlugins(Node node) {\n    List<PluginInfo> children = new ArrayList<PluginInfo>();\n    //if there is another sub tag with a non namedlist tag that has to be another plugin\n    NodeList nlst = node.getChildNodes();\n    for (int i = 0; i < nlst.getLength(); i++) {\n      Node nd = nlst.item(i);\n      if (nd.getNodeType() != Node.ELEMENT_NODE) continue;\n      if (NL_TAGS.contains(nd.getNodeName())) continue;\n      PluginInfo pluginInfo = new PluginInfo(nd, null, false, false);\n      if (pluginInfo.isEnabled()) children.add(pluginInfo);\n    }\n    return children.isEmpty() ? Collections.<PluginInfo>emptyList() : unmodifiableList(children);\n  }\n\n","sourceOld":"  private List<PluginInfo> loadSubPlugins(Node node) {\r\n    List<PluginInfo> children = new ArrayList<PluginInfo>();\r\n    //if there is another sub tag with a non namedlist tag that has to be another plugin\r\n    NodeList nlst = node.getChildNodes();\r\n    for (int i = 0; i < nlst.getLength(); i++) {\r\n      Node nd = nlst.item(i);\r\n      if (nd.getNodeType() != Node.ELEMENT_NODE) continue;\r\n      if (NL_TAGS.contains(nd.getNodeName())) continue;\r\n      PluginInfo pluginInfo = new PluginInfo(nd, null, false, false);\r\n      if (pluginInfo.isEnabled()) children.add(pluginInfo);\r\n    }\r\n    return children.isEmpty() ? Collections.<PluginInfo>emptyList() : unmodifiableList(children);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/PluginInfo#loadSubPlugins(Node).mjava","pathOld":"src/java/org/apache/solr/core/PluginInfo#loadSubPlugins(Node).mjava","sourceNew":"  private List<PluginInfo> loadSubPlugins(Node node) {\n    List<PluginInfo> children = new ArrayList<PluginInfo>();\n    //if there is another sub tag with a non namedlist tag that has to be another plugin\n    NodeList nlst = node.getChildNodes();\n    for (int i = 0; i < nlst.getLength(); i++) {\n      Node nd = nlst.item(i);\n      if (nd.getNodeType() != Node.ELEMENT_NODE) continue;\n      if (NL_TAGS.contains(nd.getNodeName())) continue;\n      PluginInfo pluginInfo = new PluginInfo(nd, null, false, false);\n      if (pluginInfo.isEnabled()) children.add(pluginInfo);\n    }\n    return children.isEmpty() ? Collections.<PluginInfo>emptyList() : unmodifiableList(children);\n  }\n\n","sourceOld":"  private List<PluginInfo> loadSubPlugins(Node node) {\n    List<PluginInfo> children = new ArrayList<PluginInfo>();\n    //if there is another sub tag with a non namedlist tag that has to be another plugin\n    NodeList nlst = node.getChildNodes();\n    for (int i = 0; i < nlst.getLength(); i++) {\n      Node nd = nlst.item(i);\n      if (nd.getNodeType() != Node.ELEMENT_NODE) continue;\n      if (NL_TAGS.contains(nd.getNodeName())) continue;\n      PluginInfo pluginInfo = new PluginInfo(nd, null, false, false);\n      if (pluginInfo.isEnabled()) children.add(pluginInfo);\n    }\n    return children.isEmpty() ? Collections.<PluginInfo>emptyList() : unmodifiableList(children);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6ec88b8391cee0c2a1037c6dbf75623a1773188f":["253df85e347f27dca96300344dd8843427b5fa0c"],"6a7153c5cd4b2cd8054f8e46101442030d8a3c37":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"253df85e347f27dca96300344dd8843427b5fa0c":["6a7153c5cd4b2cd8054f8e46101442030d8a3c37"],"ad94625fb8d088209f46650c8097196fec67f00c":["6ec88b8391cee0c2a1037c6dbf75623a1773188f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6ec88b8391cee0c2a1037c6dbf75623a1773188f":["ad94625fb8d088209f46650c8097196fec67f00c"],"6a7153c5cd4b2cd8054f8e46101442030d8a3c37":["253df85e347f27dca96300344dd8843427b5fa0c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6a7153c5cd4b2cd8054f8e46101442030d8a3c37"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"253df85e347f27dca96300344dd8843427b5fa0c":["6ec88b8391cee0c2a1037c6dbf75623a1773188f"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}