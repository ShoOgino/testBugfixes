{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","commits":[{"id":"5238b7e551c27d6d8b882878a8f8b114bd79f1b5","date":1421397215,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds);\n    String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    childId = childrenIds.get(1);\n    description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    grandChildrenIds.addAll(grandChildrenIds2);\n    \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    runFullImport(threeLevelHierarchyConfig);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6cb8710f6d015cfc0426553432b3dfab52a42fae","date":1421421100,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","sourceNew":"  @Test\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds, random());\n    String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    childId = childrenIds.get(1);\n    description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    grandChildrenIds.addAll(grandChildrenIds2);\n    \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    runFullImport(threeLevelHierarchyConfig);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","sourceOld":"  @Test\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds);\n    String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    childId = childrenIds.get(1);\n    description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    grandChildrenIds.addAll(grandChildrenIds2);\n    \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    runFullImport(threeLevelHierarchyConfig);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","sourceNew":"  @Test\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds, random());\n    String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    childId = childrenIds.get(1);\n    description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    grandChildrenIds.addAll(grandChildrenIds2);\n    \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    runFullImport(THREE_LEVEL_HIERARCHY_CONFIG);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","sourceOld":"  @Test\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds, random());\n    String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    childId = childrenIds.get(1);\n    description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    grandChildrenIds.addAll(grandChildrenIds2);\n    \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    runFullImport(threeLevelHierarchyConfig);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","sourceNew":"  @Test\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds, random());\n    String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    childId = childrenIds.get(1);\n    description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    grandChildrenIds.addAll(grandChildrenIds2);\n    \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    runFullImport(THREE_LEVEL_HIERARCHY_CONFIG);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","sourceOld":"  @Test\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds, random());\n    String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    childId = childrenIds.get(1);\n    description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    grandChildrenIds.addAll(grandChildrenIds2);\n    \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    runFullImport(threeLevelHierarchyConfig);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbbf9e0df46fb025a7537897baadee4f464f1cc1","date":1496515012,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","sourceNew":"  @Test\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds, random());\n    final String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    final String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    {\n      String childId2 = childrenIds.get(1);\n      description = \"grandchild of first parent, child of \" + childId2 + \" child\";\n      select = \"select * from GRANDCHILD where parent_id='\" + childId2 + \"'\";\n    }\n    final List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    List<String> allGrandChildrenIds = new ArrayList<>(grandChildrenIds);\n    allGrandChildrenIds.addAll(grandChildrenIds2);\n        \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    String resp = runFullImport(THREE_LEVEL_HIERARCHY_CONFIG);\n    String xpath = \"//arr[@name='documents']/lst/arr[@name='id' and .='\"+parentId1+\"']/../\"+\n      \"arr[@name='_childDocuments_']/lst/arr[@name='id' and .='\"+childId+\"']/../\"+\n      \"arr[@name='_childDocuments_']/lst/arr[@name='id' and .='\"+grandChildrenIds.get(0)+\"']\";\n    String results = TestHarness.validateXPath(resp, \n           xpath);\n    assertTrue(\"Debug documents does not contain child documents\\n\"+resp+\"\\n\"+ xpath+\n                                                        \"\\n\"+results, results == null);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = allGrandChildrenIds.get(random().nextInt(allGrandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","sourceOld":"  @Test\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds, random());\n    String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    childId = childrenIds.get(1);\n    description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    grandChildrenIds.addAll(grandChildrenIds2);\n    \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    runFullImport(THREE_LEVEL_HIERARCHY_CONFIG);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","sourceNew":"  @Test\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds, random());\n    final String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    final String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    {\n      String childId2 = childrenIds.get(1);\n      description = \"grandchild of first parent, child of \" + childId2 + \" child\";\n      select = \"select * from GRANDCHILD where parent_id='\" + childId2 + \"'\";\n    }\n    final List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    List<String> allGrandChildrenIds = new ArrayList<>(grandChildrenIds);\n    allGrandChildrenIds.addAll(grandChildrenIds2);\n        \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    String resp = runFullImport(THREE_LEVEL_HIERARCHY_CONFIG);\n    String xpath = \"//arr[@name='documents']/lst/arr[@name='id' and .='\"+parentId1+\"']/../\"+\n      \"arr[@name='_childDocuments_']/lst/arr[@name='id' and .='\"+childId+\"']/../\"+\n      \"arr[@name='_childDocuments_']/lst/arr[@name='id' and .='\"+grandChildrenIds.get(0)+\"']\";\n    String results = TestHarness.validateXPath(resp, \n           xpath);\n    assertTrue(\"Debug documents does not contain child documents\\n\"+resp+\"\\n\"+ xpath+\n                                                        \"\\n\"+results, results == null);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = allGrandChildrenIds.get(random().nextInt(allGrandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","sourceOld":"  @Test\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds, random());\n    String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    childId = childrenIds.get(1);\n    description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    grandChildrenIds.addAll(grandChildrenIds2);\n    \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    runFullImport(THREE_LEVEL_HIERARCHY_CONFIG);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","sourceNew":"  @Test\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds, random());\n    final String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    final String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    {\n      String childId2 = childrenIds.get(1);\n      description = \"grandchild of first parent, child of \" + childId2 + \" child\";\n      select = \"select * from GRANDCHILD where parent_id='\" + childId2 + \"'\";\n    }\n    final List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    List<String> allGrandChildrenIds = new ArrayList<>(grandChildrenIds);\n    allGrandChildrenIds.addAll(grandChildrenIds2);\n        \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    String resp = runFullImport(THREE_LEVEL_HIERARCHY_CONFIG);\n    String xpath = \"//arr[@name='documents']/lst/arr[@name='id' and .='\"+parentId1+\"']/../\"+\n      \"arr[@name='_childDocuments_']/lst/arr[@name='id' and .='\"+childId+\"']/../\"+\n      \"arr[@name='_childDocuments_']/lst/arr[@name='id' and .='\"+grandChildrenIds.get(0)+\"']\";\n    String results = TestHarness.validateXPath(resp, \n           xpath);\n    assertTrue(\"Debug documents does not contain child documents\\n\"+resp+\"\\n\"+ xpath+\n                                                        \"\\n\"+results, results == null);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = allGrandChildrenIds.get(random().nextInt(allGrandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","sourceOld":"  @Test\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds, random());\n    String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    childId = childrenIds.get(1);\n    description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    grandChildrenIds.addAll(grandChildrenIds2);\n    \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    runFullImport(THREE_LEVEL_HIERARCHY_CONFIG);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","sourceNew":"  @Test\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds, random());\n    final String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    final String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    {\n      String childId2 = childrenIds.get(1);\n      description = \"grandchild of first parent, child of \" + childId2 + \" child\";\n      select = \"select * from GRANDCHILD where parent_id='\" + childId2 + \"'\";\n    }\n    final List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    List<String> allGrandChildrenIds = new ArrayList<>(grandChildrenIds);\n    allGrandChildrenIds.addAll(grandChildrenIds2);\n        \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    String resp = runFullImport(THREE_LEVEL_HIERARCHY_CONFIG);\n    String xpath = \"//arr[@name='documents']/lst[arr[@name='id']/str='\"+parentId1+\"']/\"+\n      \"arr[@name='_childDocuments_']/lst[arr[@name='id']/str='\"+childId+\"']/\"+\n      \"arr[@name='_childDocuments_']/lst[arr[@name='id']/str='\"+grandChildrenIds.get(0)+\"']\";\n    String results = TestHarness.validateXPath(resp, \n           xpath);\n    assertTrue(\"Debug documents does not contain child documents\\n\"+resp+\"\\n\"+ xpath+\n                                                        \"\\n\"+results, results == null);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = allGrandChildrenIds.get(random().nextInt(allGrandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","sourceOld":"  @Test\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds, random());\n    final String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    final String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    {\n      String childId2 = childrenIds.get(1);\n      description = \"grandchild of first parent, child of \" + childId2 + \" child\";\n      select = \"select * from GRANDCHILD where parent_id='\" + childId2 + \"'\";\n    }\n    final List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    List<String> allGrandChildrenIds = new ArrayList<>(grandChildrenIds);\n    allGrandChildrenIds.addAll(grandChildrenIds2);\n        \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    String resp = runFullImport(THREE_LEVEL_HIERARCHY_CONFIG);\n    String xpath = \"//arr[@name='documents']/lst/arr[@name='id' and .='\"+parentId1+\"']/../\"+\n      \"arr[@name='_childDocuments_']/lst/arr[@name='id' and .='\"+childId+\"']/../\"+\n      \"arr[@name='_childDocuments_']/lst/arr[@name='id' and .='\"+grandChildrenIds.get(0)+\"']\";\n    String results = TestHarness.validateXPath(resp, \n           xpath);\n    assertTrue(\"Debug documents does not contain child documents\\n\"+resp+\"\\n\"+ xpath+\n                                                        \"\\n\"+results, results == null);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = allGrandChildrenIds.get(random().nextInt(allGrandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","sourceNew":"  @Test\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds, random());\n    final String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    final String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    {\n      String childId2 = childrenIds.get(1);\n      description = \"grandchild of first parent, child of \" + childId2 + \" child\";\n      select = \"select * from GRANDCHILD where parent_id='\" + childId2 + \"'\";\n    }\n    final List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    List<String> allGrandChildrenIds = new ArrayList<>(grandChildrenIds);\n    allGrandChildrenIds.addAll(grandChildrenIds2);\n        \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    String resp = runFullImport(THREE_LEVEL_HIERARCHY_CONFIG);\n    String xpath = \"//arr[@name='documents']/lst[arr[@name='id']/str='\"+parentId1+\"']/\"+\n      \"arr[@name='_childDocuments_']/lst[arr[@name='id']/str='\"+childId+\"']/\"+\n      \"arr[@name='_childDocuments_']/lst[arr[@name='id']/str='\"+grandChildrenIds.get(0)+\"']\";\n    String results = TestHarness.validateXPath(resp, \n           xpath);\n    assertTrue(\"Debug documents does not contain child documents\\n\"+resp+\"\\n\"+ xpath+\n                                                        \"\\n\"+results, results == null);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = allGrandChildrenIds.get(random().nextInt(allGrandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","sourceOld":"  @Test\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds, random());\n    final String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    final String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    {\n      String childId2 = childrenIds.get(1);\n      description = \"grandchild of first parent, child of \" + childId2 + \" child\";\n      select = \"select * from GRANDCHILD where parent_id='\" + childId2 + \"'\";\n    }\n    final List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    List<String> allGrandChildrenIds = new ArrayList<>(grandChildrenIds);\n    allGrandChildrenIds.addAll(grandChildrenIds2);\n        \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    String resp = runFullImport(THREE_LEVEL_HIERARCHY_CONFIG);\n    String xpath = \"//arr[@name='documents']/lst/arr[@name='id' and .='\"+parentId1+\"']/../\"+\n      \"arr[@name='_childDocuments_']/lst/arr[@name='id' and .='\"+childId+\"']/../\"+\n      \"arr[@name='_childDocuments_']/lst/arr[@name='id' and .='\"+grandChildrenIds.get(0)+\"']\";\n    String results = TestHarness.validateXPath(resp, \n           xpath);\n    assertTrue(\"Debug documents does not contain child documents\\n\"+resp+\"\\n\"+ xpath+\n                                                        \"\\n\"+results, results == null);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = allGrandChildrenIds.get(random().nextInt(allGrandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","sourceNew":"  @Test\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds, random());\n    final String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    final String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    {\n      String childId2 = childrenIds.get(1);\n      description = \"grandchild of first parent, child of \" + childId2 + \" child\";\n      select = \"select * from GRANDCHILD where parent_id='\" + childId2 + \"'\";\n    }\n    final List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    List<String> allGrandChildrenIds = new ArrayList<>(grandChildrenIds);\n    allGrandChildrenIds.addAll(grandChildrenIds2);\n        \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    String resp = runFullImport(THREE_LEVEL_HIERARCHY_CONFIG);\n    String xpath = \"//arr[@name='documents']/lst[arr[@name='id']/str='\"+parentId1+\"']/\"+\n      \"arr[@name='_childDocuments_']/lst[arr[@name='id']/str='\"+childId+\"']/\"+\n      \"arr[@name='_childDocuments_']/lst[arr[@name='id']/str='\"+grandChildrenIds.get(0)+\"']\";\n    String results = TestHarness.validateXPath(resp, \n           xpath);\n    assertTrue(\"Debug documents does not contain child documents\\n\"+resp+\"\\n\"+ xpath+\n                                                        \"\\n\"+results, results == null);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = allGrandChildrenIds.get(random().nextInt(allGrandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","sourceOld":"  @Test\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds, random());\n    final String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    final String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    {\n      String childId2 = childrenIds.get(1);\n      description = \"grandchild of first parent, child of \" + childId2 + \" child\";\n      select = \"select * from GRANDCHILD where parent_id='\" + childId2 + \"'\";\n    }\n    final List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    List<String> allGrandChildrenIds = new ArrayList<>(grandChildrenIds);\n    allGrandChildrenIds.addAll(grandChildrenIds2);\n        \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    String resp = runFullImport(THREE_LEVEL_HIERARCHY_CONFIG);\n    String xpath = \"//arr[@name='documents']/lst/arr[@name='id' and .='\"+parentId1+\"']/../\"+\n      \"arr[@name='_childDocuments_']/lst/arr[@name='id' and .='\"+childId+\"']/../\"+\n      \"arr[@name='_childDocuments_']/lst/arr[@name='id' and .='\"+grandChildrenIds.get(0)+\"']\";\n    String results = TestHarness.validateXPath(resp, \n           xpath);\n    assertTrue(\"Debug documents does not contain child documents\\n\"+resp+\"\\n\"+ xpath+\n                                                        \"\\n\"+results, results == null);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = allGrandChildrenIds.get(random().nextInt(allGrandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20a4382cd55202d02f6c573bdb51aa1d3bdb8434","date":1544529926,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12801\") // this test fails easily under beasting\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds, random());\n    final String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    final String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    {\n      String childId2 = childrenIds.get(1);\n      description = \"grandchild of first parent, child of \" + childId2 + \" child\";\n      select = \"select * from GRANDCHILD where parent_id='\" + childId2 + \"'\";\n    }\n    final List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    List<String> allGrandChildrenIds = new ArrayList<>(grandChildrenIds);\n    allGrandChildrenIds.addAll(grandChildrenIds2);\n        \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    String resp = runFullImport(THREE_LEVEL_HIERARCHY_CONFIG);\n    String xpath = \"//arr[@name='documents']/lst[arr[@name='id']/str='\"+parentId1+\"']/\"+\n      \"arr[@name='_childDocuments_']/lst[arr[@name='id']/str='\"+childId+\"']/\"+\n      \"arr[@name='_childDocuments_']/lst[arr[@name='id']/str='\"+grandChildrenIds.get(0)+\"']\";\n    String results = TestHarness.validateXPath(resp, \n           xpath);\n    assertTrue(\"Debug documents does not contain child documents\\n\"+resp+\"\\n\"+ xpath+\n                                                        \"\\n\"+results, results == null);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = allGrandChildrenIds.get(random().nextInt(allGrandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","sourceOld":"  @Test\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds, random());\n    final String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    final String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    {\n      String childId2 = childrenIds.get(1);\n      description = \"grandchild of first parent, child of \" + childId2 + \" child\";\n      select = \"select * from GRANDCHILD where parent_id='\" + childId2 + \"'\";\n    }\n    final List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    List<String> allGrandChildrenIds = new ArrayList<>(grandChildrenIds);\n    allGrandChildrenIds.addAll(grandChildrenIds2);\n        \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    String resp = runFullImport(THREE_LEVEL_HIERARCHY_CONFIG);\n    String xpath = \"//arr[@name='documents']/lst[arr[@name='id']/str='\"+parentId1+\"']/\"+\n      \"arr[@name='_childDocuments_']/lst[arr[@name='id']/str='\"+childId+\"']/\"+\n      \"arr[@name='_childDocuments_']/lst[arr[@name='id']/str='\"+grandChildrenIds.get(0)+\"']\";\n    String results = TestHarness.validateXPath(resp, \n           xpath);\n    assertTrue(\"Debug documents does not contain child documents\\n\"+resp+\"\\n\"+ xpath+\n                                                        \"\\n\"+results, results == null);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = allGrandChildrenIds.get(random().nextInt(allGrandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testThreeLevelHierarchy().mjava","sourceNew":null,"sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12801\") // this test fails easily under beasting\n  public void testThreeLevelHierarchy() throws Exception {\n    int parentsNum = 3; //fixed for simplicity of test\n    int childrenNum = 0;\n    int grandChildrenNum = 0;\n    \n    final String parentType = \"parent\";\n    final String childType = \"child\";\n    final String grandChildType = \"grand_child\";\n\n    List<String> parentIds = createDataIterator(\"select * from PARENT\", parentType, parentType, parentsNum);\n    Collections.shuffle(parentIds, random());\n    final String parentId1 = parentIds.get(0);\n    String parentId2 = parentIds.get(1);\n    \n    //parent 1 children\n    int firstParentChildrenNum = 3; //fixed for simplicity of test\n    String select = \"select * from CHILD where parent_id='\" + parentId1 + \"'\";\n    List<String> childrenIds = createDataIterator(select, childType, \"child of first parent\", firstParentChildrenNum);\n    List<String> firstParentChildrenIds = new ArrayList<String>(childrenIds);\n    childrenNum += childrenIds.size();\n    \n    // grand children of first parent first child\n    final String childId = childrenIds.get(0);\n    String description = \"grandchild of first parent, child of \" + childId + \" child\";\n    select = \"select * from GRANDCHILD where parent_id='\" + childId + \"'\";\n    List<String> grandChildrenIds = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds.size();\n    \n    // grand children of first parent second child\n    {\n      String childId2 = childrenIds.get(1);\n      description = \"grandchild of first parent, child of \" + childId2 + \" child\";\n      select = \"select * from GRANDCHILD where parent_id='\" + childId2 + \"'\";\n    }\n    final List<String> grandChildrenIds2 = createDataIterator(select, grandChildType, description, atLeast(2));\n    grandChildrenNum += grandChildrenIds2.size();\n    \n    List<String> allGrandChildrenIds = new ArrayList<>(grandChildrenIds);\n    allGrandChildrenIds.addAll(grandChildrenIds2);\n        \n    // third children of first parent has no grand children\n    \n    // parent 2 children (no grand children)   \n    select = \"select * from CHILD where parent_id='\" + parentId2 + \"'\";\n    childrenIds = createDataIterator(select, childType, \"child of second parent\", atLeast(2));\n    childrenNum += childrenIds.size();\n    \n    // parent 3 has no children and grand children\n    \n    int totalDocsNum = parentsNum + childrenNum + grandChildrenNum;\n    \n    String resp = runFullImport(THREE_LEVEL_HIERARCHY_CONFIG);\n    String xpath = \"//arr[@name='documents']/lst[arr[@name='id']/str='\"+parentId1+\"']/\"+\n      \"arr[@name='_childDocuments_']/lst[arr[@name='id']/str='\"+childId+\"']/\"+\n      \"arr[@name='_childDocuments_']/lst[arr[@name='id']/str='\"+grandChildrenIds.get(0)+\"']\";\n    String results = TestHarness.validateXPath(resp, \n           xpath);\n    assertTrue(\"Debug documents does not contain child documents\\n\"+resp+\"\\n\"+ xpath+\n                                                        \"\\n\"+results, results == null);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    // very simple asserts to check that we at least have correct num of docs indexed\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + totalDocsNum + \"']\");\n    assertQ(req(\"type_s:parent\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"type_s:child\"), \"//*[@numFound='\" + childrenNum + \"']\");\n    assertQ(req(\"type_s:grand_child\"), \"//*[@numFound='\" + grandChildrenNum + \"']\");\n\n    // let's check BlockJoin\n    // get first parent by any grand children\n    String randomGrandChildId = allGrandChildrenIds.get(random().nextInt(allGrandChildrenIds.size()));\n    Query query = createToParentQuery(parentType, FIELD_ID, randomGrandChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n\n    // get first parent by any children \n    String randomChildId = firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));\n    query = createToParentQuery(parentType, FIELD_ID, randomChildId);\n    assertSearch(query, FIELD_ID, parentId1);\n    \n    // get parent by children by grand children\n    randomGrandChildId = grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));\n    ToParentBlockJoinQuery childBlockJoinQuery = createToParentQuery(childType, FIELD_ID, randomGrandChildId);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(childBlockJoinQuery, createParentFilter(parentType), ScoreMode.Avg);\n    assertSearch(blockJoinQuery, FIELD_ID, parentId1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bbbf9e0df46fb025a7537897baadee4f464f1cc1":["5de502b5478255493125e7e801411ba17a6682ec"],"5de502b5478255493125e7e801411ba17a6682ec":["6cb8710f6d015cfc0426553432b3dfab52a42fae"],"5238b7e551c27d6d8b882878a8f8b114bd79f1b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20a4382cd55202d02f6c573bdb51aa1d3bdb8434":["a52341299179de5479672f7cf518bf4b173f34b3"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["6cb8710f6d015cfc0426553432b3dfab52a42fae"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["e9017cf144952056066919f1ebc7897ff9bd71b1","ac1e7fa558287a811ea07634d815ee7b1c541284"],"28288370235ed02234a64753cdbf0c6ec096304a":["5de502b5478255493125e7e801411ba17a6682ec","bbbf9e0df46fb025a7537897baadee4f464f1cc1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["6f20fd35e3055a0c5b387df0b986a68d65d86441","bbbf9e0df46fb025a7537897baadee4f464f1cc1"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["20a4382cd55202d02f6c573bdb51aa1d3bdb8434"],"a52341299179de5479672f7cf518bf4b173f34b3":["28288370235ed02234a64753cdbf0c6ec096304a","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6cb8710f6d015cfc0426553432b3dfab52a42fae":["5238b7e551c27d6d8b882878a8f8b114bd79f1b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"bbbf9e0df46fb025a7537897baadee4f464f1cc1":["28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"5de502b5478255493125e7e801411ba17a6682ec":["bbbf9e0df46fb025a7537897baadee4f464f1cc1","28288370235ed02234a64753cdbf0c6ec096304a"],"5238b7e551c27d6d8b882878a8f8b114bd79f1b5":["6cb8710f6d015cfc0426553432b3dfab52a42fae"],"20a4382cd55202d02f6c573bdb51aa1d3bdb8434":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"28288370235ed02234a64753cdbf0c6ec096304a":["a52341299179de5479672f7cf518bf4b173f34b3","ac1e7fa558287a811ea07634d815ee7b1c541284"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"a52341299179de5479672f7cf518bf4b173f34b3":["20a4382cd55202d02f6c573bdb51aa1d3bdb8434"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5238b7e551c27d6d8b882878a8f8b114bd79f1b5"],"6cb8710f6d015cfc0426553432b3dfab52a42fae":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}