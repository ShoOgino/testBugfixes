{"path":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","commits":[{"id":"979e22aa7c63c9dc651adf861610c7e444d45832","date":1454615713,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","pathOld":"/dev/null","sourceNew":"  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    long start = System.currentTimeMillis();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxInHash = Math.max(v, f.maxInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    log.info(\"IndexFingerprint millis:\" + (end-start) + \" result:\" + f);\n\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"284f80394e6698018f973e9d76a8efc5f53e3363","date":1454627243,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","sourceNew":"  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxInHash = Math.max(v, f.maxInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    final double duration = timer.stop();\n    log.info(\"IndexFingerprint millis:\" + duration + \" result:\" + f);\n\n    return f;\n  }\n\n","sourceOld":"  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    long start = System.currentTimeMillis();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxInHash = Math.max(v, f.maxInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    log.info(\"IndexFingerprint millis:\" + (end-start) + \" result:\" + f);\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1704c078ec59838c9d95d5bf5738b393b537494","date":1454693901,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","pathOld":"/dev/null","sourceNew":"  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxInHash = Math.max(v, f.maxInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    final double duration = timer.stop();\n    log.info(\"IndexFingerprint millis:\" + duration + \" result:\" + f);\n\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","pathOld":"/dev/null","sourceNew":"  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxInHash = Math.max(v, f.maxInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    final double duration = timer.stop();\n    log.info(\"IndexFingerprint millis:\" + duration + \" result:\" + f);\n\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58fec4cc4751826a310393076ec744b4e159eb33","date":1456164038,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","sourceNew":"  /** Calculates an index fingerprint */\n  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxInHash = Math.max(v, f.maxInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    final double duration = timer.stop();\n    log.info(\"IndexFingerprint millis:\" + duration + \" result:\" + f);\n\n    return f;\n  }\n\n","sourceOld":"  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxInHash = Math.max(v, f.maxInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    final double duration = timer.stop();\n    log.info(\"IndexFingerprint millis:\" + duration + \" result:\" + f);\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","sourceNew":"  /** Calculates an index fingerprint */\n  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxInHash = Math.max(v, f.maxInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    final double duration = timer.stop();\n    log.info(\"IndexFingerprint millis:\" + duration + \" result:\" + f);\n\n    return f;\n  }\n\n","sourceOld":"  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxInHash = Math.max(v, f.maxInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    final double duration = timer.stop();\n    log.info(\"IndexFingerprint millis:\" + duration + \" result:\" + f);\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40d106815d60946d1ff638c0aaef65ecda4722ca","date":1469429102,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","sourceNew":"  /** Calculates an index fingerprint */\n  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxVersionsUsedInHash = Math.max(v, f.maxVersionsUsedInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    final double duration = timer.stop();\n    log.info(\"IndexFingerprint millis:\" + duration + \" result:\" + f);\n\n    return f;\n  }\n\n","sourceOld":"  /** Calculates an index fingerprint */\n  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxInHash = Math.max(v, f.maxInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    final double duration = timer.stop();\n    log.info(\"IndexFingerprint millis:\" + duration + \" result:\" + f);\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dd076b6b2e140fa535b24a16a76ccde5f330322","date":1469429946,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","sourceNew":"  /** Calculates an index fingerprint */\n  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxInHash = Math.max(v, f.maxInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    final double duration = timer.stop();\n    log.info(\"IndexFingerprint millis:\" + duration + \" result:\" + f);\n\n    return f;\n  }\n\n","sourceOld":"  /** Calculates an index fingerprint */\n  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxVersionsUsedInHash = Math.max(v, f.maxVersionsUsedInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    final double duration = timer.stop();\n    log.info(\"IndexFingerprint millis:\" + duration + \" result:\" + f);\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05569170a222447d3aec8fad773feedf4429fdd5","date":1476800012,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,LeafReaderContext,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","sourceNew":"  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, LeafReaderContext ctx, Long maxVersion)\n      throws IOException {\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    \n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = ctx.reader().maxDoc();\n    f.numDocs = ctx.reader().numDocs();\n    \n    int maxDoc = ctx.reader().maxDoc();\n    Bits liveDocs = ctx.reader().getLiveDocs();\n    FunctionValues fv = vs.getValues(funcContext, ctx);\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (liveDocs != null && !liveDocs.get(doc)) continue;\n      long v = fv.longVal(doc);\n      f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n      if (v <= f.maxVersionSpecified) {\n        f.maxInHash = Math.max(v, f.maxInHash);\n        f.versionsHash += Hash.fmix64(v);\n        f.numVersions++;\n      }\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  /** Calculates an index fingerprint */\n  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxInHash = Math.max(v, f.maxInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    final double duration = timer.stop();\n    log.info(\"IndexFingerprint millis:\" + duration + \" result:\" + f);\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b437b84da5e49daf1197c9cd533015490cdcb2c2","date":1476818430,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,LeafReaderContext,Long).mjava","sourceNew":"  /** Calculates an index fingerprint */\n  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxInHash = Math.max(v, f.maxInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    final double duration = timer.stop();\n    log.info(\"IndexFingerprint millis:\" + duration + \" result:\" + f);\n\n    return f;\n  }\n\n","sourceOld":"  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, LeafReaderContext ctx, Long maxVersion)\n      throws IOException {\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    \n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = ctx.reader().maxDoc();\n    f.numDocs = ctx.reader().numDocs();\n    \n    int maxDoc = ctx.reader().maxDoc();\n    Bits liveDocs = ctx.reader().getLiveDocs();\n    FunctionValues fv = vs.getValues(funcContext, ctx);\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (liveDocs != null && !liveDocs.get(doc)) continue;\n      long v = fv.longVal(doc);\n      f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n      if (v <= f.maxVersionSpecified) {\n        f.maxInHash = Math.max(v, f.maxInHash);\n        f.versionsHash += Hash.fmix64(v);\n        f.numVersions++;\n      }\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b11122ff28c20e6e4e02cb1366eaa029a92f69ce","date":1477307742,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,LeafReaderContext,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","sourceNew":"  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, LeafReaderContext ctx, Long maxVersion)\n      throws IOException {\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    \n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = ctx.reader().maxDoc();\n    f.numDocs = ctx.reader().numDocs();\n    \n    int maxDoc = ctx.reader().maxDoc();\n    Bits liveDocs = ctx.reader().getLiveDocs();\n    FunctionValues fv = vs.getValues(funcContext, ctx);\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (liveDocs != null && !liveDocs.get(doc)) continue;\n      long v = fv.longVal(doc);\n      f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n      if (v <= f.maxVersionSpecified) {\n        f.maxInHash = Math.max(v, f.maxInHash);\n        f.versionsHash += Hash.fmix64(v);\n        f.numVersions++;\n      }\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  /** Calculates an index fingerprint */\n  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxInHash = Math.max(v, f.maxInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    final double duration = timer.stop();\n    log.info(\"IndexFingerprint millis:\" + duration + \" result:\" + f);\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,LeafReaderContext,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","sourceNew":"  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, LeafReaderContext ctx, Long maxVersion)\n      throws IOException {\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    \n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = ctx.reader().maxDoc();\n    f.numDocs = ctx.reader().numDocs();\n    \n    int maxDoc = ctx.reader().maxDoc();\n    Bits liveDocs = ctx.reader().getLiveDocs();\n    FunctionValues fv = vs.getValues(funcContext, ctx);\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (liveDocs != null && !liveDocs.get(doc)) continue;\n      long v = fv.longVal(doc);\n      f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n      if (v <= f.maxVersionSpecified) {\n        f.maxInHash = Math.max(v, f.maxInHash);\n        f.versionsHash += Hash.fmix64(v);\n        f.numVersions++;\n      }\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  /** Calculates an index fingerprint */\n  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxInHash = Math.max(v, f.maxInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    final double duration = timer.stop();\n    log.info(\"IndexFingerprint millis:\" + duration + \" result:\" + f);\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","284f80394e6698018f973e9d76a8efc5f53e3363"],"419a8f52c6635419beb951255cacbbb281044c57":["284f80394e6698018f973e9d76a8efc5f53e3363","58fec4cc4751826a310393076ec744b4e159eb33"],"05569170a222447d3aec8fad773feedf4429fdd5":["9dd076b6b2e140fa535b24a16a76ccde5f330322"],"b11122ff28c20e6e4e02cb1366eaa029a92f69ce":["b437b84da5e49daf1197c9cd533015490cdcb2c2"],"b437b84da5e49daf1197c9cd533015490cdcb2c2":["05569170a222447d3aec8fad773feedf4429fdd5"],"58fec4cc4751826a310393076ec744b4e159eb33":["284f80394e6698018f973e9d76a8efc5f53e3363"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["419a8f52c6635419beb951255cacbbb281044c57","b11122ff28c20e6e4e02cb1366eaa029a92f69ce"],"979e22aa7c63c9dc651adf861610c7e444d45832":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"284f80394e6698018f973e9d76a8efc5f53e3363":["979e22aa7c63c9dc651adf861610c7e444d45832"],"b1704c078ec59838c9d95d5bf5738b393b537494":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","284f80394e6698018f973e9d76a8efc5f53e3363"],"9dd076b6b2e140fa535b24a16a76ccde5f330322":["40d106815d60946d1ff638c0aaef65ecda4722ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b11122ff28c20e6e4e02cb1366eaa029a92f69ce"],"40d106815d60946d1ff638c0aaef65ecda4722ca":["419a8f52c6635419beb951255cacbbb281044c57"]},"commit2Childs":{"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"419a8f52c6635419beb951255cacbbb281044c57":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","40d106815d60946d1ff638c0aaef65ecda4722ca"],"05569170a222447d3aec8fad773feedf4429fdd5":["b437b84da5e49daf1197c9cd533015490cdcb2c2"],"b11122ff28c20e6e4e02cb1366eaa029a92f69ce":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"58fec4cc4751826a310393076ec744b4e159eb33":["419a8f52c6635419beb951255cacbbb281044c57"],"b437b84da5e49daf1197c9cd533015490cdcb2c2":["b11122ff28c20e6e4e02cb1366eaa029a92f69ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","979e22aa7c63c9dc651adf861610c7e444d45832","b1704c078ec59838c9d95d5bf5738b393b537494"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"979e22aa7c63c9dc651adf861610c7e444d45832":["284f80394e6698018f973e9d76a8efc5f53e3363"],"284f80394e6698018f973e9d76a8efc5f53e3363":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","419a8f52c6635419beb951255cacbbb281044c57","58fec4cc4751826a310393076ec744b4e159eb33","b1704c078ec59838c9d95d5bf5738b393b537494"],"b1704c078ec59838c9d95d5bf5738b393b537494":[],"9dd076b6b2e140fa535b24a16a76ccde5f330322":["05569170a222447d3aec8fad773feedf4429fdd5"],"40d106815d60946d1ff638c0aaef65ecda4722ca":["9dd076b6b2e140fa535b24a16a76ccde5f330322"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","b1704c078ec59838c9d95d5bf5738b393b537494","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}