{"path":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","sourceNew":"  synchronized public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocsInStore > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter();\n\n      // Fill fdx file to include any final docs that we\n      // skipped because they hit non-aborting exceptions\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null)\n      fieldsWriter.flush();\n  }\n\n","sourceOld":"  synchronized public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocsInStore > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter();\n\n      // Fill fdx file to include any final docs that we\n      // skipped because they hit non-aborting exceptions\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null)\n      fieldsWriter.flush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","sourceNew":"  public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocsInStore > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter();\n\n      // Fill fdx file to include any final docs that we\n      // skipped because they hit non-aborting exceptions\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null)\n      fieldsWriter.flush();\n  }\n\n","sourceOld":"  synchronized public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocsInStore > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter();\n\n      // Fill fdx file to include any final docs that we\n      // skipped because they hit non-aborting exceptions\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null)\n      fieldsWriter.flush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","sourceNew":"  public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocs > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter();\n\n      // Fill fdx file to include any final docs that we\n      // skipped because they hit non-aborting exceptions\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.flush();\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      String fieldsName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      docWriter.removeOpenFile(fieldsName);\n      docWriter.removeOpenFile(fieldsIdxName);\n\n      if (4+((long) state.numDocs)*8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocsInStore > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter();\n\n      // Fill fdx file to include any final docs that we\n      // skipped because they hit non-aborting exceptions\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null)\n      fieldsWriter.flush();\n  }\n\n","bugFix":null,"bugIntro":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","sourceNew":"  public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocs > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter();\n\n      // Fill fdx file to include any final docs that we\n      // skipped because they hit non-aborting exceptions\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.flush();\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      String fieldsName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      if (4+((long) state.numDocs)*8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocs > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter();\n\n      // Fill fdx file to include any final docs that we\n      // skipped because they hit non-aborting exceptions\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.flush();\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      String fieldsName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      docWriter.removeOpenFile(fieldsName);\n      docWriter.removeOpenFile(fieldsIdxName);\n\n      if (4+((long) state.numDocs)*8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n\n  }\n\n","bugFix":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","sourceNew":"  synchronized public void flush(SegmentWriteState state) throws IOException {\n    if (state.numDocs > lastDocID) {\n      initFieldsWriter();\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","sourceOld":"  synchronized public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocsInStore > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter();\n\n      // Fill fdx file to include any final docs that we\n      // skipped because they hit non-aborting exceptions\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null)\n      fieldsWriter.flush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","sourceNew":"  synchronized public void flush(SegmentWriteState state) throws IOException {\n    if (state.numDocs > lastDocID) {\n      initFieldsWriter();\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","sourceOld":"  synchronized public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocsInStore > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter();\n\n      // Fill fdx file to include any final docs that we\n      // skipped because they hit non-aborting exceptions\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null)\n      fieldsWriter.flush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","sourceNew":"  public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocs > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter();\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocs > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter();\n\n      // Fill fdx file to include any final docs that we\n      // skipped because they hit non-aborting exceptions\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.flush();\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      String fieldsName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      if (4+((long) state.numDocs)*8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe","date":1294227869,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","sourceNew":"  synchronized public void flush(SegmentWriteState state) throws IOException {\n    if (state.numDocs > lastDocID) {\n      initFieldsWriter();\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","sourceOld":"  synchronized public void flush(SegmentWriteState state) throws IOException {\n    if (state.numDocs > lastDocID) {\n      initFieldsWriter();\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","sourceNew":"  synchronized public void flush(SegmentWriteState state) throws IOException {\n    if (state.numDocs > lastDocID) {\n      initFieldsWriter();\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","sourceOld":"  synchronized public void flush(SegmentWriteState state) throws IOException {\n    if (state.numDocs > lastDocID) {\n      initFieldsWriter();\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","sourceNew":"  public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocs > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter();\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocs > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter();\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","sourceNew":"  public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocs > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter();\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","sourceOld":"  synchronized public void flush(SegmentWriteState state) throws IOException {\n    if (state.numDocs > lastDocID) {\n      initFieldsWriter();\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","sourceNew":"  public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocs > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter();\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","sourceOld":"  synchronized public void flush(SegmentWriteState state) throws IOException {\n    if (state.numDocs > lastDocID) {\n      initFieldsWriter();\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","sourceNew":"  public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocs > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter();\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","sourceOld":"  synchronized public void flush(SegmentWriteState state) throws IOException {\n    if (state.numDocs > lastDocID) {\n      initFieldsWriter();\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","sourceNew":"  public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocs > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter(state.context);\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocs > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter();\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","sourceNew":"  public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocs > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter(state.context);\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocs > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter();\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","sourceNew":"  public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocs > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter(state.context);\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocs > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter();\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsConsumer#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#flush(SegmentWriteState).mjava","sourceNew":"  public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocs > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter(state.context);\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      try {\n        fieldsWriter.finish(state.numDocs);\n      } finally {\n        fieldsWriter.close();\n        fieldsWriter = null;\n        lastDocID = 0;\n      }\n    }\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state) throws IOException {\n\n    if (state.numDocs > 0) {\n      // It's possible that all documents seen in this segment\n      // hit non-aborting exceptions, in which case we will\n      // not have yet init'd the FieldsWriter:\n      initFieldsWriter(state.context);\n      fill(state.numDocs);\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocs + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"06584e6e98d592b34e1329b384182f368d2025e8":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["70ad682703b8585f5d0a637efec044d57ec05efb","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe","868da859b43505d9d2a023bfeae6dd0c795f5295"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9454a6510e2db155fb01faa5c049b06ece95fab9","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5ef87af8c7bd0f8429622b83aa74202383f2e757","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"a3776dccca01c11e7046323cfad46a3b4a471233":["fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a3776dccca01c11e7046323cfad46a3b4a471233","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","b6f9be74ca7baaef11857ad002cad40419979516"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"],"fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06584e6e98d592b34e1329b384182f368d2025e8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["6c18273ea5b3974d2f30117f46f1ae416c28f727"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"06584e6e98d592b34e1329b384182f368d2025e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","b6f9be74ca7baaef11857ad002cad40419979516","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["06584e6e98d592b34e1329b384182f368d2025e8","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe":["70ad682703b8585f5d0a637efec044d57ec05efb","b3e06be49006ecac364d39d12b9c9f74882f9b9f","a3776dccca01c11e7046323cfad46a3b4a471233","868da859b43505d9d2a023bfeae6dd0c795f5295"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6c18273ea5b3974d2f30117f46f1ae416c28f727","ab5cb6a74aefb78aa0569857970b9151dfe2e787","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}