{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHasUncommittedChanges().mjava","commits":[{"id":"d793cb4fa803a8c1df6052bc96094cfaae7d86bb","date":1372272532,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHasUncommittedChanges().mjava","pathOld":"/dev/null","sourceNew":"  public void testHasUncommittedChanges() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    assertTrue(writer.hasUncommittedChanges());  // this will be true because a commit will create an empty index\n    Document doc = new Document();\n    doc.add(newTextField(\"myfield\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n    writer.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHasUncommittedChanges().mjava","pathOld":"/dev/null","sourceNew":"  public void testHasUncommittedChanges() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    assertTrue(writer.hasUncommittedChanges());  // this will be true because a commit will create an empty index\n    Document doc = new Document();\n    doc.add(newTextField(\"myfield\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n    writer.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43551e9096501f3700f7aa202ba12192990b43e8","date":1382029838,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHasUncommittedChanges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHasUncommittedChanges().mjava","sourceNew":"  public void testHasUncommittedChanges() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    assertTrue(writer.hasUncommittedChanges());  // this will be true because a commit will create an empty index\n    Document doc = new Document();\n    doc.add(newTextField(\"myfield\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n    writer.commit();\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"xyz\", Field.Store.YES));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.deleteDocuments(new Term(\"id\", \"xyz\"));\n    assertTrue(writer.hasUncommittedChanges());\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testHasUncommittedChanges() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    assertTrue(writer.hasUncommittedChanges());  // this will be true because a commit will create an empty index\n    Document doc = new Document();\n    doc.add(newTextField(\"myfield\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n    writer.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a1948845635c8e8973b1dc1f274cf4974c027c7","date":1382044707,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHasUncommittedChanges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHasUncommittedChanges().mjava","sourceNew":"  public void testHasUncommittedChanges() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    assertTrue(writer.hasUncommittedChanges());  // this will be true because a commit will create an empty index\n    Document doc = new Document();\n    doc.add(newTextField(\"myfield\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n    writer.commit();\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"xyz\", Field.Store.YES));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.deleteDocuments(new Term(\"id\", \"xyz\"));\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testHasUncommittedChanges() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    assertTrue(writer.hasUncommittedChanges());  // this will be true because a commit will create an empty index\n    Document doc = new Document();\n    doc.add(newTextField(\"myfield\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n    writer.commit();\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"xyz\", Field.Store.YES));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.deleteDocuments(new Term(\"id\", \"xyz\"));\n    assertTrue(writer.hasUncommittedChanges());\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHasUncommittedChanges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHasUncommittedChanges().mjava","sourceNew":"  public void testHasUncommittedChanges() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    assertTrue(writer.hasUncommittedChanges());  // this will be true because a commit will create an empty index\n    Document doc = new Document();\n    doc.add(newTextField(\"myfield\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n    writer.commit();\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"xyz\", Field.Store.YES));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.deleteDocuments(new Term(\"id\", \"xyz\"));\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.shutdown();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testHasUncommittedChanges() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    assertTrue(writer.hasUncommittedChanges());  // this will be true because a commit will create an empty index\n    Document doc = new Document();\n    doc.add(newTextField(\"myfield\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n    writer.commit();\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"xyz\", Field.Store.YES));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.deleteDocuments(new Term(\"id\", \"xyz\"));\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHasUncommittedChanges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHasUncommittedChanges().mjava","sourceNew":"  public void testHasUncommittedChanges() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    assertTrue(writer.hasUncommittedChanges());  // this will be true because a commit will create an empty index\n    Document doc = new Document();\n    doc.add(newTextField(\"myfield\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n    writer.commit();\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"xyz\", Field.Store.YES));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.deleteDocuments(new Term(\"id\", \"xyz\"));\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.shutdown();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testHasUncommittedChanges() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    assertTrue(writer.hasUncommittedChanges());  // this will be true because a commit will create an empty index\n    Document doc = new Document();\n    doc.add(newTextField(\"myfield\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n    writer.commit();\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"xyz\", Field.Store.YES));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.deleteDocuments(new Term(\"id\", \"xyz\"));\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.shutdown();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHasUncommittedChanges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHasUncommittedChanges().mjava","sourceNew":"  public void testHasUncommittedChanges() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    assertTrue(writer.hasUncommittedChanges());  // this will be true because a commit will create an empty index\n    Document doc = new Document();\n    doc.add(newTextField(\"myfield\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n    writer.commit();\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"xyz\", Field.Store.YES));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.deleteDocuments(new Term(\"id\", \"xyz\"));\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testHasUncommittedChanges() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    assertTrue(writer.hasUncommittedChanges());  // this will be true because a commit will create an empty index\n    Document doc = new Document();\n    doc.add(newTextField(\"myfield\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n    writer.commit();\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"xyz\", Field.Store.YES));\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.deleteDocuments(new Term(\"id\", \"xyz\"));\n    assertTrue(writer.hasUncommittedChanges());\n\n    // Must commit, waitForMerges, commit again, to be\n    // certain that hasUncommittedChanges returns false:\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    assertFalse(writer.hasUncommittedChanges());\n    writer.shutdown();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    assertFalse(writer.hasUncommittedChanges());\n    writer.addDocument(doc);\n    assertTrue(writer.hasUncommittedChanges());\n\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d793cb4fa803a8c1df6052bc96094cfaae7d86bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d793cb4fa803a8c1df6052bc96094cfaae7d86bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["4a1948845635c8e8973b1dc1f274cf4974c027c7"],"43551e9096501f3700f7aa202ba12192990b43e8":["d793cb4fa803a8c1df6052bc96094cfaae7d86bb"],"4a1948845635c8e8973b1dc1f274cf4974c027c7":["43551e9096501f3700f7aa202ba12192990b43e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"d793cb4fa803a8c1df6052bc96094cfaae7d86bb":["37a0f60745e53927c4c876cfe5b5a58170f0646c","43551e9096501f3700f7aa202ba12192990b43e8"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d793cb4fa803a8c1df6052bc96094cfaae7d86bb","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"43551e9096501f3700f7aa202ba12192990b43e8":["4a1948845635c8e8973b1dc1f274cf4974c027c7"],"4a1948845635c8e8973b1dc1f274cf4974c027c7":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}