{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","sourceNew":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        stmt.setMaxRows(maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.currentTimeMillis();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + (System.currentTimeMillis() - start));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","sourceOld":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        stmt.setMaxRows(maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.currentTimeMillis();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + (System.currentTimeMillis() - start));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","sourceNew":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        stmt.setMaxRows(maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.currentTimeMillis();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + (System.currentTimeMillis() - start));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","sourceOld":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        stmt.setMaxRows(maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.currentTimeMillis();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + (System.currentTimeMillis() - start));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","sourceNew":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        stmt.setMaxRows(maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.currentTimeMillis();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + (System.currentTimeMillis() - start));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        @Override\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        @Override\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        @Override\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","sourceOld":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        stmt.setMaxRows(maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.currentTimeMillis();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + (System.currentTimeMillis() - start));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","sourceNew":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        stmt.setMaxRows(maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.currentTimeMillis();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + (System.currentTimeMillis() - start));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        @Override\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        @Override\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        @Override\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","sourceOld":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        stmt.setMaxRows(maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.currentTimeMillis();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + (System.currentTimeMillis() - start));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd5bc858b8426d40bbe90b94120ead37c77d7954","date":1393812525,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","sourceNew":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        stmt.setMaxRows(maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.nanoTime();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        @Override\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        @Override\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        @Override\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","sourceOld":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        stmt.setMaxRows(maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.currentTimeMillis();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + (System.currentTimeMillis() - start));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        @Override\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        @Override\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        @Override\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6dfb0649722008c1c976c2992bb9cce634dd2a44","date":1454246079,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","sourceNew":"    public ResultSetIterator(String query) {\n\n      final List<String> colNames;\n      try {\n        Connection c = getConnection();\n        stmt = createStatement(c);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.nanoTime();\n        resultSet = executeStatement(stmt, query);\n        LOG.trace(\"Time taken for sql :\"\n                + TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n        return;\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = createIterator(stmt, resultSet, convertType, colNames, fieldNameVsType);\n    }\n\n","sourceOld":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        stmt.setMaxRows(maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.nanoTime();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        @Override\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        @Override\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        @Override\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":["78002dda5f9d46d20e8cf0a7c070b8205219a93d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","sourceNew":"    public ResultSetIterator(String query) {\n\n      final List<String> colNames;\n      try {\n        Connection c = getConnection();\n        stmt = createStatement(c);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.nanoTime();\n        resultSet = executeStatement(stmt, query);\n        LOG.trace(\"Time taken for sql :\"\n                + TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n        return;\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = createIterator(stmt, resultSet, convertType, colNames, fieldNameVsType);\n    }\n\n","sourceOld":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        stmt.setMaxRows(maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.nanoTime();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        @Override\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        @Override\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        @Override\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78002dda5f9d46d20e8cf0a7c070b8205219a93d","date":1465238456,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","sourceNew":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = createStatement(c, batchSize, maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.nanoTime();\n        resultSet = executeStatement(stmt, query);\n        LOG.trace(\"Time taken for sql :\"\n                + TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS));\n        setColNames(resultSet);\n      } catch (Exception e) {\n        close();\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n        return;\n      }\n      if (resultSet == null) {\n        close();\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = createIterator(convertType, fieldNameVsType);\n    }\n\n","sourceOld":"    public ResultSetIterator(String query) {\n\n      final List<String> colNames;\n      try {\n        Connection c = getConnection();\n        stmt = createStatement(c);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.nanoTime();\n        resultSet = executeStatement(stmt, query);\n        LOG.trace(\"Time taken for sql :\"\n                + TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n        return;\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = createIterator(stmt, resultSet, convertType, colNames, fieldNameVsType);\n    }\n\n","bugFix":["6dfb0649722008c1c976c2992bb9cce634dd2a44","4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","sourceNew":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = createStatement(c, batchSize, maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.nanoTime();\n        resultSet = executeStatement(stmt, query);\n        LOG.trace(\"Time taken for sql :\"\n                + TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS));\n        setColNames(resultSet);\n      } catch (Exception e) {\n        close();\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n        return;\n      }\n      if (resultSet == null) {\n        close();\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = createIterator(convertType, fieldNameVsType);\n    }\n\n","sourceOld":"    public ResultSetIterator(String query) {\n\n      final List<String> colNames;\n      try {\n        Connection c = getConnection();\n        stmt = createStatement(c);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.nanoTime();\n        resultSet = executeStatement(stmt, query);\n        LOG.trace(\"Time taken for sql :\"\n                + TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n        return;\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = createIterator(stmt, resultSet, convertType, colNames, fieldNameVsType);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","sourceNew":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = createStatement(c, batchSize, maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.nanoTime();\n        resultSet = executeStatement(stmt, query);\n        LOG.trace(\"Time taken for sql :\"\n                + TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS));\n        setColNames(resultSet);\n      } catch (Exception e) {\n        close();\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n        return;\n      }\n      if (resultSet == null) {\n        close();\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = createIterator(convertType, fieldNameVsType);\n    }\n\n","sourceOld":"    public ResultSetIterator(String query) {\n\n      final List<String> colNames;\n      try {\n        Connection c = getConnection();\n        stmt = createStatement(c);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.nanoTime();\n        resultSet = executeStatement(stmt, query);\n        LOG.trace(\"Time taken for sql :\"\n                + TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n        return;\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = createIterator(stmt, resultSet, convertType, colNames, fieldNameVsType);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","sourceNew":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = createStatement(c, batchSize, maxRows);\n        log.debug(\"Executing SQL: \" + query);\n        long start = System.nanoTime();\n        resultSet = executeStatement(stmt, query);\n        log.trace(\"Time taken for sql :\"\n                + TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS));\n        setColNames(resultSet);\n      } catch (Exception e) {\n        close();\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n        return;\n      }\n      if (resultSet == null) {\n        close();\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = createIterator(convertType, fieldNameVsType);\n    }\n\n","sourceOld":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = createStatement(c, batchSize, maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.nanoTime();\n        resultSet = executeStatement(stmt, query);\n        LOG.trace(\"Time taken for sql :\"\n                + TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS));\n        setColNames(resultSet);\n      } catch (Exception e) {\n        close();\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n        return;\n      }\n      if (resultSet == null) {\n        close();\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = createIterator(convertType, fieldNameVsType);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","sourceNew":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = createStatement(c, batchSize, maxRows);\n        log.debug(\"Executing SQL: {}\", query);\n        long start = System.nanoTime();\n        resultSet = executeStatement(stmt, query);\n        log.trace(\"Time taken for sql : {}\"\n                , TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS));\n        setColNames(resultSet);\n      } catch (Exception e) {\n        close();\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n        return;\n      }\n      if (resultSet == null) {\n        close();\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = createIterator(convertType, fieldNameVsType);\n    }\n\n","sourceOld":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = createStatement(c, batchSize, maxRows);\n        log.debug(\"Executing SQL: \" + query);\n        long start = System.nanoTime();\n        resultSet = executeStatement(stmt, query);\n        log.trace(\"Time taken for sql :\"\n                + TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS));\n        setColNames(resultSet);\n      } catch (Exception e) {\n        close();\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n        return;\n      }\n      if (resultSet == null) {\n        close();\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = createIterator(convertType, fieldNameVsType);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","sourceNew":null,"sourceOld":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = createStatement(c, batchSize, maxRows);\n        log.debug(\"Executing SQL: {}\", query);\n        long start = System.nanoTime();\n        resultSet = executeStatement(stmt, query);\n        log.trace(\"Time taken for sql : {}\"\n                , TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS));\n        setColNames(resultSet);\n      } catch (Exception e) {\n        close();\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n        return;\n      }\n      if (resultSet == null) {\n        close();\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = createIterator(convertType, fieldNameVsType);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","7530de27b87b961b51f01bd1299b7004d46e8823"],"6dfb0649722008c1c976c2992bb9cce634dd2a44":["fd5bc858b8426d40bbe90b94120ead37c77d7954"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["fd5bc858b8426d40bbe90b94120ead37c77d7954","6dfb0649722008c1c976c2992bb9cce634dd2a44"],"191128ac5b85671b1671e2c857437694283b6ebf":["6dfb0649722008c1c976c2992bb9cce634dd2a44","78002dda5f9d46d20e8cf0a7c070b8205219a93d"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6dfb0649722008c1c976c2992bb9cce634dd2a44","191128ac5b85671b1671e2c857437694283b6ebf"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["7530de27b87b961b51f01bd1299b7004d46e8823"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78002dda5f9d46d20e8cf0a7c070b8205219a93d":["6dfb0649722008c1c976c2992bb9cce634dd2a44"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["191128ac5b85671b1671e2c857437694283b6ebf"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"6dfb0649722008c1c976c2992bb9cce634dd2a44":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","78002dda5f9d46d20e8cf0a7c070b8205219a93d"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"191128ac5b85671b1671e2c857437694283b6ebf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["6dfb0649722008c1c976c2992bb9cce634dd2a44","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"78002dda5f9d46d20e8cf0a7c070b8205219a93d":["191128ac5b85671b1671e2c857437694283b6ebf"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fd5bc858b8426d40bbe90b94120ead37c77d7954"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}