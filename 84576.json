{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","sourceNew":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = TermRangeQuery.newStringRange(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = TermRangeQuery.newStringRange(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","sourceNew":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = TermRangeQuery.newStringRange(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = TermRangeQuery.newStringRange(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","sourceNew":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = TermRangeQuery.newStringRange(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q.build(), 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = TermRangeQuery.newStringRange(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}