{"path":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getFallbackLang(SolrInputDocument,String[],String).mjava","commits":[{"id":"0f45f65b8ca4312a6880cc80396c35205dc21543","date":1317846119,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getFallbackLang(SolrInputDocument,String[],String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Decides the fallback language, either from content of fallback field or fallback value\n   * @param doc the Solr document\n   * @param fallbackFields an array of strings with field names containing fallback language codes\n   * @param fallbackValue a language code to use in case no fallbackFields are found\n   */\n  private String getFallbackLang(SolrInputDocument doc, String[] fallbackFields, String fallbackValue) {\n    String lang = null; \n    for(String field : fallbackFields) {\n      if(doc.containsKey(field)) {\n        lang = (String) doc.getFieldValue(field);\n        log.debug(\"Language fallback to field \"+field);\n        break;\n      }\n    }\n    if(lang == null) {\n      log.debug(\"Language fallback to value \"+fallbackValue);\n      lang = fallbackValue;\n    }\n    return lang;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46ae57a9ea3e7c9a47a3fc2548e1b32c060e3f8f","date":1351009382,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getFallbackLang(SolrInputDocument,String[],String).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getFallbackLang(SolrInputDocument,String[],String).mjava","sourceNew":"  /**\n   * Decides the fallback language, either from content of fallback field or fallback value\n   * @param doc the Solr document\n   * @param fallbackFields an array of strings with field names containing fallback language codes\n   * @param fallbackValue a language code to use in case no fallbackFields are found\n   */\n  private String getFallbackLang(SolrInputDocument doc, String[] fallbackFields, String fallbackValue) {\n    String lang = null;\n    for(String field : fallbackFields) {\n      if(doc.containsKey(field)) {\n        lang = (String) doc.getFieldValue(field);\n        log.debug(\"Language fallback to field \"+field);\n        break;\n      }\n    }\n    if(lang == null) {\n      log.debug(\"Language fallback to value \"+fallbackValue);\n      lang = fallbackValue;\n    }\n    return lang;\n  }\n\n","sourceOld":"  /**\n   * Decides the fallback language, either from content of fallback field or fallback value\n   * @param doc the Solr document\n   * @param fallbackFields an array of strings with field names containing fallback language codes\n   * @param fallbackValue a language code to use in case no fallbackFields are found\n   */\n  private String getFallbackLang(SolrInputDocument doc, String[] fallbackFields, String fallbackValue) {\n    String lang = null; \n    for(String field : fallbackFields) {\n      if(doc.containsKey(field)) {\n        lang = (String) doc.getFieldValue(field);\n        log.debug(\"Language fallback to field \"+field);\n        break;\n      }\n    }\n    if(lang == null) {\n      log.debug(\"Language fallback to value \"+fallbackValue);\n      lang = fallbackValue;\n    }\n    return lang;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getFallbackLang(SolrInputDocument,String[],String).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getFallbackLang(SolrInputDocument,String[],String).mjava","sourceNew":"  /**\n   * Decides the fallback language, either from content of fallback field or fallback value\n   * @param doc the Solr document\n   * @param fallbackFields an array of strings with field names containing fallback language codes\n   * @param fallbackValue a language code to use in case no fallbackFields are found\n   */\n  private String getFallbackLang(SolrInputDocument doc, String[] fallbackFields, String fallbackValue) {\n    String lang = null;\n    for(String field : fallbackFields) {\n      if(doc.containsKey(field)) {\n        lang = (String) doc.getFieldValue(field);\n        log.debug(\"Language fallback to field \"+field);\n        break;\n      }\n    }\n    if(lang == null) {\n      log.debug(\"Language fallback to value \"+fallbackValue);\n      lang = fallbackValue;\n    }\n    return lang;\n  }\n\n","sourceOld":"  /**\n   * Decides the fallback language, either from content of fallback field or fallback value\n   * @param doc the Solr document\n   * @param fallbackFields an array of strings with field names containing fallback language codes\n   * @param fallbackValue a language code to use in case no fallbackFields are found\n   */\n  private String getFallbackLang(SolrInputDocument doc, String[] fallbackFields, String fallbackValue) {\n    String lang = null; \n    for(String field : fallbackFields) {\n      if(doc.containsKey(field)) {\n        lang = (String) doc.getFieldValue(field);\n        log.debug(\"Language fallback to field \"+field);\n        break;\n      }\n    }\n    if(lang == null) {\n      log.debug(\"Language fallback to value \"+fallbackValue);\n      lang = fallbackValue;\n    }\n    return lang;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getFallbackLang(SolrInputDocument,String[],String).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getFallbackLang(SolrInputDocument,String[],String).mjava","sourceNew":"  /**\n   * Decides the fallback language, either from content of fallback field or fallback value\n   * @param doc the Solr document\n   * @param fallbackFields an array of strings with field names containing fallback language codes\n   * @param fallbackValue a language code to use in case no fallbackFields are found\n   */\n  private String getFallbackLang(SolrInputDocument doc, String[] fallbackFields, String fallbackValue) {\n    String lang = null;\n    for(String field : fallbackFields) {\n      if(doc.containsKey(field)) {\n        lang = (String) doc.getFieldValue(field);\n        log.debug(\"Language fallback to field {}\", field);\n        break;\n      }\n    }\n    if(lang == null) {\n      log.debug(\"Language fallback to value {}\", fallbackValue);\n      lang = fallbackValue;\n    }\n    return lang;\n  }\n\n","sourceOld":"  /**\n   * Decides the fallback language, either from content of fallback field or fallback value\n   * @param doc the Solr document\n   * @param fallbackFields an array of strings with field names containing fallback language codes\n   * @param fallbackValue a language code to use in case no fallbackFields are found\n   */\n  private String getFallbackLang(SolrInputDocument doc, String[] fallbackFields, String fallbackValue) {\n    String lang = null;\n    for(String field : fallbackFields) {\n      if(doc.containsKey(field)) {\n        lang = (String) doc.getFieldValue(field);\n        log.debug(\"Language fallback to field \"+field);\n        break;\n      }\n    }\n    if(lang == null) {\n      log.debug(\"Language fallback to value \"+fallbackValue);\n      lang = fallbackValue;\n    }\n    return lang;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46ae57a9ea3e7c9a47a3fc2548e1b32c060e3f8f":["0f45f65b8ca4312a6880cc80396c35205dc21543"],"0f45f65b8ca4312a6880cc80396c35205dc21543":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62e52115b56781006682fd92c6938efaf174304d":["0f45f65b8ca4312a6880cc80396c35205dc21543","46ae57a9ea3e7c9a47a3fc2548e1b32c060e3f8f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["46ae57a9ea3e7c9a47a3fc2548e1b32c060e3f8f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"46ae57a9ea3e7c9a47a3fc2548e1b32c060e3f8f":["62e52115b56781006682fd92c6938efaf174304d","a966532d92cf9ba2856f15a8140151bb6b518e4b"],"0f45f65b8ca4312a6880cc80396c35205dc21543":["46ae57a9ea3e7c9a47a3fc2548e1b32c060e3f8f","62e52115b56781006682fd92c6938efaf174304d"],"62e52115b56781006682fd92c6938efaf174304d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f45f65b8ca4312a6880cc80396c35205dc21543"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}