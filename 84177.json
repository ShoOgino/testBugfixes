{"path":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer.TestFilter#incrementToken().mjava","commits":[{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer.TestFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"    public final boolean incrementToken() throws java.io.IOException {\n      if (multiToken > 0) {\n        termAtt.setTermBuffer(\"multi\"+(multiToken+1));\n        offsetAtt.setStartOffset(prevStartOffset);\n        offsetAtt.setEndOffset(prevEndOffset);\n        typeAtt.setType(prevType);\n        posIncrAtt.setPositionIncrement(0);\n        multiToken--;\n        return true;\n      } else {\n        boolean next = input.incrementToken();\n        if (next == false) {\n          return false;\n        }\n        prevType = typeAtt.type();\n        prevStartOffset = offsetAtt.startOffset();\n        prevEndOffset = offsetAtt.endOffset();\n        String text = termAtt.term();\n        if (text.equals(\"triplemulti\")) {\n          multiToken = 2;\n          return true;\n        } else if (text.equals(\"multi\")) {\n          multiToken = 1;\n          return true;\n        } else {\n          return true;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10855b393afd8884613d82de3a4fff773d4e5334","date":1240953458,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer.TestFilter#incrementToken().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer.TestFilter#incrementToken().mjava","sourceNew":"    public final boolean incrementToken() throws java.io.IOException {\n      if (multiToken > 0) {\n        termAtt.setTermBuffer(\"multi\"+(multiToken+1));\n        offsetAtt.setOffset(prevStartOffset, prevEndOffset);\n        typeAtt.setType(prevType);\n        posIncrAtt.setPositionIncrement(0);\n        multiToken--;\n        return true;\n      } else {\n        boolean next = input.incrementToken();\n        if (next == false) {\n          return false;\n        }\n        prevType = typeAtt.type();\n        prevStartOffset = offsetAtt.startOffset();\n        prevEndOffset = offsetAtt.endOffset();\n        String text = termAtt.term();\n        if (text.equals(\"triplemulti\")) {\n          multiToken = 2;\n          return true;\n        } else if (text.equals(\"multi\")) {\n          multiToken = 1;\n          return true;\n        } else {\n          return true;\n        }\n      }\n    }\n\n","sourceOld":"    public final boolean incrementToken() throws java.io.IOException {\n      if (multiToken > 0) {\n        termAtt.setTermBuffer(\"multi\"+(multiToken+1));\n        offsetAtt.setStartOffset(prevStartOffset);\n        offsetAtt.setEndOffset(prevEndOffset);\n        typeAtt.setType(prevType);\n        posIncrAtt.setPositionIncrement(0);\n        multiToken--;\n        return true;\n      } else {\n        boolean next = input.incrementToken();\n        if (next == false) {\n          return false;\n        }\n        prevType = typeAtt.type();\n        prevStartOffset = offsetAtt.startOffset();\n        prevEndOffset = offsetAtt.endOffset();\n        String text = termAtt.term();\n        if (text.equals(\"triplemulti\")) {\n          multiToken = 2;\n          return true;\n        } else if (text.equals(\"multi\")) {\n          multiToken = 1;\n          return true;\n        } else {\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer.TestFilter#incrementToken().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer.TestFilter#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() throws java.io.IOException {\n      if (multiToken > 0) {\n        termAtt.setTermBuffer(\"multi\"+(multiToken+1));\n        offsetAtt.setOffset(prevStartOffset, prevEndOffset);\n        typeAtt.setType(prevType);\n        posIncrAtt.setPositionIncrement(0);\n        multiToken--;\n        return true;\n      } else {\n        boolean next = input.incrementToken();\n        if (next == false) {\n          return false;\n        }\n        prevType = typeAtt.type();\n        prevStartOffset = offsetAtt.startOffset();\n        prevEndOffset = offsetAtt.endOffset();\n        String text = termAtt.term();\n        if (text.equals(\"triplemulti\")) {\n          multiToken = 2;\n          return true;\n        } else if (text.equals(\"multi\")) {\n          multiToken = 1;\n          return true;\n        } else {\n          return true;\n        }\n      }\n    }\n\n","sourceOld":"    public final boolean incrementToken() throws java.io.IOException {\n      if (multiToken > 0) {\n        termAtt.setTermBuffer(\"multi\"+(multiToken+1));\n        offsetAtt.setOffset(prevStartOffset, prevEndOffset);\n        typeAtt.setType(prevType);\n        posIncrAtt.setPositionIncrement(0);\n        multiToken--;\n        return true;\n      } else {\n        boolean next = input.incrementToken();\n        if (next == false) {\n          return false;\n        }\n        prevType = typeAtt.type();\n        prevStartOffset = offsetAtt.startOffset();\n        prevEndOffset = offsetAtt.endOffset();\n        String text = termAtt.term();\n        if (text.equals(\"triplemulti\")) {\n          multiToken = 2;\n          return true;\n        } else if (text.equals(\"multi\")) {\n          multiToken = 1;\n          return true;\n        } else {\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiAnalyzer.TestFilter#incrementToken().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer.TestFilter#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() throws java.io.IOException {\n      if (multiToken > 0) {\n        termAtt.setTermBuffer(\"multi\"+(multiToken+1));\n        offsetAtt.setOffset(prevStartOffset, prevEndOffset);\n        typeAtt.setType(prevType);\n        posIncrAtt.setPositionIncrement(0);\n        multiToken--;\n        return true;\n      } else {\n        boolean next = input.incrementToken();\n        if (next == false) {\n          return false;\n        }\n        prevType = typeAtt.type();\n        prevStartOffset = offsetAtt.startOffset();\n        prevEndOffset = offsetAtt.endOffset();\n        String text = termAtt.term();\n        if (text.equals(\"triplemulti\")) {\n          multiToken = 2;\n          return true;\n        } else if (text.equals(\"multi\")) {\n          multiToken = 1;\n          return true;\n        } else {\n          return true;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() throws java.io.IOException {\n      if (multiToken > 0) {\n        termAtt.setTermBuffer(\"multi\"+(multiToken+1));\n        offsetAtt.setOffset(prevStartOffset, prevEndOffset);\n        typeAtt.setType(prevType);\n        posIncrAtt.setPositionIncrement(0);\n        multiToken--;\n        return true;\n      } else {\n        boolean next = input.incrementToken();\n        if (next == false) {\n          return false;\n        }\n        prevType = typeAtt.type();\n        prevStartOffset = offsetAtt.startOffset();\n        prevEndOffset = offsetAtt.endOffset();\n        String text = termAtt.term();\n        if (text.equals(\"triplemulti\")) {\n          multiToken = 2;\n          return true;\n        } else if (text.equals(\"multi\")) {\n          multiToken = 1;\n          return true;\n        } else {\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["10855b393afd8884613d82de3a4fff773d4e5334"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"10855b393afd8884613d82de3a4fff773d4e5334":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1326054a8d3aa66382d49decc7f330955c9c6f71"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["10855b393afd8884613d82de3a4fff773d4e5334"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"10855b393afd8884613d82de3a4fff773d4e5334":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}