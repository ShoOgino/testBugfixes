{"path":"src/java/org/apache/lucene/analysis/BaseCharFilter#correct(int).mjava","commits":[{"id":"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2","date":1245784531,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/BaseCharFilter#correct(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Retrieve the corrected offset.  Note that this method\n   *  is slow if you correct positions far before the most\n   *  recently added position. */\n  protected int correct(int currentOff) {\n    if (pcmList == null || pcmList.isEmpty()) {\n      return currentOff;\n    }\n    for (int i = pcmList.size() - 1; i >= 0; i--) {\n      if (currentOff >= ((OffCorrectMap) pcmList.get(i)).off) {\n        return currentOff + ((OffCorrectMap) pcmList.get(i)).cumulativeDiff;\n      }\n    }\n    return currentOff;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"894f658e976bac6be9220d704374c373a4f98d9b","date":1251201737,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/BaseCharFilter#correct(int).mjava","pathOld":"src/java/org/apache/lucene/analysis/BaseCharFilter#correct(int).mjava","sourceNew":"  /** Retrieve the corrected offset.  Note that this method\n   *  is slow, if you correct positions far before the most\n   *  recently added position, as it's a simple linear\n   *  searhc backwards through all offset corrections added\n   *  by {@link #addOffCorrectMap}. */\n  protected int correct(int currentOff) {\n    if (pcmList == null || pcmList.isEmpty()) {\n      return currentOff;\n    }\n    for (int i = pcmList.size() - 1; i >= 0; i--) {\n      if (currentOff >= ((OffCorrectMap) pcmList.get(i)).off) {\n        return currentOff + ((OffCorrectMap) pcmList.get(i)).cumulativeDiff;\n      }\n    }\n    return currentOff;\n  }\n\n","sourceOld":"  /** Retrieve the corrected offset.  Note that this method\n   *  is slow if you correct positions far before the most\n   *  recently added position. */\n  protected int correct(int currentOff) {\n    if (pcmList == null || pcmList.isEmpty()) {\n      return currentOff;\n    }\n    for (int i = pcmList.size() - 1; i >= 0; i--) {\n      if (currentOff >= ((OffCorrectMap) pcmList.get(i)).off) {\n        return currentOff + ((OffCorrectMap) pcmList.get(i)).cumulativeDiff;\n      }\n    }\n    return currentOff;\n  }\n\n","bugFix":null,"bugIntro":["a82fda1447250ff156ff3b862d94a99bf0a3c23c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a82fda1447250ff156ff3b862d94a99bf0a3c23c","date":1252649533,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/BaseCharFilter#correct(int).mjava","pathOld":"src/java/org/apache/lucene/analysis/BaseCharFilter#correct(int).mjava","sourceNew":"  /** Retrieve the corrected offset.  Note that this method\n   *  is slow, if you correct positions far before the most\n   *  recently added position, as it's a simple linear\n   *  search backwards through all offset corrections added\n   *  by {@link #addOffCorrectMap}. */\n  protected int correct(int currentOff) {\n    if (pcmList == null || pcmList.isEmpty()) {\n      return currentOff;\n    }\n    for (int i = pcmList.size() - 1; i >= 0; i--) {\n      if (currentOff >= ((OffCorrectMap) pcmList.get(i)).off) {\n        return currentOff + ((OffCorrectMap) pcmList.get(i)).cumulativeDiff;\n      }\n    }\n    return currentOff;\n  }\n\n","sourceOld":"  /** Retrieve the corrected offset.  Note that this method\n   *  is slow, if you correct positions far before the most\n   *  recently added position, as it's a simple linear\n   *  searhc backwards through all offset corrections added\n   *  by {@link #addOffCorrectMap}. */\n  protected int correct(int currentOff) {\n    if (pcmList == null || pcmList.isEmpty()) {\n      return currentOff;\n    }\n    for (int i = pcmList.size() - 1; i >= 0; i--) {\n      if (currentOff >= ((OffCorrectMap) pcmList.get(i)).off) {\n        return currentOff + ((OffCorrectMap) pcmList.get(i)).cumulativeDiff;\n      }\n    }\n    return currentOff;\n  }\n\n","bugFix":["894f658e976bac6be9220d704374c373a4f98d9b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f63c5771d883c45d43e7d5ac11344582906f7d17","date":1256132259,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/BaseCharFilter#correct(int).mjava","pathOld":"src/java/org/apache/lucene/analysis/BaseCharFilter#correct(int).mjava","sourceNew":"  /** Retrieve the corrected offset.  Note that this method\n   *  is slow, if you correct positions far before the most\n   *  recently added position, as it's a simple linear\n   *  search backwards through all offset corrections added\n   *  by {@link #addOffCorrectMap}. */\n  protected int correct(int currentOff) {\n    if (pcmList == null || pcmList.isEmpty()) {\n      return currentOff;\n    }\n    for (int i = pcmList.size() - 1; i >= 0; i--) {\n      if (currentOff >=  pcmList.get(i).off) {\n        return currentOff + pcmList.get(i).cumulativeDiff;\n      }\n    }\n    return currentOff;\n  }\n\n","sourceOld":"  /** Retrieve the corrected offset.  Note that this method\n   *  is slow, if you correct positions far before the most\n   *  recently added position, as it's a simple linear\n   *  search backwards through all offset corrections added\n   *  by {@link #addOffCorrectMap}. */\n  protected int correct(int currentOff) {\n    if (pcmList == null || pcmList.isEmpty()) {\n      return currentOff;\n    }\n    for (int i = pcmList.size() - 1; i >= 0; i--) {\n      if (currentOff >= ((OffCorrectMap) pcmList.get(i)).off) {\n        return currentOff + ((OffCorrectMap) pcmList.get(i)).cumulativeDiff;\n      }\n    }\n    return currentOff;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/BaseCharFilter#correct(int).mjava","pathOld":"src/java/org/apache/lucene/analysis/BaseCharFilter#correct(int).mjava","sourceNew":"  /** Retrieve the corrected offset.  Note that this method\n   *  is slow, if you correct positions far before the most\n   *  recently added position, as it's a simple linear\n   *  search backwards through all offset corrections added\n   *  by {@link #addOffCorrectMap}. */\n  @Override\n  protected int correct(int currentOff) {\n    if (pcmList == null || pcmList.isEmpty()) {\n      return currentOff;\n    }\n    for (int i = pcmList.size() - 1; i >= 0; i--) {\n      if (currentOff >=  pcmList.get(i).off) {\n        return currentOff + pcmList.get(i).cumulativeDiff;\n      }\n    }\n    return currentOff;\n  }\n\n","sourceOld":"  /** Retrieve the corrected offset.  Note that this method\n   *  is slow, if you correct positions far before the most\n   *  recently added position, as it's a simple linear\n   *  search backwards through all offset corrections added\n   *  by {@link #addOffCorrectMap}. */\n  protected int correct(int currentOff) {\n    if (pcmList == null || pcmList.isEmpty()) {\n      return currentOff;\n    }\n    for (int i = pcmList.size() - 1; i >= 0; i--) {\n      if (currentOff >=  pcmList.get(i).off) {\n        return currentOff + pcmList.get(i).cumulativeDiff;\n      }\n    }\n    return currentOff;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/BaseCharFilter#correct(int).mjava","sourceNew":null,"sourceOld":"  /** Retrieve the corrected offset.  Note that this method\n   *  is slow, if you correct positions far before the most\n   *  recently added position, as it's a simple linear\n   *  search backwards through all offset corrections added\n   *  by {@link #addOffCorrectMap}. */\n  @Override\n  protected int correct(int currentOff) {\n    if (pcmList == null || pcmList.isEmpty()) {\n      return currentOff;\n    }\n    for (int i = pcmList.size() - 1; i >= 0; i--) {\n      if (currentOff >=  pcmList.get(i).off) {\n        return currentOff + pcmList.get(i).cumulativeDiff;\n      }\n    }\n    return currentOff;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a82fda1447250ff156ff3b862d94a99bf0a3c23c":["894f658e976bac6be9220d704374c373a4f98d9b"],"8a9e385641d717e641408d8fbbc62be8fc766357":["f63c5771d883c45d43e7d5ac11344582906f7d17"],"894f658e976bac6be9220d704374c373a4f98d9b":["cd27af5c226d98a7c6378c388a67a3bff7c0b3a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f63c5771d883c45d43e7d5ac11344582906f7d17":["a82fda1447250ff156ff3b862d94a99bf0a3c23c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a82fda1447250ff156ff3b862d94a99bf0a3c23c":["f63c5771d883c45d43e7d5ac11344582906f7d17"],"894f658e976bac6be9220d704374c373a4f98d9b":["a82fda1447250ff156ff3b862d94a99bf0a3c23c"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd27af5c226d98a7c6378c388a67a3bff7c0b3a2"],"f63c5771d883c45d43e7d5ac11344582906f7d17":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2":["894f658e976bac6be9220d704374c373a4f98d9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}