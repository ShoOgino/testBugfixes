{"path":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"f1d5408c3fa04da2652aa3db3f21d700f7111cef","date":1360854465,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final FieldCache.Ints idSource = FieldCache.DEFAULT.getInts(context.reader(), \"id\", false);\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get(idSource.get(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final FieldCache.Ints idSource = FieldCache.DEFAULT.getInts(context.reader(), \"id\", false);\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get(idSource.get(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final FieldCache.Ints idSource = FieldCache.DEFAULT.getInts(context.reader(), \"id\", false);\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get(idSource.get(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final FieldCache.Ints idSource = FieldCache.DEFAULT.getInts(context.reader(), \"id\", false);\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get(idSource.get(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get((int) idSource.get(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final FieldCache.Ints idSource = FieldCache.DEFAULT.getInts(context.reader(), \"id\", false);\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get(idSource.get(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get((int) idSource.get(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final FieldCache.Ints idSource = FieldCache.DEFAULT.getInts(context.reader(), \"id\", false);\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get(idSource.get(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get((int) idSource.get(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final FieldCache.Ints idSource = FieldCache.DEFAULT.getInts(context.reader(), \"id\", false);\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get(idSource.get(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get((int) idSource.get(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["f1d5408c3fa04da2652aa3db3f21d700f7111cef","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3b41f996b22bd5518650f897d050088ff808ec03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f1d5408c3fa04da2652aa3db3f21d700f7111cef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f1d5408c3fa04da2652aa3db3f21d700f7111cef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["f1d5408c3fa04da2652aa3db3f21d700f7111cef"],"56572ec06f1407c066d6b7399413178b33176cd8":["f1d5408c3fa04da2652aa3db3f21d700f7111cef","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"3b41f996b22bd5518650f897d050088ff808ec03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b41f996b22bd5518650f897d050088ff808ec03","f1d5408c3fa04da2652aa3db3f21d700f7111cef"],"f1d5408c3fa04da2652aa3db3f21d700f7111cef":["93dd449115a9247533e44bab47e8429e5dccbc6d","3b41f996b22bd5518650f897d050088ff808ec03","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3b41f996b22bd5518650f897d050088ff808ec03","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}