{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDA().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDA().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDA().mjava","sourceNew":"  public void testHyphenationCompoundWordsDA() throws Exception {\n    String[] dict = { \"læse\", \"hest\" };\n\n    Reader reader = getHyphenationReader();\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"min veninde som er lidt af en læsehest\")), hyphenator,\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    assertTokenStreamContents(tf, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","sourceOld":"  public void testHyphenationCompoundWordsDA() throws Exception {\n    String[] dict = { \"læse\", \"hest\" };\n\n    Reader reader = getHyphenationReader();\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"min veninde som er lidt af en læsehest\")), hyphenator,\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    assertTokenStreamContents(tf, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8b28a7124e9fa13cdb9b0c79da424c3d05f4217","date":1288533406,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDA().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDA().mjava","sourceNew":"  public void testHyphenationCompoundWordsDA() throws Exception {\n    String[] dict = { \"læse\", \"hest\" };\n\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"min veninde som er lidt af en læsehest\")), hyphenator,\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    assertTokenStreamContents(tf, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","sourceOld":"  public void testHyphenationCompoundWordsDA() throws Exception {\n    String[] dict = { \"læse\", \"hest\" };\n\n    Reader reader = getHyphenationReader();\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"min veninde som er lidt af en læsehest\")), hyphenator,\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    assertTokenStreamContents(tf, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","bugFix":["f496009c9f6039ed409630c8ecc249b279924d1f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDA().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDA().mjava","sourceNew":"  public void testHyphenationCompoundWordsDA() throws Exception {\n    String[] dict = { \"læse\", \"hest\" };\n\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"min veninde som er lidt af en læsehest\")), hyphenator,\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    assertTokenStreamContents(tf, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","sourceOld":"  public void testHyphenationCompoundWordsDA() throws Exception {\n    String[] dict = { \"læse\", \"hest\" };\n\n    Reader reader = getHyphenationReader();\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"min veninde som er lidt af en læsehest\")), hyphenator,\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    assertTokenStreamContents(tf, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDA().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDA().mjava","sourceNew":"  public void testHyphenationCompoundWordsDA() throws Exception {\n    String[] dict = { \"læse\", \"hest\" };\n\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"min veninde som er lidt af en læsehest\")), hyphenator,\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    assertTokenStreamContents(tf, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","sourceOld":"  public void testHyphenationCompoundWordsDA() throws Exception {\n    String[] dict = { \"læse\", \"hest\" };\n\n    Reader reader = getHyphenationReader();\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"min veninde som er lidt af en læsehest\")), hyphenator,\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    assertTokenStreamContents(tf, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDA().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDA().mjava","sourceNew":"  public void testHyphenationCompoundWordsDA() throws Exception {\n    String[] dict = { \"læse\", \"hest\" };\n\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new MockTokenizer(new StringReader(\"min veninde som er lidt af en læsehest\"), MockTokenizer.WHITESPACE, false), \n        hyphenator,\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    assertTokenStreamContents(tf, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","sourceOld":"  public void testHyphenationCompoundWordsDA() throws Exception {\n    String[] dict = { \"læse\", \"hest\" };\n\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"min veninde som er lidt af en læsehest\")), hyphenator,\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    assertTokenStreamContents(tf, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","bugFix":["f496009c9f6039ed409630c8ecc249b279924d1f","a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDA().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDA().mjava","sourceNew":"  public void testHyphenationCompoundWordsDA() throws Exception {\n    String[] dict = { \"læse\", \"hest\" };\n\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new MockTokenizer(new StringReader(\"min veninde som er lidt af en læsehest\"), MockTokenizer.WHITESPACE, false), \n        hyphenator,\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    assertTokenStreamContents(tf, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","sourceOld":"  public void testHyphenationCompoundWordsDA() throws Exception {\n    String[] dict = { \"læse\", \"hest\" };\n\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"min veninde som er lidt af en læsehest\")), hyphenator,\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    assertTokenStreamContents(tf, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDA().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDA().mjava","sourceNew":"  public void testHyphenationCompoundWordsDA() throws Exception {\n    String[] dict = { \"læse\", \"hest\" };\n\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new MockTokenizer(new StringReader(\"min veninde som er lidt af en læsehest\"), MockTokenizer.WHITESPACE, false), \n        hyphenator,\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    assertTokenStreamContents(tf, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","sourceOld":"  public void testHyphenationCompoundWordsDA() throws Exception {\n    String[] dict = { \"læse\", \"hest\" };\n\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"min veninde som er lidt af en læsehest\")), hyphenator,\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    assertTokenStreamContents(tf, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"906468dad7061882fe0b86de96423c16d5e9bc1e","date":1319542276,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDA().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDA().mjava","sourceNew":"  public void testHyphenationCompoundWordsDA() throws Exception {\n    CharArraySet dict = makeDictionary(\"læse\", \"hest\");\n\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new MockTokenizer(new StringReader(\"min veninde som er lidt af en læsehest\"), MockTokenizer.WHITESPACE, false), \n        hyphenator,\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    assertTokenStreamContents(tf, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","sourceOld":"  public void testHyphenationCompoundWordsDA() throws Exception {\n    String[] dict = { \"læse\", \"hest\" };\n\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new MockTokenizer(new StringReader(\"min veninde som er lidt af en læsehest\"), MockTokenizer.WHITESPACE, false), \n        hyphenator,\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    assertTokenStreamContents(tf, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDA().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDA().mjava","sourceNew":"  public void testHyphenationCompoundWordsDA() throws Exception {\n    CharArraySet dict = makeDictionary(\"læse\", \"hest\");\n\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new MockTokenizer(new StringReader(\"min veninde som er lidt af en læsehest\"), MockTokenizer.WHITESPACE, false), \n        hyphenator,\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    assertTokenStreamContents(tf, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","sourceOld":"  public void testHyphenationCompoundWordsDA() throws Exception {\n    CharArraySet dict = makeDictionary(\"læse\", \"hest\");\n\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new MockTokenizer(new StringReader(\"min veninde som er lidt af en læsehest\"), MockTokenizer.WHITESPACE, false), \n        hyphenator,\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    assertTokenStreamContents(tf, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["c8b28a7124e9fa13cdb9b0c79da424c3d05f4217"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["906468dad7061882fe0b86de96423c16d5e9bc1e"],"c8b28a7124e9fa13cdb9b0c79da424c3d05f4217":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["85a883878c0af761245ab048babc63d099f835f3","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c8b28a7124e9fa13cdb9b0c79da424c3d05f4217","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"906468dad7061882fe0b86de96423c16d5e9bc1e":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["0f080986da691a3bba7b757f43ab72cdc82b57ce","c8b28a7124e9fa13cdb9b0c79da424c3d05f4217"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","c8b28a7124e9fa13cdb9b0c79da424c3d05f4217"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","906468dad7061882fe0b86de96423c16d5e9bc1e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8b28a7124e9fa13cdb9b0c79da424c3d05f4217":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","a3776dccca01c11e7046323cfad46a3b4a471233","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"906468dad7061882fe0b86de96423c16d5e9bc1e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"85a883878c0af761245ab048babc63d099f835f3":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["c8b28a7124e9fa13cdb9b0c79da424c3d05f4217","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}