{"path":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/prefix/geohash/TestGeohashUtils#testDecodeImpreciseLongitudeLatitude().mjava","commits":[{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/prefix/geohash/TestGeohashUtils#testDecodeImpreciseLongitudeLatitude().mjava","pathOld":"modules/spatial-lucene/src/test/java/org/apache/lucene/spatial/base/prefix/geohash/TestGeohashUtils#testDecodeImpreciseLongitudeLatitude().mjava","sourceNew":"  /**\n   * Pass condition: lat=84.6, lng=10.5 should be encoded and then decoded\n   * within 0.00001 of the original value\n   */\n  @Test\n  public void testDecodeImpreciseLongitudeLatitude() {\n    String hash = GeohashUtils.encodeLatLon(84.6, 10.5);\n\n    Point point = GeohashUtils.decode(hash, ctx);\n\n    assertEquals(84.6, point.getY(), 0.00001D);\n    assertEquals(10.5, point.getX(), 0.00001D);\n  }\n\n","sourceOld":"  /**\n   * Pass condition: lat=84.6, lng=10.5 should be encoded and then decoded\n   * within 0.00001 of the original value\n   */\n  @Test\n  public void testDecodeImpreciseLongitudeLatitude() {\n    String hash = GeohashUtils.encodeLatLon(84.6, 10.5);\n\n    Point point = GeohashUtils.decode(hash, ctx);\n\n    assertEquals(84.6, point.getY(), 0.00001D);\n    assertEquals(10.5, point.getX(), 0.00001D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"935445a30e9e8dc0240a7c78efc73d08c2faa6a8","date":1329778521,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/org/apache/lucene/spatial/base/prefix/geohash/TestGeohashUtils#testDecodeImpreciseLongitudeLatitude().mjava","pathOld":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/prefix/geohash/TestGeohashUtils#testDecodeImpreciseLongitudeLatitude().mjava","sourceNew":"  /**\n   * Pass condition: lat=84.6, lng=10.5 should be encoded and then decoded\n   * within 0.00001 of the original value\n   */\n  @Test\n  public void testDecodeImpreciseLongitudeLatitude() {\n    String hash = GeohashUtils.encodeLatLon(84.6, 10.5);\n\n    Point point = GeohashUtils.decode(hash, ctx);\n\n    assertEquals(84.6, point.getY(), 0.00001D);\n    assertEquals(10.5, point.getX(), 0.00001D);\n  }\n\n","sourceOld":"  /**\n   * Pass condition: lat=84.6, lng=10.5 should be encoded and then decoded\n   * within 0.00001 of the original value\n   */\n  @Test\n  public void testDecodeImpreciseLongitudeLatitude() {\n    String hash = GeohashUtils.encodeLatLon(84.6, 10.5);\n\n    Point point = GeohashUtils.decode(hash, ctx);\n\n    assertEquals(84.6, point.getY(), 0.00001D);\n    assertEquals(10.5, point.getX(), 0.00001D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}