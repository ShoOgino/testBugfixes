{"path":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeEncodingTestCase#testPolygonEncodingMaxLatMaxLon().mjava","commits":[{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeEncodingTestCase#testPolygonEncodingMaxLatMaxLon().mjava","pathOld":"/dev/null","sourceNew":"  //One shared point with MBR -> MaxLat, MaxLon\n  public void testPolygonEncodingMaxLatMaxLon() {\n    double ay = 1.0;\n    double ax = 0.0;\n    double by = 2.0;\n    double blon = 2.0;\n    double cy = 0.0;\n    double cx = 1.0;\n    int ayEnc = encodeY(ay);\n    int axEnc = encodeX(ax);\n    int byEnc = encodeY(cy);\n    int bxEnc = encodeX(cx);\n    int cyEnc = encodeY(by);\n    int cxEnc = encodeX(blon);\n    verifyEncodingPermutations(ayEnc, axEnc, byEnc, bxEnc, cyEnc, cxEnc);\n    byte[] b = new byte[7 * ShapeField.BYTES];\n    ShapeField.encodeTriangle(b, ayEnc, axEnc, byEnc, bxEnc, cyEnc, cxEnc);\n    int[] encoded = new int[6];\n    ShapeField.decodeTriangle(b, encoded);\n    assertTrue(encoded[0] == ayEnc);\n    assertTrue(encoded[1] == axEnc);\n    assertTrue(encoded[2] == byEnc);\n    assertTrue(encoded[3] == bxEnc);\n    assertTrue(encoded[4] == cyEnc);\n    assertTrue(encoded[5] == cxEnc);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ed90f8ba7e7be13d155f954862178b23a324125","date":1568020603,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeEncodingTestCase#testPolygonEncodingMaxLatMaxLon().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeEncodingTestCase#testPolygonEncodingMaxLatMaxLon().mjava","sourceNew":"  //One shared point with MBR -> MaxLat, MaxLon\n  public void testPolygonEncodingMaxLatMaxLon() {\n    double ay = 1.0;\n    double ax = 0.0;\n    double by = 2.0;\n    double blon = 2.0;\n    double cy = 0.0;\n    double cx = 1.0;\n    int ayEnc = encodeY(ay);\n    int axEnc = encodeX(ax);\n    int byEnc = encodeY(cy);\n    int bxEnc = encodeX(cx);\n    int cyEnc = encodeY(by);\n    int cxEnc = encodeX(blon);\n    verifyEncodingPermutations(ayEnc, axEnc, byEnc, bxEnc, cyEnc, cxEnc);\n    byte[] b = new byte[7 * ShapeField.BYTES];\n    ShapeField.encodeTriangle(b, ayEnc, axEnc, true, byEnc, bxEnc, true, cyEnc, cxEnc, true);\n    ShapeField.DecodedTriangle encoded = new ShapeField.DecodedTriangle();\n    ShapeField.decodeTriangle(b, encoded);\n    assertEquals(encoded.aY, ayEnc);\n    assertEquals(encoded.aX, axEnc);\n    assertEquals(encoded.bY, byEnc);\n    assertEquals(encoded.bX, bxEnc);\n    assertEquals(encoded.cY, cyEnc);\n    assertEquals(encoded.cX, cxEnc);\n  }\n\n","sourceOld":"  //One shared point with MBR -> MaxLat, MaxLon\n  public void testPolygonEncodingMaxLatMaxLon() {\n    double ay = 1.0;\n    double ax = 0.0;\n    double by = 2.0;\n    double blon = 2.0;\n    double cy = 0.0;\n    double cx = 1.0;\n    int ayEnc = encodeY(ay);\n    int axEnc = encodeX(ax);\n    int byEnc = encodeY(cy);\n    int bxEnc = encodeX(cx);\n    int cyEnc = encodeY(by);\n    int cxEnc = encodeX(blon);\n    verifyEncodingPermutations(ayEnc, axEnc, byEnc, bxEnc, cyEnc, cxEnc);\n    byte[] b = new byte[7 * ShapeField.BYTES];\n    ShapeField.encodeTriangle(b, ayEnc, axEnc, byEnc, bxEnc, cyEnc, cxEnc);\n    int[] encoded = new int[6];\n    ShapeField.decodeTriangle(b, encoded);\n    assertTrue(encoded[0] == ayEnc);\n    assertTrue(encoded[1] == axEnc);\n    assertTrue(encoded[2] == byEnc);\n    assertTrue(encoded[3] == bxEnc);\n    assertTrue(encoded[4] == cyEnc);\n    assertTrue(encoded[5] == cxEnc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/BaseShapeEncodingTestCase#testPolygonEncodingMaxLatMaxLon().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeEncodingTestCase#testPolygonEncodingMaxLatMaxLon().mjava","sourceNew":"  //One shared point with MBR -> MaxLat, MaxLon\n  public void testPolygonEncodingMaxLatMaxLon() {\n    double ay = 1.0;\n    double ax = 0.0;\n    double by = 2.0;\n    double blon = 2.0;\n    double cy = 0.0;\n    double cx = 1.0;\n    int ayEnc = encodeY(ay);\n    int axEnc = encodeX(ax);\n    int byEnc = encodeY(cy);\n    int bxEnc = encodeX(cx);\n    int cyEnc = encodeY(by);\n    int cxEnc = encodeX(blon);\n    verifyEncodingPermutations(ayEnc, axEnc, byEnc, bxEnc, cyEnc, cxEnc);\n    byte[] b = new byte[7 * ShapeField.BYTES];\n    ShapeField.encodeTriangle(b, ayEnc, axEnc, true, byEnc, bxEnc, true, cyEnc, cxEnc, true);\n    ShapeField.DecodedTriangle encoded = new ShapeField.DecodedTriangle();\n    ShapeField.decodeTriangle(b, encoded);\n    assertEquals(encoded.aY, ayEnc);\n    assertEquals(encoded.aX, axEnc);\n    assertEquals(encoded.bY, byEnc);\n    assertEquals(encoded.bX, bxEnc);\n    assertEquals(encoded.cY, cyEnc);\n    assertEquals(encoded.cX, cxEnc);\n  }\n\n","sourceOld":"  //One shared point with MBR -> MaxLat, MaxLon\n  public void testPolygonEncodingMaxLatMaxLon() {\n    double ay = 1.0;\n    double ax = 0.0;\n    double by = 2.0;\n    double blon = 2.0;\n    double cy = 0.0;\n    double cx = 1.0;\n    int ayEnc = encodeY(ay);\n    int axEnc = encodeX(ax);\n    int byEnc = encodeY(cy);\n    int bxEnc = encodeX(cx);\n    int cyEnc = encodeY(by);\n    int cxEnc = encodeX(blon);\n    verifyEncodingPermutations(ayEnc, axEnc, byEnc, bxEnc, cyEnc, cxEnc);\n    byte[] b = new byte[7 * ShapeField.BYTES];\n    ShapeField.encodeTriangle(b, ayEnc, axEnc, true, byEnc, bxEnc, true, cyEnc, cxEnc, true);\n    ShapeField.DecodedTriangle encoded = new ShapeField.DecodedTriangle();\n    ShapeField.decodeTriangle(b, encoded);\n    assertEquals(encoded.aY, ayEnc);\n    assertEquals(encoded.aX, axEnc);\n    assertEquals(encoded.bY, byEnc);\n    assertEquals(encoded.bX, bxEnc);\n    assertEquals(encoded.cY, cyEnc);\n    assertEquals(encoded.cX, cxEnc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["5ed90f8ba7e7be13d155f954862178b23a324125"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ed90f8ba7e7be13d155f954862178b23a324125":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["5ed90f8ba7e7be13d155f954862178b23a324125"],"5ed90f8ba7e7be13d155f954862178b23a324125":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}