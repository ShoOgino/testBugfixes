{"path":"lucene/core/src/java/org/apache/lucene/document/LatLonDocValuesPointInPolygonQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"cf78061c9d70ef5c0d858908e932205ee2a4a39a","date":1567496758,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonDocValuesPointInPolygonQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final Polygon2D tree = Polygon2D.create(polygons);\n      final GeoEncodingUtils.PolygonPredicate polygonPredicate = GeoEncodingUtils.createPolygonPredicate(polygons, tree);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (polygonPredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 1000f; // TODO: what should it be?\n          }\n        };\n        return new ConstantScoreScorer(this, boost, scoreMode, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonDocValuesPointInPolygonQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LatLonDocValuesPointInPolygonQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final Component2D tree = Polygon2D.create(polygons);\n      final GeoEncodingUtils.PolygonPredicate polygonPredicate = GeoEncodingUtils.createComponentPredicate(tree);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (polygonPredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 1000f; // TODO: what should it be?\n          }\n        };\n        return new ConstantScoreScorer(this, boost, scoreMode, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final Polygon2D tree = Polygon2D.create(polygons);\n      final GeoEncodingUtils.PolygonPredicate polygonPredicate = GeoEncodingUtils.createPolygonPredicate(polygons, tree);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (polygonPredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 1000f; // TODO: what should it be?\n          }\n        };\n        return new ConstantScoreScorer(this, boost, scoreMode, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonDocValuesPointInPolygonQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LatLonDocValuesPointInPolygonQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final Component2D tree = Polygon2D.create(polygons);\n      final GeoEncodingUtils.PolygonPredicate polygonPredicate = GeoEncodingUtils.createComponentPredicate(tree);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (polygonPredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 1000f; // TODO: what should it be?\n          }\n        };\n        return new ConstantScoreScorer(this, boost, scoreMode, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final Polygon2D tree = Polygon2D.create(polygons);\n      final GeoEncodingUtils.PolygonPredicate polygonPredicate = GeoEncodingUtils.createPolygonPredicate(polygons, tree);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (polygonPredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 1000f; // TODO: what should it be?\n          }\n        };\n        return new ConstantScoreScorer(this, boost, scoreMode, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a923e28c9d079048c6993884ec89c44f0380b923","date":1581100153,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonDocValuesPointInPolygonQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LatLonDocValuesPointInPolygonQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final Component2D tree = LatLonGeometry.create(polygons);\n      final GeoEncodingUtils.PolygonPredicate polygonPredicate = GeoEncodingUtils.createComponentPredicate(tree);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (polygonPredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 1000f; // TODO: what should it be?\n          }\n        };\n        return new ConstantScoreScorer(this, boost, scoreMode, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final Component2D tree = Polygon2D.create(polygons);\n      final GeoEncodingUtils.PolygonPredicate polygonPredicate = GeoEncodingUtils.createComponentPredicate(tree);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (polygonPredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 1000f; // TODO: what should it be?\n          }\n        };\n        return new ConstantScoreScorer(this, boost, scoreMode, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["cf78061c9d70ef5c0d858908e932205ee2a4a39a"],"cf78061c9d70ef5c0d858908e932205ee2a4a39a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a923e28c9d079048c6993884ec89c44f0380b923":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a923e28c9d079048c6993884ec89c44f0380b923"],"b0b597c65628ca9e73913a07e81691f8229bae35":["cf78061c9d70ef5c0d858908e932205ee2a4a39a","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["a923e28c9d079048c6993884ec89c44f0380b923","b0b597c65628ca9e73913a07e81691f8229bae35"],"cf78061c9d70ef5c0d858908e932205ee2a4a39a":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf78061c9d70ef5c0d858908e932205ee2a4a39a"],"a923e28c9d079048c6993884ec89c44f0380b923":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}