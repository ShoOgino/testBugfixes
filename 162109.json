{"path":"lucene/core/src/java/org/apache/lucene/document/IntRange#getMax(int).mjava","commits":[{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/IntRange#getMax(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/IntRangeField#getMax(int).mjava","sourceNew":"  /**\n   * Get the max value for the given dimension\n   * @param dimension the dimension, always positive\n   * @return the decoded max value\n   */\n  public int getMax(int dimension) {\n    if (dimension < 0 || dimension >= type.pointDimensionCount()/2) {\n      throw new IllegalArgumentException(\"dimension request (\" + dimension +\n          \") out of bounds for field (name=\" + name + \" dimensions=\" + type.pointDimensionCount()/2 + \"). \");\n    }\n    return decodeMax(((BytesRef)fieldsData).bytes, dimension);\n  }\n\n","sourceOld":"  /**\n   * Get the max value for the given dimension\n   * @param dimension the dimension, always positive\n   * @return the decoded max value\n   */\n  public int getMax(int dimension) {\n    if (dimension < 0 || dimension >= type.pointDimensionCount()/2) {\n      throw new IllegalArgumentException(\"dimension request (\" + dimension +\n          \") out of bounds for field (name=\" + name + \" dimensions=\" + type.pointDimensionCount()/2 + \"). \");\n    }\n    return decodeMax(((BytesRef)fieldsData).bytes, dimension);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/IntRange#getMax(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/IntRange#getMax(int).mjava","sourceNew":"  /**\n   * Get the max value for the given dimension\n   * @param dimension the dimension, always positive\n   * @return the decoded max value\n   */\n  public int getMax(int dimension) {\n    FutureObjects.checkIndex(dimension, type.pointDimensionCount()/2);\n    return decodeMax(((BytesRef)fieldsData).bytes, dimension);\n  }\n\n","sourceOld":"  /**\n   * Get the max value for the given dimension\n   * @param dimension the dimension, always positive\n   * @return the decoded max value\n   */\n  public int getMax(int dimension) {\n    if (dimension < 0 || dimension >= type.pointDimensionCount()/2) {\n      throw new IllegalArgumentException(\"dimension request (\" + dimension +\n          \") out of bounds for field (name=\" + name + \" dimensions=\" + type.pointDimensionCount()/2 + \"). \");\n    }\n    return decodeMax(((BytesRef)fieldsData).bytes, dimension);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/IntRange#getMax(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/IntRange#getMax(int).mjava","sourceNew":"  /**\n   * Get the max value for the given dimension\n   * @param dimension the dimension, always positive\n   * @return the decoded max value\n   */\n  public int getMax(int dimension) {\n    FutureObjects.checkIndex(dimension, type.pointDataDimensionCount()/2);\n    return decodeMax(((BytesRef)fieldsData).bytes, dimension);\n  }\n\n","sourceOld":"  /**\n   * Get the max value for the given dimension\n   * @param dimension the dimension, always positive\n   * @return the decoded max value\n   */\n  public int getMax(int dimension) {\n    FutureObjects.checkIndex(dimension, type.pointDimensionCount()/2);\n    return decodeMax(((BytesRef)fieldsData).bytes, dimension);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/IntRange#getMax(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/IntRange#getMax(int).mjava","sourceNew":"  /**\n   * Get the max value for the given dimension\n   * @param dimension the dimension, always positive\n   * @return the decoded max value\n   */\n  public int getMax(int dimension) {\n    Objects.checkIndex(dimension, type.pointDataDimensionCount()/2);\n    return decodeMax(((BytesRef)fieldsData).bytes, dimension);\n  }\n\n","sourceOld":"  /**\n   * Get the max value for the given dimension\n   * @param dimension the dimension, always positive\n   * @return the decoded max value\n   */\n  public int getMax(int dimension) {\n    FutureObjects.checkIndex(dimension, type.pointDataDimensionCount()/2);\n    return decodeMax(((BytesRef)fieldsData).bytes, dimension);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/IntRange#getMax(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/IntRange#getMax(int).mjava","sourceNew":"  /**\n   * Get the max value for the given dimension\n   * @param dimension the dimension, always positive\n   * @return the decoded max value\n   */\n  public int getMax(int dimension) {\n    Objects.checkIndex(dimension, type.pointDimensionCount()/2);\n    return decodeMax(((BytesRef)fieldsData).bytes, dimension);\n  }\n\n","sourceOld":"  /**\n   * Get the max value for the given dimension\n   * @param dimension the dimension, always positive\n   * @return the decoded max value\n   */\n  public int getMax(int dimension) {\n    Objects.checkIndex(dimension, type.pointDataDimensionCount()/2);\n    return decodeMax(((BytesRef)fieldsData).bytes, dimension);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["f6652c943595e92c187ee904c382863013eae28f"],"456d7e7092cb043c740b4674301660ee8abc26fe":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"f6652c943595e92c187ee904c382863013eae28f":["456d7e7092cb043c740b4674301660ee8abc26fe"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"456d7e7092cb043c740b4674301660ee8abc26fe":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["456d7e7092cb043c740b4674301660ee8abc26fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}