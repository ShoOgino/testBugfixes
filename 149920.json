{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    DocsEnum docs = terms.docs(MultiFields.getLiveDocs(reader), termBytes, null);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    DocsEnum docs = terms.docs(MultiFields.getLiveDocs(reader), termBytes, null);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    DocsEnum docs = terms.docs(MultiFields.getLiveDocs(reader), termBytes, null);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    DocsEnum docs = terms.docs(MultiFields.getLiveDocs(reader), termBytes, null);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    DocsEnum docs = terms.docs(MultiFields.getLiveDocs(reader), termBytes, null);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    DocsEnum docs = terms.docs(MultiFields.getLiveDocs(reader), termBytes, null);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2297162a22c55456e200caef2cbcb00fe381120","date":1321551342,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(MultiFields.getLiveDocs(reader), null);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    DocsEnum docs = terms.docs(MultiFields.getLiveDocs(reader), termBytes, null);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(MultiFields.getLiveDocs(reader), null, false);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(MultiFields.getLiveDocs(reader), null);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(MultiFields.getLiveDocs(reader), null, false);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(MultiFields.getLiveDocs(reader), null);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d207426bd26fa5c1014e26d21d87603aea68b7","date":1327944562,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, false);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(MultiFields.getLiveDocs(reader), null, false);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, false);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(MultiFields.getLiveDocs(reader), null, false);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    InvertedFields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, false);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, false);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, false);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    InvertedFields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, false);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, 0);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, false);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":["96d207426bd26fa5c1014e26d21d87603aea68b7"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, 0);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, false);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, 0);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, false);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, 0);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @param t\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, 0);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, DocsEnum.FLAG_NONE);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, 0);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, DocsEnum.FLAG_NONE);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, 0);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, DocsEnum.FLAG_NONE);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, DocsEnum.FLAG_NONE);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, DocsEnum.FLAG_NONE);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, DocsEnum.FLAG_NONE);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = leafReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(leafReader.getLiveDocs(), null, DocsEnum.FLAG_NONE);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = atomicReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(atomicReader.getLiveDocs(), null, DocsEnum.FLAG_NONE);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8028ab7a24273833d53d35eb160dba5b57283cf5","date":1416767720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Terms terms = leafReader.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(leafReader.getLiveDocs(), null, DocsEnum.FLAG_NONE);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Fields fields = leafReader.fields();\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(leafReader.getLiveDocs(), null, DocsEnum.FLAG_NONE);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","ac103e727df44f5f5040f5a67860472e884aa0e3","2da23fa5b7090ec7a4c4b09f63da2fa810cf7ee4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Terms terms = leafReader.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    PostingsEnum docs = termsEnum.postings(leafReader.getLiveDocs(), null, PostingsEnum.FLAG_NONE);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Terms terms = leafReader.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(leafReader.getLiveDocs(), null, DocsEnum.FLAG_NONE);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Terms terms = leafReader.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    PostingsEnum docs = termsEnum.postings(leafReader.getLiveDocs(), null, PostingsEnum.NONE);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Terms terms = leafReader.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    PostingsEnum docs = termsEnum.postings(leafReader.getLiveDocs(), null, PostingsEnum.FLAG_NONE);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5311f0bff57ce15a23909f4cfb953773630534","date":1424827033,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Terms terms = leafReader.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    PostingsEnum docs = termsEnum.postings(leafReader.getLiveDocs(), null, PostingsEnum.NONE);\n    // nocommit: check\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Terms terms = leafReader.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    PostingsEnum docs = termsEnum.postings(leafReader.getLiveDocs(), null, PostingsEnum.NONE);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77aeaebb451427f825381042f68a6916417d1d","date":1427819930,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Terms terms = leafReader.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    PostingsEnum docs = termsEnum.postings(leafReader.getLiveDocs(), null, PostingsEnum.NONE);\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Terms terms = leafReader.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    PostingsEnum docs = termsEnum.postings(leafReader.getLiveDocs(), null, PostingsEnum.NONE);\n    // nocommit: check\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Terms terms = leafReader.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    PostingsEnum docs = termsEnum.postings(leafReader.getLiveDocs(), null, PostingsEnum.NONE);\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Terms terms = leafReader.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    PostingsEnum docs = termsEnum.postings(leafReader.getLiveDocs(), null, PostingsEnum.NONE);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Terms terms = leafReader.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator();\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    PostingsEnum docs = termsEnum.postings(leafReader.getLiveDocs(), null, PostingsEnum.NONE);\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Terms terms = leafReader.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    PostingsEnum docs = termsEnum.postings(leafReader.getLiveDocs(), null, PostingsEnum.NONE);\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Terms terms = leafReader.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator();\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    PostingsEnum docs = termsEnum.postings(null, PostingsEnum.NONE);\n    docs = BitsFilteredPostingsEnum.wrap(docs, leafReader.getLiveDocs());\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Terms terms = leafReader.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator();\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    PostingsEnum docs = termsEnum.postings(leafReader.getLiveDocs(), null, PostingsEnum.NONE);\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code> Returns -1 if no document was found. This\n   * method is primarily intended for clients that want to fetch documents using a unique identifier.\"\n   * \n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Terms terms = leafReader.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator();\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    PostingsEnum docs = termsEnum.postings(null, PostingsEnum.NONE);\n    docs = BitsFilteredPostingsEnum.wrap(docs, leafReader.getLiveDocs());\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code>\n   * Returns -1 if no document was found.\n   * This method is primarily intended for clients that want to fetch\n   * documents using a unique identifier.\"\n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Terms terms = leafReader.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator();\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    PostingsEnum docs = termsEnum.postings(null, PostingsEnum.NONE);\n    docs = BitsFilteredPostingsEnum.wrap(docs, leafReader.getLiveDocs());\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf29cc8a76949bbcbc15b386a9e46a533f5b3332","date":1527778512,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getFirstMatch(Term).mjava","sourceNew":"  /**\n   * Returns the first document number containing the term <code>t</code> Returns -1 if no document was found. This\n   * method is primarily intended for clients that want to fetch documents using a unique identifier.\"\n   * \n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    long pair = lookupId(t.field(), t.bytes());\n    if (pair == -1) {\n      return -1;\n    } else {\n      final int segIndex = (int) (pair >> 32);\n      final int segDocId = (int) pair;\n      return leafContexts.get(segIndex).docBase + segDocId;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the first document number containing the term <code>t</code> Returns -1 if no document was found. This\n   * method is primarily intended for clients that want to fetch documents using a unique identifier.\"\n   * \n   * @return the first document number containing the term\n   */\n  public int getFirstMatch(Term t) throws IOException {\n    Terms terms = leafReader.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator();\n    if (!termsEnum.seekExact(termBytes)) {\n      return -1;\n    }\n    PostingsEnum docs = termsEnum.postings(null, PostingsEnum.NONE);\n    docs = BitsFilteredPostingsEnum.wrap(docs, leafReader.getLiveDocs());\n    int id = docs.nextDoc();\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"cb5311f0bff57ce15a23909f4cfb953773630534":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"bf29cc8a76949bbcbc15b386a9e46a533f5b3332":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4","cb77aeaebb451427f825381042f68a6916417d1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"cb77aeaebb451427f825381042f68a6916417d1d":["cb5311f0bff57ce15a23909f4cfb953773630534"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["02331260bb246364779cb6f04919ca47900d01bb"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"e2297162a22c55456e200caef2cbcb00fe381120":["c26f00b574427b55127e869b935845554afde1fa"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["e2297162a22c55456e200caef2cbcb00fe381120"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"51f5280f31484820499077f41fcdfe92d527d9dc":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["872cff1d3a554e0cd64014cd97f88d3002b0f491","96d207426bd26fa5c1014e26d21d87603aea68b7"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"8028ab7a24273833d53d35eb160dba5b57283cf5":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["e2297162a22c55456e200caef2cbcb00fe381120","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","02331260bb246364779cb6f04919ca47900d01bb"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf29cc8a76949bbcbc15b386a9e46a533f5b3332"],"02331260bb246364779cb6f04919ca47900d01bb":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c26f00b574427b55127e869b935845554afde1fa":["e2297162a22c55456e200caef2cbcb00fe381120"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"cb5311f0bff57ce15a23909f4cfb953773630534":["cb77aeaebb451427f825381042f68a6916417d1d"],"bf29cc8a76949bbcbc15b386a9e46a533f5b3332":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"cb77aeaebb451427f825381042f68a6916417d1d":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"e2297162a22c55456e200caef2cbcb00fe381120":["872cff1d3a554e0cd64014cd97f88d3002b0f491","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["96d207426bd26fa5c1014e26d21d87603aea68b7","5cab9a86bd67202d20b6adc463008c8e982b070a","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["bf29cc8a76949bbcbc15b386a9e46a533f5b3332"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["cb5311f0bff57ce15a23909f4cfb953773630534","6b4e3cd382d0d075a0f1725649c084bb6510c483"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"8028ab7a24273833d53d35eb160dba5b57283cf5":["51f5280f31484820499077f41fcdfe92d527d9dc"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["c9fb5f46e264daf5ba3860defe623a89d202dd87","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"02331260bb246364779cb6f04919ca47900d01bb":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","b65b350ca9588f9fc76ce7d6804160d06c45ff42","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}