{"path":"src/java/org/apache/lucene/search/PhrasePrefixQuery#add(Term[]).mjava","commits":[{"id":"c7410a1292a8bc3af75faed6b753d861a192e6a5","date":1027003198,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery#add(Term[]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Describe <code>add</code> method here.\n     *\n     * @param terms a <code>Term[]</code> value\n     */\n    public void add(Term[] terms)\n    {\n\tif (_termArrays.size() == 0)\n\t    _field = terms[0].field();\n\n      \tfor (int i=0; i<terms.length; i++)\n\t{\n\t    if (terms[i].field() != _field)\n\t    {\n\t\tthrow new IllegalArgumentException(\n\t\t    \"All phrase terms must be in the same field (\" + _field + \"): \"\n\t\t    + terms[i]);\n\t    }\n\t}\n\n\t_termArrays.add(terms);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery#add(Term[]).mjava","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery#add(Term[]).mjava","sourceNew":"  /* Add multiple terms at the next position in the phrase.  Any of the terms\n   * may match.\n   *\n   * @see PhraseQuery#add(Term)\n   */\n  public void add(Term[] terms) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n    \n    for (int i=0; i<terms.length; i++) {\n      if (terms[i].field() != field) {\n        throw new IllegalArgumentException\n          (\"All phrase terms must be in the same field (\" + field + \"): \"\n           + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n  }\n\n","sourceOld":"    /**\n     * Describe <code>add</code> method here.\n     *\n     * @param terms a <code>Term[]</code> value\n     */\n    public void add(Term[] terms)\n    {\n\tif (_termArrays.size() == 0)\n\t    _field = terms[0].field();\n\n      \tfor (int i=0; i<terms.length; i++)\n\t{\n\t    if (terms[i].field() != _field)\n\t    {\n\t\tthrow new IllegalArgumentException(\n\t\t    \"All phrase terms must be in the same field (\" + _field + \"): \"\n\t\t    + terms[i]);\n\t    }\n\t}\n\n\t_termArrays.add(terms);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4988178cfbf5117763a956901f39d3efa3282e72","date":1095241130,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery#add(Term[]).mjava","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery#add(Term[]).mjava","sourceNew":"  /* Add multiple terms at the next position in the phrase.  Any of the terms\n   * may match.\n   *\n   * @see PhraseQuery#add(Term)\n   */\n  public void add(Term[] terms) {\n      int position = 0;\n      if(positions.size() > 0)\n          position = ((Integer) positions.lastElement()).intValue() + 1;\n      \n      add(terms, position);\n  }\n\n","sourceOld":"  /* Add multiple terms at the next position in the phrase.  Any of the terms\n   * may match.\n   *\n   * @see PhraseQuery#add(Term)\n   */\n  public void add(Term[] terms) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n    \n    for (int i=0; i<terms.length; i++) {\n      if (terms[i].field() != field) {\n        throw new IllegalArgumentException\n          (\"All phrase terms must be in the same field (\" + field + \"): \"\n           + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1f1906b700db12f451bb88505ce6449a7981df4","date":1095448874,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery#add(Term[]).mjava","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery#add(Term[]).mjava","sourceNew":"  /** Add multiple terms at the next position in the phrase.  Any of the terms\n   * may match.\n   *\n   * @see PhraseQuery#add(Term)\n   */\n  public void add(Term[] terms) {\n      int position = 0;\n      if(positions.size() > 0)\n          position = ((Integer) positions.lastElement()).intValue() + 1;\n      \n      add(terms, position);\n  }\n\n","sourceOld":"  /* Add multiple terms at the next position in the phrase.  Any of the terms\n   * may match.\n   *\n   * @see PhraseQuery#add(Term)\n   */\n  public void add(Term[] terms) {\n      int position = 0;\n      if(positions.size() > 0)\n          position = ((Integer) positions.lastElement()).intValue() + 1;\n      \n      add(terms, position);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4bf1148b1d254fc1532e611c3fa24f404a262af","date":1095449054,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery#add(Term[]).mjava","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery#add(Term[]).mjava","sourceNew":"  /** Add multiple terms at the next position in the phrase.  Any of the terms\n   * may match.\n   *\n   * @see PhraseQuery#add(Term)\n   */\n  public void add(Term[] terms) {\n    int position = 0;\n    if (positions.size() > 0)\n      position = ((Integer) positions.lastElement()).intValue() + 1;\n\n    add(terms, position);\n  }\n\n","sourceOld":"  /** Add multiple terms at the next position in the phrase.  Any of the terms\n   * may match.\n   *\n   * @see PhraseQuery#add(Term)\n   */\n  public void add(Term[] terms) {\n      int position = 0;\n      if(positions.size() > 0)\n          position = ((Integer) positions.lastElement()).intValue() + 1;\n      \n      add(terms, position);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery#add(Term[]).mjava","sourceNew":null,"sourceOld":"  /** Add multiple terms at the next position in the phrase.  Any of the terms\n   * may match.\n   *\n   * @see PhraseQuery#add(Term)\n   */\n  public void add(Term[] terms) {\n    int position = 0;\n    if (positions.size() > 0)\n      position = ((Integer) positions.lastElement()).intValue() + 1;\n\n    add(terms, position);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4bf1148b1d254fc1532e611c3fa24f404a262af":["f1f1906b700db12f451bb88505ce6449a7981df4"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["c4bf1148b1d254fc1532e611c3fa24f404a262af"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["c7410a1292a8bc3af75faed6b753d861a192e6a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f1f1906b700db12f451bb88505ce6449a7981df4":["4988178cfbf5117763a956901f39d3efa3282e72"],"c7410a1292a8bc3af75faed6b753d861a192e6a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"4988178cfbf5117763a956901f39d3efa3282e72":["27274410c91546fcfc28e692abd2dd77ca99be4b"]},"commit2Childs":{"c4bf1148b1d254fc1532e611c3fa24f404a262af":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["4988178cfbf5117763a956901f39d3efa3282e72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7410a1292a8bc3af75faed6b753d861a192e6a5"],"f1f1906b700db12f451bb88505ce6449a7981df4":["c4bf1148b1d254fc1532e611c3fa24f404a262af"],"c7410a1292a8bc3af75faed6b753d861a192e6a5":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"4988178cfbf5117763a956901f39d3efa3282e72":["f1f1906b700db12f451bb88505ce6449a7981df4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}