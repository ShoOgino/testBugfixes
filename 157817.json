{"path":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.ConjunctionTwoPhaseIterator#ConjunctionTwoPhaseIterator(DocIdSetIterator,List[#-extends-TwoPhaseIterator]).mjava","commits":[{"id":"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","date":1465831664,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.ConjunctionTwoPhaseIterator#ConjunctionTwoPhaseIterator(DocIdSetIterator,List[#-extends-TwoPhaseIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#TwoPhaseConjunctionDISI(List[#-extends-DocIdSetIterator],List[TwoPhaseIterator]).mjava","sourceNew":"    private ConjunctionTwoPhaseIterator(DocIdSetIterator approximation,\n        List<? extends TwoPhaseIterator> twoPhaseIterators) {\n      super(approximation);\n      assert twoPhaseIterators.size() > 0;\n\n      CollectionUtil.timSort(twoPhaseIterators, new Comparator<TwoPhaseIterator>() {\n        @Override\n        public int compare(TwoPhaseIterator o1, TwoPhaseIterator o2) {\n          return Float.compare(o1.matchCost(), o2.matchCost());\n        }\n      });\n\n      this.twoPhaseIterators = twoPhaseIterators.toArray(new TwoPhaseIterator[twoPhaseIterators.size()]);\n\n      // Compute the matchCost as the total matchCost of the sub iterators.\n      // TODO: This could be too high because the matching is done cheapest first: give the lower matchCosts a higher weight.\n      float totalMatchCost = 0;\n      for (TwoPhaseIterator tpi : twoPhaseIterators) {\n        totalMatchCost += tpi.matchCost();\n      }\n      matchCost = totalMatchCost;\n    }\n\n","sourceOld":"    private TwoPhaseConjunctionDISI(List<? extends DocIdSetIterator> iterators, List<TwoPhaseIterator> twoPhaseIterators) {\n      super(new ConjunctionDISI(iterators));\n      assert twoPhaseIterators.size() > 0;\n\n      CollectionUtil.timSort(twoPhaseIterators, new Comparator<TwoPhaseIterator>() {\n        @Override\n        public int compare(TwoPhaseIterator o1, TwoPhaseIterator o2) {\n          return Float.compare(o1.matchCost(), o2.matchCost());\n        }\n      });\n\n      this.twoPhaseIterators = twoPhaseIterators.toArray(new TwoPhaseIterator[twoPhaseIterators.size()]);\n\n      // Compute the matchCost as the total matchCost of the sub iterators.\n      // TODO: This could be too high because the matching is done cheapest first: give the lower matchCosts a higher weight.\n      float totalMatchCost = 0;\n      for (TwoPhaseIterator tpi : twoPhaseIterators) {\n        totalMatchCost += tpi.matchCost();\n      }\n      matchCost = totalMatchCost;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.ConjunctionTwoPhaseIterator#ConjunctionTwoPhaseIterator(DocIdSetIterator,List[#-extends-TwoPhaseIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#TwoPhaseConjunctionDISI(List[#-extends-DocIdSetIterator],List[TwoPhaseIterator]).mjava","sourceNew":"    private ConjunctionTwoPhaseIterator(DocIdSetIterator approximation,\n        List<? extends TwoPhaseIterator> twoPhaseIterators) {\n      super(approximation);\n      assert twoPhaseIterators.size() > 0;\n\n      CollectionUtil.timSort(twoPhaseIterators, new Comparator<TwoPhaseIterator>() {\n        @Override\n        public int compare(TwoPhaseIterator o1, TwoPhaseIterator o2) {\n          return Float.compare(o1.matchCost(), o2.matchCost());\n        }\n      });\n\n      this.twoPhaseIterators = twoPhaseIterators.toArray(new TwoPhaseIterator[twoPhaseIterators.size()]);\n\n      // Compute the matchCost as the total matchCost of the sub iterators.\n      // TODO: This could be too high because the matching is done cheapest first: give the lower matchCosts a higher weight.\n      float totalMatchCost = 0;\n      for (TwoPhaseIterator tpi : twoPhaseIterators) {\n        totalMatchCost += tpi.matchCost();\n      }\n      matchCost = totalMatchCost;\n    }\n\n","sourceOld":"    private TwoPhaseConjunctionDISI(List<? extends DocIdSetIterator> iterators, List<TwoPhaseIterator> twoPhaseIterators) {\n      super(new ConjunctionDISI(iterators));\n      assert twoPhaseIterators.size() > 0;\n\n      CollectionUtil.timSort(twoPhaseIterators, new Comparator<TwoPhaseIterator>() {\n        @Override\n        public int compare(TwoPhaseIterator o1, TwoPhaseIterator o2) {\n          return Float.compare(o1.matchCost(), o2.matchCost());\n        }\n      });\n\n      this.twoPhaseIterators = twoPhaseIterators.toArray(new TwoPhaseIterator[twoPhaseIterators.size()]);\n\n      // Compute the matchCost as the total matchCost of the sub iterators.\n      // TODO: This could be too high because the matching is done cheapest first: give the lower matchCosts a higher weight.\n      float totalMatchCost = 0;\n      for (TwoPhaseIterator tpi : twoPhaseIterators) {\n        totalMatchCost += tpi.matchCost();\n      }\n      matchCost = totalMatchCost;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.ConjunctionTwoPhaseIterator#ConjunctionTwoPhaseIterator(DocIdSetIterator,List[#-extends-TwoPhaseIterator]).mjava","pathOld":"/dev/null","sourceNew":"    private ConjunctionTwoPhaseIterator(DocIdSetIterator approximation,\n        List<? extends TwoPhaseIterator> twoPhaseIterators) {\n      super(approximation);\n      assert twoPhaseIterators.size() > 0;\n\n      CollectionUtil.timSort(twoPhaseIterators, new Comparator<TwoPhaseIterator>() {\n        @Override\n        public int compare(TwoPhaseIterator o1, TwoPhaseIterator o2) {\n          return Float.compare(o1.matchCost(), o2.matchCost());\n        }\n      });\n\n      this.twoPhaseIterators = twoPhaseIterators.toArray(new TwoPhaseIterator[twoPhaseIterators.size()]);\n\n      // Compute the matchCost as the total matchCost of the sub iterators.\n      // TODO: This could be too high because the matching is done cheapest first: give the lower matchCosts a higher weight.\n      float totalMatchCost = 0;\n      for (TwoPhaseIterator tpi : twoPhaseIterators) {\n        totalMatchCost += tpi.matchCost();\n      }\n      matchCost = totalMatchCost;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"]},"commit2Childs":{"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}