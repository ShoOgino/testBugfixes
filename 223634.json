{"path":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#buildSubstitutableProperties().mjava","commits":[{"id":"1e9769bcabf28416689da7ec56a0c799b2a66b87","date":1376765390,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#buildSubstitutableProperties().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create the properties object used by resource loaders, etc, for property\n   * substitution.  The default solr properties are prefixed with 'solr.core.', so,\n   * e.g., 'name' becomes 'solr.core.name'\n   */\n  protected void buildSubstitutableProperties() {\n    for (String propName : coreProperties.stringPropertyNames()) {\n      String propValue = coreProperties.getProperty(propName);\n      if (!isUserDefinedProperty(propName))\n        propName = \"solr.core.\" + propName;\n      substitutableProperties.setProperty(propName, propValue);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#buildSubstitutableProperties().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create the properties object used by resource loaders, etc, for property\n   * substitution.  The default solr properties are prefixed with 'solr.core.', so,\n   * e.g., 'name' becomes 'solr.core.name'\n   */\n  protected void buildSubstitutableProperties() {\n    for (String propName : coreProperties.stringPropertyNames()) {\n      String propValue = coreProperties.getProperty(propName);\n      if (!isUserDefinedProperty(propName))\n        propName = \"solr.core.\" + propName;\n      substitutableProperties.setProperty(propName, propValue);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#buildSubstitutableProperties().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create the properties object used by resource loaders, etc, for property\n   * substitution.  The default solr properties are prefixed with 'solr.core.', so,\n   * e.g., 'name' becomes 'solr.core.name'\n   */\n  protected void buildSubstitutableProperties() {\n    for (String propName : coreProperties.stringPropertyNames()) {\n      String propValue = coreProperties.getProperty(propName);\n      if (!isUserDefinedProperty(propName))\n        propName = \"solr.core.\" + propName;\n      substitutableProperties.setProperty(propName, propValue);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8905f348f16dd6091f3ec91f99a4b69f326bfae7","date":1380310578,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#buildSubstitutableProperties().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#buildSubstitutableProperties().mjava","sourceNew":"  /**\n   * Create the properties object used by resource loaders, etc, for property\n   * substitution.  The default solr properties are prefixed with 'solr.core.', so,\n   * e.g., 'name' becomes 'solr.core.name'\n   */\n  protected void buildSubstitutableProperties() {\n    for (String propName : coreProperties.stringPropertyNames()) {\n      String propValue = coreProperties.getProperty(propName);\n      if (!isUserDefinedProperty(propName))\n        propName = SOLR_CORE_PROP_PREFIX + propName;\n      substitutableProperties.setProperty(propName, propValue);\n    }\n  }\n\n","sourceOld":"  /**\n   * Create the properties object used by resource loaders, etc, for property\n   * substitution.  The default solr properties are prefixed with 'solr.core.', so,\n   * e.g., 'name' becomes 'solr.core.name'\n   */\n  protected void buildSubstitutableProperties() {\n    for (String propName : coreProperties.stringPropertyNames()) {\n      String propValue = coreProperties.getProperty(propName);\n      if (!isUserDefinedProperty(propName))\n        propName = \"solr.core.\" + propName;\n      substitutableProperties.setProperty(propName, propValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b12e4a08d287aa7904b217f8d4167d86f8e2fb5","date":1456567381,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#buildSubstitutableProperties().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#buildSubstitutableProperties().mjava","sourceNew":"  /**\n   * Create the properties object used by resource loaders, etc, for property\n   * substitution.  The default solr properties are prefixed with 'solr.core.', so,\n   * e.g., 'name' becomes 'solr.core.name'\n   */\n  protected void buildSubstitutableProperties() {\n    for (String propName : coreProperties.stringPropertyNames()) {\n      String propValue = coreProperties.getProperty(propName);\n      if (!isUserDefinedProperty(propName))\n        propName = SOLR_CORE_PROP_PREFIX + propName;\n      substitutableProperties.setProperty(propName, propValue);\n    }\n    substitutableProperties.setProperty(\"solr.core.instanceDir\", instanceDir.toAbsolutePath().toString());\n  }\n\n","sourceOld":"  /**\n   * Create the properties object used by resource loaders, etc, for property\n   * substitution.  The default solr properties are prefixed with 'solr.core.', so,\n   * e.g., 'name' becomes 'solr.core.name'\n   */\n  protected void buildSubstitutableProperties() {\n    for (String propName : coreProperties.stringPropertyNames()) {\n      String propValue = coreProperties.getProperty(propName);\n      if (!isUserDefinedProperty(propName))\n        propName = SOLR_CORE_PROP_PREFIX + propName;\n      substitutableProperties.setProperty(propName, propValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#buildSubstitutableProperties().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#buildSubstitutableProperties().mjava","sourceNew":"  /**\n   * Create the properties object used by resource loaders, etc, for property\n   * substitution.  The default solr properties are prefixed with 'solr.core.', so,\n   * e.g., 'name' becomes 'solr.core.name'\n   */\n  protected void buildSubstitutableProperties() {\n    for (String propName : coreProperties.stringPropertyNames()) {\n      String propValue = coreProperties.getProperty(propName);\n      if (!isUserDefinedProperty(propName))\n        propName = SOLR_CORE_PROP_PREFIX + propName;\n      substitutableProperties.setProperty(propName, propValue);\n    }\n    substitutableProperties.setProperty(\"solr.core.instanceDir\", instanceDir.toAbsolutePath().toString());\n  }\n\n","sourceOld":"  /**\n   * Create the properties object used by resource loaders, etc, for property\n   * substitution.  The default solr properties are prefixed with 'solr.core.', so,\n   * e.g., 'name' becomes 'solr.core.name'\n   */\n  protected void buildSubstitutableProperties() {\n    for (String propName : coreProperties.stringPropertyNames()) {\n      String propValue = coreProperties.getProperty(propName);\n      if (!isUserDefinedProperty(propName))\n        propName = SOLR_CORE_PROP_PREFIX + propName;\n      substitutableProperties.setProperty(propName, propValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfc068060fd93e9c7417d1271ca797dc90496f67","date":1592771305,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#buildSubstitutableProperties().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#buildSubstitutableProperties().mjava","sourceNew":"  /**\n   * Create the properties object used by resource loaders, etc, for property\n   * substitution.  The default solr properties are prefixed with 'solr.core.', so,\n   * e.g., 'name' becomes 'solr.core.name'\n   */\n  protected void buildSubstitutableProperties() {\n    for (String propName : coreProperties.stringPropertyNames()) {\n      String propValue = coreProperties.getProperty(propName);\n      if (!isUserDefinedProperty(propName))\n        propName = SOLR_CORE_PROP_PREFIX + propName;\n      substitutableProperties.setProperty(propName, propValue);\n    }\n    substitutableProperties.setProperty(\"solr.core.instanceDir\", instanceDir.toString());\n  }\n\n","sourceOld":"  /**\n   * Create the properties object used by resource loaders, etc, for property\n   * substitution.  The default solr properties are prefixed with 'solr.core.', so,\n   * e.g., 'name' becomes 'solr.core.name'\n   */\n  protected void buildSubstitutableProperties() {\n    for (String propName : coreProperties.stringPropertyNames()) {\n      String propValue = coreProperties.getProperty(propName);\n      if (!isUserDefinedProperty(propName))\n        propName = SOLR_CORE_PROP_PREFIX + propName;\n      substitutableProperties.setProperty(propName, propValue);\n    }\n    substitutableProperties.setProperty(\"solr.core.instanceDir\", instanceDir.toAbsolutePath().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["8905f348f16dd6091f3ec91f99a4b69f326bfae7","6b12e4a08d287aa7904b217f8d4167d86f8e2fb5"],"1e9769bcabf28416689da7ec56a0c799b2a66b87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1e9769bcabf28416689da7ec56a0c799b2a66b87"],"31d4861802ca404d78ca1d15f4550eec415b9199":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1e9769bcabf28416689da7ec56a0c799b2a66b87"],"dfc068060fd93e9c7417d1271ca797dc90496f67":["af2638813028b254a88b418ebeafb541afb49653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6b12e4a08d287aa7904b217f8d4167d86f8e2fb5":["8905f348f16dd6091f3ec91f99a4b69f326bfae7"],"8905f348f16dd6091f3ec91f99a4b69f326bfae7":["1e9769bcabf28416689da7ec56a0c799b2a66b87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dfc068060fd93e9c7417d1271ca797dc90496f67"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["dfc068060fd93e9c7417d1271ca797dc90496f67"],"1e9769bcabf28416689da7ec56a0c799b2a66b87":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","8905f348f16dd6091f3ec91f99a4b69f326bfae7"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"6b12e4a08d287aa7904b217f8d4167d86f8e2fb5":["af2638813028b254a88b418ebeafb541afb49653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e9769bcabf28416689da7ec56a0c799b2a66b87","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"dfc068060fd93e9c7417d1271ca797dc90496f67":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8905f348f16dd6091f3ec91f99a4b69f326bfae7":["af2638813028b254a88b418ebeafb541afb49653","6b12e4a08d287aa7904b217f8d4167d86f8e2fb5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}