{"path":"src/test/org/apache/solr/handler/component/TermsComponentTest#testRegexpFlagParsing().mjava","commits":[{"id":"2f32b2ee79afc1b38d7aa7cba0cc0840e3a5bc3c","date":1260522208,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/TermsComponentTest#testRegexpFlagParsing().mjava","pathOld":"/dev/null","sourceNew":"  public void testRegexpFlagParsing() {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(TermsParams.TERMS_REGEXP_FLAG, \"case_insensitive\", \"literal\", \"comments\", \"multiline\", \"unix_lines\",\n              \"unicode_case\", \"dotall\", \"canon_eq\");\n      int flags = new TermsComponent().resolveRegexpFlags(params);\n      int expected = Pattern.CASE_INSENSITIVE | Pattern.LITERAL | Pattern.COMMENTS | Pattern.MULTILINE | Pattern.UNIX_LINES\n              | Pattern.UNICODE_CASE | Pattern.DOTALL | Pattern.CANON_EQ;\n      assertEquals(expected, flags);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#testRegexpFlagParsing().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermsComponentTest#testRegexpFlagParsing().mjava","sourceNew":"  public void testRegexpFlagParsing() {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(TermsParams.TERMS_REGEXP_FLAG, \"case_insensitive\", \"literal\", \"comments\", \"multiline\", \"unix_lines\",\n              \"unicode_case\", \"dotall\", \"canon_eq\");\n      int flags = new TermsComponent().resolveRegexpFlags(params);\n      int expected = Pattern.CASE_INSENSITIVE | Pattern.LITERAL | Pattern.COMMENTS | Pattern.MULTILINE | Pattern.UNIX_LINES\n              | Pattern.UNICODE_CASE | Pattern.DOTALL | Pattern.CANON_EQ;\n      assertEquals(expected, flags);\n  }\n\n","sourceOld":"  public void testRegexpFlagParsing() {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(TermsParams.TERMS_REGEXP_FLAG, \"case_insensitive\", \"literal\", \"comments\", \"multiline\", \"unix_lines\",\n              \"unicode_case\", \"dotall\", \"canon_eq\");\n      int flags = new TermsComponent().resolveRegexpFlags(params);\n      int expected = Pattern.CASE_INSENSITIVE | Pattern.LITERAL | Pattern.COMMENTS | Pattern.MULTILINE | Pattern.UNIX_LINES\n              | Pattern.UNICODE_CASE | Pattern.DOTALL | Pattern.CANON_EQ;\n      assertEquals(expected, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f32b2ee79afc1b38d7aa7cba0cc0840e3a5bc3c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2f32b2ee79afc1b38d7aa7cba0cc0840e3a5bc3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2f32b2ee79afc1b38d7aa7cba0cc0840e3a5bc3c":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["2f32b2ee79afc1b38d7aa7cba0cc0840e3a5bc3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}