{"path":"lucene/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","sourceNew":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    Spans spans = query.getSpans(reader);\n\n    while (spans.next() == true) {\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        for (byte [] bytes : payload) {\n          payloads.add(bytes);\n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    Spans spans = query.getSpans(reader);\n\n    while (spans.next() == true) {\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        for (byte [] bytes : payload) {\n          payloads.add(bytes);\n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","sourceNew":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (AtomicReaderContext atomicReaderContext : leaves) {\n      final Spans spans = query.getSpans(atomicReaderContext);\n      while (spans.next() == true) {\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          for (byte [] bytes : payload) {\n            payloads.add(bytes);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    Spans spans = query.getSpans(reader);\n\n    while (spans.next() == true) {\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        for (byte [] bytes : payload) {\n          payloads.add(bytes);\n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","sourceNew":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (AtomicReaderContext atomicReaderContext : leaves) {\n      final Spans spans = query.getSpans(atomicReaderContext);\n      while (spans.next() == true) {\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          for (byte [] bytes : payload) {\n            payloads.add(bytes);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    Spans spans = query.getSpans(reader);\n\n    while (spans.next() == true) {\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        for (byte [] bytes : payload) {\n          payloads.add(bytes);\n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","sourceNew":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (AtomicReaderContext atomicReaderContext : leaves) {\n      final Spans spans = query.getSpans(atomicReaderContext);\n      while (spans.next() == true) {\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          for (byte [] bytes : payload) {\n            payloads.add(bytes);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    Spans spans = query.getSpans(reader);\n\n    while (spans.next() == true) {\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        for (byte [] bytes : payload) {\n          payloads.add(bytes);\n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","sourceNew":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (AtomicReaderContext atomicReaderContext : leaves) {\n      final Spans spans = query.getSpans(atomicReaderContext, atomicReaderContext.reader.getLiveDocs());\n      while (spans.next() == true) {\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          for (byte [] bytes : payload) {\n            payloads.add(bytes);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (AtomicReaderContext atomicReaderContext : leaves) {\n      final Spans spans = query.getSpans(atomicReaderContext);\n      while (spans.next() == true) {\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          for (byte [] bytes : payload) {\n            payloads.add(bytes);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a015474a0e3185be4c42ed156c0f1e88b90b1ace","date":1321290150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","sourceNew":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(context, term, true));\n    }\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (AtomicReaderContext atomicReaderContext : leaves) {\n      final Spans spans = query.getSpans(atomicReaderContext, atomicReaderContext.reader.getLiveDocs(), termContexts);\n      while (spans.next() == true) {\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          for (byte [] bytes : payload) {\n            payloads.add(bytes);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (AtomicReaderContext atomicReaderContext : leaves) {\n      final Spans spans = query.getSpans(atomicReaderContext, atomicReaderContext.reader.getLiveDocs());\n      while (spans.next() == true) {\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          for (byte [] bytes : payload) {\n            payloads.add(bytes);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","sourceNew":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(context, term, true));\n    }\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (AtomicReaderContext atomicReaderContext : leaves) {\n      final Spans spans = query.getSpans(atomicReaderContext, atomicReaderContext.reader().getLiveDocs(), termContexts);\n      while (spans.next() == true) {\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          for (byte [] bytes : payload) {\n            payloads.add(bytes);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(context, term, true));\n    }\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (AtomicReaderContext atomicReaderContext : leaves) {\n      final Spans spans = query.getSpans(atomicReaderContext, atomicReaderContext.reader.getLiveDocs(), termContexts);\n      while (spans.next() == true) {\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          for (byte [] bytes : payload) {\n            payloads.add(bytes);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","sourceNew":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(context, term, true));\n    }\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (AtomicReaderContext atomicReaderContext : leaves) {\n      final Spans spans = query.getSpans(atomicReaderContext, atomicReaderContext.reader().getLiveDocs(), termContexts);\n      while (spans.next() == true) {\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          for (byte [] bytes : payload) {\n            payloads.add(bytes);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(context, term, true));\n    }\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (AtomicReaderContext atomicReaderContext : leaves) {\n      final Spans spans = query.getSpans(atomicReaderContext, atomicReaderContext.reader.getLiveDocs(), termContexts);\n      while (spans.next() == true) {\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          for (byte [] bytes : payload) {\n            payloads.add(bytes);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","sourceNew":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(context, term, true));\n    }\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (AtomicReaderContext atomicReaderContext : leaves) {\n      final Spans spans = query.getSpans(atomicReaderContext, atomicReaderContext.reader().getLiveDocs(), termContexts);\n      while (spans.next() == true) {\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          for (byte [] bytes : payload) {\n            payloads.add(bytes);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(context, term, true));\n    }\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (AtomicReaderContext atomicReaderContext : leaves) {\n      final Spans spans = query.getSpans(atomicReaderContext, atomicReaderContext.reader().getLiveDocs(), termContexts);\n      while (spans.next() == true) {\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          for (byte [] bytes : payload) {\n            payloads.add(bytes);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8323d210478d76a02372693d254b69aac614689":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["c8323d210478d76a02372693d254b69aac614689"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","c8323d210478d76a02372693d254b69aac614689"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a015474a0e3185be4c42ed156c0f1e88b90b1ace","6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["9454a6510e2db155fb01faa5c049b06ece95fab9","c8323d210478d76a02372693d254b69aac614689"]},"commit2Childs":{"c8323d210478d76a02372693d254b69aac614689":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c8323d210478d76a02372693d254b69aac614689","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}