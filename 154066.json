{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#assertTokenizesTo(SynonymMap,String,String[]).mjava","commits":[{"id":"b59603a30f81d2af70cd2033270521dc7c8ec626","date":1273513065,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#assertTokenizesTo(SynonymMap,String,String[]).mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestSynonymFilter#assertTokenizesTo(SynonymMap,String,String[]).mjava","sourceNew":"  static void assertTokenizesTo(SynonymMap dict, String input,\n      String expected[]) throws IOException {\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    SynonymFilter stream = new SynonymFilter(tokenizer, dict);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","sourceOld":"  static void assertTokenizesTo(SynonymMap dict, String input,\n      String expected[]) throws IOException {\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(input));\n    SynonymFilter stream = new SynonymFilter(tokenizer, dict);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#assertTokenizesTo(SynonymMap,String,String[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#assertTokenizesTo(SynonymMap,String,String[]).mjava","sourceNew":"  static void assertTokenizesTo(SynonymMap dict, String input,\n      String expected[]) throws IOException {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    SynonymFilter stream = new SynonymFilter(tokenizer, dict);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","sourceOld":"  static void assertTokenizesTo(SynonymMap dict, String input,\n      String expected[]) throws IOException {\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    SynonymFilter stream = new SynonymFilter(tokenizer, dict);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","bugFix":["b59603a30f81d2af70cd2033270521dc7c8ec626"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#assertTokenizesTo(SynonymMap,String,String[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#assertTokenizesTo(SynonymMap,String,String[]).mjava","sourceNew":"  static void assertTokenizesTo(SynonymMap dict, String input,\n      String expected[]) throws IOException {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    SynonymFilter stream = new SynonymFilter(tokenizer, dict);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","sourceOld":"  static void assertTokenizesTo(SynonymMap dict, String input,\n      String expected[]) throws IOException {\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    SynonymFilter stream = new SynonymFilter(tokenizer, dict);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#assertTokenizesTo(SynonymMap,String,String[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#assertTokenizesTo(SynonymMap,String,String[]).mjava","sourceNew":"  static void assertTokenizesTo(SynonymMap dict, String input,\n      String expected[]) throws IOException {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    SynonymFilter stream = new SynonymFilter(tokenizer, dict);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","sourceOld":"  static void assertTokenizesTo(SynonymMap dict, String input,\n      String expected[]) throws IOException {\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    SynonymFilter stream = new SynonymFilter(tokenizer, dict);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSlowSynonymFilter#assertTokenizesTo(SlowSynonymMap,String,String[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#assertTokenizesTo(SynonymMap,String,String[]).mjava","sourceNew":"  static void assertTokenizesTo(SlowSynonymMap dict, String input,\n      String expected[]) throws IOException {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    SlowSynonymFilter stream = new SlowSynonymFilter(tokenizer, dict);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","sourceOld":"  static void assertTokenizesTo(SynonymMap dict, String input,\n      String expected[]) throws IOException {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    SynonymFilter stream = new SynonymFilter(tokenizer, dict);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["b59603a30f81d2af70cd2033270521dc7c8ec626"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["b59603a30f81d2af70cd2033270521dc7c8ec626","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a3776dccca01c11e7046323cfad46a3b4a471233":["b59603a30f81d2af70cd2033270521dc7c8ec626","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b59603a30f81d2af70cd2033270521dc7c8ec626":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"]},"commit2Childs":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b59603a30f81d2af70cd2033270521dc7c8ec626"],"b59603a30f81d2af70cd2033270521dc7c8ec626":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}