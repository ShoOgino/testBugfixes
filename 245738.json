{"path":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#codePointCount(BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#codePointCount(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#codePointCount(BytesRef).mjava","sourceNew":"  /** Returns the number of code points in this utf8\n   *  sequence.  Behavior is undefined if the utf8 sequence\n   *  is invalid.*/\n  public static int codePointCount(BytesRef utf8) {\n    int upto = utf8.offset;\n    final int limit = utf8.offset + utf8.length;\n    final byte[] bytes = utf8.bytes;\n    int codePointCount = 0;\n    while (upto < limit) {\n      codePointCount++;\n      upto += utf8CodeLength[bytes[upto]&0xFF];\n    }\n    return codePointCount;\n  }\n\n","sourceOld":"  /** Returns the number of code points in this utf8\n   *  sequence.  Behavior is undefined if the utf8 sequence\n   *  is invalid.*/\n  public static int codePointCount(BytesRef utf8) {\n    int upto = utf8.offset;\n    final int limit = utf8.offset + utf8.length;\n    final byte[] bytes = utf8.bytes;\n    int codePointCount = 0;\n    while (upto < limit) {\n      codePointCount++;\n      upto += utf8CodeLength[bytes[upto]&0xFF];\n    }\n    return codePointCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb445c22e37e9fe48d0efed781537ca5cc5696d","date":1364460154,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#codePointCount(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#codePointCount(BytesRef).mjava","sourceNew":"  /** \n   * Returns the number of code points in this UTF8 sequence.\n   * \n   * <p>This method assumes valid UTF8 input. This method \n   * <strong>does not perform</strong> full UTF8 validation, it will check only the \n   * first byte of each codepoint (for multi-byte sequences any bytes after \n   * the head are skipped).  \n   * \n   * @throws IllegalArgumentException If invalid codepoint header byte occurs or the \n   *    content is prematurely truncated.\n   */\n  public static int codePointCount(BytesRef utf8) {\n    int pos = utf8.offset;\n    final int limit = pos + utf8.length;\n    final byte[] bytes = utf8.bytes;\n\n    int codePointCount = 0;\n    for (; pos < limit; codePointCount++) {\n      int v = bytes[pos] & 0xFF;\n      if (v <   /* 0xxx xxxx */ 0x80) { pos += 1; continue; }\n      if (v >=  /* 110x xxxx */ 0xc0) {\n        if (v < /* 111x xxxx */ 0xe0) { pos += 2; continue; } \n        if (v < /* 1111 xxxx */ 0xf0) { pos += 3; continue; } \n        if (v < /* 1111 1xxx */ 0xf8) { pos += 4; continue; }\n        // fallthrough, consider 5 and 6 byte sequences invalid. \n      }\n\n      // Anything not covered above is invalid UTF8.\n      throw new IllegalArgumentException();\n    }\n\n    // Check if we didn't go over the limit on the last character.\n    if (pos > limit) throw new IllegalArgumentException();\n\n    return codePointCount;\n  }\n\n","sourceOld":"  /** Returns the number of code points in this utf8\n   *  sequence.  Behavior is undefined if the utf8 sequence\n   *  is invalid.*/\n  public static int codePointCount(BytesRef utf8) {\n    int upto = utf8.offset;\n    final int limit = utf8.offset + utf8.length;\n    final byte[] bytes = utf8.bytes;\n    int codePointCount = 0;\n    while (upto < limit) {\n      codePointCount++;\n      upto += utf8CodeLength[bytes[upto]&0xFF];\n    }\n    return codePointCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb445c22e37e9fe48d0efed781537ca5cc5696d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5eb445c22e37e9fe48d0efed781537ca5cc5696d"]},"commit2Childs":{"5eb445c22e37e9fe48d0efed781537ca5cc5696d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5eb445c22e37e9fe48d0efed781537ca5cc5696d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}