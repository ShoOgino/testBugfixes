{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#affixFST(TreeMap[String,List[Integer]]).mjava","commits":[{"id":"79cce2ac13867412e1a9dfd8c8df36833fba0d6a","date":1405962468,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#affixFST(TreeMap[String,List[Integer]]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#affixFST(TreeMap[String,List[Character]]).mjava","sourceNew":"  private FST<IntsRef> affixFST(TreeMap<String,List<Integer>> affixes) throws IOException {\n    IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n    Builder<IntsRef> builder = new Builder<>(FST.INPUT_TYPE.BYTE4, outputs);\n    IntsRef scratch = new IntsRef();\n    for (Map.Entry<String,List<Integer>> entry : affixes.entrySet()) {\n      Util.toUTF32(entry.getKey(), scratch);\n      List<Integer> entries = entry.getValue();\n      IntsRef output = new IntsRef(entries.size());\n      for (Integer c : entries) {\n        output.ints[output.length++] = c;\n      }\n      builder.add(scratch, output);\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  private FST<IntsRef> affixFST(TreeMap<String,List<Character>> affixes) throws IOException {\n    IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n    Builder<IntsRef> builder = new Builder<>(FST.INPUT_TYPE.BYTE4, outputs);\n    \n    IntsRef scratch = new IntsRef();\n    for (Map.Entry<String,List<Character>> entry : affixes.entrySet()) {\n      Util.toUTF32(entry.getKey(), scratch);\n      List<Character> entries = entry.getValue();\n      IntsRef output = new IntsRef(entries.size());\n      for (Character c : entries) {\n        output.ints[output.length++] = c;\n      }\n      builder.add(scratch, output);\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#affixFST(TreeMap[String,List[Integer]]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#affixFST(TreeMap[String,List[Integer]]).mjava","sourceNew":"  private FST<IntsRef> affixFST(TreeMap<String,List<Integer>> affixes) throws IOException {\n    IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n    Builder<IntsRef> builder = new Builder<>(FST.INPUT_TYPE.BYTE4, outputs);\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    for (Map.Entry<String,List<Integer>> entry : affixes.entrySet()) {\n      Util.toUTF32(entry.getKey(), scratch);\n      List<Integer> entries = entry.getValue();\n      IntsRef output = new IntsRef(entries.size());\n      for (Integer c : entries) {\n        output.ints[output.length++] = c;\n      }\n      builder.add(scratch.get(), output);\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  private FST<IntsRef> affixFST(TreeMap<String,List<Integer>> affixes) throws IOException {\n    IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n    Builder<IntsRef> builder = new Builder<>(FST.INPUT_TYPE.BYTE4, outputs);\n    IntsRef scratch = new IntsRef();\n    for (Map.Entry<String,List<Integer>> entry : affixes.entrySet()) {\n      Util.toUTF32(entry.getKey(), scratch);\n      List<Integer> entries = entry.getValue();\n      IntsRef output = new IntsRef(entries.size());\n      for (Integer c : entries) {\n        output.ints[output.length++] = c;\n      }\n      builder.add(scratch, output);\n    }\n    return builder.finish();\n  }\n\n","bugFix":["26c5ee01d8657497f54f46447208768acc949d51"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#affixFST(TreeMap[String,List[Integer]]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#affixFST(TreeMap[String,List[Integer]]).mjava","sourceNew":"  private FST<IntsRef> affixFST(TreeMap<String,List<Integer>> affixes) throws IOException {\n    IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n    FSTCompiler<IntsRef> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE4, outputs);\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    for (Map.Entry<String,List<Integer>> entry : affixes.entrySet()) {\n      Util.toUTF32(entry.getKey(), scratch);\n      List<Integer> entries = entry.getValue();\n      IntsRef output = new IntsRef(entries.size());\n      for (Integer c : entries) {\n        output.ints[output.length++] = c;\n      }\n      fstCompiler.add(scratch.get(), output);\n    }\n    return fstCompiler.compile();\n  }\n\n","sourceOld":"  private FST<IntsRef> affixFST(TreeMap<String,List<Integer>> affixes) throws IOException {\n    IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n    Builder<IntsRef> builder = new Builder<>(FST.INPUT_TYPE.BYTE4, outputs);\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    for (Map.Entry<String,List<Integer>> entry : affixes.entrySet()) {\n      Util.toUTF32(entry.getKey(), scratch);\n      List<Integer> entries = entry.getValue();\n      IntsRef output = new IntsRef(entries.size());\n      for (Integer c : entries) {\n        output.ints[output.length++] = c;\n      }\n      builder.add(scratch.get(), output);\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#affixFST(TreeMap[String,List[Integer]]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#affixFST(TreeMap[String,List[Integer]]).mjava","sourceNew":"  private FST<IntsRef> affixFST(TreeMap<String,List<Integer>> affixes) throws IOException {\n    IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n    FSTCompiler<IntsRef> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE4, outputs);\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    for (Map.Entry<String,List<Integer>> entry : affixes.entrySet()) {\n      Util.toUTF32(entry.getKey(), scratch);\n      List<Integer> entries = entry.getValue();\n      IntsRef output = new IntsRef(entries.size());\n      for (Integer c : entries) {\n        output.ints[output.length++] = c;\n      }\n      fstCompiler.add(scratch.get(), output);\n    }\n    return fstCompiler.compile();\n  }\n\n","sourceOld":"  private FST<IntsRef> affixFST(TreeMap<String,List<Integer>> affixes) throws IOException {\n    IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n    Builder<IntsRef> builder = new Builder<>(FST.INPUT_TYPE.BYTE4, outputs);\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    for (Map.Entry<String,List<Integer>> entry : affixes.entrySet()) {\n      Util.toUTF32(entry.getKey(), scratch);\n      List<Integer> entries = entry.getValue();\n      IntsRef output = new IntsRef(entries.size());\n      for (Integer c : entries) {\n        output.ints[output.length++] = c;\n      }\n      builder.add(scratch.get(), output);\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"79cce2ac13867412e1a9dfd8c8df36833fba0d6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["79cce2ac13867412e1a9dfd8c8df36833fba0d6a"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"79cce2ac13867412e1a9dfd8c8df36833fba0d6a":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["79cce2ac13867412e1a9dfd8c8df36833fba0d6a"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}