{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/AffinityReplicaListTransformer#getInstance(String,String,SolrParams).mjava","commits":[{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/AffinityReplicaListTransformer#getInstance(String,String,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AffinityReplicaListTransformer#getInstance(String,String,SolrQueryRequest).mjava","sourceNew":"  /**\n   *\n   * @param dividendParam int param to be used directly for mod-based routing\n   * @param hashParam String param to be hashed into an int for mod-based routing\n   * @param requestParams the parameters of the Solr request\n   * @return null if specified routing vals are not able to be parsed properly\n   */\n  public static ReplicaListTransformer getInstance(String dividendParam, String hashParam, SolrParams requestParams) {\n    Integer dividendVal;\n    if (dividendParam != null && (dividendVal = requestParams.getInt(dividendParam)) != null) {\n      return new AffinityReplicaListTransformer(dividendVal);\n    }\n    String hashVal;\n    if (hashParam != null && (hashVal = requestParams.get(hashParam)) != null && !hashVal.isEmpty()) {\n      return new AffinityReplicaListTransformer(hashVal);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   *\n   * @param dividendParam int param to be used directly for mod-based routing\n   * @param hashParam String param to be hashed into an int for mod-based routing\n   * @param req the request from which param values will be drawn\n   * @return null if specified routing vals are not able to be parsed properly\n   */\n  public static ReplicaListTransformer getInstance(String dividendParam, String hashParam, SolrQueryRequest req) {\n    SolrParams params = req.getOriginalParams();\n    Integer dividendVal;\n    if (dividendParam != null && (dividendVal = params.getInt(dividendParam)) != null) {\n      return new AffinityReplicaListTransformer(dividendVal);\n    }\n    String hashVal;\n    if (hashParam != null && (hashVal = params.get(hashParam)) != null && !hashVal.isEmpty()) {\n      return new AffinityReplicaListTransformer(hashVal);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"833432c363468a5df50f87446a68015404b1fbcf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["833432c363468a5df50f87446a68015404b1fbcf"]},"commit2Childs":{"833432c363468a5df50f87446a68015404b1fbcf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["833432c363468a5df50f87446a68015404b1fbcf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}