{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsWriter#flushTermsBlock(int,int).mjava","commits":[{"id":"0a570bec4aec8585a4eea44849bfb2bc264208c4","date":1371308653,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsWriter#flushTermsBlock(int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    assert start <= pendingTerms.size();\n    assert count <= start;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    long lastDocStartFP = 0;\n    long lastPosStartFP = 0;\n    long lastPayStartFP = 0;\n    for(int idx=limit-count; idx<limit; idx++) {\n      PendingTerm term = pendingTerms.get(idx);\n\n      if (term.singletonDocID == -1) {\n        bytesWriter.writeVLong(term.docStartFP - lastDocStartFP);\n        lastDocStartFP = term.docStartFP;\n      } else {\n        bytesWriter.writeVInt(term.singletonDocID);\n      }\n\n      if (fieldHasPositions) {\n        bytesWriter.writeVLong(term.posStartFP - lastPosStartFP);\n        lastPosStartFP = term.posStartFP;\n        if (term.lastPosBlockOffset != -1) {\n          bytesWriter.writeVLong(term.lastPosBlockOffset);\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && term.payStartFP != -1) {\n          bytesWriter.writeVLong(term.payStartFP - lastPayStartFP);\n          lastPayStartFP = term.payStartFP;\n        }\n      }\n\n      if (term.skipOffset != -1) {\n        bytesWriter.writeVLong(term.skipOffset);\n      }\n    }\n\n    termsOut.writeVInt((int) bytesWriter.getFilePointer());\n    bytesWriter.writeTo(termsOut);\n    bytesWriter.reset();\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(limit-count, limit).clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10f5f1c7f2dcd4a60664dd5c34d803794e023c9","date":1371380031,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsWriter#flushTermsBlock(int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    assert start <= pendingTerms.size();\n    assert count <= start;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    long lastDocStartFP = 0;\n    long lastPosStartFP = 0;\n    long lastPayStartFP = 0;\n    for(int idx=limit-count; idx<limit; idx++) {\n      PendingTerm term = pendingTerms.get(idx);\n\n      if (term.singletonDocID == -1) {\n        bytesWriter.writeVLong(term.docStartFP - lastDocStartFP);\n        lastDocStartFP = term.docStartFP;\n      } else {\n        bytesWriter.writeVInt(term.singletonDocID);\n      }\n\n      if (fieldHasPositions) {\n        bytesWriter.writeVLong(term.posStartFP - lastPosStartFP);\n        lastPosStartFP = term.posStartFP;\n        if (term.lastPosBlockOffset != -1) {\n          bytesWriter.writeVLong(term.lastPosBlockOffset);\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && term.payStartFP != -1) {\n          bytesWriter.writeVLong(term.payStartFP - lastPayStartFP);\n          lastPayStartFP = term.payStartFP;\n        }\n      }\n\n      if (term.skipOffset != -1) {\n        bytesWriter.writeVLong(term.skipOffset);\n      }\n    }\n\n    termsOut.writeVInt((int) bytesWriter.getFilePointer());\n    bytesWriter.writeTo(termsOut);\n    bytesWriter.reset();\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(limit-count, limit).clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10f5f1c7f2dcd4a60664dd5c34d803794e023c9":["0a570bec4aec8585a4eea44849bfb2bc264208c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a10f5f1c7f2dcd4a60664dd5c34d803794e023c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a570bec4aec8585a4eea44849bfb2bc264208c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a10f5f1c7f2dcd4a60664dd5c34d803794e023c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a10f5f1c7f2dcd4a60664dd5c34d803794e023c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}