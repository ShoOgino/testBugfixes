{"path":"lucene/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","pathOld":"src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","sourceNew":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(String,\n   * FieldInvertState)} method, the boost value is multipled\n   * by the {@link\n   * org.apache.lucene.search.Similarity#lengthNorm(String,\n   * int)} and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(String, FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","sourceOld":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(String,\n   * FieldInvertState)} method, the boost value is multipled\n   * by the {@link\n   * org.apache.lucene.search.Similarity#lengthNorm(String,\n   * int)} and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(String, FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7235f072992928845d8cfd2dfc1c90362360e1e","date":1296426876,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","sourceNew":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(String,\n   * FieldInvertState)} method, the boost value is multiplied\n   * by the {@link\n   * org.apache.lucene.search.Similarity#lengthNorm(String,\n   * int)} and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(String, FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","sourceOld":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(String,\n   * FieldInvertState)} method, the boost value is multipled\n   * by the {@link\n   * org.apache.lucene.search.Similarity#lengthNorm(String,\n   * int)} and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(String, FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","sourceNew":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(String,\n   * FieldInvertState)} method, the boost value is multiplied\n   * by the {@link\n   * org.apache.lucene.search.Similarity#lengthNorm(String,\n   * int)} and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(String, FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","sourceOld":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(String,\n   * FieldInvertState)} method, the boost value is multipled\n   * by the {@link\n   * org.apache.lucene.search.Similarity#lengthNorm(String,\n   * int)} and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(String, FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ce8d53d5582eaa6a0c771c9b119d480f41da59c","date":1297466174,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","sourceNew":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)} method, the boost value is multiplied\n   * by the length normalization factor and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","sourceOld":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(String,\n   * FieldInvertState)} method, the boost value is multiplied\n   * by the {@link\n   * org.apache.lucene.search.Similarity#lengthNorm(String,\n   * int)} and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(String, FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","sourceNew":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)} method, the boost value is multiplied\n   * by the length normalization factor and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","sourceOld":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(String,\n   * FieldInvertState)} method, the boost value is multiplied\n   * by the {@link\n   * org.apache.lucene.search.Similarity#lengthNorm(String,\n   * int)} and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(String, FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","sourceNew":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)} method, the boost value is multiplied\n   * by the length normalization factor and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","sourceOld":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(String,\n   * FieldInvertState)} method, the boost value is multipled\n   * by the {@link\n   * org.apache.lucene.search.Similarity#lengthNorm(String,\n   * int)} and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(String, FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","sourceNew":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)} method, the boost value is multiplied\n   * by the length normalization factor and then\n   * rounded by {@link org.apache.lucene.search.DefaultSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.DefaultSimilarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","sourceOld":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)} method, the boost value is multiplied\n   * by the length normalization factor and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","sourceNew":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)} method, the boost value is multiplied\n   * by the length normalization factor and then\n   * rounded by {@link org.apache.lucene.search.DefaultSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.DefaultSimilarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","sourceOld":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)} method, the boost value is multiplied\n   * by the length normalization factor and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","sourceNew":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)} method, the boost value is multiplied\n   * by the length normalization factor and then\n   * rounded by {@link org.apache.lucene.search.DefaultSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.DefaultSimilarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","sourceOld":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)} method, the boost value is multiplied\n   * by the length normalization factor and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#setBoost(float).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","sourceNew":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is used to compute the norm factor for the field.  By\n   * default, in the {@link org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)} method, \n   * the boost value is multiplied by the length normalization factor and then\n   * rounded by {@link org.apache.lucene.search.DefaultSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.DefaultSimilarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","sourceOld":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)} method, the boost value is multiplied\n   * by the length normalization factor and then\n   * rounded by {@link org.apache.lucene.search.DefaultSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.DefaultSimilarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","c7235f072992928845d8cfd2dfc1c90362360e1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7235f072992928845d8cfd2dfc1c90362360e1e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["c7235f072992928845d8cfd2dfc1c90362360e1e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["9454a6510e2db155fb01faa5c049b06ece95fab9","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c7235f072992928845d8cfd2dfc1c90362360e1e":["29ef99d61cda9641b6250bf9567329a6e65f901d","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["1291e4568eb7d9463d751627596ef14baf4c1603","0f3cee3d20b0c786e6fca20539454262e29edcab","f1bdbf92da222965b46c0a942c3857ba56e5c638","f0b9507caf22f292ac0e5e59f62db4275adf4511","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["29ef99d61cda9641b6250bf9567329a6e65f901d","c7235f072992928845d8cfd2dfc1c90362360e1e","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f1bdbf92da222965b46c0a942c3857ba56e5c638","f0b9507caf22f292ac0e5e59f62db4275adf4511","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}