{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList[Object],Replica.State,String,Set[String]).mjava","commits":[{"id":"69e6520a21709190413a63084ed135271aab1a7c","date":1556607462,"type":1,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList[Object],Replica.State,String,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","sourceNew":"  /**\n   * Send request to all replicas of a collection\n   * @return List of replicas which is not live for receiving the request\n   */\n  List<Replica> collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList<Object> results, Replica.State stateMatcher, String asyncId, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd={}, asyncId={}\", params, asyncId);\n    String collectionName = message.getStr(NAME);\n    @SuppressWarnings(\"deprecation\")\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler(overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient());\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    List<Replica> notLivesReplicas = new ArrayList<>();\n    final ShardRequestTracker shardRequestTracker = new ShardRequestTracker(asyncId);\n    for (Slice slice : coll.getSlices()) {\n      notLivesReplicas.addAll(shardRequestTracker.sliceCmd(clusterState, params, stateMatcher, slice, shardHandler));\n    }\n\n    shardRequestTracker.processResponses(results, shardHandler, false, null, okayExceptions);\n    return notLivesReplicas;\n  }\n\n","sourceOld":"  /**\n   * Send request to all replicas of a collection\n   * @return List of replicas which is not live for receiving the request\n   */\n  List<Replica> collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd={}, asyncId={}\", params, asyncId);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler(overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient());\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    List<Replica> notLivesReplicas = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      notLivesReplicas.addAll(sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap));\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n    return notLivesReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1964c059f45ae1de1877f9f0fe3ca327ea4218e8","date":1594088246,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList[Object],Replica.State,String,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList[Object],Replica.State,String,Set[String]).mjava","sourceNew":"  /**\n   * Send request to all replicas of a collection\n   * @return List of replicas which is not live for receiving the request\n   */\n  List<Replica> collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList<Object> results, Replica.State stateMatcher, String asyncId, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd={}, asyncId={}\", params, asyncId);\n    String collectionName = message.getStr(NAME);\n    @SuppressWarnings(\"deprecation\")\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    List<Replica> notLivesReplicas = new ArrayList<>();\n    final ShardRequestTracker shardRequestTracker = new ShardRequestTracker(asyncId);\n    for (Slice slice : coll.getSlices()) {\n      notLivesReplicas.addAll(shardRequestTracker.sliceCmd(clusterState, params, stateMatcher, slice, shardHandler));\n    }\n\n    shardRequestTracker.processResponses(results, shardHandler, false, null, okayExceptions);\n    return notLivesReplicas;\n  }\n\n","sourceOld":"  /**\n   * Send request to all replicas of a collection\n   * @return List of replicas which is not live for receiving the request\n   */\n  List<Replica> collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList<Object> results, Replica.State stateMatcher, String asyncId, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd={}, asyncId={}\", params, asyncId);\n    String collectionName = message.getStr(NAME);\n    @SuppressWarnings(\"deprecation\")\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler(overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient());\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    List<Replica> notLivesReplicas = new ArrayList<>();\n    final ShardRequestTracker shardRequestTracker = new ShardRequestTracker(asyncId);\n    for (Slice slice : coll.getSlices()) {\n      notLivesReplicas.addAll(shardRequestTracker.sliceCmd(clusterState, params, stateMatcher, slice, shardHandler));\n    }\n\n    shardRequestTracker.processResponses(results, shardHandler, false, null, okayExceptions);\n    return notLivesReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["69e6520a21709190413a63084ed135271aab1a7c"],"69e6520a21709190413a63084ed135271aab1a7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"]},"commit2Childs":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69e6520a21709190413a63084ed135271aab1a7c":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["69e6520a21709190413a63084ed135271aab1a7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}