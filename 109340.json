{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","sourceNew":"  // TODO (Facet): addCategory() is synchronized. This means that if indexing is\n  // multi-threaded, a new category that needs to be written to disk (and\n  // potentially even trigger a lengthy merge) locks out other addCategory()\n  // calls - even those which could immediately return a cached value.\n  // We definitely need to fix this situation!\n  @Override\n  public synchronized int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // If the category is already in the cache and/or the taxonomy, we\n    // should return its existing ordinal:\n    int res = findCategory(categoryPath);\n    if (res < 0) {\n      // This is a new category, and we need to insert it into the index\n      // (and the cache). Actually, we might also need to add some of\n      // the category's ancestors before we can add the category itself\n      // (while keeping the invariant that a parent is always added to\n      // the taxonomy before its child). internalAddCategory() does all\n      // this recursively:\n      res = internalAddCategory(categoryPath, categoryPath.length());\n    }\n    return res;\n\n  }\n\n","sourceOld":"  // TODO (Facet): addCategory() is synchronized. This means that if indexing is\n  // multi-threaded, a new category that needs to be written to disk (and\n  // potentially even trigger a lengthy merge) locks out other addCategory()\n  // calls - even those which could immediately return a cached value.\n  // We definitely need to fix this situation!\n  @Override\n  public synchronized int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // If the category is already in the cache and/or the taxonomy, we\n    // should return its existing ordinal:\n    int res = findCategory(categoryPath);\n    if (res < 0) {\n      // This is a new category, and we need to insert it into the index\n      // (and the cache). Actually, we might also need to add some of\n      // the category's ancestors before we can add the category itself\n      // (while keeping the invariant that a parent is always added to\n      // the taxonomy before its child). internalAddCategory() does all\n      // this recursively:\n      res = internalAddCategory(categoryPath, categoryPath.length());\n    }\n    return res;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"533890d1266aa8169162ec556395d0c5d0377566","date":1337173867,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","sourceNew":"  @Override\n  public int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // If the category is already in the cache and/or the taxonomy, we\n    // should return its existing ordinal\n    int res = findCategory(categoryPath);\n    if (res < 0) {\n      // the category is neither in the cache nor in the index - following code\n      // cannot be executed in parallel.\n      synchronized (this) {\n        res = findCategory(categoryPath);\n        if (res < 0) {\n          // This is a new category, and we need to insert it into the index\n          // (and the cache). Actually, we might also need to add some of\n          // the category's ancestors before we can add the category itself\n          // (while keeping the invariant that a parent is always added to\n          // the taxonomy before its child). internalAddCategory() does all\n          // this recursively\n          res = internalAddCategory(categoryPath, categoryPath.length());\n        }\n      }\n    }\n    return res;\n\n  }\n\n","sourceOld":"  // TODO (Facet): addCategory() is synchronized. This means that if indexing is\n  // multi-threaded, a new category that needs to be written to disk (and\n  // potentially even trigger a lengthy merge) locks out other addCategory()\n  // calls - even those which could immediately return a cached value.\n  // We definitely need to fix this situation!\n  @Override\n  public synchronized int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // If the category is already in the cache and/or the taxonomy, we\n    // should return its existing ordinal:\n    int res = findCategory(categoryPath);\n    if (res < 0) {\n      // This is a new category, and we need to insert it into the index\n      // (and the cache). Actually, we might also need to add some of\n      // the category's ancestors before we can add the category itself\n      // (while keeping the invariant that a parent is always added to\n      // the taxonomy before its child). internalAddCategory() does all\n      // this recursively:\n      res = internalAddCategory(categoryPath, categoryPath.length());\n    }\n    return res;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","sourceNew":"  @Override\n  public int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // If the category is already in the cache and/or the taxonomy, we\n    // should return its existing ordinal\n    int res = findCategory(categoryPath);\n    if (res < 0) {\n      // the category is neither in the cache nor in the index - following code\n      // cannot be executed in parallel.\n      synchronized (this) {\n        res = findCategory(categoryPath);\n        if (res < 0) {\n          // This is a new category, and we need to insert it into the index\n          // (and the cache). Actually, we might also need to add some of\n          // the category's ancestors before we can add the category itself\n          // (while keeping the invariant that a parent is always added to\n          // the taxonomy before its child). internalAddCategory() does all\n          // this recursively\n          res = internalAddCategory(categoryPath, categoryPath.length());\n        }\n      }\n    }\n    return res;\n\n  }\n\n","sourceOld":"  // TODO (Facet): addCategory() is synchronized. This means that if indexing is\n  // multi-threaded, a new category that needs to be written to disk (and\n  // potentially even trigger a lengthy merge) locks out other addCategory()\n  // calls - even those which could immediately return a cached value.\n  // We definitely need to fix this situation!\n  @Override\n  public synchronized int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // If the category is already in the cache and/or the taxonomy, we\n    // should return its existing ordinal:\n    int res = findCategory(categoryPath);\n    if (res < 0) {\n      // This is a new category, and we need to insert it into the index\n      // (and the cache). Actually, we might also need to add some of\n      // the category's ancestors before we can add the category itself\n      // (while keeping the invariant that a parent is always added to\n      // the taxonomy before its child). internalAddCategory() does all\n      // this recursively:\n      res = internalAddCategory(categoryPath, categoryPath.length());\n    }\n    return res;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39eda8730bac8b5933ac7397fe06398b6b862d00","date":1343048684,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","sourceNew":"  @Override\n  public int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // check the cache outside the synchronized block. this results in better\n    // concurrency when categories are there.\n    int res = cache.get(categoryPath);\n    if (res < 0) {\n      // the category is not in the cache - following code cannot be executed in parallel.\n      synchronized (this) {\n        res = findCategory(categoryPath);\n        if (res < 0) {\n          // This is a new category, and we need to insert it into the index\n          // (and the cache). Actually, we might also need to add some of\n          // the category's ancestors before we can add the category itself\n          // (while keeping the invariant that a parent is always added to\n          // the taxonomy before its child). internalAddCategory() does all\n          // this recursively\n          res = internalAddCategory(categoryPath, categoryPath.length());\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // If the category is already in the cache and/or the taxonomy, we\n    // should return its existing ordinal\n    int res = findCategory(categoryPath);\n    if (res < 0) {\n      // the category is neither in the cache nor in the index - following code\n      // cannot be executed in parallel.\n      synchronized (this) {\n        res = findCategory(categoryPath);\n        if (res < 0) {\n          // This is a new category, and we need to insert it into the index\n          // (and the cache). Actually, we might also need to add some of\n          // the category's ancestors before we can add the category itself\n          // (while keeping the invariant that a parent is always added to\n          // the taxonomy before its child). internalAddCategory() does all\n          // this recursively\n          res = internalAddCategory(categoryPath, categoryPath.length());\n        }\n      }\n    }\n    return res;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","sourceNew":"  @Override\n  public int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // check the cache outside the synchronized block. this results in better\n    // concurrency when categories are there.\n    int res = cache.get(categoryPath);\n    if (res < 0) {\n      // the category is not in the cache - following code cannot be executed in parallel.\n      synchronized (this) {\n        res = findCategory(categoryPath);\n        if (res < 0) {\n          // This is a new category, and we need to insert it into the index\n          // (and the cache). Actually, we might also need to add some of\n          // the category's ancestors before we can add the category itself\n          // (while keeping the invariant that a parent is always added to\n          // the taxonomy before its child). internalAddCategory() does all\n          // this recursively\n          res = internalAddCategory(categoryPath, categoryPath.length());\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // If the category is already in the cache and/or the taxonomy, we\n    // should return its existing ordinal\n    int res = findCategory(categoryPath);\n    if (res < 0) {\n      // the category is neither in the cache nor in the index - following code\n      // cannot be executed in parallel.\n      synchronized (this) {\n        res = findCategory(categoryPath);\n        if (res < 0) {\n          // This is a new category, and we need to insert it into the index\n          // (and the cache). Actually, we might also need to add some of\n          // the category's ancestors before we can add the category itself\n          // (while keeping the invariant that a parent is always added to\n          // the taxonomy before its child). internalAddCategory() does all\n          // this recursively\n          res = internalAddCategory(categoryPath, categoryPath.length());\n        }\n      }\n    }\n    return res;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","sourceNew":"  @Override\n  public int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // check the cache outside the synchronized block. this results in better\n    // concurrency when categories are there.\n    int res = cache.get(categoryPath);\n    if (res < 0) {\n      // the category is not in the cache - following code cannot be executed in parallel.\n      synchronized (this) {\n        res = findCategory(categoryPath);\n        if (res < 0) {\n          // This is a new category, and we need to insert it into the index\n          // (and the cache). Actually, we might also need to add some of\n          // the category's ancestors before we can add the category itself\n          // (while keeping the invariant that a parent is always added to\n          // the taxonomy before its child). internalAddCategory() does all\n          // this recursively\n          res = internalAddCategory(categoryPath, categoryPath.length());\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // If the category is already in the cache and/or the taxonomy, we\n    // should return its existing ordinal\n    int res = findCategory(categoryPath);\n    if (res < 0) {\n      // the category is neither in the cache nor in the index - following code\n      // cannot be executed in parallel.\n      synchronized (this) {\n        res = findCategory(categoryPath);\n        if (res < 0) {\n          // This is a new category, and we need to insert it into the index\n          // (and the cache). Actually, we might also need to add some of\n          // the category's ancestors before we can add the category itself\n          // (while keeping the invariant that a parent is always added to\n          // the taxonomy before its child). internalAddCategory() does all\n          // this recursively\n          res = internalAddCategory(categoryPath, categoryPath.length());\n        }\n      }\n    }\n    return res;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","sourceNew":"  @Override\n  public int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // check the cache outside the synchronized block. this results in better\n    // concurrency when categories are there.\n    int res = cache.get(categoryPath);\n    if (res < 0) {\n      // the category is not in the cache - following code cannot be executed in parallel.\n      synchronized (this) {\n        res = findCategory(categoryPath);\n        if (res < 0) {\n          // This is a new category, and we need to insert it into the index\n          // (and the cache). Actually, we might also need to add some of\n          // the category's ancestors before we can add the category itself\n          // (while keeping the invariant that a parent is always added to\n          // the taxonomy before its child). internalAddCategory() does all\n          // this recursively\n          res = internalAddCategory(categoryPath);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // check the cache outside the synchronized block. this results in better\n    // concurrency when categories are there.\n    int res = cache.get(categoryPath);\n    if (res < 0) {\n      // the category is not in the cache - following code cannot be executed in parallel.\n      synchronized (this) {\n        res = findCategory(categoryPath);\n        if (res < 0) {\n          // This is a new category, and we need to insert it into the index\n          // (and the cache). Actually, we might also need to add some of\n          // the category's ancestors before we can add the category itself\n          // (while keeping the invariant that a parent is always added to\n          // the taxonomy before its child). internalAddCategory() does all\n          // this recursively\n          res = internalAddCategory(categoryPath, categoryPath.length());\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","sourceNew":"  @Override\n  public int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // check the cache outside the synchronized block. this results in better\n    // concurrency when categories are there.\n    int res = cache.get(categoryPath);\n    if (res < 0) {\n      // the category is not in the cache - following code cannot be executed in parallel.\n      synchronized (this) {\n        res = findCategory(categoryPath);\n        if (res < 0) {\n          // This is a new category, and we need to insert it into the index\n          // (and the cache). Actually, we might also need to add some of\n          // the category's ancestors before we can add the category itself\n          // (while keeping the invariant that a parent is always added to\n          // the taxonomy before its child). internalAddCategory() does all\n          // this recursively\n          res = internalAddCategory(categoryPath);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // check the cache outside the synchronized block. this results in better\n    // concurrency when categories are there.\n    int res = cache.get(categoryPath);\n    if (res < 0) {\n      // the category is not in the cache - following code cannot be executed in parallel.\n      synchronized (this) {\n        res = findCategory(categoryPath);\n        if (res < 0) {\n          // This is a new category, and we need to insert it into the index\n          // (and the cache). Actually, we might also need to add some of\n          // the category's ancestors before we can add the category itself\n          // (while keeping the invariant that a parent is always added to\n          // the taxonomy before its child). internalAddCategory() does all\n          // this recursively\n          res = internalAddCategory(categoryPath, categoryPath.length());\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(FacetLabel).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","sourceNew":"  @Override\n  public int addCategory(FacetLabel categoryPath) throws IOException {\n    ensureOpen();\n    // check the cache outside the synchronized block. this results in better\n    // concurrency when categories are there.\n    int res = cache.get(categoryPath);\n    if (res < 0) {\n      // the category is not in the cache - following code cannot be executed in parallel.\n      synchronized (this) {\n        res = findCategory(categoryPath);\n        if (res < 0) {\n          // This is a new category, and we need to insert it into the index\n          // (and the cache). Actually, we might also need to add some of\n          // the category's ancestors before we can add the category itself\n          // (while keeping the invariant that a parent is always added to\n          // the taxonomy before its child). internalAddCategory() does all\n          // this recursively\n          res = internalAddCategory(categoryPath);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // check the cache outside the synchronized block. this results in better\n    // concurrency when categories are there.\n    int res = cache.get(categoryPath);\n    if (res < 0) {\n      // the category is not in the cache - following code cannot be executed in parallel.\n      synchronized (this) {\n        res = findCategory(categoryPath);\n        if (res < 0) {\n          // This is a new category, and we need to insert it into the index\n          // (and the cache). Actually, we might also need to add some of\n          // the category's ancestors before we can add the category itself\n          // (while keeping the invariant that a parent is always added to\n          // the taxonomy before its child). internalAddCategory() does all\n          // this recursively\n          res = internalAddCategory(categoryPath);\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // check the cache outside the synchronized block. this results in better\n    // concurrency when categories are there.\n    int res = cache.get(categoryPath);\n    if (res < 0) {\n      // the category is not in the cache - following code cannot be executed in parallel.\n      synchronized (this) {\n        res = findCategory(categoryPath);\n        if (res < 0) {\n          // This is a new category, and we need to insert it into the index\n          // (and the cache). Actually, we might also need to add some of\n          // the category's ancestors before we can add the category itself\n          // (while keeping the invariant that a parent is always added to\n          // the taxonomy before its child). internalAddCategory() does all\n          // this recursively\n          res = internalAddCategory(categoryPath);\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["39eda8730bac8b5933ac7397fe06398b6b862d00","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["39eda8730bac8b5933ac7397fe06398b6b862d00"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["533890d1266aa8169162ec556395d0c5d0377566","39eda8730bac8b5933ac7397fe06398b6b862d00"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"39eda8730bac8b5933ac7397fe06398b6b862d00":["533890d1266aa8169162ec556395d0c5d0377566"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["533890d1266aa8169162ec556395d0c5d0377566","39eda8730bac8b5933ac7397fe06398b6b862d00"],"533890d1266aa8169162ec556395d0c5d0377566":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ef0d8a69209261514c5739c770bba706c2308450":["b89678825b68eccaf09e6ab71675fc0b0af1e099","533890d1266aa8169162ec556395d0c5d0377566"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["533890d1266aa8169162ec556395d0c5d0377566","ef0d8a69209261514c5739c770bba706c2308450"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"39eda8730bac8b5933ac7397fe06398b6b862d00":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"533890d1266aa8169162ec556395d0c5d0377566":["aba371508186796cc6151d8223a5b4e16d02e26e","39eda8730bac8b5933ac7397fe06398b6b862d00","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","ef0d8a69209261514c5739c770bba706c2308450"],"ef0d8a69209261514c5739c770bba706c2308450":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}