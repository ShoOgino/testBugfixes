{"path":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#reduce().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#reduce().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reduces this automaton. An automaton is \"reduced\" by combining overlapping\n   * and adjacent edge intervals with same destination.\n   */\n  public void reduce() {\n    if (isSingleton()) return;\n    Set<State> states = getStates();\n    setStateNumbers(states);\n    for (State s : states) {\n      List<Transition> st = s.getSortedTransitions(true);\n      s.resetTransitions();\n      State p = null;\n      int min = -1, max = -1;\n      for (Transition t : st) {\n        if (p == t.to) {\n          if (t.min <= max + 1) {\n            if (t.max > max) max = t.max;\n          } else {\n            if (p != null) s.transitions.add(new Transition((char) min,\n                (char) max, p));\n            min = t.min;\n            max = t.max;\n          }\n        } else {\n          if (p != null) s.transitions.add(new Transition((char) min,\n              (char) max, p));\n          p = t.to;\n          min = t.min;\n          max = t.max;\n        }\n      }\n      if (p != null) s.transitions\n          .add(new Transition((char) min, (char) max, p));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#reduce().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#reduce().mjava","sourceNew":"  /**\n   * Reduces this automaton. An automaton is \"reduced\" by combining overlapping\n   * and adjacent edge intervals with same destination.\n   */\n  public void reduce() {\n    final State[] states = getNumberedStates();\n    if (isSingleton()) return;\n    for (State s : states)\n      s.reduce();\n  }\n\n","sourceOld":"  /**\n   * Reduces this automaton. An automaton is \"reduced\" by combining overlapping\n   * and adjacent edge intervals with same destination.\n   */\n  public void reduce() {\n    if (isSingleton()) return;\n    Set<State> states = getStates();\n    setStateNumbers(states);\n    for (State s : states) {\n      List<Transition> st = s.getSortedTransitions(true);\n      s.resetTransitions();\n      State p = null;\n      int min = -1, max = -1;\n      for (Transition t : st) {\n        if (p == t.to) {\n          if (t.min <= max + 1) {\n            if (t.max > max) max = t.max;\n          } else {\n            if (p != null) s.transitions.add(new Transition((char) min,\n                (char) max, p));\n            min = t.min;\n            max = t.max;\n          }\n        } else {\n          if (p != null) s.transitions.add(new Transition((char) min,\n              (char) max, p));\n          p = t.to;\n          min = t.min;\n          max = t.max;\n        }\n      }\n      if (p != null) s.transitions\n          .add(new Transition((char) min, (char) max, p));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#reduce().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#reduce().mjava","sourceNew":"  /**\n   * Reduces this automaton. An automaton is \"reduced\" by combining overlapping\n   * and adjacent edge intervals with same destination.\n   */\n  public void reduce() {\n    final State[] states = getNumberedStates();\n    if (isSingleton()) return;\n    for (State s : states)\n      s.reduce();\n  }\n\n","sourceOld":"  /**\n   * Reduces this automaton. An automaton is \"reduced\" by combining overlapping\n   * and adjacent edge intervals with same destination.\n   */\n  public void reduce() {\n    final State[] states = getNumberedStates();\n    if (isSingleton()) return;\n    for (State s : states)\n      s.reduce();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}