{"path":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","commits":[{"id":"20cf910d1892b0a0ff8543ec4551b6df2dc3de40","date":1275769896,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUTF16Comparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n            };\n          }\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUnicodeComparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n            };\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUTF16Comparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n            };\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUnicodeComparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n            };\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUTF16Comparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n            };\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e28c49f1fb6215a550fdadcf3805aa629b63ec0","date":1288081775,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n\n            @Override\n            public DocValues docValues() throws IOException {\n              // TODO \n              throw new UnsupportedOperationException(\"not implemented\");\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUnicodeComparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n            };\n          }\n        }\n\n        @Override\n        public DocValues docValues(String field) throws IOException {\n          // TODO \n          throw new UnsupportedOperationException(\"not implemented\");\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUnicodeComparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n            };\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecd298fdc085e7eba27afa7fae58df1ba1a2808","date":1295102557,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUnicodeComparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n\n              @Override\n              public long getSumTotalTermFreq() {\n                return info.getSumTotalTermFreq();\n              }\n            };\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUnicodeComparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n            };\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUnicodeComparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n\n              @Override\n              public long getSumTotalTermFreq() {\n                return info.getSumTotalTermFreq();\n              }\n            };\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUnicodeComparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n            };\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n\n            @Override\n            public DocValues docValues() throws IOException {\n              // TODO \n              throw new UnsupportedOperationException(\"not implemented\");\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUnicodeComparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n\n              @Override\n              public long getSumTotalTermFreq() {\n                return info.getSumTotalTermFreq();\n              }\n            };\n          }\n        }\n\n        @Override\n        public DocValues docValues(String field) throws IOException {\n          // TODO \n          throw new UnsupportedOperationException(\"not implemented\");\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n\n            @Override\n            public DocValues docValues() throws IOException {\n              // TODO \n              throw new UnsupportedOperationException(\"not implemented\");\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUnicodeComparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n            };\n          }\n        }\n\n        @Override\n        public DocValues docValues(String field) throws IOException {\n          // TODO \n          throw new UnsupportedOperationException(\"not implemented\");\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUnicodeComparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n\n              @Override\n              public long getSumTotalTermFreq() {\n                return info.getSumTotalTermFreq();\n              }\n            };\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n\n            @Override\n            public DocValues docValues() throws IOException {\n              // TODO \n              throw new UnsupportedOperationException(\"not implemented\");\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUnicodeComparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n\n              @Override\n              public long getSumTotalTermFreq() {\n                return info.getSumTotalTermFreq();\n              }\n            };\n          }\n        }\n\n        @Override\n        public DocValues docValues(String field) throws IOException {\n          // TODO \n          throw new UnsupportedOperationException(\"not implemented\");\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94","date":1310159023,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUnicodeComparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n\n              @Override\n              public long getSumTotalTermFreq() {\n                return info.getSumTotalTermFreq();\n              }\n\n              @Override\n              public long getSumDocFreq() throws IOException {\n                // each term has df=1\n                return info.sortedTerms.length;\n              }\n            };\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUnicodeComparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n\n              @Override\n              public long getSumTotalTermFreq() {\n                return info.getSumTotalTermFreq();\n              }\n            };\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUnicodeComparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n\n              @Override\n              public long getSumTotalTermFreq() {\n                return info.getSumTotalTermFreq();\n              }\n\n              @Override\n              public long getSumDocFreq() throws IOException {\n                // each term has df=1\n                return info.sortedTerms.length;\n              }\n            };\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUnicodeComparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n\n              @Override\n              public long getSumTotalTermFreq() {\n                return info.getSumTotalTermFreq();\n              }\n            };\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25433c5cacacb7a2055d62d4d36b0daf210e0a10","date":1315747522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUnicodeComparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n\n              @Override\n              public long getSumTotalTermFreq() {\n                return info.getSumTotalTermFreq();\n              }\n\n              @Override\n              public long getSumDocFreq() throws IOException {\n                // each term has df=1\n                return info.sortedTerms.length;\n              }\n\n              @Override\n              public int getDocCount() throws IOException {\n                return info.sortedTerms.length > 0 ? 1 : 0;\n              }\n              \n              \n            };\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUnicodeComparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n\n              @Override\n              public long getSumTotalTermFreq() {\n                return info.getSumTotalTermFreq();\n              }\n\n              @Override\n              public long getSumDocFreq() throws IOException {\n                // each term has df=1\n                return info.sortedTerms.length;\n              }\n            };\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":"    @Override\n    public Fields fields() {\n      sortFields();\n      return new MemoryFields();\n    }\n\n","sourceOld":"    @Override\n    public Fields fields() {\n\n      sortFields();\n\n      return new Fields() {\n        @Override\n        public FieldsEnum iterator() {\n          return new FieldsEnum() {\n            int upto = -1;\n\n            @Override\n            public String next() {\n              upto++;\n              if (upto >= sortedFields.length) {\n                return null;\n              }\n              return sortedFields[upto].getKey();\n            }\n\n            @Override\n            public TermsEnum terms() {\n              return new MemoryTermsEnum(sortedFields[upto].getValue());\n            }\n          };\n        }\n\n        @Override\n        public Terms terms(final String field) {\n          int i = Arrays.binarySearch(sortedFields, field, termComparator);\n          if (i < 0) {\n            return null;\n          } else {\n            final Info info = getInfo(i);\n            info.sortTerms();\n\n            return new Terms() {\n              @Override \n              public TermsEnum iterator() {\n                return new MemoryTermsEnum(info);\n              }\n\n              @Override\n              public Comparator<BytesRef> getComparator() {\n                return BytesRef.getUTF8SortedAsUnicodeComparator();\n              }\n\n              @Override\n              public long getUniqueTermCount() {\n                return info.sortedTerms.length;\n              }\n\n              @Override\n              public long getSumTotalTermFreq() {\n                return info.getSumTotalTermFreq();\n              }\n\n              @Override\n              public long getSumDocFreq() throws IOException {\n                // each term has df=1\n                return info.sortedTerms.length;\n              }\n\n              @Override\n              public int getDocCount() throws IOException {\n                return info.sortedTerms.length > 0 ? 1 : 0;\n              }\n              \n              \n            };\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":"    @Override\n    public InvertedFields fields() {\n      sortFields();\n      return new MemoryFields();\n    }\n\n","sourceOld":"    @Override\n    public Fields fields() {\n      sortFields();\n      return new MemoryFields();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":"    @Override\n    public Fields fields() {\n      sortFields();\n      return new MemoryFields();\n    }\n\n","sourceOld":"    @Override\n    public InvertedFields fields() {\n      sortFields();\n      return new MemoryFields();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":"    @Override\n    public Fields fields() {\n      sortFields();\n      return new MemoryFields();\n    }\n\n","sourceOld":"    @Override\n    public Fields fields() {\n      sortFields();\n      return new MemoryFields();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"25433c5cacacb7a2055d62d4d36b0daf210e0a10":["f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"16843358872ed92ba92888ab99df297550b9a36a":["5f4e87790277826a2aea119328600dfb07761f32","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"3cc749c053615f5871f3b95715fe292f34e70a53":["25433c5cacacb7a2055d62d4d36b0daf210e0a10"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3cc749c053615f5871f3b95715fe292f34e70a53"],"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"5f4e87790277826a2aea119328600dfb07761f32":["20cf910d1892b0a0ff8543ec4551b6df2dc3de40","08932c793647a36953d1816b1060121f48820d3f"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808","f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"08932c793647a36953d1816b1060121f48820d3f":["20cf910d1892b0a0ff8543ec4551b6df2dc3de40"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"20cf910d1892b0a0ff8543ec4551b6df2dc3de40":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["08932c793647a36953d1816b1060121f48820d3f"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["08932c793647a36953d1816b1060121f48820d3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"25433c5cacacb7a2055d62d4d36b0daf210e0a10":["3cc749c053615f5871f3b95715fe292f34e70a53"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"16843358872ed92ba92888ab99df297550b9a36a":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94":["25433c5cacacb7a2055d62d4d36b0daf210e0a10","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"5f4e87790277826a2aea119328600dfb07761f32":["16843358872ed92ba92888ab99df297550b9a36a"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"08932c793647a36953d1816b1060121f48820d3f":["5f4e87790277826a2aea119328600dfb07761f32","0e28c49f1fb6215a550fdadcf3805aa629b63ec0","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20cf910d1892b0a0ff8543ec4551b6df2dc3de40"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"20cf910d1892b0a0ff8543ec4551b6df2dc3de40":["5f4e87790277826a2aea119328600dfb07761f32","08932c793647a36953d1816b1060121f48820d3f"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["135621f3a0670a9394eb563224a3b76cc4dddc0f","16843358872ed92ba92888ab99df297550b9a36a","f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94","63639dd66fd5bd9b90bc24dd596ae01575f27cc4","29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","16843358872ed92ba92888ab99df297550b9a36a","63639dd66fd5bd9b90bc24dd596ae01575f27cc4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}