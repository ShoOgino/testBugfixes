{"path":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValuesFacetingSimple().mjava","commits":[{"id":"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3","date":1361894345,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValuesFacetingSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocValuesFacetingSimple() {\n    // this is the random test verbatim from DocValuesTest, so it populates with the default values defined in its schema.\n    for (int i = 0; i < 50; ++i) {\n      assertU(adoc(\"id\", \"\" + i, \"floatdv\", \"1\", \"intdv\", \"2\", \"doubledv\", \"3\", \"longdv\", \"4\", \"datedv\", \"1995-12-31T23:59:59.999Z\"));\n    }\n    for (int i = 0; i < 50; ++i) {\n      if (rarely()) {\n        commit(); // to have several segments\n      }\n      assertU(adoc(\"id\", \"1000\" + i, \"floatdv\", \"\" + i, \"intdv\", \"\" + i, \"doubledv\", \"\" + i, \"longdv\", \"\" + i, \"datedv\", (1900+i) + \"-12-31T23:59:59.999Z\", \"stringdv\", \"abc\" + i));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='4'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='33'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='1.0'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='0.0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='33.0'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='3.0'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='0.0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='33.0'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='2'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='33'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1995-12-31T23:59:59.999Z'][.='50']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1900-12-31T23:59:59.999Z'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1933-12-31T23:59:59.999Z'][.='1']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"404b171beda23ddce9e45366a3dbd6444d8d029c","date":1391180301,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValuesFacetingSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValuesFacetingSimple().mjava","sourceNew":"  public void testDocValuesFacetingSimple() {\n    // this is the random test verbatim from DocValuesTest, so it populates with the default values defined in its schema.\n    for (int i = 0; i < 50; ++i) {\n      assertU(adoc(\"id\", \"\" + i, \"floatdv\", \"1\", \"intdv\", \"2\", \"doubledv\", \"3\", \"longdv\", \"4\", \"datedv\", \"1995-12-31T23:59:59.999Z\"));\n    }\n    for (int i = 0; i < 50; ++i) {\n      if (rarely()) {\n        assertU(commit()); // to have several segments\n      }\n      assertU(adoc(\"id\", \"1000\" + i, \"floatdv\", \"\" + i, \"intdv\", \"\" + i, \"doubledv\", \"\" + i, \"longdv\", \"\" + i, \"datedv\", (1900+i) + \"-12-31T23:59:59.999Z\", \"stringdv\", \"abc\" + i));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='4'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='33'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='1.0'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='0.0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='33.0'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='3.0'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='0.0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='33.0'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='2'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='33'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1995-12-31T23:59:59.999Z'][.='50']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1900-12-31T23:59:59.999Z'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1933-12-31T23:59:59.999Z'][.='1']\");\n  }\n\n","sourceOld":"  public void testDocValuesFacetingSimple() {\n    // this is the random test verbatim from DocValuesTest, so it populates with the default values defined in its schema.\n    for (int i = 0; i < 50; ++i) {\n      assertU(adoc(\"id\", \"\" + i, \"floatdv\", \"1\", \"intdv\", \"2\", \"doubledv\", \"3\", \"longdv\", \"4\", \"datedv\", \"1995-12-31T23:59:59.999Z\"));\n    }\n    for (int i = 0; i < 50; ++i) {\n      if (rarely()) {\n        commit(); // to have several segments\n      }\n      assertU(adoc(\"id\", \"1000\" + i, \"floatdv\", \"\" + i, \"intdv\", \"\" + i, \"doubledv\", \"\" + i, \"longdv\", \"\" + i, \"datedv\", (1900+i) + \"-12-31T23:59:59.999Z\", \"stringdv\", \"abc\" + i));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='4'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='33'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='1.0'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='0.0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='33.0'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='3.0'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='0.0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='33.0'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='2'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='33'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1995-12-31T23:59:59.999Z'][.='50']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1900-12-31T23:59:59.999Z'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1933-12-31T23:59:59.999Z'][.='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","date":1465691899,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValuesFacetingSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValuesFacetingSimple().mjava","sourceNew":"  @Test\n  public void testDocValuesFacetingSimple() {\n    // this is the random test verbatim from DocValuesTest, so it populates with the default values defined in its schema.\n    for (int i = 0; i < 50; ++i) {\n      assertU(adoc(\"id\", \"\" + i, \"floatdv\", \"1\", \"intdv\", \"2\", \"doubledv\", \"3\", \"longdv\", \"4\", \n          \"datedv\", \"1995-12-31T23:59:59.999Z\",\n          \"stringdv\", \"abc\", \"booldv\", \"true\"));\n    }\n    for (int i = 0; i < 50; ++i) {\n      if (rarely()) {\n        assertU(commit()); // to have several segments\n      }\n      switch (i % 3) {\n        case 0:\n          assertU(adoc(\"id\", \"1000\" + i, \"floatdv\", \"\" + i, \"intdv\", \"\" + i, \"doubledv\", \"\" + i, \"longdv\", \"\" + i, \n              \"datedv\", (1900+i) + \"-12-31T23:59:59.999Z\", \"stringdv\", \"abc\" + i, \"booldv\", \"true\", \"booldv\", \"true\"));\n          break;\n        case 1:\n          assertU(adoc(\"id\", \"1000\" + i, \"floatdv\", \"\" + i, \"intdv\", \"\" + i, \"doubledv\", \"\" + i, \"longdv\", \"\" + i,\n              \"datedv\", (1900+i) + \"-12-31T23:59:59.999Z\", \"stringdv\", \"abc\" + i, \"booldv\", \"false\", \"booldv\", \"false\"));\n          break;\n        case 2:\n          assertU(adoc(\"id\", \"1000\" + i, \"floatdv\", \"\" + i, \"intdv\", \"\" + i, \"doubledv\", \"\" + i, \"longdv\", \"\" + i,\n              \"datedv\", (1900+i) + \"-12-31T23:59:59.999Z\", \"stringdv\", \"abc\" + i, \"booldv\", \"true\", \"booldv\", \"false\"));\n          break;\n      }\n\n\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='4'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='33'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='1.0'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='0.0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='33.0'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='3.0'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='0.0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='33.0'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='2'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='33'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1995-12-31T23:59:59.999Z'][.='50']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1900-12-31T23:59:59.999Z'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1933-12-31T23:59:59.999Z'][.='1']\");\n\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"stringdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='stringdv']/int[@name='abc'][.='50']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"stringdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='stringdv']/int[@name='abc1'][.='1']\",\n        \"//lst[@name='stringdv']/int[@name='abc13'][.='1']\",\n        \"//lst[@name='stringdv']/int[@name='abc19'][.='1']\",\n        \"//lst[@name='stringdv']/int[@name='abc49'][.='1']\"\n        );\n    \n    // Even though offseting by 33, the sort order is abc1 abc11....abc2 so it throws the position in the return list off.\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"stringdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='stringdv']/int[@name='abc38'][.='1']\");\n\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"booldv\", \"facet.sort\", \"count\"),\n        \"//lst[@name='booldv']/int[@name='true'][.='83']\",\n        \"//lst[@name='booldv']/int[@name='false'][.='33']\");\n\n  }\n\n","sourceOld":"  public void testDocValuesFacetingSimple() {\n    // this is the random test verbatim from DocValuesTest, so it populates with the default values defined in its schema.\n    for (int i = 0; i < 50; ++i) {\n      assertU(adoc(\"id\", \"\" + i, \"floatdv\", \"1\", \"intdv\", \"2\", \"doubledv\", \"3\", \"longdv\", \"4\", \"datedv\", \"1995-12-31T23:59:59.999Z\"));\n    }\n    for (int i = 0; i < 50; ++i) {\n      if (rarely()) {\n        assertU(commit()); // to have several segments\n      }\n      assertU(adoc(\"id\", \"1000\" + i, \"floatdv\", \"\" + i, \"intdv\", \"\" + i, \"doubledv\", \"\" + i, \"longdv\", \"\" + i, \"datedv\", (1900+i) + \"-12-31T23:59:59.999Z\", \"stringdv\", \"abc\" + i));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='4'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='33'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='1.0'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='0.0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='33.0'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='3.0'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='0.0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='33.0'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='2'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='33'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1995-12-31T23:59:59.999Z'][.='50']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1900-12-31T23:59:59.999Z'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1933-12-31T23:59:59.999Z'][.='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValuesFacetingSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValuesFacetingSimple().mjava","sourceNew":"  @Test\n  public void testDocValuesFacetingSimple() {\n    // this is the random test verbatim from DocValuesTest, so it populates with the default values defined in its schema.\n    for (int i = 0; i < 50; ++i) {\n      assertU(adoc(\"id\", \"\" + i, \"floatdv\", \"1\", \"intdv\", \"2\", \"doubledv\", \"3\", \"longdv\", \"4\", \n          \"datedv\", \"1995-12-31T23:59:59.999Z\",\n          \"stringdv\", \"abc\", \"booldv\", \"true\"));\n    }\n    for (int i = 0; i < 50; ++i) {\n      if (rarely()) {\n        assertU(commit()); // to have several segments\n      }\n      switch (i % 3) {\n        case 0:\n          assertU(adoc(\"id\", \"1000\" + i, \"floatdv\", \"\" + i, \"intdv\", \"\" + i, \"doubledv\", \"\" + i, \"longdv\", \"\" + i, \n              \"datedv\", (1900+i) + \"-12-31T23:59:59.999Z\", \"stringdv\", \"abc\" + i, \"booldv\", \"true\", \"booldv\", \"true\"));\n          break;\n        case 1:\n          assertU(adoc(\"id\", \"1000\" + i, \"floatdv\", \"\" + i, \"intdv\", \"\" + i, \"doubledv\", \"\" + i, \"longdv\", \"\" + i,\n              \"datedv\", (1900+i) + \"-12-31T23:59:59.999Z\", \"stringdv\", \"abc\" + i, \"booldv\", \"false\", \"booldv\", \"false\"));\n          break;\n        case 2:\n          assertU(adoc(\"id\", \"1000\" + i, \"floatdv\", \"\" + i, \"intdv\", \"\" + i, \"doubledv\", \"\" + i, \"longdv\", \"\" + i,\n              \"datedv\", (1900+i) + \"-12-31T23:59:59.999Z\", \"stringdv\", \"abc\" + i, \"booldv\", \"true\", \"booldv\", \"false\"));\n          break;\n      }\n\n\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='4'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='33'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='1.0'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='0.0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='33.0'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='3.0'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='0.0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='33.0'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='2'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='33'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1995-12-31T23:59:59.999Z'][.='50']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1900-12-31T23:59:59.999Z'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1933-12-31T23:59:59.999Z'][.='1']\");\n\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"stringdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='stringdv']/int[@name='abc'][.='50']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"stringdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='stringdv']/int[@name='abc1'][.='1']\",\n        \"//lst[@name='stringdv']/int[@name='abc13'][.='1']\",\n        \"//lst[@name='stringdv']/int[@name='abc19'][.='1']\",\n        \"//lst[@name='stringdv']/int[@name='abc49'][.='1']\"\n        );\n    \n    // Even though offseting by 33, the sort order is abc1 abc11....abc2 so it throws the position in the return list off.\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"stringdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='stringdv']/int[@name='abc38'][.='1']\");\n\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"booldv\", \"facet.sort\", \"count\"),\n        \"//lst[@name='booldv']/int[@name='true'][.='83']\",\n        \"//lst[@name='booldv']/int[@name='false'][.='33']\");\n\n  }\n\n","sourceOld":"  public void testDocValuesFacetingSimple() {\n    // this is the random test verbatim from DocValuesTest, so it populates with the default values defined in its schema.\n    for (int i = 0; i < 50; ++i) {\n      assertU(adoc(\"id\", \"\" + i, \"floatdv\", \"1\", \"intdv\", \"2\", \"doubledv\", \"3\", \"longdv\", \"4\", \"datedv\", \"1995-12-31T23:59:59.999Z\"));\n    }\n    for (int i = 0; i < 50; ++i) {\n      if (rarely()) {\n        assertU(commit()); // to have several segments\n      }\n      assertU(adoc(\"id\", \"1000\" + i, \"floatdv\", \"\" + i, \"intdv\", \"\" + i, \"doubledv\", \"\" + i, \"longdv\", \"\" + i, \"datedv\", (1900+i) + \"-12-31T23:59:59.999Z\", \"stringdv\", \"abc\" + i));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='4'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"longdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='longdv']/int[@name='33'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='1.0'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='0.0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"floatdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='floatdv']/int[@name='33.0'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='3.0'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='0.0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"doubledv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='doubledv']/int[@name='33.0'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='2'][.='51']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='0'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"intdv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='intdv']/int[@name='33'][.='1']\");\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"count\", \"facet.limit\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1995-12-31T23:59:59.999Z'][.='50']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"count\", \"facet.offset\", \"1\", \"facet.limit\", \"-1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1900-12-31T23:59:59.999Z'][.='1']\");\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"rows\", \"0\", \"facet.field\", \"datedv\", \"facet.sort\", \"index\", \"facet.offset\", \"33\", \"facet.limit\", \"1\", \"facet.mincount\", \"1\"),\n        \"//lst[@name='datedv']/int[@name='1933-12-31T23:59:59.999Z'][.='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["404b171beda23ddce9e45366a3dbd6444d8d029c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"404b171beda23ddce9e45366a3dbd6444d8d029c":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["404b171beda23ddce9e45366a3dbd6444d8d029c","7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"]},"commit2Childs":{"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["404b171beda23ddce9e45366a3dbd6444d8d029c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"404b171beda23ddce9e45366a3dbd6444d8d029c":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}