{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","commits":[{"id":"86365ce8db75e42ebe10805e99e92c463fef63b6","date":1330370408,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithThreads() throws Exception {\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new DocValuesField(\"stringdv\", br, DocValues.Type.BYTES_VAR_SORTED));\n      doc.add(new DocValuesField(\"id\", numDocs, DocValues.Type.VAR_INTS));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n    final DocValues dv = sr.docValues(\"stringdv\");\n    final DocValues.Source stringDVSource = dv.getSource();\n    assertNotNull(stringDVSource);\n    final DocValues.Source stringDVDirectSource = dv.getDirectSource();\n    assertNotNull(stringDVDirectSource);\n    assertNotNull(dv);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final DocValues.Source docIDToID = sr.docValues(\"id\").getSource();\n\n    final int NUM_THREADS = _TestUtil.nextInt(random, 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            while(System.currentTimeMillis() < END_TIME) {\n              final DocValues.Source source;\n              // LUCENE-3829: remove this 'true ||' below\n              // once we fix thread safety of DirectSource\n              if (true || random.nextBoolean()) {\n                source = stringDVSource;\n              } else {\n                source = stringDVDirectSource;\n              }\n\n              final DocValues.SortedSource sortedSource = source.asSortedSource();\n              assertNotNull(sortedSource);\n\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                final BytesRef br = sortedSource.getBytes(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.getInt(docID)), br);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"afaa9f4f66bca47670935ec63b0f7696551f2776","date":1330469799,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","sourceNew":"  public void testWithThreads() throws Exception {\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new DocValuesField(\"stringdv\", br, DocValues.Type.BYTES_VAR_SORTED));\n      doc.add(new DocValuesField(\"id\", numDocs, DocValues.Type.VAR_INTS));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n    final DocValues dv = sr.docValues(\"stringdv\");\n    assertNotNull(dv);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final DocValues.Source docIDToID = sr.docValues(\"id\").getSource();\n\n    final int NUM_THREADS = _TestUtil.nextInt(random, 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            final DocValues.Source stringDVSource;\n            final DocValues.Source stringDVDirectSource;\n            try {\n              stringDVSource = dv.getSource();\n              assertNotNull(stringDVSource);\n              stringDVDirectSource = dv.getDirectSource();\n              assertNotNull(stringDVDirectSource);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final DocValues.Source source;\n              if (random.nextBoolean()) {\n                source = stringDVSource;\n              } else {\n                source = stringDVDirectSource;\n              }\n\n              final DocValues.SortedSource sortedSource = source.asSortedSource();\n              assertNotNull(sortedSource);\n\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                final BytesRef br = sortedSource.getBytes(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.getInt(docID)), br);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testWithThreads() throws Exception {\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new DocValuesField(\"stringdv\", br, DocValues.Type.BYTES_VAR_SORTED));\n      doc.add(new DocValuesField(\"id\", numDocs, DocValues.Type.VAR_INTS));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n    final DocValues dv = sr.docValues(\"stringdv\");\n    final DocValues.Source stringDVSource = dv.getSource();\n    assertNotNull(stringDVSource);\n    final DocValues.Source stringDVDirectSource = dv.getDirectSource();\n    assertNotNull(stringDVDirectSource);\n    assertNotNull(dv);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final DocValues.Source docIDToID = sr.docValues(\"id\").getSource();\n\n    final int NUM_THREADS = _TestUtil.nextInt(random, 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            while(System.currentTimeMillis() < END_TIME) {\n              final DocValues.Source source;\n              // LUCENE-3829: remove this 'true ||' below\n              // once we fix thread safety of DirectSource\n              if (true || random.nextBoolean()) {\n                source = stringDVSource;\n              } else {\n                source = stringDVDirectSource;\n              }\n\n              final DocValues.SortedSource sortedSource = source.asSortedSource();\n              assertNotNull(sortedSource);\n\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                final BytesRef br = sortedSource.getBytes(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.getInt(docID)), br);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithThreads() throws Exception {\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new DocValuesField(\"stringdv\", br, DocValues.Type.BYTES_VAR_SORTED));\n      doc.add(new DocValuesField(\"id\", numDocs, DocValues.Type.VAR_INTS));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n    final DocValues dv = sr.docValues(\"stringdv\");\n    assertNotNull(dv);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final DocValues.Source docIDToID = sr.docValues(\"id\").getSource();\n\n    final int NUM_THREADS = _TestUtil.nextInt(random, 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            final DocValues.Source stringDVSource;\n            final DocValues.Source stringDVDirectSource;\n            try {\n              stringDVSource = dv.getSource();\n              assertNotNull(stringDVSource);\n              stringDVDirectSource = dv.getDirectSource();\n              assertNotNull(stringDVDirectSource);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final DocValues.Source source;\n              if (random.nextBoolean()) {\n                source = stringDVSource;\n              } else {\n                source = stringDVDirectSource;\n              }\n\n              final DocValues.SortedSource sortedSource = source.asSortedSource();\n              assertNotNull(sortedSource);\n\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                final BytesRef br = sortedSource.getBytes(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.getInt(docID)), br);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","sourceNew":"  public void testWithThreads() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new DocValuesField(\"stringdv\", br, DocValues.Type.BYTES_VAR_SORTED));\n      doc.add(new DocValuesField(\"id\", numDocs, DocValues.Type.VAR_INTS));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n    final DocValues dv = sr.docValues(\"stringdv\");\n    assertNotNull(dv);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final DocValues.Source docIDToID = sr.docValues(\"id\").getSource();\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final DocValues.Source stringDVSource;\n            final DocValues.Source stringDVDirectSource;\n            try {\n              stringDVSource = dv.getSource();\n              assertNotNull(stringDVSource);\n              stringDVDirectSource = dv.getDirectSource();\n              assertNotNull(stringDVDirectSource);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final DocValues.Source source;\n              if (random.nextBoolean()) {\n                source = stringDVSource;\n              } else {\n                source = stringDVDirectSource;\n              }\n\n              final DocValues.SortedSource sortedSource = source.asSortedSource();\n              assertNotNull(sortedSource);\n\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                final BytesRef br = sortedSource.getBytes(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.getInt(docID)), br);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testWithThreads() throws Exception {\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new DocValuesField(\"stringdv\", br, DocValues.Type.BYTES_VAR_SORTED));\n      doc.add(new DocValuesField(\"id\", numDocs, DocValues.Type.VAR_INTS));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n    final DocValues dv = sr.docValues(\"stringdv\");\n    assertNotNull(dv);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final DocValues.Source docIDToID = sr.docValues(\"id\").getSource();\n\n    final int NUM_THREADS = _TestUtil.nextInt(random, 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            final DocValues.Source stringDVSource;\n            final DocValues.Source stringDVDirectSource;\n            try {\n              stringDVSource = dv.getSource();\n              assertNotNull(stringDVSource);\n              stringDVDirectSource = dv.getDirectSource();\n              assertNotNull(stringDVDirectSource);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final DocValues.Source source;\n              if (random.nextBoolean()) {\n                source = stringDVSource;\n              } else {\n                source = stringDVDirectSource;\n              }\n\n              final DocValues.SortedSource sortedSource = source.asSortedSource();\n              assertNotNull(sortedSource);\n\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                final BytesRef br = sortedSource.getBytes(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.getInt(docID)), br);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","date":1336650316,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","sourceNew":"  public void testWithThreads() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedBytesDocValuesField(\"stringdv\", br));\n      doc.add(new PackedLongDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n    final DocValues dv = sr.docValues(\"stringdv\");\n    assertNotNull(dv);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final DocValues.Source docIDToID = sr.docValues(\"id\").getSource();\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final DocValues.Source stringDVSource;\n            final DocValues.Source stringDVDirectSource;\n            try {\n              stringDVSource = dv.getSource();\n              assertNotNull(stringDVSource);\n              stringDVDirectSource = dv.getDirectSource();\n              assertNotNull(stringDVDirectSource);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final DocValues.Source source;\n              if (random.nextBoolean()) {\n                source = stringDVSource;\n              } else {\n                source = stringDVDirectSource;\n              }\n\n              final DocValues.SortedSource sortedSource = source.asSortedSource();\n              assertNotNull(sortedSource);\n\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                final BytesRef br = sortedSource.getBytes(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.getInt(docID)), br);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testWithThreads() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new DocValuesField(\"stringdv\", br, DocValues.Type.BYTES_VAR_SORTED));\n      doc.add(new DocValuesField(\"id\", numDocs, DocValues.Type.VAR_INTS));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n    final DocValues dv = sr.docValues(\"stringdv\");\n    assertNotNull(dv);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final DocValues.Source docIDToID = sr.docValues(\"id\").getSource();\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final DocValues.Source stringDVSource;\n            final DocValues.Source stringDVDirectSource;\n            try {\n              stringDVSource = dv.getSource();\n              assertNotNull(stringDVSource);\n              stringDVDirectSource = dv.getDirectSource();\n              assertNotNull(stringDVDirectSource);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final DocValues.Source source;\n              if (random.nextBoolean()) {\n                source = stringDVSource;\n              } else {\n                source = stringDVDirectSource;\n              }\n\n              final DocValues.SortedSource sortedSource = source.asSortedSource();\n              assertNotNull(sortedSource);\n\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                final BytesRef br = sortedSource.getBytes(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.getInt(docID)), br);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["86365ce8db75e42ebe10805e99e92c463fef63b6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55d38708477d49511977195bad066d9ced001005","date":1353348143,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","sourceNew":"  public void testWithThreads() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedBytesDocValuesField(\"stringdv\", br));\n      doc.add(new PackedLongDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n    final SortedDocValues dv = sorted(sr, \"stringdv\").newRAMInstance();\n    assertNotNull(dv);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final NumericDocValues docIDToID = numeric(sr, \"id\").newRAMInstance();\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDV = dv;\n            final SortedDocValues stringDVDirect;\n            try {\n              \n              assertNotNull(stringDV);\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              if (random.nextBoolean()) {\n                source = stringDV;\n              } else {\n                source = stringDVDirect;\n              }\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testWithThreads() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedBytesDocValuesField(\"stringdv\", br));\n      doc.add(new PackedLongDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n    final DocValues dv = sr.docValues(\"stringdv\");\n    assertNotNull(dv);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final DocValues.Source docIDToID = sr.docValues(\"id\").getSource();\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final DocValues.Source stringDVSource;\n            final DocValues.Source stringDVDirectSource;\n            try {\n              stringDVSource = dv.getSource();\n              assertNotNull(stringDVSource);\n              stringDVDirectSource = dv.getDirectSource();\n              assertNotNull(stringDVDirectSource);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final DocValues.Source source;\n              if (random.nextBoolean()) {\n                source = stringDVSource;\n              } else {\n                source = stringDVDirectSource;\n              }\n\n              final DocValues.SortedSource sortedSource = source.asSortedSource();\n              assertNotNull(sortedSource);\n\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                final BytesRef br = sortedSource.getBytes(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.getInt(docID)), br);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2893fd5349134af382d33ccc3d84840394c6c1","date":1353682567,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","sourceNew":"  public void testWithThreads() throws Exception {\n    assumeTrue(\"requires simple dv\", _TestUtil.canUseSimpleDV());\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedBytesDocValuesField(\"stringdv\", br));\n      doc.add(new PackedLongDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n    final SortedDocValues dv = sorted(sr, \"stringdv\").newRAMInstance();\n    assertNotNull(dv);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final NumericDocValues docIDToID = numeric(sr, \"id\").newRAMInstance();\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDV = dv;\n            final SortedDocValues stringDVDirect;\n            try {\n              \n              assertNotNull(stringDV);\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              if (random.nextBoolean()) {\n                source = stringDV;\n              } else {\n                source = stringDVDirect;\n              }\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testWithThreads() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedBytesDocValuesField(\"stringdv\", br));\n      doc.add(new PackedLongDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n    final SortedDocValues dv = sorted(sr, \"stringdv\").newRAMInstance();\n    assertNotNull(dv);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final NumericDocValues docIDToID = numeric(sr, \"id\").newRAMInstance();\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDV = dv;\n            final SortedDocValues stringDVDirect;\n            try {\n              \n              assertNotNull(stringDV);\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              if (random.nextBoolean()) {\n                source = stringDV;\n              } else {\n                source = stringDVDirect;\n              }\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bc9c79bf95b1262e0a6908ffbd895de19e33dc2","date":1354573582,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","sourceNew":"  public void testWithThreads() throws Exception {\n    assumeTrue(\"requires simple dv\", _TestUtil.canUseSimpleDV());\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedBytesDocValuesField(\"stringdv\", br));\n      doc.add(new PackedLongDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n    final SortedDocValues dv = sorted(sr, \"stringdv\");\n    assertNotNull(dv);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final NumericDocValues docIDToID = numeric(sr, \"id\");\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDV = dv;\n            final SortedDocValues stringDVDirect;\n            try {\n              \n              assertNotNull(stringDV);\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              if (random.nextBoolean()) {\n                source = stringDV;\n              } else {\n                source = stringDVDirect;\n              }\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testWithThreads() throws Exception {\n    assumeTrue(\"requires simple dv\", _TestUtil.canUseSimpleDV());\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedBytesDocValuesField(\"stringdv\", br));\n      doc.add(new PackedLongDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n    final SortedDocValues dv = sorted(sr, \"stringdv\").newRAMInstance();\n    assertNotNull(dv);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final NumericDocValues docIDToID = numeric(sr, \"id\").newRAMInstance();\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDV = dv;\n            final SortedDocValues stringDVDirect;\n            try {\n              \n              assertNotNull(stringDV);\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              if (random.nextBoolean()) {\n                source = stringDV;\n              } else {\n                source = stringDVDirect;\n              }\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2899ae5069a2533466ac842042478e67263e1f43","date":1354624628,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","sourceNew":"  public void testWithThreads() throws Exception {\n    assumeTrue(\"requires simple dv\", _TestUtil.canUseSimpleDV());\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedBytesDocValuesField(\"stringdv\", br));\n      doc.add(new PackedLongDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final NumericDocValues docIDToID = numeric(sr, \"id\");\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testWithThreads() throws Exception {\n    assumeTrue(\"requires simple dv\", _TestUtil.canUseSimpleDV());\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedBytesDocValuesField(\"stringdv\", br));\n      doc.add(new PackedLongDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n    final SortedDocValues dv = sorted(sr, \"stringdv\");\n    assertNotNull(dv);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final NumericDocValues docIDToID = numeric(sr, \"id\");\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDV = dv;\n            final SortedDocValues stringDVDirect;\n            try {\n              \n              assertNotNull(stringDV);\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              if (random.nextBoolean()) {\n                source = stringDV;\n              } else {\n                source = stringDVDirect;\n              }\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddadc5a8439c906a65bfba5ce15166b5d5b58d82","date":1358287870,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","sourceNew":"  public void testWithThreads() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedBytesDocValuesField(\"stringdv\", br));\n      doc.add(new PackedLongDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final NumericDocValues docIDToID = numeric(sr, \"id\");\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testWithThreads() throws Exception {\n    assumeTrue(\"requires simple dv\", _TestUtil.canUseSimpleDV());\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedBytesDocValuesField(\"stringdv\", br));\n      doc.add(new PackedLongDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final NumericDocValues docIDToID = numeric(sr, \"id\");\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","sourceNew":"  public void testWithThreads() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final NumericDocValues docIDToID = numeric(sr, \"id\");\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testWithThreads() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedBytesDocValuesField(\"stringdv\", br));\n      doc.add(new PackedLongDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final NumericDocValues docIDToID = numeric(sr, \"id\");\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d048798bdb94f09ba6613d3956314a3ca151bcc3","date":1359417182,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final NumericDocValues docIDToID = sr.getNumericDocValues(\"id\");\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testWithThreads() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final NumericDocValues docIDToID = numeric(sr, \"id\");\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testWithThreads().mjava","sourceNew":null,"sourceOld":"  public void testWithThreads() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedBytesDocValuesField(\"stringdv\", br));\n      doc.add(new PackedLongDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n    final DocValues dv = sr.docValues(\"stringdv\");\n    assertNotNull(dv);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final DocValues.Source docIDToID = sr.docValues(\"id\").getSource();\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final DocValues.Source stringDVSource;\n            final DocValues.Source stringDVDirectSource;\n            try {\n              stringDVSource = dv.getSource();\n              assertNotNull(stringDVSource);\n              stringDVDirectSource = dv.getDirectSource();\n              assertNotNull(stringDVDirectSource);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final DocValues.Source source;\n              if (random.nextBoolean()) {\n                source = stringDVSource;\n              } else {\n                source = stringDVDirectSource;\n              }\n\n              final DocValues.SortedSource sortedSource = source.asSortedSource();\n              assertNotNull(sortedSource);\n\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                final BytesRef br = sortedSource.getBytes(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.getInt(docID)), br);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","afaa9f4f66bca47670935ec63b0f7696551f2776"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["55d38708477d49511977195bad066d9ced001005"],"2899ae5069a2533466ac842042478e67263e1f43":["4bc9c79bf95b1262e0a6908ffbd895de19e33dc2"],"86365ce8db75e42ebe10805e99e92c463fef63b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"afaa9f4f66bca47670935ec63b0f7696551f2776":["86365ce8db75e42ebe10805e99e92c463fef63b6"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","d048798bdb94f09ba6613d3956314a3ca151bcc3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d048798bdb94f09ba6613d3956314a3ca151bcc3":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"4bc9c79bf95b1262e0a6908ffbd895de19e33dc2":["6e2893fd5349134af382d33ccc3d84840394c6c1"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["afaa9f4f66bca47670935ec63b0f7696551f2776"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["ddadc5a8439c906a65bfba5ce15166b5d5b58d82"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ddadc5a8439c906a65bfba5ce15166b5d5b58d82":["2899ae5069a2533466ac842042478e67263e1f43"],"55d38708477d49511977195bad066d9ced001005":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"6e2893fd5349134af382d33ccc3d84840394c6c1":["4bc9c79bf95b1262e0a6908ffbd895de19e33dc2"],"2899ae5069a2533466ac842042478e67263e1f43":["ddadc5a8439c906a65bfba5ce15166b5d5b58d82"],"86365ce8db75e42ebe10805e99e92c463fef63b6":["afaa9f4f66bca47670935ec63b0f7696551f2776"],"afaa9f4f66bca47670935ec63b0f7696551f2776":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","86365ce8db75e42ebe10805e99e92c463fef63b6"],"d048798bdb94f09ba6613d3956314a3ca151bcc3":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4bc9c79bf95b1262e0a6908ffbd895de19e33dc2":["2899ae5069a2533466ac842042478e67263e1f43"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["d048798bdb94f09ba6613d3956314a3ca151bcc3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"55d38708477d49511977195bad066d9ced001005":["6e2893fd5349134af382d33ccc3d84840394c6c1"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["d4d69c535930b5cce125cff868d40f6373dc27d4","55d38708477d49511977195bad066d9ced001005"],"ddadc5a8439c906a65bfba5ce15166b5d5b58d82":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}