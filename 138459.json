{"path":"src/test/org/apache/lucene/index/TestDoc#merge(String,String,String,boolean).mjava","commits":[{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#merge(String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"   private void merge(String seg1, String seg2, String merged, boolean useCompoundFile)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n\n      SegmentReader r1 = new SegmentReader(new SegmentInfo(seg1, 1, directory));\n      SegmentReader r2 = new SegmentReader(new SegmentInfo(seg2, 1, directory));\n\n      SegmentMerger merger = \n        new SegmentMerger(directory, merged, useCompoundFile);\n        \n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n\n      directory.close();\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96","date":1066874526,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#merge(String,String,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#merge(String,String,String,boolean).mjava","sourceNew":"   private void merge(String seg1, String seg2, String merged, boolean useCompoundFile)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n\n      SegmentReader r1 = new SegmentReader(new SegmentInfo(seg1, 1, directory));\n      SegmentReader r2 = new SegmentReader(new SegmentInfo(seg2, 1, directory));\n\n      SegmentMerger merger =\n        new SegmentMerger(directory, merged, useCompoundFile);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n\n      directory.close();\n   }\n\n","sourceOld":"   private void merge(String seg1, String seg2, String merged, boolean useCompoundFile)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n\n      SegmentReader r1 = new SegmentReader(new SegmentInfo(seg1, 1, directory));\n      SegmentReader r2 = new SegmentReader(new SegmentInfo(seg2, 1, directory));\n\n      SegmentMerger merger = \n        new SegmentMerger(directory, merged, useCompoundFile);\n        \n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n\n      directory.close();\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42a7d0b384f0022c5a29e562b809ebf73991d7e6","date":1082489615,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#merge(String,String,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#merge(String,String,String,boolean).mjava","sourceNew":"   private void merge(String seg1, String seg2, String merged, boolean useCompoundFile)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n\n      SegmentReader r1 = new SegmentReader(new SegmentInfo(seg1, 1, directory));\n      SegmentReader r2 = new SegmentReader(new SegmentInfo(seg2, 1, directory));\n\n      SegmentMerger merger =\n        new SegmentMerger(directory, merged, useCompoundFile);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n\n      directory.close();\n   }\n\n","sourceOld":"   private void merge(String seg1, String seg2, String merged, boolean useCompoundFile)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n\n      SegmentReader r1 = new SegmentReader(new SegmentInfo(seg1, 1, directory));\n      SegmentReader r2 = new SegmentReader(new SegmentInfo(seg2, 1, directory));\n\n      SegmentMerger merger =\n        new SegmentMerger(directory, merged, useCompoundFile);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n\n      directory.close();\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79fc67d5cdece593cd3b3b6c7ef195ee2625522c","date":1091970333,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#merge(String,String,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#merge(String,String,String,boolean).mjava","sourceNew":"   private void merge(String seg1, String seg2, String merged, boolean useCompoundFile)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n\n      SegmentReader r1 = new SegmentReader(new SegmentInfo(seg1, 1, directory));\n      SegmentReader r2 = new SegmentReader(new SegmentInfo(seg2, 1, directory));\n\n      SegmentMerger merger =\n        new SegmentMerger(directory, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if(useCompoundFile)\n          merger.createCompoundFile();\n\n      directory.close();\n   }\n\n","sourceOld":"   private void merge(String seg1, String seg2, String merged, boolean useCompoundFile)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n\n      SegmentReader r1 = new SegmentReader(new SegmentInfo(seg1, 1, directory));\n      SegmentReader r2 = new SegmentReader(new SegmentInfo(seg2, 1, directory));\n\n      SegmentMerger merger =\n        new SegmentMerger(directory, merged, useCompoundFile);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n\n      directory.close();\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6263f219dcdfc6e861ecffaecf5e1e195f1aaaa7","date":1092245915,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#merge(String,String,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#merge(String,String,String,boolean).mjava","sourceNew":"   private void merge(String seg1, String seg2, String merged, boolean useCompoundFile)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n\n      SegmentReader r1 = new SegmentReader(new SegmentInfo(seg1, 1, directory));\n      SegmentReader r2 = new SegmentReader(new SegmentInfo(seg2, 1, directory));\n\n      SegmentMerger merger =\n        new SegmentMerger(directory, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        Vector filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (Iterator iter = filesToDelete.iterator(); iter.hasNext();)\n          directory.deleteFile((String) iter.next());\n      }\n\n      directory.close();\n   }\n\n","sourceOld":"   private void merge(String seg1, String seg2, String merged, boolean useCompoundFile)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n\n      SegmentReader r1 = new SegmentReader(new SegmentInfo(seg1, 1, directory));\n      SegmentReader r2 = new SegmentReader(new SegmentInfo(seg2, 1, directory));\n\n      SegmentMerger merger =\n        new SegmentMerger(directory, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if(useCompoundFile)\n          merger.createCompoundFile();\n\n      directory.close();\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e5d88b55f1b57feab6da94a5c635a224539bd2a","date":1095877947,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#merge(String,String,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#merge(String,String,String,boolean).mjava","sourceNew":"   private void merge(String seg1, String seg2, String merged, boolean useCompoundFile)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n\n      SegmentReader r1 = SegmentReader.get(new SegmentInfo(seg1, 1, directory));\n      SegmentReader r2 = SegmentReader.get(new SegmentInfo(seg2, 1, directory));\n\n      SegmentMerger merger =\n        new SegmentMerger(directory, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        Vector filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (Iterator iter = filesToDelete.iterator(); iter.hasNext();)\n          directory.deleteFile((String) iter.next());\n      }\n\n      directory.close();\n   }\n\n","sourceOld":"   private void merge(String seg1, String seg2, String merged, boolean useCompoundFile)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n\n      SegmentReader r1 = new SegmentReader(new SegmentInfo(seg1, 1, directory));\n      SegmentReader r2 = new SegmentReader(new SegmentInfo(seg2, 1, directory));\n\n      SegmentMerger merger =\n        new SegmentMerger(directory, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        Vector filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (Iterator iter = filesToDelete.iterator(); iter.hasNext();)\n          directory.deleteFile((String) iter.next());\n      }\n\n      directory.close();\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0c193c73d0dbc36f15189e21e3f1c5c3613fe11","date":1168445193,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#merge(String,int,String,int,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#merge(String,String,String,boolean).mjava","sourceNew":"   private void merge(String seg1, int docCount1, String seg2, int docCount2, String merged, boolean useCompoundFile)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n\n      SegmentReader r1 = SegmentReader.get(new SegmentInfo(seg1, docCount1, directory));\n      SegmentReader r2 = SegmentReader.get(new SegmentInfo(seg2, docCount2, directory));\n\n      SegmentMerger merger =\n        new SegmentMerger(directory, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        Vector filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (Iterator iter = filesToDelete.iterator(); iter.hasNext();)\n          directory.deleteFile((String) iter.next());\n      }\n\n      directory.close();\n   }\n\n","sourceOld":"   private void merge(String seg1, String seg2, String merged, boolean useCompoundFile)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n\n      SegmentReader r1 = SegmentReader.get(new SegmentInfo(seg1, 1, directory));\n      SegmentReader r2 = SegmentReader.get(new SegmentInfo(seg2, 1, directory));\n\n      SegmentMerger merger =\n        new SegmentMerger(directory, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        Vector filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (Iterator iter = filesToDelete.iterator(); iter.hasNext();)\n          directory.deleteFile((String) iter.next());\n      }\n\n      directory.close();\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"79fc67d5cdece593cd3b3b6c7ef195ee2625522c":["42a7d0b384f0022c5a29e562b809ebf73991d7e6"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["6263f219dcdfc6e861ecffaecf5e1e195f1aaaa7"],"a0c193c73d0dbc36f15189e21e3f1c5c3613fe11":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6263f219dcdfc6e861ecffaecf5e1e195f1aaaa7":["79fc67d5cdece593cd3b3b6c7ef195ee2625522c"],"42a7d0b384f0022c5a29e562b809ebf73991d7e6":["2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0c193c73d0dbc36f15189e21e3f1c5c3613fe11"]},"commit2Childs":{"79fc67d5cdece593cd3b3b6c7ef195ee2625522c":["6263f219dcdfc6e861ecffaecf5e1e195f1aaaa7"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["a0c193c73d0dbc36f15189e21e3f1c5c3613fe11"],"a0c193c73d0dbc36f15189e21e3f1c5c3613fe11":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"6263f219dcdfc6e861ecffaecf5e1e195f1aaaa7":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"42a7d0b384f0022c5a29e562b809ebf73991d7e6":["79fc67d5cdece593cd3b3b6c7ef195ee2625522c"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96"],"2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96":["42a7d0b384f0022c5a29e562b809ebf73991d7e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}