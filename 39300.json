{"path":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate,int,TimeUnit).mjava","commits":[{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate,int,TimeUnit).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected static void waitForState(String message, String collection, CollectionStatePredicate predicate, int timeout, TimeUnit timeUnit) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    AtomicReference<Set<String>> liveNodesLastSeen = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, timeout, timeUnit, (n, c) -> {\n        state.set(c);\n        liveNodesLastSeen.set(n);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\n\" + e.getMessage() + \"\\nLive Nodes: \" + Arrays.toString(liveNodesLastSeen.get().toArray()) + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06f42faae0ab79dde1a569756990bb96283580d","date":1566418420,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate,int,TimeUnit).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate,int,TimeUnit).mjava","sourceNew":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected static void waitForState(String message, String collection, CollectionStatePredicate predicate, int timeout, TimeUnit timeUnit) {\n    log.info(\"waitForState ({}): {}\", collection, message);\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    AtomicReference<Set<String>> liveNodesLastSeen = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, timeout, timeUnit, (n, c) -> {\n        state.set(c);\n        liveNodesLastSeen.set(n);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\n\" + e.getMessage() + \"\\nLive Nodes: \" + Arrays.toString(liveNodesLastSeen.get().toArray()) + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","sourceOld":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected static void waitForState(String message, String collection, CollectionStatePredicate predicate, int timeout, TimeUnit timeUnit) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    AtomicReference<Set<String>> liveNodesLastSeen = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, timeout, timeUnit, (n, c) -> {\n        state.set(c);\n        liveNodesLastSeen.set(n);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\n\" + e.getMessage() + \"\\nLive Nodes: \" + Arrays.toString(liveNodesLastSeen.get().toArray()) + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1edcb08221b33c52c3b24183d470c163dc8df4c","date":1566966875,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate,int,TimeUnit).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate,int,TimeUnit).mjava","sourceNew":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   * <p>\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message    a message to report on failure\n   * @param collection the collection to watch\n   * @param predicate  a predicate to match against the collection state\n   */\n  protected static void waitForState(String message, String collection, CollectionStatePredicate predicate, int timeout, TimeUnit timeUnit) {\n    log.info(\"waitForState ({}): {}\", collection, message);\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    AtomicReference<Set<String>> liveNodesLastSeen = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, timeout, timeUnit, (n, c) -> {\n        state.set(c);\n        liveNodesLastSeen.set(n);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\n\" + e.getMessage() + \"\\nLive Nodes: \" + Arrays.toString(liveNodesLastSeen.get().toArray()) + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","sourceOld":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected static void waitForState(String message, String collection, CollectionStatePredicate predicate, int timeout, TimeUnit timeUnit) {\n    log.info(\"waitForState ({}): {}\", collection, message);\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    AtomicReference<Set<String>> liveNodesLastSeen = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, timeout, timeUnit, (n, c) -> {\n        state.set(c);\n        liveNodesLastSeen.set(n);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\n\" + e.getMessage() + \"\\nLive Nodes: \" + Arrays.toString(liveNodesLastSeen.get().toArray()) + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e1edcb08221b33c52c3b24183d470c163dc8df4c":["b06f42faae0ab79dde1a569756990bb96283580d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b06f42faae0ab79dde1a569756990bb96283580d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1edcb08221b33c52c3b24183d470c163dc8df4c"]},"commit2Childs":{"e1edcb08221b33c52c3b24183d470c163dc8df4c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b06f42faae0ab79dde1a569756990bb96283580d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b06f42faae0ab79dde1a569756990bb96283580d":["e1edcb08221b33c52c3b24183d470c163dc8df4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}