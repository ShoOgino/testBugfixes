{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#finishTerm(BlockTermState).mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#finishTerm(BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#finishTerm(BlockTermState).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    IntBlockTermState state = (IntBlockTermState) _state;\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == docCount: state.docFreq + \" vs \" + docCount;\n    \n    // docFreq == 1, don't write the single docid/freq to a separate file along with a pointer to it.\n    final int singletonDocID;\n    if (state.docFreq == 1) {\n      // pulse the singleton docid into the term dictionary, freq is implicitly totalTermFreq\n      singletonDocID = docDeltaBuffer[0];\n    } else {\n      singletonDocID = -1;\n      // vInt encode the remaining doc deltas and freqs:\n      for(int i=0;i<docBufferUpto;i++) {\n        final int docDelta = docDeltaBuffer[i];\n        final int freq = freqBuffer[i];\n        if (!writeFreqs) {\n          docOut.writeVInt(docDelta);\n        } else if (freqBuffer[i] == 1) {\n          docOut.writeVInt((docDelta<<1)|1);\n        } else {\n          docOut.writeVInt(docDelta<<1);\n          docOut.writeVInt(freq);\n        }\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (writePositions) {\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert state.totalTermFreq != -1;\n      if (state.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {       \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (writePayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            if (payloadLength != 0) {\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (writeOffsets) {\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (writePayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docStartFP;\n    } else {\n      skipOffset = -1;\n    }\n\n    state.docStartFP = docStartFP;\n    state.posStartFP = posStartFP;\n    state.payStartFP = payStartFP;\n    state.singletonDocID = singletonDocID;\n    state.skipOffset = skipOffset;\n    state.lastPosBlockOffset = lastPosBlockOffset;\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    IntBlockTermState state = (IntBlockTermState) _state;\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == docCount: state.docFreq + \" vs \" + docCount;\n    \n    // docFreq == 1, don't write the single docid/freq to a separate file along with a pointer to it.\n    final int singletonDocID;\n    if (state.docFreq == 1) {\n      // pulse the singleton docid into the term dictionary, freq is implicitly totalTermFreq\n      singletonDocID = docDeltaBuffer[0];\n    } else {\n      singletonDocID = -1;\n      // vInt encode the remaining doc deltas and freqs:\n      for(int i=0;i<docBufferUpto;i++) {\n        final int docDelta = docDeltaBuffer[i];\n        final int freq = freqBuffer[i];\n        if (!writeFreqs) {\n          docOut.writeVInt(docDelta);\n        } else if (freqBuffer[i] == 1) {\n          docOut.writeVInt((docDelta<<1)|1);\n        } else {\n          docOut.writeVInt(docDelta<<1);\n          docOut.writeVInt(freq);\n        }\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (writePositions) {\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert state.totalTermFreq != -1;\n      if (state.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {       \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (writePayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            if (payloadLength != 0) {\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (writeOffsets) {\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (writePayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docStartFP;\n    } else {\n      skipOffset = -1;\n    }\n\n    state.docStartFP = docStartFP;\n    state.posStartFP = posStartFP;\n    state.payStartFP = payStartFP;\n    state.singletonDocID = singletonDocID;\n    state.skipOffset = skipOffset;\n    state.lastPosBlockOffset = lastPosBlockOffset;\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}