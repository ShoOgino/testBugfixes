{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    stats = similarity.computeWeight(query.getBoost(), \n        searcher.collectionStatistics(query.getField()), \n        termStats);\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    stats = similarity.computeWeight(query.getBoost(), \n        searcher.collectionStatistics(query.getField()), \n        termStats);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2da200553d43622ccbeef29f3c1b6223fec4d83","date":1331145186,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    final String field = query.getField();\n    if (field != null) {\n      stats = similarity.computeWeight(query.getBoost(), \n                                       searcher.collectionStatistics(query.getField()), \n                                       termStats);\n    }\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    stats = similarity.computeWeight(query.getBoost(), \n        searcher.collectionStatistics(query.getField()), \n        termStats);\n  }\n\n","bugFix":["660345363f16c7d4c38aa11a35bf59aa99466cf1","9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    final String field = query.getField();\n    if (field != null) {\n      stats = similarity.computeWeight(query.getBoost(), \n                                       searcher.collectionStatistics(query.getField()), \n                                       termStats);\n    }\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    stats = similarity.computeWeight(query.getBoost(), \n        searcher.collectionStatistics(query.getField()), \n        termStats);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    final String field = query.getField();\n    if (field != null) {\n      stats = similarity.computeWeight(query.getBoost(), \n                                       searcher.collectionStatistics(query.getField()), \n                                       termStats);\n    }\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    final String field = query.getField();\n    if (field != null) {\n      stats = similarity.computeWeight(query.getBoost(), \n                                       searcher.collectionStatistics(query.getField()), \n                                       termStats);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    final String field = query.getField();\n    if (field != null) {\n      stats = similarity.computeWeight(query.getBoost(), \n                                       searcher.collectionStatistics(query.getField()), \n                                       termStats);\n    }\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    final String field = query.getField();\n    if (field != null) {\n      stats = similarity.computeWeight(query.getBoost(), \n                                       searcher.collectionStatistics(query.getField()), \n                                       termStats);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    termContexts = new HashMap<>();\n    TreeSet<Term> terms = new TreeSet<>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    final String field = query.getField();\n    if (field != null) {\n      stats = similarity.computeWeight(query.getBoost(), \n                                       searcher.collectionStatistics(query.getField()), \n                                       termStats);\n    }\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    final String field = query.getField();\n    if (field != null) {\n      stats = similarity.computeWeight(query.getBoost(), \n                                       searcher.collectionStatistics(query.getField()), \n                                       termStats);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    super(query);\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    termContexts = new HashMap<>();\n    TreeSet<Term> terms = new TreeSet<>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    final String field = query.getField();\n    if (field != null) {\n      stats = similarity.computeWeight(query.getBoost(), \n                                       searcher.collectionStatistics(query.getField()), \n                                       termStats);\n    }\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    termContexts = new HashMap<>();\n    TreeSet<Term> terms = new TreeSet<>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    final String field = query.getField();\n    if (field != null) {\n      stats = similarity.computeWeight(query.getBoost(), \n                                       searcher.collectionStatistics(query.getField()), \n                                       termStats);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    super(query);\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n\n    termContexts = new HashMap<>();\n    TreeSet<Term> terms = new TreeSet<>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    final String field = query.getField();\n    if (field != null) {\n      stats = similarity.computeWeight(query.getBoost(),\n                                       searcher.collectionStatistics(query.getField()),\n                                       termStats);\n    }\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    super(query);\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    termContexts = new HashMap<>();\n    TreeSet<Term> terms = new TreeSet<>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    final String field = query.getField();\n    if (field != null) {\n      stats = similarity.computeWeight(query.getBoost(), \n                                       searcher.collectionStatistics(query.getField()), \n                                       termStats);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    super(query);\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n\n    termContexts = new HashMap<>();\n    TreeSet<Term> terms = new TreeSet<>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    final String field = query.getField();\n    if (field != null) {\n      stats = similarity.computeWeight(query.getBoost(),\n                                       searcher.collectionStatistics(query.getField()),\n                                       termStats);\n    }\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    super(query);\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    termContexts = new HashMap<>();\n    TreeSet<Term> terms = new TreeSet<>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    final String field = query.getField();\n    if (field != null) {\n      stats = similarity.computeWeight(query.getBoost(), \n                                       searcher.collectionStatistics(query.getField()), \n                                       termStats);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e5699abc6d0854ab3a692587156cb84f189de","date":1428897312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher) throws IOException {\n    super(query);\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n\n    termContexts = new HashMap<>();\n    TreeSet<Term> terms = new TreeSet<>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    final String field = query.getField();\n    if (field != null) {\n      stats = similarity.computeWeight(query.getBoost(),\n                                       searcher.collectionStatistics(query.getField()),\n                                       termStats);\n    }\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    super(query);\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n\n    termContexts = new HashMap<>();\n    TreeSet<Term> terms = new TreeSet<>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    final String field = query.getField();\n    if (field != null) {\n      stats = similarity.computeWeight(query.getBoost(),\n                                       searcher.collectionStatistics(query.getField()),\n                                       termStats);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher,SpanCollector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher, SpanCollector collector) throws IOException {\n    super(query);\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    this.collector = collector;\n\n    termContexts = new HashMap<>();\n    TreeSet<Term> terms = new TreeSet<>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    final String field = query.getField();\n    if (field != null) {\n      stats = similarity.computeWeight(query.getBoost(),\n                                       searcher.collectionStatistics(query.getField()),\n                                       termStats);\n    }\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher) throws IOException {\n    super(query);\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n\n    termContexts = new HashMap<>();\n    TreeSet<Term> terms = new TreeSet<>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    final String field = query.getField();\n    if (field != null) {\n      stats = similarity.computeWeight(query.getBoost(),\n                                       searcher.collectionStatistics(query.getField()),\n                                       termStats);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d2da200553d43622ccbeef29f3c1b6223fec4d83"],"fb17639909a369c1e64866842e5c213440acc17e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2da200553d43622ccbeef29f3c1b6223fec4d83":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["d2da200553d43622ccbeef29f3c1b6223fec4d83"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["d14e5699abc6d0854ab3a692587156cb84f189de"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["fb17639909a369c1e64866842e5c213440acc17e"],"fab172655716b96f7e42376116235017a922de3a":["fb17639909a369c1e64866842e5c213440acc17e","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["d2da200553d43622ccbeef29f3c1b6223fec4d83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"d14e5699abc6d0854ab3a692587156cb84f189de":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"fb17639909a369c1e64866842e5c213440acc17e":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["fb17639909a369c1e64866842e5c213440acc17e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","d2da200553d43622ccbeef29f3c1b6223fec4d83"],"d2da200553d43622ccbeef29f3c1b6223fec4d83":["38e3b736c7ca086d61b7dbb841c905ee115490da","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["fab172655716b96f7e42376116235017a922de3a","d14e5699abc6d0854ab3a692587156cb84f189de"],"fab172655716b96f7e42376116235017a922de3a":[],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d14e5699abc6d0854ab3a692587156cb84f189de":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}