{"path":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.LowFreqDocsAndPositionsEnum#nextDoc().mjava","commits":[{"id":"172cf08877d0e6738a51edd238c4dc5ffc088345","date":1342794823,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.LowFreqDocsAndPositionsEnum#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() {\n      if (hasPayloads) {\n        for(int i=0;i<skipPositions;i++) {\n          upto++;\n          if (hasOffsets) {\n            upto += 2;\n          }\n          payloadOffset += postings[upto++];\n        }\n      } else {\n        upto += posMult * skipPositions;\n      }\n\n      if (liveDocs == null) {\n        if (upto < postings.length) {\n          docID = postings[upto++];\n          freq = postings[upto++];\n          skipPositions = freq;\n          return docID;\n        }\n      } else {\n        while(upto < postings.length) {\n          docID = postings[upto++];\n          freq = postings[upto++];\n          if (liveDocs.get(docID)) {\n            skipPositions = freq;\n            return docID;\n          }\n          upto += posMult * freq;\n        }\n      }\n\n      return docID = NO_MORE_DOCS;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102c4d90a7c90c3005af1cd63cd639a9f1f7f0a3","date":1342872799,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.LowFreqDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.LowFreqDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      if (hasPayloads) {\n        for(int i=0;i<skipPositions;i++) {\n          upto++;\n          if (hasOffsets) {\n            upto += 2;\n          }\n          payloadOffset += postings[upto++];\n        }\n      } else {\n        upto += posMult * skipPositions;\n      }\n\n      if (liveDocs == null) {\n        if (upto < postings.length) {\n          docID = postings[upto++];\n          freq = postings[upto++];\n          skipPositions = freq;\n          return docID;\n        }\n      } else {\n        while(upto < postings.length) {\n          docID = postings[upto++];\n          freq = postings[upto++];\n          if (liveDocs.get(docID)) {\n            skipPositions = freq;\n            return docID;\n          }\n          if (hasPayloads) {\n            for(int i=0;i<freq;i++) {\n              upto++;\n              if (hasOffsets) {\n                upto += 2;\n              }\n              payloadOffset += postings[upto++];\n            }\n          } else {\n            upto += posMult * freq;\n          }\n        }\n      }\n\n      return docID = NO_MORE_DOCS;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      if (hasPayloads) {\n        for(int i=0;i<skipPositions;i++) {\n          upto++;\n          if (hasOffsets) {\n            upto += 2;\n          }\n          payloadOffset += postings[upto++];\n        }\n      } else {\n        upto += posMult * skipPositions;\n      }\n\n      if (liveDocs == null) {\n        if (upto < postings.length) {\n          docID = postings[upto++];\n          freq = postings[upto++];\n          skipPositions = freq;\n          return docID;\n        }\n      } else {\n        while(upto < postings.length) {\n          docID = postings[upto++];\n          freq = postings[upto++];\n          if (liveDocs.get(docID)) {\n            skipPositions = freq;\n            return docID;\n          }\n          upto += posMult * freq;\n        }\n      }\n\n      return docID = NO_MORE_DOCS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.LowFreqDocsAndPositionsEnum#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() {\n      if (hasPayloads) {\n        for(int i=0;i<skipPositions;i++) {\n          upto++;\n          if (hasOffsets) {\n            upto += 2;\n          }\n          payloadOffset += postings[upto++];\n        }\n      } else {\n        upto += posMult * skipPositions;\n      }\n\n      if (liveDocs == null) {\n        if (upto < postings.length) {\n          docID = postings[upto++];\n          freq = postings[upto++];\n          skipPositions = freq;\n          return docID;\n        }\n      } else {\n        while(upto < postings.length) {\n          docID = postings[upto++];\n          freq = postings[upto++];\n          if (liveDocs.get(docID)) {\n            skipPositions = freq;\n            return docID;\n          }\n          if (hasPayloads) {\n            for(int i=0;i<freq;i++) {\n              upto++;\n              if (hasOffsets) {\n                upto += 2;\n              }\n              payloadOffset += postings[upto++];\n            }\n          } else {\n            upto += posMult * freq;\n          }\n        }\n      }\n\n      return docID = NO_MORE_DOCS;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.LowFreqDocsAndPositionsEnum#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() {\n      if (hasPayloads) {\n        for(int i=0;i<skipPositions;i++) {\n          upto++;\n          if (hasOffsets) {\n            upto += 2;\n          }\n          payloadOffset += postings[upto++];\n        }\n      } else {\n        upto += posMult * skipPositions;\n      }\n\n      if (liveDocs == null) {\n        if (upto < postings.length) {\n          docID = postings[upto++];\n          freq = postings[upto++];\n          skipPositions = freq;\n          return docID;\n        }\n      } else {\n        while(upto < postings.length) {\n          docID = postings[upto++];\n          freq = postings[upto++];\n          if (liveDocs.get(docID)) {\n            skipPositions = freq;\n            return docID;\n          }\n          if (hasPayloads) {\n            for(int i=0;i<freq;i++) {\n              upto++;\n              if (hasOffsets) {\n                upto += 2;\n              }\n              payloadOffset += postings[upto++];\n            }\n          } else {\n            upto += posMult * freq;\n          }\n        }\n      }\n\n      return docID = NO_MORE_DOCS;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.LowFreqDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.LowFreqDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      if (hasPayloads) {\n        for(int i=0;i<skipPositions;i++) {\n          upto++;\n          if (hasOffsets) {\n            upto += 2;\n          }\n          payloadOffset += postings[upto++];\n        }\n      } else {\n        upto += posMult * skipPositions;\n      }\n\n      if (liveDocs == null) {\n        if (upto < postings.length) {\n          docID = postings[upto++];\n          freq = postings[upto++];\n          skipPositions = freq;\n          return docID;\n        }\n      } else {\n        while(upto < postings.length) {\n          docID = postings[upto++];\n          freq = postings[upto++];\n          if (liveDocs.get(docID)) {\n            skipPositions = freq;\n            return docID;\n          }\n          if (hasPayloads) {\n            for(int i=0;i<freq;i++) {\n              upto++;\n              if (hasOffsets) {\n                upto += 2;\n              }\n              payloadOffset += postings[upto++];\n            }\n          } else {\n            upto += posMult * freq;\n          }\n        }\n      }\n\n      return docID = NO_MORE_DOCS;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      if (hasPayloads) {\n        for(int i=0;i<skipPositions;i++) {\n          upto++;\n          if (hasOffsets) {\n            upto += 2;\n          }\n          payloadOffset += postings[upto++];\n        }\n      } else {\n        upto += posMult * skipPositions;\n      }\n\n      if (liveDocs == null) {\n        if (upto < postings.length) {\n          docID = postings[upto++];\n          freq = postings[upto++];\n          skipPositions = freq;\n          return docID;\n        }\n      } else {\n        while(upto < postings.length) {\n          docID = postings[upto++];\n          freq = postings[upto++];\n          if (liveDocs.get(docID)) {\n            skipPositions = freq;\n            return docID;\n          }\n          if (hasPayloads) {\n            for(int i=0;i<freq;i++) {\n              upto++;\n              if (hasOffsets) {\n                upto += 2;\n              }\n              payloadOffset += postings[upto++];\n            }\n          } else {\n            upto += posMult * freq;\n          }\n        }\n      }\n\n      return docID = NO_MORE_DOCS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","102c4d90a7c90c3005af1cd63cd639a9f1f7f0a3"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["102c4d90a7c90c3005af1cd63cd639a9f1f7f0a3"],"172cf08877d0e6738a51edd238c4dc5ffc088345":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","102c4d90a7c90c3005af1cd63cd639a9f1f7f0a3"],"102c4d90a7c90c3005af1cd63cd639a9f1f7f0a3":["172cf08877d0e6738a51edd238c4dc5ffc088345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","172cf08877d0e6738a51edd238c4dc5ffc088345","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"172cf08877d0e6738a51edd238c4dc5ffc088345":["102c4d90a7c90c3005af1cd63cd639a9f1f7f0a3"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"102c4d90a7c90c3005af1cd63cd639a9f1f7f0a3":["aba371508186796cc6151d8223a5b4e16d02e26e","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}