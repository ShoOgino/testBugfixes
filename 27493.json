{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","commits":[{"id":"605f94f466b936ef47220109e97eea240dff2442","date":1447425207,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws KeeperException, InterruptedException {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.updateClusterState();\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = (clusterState == null) ? null\n            : clusterState.getReplica(collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE\n            && rep.getState() != Replica.State.RECOVERING) {\n          log.info(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","sourceNew":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws KeeperException, InterruptedException {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = (clusterState == null) ? null\n            : clusterState.getReplica(collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE\n            && rep.getState() != Replica.State.RECOVERING) {\n          log.info(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","sourceOld":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws KeeperException, InterruptedException {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.updateClusterState();\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = (clusterState == null) ? null\n            : clusterState.getReplica(collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE\n            && rep.getState() != Replica.State.RECOVERING) {\n          log.info(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5d615d62cd8aff3690943d765e46942551f98b6","date":1474881754,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","sourceNew":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws KeeperException, InterruptedException {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = (clusterState == null) ? null\n            : clusterState.getReplica(collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE\n            && rep.getState() != Replica.State.RECOVERING) {\n          log.debug(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","sourceOld":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws KeeperException, InterruptedException {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = (clusterState == null) ? null\n            : clusterState.getReplica(collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE\n            && rep.getState() != Replica.State.RECOVERING) {\n          log.info(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","sourceNew":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws KeeperException, InterruptedException {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = (clusterState == null) ? null\n            : clusterState.getReplica(collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE\n            && rep.getState() != Replica.State.RECOVERING) {\n          log.debug(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","sourceOld":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws KeeperException, InterruptedException {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = (clusterState == null) ? null\n            : clusterState.getReplica(collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE\n            && rep.getState() != Replica.State.RECOVERING) {\n          log.info(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","sourceNew":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws KeeperException, InterruptedException {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = (clusterState == null) ? null\n            : clusterState.getReplica(collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE\n            && rep.getState() != Replica.State.RECOVERING) {\n          log.debug(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","sourceOld":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws KeeperException, InterruptedException {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = (clusterState == null) ? null\n            : clusterState.getReplica(collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE\n            && rep.getState() != Replica.State.RECOVERING) {\n          log.info(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","sourceNew":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws KeeperException, InterruptedException {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = getReplica(clusterState, collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE\n            && rep.getState() != Replica.State.RECOVERING) {\n          log.debug(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","sourceOld":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws KeeperException, InterruptedException {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = (clusterState == null) ? null\n            : clusterState.getReplica(collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE\n            && rep.getState() != Replica.State.RECOVERING) {\n          log.debug(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","bugFix":["605f94f466b936ef47220109e97eea240dff2442"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","sourceNew":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws KeeperException, InterruptedException {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = getReplica(clusterState, collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE\n            && rep.getState() != Replica.State.RECOVERING) {\n          log.debug(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","sourceOld":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws KeeperException, InterruptedException {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = (clusterState == null) ? null\n            : clusterState.getReplica(collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE\n            && rep.getState() != Replica.State.RECOVERING) {\n          log.debug(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","sourceNew":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws Exception {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = getReplica(clusterState, collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE\n            && rep.getState() != Replica.State.RECOVERING) {\n          log.debug(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","sourceOld":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws KeeperException, InterruptedException {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = getReplica(clusterState, collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE\n            && rep.getState() != Replica.State.RECOVERING) {\n          log.debug(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","sourceNew":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws KeeperException, InterruptedException {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = getReplica(clusterState, collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE\n            && rep.getState() != Replica.State.RECOVERING) {\n          log.debug(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","sourceOld":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws Exception {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = getReplica(clusterState, collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE\n            && rep.getState() != Replica.State.RECOVERING) {\n          log.debug(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","sourceNew":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws Exception {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = getReplica(clusterState, collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE\n            && rep.getState() != Replica.State.RECOVERING) {\n          log.debug(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","sourceOld":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws KeeperException, InterruptedException {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = getReplica(clusterState, collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE\n            && rep.getState() != Replica.State.RECOVERING) {\n          log.debug(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94","date":1520143025,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","sourceNew":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws Exception {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = getReplica(clusterState, collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE) {\n          log.debug(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","sourceOld":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws Exception {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = getReplica(clusterState, collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE\n            && rep.getState() != Replica.State.RECOVERING) {\n          log.debug(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":["849f0b604d62767ac71859248cb478428b39170c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"849f0b604d62767ac71859248cb478428b39170c","date":1523510880,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","sourceNew":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws Exception {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = getReplica(clusterState, collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep == null) return;\n        if (rep.getState() != Replica.State.ACTIVE || core.getCoreDescriptor().getCloudDescriptor().getLastPublished() != Replica.State.ACTIVE) {\n          log.debug(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","sourceOld":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws Exception {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = getReplica(clusterState, collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE) {\n          log.debug(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","bugFix":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f5a9deac6e313e80a1f56468e14bb4c491b83d7","date":1523529596,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","sourceNew":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws Exception {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = getReplica(clusterState, collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep == null) return;\n        if (rep.getState() != Replica.State.ACTIVE || core.getCoreDescriptor().getCloudDescriptor().getLastPublished() != Replica.State.ACTIVE) {\n          log.debug(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","sourceOld":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws Exception {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = getReplica(clusterState, collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep != null && rep.getState() != Replica.State.ACTIVE) {\n          log.debug(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#publishActiveIfRegisteredAndNotActive(SolrCore).mjava","sourceNew":null,"sourceOld":"  public void publishActiveIfRegisteredAndNotActive(SolrCore core) throws Exception {\n      if (core.getCoreDescriptor().getCloudDescriptor().hasRegistered()) {\n        ZkStateReader zkStateReader = zkController.getZkStateReader();\n        zkStateReader.forceUpdateCollection(collection);\n        ClusterState clusterState = zkStateReader.getClusterState();\n        Replica rep = getReplica(clusterState, collection, leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n        if (rep == null) return;\n        if (rep.getState() != Replica.State.ACTIVE || core.getCoreDescriptor().getCloudDescriptor().getLastPublished() != Replica.State.ACTIVE) {\n          log.debug(\"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE\");\n          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"605f94f466b936ef47220109e97eea240dff2442":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"344b0840364d990b29b97467bfcc766ff8325d11":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["344b0840364d990b29b97467bfcc766ff8325d11"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["605f94f466b936ef47220109e97eea240dff2442"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a5d615d62cd8aff3690943d765e46942551f98b6":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"1f5a9deac6e313e80a1f56468e14bb4c491b83d7":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94","849f0b604d62767ac71859248cb478428b39170c"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","344b0840364d990b29b97467bfcc766ff8325d11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","a5d615d62cd8aff3690943d765e46942551f98b6"],"849f0b604d62767ac71859248cb478428b39170c":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"605f94f466b936ef47220109e97eea240dff2442":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"344b0840364d990b29b97467bfcc766ff8325d11":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"b869898f50ca80263bac2e3ae0949f7700e5c977":[],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a5d615d62cd8aff3690943d765e46942551f98b6","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7","849f0b604d62767ac71859248cb478428b39170c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a5d615d62cd8aff3690943d765e46942551f98b6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"1f5a9deac6e313e80a1f56468e14bb4c491b83d7":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["605f94f466b936ef47220109e97eea240dff2442"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["344b0840364d990b29b97467bfcc766ff8325d11","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"849f0b604d62767ac71859248cb478428b39170c":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b869898f50ca80263bac2e3ae0949f7700e5c977","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}