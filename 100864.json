{"path":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","commits":[{"id":"d345a86357a4042faeebfad2693a070019c95918","date":1305385272,"type":1,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testLiterals().mjava","sourceNew":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testLiterals().mjava","sourceNew":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testLiterals().mjava","sourceNew":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","sourceNew":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","sourceNew":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d345a86357a4042faeebfad2693a070019c95918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d345a86357a4042faeebfad2693a070019c95918"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","d345a86357a4042faeebfad2693a070019c95918"],"c26f00b574427b55127e869b935845554afde1fa":["d345a86357a4042faeebfad2693a070019c95918","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d345a86357a4042faeebfad2693a070019c95918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"d345a86357a4042faeebfad2693a070019c95918":["c3a8a449466c1ff7ce2274fe73dab487256964b4","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","a3776dccca01c11e7046323cfad46a3b4a471233"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d345a86357a4042faeebfad2693a070019c95918","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}