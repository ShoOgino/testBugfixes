{"path":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#close().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/NRTCachingDirectory#close().mjava","sourceNew":"  /** Close this directory, which flushes any cached files\n   *  to the delegate and then closes the delegate. */\n  @Override\n  public void close() throws IOException {\n    // NOTE: technically we shouldn't have to do this, ie,\n    // IndexWriter should have sync'd all files, but we do\n    // it for defensive reasons... or in case the app is\n    // doing something custom (creating outputs directly w/o\n    // using IndexWriter):\n    for(String fileName : cache.listAll()) {\n      unCache(fileName);\n    }\n    cache.close();\n    delegate.close();\n  }\n\n","sourceOld":"  /** Close this directory, which flushes any cached files\n   *  to the delegate and then closes the delegate. */\n  @Override\n  public void close() throws IOException {\n    // NOTE: technically we shouldn't have to do this, ie,\n    // IndexWriter should have sync'd all files, but we do\n    // it for defensive reasons... or in case the app is\n    // doing something custom (creating outputs directly w/o\n    // using IndexWriter):\n    for(String fileName : cache.listAll()) {\n      unCache(fileName);\n    }\n    cache.close();\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a04e4daf0316a981f526f447259cbdfb9ecba03","date":1404918762,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#close().mjava","sourceNew":"  /** Close this directory, which flushes any cached files\n   *  to the delegate and then closes the delegate. */\n  @Override\n  public void close() throws IOException {\n    // NOTE: technically we shouldn't have to do this, ie,\n    // IndexWriter should have sync'd all files, but we do\n    // it for defensive reasons... or in case the app is\n    // doing something custom (creating outputs directly w/o\n    // using IndexWriter):\n    for(String fileName : cache.listAll()) {\n      unCache(fileName);\n    }\n    cache.close();\n    in.close();\n  }\n\n","sourceOld":"  /** Close this directory, which flushes any cached files\n   *  to the delegate and then closes the delegate. */\n  @Override\n  public void close() throws IOException {\n    // NOTE: technically we shouldn't have to do this, ie,\n    // IndexWriter should have sync'd all files, but we do\n    // it for defensive reasons... or in case the app is\n    // doing something custom (creating outputs directly w/o\n    // using IndexWriter):\n    for(String fileName : cache.listAll()) {\n      unCache(fileName);\n    }\n    cache.close();\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b07132423639577d6f68cebbec9c83599d5d5a3a","date":1419020622,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#close().mjava","sourceNew":"  /** Close this directory, which flushes any cached files\n   *  to the delegate and then closes the delegate. */\n  @Override\n  public void close() throws IOException {\n    // NOTE: technically we shouldn't have to do this, ie,\n    // IndexWriter should have sync'd all files, but we do\n    // it for defensive reasons... or in case the app is\n    // doing something custom (creating outputs directly w/o\n    // using IndexWriter):\n    boolean success = false;\n    try {\n      if (cache.isOpen) {\n        for(String fileName : cache.listAll()) {\n          unCache(fileName);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(cache, in);\n      } else {\n        IOUtils.closeWhileHandlingException(cache, in);\n      }\n    }\n  }\n\n","sourceOld":"  /** Close this directory, which flushes any cached files\n   *  to the delegate and then closes the delegate. */\n  @Override\n  public void close() throws IOException {\n    // NOTE: technically we shouldn't have to do this, ie,\n    // IndexWriter should have sync'd all files, but we do\n    // it for defensive reasons... or in case the app is\n    // doing something custom (creating outputs directly w/o\n    // using IndexWriter):\n    for(String fileName : cache.listAll()) {\n      unCache(fileName);\n    }\n    cache.close();\n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#close().mjava","sourceNew":"  /** Close this directory, which flushes any cached files\n   *  to the delegate and then closes the delegate. */\n  @Override\n  public void close() throws IOException {\n    // NOTE: technically we shouldn't have to do this, ie,\n    // IndexWriter should have sync'd all files, but we do\n    // it for defensive reasons... or in case the app is\n    // doing something custom (creating outputs directly w/o\n    // using IndexWriter):\n    IOUtils.close(\n        () -> {\n          if (!closed.getAndSet(true)) {\n            for(String fileName : cacheDirectory.listAll()) {\n              unCache(fileName);\n            }\n          }\n        },\n        cacheDirectory,\n        in);\n  }\n\n","sourceOld":"  /** Close this directory, which flushes any cached files\n   *  to the delegate and then closes the delegate. */\n  @Override\n  public void close() throws IOException {\n    // NOTE: technically we shouldn't have to do this, ie,\n    // IndexWriter should have sync'd all files, but we do\n    // it for defensive reasons... or in case the app is\n    // doing something custom (creating outputs directly w/o\n    // using IndexWriter):\n    boolean success = false;\n    try {\n      if (cache.isOpen) {\n        for(String fileName : cache.listAll()) {\n          unCache(fileName);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(cache, in);\n      } else {\n        IOUtils.closeWhileHandlingException(cache, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b07132423639577d6f68cebbec9c83599d5d5a3a":["3a04e4daf0316a981f526f447259cbdfb9ecba03"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["b07132423639577d6f68cebbec9c83599d5d5a3a"],"3a04e4daf0316a981f526f447259cbdfb9ecba03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"b07132423639577d6f68cebbec9c83599d5d5a3a":["d77dafd89756a5161d244985903e3487ca109182"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3a04e4daf0316a981f526f447259cbdfb9ecba03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a04e4daf0316a981f526f447259cbdfb9ecba03":["b07132423639577d6f68cebbec9c83599d5d5a3a"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}