{"path":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","commits":[{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","pathOld":"/dev/null","sourceNew":"  void setDocValuesType(DocValuesType type) {\n    docValueType = type;\n    assert checkConsistency();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["89b68d01c34172936f1aa2a8b9abf0e1bc68415f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7aa15ae143b798908ca3088a9e2cd183f63373c5","date":1359420558,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","sourceNew":"  void setDocValuesType(DocValuesType type) {\n    if (docValueType != null && docValueType != type) {\n      throw new IllegalArgumentException(\"cannot change DocValues type from \" + docValueType + \" to \" + type + \" for field \\\"\" + name + \"\\\"\");\n    }\n    docValueType = type;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  void setDocValuesType(DocValuesType type) {\n    docValueType = type;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","pathOld":"/dev/null","sourceNew":"  void setDocValuesType(DocValuesType type) {\n    if (docValueType != null && docValueType != type) {\n      throw new IllegalArgumentException(\"cannot change DocValues type from \" + docValueType + \" to \" + type + \" for field \\\"\" + name + \"\\\"\");\n    }\n    docValueType = type;\n    assert checkConsistency();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","sourceNew":"  void setDocValuesType(DocValuesType type) {\n    if (docValueType != DocValuesType.NO && docValueType != type) {\n      throw new IllegalArgumentException(\"cannot change DocValues type from \" + docValueType + \" to \" + type + \" for field \\\"\" + name + \"\\\"\");\n    }\n    docValueType = type;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  void setDocValuesType(DocValuesType type) {\n    if (docValueType != null && docValueType != type) {\n      throw new IllegalArgumentException(\"cannot change DocValues type from \" + docValueType + \" to \" + type + \" for field \\\"\" + name + \"\\\"\");\n    }\n    docValueType = type;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1edd0fe3b3915bf01160dfd544ab0c18cb77e45","date":1414773150,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","sourceNew":"  void setDocValuesType(DocValuesType type) {\n    if (type == null) {\n      throw new NullPointerException(\"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (docValuesType != DocValuesType.NO && docValuesType != type) {\n      throw new IllegalArgumentException(\"cannot change DocValues type from \" + docValuesType + \" to \" + type + \" for field \\\"\" + name + \"\\\"\");\n    }\n    docValuesType = type;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  void setDocValuesType(DocValuesType type) {\n    if (docValueType != DocValuesType.NO && docValueType != type) {\n      throw new IllegalArgumentException(\"cannot change DocValues type from \" + docValueType + \" to \" + type + \" for field \\\"\" + name + \"\\\"\");\n    }\n    docValueType = type;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","sourceNew":"  void setDocValuesType(DocValuesType type) {\n    if (type == null) {\n      throw new NullPointerException(\"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (docValuesType != DocValuesType.NONE && docValuesType != type) {\n      throw new IllegalArgumentException(\"cannot change DocValues type from \" + docValuesType + \" to \" + type + \" for field \\\"\" + name + \"\\\"\");\n    }\n    docValuesType = type;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  void setDocValuesType(DocValuesType type) {\n    if (type == null) {\n      throw new NullPointerException(\"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (docValuesType != DocValuesType.NO && docValuesType != type) {\n      throw new IllegalArgumentException(\"cannot change DocValues type from \" + docValuesType + \" to \" + type + \" for field \\\"\" + name + \"\\\"\");\n    }\n    docValuesType = type;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"556a4aab886d75371b2af129d87be3c2795cea76","date":1414954991,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","sourceNew":"  void setDocValuesType(DocValuesType type) {\n    if (docValuesType != DocValuesType.NONE && docValuesType != type) {\n      throw new IllegalArgumentException(\"cannot change DocValues type from \" + docValuesType + \" to \" + type + \" for field \\\"\" + name + \"\\\"\");\n    }\n    docValuesType = type;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  void setDocValuesType(DocValuesType type) {\n    if (type == null) {\n      throw new NullPointerException(\"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (docValuesType != DocValuesType.NONE && docValuesType != type) {\n      throw new IllegalArgumentException(\"cannot change DocValues type from \" + docValuesType + \" to \" + type + \" for field \\\"\" + name + \"\\\"\");\n    }\n    docValuesType = type;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e","date":1415435053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","sourceNew":"  void setDocValuesType(DocValuesType type) {\n    if (docValuesType != DocValuesType.NONE && type != DocValuesType.NONE && docValuesType != type) {\n      throw new IllegalArgumentException(\"cannot change DocValues type from \" + docValuesType + \" to \" + type + \" for field \\\"\" + name + \"\\\"\");\n    }\n    docValuesType = type;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  void setDocValuesType(DocValuesType type) {\n    if (docValuesType != DocValuesType.NONE && docValuesType != type) {\n      throw new IllegalArgumentException(\"cannot change DocValues type from \" + docValuesType + \" to \" + type + \" for field \\\"\" + name + \"\\\"\");\n    }\n    docValuesType = type;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"511aaee3cda0041f1b7e13578aa0f2da51918fde","date":1415445531,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","sourceNew":"  void setDocValuesType(DocValuesType type) {\n    if (type == null) {\n      throw new NullPointerException(\"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (docValuesType != DocValuesType.NONE && type != DocValuesType.NONE && docValuesType != type) {\n      throw new IllegalArgumentException(\"cannot change DocValues type from \" + docValuesType + \" to \" + type + \" for field \\\"\" + name + \"\\\"\");\n    }\n    docValuesType = type;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  void setDocValuesType(DocValuesType type) {\n    if (docValuesType != DocValuesType.NONE && type != DocValuesType.NONE && docValuesType != type) {\n      throw new IllegalArgumentException(\"cannot change DocValues type from \" + docValuesType + \" to \" + type + \" for field \\\"\" + name + \"\\\"\");\n    }\n    docValuesType = type;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad0d09e969f4763b0df4230f8e3f74357872a4e4","date":1459188769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","sourceNew":"  void setDocValuesType(DocValuesType type) {\n    if (type == null) {\n      throw new NullPointerException(\"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (docValuesType != DocValuesType.NONE && type != DocValuesType.NONE && docValuesType != type) {\n      throw new IllegalArgumentException(\"cannot change DocValues type from \" + docValuesType + \" to \" + type + \" for field \\\"\" + name + \"\\\"\");\n    }\n    docValuesType = type;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  void setDocValuesType(DocValuesType type) {\n    if (type == null) {\n      throw new NullPointerException(\"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (docValuesType != DocValuesType.NONE && type != DocValuesType.NONE && docValuesType != type) {\n      throw new IllegalArgumentException(\"cannot change DocValues type from \" + docValuesType + \" to \" + type + \" for field \\\"\" + name + \"\\\"\");\n    }\n    docValuesType = type;\n    assert checkConsistency();\n  }\n\n","bugFix":["511aaee3cda0041f1b7e13578aa0f2da51918fde"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"89b68d01c34172936f1aa2a8b9abf0e1bc68415f","date":1486637198,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","sourceNew":"  /** Record that this field is indexed with docvalues, with the specified type */\n  public void setDocValuesType(DocValuesType type) {\n    if (type == null) {\n      throw new NullPointerException(\"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (docValuesType != DocValuesType.NONE && type != DocValuesType.NONE && docValuesType != type) {\n      throw new IllegalArgumentException(\"cannot change DocValues type from \" + docValuesType + \" to \" + type + \" for field \\\"\" + name + \"\\\"\");\n    }\n    docValuesType = type;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  void setDocValuesType(DocValuesType type) {\n    if (type == null) {\n      throw new NullPointerException(\"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (docValuesType != DocValuesType.NONE && type != DocValuesType.NONE && docValuesType != type) {\n      throw new IllegalArgumentException(\"cannot change DocValues type from \" + docValuesType + \" to \" + type + \" for field \\\"\" + name + \"\\\"\");\n    }\n    docValuesType = type;\n    assert checkConsistency();\n  }\n\n","bugFix":["0837ab0472feecb3a54260729d845f839e1cbd72"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683b2041fcb490acd2bfec6034c593b3cfb2098c","date":1596135595,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setDocValuesType(DocValuesType).mjava","sourceNew":"  /** Record that this field is indexed with docvalues, with the specified type */\n  public void setDocValuesType(DocValuesType type) {\n    if (type == null) {\n      throw new NullPointerException(\"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (docValuesType != DocValuesType.NONE && type != DocValuesType.NONE && docValuesType != type) {\n      throw new IllegalArgumentException(\"cannot change DocValues type from \" + docValuesType + \" to \" + type + \" for field \\\"\" + name + \"\\\"\");\n    }\n    docValuesType = type;\n    this.checkConsistency();\n  }\n\n","sourceOld":"  /** Record that this field is indexed with docvalues, with the specified type */\n  public void setDocValuesType(DocValuesType type) {\n    if (type == null) {\n      throw new NullPointerException(\"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (docValuesType != DocValuesType.NONE && type != DocValuesType.NONE && docValuesType != type) {\n      throw new IllegalArgumentException(\"cannot change DocValues type from \" + docValuesType + \" to \" + type + \" for field \\\"\" + name + \"\\\"\");\n    }\n    docValuesType = type;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89b68d01c34172936f1aa2a8b9abf0e1bc68415f":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"556a4aab886d75371b2af129d87be3c2795cea76":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"d1edd0fe3b3915bf01160dfd544ab0c18cb77e45":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["d1edd0fe3b3915bf01160dfd544ab0c18cb77e45"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7aa15ae143b798908ca3088a9e2cd183f63373c5"],"7aa15ae143b798908ca3088a9e2cd183f63373c5":["0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["511aaee3cda0041f1b7e13578aa0f2da51918fde"],"511aaee3cda0041f1b7e13578aa0f2da51918fde":["eac6ccb51c439bec7f67cb0e299d3cb77b62b87e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e":["556a4aab886d75371b2af129d87be3c2795cea76"],"683b2041fcb490acd2bfec6034c593b3cfb2098c":["89b68d01c34172936f1aa2a8b9abf0e1bc68415f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["683b2041fcb490acd2bfec6034c593b3cfb2098c"]},"commit2Childs":{"89b68d01c34172936f1aa2a8b9abf0e1bc68415f":["683b2041fcb490acd2bfec6034c593b3cfb2098c"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["d1edd0fe3b3915bf01160dfd544ab0c18cb77e45"],"556a4aab886d75371b2af129d87be3c2795cea76":["eac6ccb51c439bec7f67cb0e299d3cb77b62b87e"],"d1edd0fe3b3915bf01160dfd544ab0c18cb77e45":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["556a4aab886d75371b2af129d87be3c2795cea76"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"7aa15ae143b798908ca3088a9e2cd183f63373c5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["89b68d01c34172936f1aa2a8b9abf0e1bc68415f"],"0837ab0472feecb3a54260729d845f839e1cbd72":["7aa15ae143b798908ca3088a9e2cd183f63373c5"],"511aaee3cda0041f1b7e13578aa0f2da51918fde":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e":["511aaee3cda0041f1b7e13578aa0f2da51918fde"],"683b2041fcb490acd2bfec6034c593b3cfb2098c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}