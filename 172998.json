{"path":"src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer#testGetScores().mjava","commits":[{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer#testGetScores().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetScores() throws Exception {\n    \n    Scorer s = new SimpleScorer();\n    ScoreCachingCollector scc = new ScoreCachingCollector(scores.length);\n    scc.setScorer(s);\n    \n    // We need to iterate on the scorer so that its doc() advances.\n    while (!s.next()) {\n      scc.collect(s.doc());\n    }\n    \n    for (int i = 0; i < scores.length; i++) {\n      assertEquals(scores[i], scc.mscores[i], 0f);\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer#testGetScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer#testGetScores().mjava","sourceNew":"  public void testGetScores() throws Exception {\n    \n    Scorer s = new SimpleScorer();\n    ScoreCachingCollector scc = new ScoreCachingCollector(scores.length);\n    scc.setScorer(s);\n    \n    // We need to iterate on the scorer so that its doc() advances.\n    int doc;\n    while ((doc = s.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      scc.collect(doc);\n    }\n    \n    for (int i = 0; i < scores.length; i++) {\n      assertEquals(scores[i], scc.mscores[i], 0f);\n    }\n    \n  }\n\n","sourceOld":"  public void testGetScores() throws Exception {\n    \n    Scorer s = new SimpleScorer();\n    ScoreCachingCollector scc = new ScoreCachingCollector(scores.length);\n    scc.setScorer(s);\n    \n    // We need to iterate on the scorer so that its doc() advances.\n    while (!s.next()) {\n      scc.collect(s.doc());\n    }\n    \n    for (int i = 0; i < scores.length; i++) {\n      assertEquals(scores[i], scc.mscores[i], 0f);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer#testGetScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer#testGetScores().mjava","sourceNew":"  public void testGetScores() throws Exception {\n    \n    Scorer s = new SimpleScorer();\n    ScoreCachingCollector scc = new ScoreCachingCollector(scores.length);\n    scc.setScorer(s);\n    \n    // We need to iterate on the scorer so that its doc() advances.\n    int doc;\n    while ((doc = s.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      scc.collect(doc);\n    }\n    \n    for (int i = 0; i < scores.length; i++) {\n      assertEquals(scores[i], scc.mscores[i], 0f);\n    }\n    \n  }\n\n","sourceOld":"  public void testGetScores() throws Exception {\n    \n    Scorer s = new SimpleScorer();\n    ScoreCachingCollector scc = new ScoreCachingCollector(scores.length);\n    scc.setScorer(s);\n    \n    // We need to iterate on the scorer so that its doc() advances.\n    int doc;\n    while ((doc = s.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      scc.collect(doc);\n    }\n    \n    for (int i = 0; i < scores.length; i++) {\n      assertEquals(scores[i], scc.mscores[i], 0f);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30a558487f2298c2c19ceca9103c1b6865d64708":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["30a558487f2298c2c19ceca9103c1b6865d64708"]},"commit2Childs":{"30a558487f2298c2c19ceca9103c1b6865d64708":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["30a558487f2298c2c19ceca9103c1b6865d64708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}