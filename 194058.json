{"path":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#repeatingPPs(HashMap[Term,Integer]).mjava","commits":[{"id":"2eaa5d4d2618a012373ae4574ebb6563933aa9f6","date":1331337973,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#repeatingPPs(HashMap[Term,Integer]).mjava","pathOld":"/dev/null","sourceNew":"  /** find repeating pps, and for each, if has multi-terms, update this.hasMultiTermRpts */\n  private PhrasePositions[] repeatingPPs(HashMap<Term,Integer> rptTerms) {\n    ArrayList<PhrasePositions> rp = new ArrayList<PhrasePositions>(); \n    for (PhrasePositions pp=min,prev=null; prev!=max; pp=(prev=pp).next) { // iterate cyclic list: done once handled max\n      for (Term t : pp.terms) {\n        if (rptTerms.containsKey(t)) {\n          rp.add(pp);\n          hasMultiTermRpts |= (pp.terms.length > 1);\n          break;\n        }\n      }\n    }\n    return rp.toArray(new PhrasePositions[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#repeatingPPs(HashMap[Term,Integer]).mjava","pathOld":"/dev/null","sourceNew":"  /** find repeating pps, and for each, if has multi-terms, update this.hasMultiTermRpts */\n  private PhrasePositions[] repeatingPPs(HashMap<Term,Integer> rptTerms) {\n    ArrayList<PhrasePositions> rp = new ArrayList<PhrasePositions>(); \n    for (PhrasePositions pp=min,prev=null; prev!=max; pp=(prev=pp).next) { // iterate cyclic list: done once handled max\n      for (Term t : pp.terms) {\n        if (rptTerms.containsKey(t)) {\n          rp.add(pp);\n          hasMultiTermRpts |= (pp.terms.length > 1);\n          break;\n        }\n      }\n    }\n    return rp.toArray(new PhrasePositions[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#repeatingPPs(HashMap[Term,Integer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#repeatingPPs(HashMap[Term,Integer]).mjava","sourceNew":"  /** find repeating pps, and for each, if has multi-terms, update this.hasMultiTermRpts */\n  private PhrasePositions[] repeatingPPs(HashMap<Term,Integer> rptTerms) {\n    ArrayList<PhrasePositions> rp = new ArrayList<>();\n    for (PhrasePositions pp=min,prev=null; prev!=max; pp=(prev=pp).next) { // iterate cyclic list: done once handled max\n      for (Term t : pp.terms) {\n        if (rptTerms.containsKey(t)) {\n          rp.add(pp);\n          hasMultiTermRpts |= (pp.terms.length > 1);\n          break;\n        }\n      }\n    }\n    return rp.toArray(new PhrasePositions[0]);\n  }\n\n","sourceOld":"  /** find repeating pps, and for each, if has multi-terms, update this.hasMultiTermRpts */\n  private PhrasePositions[] repeatingPPs(HashMap<Term,Integer> rptTerms) {\n    ArrayList<PhrasePositions> rp = new ArrayList<PhrasePositions>(); \n    for (PhrasePositions pp=min,prev=null; prev!=max; pp=(prev=pp).next) { // iterate cyclic list: done once handled max\n      for (Term t : pp.terms) {\n        if (rptTerms.containsKey(t)) {\n          rp.add(pp);\n          hasMultiTermRpts |= (pp.terms.length > 1);\n          break;\n        }\n      }\n    }\n    return rp.toArray(new PhrasePositions[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54562c0e8e43530c289ddd16a9d75bc1901fd7b0","date":1424714129,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#repeatingPPs(HashMap[Term,Integer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#repeatingPPs(HashMap[Term,Integer]).mjava","sourceNew":"  /** find repeating pps, and for each, if has multi-terms, update this.hasMultiTermRpts */\n  private PhrasePositions[] repeatingPPs(HashMap<Term,Integer> rptTerms) {\n    ArrayList<PhrasePositions> rp = new ArrayList<>();\n    for (PhrasePositions pp : phrasePositions) {\n      for (Term t : pp.terms) {\n        if (rptTerms.containsKey(t)) {\n          rp.add(pp);\n          hasMultiTermRpts |= (pp.terms.length > 1);\n          break;\n        }\n      }\n    }\n    return rp.toArray(new PhrasePositions[0]);\n  }\n\n","sourceOld":"  /** find repeating pps, and for each, if has multi-terms, update this.hasMultiTermRpts */\n  private PhrasePositions[] repeatingPPs(HashMap<Term,Integer> rptTerms) {\n    ArrayList<PhrasePositions> rp = new ArrayList<>();\n    for (PhrasePositions pp=min,prev=null; prev!=max; pp=(prev=pp).next) { // iterate cyclic list: done once handled max\n      for (Term t : pp.terms) {\n        if (rptTerms.containsKey(t)) {\n          rp.add(pp);\n          hasMultiTermRpts |= (pp.terms.length > 1);\n          break;\n        }\n      }\n    }\n    return rp.toArray(new PhrasePositions[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#repeatingPPs(HashMap[Term,Integer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#repeatingPPs(HashMap[Term,Integer]).mjava","sourceNew":"  /** find repeating pps, and for each, if has multi-terms, update this.hasMultiTermRpts */\n  private PhrasePositions[] repeatingPPs(HashMap<Term,Integer> rptTerms) {\n    ArrayList<PhrasePositions> rp = new ArrayList<>();\n    for (PhrasePositions pp : phrasePositions) {\n      for (Term t : pp.terms) {\n        if (rptTerms.containsKey(t)) {\n          rp.add(pp);\n          hasMultiTermRpts |= (pp.terms.length > 1);\n          break;\n        }\n      }\n    }\n    return rp.toArray(new PhrasePositions[0]);\n  }\n\n","sourceOld":"  /** find repeating pps, and for each, if has multi-terms, update this.hasMultiTermRpts */\n  private PhrasePositions[] repeatingPPs(HashMap<Term,Integer> rptTerms) {\n    ArrayList<PhrasePositions> rp = new ArrayList<>();\n    for (PhrasePositions pp : phrasePositions) {\n      for (Term t : pp.terms) {\n        if (rptTerms.containsKey(t)) {\n          rp.add(pp);\n          hasMultiTermRpts |= (pp.terms.length > 1);\n          break;\n        }\n      }\n    }\n    return rp.toArray(new PhrasePositions[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"2eaa5d4d2618a012373ae4574ebb6563933aa9f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b11b9d5eaf9707760ca5151530830a825197023":["54562c0e8e43530c289ddd16a9d75bc1901fd7b0"],"54562c0e8e43530c289ddd16a9d75bc1901fd7b0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b11b9d5eaf9707760ca5151530830a825197023"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["54562c0e8e43530c289ddd16a9d75bc1901fd7b0"],"2eaa5d4d2618a012373ae4574ebb6563933aa9f6":["38e3b736c7ca086d61b7dbb841c905ee115490da","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3b11b9d5eaf9707760ca5151530830a825197023":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54562c0e8e43530c289ddd16a9d75bc1901fd7b0":["3b11b9d5eaf9707760ca5151530830a825197023"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}