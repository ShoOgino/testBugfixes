{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#zkTransfer(SolrZkClient,String,Boolean,String,Boolean,Boolean).mjava","commits":[{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":0,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#zkTransfer(SolrZkClient,String,Boolean,String,Boolean,Boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copy between local file system and Zookeeper, or from one Zookeeper node to another,\n   * optionally copying recursively.\n   *\n   * @param src     Source to copy from. Both src and dst may be Znodes. However, both may NOT be local\n   * @param dst     The place to copy the files too. Both src and dst may be Znodes. However both may NOT be local\n   * @param recurse if the source is a directory, reccursively copy the contents iff this is true.\n   * @throws SolrServerException  Explanatory exception due to bad params, failed operation, etc.\n   * @throws KeeperException      Could not perform the Zookeeper operation.\n   * @throws InterruptedException Thread interrupted\n   */\n  public static void zkTransfer(SolrZkClient zkClient, String src, Boolean srcIsZk,\n                         String dst, Boolean dstIsZk, \n                         Boolean recurse) throws SolrServerException, KeeperException, InterruptedException, IOException {\n\n    if (srcIsZk == false && dstIsZk == false) {\n      throw new SolrServerException(\"One or both of source or destination must specify ZK nodes.\");\n    }\n\n    // Make sure -recurse is specified if the source has children.\n    if (recurse == false) {\n      if (srcIsZk) {\n        if (zkClient.getChildren(src, null, true).size() != 0) {\n          throw new SolrServerException(\"Zookeeper node \" + src + \" has children and recurse is false\");\n        }\n      } else if (Files.isDirectory(Paths.get(src))) {\n        throw new SolrServerException(\"Local path \" + Paths.get(src).toAbsolutePath() + \" is a directory and recurse is false\");\n      }\n    }\n    if (srcIsZk == false && dstIsZk == false) {\n      throw new SolrServerException(\"At least one of the source and dest parameters must be prefixed with 'zk:' \");\n    }\n    dst = normalizeDest(src, dst);\n\n    if (srcIsZk && dstIsZk) {\n      traverseZkTree(zkClient, src, VISIT_ORDER.VISIT_PRE, new ZkCopier(zkClient, src, dst));\n      return;\n    }\n    if (dstIsZk) {\n      uploadToZK(zkClient, Paths.get(src), dst, null);\n      return;\n    }\n\n    // Copying individual files from ZK requires special handling since downloadFromZK assumes it's a directory.\n    // This is kind of a weak test for the notion of \"directory\" on Zookeeper.\n    if (zkClient.getChildren(src, null, true).size() > 0) {\n      downloadFromZK(zkClient, src, Paths.get(dst));\n      return;\n    }\n\n    if (Files.isDirectory(Paths.get(dst))) {\n      if (dst.endsWith(\"/\") == false) dst += \"/\";\n      dst = normalizeDest(src, dst);\n    }\n    byte[] data = zkClient.getData(src, null, null, true);\n    Path filename = Paths.get(dst);\n    Files.createDirectories(filename.getParent());\n    log.info(\"Writing file {}\", filename);\n    Files.write(filename, data);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f49693fcc05c1186d9b347493efa73a614f5bba7","1b4e25416a41abd13d1febb3eebf589cbc71e5ae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#zkTransfer(SolrZkClient,String,Boolean,String,Boolean,Boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copy between local file system and Zookeeper, or from one Zookeeper node to another,\n   * optionally copying recursively.\n   *\n   * @param src     Source to copy from. Both src and dst may be Znodes. However, both may NOT be local\n   * @param dst     The place to copy the files too. Both src and dst may be Znodes. However both may NOT be local\n   * @param recurse if the source is a directory, reccursively copy the contents iff this is true.\n   * @throws SolrServerException  Explanatory exception due to bad params, failed operation, etc.\n   * @throws KeeperException      Could not perform the Zookeeper operation.\n   * @throws InterruptedException Thread interrupted\n   */\n  public static void zkTransfer(SolrZkClient zkClient, String src, Boolean srcIsZk,\n                         String dst, Boolean dstIsZk, \n                         Boolean recurse) throws SolrServerException, KeeperException, InterruptedException, IOException {\n\n    if (srcIsZk == false && dstIsZk == false) {\n      throw new SolrServerException(\"One or both of source or destination must specify ZK nodes.\");\n    }\n\n    // Make sure -recurse is specified if the source has children.\n    if (recurse == false) {\n      if (srcIsZk) {\n        if (zkClient.getChildren(src, null, true).size() != 0) {\n          throw new SolrServerException(\"Zookeeper node \" + src + \" has children and recurse is false\");\n        }\n      } else if (Files.isDirectory(Paths.get(src))) {\n        throw new SolrServerException(\"Local path \" + Paths.get(src).toAbsolutePath() + \" is a directory and recurse is false\");\n      }\n    }\n    if (srcIsZk == false && dstIsZk == false) {\n      throw new SolrServerException(\"At least one of the source and dest parameters must be prefixed with 'zk:' \");\n    }\n    dst = normalizeDest(src, dst);\n\n    if (srcIsZk && dstIsZk) {\n      traverseZkTree(zkClient, src, VISIT_ORDER.VISIT_PRE, new ZkCopier(zkClient, src, dst));\n      return;\n    }\n    if (dstIsZk) {\n      uploadToZK(zkClient, Paths.get(src), dst, null);\n      return;\n    }\n\n    // Copying individual files from ZK requires special handling since downloadFromZK assumes it's a directory.\n    // This is kind of a weak test for the notion of \"directory\" on Zookeeper.\n    if (zkClient.getChildren(src, null, true).size() > 0) {\n      downloadFromZK(zkClient, src, Paths.get(dst));\n      return;\n    }\n\n    if (Files.isDirectory(Paths.get(dst))) {\n      if (dst.endsWith(\"/\") == false) dst += \"/\";\n      dst = normalizeDest(src, dst);\n    }\n    byte[] data = zkClient.getData(src, null, null, true);\n    Path filename = Paths.get(dst);\n    Files.createDirectories(filename.getParent());\n    log.info(\"Writing file {}\", filename);\n    Files.write(filename, data);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e","date":1490642105,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#zkTransfer(SolrZkClient,String,Boolean,String,Boolean,Boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#zkTransfer(SolrZkClient,String,Boolean,String,Boolean,Boolean).mjava","sourceNew":"  /**\n   * Copy between local file system and Zookeeper, or from one Zookeeper node to another,\n   * optionally copying recursively.\n   *\n   * @param src     Source to copy from. Both src and dst may be Znodes. However, both may NOT be local\n   * @param dst     The place to copy the files too. Both src and dst may be Znodes. However both may NOT be local\n   * @param recurse if the source is a directory, reccursively copy the contents iff this is true.\n   * @throws SolrServerException  Explanatory exception due to bad params, failed operation, etc.\n   * @throws KeeperException      Could not perform the Zookeeper operation.\n   * @throws InterruptedException Thread interrupted\n   */\n  public static void zkTransfer(SolrZkClient zkClient, String src, Boolean srcIsZk,\n                         String dst, Boolean dstIsZk, \n                         Boolean recurse) throws SolrServerException, KeeperException, InterruptedException, IOException {\n\n    if (srcIsZk == false && dstIsZk == false) {\n      throw new SolrServerException(\"One or both of source or destination must specify ZK nodes.\");\n    }\n\n    // Make sure -recurse is specified if the source has children.\n    if (recurse == false) {\n      if (srcIsZk) {\n        if (zkClient.getChildren(src, null, true).size() != 0) {\n          throw new SolrServerException(\"Zookeeper node \" + src + \" has children and recurse is false\");\n        }\n      } else if (Files.isDirectory(Paths.get(src))) {\n        throw new SolrServerException(\"Local path \" + Paths.get(src).toAbsolutePath() + \" is a directory and recurse is false\");\n      }\n    }\n    if (srcIsZk == false && dstIsZk == false) {\n      throw new SolrServerException(\"At least one of the source and dest parameters must be prefixed with 'zk:' \");\n    }\n    if (dstIsZk && dst.length() == 0) {\n      dst = \"/\"; // for consistency, one can copy from zk: and send to zk:/\n    }\n    dst = normalizeDest(src, dst);\n\n    if (srcIsZk && dstIsZk) {\n      traverseZkTree(zkClient, src, VISIT_ORDER.VISIT_PRE, new ZkCopier(zkClient, src, dst));\n      return;\n    }\n    if (dstIsZk) {\n      uploadToZK(zkClient, Paths.get(src), dst, null);\n      return;\n    }\n\n    // Copying individual files from ZK requires special handling since downloadFromZK assumes it's a directory.\n    // This is kind of a weak test for the notion of \"directory\" on Zookeeper.\n    if (zkClient.getChildren(src, null, true).size() > 0) {\n      downloadFromZK(zkClient, src, Paths.get(dst));\n      return;\n    }\n\n    if (Files.isDirectory(Paths.get(dst))) {\n      if (dst.endsWith(\"/\") == false) dst += \"/\";\n      dst = normalizeDest(src, dst);\n    }\n    byte[] data = zkClient.getData(src, null, null, true);\n    Path filename = Paths.get(dst);\n    Files.createDirectories(filename.getParent());\n    log.info(\"Writing file {}\", filename);\n    Files.write(filename, data);\n  }\n\n","sourceOld":"  /**\n   * Copy between local file system and Zookeeper, or from one Zookeeper node to another,\n   * optionally copying recursively.\n   *\n   * @param src     Source to copy from. Both src and dst may be Znodes. However, both may NOT be local\n   * @param dst     The place to copy the files too. Both src and dst may be Znodes. However both may NOT be local\n   * @param recurse if the source is a directory, reccursively copy the contents iff this is true.\n   * @throws SolrServerException  Explanatory exception due to bad params, failed operation, etc.\n   * @throws KeeperException      Could not perform the Zookeeper operation.\n   * @throws InterruptedException Thread interrupted\n   */\n  public static void zkTransfer(SolrZkClient zkClient, String src, Boolean srcIsZk,\n                         String dst, Boolean dstIsZk, \n                         Boolean recurse) throws SolrServerException, KeeperException, InterruptedException, IOException {\n\n    if (srcIsZk == false && dstIsZk == false) {\n      throw new SolrServerException(\"One or both of source or destination must specify ZK nodes.\");\n    }\n\n    // Make sure -recurse is specified if the source has children.\n    if (recurse == false) {\n      if (srcIsZk) {\n        if (zkClient.getChildren(src, null, true).size() != 0) {\n          throw new SolrServerException(\"Zookeeper node \" + src + \" has children and recurse is false\");\n        }\n      } else if (Files.isDirectory(Paths.get(src))) {\n        throw new SolrServerException(\"Local path \" + Paths.get(src).toAbsolutePath() + \" is a directory and recurse is false\");\n      }\n    }\n    if (srcIsZk == false && dstIsZk == false) {\n      throw new SolrServerException(\"At least one of the source and dest parameters must be prefixed with 'zk:' \");\n    }\n    dst = normalizeDest(src, dst);\n\n    if (srcIsZk && dstIsZk) {\n      traverseZkTree(zkClient, src, VISIT_ORDER.VISIT_PRE, new ZkCopier(zkClient, src, dst));\n      return;\n    }\n    if (dstIsZk) {\n      uploadToZK(zkClient, Paths.get(src), dst, null);\n      return;\n    }\n\n    // Copying individual files from ZK requires special handling since downloadFromZK assumes it's a directory.\n    // This is kind of a weak test for the notion of \"directory\" on Zookeeper.\n    if (zkClient.getChildren(src, null, true).size() > 0) {\n      downloadFromZK(zkClient, src, Paths.get(dst));\n      return;\n    }\n\n    if (Files.isDirectory(Paths.get(dst))) {\n      if (dst.endsWith(\"/\") == false) dst += \"/\";\n      dst = normalizeDest(src, dst);\n    }\n    byte[] data = zkClient.getData(src, null, null, true);\n    Path filename = Paths.get(dst);\n    Files.createDirectories(filename.getParent());\n    log.info(\"Writing file {}\", filename);\n    Files.write(filename, data);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2","date":1490847220,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#zkTransfer(SolrZkClient,String,Boolean,String,Boolean,Boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#zkTransfer(SolrZkClient,String,Boolean,String,Boolean,Boolean).mjava","sourceNew":"  /**\n   * Copy between local file system and Zookeeper, or from one Zookeeper node to another,\n   * optionally copying recursively.\n   *\n   * @param src     Source to copy from. Both src and dst may be Znodes. However, both may NOT be local\n   * @param dst     The place to copy the files too. Both src and dst may be Znodes. However both may NOT be local\n   * @param recurse if the source is a directory, reccursively copy the contents iff this is true.\n   * @throws SolrServerException  Explanatory exception due to bad params, failed operation, etc.\n   * @throws KeeperException      Could not perform the Zookeeper operation.\n   * @throws InterruptedException Thread interrupted\n   */\n  public static void zkTransfer(SolrZkClient zkClient, String src, Boolean srcIsZk,\n                         String dst, Boolean dstIsZk, \n                         Boolean recurse) throws SolrServerException, KeeperException, InterruptedException, IOException {\n\n    if (srcIsZk == false && dstIsZk == false) {\n      throw new SolrServerException(\"One or both of source or destination must specify ZK nodes.\");\n    }\n\n    // Make sure -recurse is specified if the source has children.\n    if (recurse == false) {\n      if (srcIsZk) {\n        if (zkClient.getChildren(src, null, true).size() != 0) {\n          throw new SolrServerException(\"Zookeeper node \" + src + \" has children and recurse is false\");\n        }\n      } else if (Files.isDirectory(Paths.get(src))) {\n        throw new SolrServerException(\"Local path \" + Paths.get(src).toAbsolutePath() + \" is a directory and recurse is false\");\n      }\n    }\n\n    if (dstIsZk && dst.length() == 0) {\n      dst = \"/\"; // for consistency, one can copy from zk: and send to zk:/\n    }\n    dst = normalizeDest(src, dst, srcIsZk, dstIsZk);\n\n    // ZK -> ZK copy.\n    if (srcIsZk && dstIsZk) {\n      traverseZkTree(zkClient, src, VISIT_ORDER.VISIT_PRE, new ZkCopier(zkClient, src, dst));\n      return;\n    }\n\n    //local -> ZK copy\n    if (dstIsZk) {\n      uploadToZK(zkClient, Paths.get(src), dst, null);\n      return;\n    }\n\n    // Copying individual files from ZK requires special handling since downloadFromZK assumes the node has children.\n    // This is kind of a weak test for the notion of \"directory\" on Zookeeper.\n    // ZK -> local copy where ZK is a parent node\n    if (zkClient.getChildren(src, null, true).size() > 0) {\n      downloadFromZK(zkClient, src, Paths.get(dst));\n      return;\n    }\n\n    // Single file ZK -> local copy where ZK is a leaf node\n    if (Files.isDirectory(Paths.get(dst))) {\n      if (dst.endsWith(File.separator) == false) dst += File.separator;\n      dst = normalizeDest(src, dst, srcIsZk, dstIsZk);\n    }\n    byte[] data = zkClient.getData(src, null, null, true);\n    Path filename = Paths.get(dst);\n    Files.createDirectories(filename.getParent());\n    log.info(\"Writing file {}\", filename);\n    Files.write(filename, data);\n  }\n\n","sourceOld":"  /**\n   * Copy between local file system and Zookeeper, or from one Zookeeper node to another,\n   * optionally copying recursively.\n   *\n   * @param src     Source to copy from. Both src and dst may be Znodes. However, both may NOT be local\n   * @param dst     The place to copy the files too. Both src and dst may be Znodes. However both may NOT be local\n   * @param recurse if the source is a directory, reccursively copy the contents iff this is true.\n   * @throws SolrServerException  Explanatory exception due to bad params, failed operation, etc.\n   * @throws KeeperException      Could not perform the Zookeeper operation.\n   * @throws InterruptedException Thread interrupted\n   */\n  public static void zkTransfer(SolrZkClient zkClient, String src, Boolean srcIsZk,\n                         String dst, Boolean dstIsZk, \n                         Boolean recurse) throws SolrServerException, KeeperException, InterruptedException, IOException {\n\n    if (srcIsZk == false && dstIsZk == false) {\n      throw new SolrServerException(\"One or both of source or destination must specify ZK nodes.\");\n    }\n\n    // Make sure -recurse is specified if the source has children.\n    if (recurse == false) {\n      if (srcIsZk) {\n        if (zkClient.getChildren(src, null, true).size() != 0) {\n          throw new SolrServerException(\"Zookeeper node \" + src + \" has children and recurse is false\");\n        }\n      } else if (Files.isDirectory(Paths.get(src))) {\n        throw new SolrServerException(\"Local path \" + Paths.get(src).toAbsolutePath() + \" is a directory and recurse is false\");\n      }\n    }\n    if (srcIsZk == false && dstIsZk == false) {\n      throw new SolrServerException(\"At least one of the source and dest parameters must be prefixed with 'zk:' \");\n    }\n    if (dstIsZk && dst.length() == 0) {\n      dst = \"/\"; // for consistency, one can copy from zk: and send to zk:/\n    }\n    dst = normalizeDest(src, dst);\n\n    if (srcIsZk && dstIsZk) {\n      traverseZkTree(zkClient, src, VISIT_ORDER.VISIT_PRE, new ZkCopier(zkClient, src, dst));\n      return;\n    }\n    if (dstIsZk) {\n      uploadToZK(zkClient, Paths.get(src), dst, null);\n      return;\n    }\n\n    // Copying individual files from ZK requires special handling since downloadFromZK assumes it's a directory.\n    // This is kind of a weak test for the notion of \"directory\" on Zookeeper.\n    if (zkClient.getChildren(src, null, true).size() > 0) {\n      downloadFromZK(zkClient, src, Paths.get(dst));\n      return;\n    }\n\n    if (Files.isDirectory(Paths.get(dst))) {\n      if (dst.endsWith(\"/\") == false) dst += \"/\";\n      dst = normalizeDest(src, dst);\n    }\n    byte[] data = zkClient.getData(src, null, null, true);\n    Path filename = Paths.get(dst);\n    Files.createDirectories(filename.getParent());\n    log.info(\"Writing file {}\", filename);\n    Files.write(filename, data);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7b3180545c5d5e137529b5474e018af04e07615","date":1490873944,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#zkTransfer(SolrZkClient,String,Boolean,String,Boolean,Boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#zkTransfer(SolrZkClient,String,Boolean,String,Boolean,Boolean).mjava","sourceNew":"  /**\n   * Copy between local file system and Zookeeper, or from one Zookeeper node to another,\n   * optionally copying recursively.\n   *\n   * @param src     Source to copy from. Both src and dst may be Znodes. However, both may NOT be local\n   * @param dst     The place to copy the files too. Both src and dst may be Znodes. However both may NOT be local\n   * @param recurse if the source is a directory, reccursively copy the contents iff this is true.\n   * @throws SolrServerException  Explanatory exception due to bad params, failed operation, etc.\n   * @throws KeeperException      Could not perform the Zookeeper operation.\n   * @throws InterruptedException Thread interrupted\n   */\n  public static void zkTransfer(SolrZkClient zkClient, String src, Boolean srcIsZk,\n                         String dst, Boolean dstIsZk, \n                         Boolean recurse) throws SolrServerException, KeeperException, InterruptedException, IOException {\n\n    if (srcIsZk == false && dstIsZk == false) {\n      throw new SolrServerException(\"One or both of source or destination must specify ZK nodes.\");\n    }\n\n    // Make sure -recurse is specified if the source has children.\n    if (recurse == false) {\n      if (srcIsZk) {\n        if (zkClient.getChildren(src, null, true).size() != 0) {\n          throw new SolrServerException(\"Zookeeper node \" + src + \" has children and recurse is false\");\n        }\n      } else if (Files.isDirectory(Paths.get(src))) {\n        throw new SolrServerException(\"Local path \" + Paths.get(src).toAbsolutePath() + \" is a directory and recurse is false\");\n      }\n    }\n    if (srcIsZk == false && dstIsZk == false) {\n      throw new SolrServerException(\"At least one of the source and dest parameters must be prefixed with 'zk:' \");\n    }\n    if (dstIsZk && dst.length() == 0) {\n      dst = \"/\"; // for consistency, one can copy from zk: and send to zk:/\n    }\n    dst = normalizeDest(src, dst);\n\n    if (srcIsZk && dstIsZk) {\n      traverseZkTree(zkClient, src, VISIT_ORDER.VISIT_PRE, new ZkCopier(zkClient, src, dst));\n      return;\n    }\n    if (dstIsZk) {\n      uploadToZK(zkClient, Paths.get(src), dst, null);\n      return;\n    }\n\n    // Copying individual files from ZK requires special handling since downloadFromZK assumes it's a directory.\n    // This is kind of a weak test for the notion of \"directory\" on Zookeeper.\n    if (zkClient.getChildren(src, null, true).size() > 0) {\n      downloadFromZK(zkClient, src, Paths.get(dst));\n      return;\n    }\n\n    if (Files.isDirectory(Paths.get(dst))) {\n      if (dst.endsWith(\"/\") == false) dst += \"/\";\n      dst = normalizeDest(src, dst);\n    }\n    byte[] data = zkClient.getData(src, null, null, true);\n    Path filename = Paths.get(dst);\n    Files.createDirectories(filename.getParent());\n    log.info(\"Writing file {}\", filename);\n    Files.write(filename, data);\n  }\n\n","sourceOld":"  /**\n   * Copy between local file system and Zookeeper, or from one Zookeeper node to another,\n   * optionally copying recursively.\n   *\n   * @param src     Source to copy from. Both src and dst may be Znodes. However, both may NOT be local\n   * @param dst     The place to copy the files too. Both src and dst may be Znodes. However both may NOT be local\n   * @param recurse if the source is a directory, reccursively copy the contents iff this is true.\n   * @throws SolrServerException  Explanatory exception due to bad params, failed operation, etc.\n   * @throws KeeperException      Could not perform the Zookeeper operation.\n   * @throws InterruptedException Thread interrupted\n   */\n  public static void zkTransfer(SolrZkClient zkClient, String src, Boolean srcIsZk,\n                         String dst, Boolean dstIsZk, \n                         Boolean recurse) throws SolrServerException, KeeperException, InterruptedException, IOException {\n\n    if (srcIsZk == false && dstIsZk == false) {\n      throw new SolrServerException(\"One or both of source or destination must specify ZK nodes.\");\n    }\n\n    // Make sure -recurse is specified if the source has children.\n    if (recurse == false) {\n      if (srcIsZk) {\n        if (zkClient.getChildren(src, null, true).size() != 0) {\n          throw new SolrServerException(\"Zookeeper node \" + src + \" has children and recurse is false\");\n        }\n      } else if (Files.isDirectory(Paths.get(src))) {\n        throw new SolrServerException(\"Local path \" + Paths.get(src).toAbsolutePath() + \" is a directory and recurse is false\");\n      }\n    }\n    if (srcIsZk == false && dstIsZk == false) {\n      throw new SolrServerException(\"At least one of the source and dest parameters must be prefixed with 'zk:' \");\n    }\n    dst = normalizeDest(src, dst);\n\n    if (srcIsZk && dstIsZk) {\n      traverseZkTree(zkClient, src, VISIT_ORDER.VISIT_PRE, new ZkCopier(zkClient, src, dst));\n      return;\n    }\n    if (dstIsZk) {\n      uploadToZK(zkClient, Paths.get(src), dst, null);\n      return;\n    }\n\n    // Copying individual files from ZK requires special handling since downloadFromZK assumes it's a directory.\n    // This is kind of a weak test for the notion of \"directory\" on Zookeeper.\n    if (zkClient.getChildren(src, null, true).size() > 0) {\n      downloadFromZK(zkClient, src, Paths.get(dst));\n      return;\n    }\n\n    if (Files.isDirectory(Paths.get(dst))) {\n      if (dst.endsWith(\"/\") == false) dst += \"/\";\n      dst = normalizeDest(src, dst);\n    }\n    byte[] data = zkClient.getData(src, null, null, true);\n    Path filename = Paths.get(dst);\n    Files.createDirectories(filename.getParent());\n    log.info(\"Writing file {}\", filename);\n    Files.write(filename, data);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f49693fcc05c1186d9b347493efa73a614f5bba7","date":1490873947,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#zkTransfer(SolrZkClient,String,Boolean,String,Boolean,Boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#zkTransfer(SolrZkClient,String,Boolean,String,Boolean,Boolean).mjava","sourceNew":"  /**\n   * Copy between local file system and Zookeeper, or from one Zookeeper node to another,\n   * optionally copying recursively.\n   *\n   * @param src     Source to copy from. Both src and dst may be Znodes. However, both may NOT be local\n   * @param dst     The place to copy the files too. Both src and dst may be Znodes. However both may NOT be local\n   * @param recurse if the source is a directory, reccursively copy the contents iff this is true.\n   * @throws SolrServerException  Explanatory exception due to bad params, failed operation, etc.\n   * @throws KeeperException      Could not perform the Zookeeper operation.\n   * @throws InterruptedException Thread interrupted\n   */\n  public static void zkTransfer(SolrZkClient zkClient, String src, Boolean srcIsZk,\n                         String dst, Boolean dstIsZk, \n                         Boolean recurse) throws SolrServerException, KeeperException, InterruptedException, IOException {\n\n    if (srcIsZk == false && dstIsZk == false) {\n      throw new SolrServerException(\"One or both of source or destination must specify ZK nodes.\");\n    }\n\n    // Make sure -recurse is specified if the source has children.\n    if (recurse == false) {\n      if (srcIsZk) {\n        if (zkClient.getChildren(src, null, true).size() != 0) {\n          throw new SolrServerException(\"Zookeeper node \" + src + \" has children and recurse is false\");\n        }\n      } else if (Files.isDirectory(Paths.get(src))) {\n        throw new SolrServerException(\"Local path \" + Paths.get(src).toAbsolutePath() + \" is a directory and recurse is false\");\n      }\n    }\n\n    if (dstIsZk && dst.length() == 0) {\n      dst = \"/\"; // for consistency, one can copy from zk: and send to zk:/\n    }\n    dst = normalizeDest(src, dst, srcIsZk, dstIsZk);\n\n    // ZK -> ZK copy.\n    if (srcIsZk && dstIsZk) {\n      traverseZkTree(zkClient, src, VISIT_ORDER.VISIT_PRE, new ZkCopier(zkClient, src, dst));\n      return;\n    }\n\n    //local -> ZK copy\n    if (dstIsZk) {\n      uploadToZK(zkClient, Paths.get(src), dst, null);\n      return;\n    }\n\n    // Copying individual files from ZK requires special handling since downloadFromZK assumes the node has children.\n    // This is kind of a weak test for the notion of \"directory\" on Zookeeper.\n    // ZK -> local copy where ZK is a parent node\n    if (zkClient.getChildren(src, null, true).size() > 0) {\n      downloadFromZK(zkClient, src, Paths.get(dst));\n      return;\n    }\n\n    // Single file ZK -> local copy where ZK is a leaf node\n    if (Files.isDirectory(Paths.get(dst))) {\n      if (dst.endsWith(File.separator) == false) dst += File.separator;\n      dst = normalizeDest(src, dst, srcIsZk, dstIsZk);\n    }\n    byte[] data = zkClient.getData(src, null, null, true);\n    Path filename = Paths.get(dst);\n    Files.createDirectories(filename.getParent());\n    log.info(\"Writing file {}\", filename);\n    Files.write(filename, data);\n  }\n\n","sourceOld":"  /**\n   * Copy between local file system and Zookeeper, or from one Zookeeper node to another,\n   * optionally copying recursively.\n   *\n   * @param src     Source to copy from. Both src and dst may be Znodes. However, both may NOT be local\n   * @param dst     The place to copy the files too. Both src and dst may be Znodes. However both may NOT be local\n   * @param recurse if the source is a directory, reccursively copy the contents iff this is true.\n   * @throws SolrServerException  Explanatory exception due to bad params, failed operation, etc.\n   * @throws KeeperException      Could not perform the Zookeeper operation.\n   * @throws InterruptedException Thread interrupted\n   */\n  public static void zkTransfer(SolrZkClient zkClient, String src, Boolean srcIsZk,\n                         String dst, Boolean dstIsZk, \n                         Boolean recurse) throws SolrServerException, KeeperException, InterruptedException, IOException {\n\n    if (srcIsZk == false && dstIsZk == false) {\n      throw new SolrServerException(\"One or both of source or destination must specify ZK nodes.\");\n    }\n\n    // Make sure -recurse is specified if the source has children.\n    if (recurse == false) {\n      if (srcIsZk) {\n        if (zkClient.getChildren(src, null, true).size() != 0) {\n          throw new SolrServerException(\"Zookeeper node \" + src + \" has children and recurse is false\");\n        }\n      } else if (Files.isDirectory(Paths.get(src))) {\n        throw new SolrServerException(\"Local path \" + Paths.get(src).toAbsolutePath() + \" is a directory and recurse is false\");\n      }\n    }\n    if (srcIsZk == false && dstIsZk == false) {\n      throw new SolrServerException(\"At least one of the source and dest parameters must be prefixed with 'zk:' \");\n    }\n    if (dstIsZk && dst.length() == 0) {\n      dst = \"/\"; // for consistency, one can copy from zk: and send to zk:/\n    }\n    dst = normalizeDest(src, dst);\n\n    if (srcIsZk && dstIsZk) {\n      traverseZkTree(zkClient, src, VISIT_ORDER.VISIT_PRE, new ZkCopier(zkClient, src, dst));\n      return;\n    }\n    if (dstIsZk) {\n      uploadToZK(zkClient, Paths.get(src), dst, null);\n      return;\n    }\n\n    // Copying individual files from ZK requires special handling since downloadFromZK assumes it's a directory.\n    // This is kind of a weak test for the notion of \"directory\" on Zookeeper.\n    if (zkClient.getChildren(src, null, true).size() > 0) {\n      downloadFromZK(zkClient, src, Paths.get(dst));\n      return;\n    }\n\n    if (Files.isDirectory(Paths.get(dst))) {\n      if (dst.endsWith(\"/\") == false) dst += \"/\";\n      dst = normalizeDest(src, dst);\n    }\n    byte[] data = zkClient.getData(src, null, null, true);\n    Path filename = Paths.get(dst);\n    Files.createDirectories(filename.getParent());\n    log.info(\"Writing file {}\", filename);\n    Files.write(filename, data);\n  }\n\n","bugFix":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b4e25416a41abd13d1febb3eebf589cbc71e5ae","date":1595017101,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#zkTransfer(SolrZkClient,String,Boolean,String,Boolean,Boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#zkTransfer(SolrZkClient,String,Boolean,String,Boolean,Boolean).mjava","sourceNew":"  /**\n   * Copy between local file system and Zookeeper, or from one Zookeeper node to another,\n   * optionally copying recursively.\n   *\n   * @param src     Source to copy from. Both src and dst may be Znodes. However, both may NOT be local\n   * @param dst     The place to copy the files too. Both src and dst may be Znodes. However both may NOT be local\n   * @param recurse if the source is a directory, reccursively copy the contents iff this is true.\n   * @throws SolrServerException  Explanatory exception due to bad params, failed operation, etc.\n   * @throws KeeperException      Could not perform the Zookeeper operation.\n   * @throws InterruptedException Thread interrupted\n   */\n  public static void zkTransfer(SolrZkClient zkClient, String src, Boolean srcIsZk,\n                                String dst, Boolean dstIsZk,\n                                Boolean recurse) throws SolrServerException, KeeperException, InterruptedException, IOException {\n\n    if (srcIsZk == false && dstIsZk == false) {\n      throw new SolrServerException(\"One or both of source or destination must specify ZK nodes.\");\n    }\n\n    // Make sure -recurse is specified if the source has children.\n    if (recurse == false) {\n      if (srcIsZk) {\n        if (zkClient.getChildren(src, null, true).size() != 0) {\n          throw new SolrServerException(\"Zookeeper node \" + src + \" has children and recurse is false\");\n        }\n      } else if (Files.isDirectory(Paths.get(src))) {\n        throw new SolrServerException(\"Local path \" + Paths.get(src).toAbsolutePath() + \" is a directory and recurse is false\");\n      }\n    }\n\n    if (dstIsZk && dst.length() == 0) {\n      dst = \"/\"; // for consistency, one can copy from zk: and send to zk:/\n    }\n    dst = normalizeDest(src, dst, srcIsZk, dstIsZk);\n\n    // ZK -> ZK copy.\n    if (srcIsZk && dstIsZk) {\n      traverseZkTree(zkClient, src, VISIT_ORDER.VISIT_PRE, new ZkCopier(zkClient, src, dst));\n      return;\n    }\n\n    //local -> ZK copy\n    if (dstIsZk) {\n      uploadToZK(zkClient, Paths.get(src), dst, null);\n      return;\n    }\n\n    // Copying individual files from ZK requires special handling since downloadFromZK assumes the node has children.\n    // This is kind of a weak test for the notion of \"directory\" on Zookeeper.\n    // ZK -> local copy where ZK is a parent node\n    if (zkClient.getChildren(src, null, true).size() > 0) {\n      downloadFromZK(zkClient, src, Paths.get(dst));\n      return;\n    }\n\n    // Single file ZK -> local copy where ZK is a leaf node\n    if (Files.isDirectory(Paths.get(dst))) {\n      if (dst.endsWith(File.separator) == false) dst += File.separator;\n      dst = normalizeDest(src, dst, srcIsZk, dstIsZk);\n    }\n    byte[] data = zkClient.getData(src, null, null, true);\n    Path filename = Paths.get(dst);\n    Files.createDirectories(filename.getParent());\n    log.info(\"Writing file {}\", filename);\n    Files.write(filename, data);\n  }\n\n","sourceOld":"  /**\n   * Copy between local file system and Zookeeper, or from one Zookeeper node to another,\n   * optionally copying recursively.\n   *\n   * @param src     Source to copy from. Both src and dst may be Znodes. However, both may NOT be local\n   * @param dst     The place to copy the files too. Both src and dst may be Znodes. However both may NOT be local\n   * @param recurse if the source is a directory, reccursively copy the contents iff this is true.\n   * @throws SolrServerException  Explanatory exception due to bad params, failed operation, etc.\n   * @throws KeeperException      Could not perform the Zookeeper operation.\n   * @throws InterruptedException Thread interrupted\n   */\n  public static void zkTransfer(SolrZkClient zkClient, String src, Boolean srcIsZk,\n                         String dst, Boolean dstIsZk, \n                         Boolean recurse) throws SolrServerException, KeeperException, InterruptedException, IOException {\n\n    if (srcIsZk == false && dstIsZk == false) {\n      throw new SolrServerException(\"One or both of source or destination must specify ZK nodes.\");\n    }\n\n    // Make sure -recurse is specified if the source has children.\n    if (recurse == false) {\n      if (srcIsZk) {\n        if (zkClient.getChildren(src, null, true).size() != 0) {\n          throw new SolrServerException(\"Zookeeper node \" + src + \" has children and recurse is false\");\n        }\n      } else if (Files.isDirectory(Paths.get(src))) {\n        throw new SolrServerException(\"Local path \" + Paths.get(src).toAbsolutePath() + \" is a directory and recurse is false\");\n      }\n    }\n\n    if (dstIsZk && dst.length() == 0) {\n      dst = \"/\"; // for consistency, one can copy from zk: and send to zk:/\n    }\n    dst = normalizeDest(src, dst, srcIsZk, dstIsZk);\n\n    // ZK -> ZK copy.\n    if (srcIsZk && dstIsZk) {\n      traverseZkTree(zkClient, src, VISIT_ORDER.VISIT_PRE, new ZkCopier(zkClient, src, dst));\n      return;\n    }\n\n    //local -> ZK copy\n    if (dstIsZk) {\n      uploadToZK(zkClient, Paths.get(src), dst, null);\n      return;\n    }\n\n    // Copying individual files from ZK requires special handling since downloadFromZK assumes the node has children.\n    // This is kind of a weak test for the notion of \"directory\" on Zookeeper.\n    // ZK -> local copy where ZK is a parent node\n    if (zkClient.getChildren(src, null, true).size() > 0) {\n      downloadFromZK(zkClient, src, Paths.get(dst));\n      return;\n    }\n\n    // Single file ZK -> local copy where ZK is a leaf node\n    if (Files.isDirectory(Paths.get(dst))) {\n      if (dst.endsWith(File.separator) == false) dst += File.separator;\n      dst = normalizeDest(src, dst, srcIsZk, dstIsZk);\n    }\n    byte[] data = zkClient.getData(src, null, null, true);\n    Path filename = Paths.get(dst);\n    Files.createDirectories(filename.getParent());\n    log.info(\"Writing file {}\", filename);\n    Files.write(filename, data);\n  }\n\n","bugFix":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7b3180545c5d5e137529b5474e018af04e07615":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"f49693fcc05c1186d9b347493efa73a614f5bba7":["c7b3180545c5d5e137529b5474e018af04e07615"],"f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"1b4e25416a41abd13d1febb3eebf589cbc71e5ae":["3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2":["f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae"]},"commit2Childs":{"c7b3180545c5d5e137529b5474e018af04e07615":["f49693fcc05c1186d9b347493efa73a614f5bba7"],"f49693fcc05c1186d9b347493efa73a614f5bba7":[],"f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e":["3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["c7b3180545c5d5e137529b5474e018af04e07615","f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1b4e25416a41abd13d1febb3eebf589cbc71e5ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9272a617a9cbebf86be127014bbbacd7cf8f8e83","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f49693fcc05c1186d9b347493efa73a614f5bba7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}