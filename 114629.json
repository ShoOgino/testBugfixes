{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/JmxObjectNameFactory#createName(String,String,String).mjava","commits":[{"id":"9b10b88c8af8835e23b0d566418ef8397a7bb8ed","date":1484223252,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/JmxObjectNameFactory#createName(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a hierarchical name.\n   *\n   * @param type    metric class, eg. \"counters\", may be null for non-metric MBeans\n   * @param currentDomain  JMX domain\n   * @param name    object name\n   */\n  @Override\n  public ObjectName createName(String type, String currentDomain, String name) {\n    SolrMetricInfo metricInfo = SolrMetricInfo.of(name);\n\n    // It turns out that ObjectName(String) mostly preserves key ordering\n    // as specified in the constructor (except for the 'type' key that ends\n    // up at top level) - unlike ObjectName(String, Map) constructor\n    // that seems to have a mind of its own...\n    StringBuilder sb = new StringBuilder();\n    if (domain.equals(currentDomain)) {\n      if (subdomains != null && subdomains.length > 1) {\n        // use only first segment as domain\n        sb.append(subdomains[0]);\n        sb.append(':');\n        // use remaining segments as properties\n        for (int i = 1; i < subdomains.length; i++) {\n          if (i > 1) {\n            sb.append(',');\n          }\n          sb.append(\"dom\");\n          sb.append(String.valueOf(i));\n          sb.append('=');\n          sb.append(subdomains[i]);\n        }\n        sb.append(','); // separate from other properties\n      } else {\n        sb.append(currentDomain);\n        sb.append(':');\n      }\n    } else {\n      sb.append(currentDomain);\n      sb.append(':');\n    }\n    sb.append(\"reporter=\");\n    sb.append(reporterName);\n    sb.append(',');\n    if (metricInfo != null) {\n      sb.append(\"category=\");\n      sb.append(metricInfo.category.toString());\n      sb.append(\",scope=\");\n      sb.append(metricInfo.scope);\n      // we could also split by type, but don't call it 'type' :)\n      // if (type != null) {\n      //   sb.append(\",class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\",name=\");\n      sb.append(metricInfo.name);\n    } else {\n      // make dotted names into hierarchies\n      String[] path = name.split(\"\\\\.\");\n      for (int i = 0; i < path.length - 1; i++) {\n        if (i > 0) {\n          sb.append(',');\n        }\n        sb.append(\"name\"); sb.append(String.valueOf(i));\n        sb.append('=');\n        sb.append(path[i]);\n      }\n      if (path.length > 1) {\n        sb.append(',');\n      }\n      // split by type\n      // if (type != null) {\n      //   sb.append(\"class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\"name=\");\n      sb.append(path[path.length - 1]);\n    }\n    if (props != null && props.length > 0) {\n      for (int i = 0; i < props.length; i += 2) {\n        if (props[i] == null || props[i].isEmpty()) {\n          continue;\n        }\n        if (props[i + 1] == null || props[i + 1].isEmpty()) {\n          continue;\n        }\n        sb.append(',');\n        sb.append(props[i]);\n        sb.append('=');\n        sb.append(props[i + 1]);\n      }\n    }\n\n    ObjectName objectName;\n\n    try {\n      objectName = new ObjectName(sb.toString());\n    } catch (MalformedObjectNameException e) {\n      throw new RuntimeException(sb.toString(), e);\n    }\n\n    return objectName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/JmxObjectNameFactory#createName(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a hierarchical name.\n   *\n   * @param type    metric class, eg. \"counters\", may be null for non-metric MBeans\n   * @param currentDomain  JMX domain\n   * @param name    object name\n   */\n  @Override\n  public ObjectName createName(String type, String currentDomain, String name) {\n    SolrMetricInfo metricInfo = SolrMetricInfo.of(name);\n\n    // It turns out that ObjectName(String) mostly preserves key ordering\n    // as specified in the constructor (except for the 'type' key that ends\n    // up at top level) - unlike ObjectName(String, Map) constructor\n    // that seems to have a mind of its own...\n    StringBuilder sb = new StringBuilder();\n    if (domain.equals(currentDomain)) {\n      if (subdomains != null && subdomains.length > 1) {\n        // use only first segment as domain\n        sb.append(subdomains[0]);\n        sb.append(':');\n        // use remaining segments as properties\n        for (int i = 1; i < subdomains.length; i++) {\n          if (i > 1) {\n            sb.append(',');\n          }\n          sb.append(\"dom\");\n          sb.append(String.valueOf(i));\n          sb.append('=');\n          sb.append(subdomains[i]);\n        }\n        sb.append(','); // separate from other properties\n      } else {\n        sb.append(currentDomain);\n        sb.append(':');\n      }\n    } else {\n      sb.append(currentDomain);\n      sb.append(':');\n    }\n    sb.append(\"reporter=\");\n    sb.append(reporterName);\n    sb.append(',');\n    if (metricInfo != null) {\n      sb.append(\"category=\");\n      sb.append(metricInfo.category.toString());\n      sb.append(\",scope=\");\n      sb.append(metricInfo.scope);\n      // we could also split by type, but don't call it 'type' :)\n      // if (type != null) {\n      //   sb.append(\",class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\",name=\");\n      sb.append(metricInfo.name);\n    } else {\n      // make dotted names into hierarchies\n      String[] path = name.split(\"\\\\.\");\n      for (int i = 0; i < path.length - 1; i++) {\n        if (i > 0) {\n          sb.append(',');\n        }\n        sb.append(\"name\"); sb.append(String.valueOf(i));\n        sb.append('=');\n        sb.append(path[i]);\n      }\n      if (path.length > 1) {\n        sb.append(',');\n      }\n      // split by type\n      // if (type != null) {\n      //   sb.append(\"class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\"name=\");\n      sb.append(path[path.length - 1]);\n    }\n    if (props != null && props.length > 0) {\n      for (int i = 0; i < props.length; i += 2) {\n        if (props[i] == null || props[i].isEmpty()) {\n          continue;\n        }\n        if (props[i + 1] == null || props[i + 1].isEmpty()) {\n          continue;\n        }\n        sb.append(',');\n        sb.append(props[i]);\n        sb.append('=');\n        sb.append(props[i + 1]);\n      }\n    }\n\n    ObjectName objectName;\n\n    try {\n      objectName = new ObjectName(sb.toString());\n    } catch (MalformedObjectNameException e) {\n      throw new RuntimeException(sb.toString(), e);\n    }\n\n    return objectName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/JmxObjectNameFactory#createName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/JmxObjectNameFactory#createName(String,String,String).mjava","sourceNew":"  /**\n   * Create a hierarchical name.\n   *\n   * @param type    metric class, eg. \"counters\", may be null for non-metric MBeans\n   * @param currentDomain  JMX domain\n   * @param name    object name\n   */\n  @Override\n  public ObjectName createName(String type, String currentDomain, String name) {\n    SolrMetricInfo metricInfo = SolrMetricInfo.of(name);\n\n    // It turns out that ObjectName(String) mostly preserves key ordering\n    // as specified in the constructor (except for the 'type' key that ends\n    // up at top level) - unlike ObjectName(String, Map) constructor\n    // that seems to have a mind of its own...\n    StringBuilder sb = new StringBuilder();\n    if (domain.equals(currentDomain)) {\n      if (subdomains != null && subdomains.length > 1) {\n        // use only first segment as domain\n        sb.append(subdomains[0]);\n        sb.append(':');\n        // use remaining segments as properties\n        for (int i = 1; i < subdomains.length; i++) {\n          if (i > 1) {\n            sb.append(',');\n          }\n          sb.append(\"dom\");\n          sb.append(String.valueOf(i));\n          sb.append('=');\n          sb.append(subdomains[i]);\n        }\n        sb.append(','); // separate from other properties\n      } else {\n        sb.append(currentDomain.replaceAll(\":\", \"_\"));\n        sb.append(':');\n      }\n    } else {\n      sb.append(currentDomain);\n      sb.append(':');\n    }\n    sb.append(\"reporter=\");\n    sb.append(reporterName);\n    sb.append(',');\n    if (metricInfo != null) {\n      sb.append(\"category=\");\n      sb.append(metricInfo.category.toString());\n      sb.append(\",scope=\");\n      sb.append(metricInfo.scope);\n      // we could also split by type, but don't call it 'type' :)\n      // if (type != null) {\n      //   sb.append(\",class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\",name=\");\n      sb.append(metricInfo.name);\n    } else {\n      // make dotted names into hierarchies\n      String[] path = name.split(\"\\\\.\");\n      for (int i = 0; i < path.length - 1; i++) {\n        if (i > 0) {\n          sb.append(',');\n        }\n        sb.append(\"name\"); sb.append(String.valueOf(i));\n        sb.append('=');\n        sb.append(path[i]);\n      }\n      if (path.length > 1) {\n        sb.append(',');\n      }\n      // split by type\n      // if (type != null) {\n      //   sb.append(\"class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\"name=\");\n      sb.append(path[path.length - 1]);\n    }\n    if (props != null && props.length > 0) {\n      for (int i = 0; i < props.length; i += 2) {\n        if (props[i] == null || props[i].isEmpty()) {\n          continue;\n        }\n        if (props[i + 1] == null || props[i + 1].isEmpty()) {\n          continue;\n        }\n        sb.append(',');\n        sb.append(props[i]);\n        sb.append('=');\n        sb.append(props[i + 1]);\n      }\n    }\n\n    ObjectName objectName;\n\n    try {\n      objectName = new ObjectName(sb.toString());\n    } catch (MalformedObjectNameException e) {\n      throw new RuntimeException(sb.toString(), e);\n    }\n\n    return objectName;\n  }\n\n","sourceOld":"  /**\n   * Create a hierarchical name.\n   *\n   * @param type    metric class, eg. \"counters\", may be null for non-metric MBeans\n   * @param currentDomain  JMX domain\n   * @param name    object name\n   */\n  @Override\n  public ObjectName createName(String type, String currentDomain, String name) {\n    SolrMetricInfo metricInfo = SolrMetricInfo.of(name);\n\n    // It turns out that ObjectName(String) mostly preserves key ordering\n    // as specified in the constructor (except for the 'type' key that ends\n    // up at top level) - unlike ObjectName(String, Map) constructor\n    // that seems to have a mind of its own...\n    StringBuilder sb = new StringBuilder();\n    if (domain.equals(currentDomain)) {\n      if (subdomains != null && subdomains.length > 1) {\n        // use only first segment as domain\n        sb.append(subdomains[0]);\n        sb.append(':');\n        // use remaining segments as properties\n        for (int i = 1; i < subdomains.length; i++) {\n          if (i > 1) {\n            sb.append(',');\n          }\n          sb.append(\"dom\");\n          sb.append(String.valueOf(i));\n          sb.append('=');\n          sb.append(subdomains[i]);\n        }\n        sb.append(','); // separate from other properties\n      } else {\n        sb.append(currentDomain);\n        sb.append(':');\n      }\n    } else {\n      sb.append(currentDomain);\n      sb.append(':');\n    }\n    sb.append(\"reporter=\");\n    sb.append(reporterName);\n    sb.append(',');\n    if (metricInfo != null) {\n      sb.append(\"category=\");\n      sb.append(metricInfo.category.toString());\n      sb.append(\",scope=\");\n      sb.append(metricInfo.scope);\n      // we could also split by type, but don't call it 'type' :)\n      // if (type != null) {\n      //   sb.append(\",class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\",name=\");\n      sb.append(metricInfo.name);\n    } else {\n      // make dotted names into hierarchies\n      String[] path = name.split(\"\\\\.\");\n      for (int i = 0; i < path.length - 1; i++) {\n        if (i > 0) {\n          sb.append(',');\n        }\n        sb.append(\"name\"); sb.append(String.valueOf(i));\n        sb.append('=');\n        sb.append(path[i]);\n      }\n      if (path.length > 1) {\n        sb.append(',');\n      }\n      // split by type\n      // if (type != null) {\n      //   sb.append(\"class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\"name=\");\n      sb.append(path[path.length - 1]);\n    }\n    if (props != null && props.length > 0) {\n      for (int i = 0; i < props.length; i += 2) {\n        if (props[i] == null || props[i].isEmpty()) {\n          continue;\n        }\n        if (props[i + 1] == null || props[i + 1].isEmpty()) {\n          continue;\n        }\n        sb.append(',');\n        sb.append(props[i]);\n        sb.append('=');\n        sb.append(props[i + 1]);\n      }\n    }\n\n    ObjectName objectName;\n\n    try {\n      objectName = new ObjectName(sb.toString());\n    } catch (MalformedObjectNameException e) {\n      throw new RuntimeException(sb.toString(), e);\n    }\n\n    return objectName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/JmxObjectNameFactory#createName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/JmxObjectNameFactory#createName(String,String,String).mjava","sourceNew":"  /**\n   * Create a hierarchical name.\n   *\n   * @param type    metric class, eg. \"counters\", may be null for non-metric MBeans\n   * @param currentDomain  JMX domain\n   * @param name    object name\n   */\n  @Override\n  public ObjectName createName(String type, String currentDomain, String name) {\n    SolrMetricInfo metricInfo = SolrMetricInfo.of(name);\n    String safeName = metricInfo != null ? metricInfo.name : name;\n    safeName = safeName.replaceAll(\":\", \"_\");\n    // It turns out that ObjectName(String) mostly preserves key ordering\n    // as specified in the constructor (except for the 'type' key that ends\n    // up at top level) - unlike ObjectName(String, Map) constructor\n    // that seems to have a mind of its own...\n    StringBuilder sb = new StringBuilder();\n    if (domain.equals(currentDomain)) {\n      if (subdomains != null && subdomains.length > 1) {\n        // use only first segment as domain\n        sb.append(subdomains[0]);\n        sb.append(':');\n        // use remaining segments as properties\n        for (int i = 1; i < subdomains.length; i++) {\n          if (i > 1) {\n            sb.append(',');\n          }\n          sb.append(\"dom\");\n          sb.append(String.valueOf(i));\n          sb.append('=');\n          sb.append(subdomains[i]);\n        }\n        sb.append(','); // separate from other properties\n      } else {\n        sb.append(currentDomain.replaceAll(\":\", \"_\"));\n        sb.append(':');\n      }\n    } else {\n      sb.append(currentDomain);\n      sb.append(':');\n    }\n    if (props != null && props.length > 0) {\n      boolean added = false;\n      for (int i = 0; i < props.length; i += 2) {\n        if (props[i] == null || props[i].isEmpty()) {\n          continue;\n        }\n        if (props[i + 1] == null || props[i + 1].isEmpty()) {\n          continue;\n        }\n        sb.append(',');\n        sb.append(props[i]);\n        sb.append('=');\n        sb.append(props[i + 1]);\n        added = true;\n      }\n      if (added) {\n        sb.append(',');\n      }\n    }\n    if (metricInfo != null) {\n      sb.append(\"category=\");\n      sb.append(metricInfo.category.toString());\n      if (metricInfo.scope != null) {\n        sb.append(\",scope=\");\n        sb.append(metricInfo.scope);\n      }\n      // we could also split by type, but don't call it 'type' :)\n      // if (type != null) {\n      //   sb.append(\",class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\",name=\");\n      sb.append(safeName);\n    } else {\n      // make dotted names into hierarchies\n      String[] path = safeName.split(\"\\\\.\");\n      for (int i = 0; i < path.length - 1; i++) {\n        if (i > 0) {\n          sb.append(',');\n        }\n        sb.append(\"name\"); sb.append(String.valueOf(i));\n        sb.append('=');\n        sb.append(path[i]);\n      }\n      if (path.length > 1) {\n        sb.append(',');\n      }\n      // split by type\n      // if (type != null) {\n      //   sb.append(\"class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\"name=\");\n      sb.append(path[path.length - 1]);\n    }\n\n    ObjectName objectName;\n\n    try {\n      objectName = new ObjectName(sb.toString());\n    } catch (MalformedObjectNameException e) {\n      throw new RuntimeException(sb.toString(), e);\n    }\n\n    return objectName;\n  }\n\n","sourceOld":"  /**\n   * Create a hierarchical name.\n   *\n   * @param type    metric class, eg. \"counters\", may be null for non-metric MBeans\n   * @param currentDomain  JMX domain\n   * @param name    object name\n   */\n  @Override\n  public ObjectName createName(String type, String currentDomain, String name) {\n    SolrMetricInfo metricInfo = SolrMetricInfo.of(name);\n\n    // It turns out that ObjectName(String) mostly preserves key ordering\n    // as specified in the constructor (except for the 'type' key that ends\n    // up at top level) - unlike ObjectName(String, Map) constructor\n    // that seems to have a mind of its own...\n    StringBuilder sb = new StringBuilder();\n    if (domain.equals(currentDomain)) {\n      if (subdomains != null && subdomains.length > 1) {\n        // use only first segment as domain\n        sb.append(subdomains[0]);\n        sb.append(':');\n        // use remaining segments as properties\n        for (int i = 1; i < subdomains.length; i++) {\n          if (i > 1) {\n            sb.append(',');\n          }\n          sb.append(\"dom\");\n          sb.append(String.valueOf(i));\n          sb.append('=');\n          sb.append(subdomains[i]);\n        }\n        sb.append(','); // separate from other properties\n      } else {\n        sb.append(currentDomain.replaceAll(\":\", \"_\"));\n        sb.append(':');\n      }\n    } else {\n      sb.append(currentDomain);\n      sb.append(':');\n    }\n    sb.append(\"reporter=\");\n    sb.append(reporterName);\n    sb.append(',');\n    if (metricInfo != null) {\n      sb.append(\"category=\");\n      sb.append(metricInfo.category.toString());\n      sb.append(\",scope=\");\n      sb.append(metricInfo.scope);\n      // we could also split by type, but don't call it 'type' :)\n      // if (type != null) {\n      //   sb.append(\",class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\",name=\");\n      sb.append(metricInfo.name);\n    } else {\n      // make dotted names into hierarchies\n      String[] path = name.split(\"\\\\.\");\n      for (int i = 0; i < path.length - 1; i++) {\n        if (i > 0) {\n          sb.append(',');\n        }\n        sb.append(\"name\"); sb.append(String.valueOf(i));\n        sb.append('=');\n        sb.append(path[i]);\n      }\n      if (path.length > 1) {\n        sb.append(',');\n      }\n      // split by type\n      // if (type != null) {\n      //   sb.append(\"class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\"name=\");\n      sb.append(path[path.length - 1]);\n    }\n    if (props != null && props.length > 0) {\n      for (int i = 0; i < props.length; i += 2) {\n        if (props[i] == null || props[i].isEmpty()) {\n          continue;\n        }\n        if (props[i + 1] == null || props[i + 1].isEmpty()) {\n          continue;\n        }\n        sb.append(',');\n        sb.append(props[i]);\n        sb.append('=');\n        sb.append(props[i + 1]);\n      }\n    }\n\n    ObjectName objectName;\n\n    try {\n      objectName = new ObjectName(sb.toString());\n    } catch (MalformedObjectNameException e) {\n      throw new RuntimeException(sb.toString(), e);\n    }\n\n    return objectName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/JmxObjectNameFactory#createName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/JmxObjectNameFactory#createName(String,String,String).mjava","sourceNew":"  /**\n   * Create a hierarchical name.\n   *\n   * @param type    metric class, eg. \"counters\", may be null for non-metric MBeans\n   * @param currentDomain  JMX domain\n   * @param name    object name\n   */\n  @Override\n  public ObjectName createName(String type, String currentDomain, String name) {\n    SolrMetricInfo metricInfo = SolrMetricInfo.of(name);\n    String safeName = metricInfo != null ? metricInfo.name : name;\n    safeName = safeName.replaceAll(\":\", \"_\");\n    // It turns out that ObjectName(String) mostly preserves key ordering\n    // as specified in the constructor (except for the 'type' key that ends\n    // up at top level) - unlike ObjectName(String, Map) constructor\n    // that seems to have a mind of its own...\n    StringBuilder sb = new StringBuilder();\n    if (domain.equals(currentDomain)) {\n      if (subdomains != null && subdomains.length > 1) {\n        // use only first segment as domain\n        sb.append(subdomains[0]);\n        sb.append(':');\n        // use remaining segments as properties\n        for (int i = 1; i < subdomains.length; i++) {\n          if (i > 1) {\n            sb.append(',');\n          }\n          sb.append(\"dom\");\n          sb.append(String.valueOf(i));\n          sb.append('=');\n          sb.append(subdomains[i]);\n        }\n        sb.append(','); // separate from other properties\n      } else {\n        sb.append(currentDomain.replaceAll(\":\", \"_\"));\n        sb.append(':');\n      }\n    } else {\n      sb.append(currentDomain);\n      sb.append(':');\n    }\n    if (props != null && props.length > 0) {\n      boolean added = false;\n      for (int i = 0; i < props.length; i += 2) {\n        if (props[i] == null || props[i].isEmpty()) {\n          continue;\n        }\n        if (props[i + 1] == null || props[i + 1].isEmpty()) {\n          continue;\n        }\n        sb.append(',');\n        sb.append(props[i]);\n        sb.append('=');\n        sb.append(props[i + 1]);\n        added = true;\n      }\n      if (added) {\n        sb.append(',');\n      }\n    }\n    if (metricInfo != null) {\n      sb.append(\"category=\");\n      sb.append(metricInfo.category.toString());\n      if (metricInfo.scope != null) {\n        sb.append(\",scope=\");\n        sb.append(metricInfo.scope);\n      }\n      // we could also split by type, but don't call it 'type' :)\n      // if (type != null) {\n      //   sb.append(\",class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\",name=\");\n      sb.append(safeName);\n    } else {\n      // make dotted names into hierarchies\n      String[] path = safeName.split(\"\\\\.\");\n      for (int i = 0; i < path.length - 1; i++) {\n        if (i > 0) {\n          sb.append(',');\n        }\n        sb.append(\"name\"); sb.append(String.valueOf(i));\n        sb.append('=');\n        sb.append(path[i]);\n      }\n      if (path.length > 1) {\n        sb.append(',');\n      }\n      // split by type\n      // if (type != null) {\n      //   sb.append(\"class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\"name=\");\n      sb.append(path[path.length - 1]);\n    }\n\n    ObjectName objectName;\n\n    try {\n      objectName = new ObjectName(sb.toString());\n    } catch (MalformedObjectNameException e) {\n      throw new RuntimeException(sb.toString(), e);\n    }\n\n    return objectName;\n  }\n\n","sourceOld":"  /**\n   * Create a hierarchical name.\n   *\n   * @param type    metric class, eg. \"counters\", may be null for non-metric MBeans\n   * @param currentDomain  JMX domain\n   * @param name    object name\n   */\n  @Override\n  public ObjectName createName(String type, String currentDomain, String name) {\n    SolrMetricInfo metricInfo = SolrMetricInfo.of(name);\n\n    // It turns out that ObjectName(String) mostly preserves key ordering\n    // as specified in the constructor (except for the 'type' key that ends\n    // up at top level) - unlike ObjectName(String, Map) constructor\n    // that seems to have a mind of its own...\n    StringBuilder sb = new StringBuilder();\n    if (domain.equals(currentDomain)) {\n      if (subdomains != null && subdomains.length > 1) {\n        // use only first segment as domain\n        sb.append(subdomains[0]);\n        sb.append(':');\n        // use remaining segments as properties\n        for (int i = 1; i < subdomains.length; i++) {\n          if (i > 1) {\n            sb.append(',');\n          }\n          sb.append(\"dom\");\n          sb.append(String.valueOf(i));\n          sb.append('=');\n          sb.append(subdomains[i]);\n        }\n        sb.append(','); // separate from other properties\n      } else {\n        sb.append(currentDomain.replaceAll(\":\", \"_\"));\n        sb.append(':');\n      }\n    } else {\n      sb.append(currentDomain);\n      sb.append(':');\n    }\n    sb.append(\"reporter=\");\n    sb.append(reporterName);\n    sb.append(',');\n    if (metricInfo != null) {\n      sb.append(\"category=\");\n      sb.append(metricInfo.category.toString());\n      sb.append(\",scope=\");\n      sb.append(metricInfo.scope);\n      // we could also split by type, but don't call it 'type' :)\n      // if (type != null) {\n      //   sb.append(\",class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\",name=\");\n      sb.append(metricInfo.name);\n    } else {\n      // make dotted names into hierarchies\n      String[] path = name.split(\"\\\\.\");\n      for (int i = 0; i < path.length - 1; i++) {\n        if (i > 0) {\n          sb.append(',');\n        }\n        sb.append(\"name\"); sb.append(String.valueOf(i));\n        sb.append('=');\n        sb.append(path[i]);\n      }\n      if (path.length > 1) {\n        sb.append(',');\n      }\n      // split by type\n      // if (type != null) {\n      //   sb.append(\"class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\"name=\");\n      sb.append(path[path.length - 1]);\n    }\n    if (props != null && props.length > 0) {\n      for (int i = 0; i < props.length; i += 2) {\n        if (props[i] == null || props[i].isEmpty()) {\n          continue;\n        }\n        if (props[i + 1] == null || props[i + 1].isEmpty()) {\n          continue;\n        }\n        sb.append(',');\n        sb.append(props[i]);\n        sb.append('=');\n        sb.append(props[i + 1]);\n      }\n    }\n\n    ObjectName objectName;\n\n    try {\n      objectName = new ObjectName(sb.toString());\n    } catch (MalformedObjectNameException e) {\n      throw new RuntimeException(sb.toString(), e);\n    }\n\n    return objectName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"122c889ac8944e19f984ba4306b02a8742e914a7","date":1502707353,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxObjectNameFactory#createName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/JmxObjectNameFactory#createName(String,String,String).mjava","sourceNew":"  /**\n   * Create a hierarchical name.\n   *\n   * @param type    metric class, eg. \"counters\", may be null for non-metric MBeans\n   * @param currentDomain  JMX domain\n   * @param name    object name\n   */\n  @Override\n  public ObjectName createName(String type, String currentDomain, String name) {\n    SolrMetricInfo metricInfo = SolrMetricInfo.of(name);\n    String safeName = metricInfo != null ? metricInfo.name : name;\n    safeName = safeName.replaceAll(\":\", \"_\");\n    // It turns out that ObjectName(String) mostly preserves key ordering\n    // as specified in the constructor (except for the 'type' key that ends\n    // up at top level) - unlike ObjectName(String, Map) constructor\n    // that seems to have a mind of its own...\n    StringBuilder sb = new StringBuilder();\n    if (domain.equals(currentDomain)) {\n      if (subdomains != null && subdomains.length > 1) {\n        // use only first segment as domain\n        sb.append(subdomains[0]);\n        sb.append(':');\n        // use remaining segments as properties\n        for (int i = 1; i < subdomains.length; i++) {\n          if (i > 1) {\n            sb.append(',');\n          }\n          sb.append(\"dom\");\n          sb.append(String.valueOf(i));\n          sb.append('=');\n          sb.append(subdomains[i]);\n        }\n        sb.append(','); // separate from other properties\n      } else {\n        sb.append(currentDomain.replaceAll(\":\", \"_\"));\n        sb.append(':');\n      }\n    } else {\n      sb.append(currentDomain);\n      sb.append(':');\n    }\n    if (props != null && props.length > 0) {\n      boolean added = false;\n      for (int i = 0; i < props.length; i += 2) {\n        if (props[i] == null || props[i].isEmpty()) {\n          continue;\n        }\n        if (props[i + 1] == null || props[i + 1].isEmpty()) {\n          continue;\n        }\n        sb.append(',');\n        sb.append(props[i]);\n        sb.append('=');\n        sb.append(props[i + 1]);\n        added = true;\n      }\n      if (added) {\n        sb.append(',');\n      }\n    }\n    if (metricInfo != null) {\n      sb.append(\"category=\");\n      sb.append(metricInfo.category.toString());\n      if (metricInfo.scope != null) {\n        sb.append(\",scope=\");\n        sb.append(metricInfo.scope);\n      }\n      // we could also split by type, but don't call it 'type' :)\n      // if (type != null) {\n      //   sb.append(\",class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\",name=\");\n      sb.append(safeName);\n    } else {\n      // make dotted names into hierarchies\n      String[] path = safeName.split(\"\\\\.\");\n      for (int i = 0; i < path.length - 1; i++) {\n        if (i > 0) {\n          sb.append(',');\n        }\n        sb.append(\"name\"); sb.append(String.valueOf(i));\n        sb.append('=');\n        sb.append(path[i]);\n      }\n      if (path.length > 1) {\n        sb.append(',');\n      }\n      // split by type\n      // if (type != null) {\n      //   sb.append(\"class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\"name=\");\n      sb.append(path[path.length - 1]);\n    }\n\n    ObjectName objectName;\n\n    try {\n      objectName = new ObjectName(sb.toString());\n    } catch (MalformedObjectNameException e) {\n      throw new RuntimeException(sb.toString(), e);\n    }\n\n    return objectName;\n  }\n\n","sourceOld":"  /**\n   * Create a hierarchical name.\n   *\n   * @param type    metric class, eg. \"counters\", may be null for non-metric MBeans\n   * @param currentDomain  JMX domain\n   * @param name    object name\n   */\n  @Override\n  public ObjectName createName(String type, String currentDomain, String name) {\n    SolrMetricInfo metricInfo = SolrMetricInfo.of(name);\n    String safeName = metricInfo != null ? metricInfo.name : name;\n    safeName = safeName.replaceAll(\":\", \"_\");\n    // It turns out that ObjectName(String) mostly preserves key ordering\n    // as specified in the constructor (except for the 'type' key that ends\n    // up at top level) - unlike ObjectName(String, Map) constructor\n    // that seems to have a mind of its own...\n    StringBuilder sb = new StringBuilder();\n    if (domain.equals(currentDomain)) {\n      if (subdomains != null && subdomains.length > 1) {\n        // use only first segment as domain\n        sb.append(subdomains[0]);\n        sb.append(':');\n        // use remaining segments as properties\n        for (int i = 1; i < subdomains.length; i++) {\n          if (i > 1) {\n            sb.append(',');\n          }\n          sb.append(\"dom\");\n          sb.append(String.valueOf(i));\n          sb.append('=');\n          sb.append(subdomains[i]);\n        }\n        sb.append(','); // separate from other properties\n      } else {\n        sb.append(currentDomain.replaceAll(\":\", \"_\"));\n        sb.append(':');\n      }\n    } else {\n      sb.append(currentDomain);\n      sb.append(':');\n    }\n    if (props != null && props.length > 0) {\n      boolean added = false;\n      for (int i = 0; i < props.length; i += 2) {\n        if (props[i] == null || props[i].isEmpty()) {\n          continue;\n        }\n        if (props[i + 1] == null || props[i + 1].isEmpty()) {\n          continue;\n        }\n        sb.append(',');\n        sb.append(props[i]);\n        sb.append('=');\n        sb.append(props[i + 1]);\n        added = true;\n      }\n      if (added) {\n        sb.append(',');\n      }\n    }\n    if (metricInfo != null) {\n      sb.append(\"category=\");\n      sb.append(metricInfo.category.toString());\n      if (metricInfo.scope != null) {\n        sb.append(\",scope=\");\n        sb.append(metricInfo.scope);\n      }\n      // we could also split by type, but don't call it 'type' :)\n      // if (type != null) {\n      //   sb.append(\",class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\",name=\");\n      sb.append(safeName);\n    } else {\n      // make dotted names into hierarchies\n      String[] path = safeName.split(\"\\\\.\");\n      for (int i = 0; i < path.length - 1; i++) {\n        if (i > 0) {\n          sb.append(',');\n        }\n        sb.append(\"name\"); sb.append(String.valueOf(i));\n        sb.append('=');\n        sb.append(path[i]);\n      }\n      if (path.length > 1) {\n        sb.append(',');\n      }\n      // split by type\n      // if (type != null) {\n      //   sb.append(\"class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\"name=\");\n      sb.append(path[path.length - 1]);\n    }\n\n    ObjectName objectName;\n\n    try {\n      objectName = new ObjectName(sb.toString());\n    } catch (MalformedObjectNameException e) {\n      throw new RuntimeException(sb.toString(), e);\n    }\n\n    return objectName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00aac053fdd75193eb8b6d45b64c26c3b586d5b","date":1503143818,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxObjectNameFactory#createName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/JmxObjectNameFactory#createName(String,String,String).mjava","sourceNew":"  /**\n   * Create a hierarchical name.\n   *\n   * @param type    metric class, eg. \"counters\", may be null for non-metric MBeans\n   * @param currentDomain  JMX domain\n   * @param name    object name\n   */\n  @Override\n  public ObjectName createName(String type, String currentDomain, String name) {\n    SolrMetricInfo metricInfo = SolrMetricInfo.of(name);\n    String safeName = metricInfo != null ? metricInfo.name : name;\n    safeName = safeName.replaceAll(\":\", \"_\");\n    // It turns out that ObjectName(String) mostly preserves key ordering\n    // as specified in the constructor (except for the 'type' key that ends\n    // up at top level) - unlike ObjectName(String, Map) constructor\n    // that seems to have a mind of its own...\n    StringBuilder sb = new StringBuilder();\n    if (domain.equals(currentDomain)) {\n      if (subdomains != null && subdomains.length > 1) {\n        // use only first segment as domain\n        sb.append(subdomains[0]);\n        sb.append(':');\n        // use remaining segments as properties\n        for (int i = 1; i < subdomains.length; i++) {\n          if (i > 1) {\n            sb.append(',');\n          }\n          sb.append(\"dom\");\n          sb.append(String.valueOf(i));\n          sb.append('=');\n          sb.append(subdomains[i]);\n        }\n        sb.append(','); // separate from other properties\n      } else {\n        sb.append(currentDomain.replaceAll(\":\", \"_\"));\n        sb.append(':');\n      }\n    } else {\n      sb.append(currentDomain);\n      sb.append(':');\n    }\n    if (props != null && props.length > 0) {\n      boolean added = false;\n      for (int i = 0; i < props.length; i += 2) {\n        if (props[i] == null || props[i].isEmpty()) {\n          continue;\n        }\n        if (props[i + 1] == null || props[i + 1].isEmpty()) {\n          continue;\n        }\n        sb.append(',');\n        sb.append(props[i]);\n        sb.append('=');\n        sb.append(props[i + 1]);\n        added = true;\n      }\n      if (added) {\n        sb.append(',');\n      }\n    }\n    if (metricInfo != null) {\n      sb.append(\"category=\");\n      sb.append(metricInfo.category.toString());\n      if (metricInfo.scope != null) {\n        sb.append(\",scope=\");\n        sb.append(metricInfo.scope);\n      }\n      // we could also split by type, but don't call it 'type' :)\n      // if (type != null) {\n      //   sb.append(\",class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\",name=\");\n      sb.append(safeName);\n    } else {\n      // make dotted names into hierarchies\n      String[] path = safeName.split(\"\\\\.\");\n      for (int i = 0; i < path.length - 1; i++) {\n        if (i > 0) {\n          sb.append(',');\n        }\n        sb.append(\"name\"); sb.append(String.valueOf(i));\n        sb.append('=');\n        sb.append(path[i]);\n      }\n      if (path.length > 1) {\n        sb.append(',');\n      }\n      // split by type\n      // if (type != null) {\n      //   sb.append(\"class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\"name=\");\n      sb.append(path[path.length - 1]);\n    }\n\n    ObjectName objectName;\n\n    try {\n      objectName = new ObjectName(sb.toString());\n    } catch (MalformedObjectNameException e) {\n      throw new RuntimeException(sb.toString(), e);\n    }\n\n    return objectName;\n  }\n\n","sourceOld":"  /**\n   * Create a hierarchical name.\n   *\n   * @param type    metric class, eg. \"counters\", may be null for non-metric MBeans\n   * @param currentDomain  JMX domain\n   * @param name    object name\n   */\n  @Override\n  public ObjectName createName(String type, String currentDomain, String name) {\n    SolrMetricInfo metricInfo = SolrMetricInfo.of(name);\n    String safeName = metricInfo != null ? metricInfo.name : name;\n    safeName = safeName.replaceAll(\":\", \"_\");\n    // It turns out that ObjectName(String) mostly preserves key ordering\n    // as specified in the constructor (except for the 'type' key that ends\n    // up at top level) - unlike ObjectName(String, Map) constructor\n    // that seems to have a mind of its own...\n    StringBuilder sb = new StringBuilder();\n    if (domain.equals(currentDomain)) {\n      if (subdomains != null && subdomains.length > 1) {\n        // use only first segment as domain\n        sb.append(subdomains[0]);\n        sb.append(':');\n        // use remaining segments as properties\n        for (int i = 1; i < subdomains.length; i++) {\n          if (i > 1) {\n            sb.append(',');\n          }\n          sb.append(\"dom\");\n          sb.append(String.valueOf(i));\n          sb.append('=');\n          sb.append(subdomains[i]);\n        }\n        sb.append(','); // separate from other properties\n      } else {\n        sb.append(currentDomain.replaceAll(\":\", \"_\"));\n        sb.append(':');\n      }\n    } else {\n      sb.append(currentDomain);\n      sb.append(':');\n    }\n    if (props != null && props.length > 0) {\n      boolean added = false;\n      for (int i = 0; i < props.length; i += 2) {\n        if (props[i] == null || props[i].isEmpty()) {\n          continue;\n        }\n        if (props[i + 1] == null || props[i + 1].isEmpty()) {\n          continue;\n        }\n        sb.append(',');\n        sb.append(props[i]);\n        sb.append('=');\n        sb.append(props[i + 1]);\n        added = true;\n      }\n      if (added) {\n        sb.append(',');\n      }\n    }\n    if (metricInfo != null) {\n      sb.append(\"category=\");\n      sb.append(metricInfo.category.toString());\n      if (metricInfo.scope != null) {\n        sb.append(\",scope=\");\n        sb.append(metricInfo.scope);\n      }\n      // we could also split by type, but don't call it 'type' :)\n      // if (type != null) {\n      //   sb.append(\",class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\",name=\");\n      sb.append(safeName);\n    } else {\n      // make dotted names into hierarchies\n      String[] path = safeName.split(\"\\\\.\");\n      for (int i = 0; i < path.length - 1; i++) {\n        if (i > 0) {\n          sb.append(',');\n        }\n        sb.append(\"name\"); sb.append(String.valueOf(i));\n        sb.append('=');\n        sb.append(path[i]);\n      }\n      if (path.length > 1) {\n        sb.append(',');\n      }\n      // split by type\n      // if (type != null) {\n      //   sb.append(\"class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\"name=\");\n      sb.append(path[path.length - 1]);\n    }\n\n    ObjectName objectName;\n\n    try {\n      objectName = new ObjectName(sb.toString());\n    } catch (MalformedObjectNameException e) {\n      throw new RuntimeException(sb.toString(), e);\n    }\n\n    return objectName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","122c889ac8944e19f984ba4306b02a8742e914a7"],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"122c889ac8944e19f984ba4306b02a8742e914a7":["816521ebaad5add9cb96bb88c577394e2938c40b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"816521ebaad5add9cb96bb88c577394e2938c40b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["122c889ac8944e19f984ba4306b02a8742e914a7"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":[],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["073f1aa70444ec64f3e216816af2a3b43fa38fe7","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"122c889ac8944e19f984ba4306b02a8742e914a7":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["122c889ac8944e19f984ba4306b02a8742e914a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}