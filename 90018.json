{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, StringField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, StringField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random());\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, StringField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random());\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random(), 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, StringField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random());\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random());\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random(), 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random());\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, StringField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random());\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random(), 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random());\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random());\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, TestUtil.nextInt(random(), 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random());\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random());\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random(), 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random());\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random());\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, TestUtil.nextInt(random(), 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random());\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random());\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, TestUtil.nextInt(random(), 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random());\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random());\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, TestUtil.nextInt(random(), 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random());\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random());\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, TestUtil.nextInt(random(), 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random());\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random());\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, TestUtil.nextInt(random(), 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random());\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random());\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, TestUtil.nextInt(random(), 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random());\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random());\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, TestUtil.nextInt(random(), 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete id=\" + ids.get(upto));\n        }\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now open reader\");\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random());\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random());\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, TestUtil.nextInt(random(), 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random());\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random());\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, TestUtil.nextInt(random(), 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete id=\" + ids.get(upto));\n        }\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now open reader\");\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random());\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random());\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, TestUtil.nextInt(random(), 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random());\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random());\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, TestUtil.nextInt(random(), 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete id=\" + ids.get(upto));\n        }\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now open reader\");\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random());\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random());\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, TestUtil.nextInt(random(), 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["d0ef034a4f10871667ae75181537775ddcf8ade4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["d0ef034a4f10871667ae75181537775ddcf8ade4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}