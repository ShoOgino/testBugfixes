{"path":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","sourceNew":"  public void testLoadRules() throws Exception {\n    Map<String, String> args = new HashMap<String, String>();\n    args.put( \"synonyms\", \"something.txt\" );\n    SynonymFilterFactory ff = new SynonymFilterFactory();\n    ff.init(args);\n    ff.inform( new ResourceLoader() {\n      @Override\n      public List<String> getLines(String resource) throws IOException {\n        if( !\"something.txt\".equals(resource) ) {\n          throw new RuntimeException( \"should not get a differnt resource\" );\n        }\n        List<String> rules = new ArrayList<String>();\n        rules.add( \"a,b\" );\n        return rules;\n      }\n\n      @Override\n      public Object newInstance(String cname, String... subpackages) {\n        throw new RuntimeException(\"stub\");\n      }\n\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        throw new RuntimeException(\"stub\");\n      }\n    });\n    \n    SynonymMap synMap = ff.getSynonymMap();\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","sourceOld":"  public void testLoadRules() throws Exception {\n    Map<String, String> args = new HashMap<String, String>();\n    args.put( \"synonyms\", \"something.txt\" );\n    SynonymFilterFactory ff = new SynonymFilterFactory();\n    ff.init(args);\n    ff.inform( new ResourceLoader() {\n      @Override\n      public List<String> getLines(String resource) throws IOException {\n        if( !\"something.txt\".equals(resource) ) {\n          throw new RuntimeException( \"should not get a differnt resource\" );\n        }\n        List<String> rules = new ArrayList<String>();\n        rules.add( \"a,b\" );\n        return rules;\n      }\n\n      @Override\n      public Object newInstance(String cname, String... subpackages) {\n        throw new RuntimeException(\"stub\");\n      }\n\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        throw new RuntimeException(\"stub\");\n      }\n    });\n    \n    SynonymMap synMap = ff.getSynonymMap();\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","sourceNew":"  public void testLoadRules() throws Exception {\n    Map<String, String> args = new HashMap<String, String>();\n    args.put( \"synonyms\", \"something.txt\" );\n    SynonymFilterFactory ff = new SynonymFilterFactory();\n    ff.init(args);\n    ff.inform( new ResourceLoader() {\n      @Override\n      public List<String> getLines(String resource) throws IOException {\n        if( !\"something.txt\".equals(resource) ) {\n          throw new RuntimeException( \"should not get a differnt resource\" );\n        }\n        List<String> rules = new ArrayList<String>();\n        rules.add( \"a,b\" );\n        return rules;\n      }\n\n      @Override\n      public Object newInstance(String cname, String... subpackages) {\n        throw new RuntimeException(\"stub\");\n      }\n\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        throw new RuntimeException(\"stub\");\n      }\n    });\n    \n    SynonymMap synMap = ff.getSynonymMap();\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","sourceOld":"  public void testLoadRules() throws Exception {\n    Map<String, String> args = new HashMap<String, String>();\n    args.put( \"synonyms\", \"something.txt\" );\n    SynonymFilterFactory ff = new SynonymFilterFactory();\n    ff.init(args);\n    ff.inform( new ResourceLoader() {\n      @Override\n      public List<String> getLines(String resource) throws IOException {\n        if( !\"something.txt\".equals(resource) ) {\n          throw new RuntimeException( \"should not get a differnt resource\" );\n        }\n        List<String> rules = new ArrayList<String>();\n        rules.add( \"a,b\" );\n        return rules;\n      }\n\n      @Override\n      public Object newInstance(String cname, String... subpackages) {\n        throw new RuntimeException(\"stub\");\n      }\n\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        throw new RuntimeException(\"stub\");\n      }\n    });\n    \n    SynonymMap synMap = ff.getSynonymMap();\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","sourceNew":"  public void testLoadRules() throws Exception {\n    Map<String, String> args = new HashMap<String, String>();\n    args.put( \"synonyms\", \"something.txt\" );\n    SynonymFilterFactory ff = new SynonymFilterFactory();\n    ff.init(args);\n    ff.inform( new ResourceLoader() {\n      @Override\n      public List<String> getLines(String resource) throws IOException {\n        if( !\"something.txt\".equals(resource) ) {\n          throw new RuntimeException( \"should not get a differnt resource\" );\n        }\n        List<String> rules = new ArrayList<String>();\n        rules.add( \"a,b\" );\n        return rules;\n      }\n\n      @Override\n      public Object newInstance(String cname, String... subpackages) {\n        throw new RuntimeException(\"stub\");\n      }\n\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        throw new RuntimeException(\"stub\");\n      }\n    });\n    \n    SynonymMap synMap = ff.getSynonymMap();\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","sourceOld":"  public void testLoadRules() throws Exception {\n    Map<String, String> args = new HashMap<String, String>();\n    args.put( \"synonyms\", \"something.txt\" );\n    SynonymFilterFactory ff = new SynonymFilterFactory();\n    ff.init(args);\n    ff.inform( new ResourceLoader() {\n      @Override\n      public List<String> getLines(String resource) throws IOException {\n        if( !\"something.txt\".equals(resource) ) {\n          throw new RuntimeException( \"should not get a differnt resource\" );\n        }\n        List<String> rules = new ArrayList<String>();\n        rules.add( \"a,b\" );\n        return rules;\n      }\n\n      @Override\n      public Object newInstance(String cname, String... subpackages) {\n        throw new RuntimeException(\"stub\");\n      }\n\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        throw new RuntimeException(\"stub\");\n      }\n    });\n    \n    SynonymMap synMap = ff.getSynonymMap();\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","sourceNew":"  public void testLoadRules() throws Exception {\n    Map<String, String> args = new HashMap<String, String>();\n    args.put( \"synonyms\", \"something.txt\" );\n    SlowSynonymFilterFactory ff = new SlowSynonymFilterFactory();\n    ff.init(args);\n    ff.inform( new ResourceLoader() {\n      @Override\n      public List<String> getLines(String resource) throws IOException {\n        if( !\"something.txt\".equals(resource) ) {\n          throw new RuntimeException( \"should not get a differnt resource\" );\n        }\n        List<String> rules = new ArrayList<String>();\n        rules.add( \"a,b\" );\n        return rules;\n      }\n\n      @Override\n      public Object newInstance(String cname, String... subpackages) {\n        throw new RuntimeException(\"stub\");\n      }\n\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        throw new RuntimeException(\"stub\");\n      }\n    });\n    \n    SlowSynonymMap synMap = ff.getSynonymMap();\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","sourceOld":"  public void testLoadRules() throws Exception {\n    Map<String, String> args = new HashMap<String, String>();\n    args.put( \"synonyms\", \"something.txt\" );\n    SynonymFilterFactory ff = new SynonymFilterFactory();\n    ff.init(args);\n    ff.inform( new ResourceLoader() {\n      @Override\n      public List<String> getLines(String resource) throws IOException {\n        if( !\"something.txt\".equals(resource) ) {\n          throw new RuntimeException( \"should not get a differnt resource\" );\n        }\n        List<String> rules = new ArrayList<String>();\n        rules.add( \"a,b\" );\n        return rules;\n      }\n\n      @Override\n      public Object newInstance(String cname, String... subpackages) {\n        throw new RuntimeException(\"stub\");\n      }\n\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        throw new RuntimeException(\"stub\");\n      }\n    });\n    \n    SynonymMap synMap = ff.getSynonymMap();\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","date":1334628185,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","sourceNew":"  public void testLoadRules() throws Exception {\n    Map<String, String> args = new HashMap<String, String>();\n    args.put( \"synonyms\", \"something.txt\" );\n    SlowSynonymFilterFactory ff = new SlowSynonymFilterFactory();\n    ff.init(args);\n    ff.inform( new ResourceLoader() {\n      @Override\n      public List<String> getLines(String resource) throws IOException {\n        if( !\"something.txt\".equals(resource) ) {\n          throw new RuntimeException( \"should not get a differnt resource\" );\n        }\n        List<String> rules = new ArrayList<String>();\n        rules.add( \"a,b\" );\n        return rules;\n      }\n\n      @Override\n      public <T> T newInstance(String cname, Class<T> expectedType, String... subpackages) {\n        throw new RuntimeException(\"stub\");\n      }\n\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        throw new RuntimeException(\"stub\");\n      }\n    });\n    \n    SlowSynonymMap synMap = ff.getSynonymMap();\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","sourceOld":"  public void testLoadRules() throws Exception {\n    Map<String, String> args = new HashMap<String, String>();\n    args.put( \"synonyms\", \"something.txt\" );\n    SlowSynonymFilterFactory ff = new SlowSynonymFilterFactory();\n    ff.init(args);\n    ff.inform( new ResourceLoader() {\n      @Override\n      public List<String> getLines(String resource) throws IOException {\n        if( !\"something.txt\".equals(resource) ) {\n          throw new RuntimeException( \"should not get a differnt resource\" );\n        }\n        List<String> rules = new ArrayList<String>();\n        rules.add( \"a,b\" );\n        return rules;\n      }\n\n      @Override\n      public Object newInstance(String cname, String... subpackages) {\n        throw new RuntimeException(\"stub\");\n      }\n\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        throw new RuntimeException(\"stub\");\n      }\n    });\n    \n    SlowSynonymMap synMap = ff.getSynonymMap();\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","sourceNew":null,"sourceOld":"  public void testLoadRules() throws Exception {\n    Map<String, String> args = new HashMap<String, String>();\n    args.put( \"synonyms\", \"something.txt\" );\n    SlowSynonymFilterFactory ff = new SlowSynonymFilterFactory();\n    ff.init(args);\n    ff.inform( new ResourceLoader() {\n      @Override\n      public List<String> getLines(String resource) throws IOException {\n        if( !\"something.txt\".equals(resource) ) {\n          throw new RuntimeException( \"should not get a differnt resource\" );\n        }\n        List<String> rules = new ArrayList<String>();\n        rules.add( \"a,b\" );\n        return rules;\n      }\n\n      @Override\n      public <T> T newInstance(String cname, Class<T> expectedType, String... subpackages) {\n        throw new RuntimeException(\"stub\");\n      }\n\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        throw new RuntimeException(\"stub\");\n      }\n    });\n    \n    SlowSynonymMap synMap = ff.getSynonymMap();\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}