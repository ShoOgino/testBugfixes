{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","commits":[{"id":"1794a0eb180b7d4e51424fbb32694cbb787ebc93","date":1496796881,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    // TODO: refactor this repeated code from above\n    Comparable start = calc.getValue(bucketVal.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = calc.getValue(bucketVal.toString());\n    Comparable high = calc.addGap(low, gap);\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = end;\n      } else {\n        end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower =\n        (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == low.compareTo(start)));\n    boolean incUpper =\n        (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == high.compareTo(end)));\n\n    Range range = new Range(low, low, high, incLower, incUpper);\n\n\n    // now refine this range\n\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    FieldType ft = sf.getType();\n    bucket.add(\"val\", bucketVal);\n    // String internal = ft.toInternal( tobj.toString() );  // TODO - we need a better way to get from object to query...\n\n    Query domainQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c05b634713ca09b2267477408773904d4c69dd9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f344bb33ca91f48e99c061980115b46fa84fc8f5","date":1496903283,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    // TODO: refactor this repeated code from above\n    Comparable start = calc.getValue(bucketVal.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = calc.getValue(bucketVal.toString());\n    Comparable high = calc.addGap(low, gap);\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = end;\n      } else {\n        end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower =\n        (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == low.compareTo(start)));\n    boolean incUpper =\n        (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == high.compareTo(end)));\n\n    Range range = new Range(low, low, high, incLower, incUpper);\n\n\n    // now refine this range\n\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    FieldType ft = sf.getType();\n    bucket.add(\"val\", bucketVal);\n    // String internal = ft.toInternal( tobj.toString() );  // TODO - we need a better way to get from object to query...\n\n    Query domainQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6b4e21f270c812affb9d34da7e81113045b05e0","date":1497389490,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","sourceNew":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    // TODO: refactor this repeated code from above\n    Comparable start = calc.getValue(bucketVal.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = calc.getValue(bucketVal.toString());\n    Comparable high = calc.addGap(low, gap);\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = end;\n      } else {\n        end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower =\n        (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == low.compareTo(start)));\n    boolean incUpper =\n        (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == high.compareTo(end)));\n\n    Range range = new Range(low, low, high, incLower, incUpper);\n\n\n    // now refine this range\n\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    FieldType ft = sf.getType();\n    bucket.add(\"val\", range.low); // use \"low\" instead of bucketVal because it will be the right type (we may have been passed back long instead of int for example)\n    // String internal = ft.toInternal( tobj.toString() );  // TODO - we need a better way to get from object to query...\n\n    Query domainQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    // TODO: refactor this repeated code from above\n    Comparable start = calc.getValue(bucketVal.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = calc.getValue(bucketVal.toString());\n    Comparable high = calc.addGap(low, gap);\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = end;\n      } else {\n        end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower =\n        (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == low.compareTo(start)));\n    boolean incUpper =\n        (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == high.compareTo(end)));\n\n    Range range = new Range(low, low, high, incLower, incUpper);\n\n\n    // now refine this range\n\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    FieldType ft = sf.getType();\n    bucket.add(\"val\", bucketVal);\n    // String internal = ft.toInternal( tobj.toString() );  // TODO - we need a better way to get from object to query...\n\n    Query domainQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    // TODO: refactor this repeated code from above\n    Comparable start = calc.getValue(bucketVal.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = calc.getValue(bucketVal.toString());\n    Comparable high = calc.addGap(low, gap);\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = end;\n      } else {\n        end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower =\n        (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == low.compareTo(start)));\n    boolean incUpper =\n        (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == high.compareTo(end)));\n\n    Range range = new Range(low, low, high, incLower, incUpper);\n\n\n    // now refine this range\n\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    FieldType ft = sf.getType();\n    bucket.add(\"val\", range.low); // use \"low\" instead of bucketVal because it will be the right type (we may have been passed back long instead of int for example)\n    // String internal = ft.toInternal( tobj.toString() );  // TODO - we need a better way to get from object to query...\n\n    Query domainQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    // TODO: refactor this repeated code from above\n    Comparable start = calc.getValue(bucketVal.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = calc.getValue(bucketVal.toString());\n    Comparable high = calc.addGap(low, gap);\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = end;\n      } else {\n        end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower =\n        (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == low.compareTo(start)));\n    boolean incUpper =\n        (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == high.compareTo(end)));\n\n    Range range = new Range(low, low, high, incLower, incUpper);\n\n\n    // now refine this range\n\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    FieldType ft = sf.getType();\n    bucket.add(\"val\", range.low); // use \"low\" instead of bucketVal because it will be the right type (we may have been passed back long instead of int for example)\n    // String internal = ft.toInternal( tobj.toString() );  // TODO - we need a better way to get from object to query...\n\n    Query domainQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6409f24cc7d96b04fb1c932845092b0e307fb5d4","date":1515972624,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","sourceNew":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    // TODO: refactor this repeated code from above\n    Comparable start = calc.getValue(bucketVal.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = calc.getValue(bucketVal.toString());\n    Comparable high = calc.addGap(low, gap);\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = end;\n      } else {\n        end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower =\n        (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == low.compareTo(start)));\n    boolean incUpper =\n        (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == high.compareTo(end)));\n\n    Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n\n\n    // now refine this range\n\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    bucket.add(\"val\", range.label);\n    \n    Query domainQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    // TODO: refactor this repeated code from above\n    Comparable start = calc.getValue(bucketVal.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = calc.getValue(bucketVal.toString());\n    Comparable high = calc.addGap(low, gap);\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = end;\n      } else {\n        end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower =\n        (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == low.compareTo(start)));\n    boolean incUpper =\n        (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == high.compareTo(end)));\n\n    Range range = new Range(low, low, high, incLower, incUpper);\n\n\n    // now refine this range\n\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    FieldType ft = sf.getType();\n    bucket.add(\"val\", range.low); // use \"low\" instead of bucketVal because it will be the right type (we may have been passed back long instead of int for example)\n    // String internal = ft.toInternal( tobj.toString() );  // TODO - we need a better way to get from object to query...\n\n    Query domainQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":["c05b634713ca09b2267477408773904d4c69dd9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","sourceNew":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    // TODO: refactor this repeated code from above\n    Comparable start = calc.getValue(bucketVal.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = calc.getValue(bucketVal.toString());\n    Comparable high = calc.addGap(low, gap);\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = end;\n      } else {\n        end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower =\n        (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == low.compareTo(start)));\n    boolean incUpper =\n        (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == high.compareTo(end)));\n\n    Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n\n\n    // now refine this range\n\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    bucket.add(\"val\", range.label);\n    \n    Query domainQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    // TODO: refactor this repeated code from above\n    Comparable start = calc.getValue(bucketVal.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = calc.getValue(bucketVal.toString());\n    Comparable high = calc.addGap(low, gap);\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = end;\n      } else {\n        end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower =\n        (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == low.compareTo(start)));\n    boolean incUpper =\n        (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == high.compareTo(end)));\n\n    Range range = new Range(low, low, high, incLower, incUpper);\n\n\n    // now refine this range\n\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    FieldType ft = sf.getType();\n    bucket.add(\"val\", range.low); // use \"low\" instead of bucketVal because it will be the right type (we may have been passed back long instead of int for example)\n    // String internal = ft.toInternal( tobj.toString() );  // TODO - we need a better way to get from object to query...\n\n    Query domainQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c05b634713ca09b2267477408773904d4c69dd9d","date":1530894845,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","sourceNew":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n\n    Comparable low = calc.getValue(bucketVal.toString());\n    Comparable high = calc.addGap(low, gap);\n    Comparable max_end = end;\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = max_end;\n      } else {\n        max_end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower = (include.contains(FacetRangeInclude.LOWER) ||\n                        (include.contains(FacetRangeInclude.EDGE) && 0 == low.compareTo(start)));\n    boolean incUpper = (include.contains(FacetRangeInclude.UPPER) ||\n                        (include.contains(FacetRangeInclude.EDGE) && 0 == high.compareTo(max_end)));\n\n    Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n\n    // now refine this range\n\n    final SimpleOrderedMap<Object> bucket = refineRange(range, skip, facetInfo);\n    bucket.add(\"val\", range.label);\n\n    return bucket;\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    // TODO: refactor this repeated code from above\n    Comparable start = calc.getValue(bucketVal.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = calc.getValue(bucketVal.toString());\n    Comparable high = calc.addGap(low, gap);\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = end;\n      } else {\n        end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower =\n        (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == low.compareTo(start)));\n    boolean incUpper =\n        (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == high.compareTo(end)));\n\n    Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n\n\n    // now refine this range\n\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    bucket.add(\"val\", range.label);\n    \n    Query domainQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","bugFix":["1794a0eb180b7d4e51424fbb32694cbb787ebc93","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","sourceNew":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n\n    Comparable low = calc.getValue(bucketVal.toString());\n    Comparable high = calc.addGap(low, gap);\n    Comparable max_end = end;\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = max_end;\n      } else {\n        max_end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower = (include.contains(FacetRangeInclude.LOWER) ||\n                        (include.contains(FacetRangeInclude.EDGE) && 0 == low.compareTo(start)));\n    boolean incUpper = (include.contains(FacetRangeInclude.UPPER) ||\n                        (include.contains(FacetRangeInclude.EDGE) && 0 == high.compareTo(max_end)));\n\n    Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n\n    // now refine this range\n\n    final SimpleOrderedMap<Object> bucket = refineRange(range, skip, facetInfo);\n    bucket.add(\"val\", range.label);\n\n    return bucket;\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    // TODO: refactor this repeated code from above\n    Comparable start = calc.getValue(bucketVal.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = calc.getValue(bucketVal.toString());\n    Comparable high = calc.addGap(low, gap);\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = end;\n      } else {\n        end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower =\n        (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == low.compareTo(start)));\n    boolean incUpper =\n        (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == high.compareTo(end)));\n\n    Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n\n\n    // now refine this range\n\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    bucket.add(\"val\", range.label);\n    \n    Query domainQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","sourceNew":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n\n    Comparable low = calc.getValue(bucketVal.toString());\n    Comparable high = calc.addGap(low, gap);\n    Comparable max_end = end;\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = max_end;\n      } else {\n        max_end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower = (include.contains(FacetRangeInclude.LOWER) ||\n                        (include.contains(FacetRangeInclude.EDGE) && 0 == low.compareTo(start)));\n    boolean incUpper = (include.contains(FacetRangeInclude.UPPER) ||\n                        (include.contains(FacetRangeInclude.EDGE) && 0 == high.compareTo(max_end)));\n\n    Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n\n    // now refine this range\n\n    final SimpleOrderedMap<Object> bucket = refineRange(range, skip, facetInfo);\n    bucket.add(\"val\", range.label);\n\n    return bucket;\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    // TODO: refactor this repeated code from above\n    Comparable start = calc.getValue(bucketVal.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = calc.getValue(bucketVal.toString());\n    Comparable high = calc.addGap(low, gap);\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = end;\n      } else {\n        end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower =\n        (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == low.compareTo(start)));\n    boolean incUpper =\n        (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                0 == high.compareTo(end)));\n\n    Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n\n\n    // now refine this range\n\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    bucket.add(\"val\", range.label);\n    \n    Query domainQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45","date":1569046571,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","sourceNew":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n\n    String val = bucketVal.toString();\n    if (ranges != null) {\n      try {\n        Range range = parseRangeFromString(val, val);\n        final SimpleOrderedMap<Object> bucket = refineRange(range, skip, facetInfo);\n        bucket.add(\"val\", range.label);\n        return bucket;\n      } catch (SyntaxError e) {\n        // execution won't reach here as ranges are already validated\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n    Comparable low = calc.getValue(val);\n    Comparable high = calc.addGap(low, gap);\n    Comparable max_end = end;\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = max_end;\n      } else {\n        max_end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower = (include.contains(FacetRangeInclude.LOWER) ||\n                        (include.contains(FacetRangeInclude.EDGE) && 0 == low.compareTo(start)));\n    boolean incUpper = (include.contains(FacetRangeInclude.UPPER) ||\n                        (include.contains(FacetRangeInclude.EDGE) && 0 == high.compareTo(max_end)));\n\n    Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n\n    // now refine this range\n\n    final SimpleOrderedMap<Object> bucket = refineRange(range, skip, facetInfo);\n    bucket.add(\"val\", range.label);\n\n    return bucket;\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n\n    Comparable low = calc.getValue(bucketVal.toString());\n    Comparable high = calc.addGap(low, gap);\n    Comparable max_end = end;\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = max_end;\n      } else {\n        max_end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower = (include.contains(FacetRangeInclude.LOWER) ||\n                        (include.contains(FacetRangeInclude.EDGE) && 0 == low.compareTo(start)));\n    boolean incUpper = (include.contains(FacetRangeInclude.UPPER) ||\n                        (include.contains(FacetRangeInclude.EDGE) && 0 == high.compareTo(max_end)));\n\n    Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n\n    // now refine this range\n\n    final SimpleOrderedMap<Object> bucket = refineRange(range, skip, facetInfo);\n    bucket.add(\"val\", range.label);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor#refineBucket(Object,boolean,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n\n    String val = bucketVal.toString();\n    if (ranges != null) {\n      try {\n        Range range = parseRangeFromString(val, val);\n        final SimpleOrderedMap<Object> bucket = refineRange(range, skip, facetInfo);\n        bucket.add(\"val\", range.label);\n        return bucket;\n      } catch (SyntaxError e) {\n        // execution won't reach here as ranges are already validated\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n    Comparable low = calc.getValue(val);\n    Comparable high = calc.addGap(low, gap);\n    Comparable max_end = end;\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = max_end;\n      } else {\n        max_end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower = (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n        (include.contains(FacetParams.FacetRangeInclude.EDGE) && 0 == low.compareTo(start)));\n    boolean incUpper = (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n        (include.contains(FacetParams.FacetRangeInclude.EDGE) && 0 == high.compareTo(max_end)));\n\n    Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n\n    // now refine this range\n\n    final SimpleOrderedMap<Object> bucket = refineRange(range, skip, facetInfo);\n    bucket.add(\"val\", range.label);\n\n    return bucket;\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n\n    String val = bucketVal.toString();\n    if (ranges != null) {\n      try {\n        Range range = parseRangeFromString(val, val);\n        final SimpleOrderedMap<Object> bucket = refineRange(range, skip, facetInfo);\n        bucket.add(\"val\", range.label);\n        return bucket;\n      } catch (SyntaxError e) {\n        // execution won't reach here as ranges are already validated\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n    Comparable low = calc.getValue(val);\n    Comparable high = calc.addGap(low, gap);\n    Comparable max_end = end;\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = max_end;\n      } else {\n        max_end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower = (include.contains(FacetRangeInclude.LOWER) ||\n                        (include.contains(FacetRangeInclude.EDGE) && 0 == low.compareTo(start)));\n    boolean incUpper = (include.contains(FacetRangeInclude.UPPER) ||\n                        (include.contains(FacetRangeInclude.EDGE) && 0 == high.compareTo(max_end)));\n\n    Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n\n    // now refine this range\n\n    final SimpleOrderedMap<Object> bucket = refineRange(range, skip, facetInfo);\n    bucket.add(\"val\", range.label);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["28288370235ed02234a64753cdbf0c6ec096304a","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"1794a0eb180b7d4e51424fbb32694cbb787ebc93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a6b4e21f270c812affb9d34da7e81113045b05e0":["f344bb33ca91f48e99c061980115b46fa84fc8f5"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1794a0eb180b7d4e51424fbb32694cbb787ebc93"],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["c05b634713ca09b2267477408773904d4c69dd9d"],"c05b634713ca09b2267477408773904d4c69dd9d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a6b4e21f270c812affb9d34da7e81113045b05e0"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","c05b634713ca09b2267477408773904d4c69dd9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["28288370235ed02234a64753cdbf0c6ec096304a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a6b4e21f270c812affb9d34da7e81113045b05e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b94236357aaa22b76c10629851fe4e376e0cea82","c05b634713ca09b2267477408773904d4c69dd9d"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["c05b634713ca09b2267477408773904d4c69dd9d","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1794a0eb180b7d4e51424fbb32694cbb787ebc93":["f344bb33ca91f48e99c061980115b46fa84fc8f5"],"a6b4e21f270c812affb9d34da7e81113045b05e0":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["a6b4e21f270c812affb9d34da7e81113045b05e0"],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"28288370235ed02234a64753cdbf0c6ec096304a":["b94236357aaa22b76c10629851fe4e376e0cea82","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"c05b634713ca09b2267477408773904d4c69dd9d":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1794a0eb180b7d4e51424fbb32694cbb787ebc93","f344bb33ca91f48e99c061980115b46fa84fc8f5","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}