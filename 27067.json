{"path":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","commits":[{"id":"e22ffe8cc51a892ae103df018822d7873e901c2a","date":1313696790,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#open(String).mjava","sourceNew":"  @Override\n  public Directory create(String path) throws IOException {\n    return LuceneTestCase.newFSDirectory(new File(path));\n  }\n\n","sourceOld":"  @Override\n  public Directory open(String path) throws IOException {\n    return LuceneTestCase.newFSDirectory(new File(path));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47d5b6b2c183bf4deaffb52b7cb8dec16c8dcf0f","date":1322512504,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","sourceNew":"  @Override\n  public Directory create(String path) throws IOException {\n    MockDirectoryWrapper dir = LuceneTestCase.newFSDirectory(new File(path));\n    // Somehow removing unref'd files in Solr tests causes\n    // problems... there's some interaction w/\n    // CachingDirectoryFactory.  Once we track down where Solr\n    // isn't closing an IW, we can re-enable this:\n    dir.setAssertNoUnrefencedFilesOnClose(false);\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  public Directory create(String path) throws IOException {\n    return LuceneTestCase.newFSDirectory(new File(path));\n  }\n\n","bugFix":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","sourceNew":"  @Override\n  protected Directory create(String path) throws IOException {\n    MockDirectoryWrapper dir = LuceneTestCase.newDirectory();\n    // Somehow removing unref'd files in Solr tests causes\n    // problems... there's some interaction w/\n    // CachingDirectoryFactory.  Once we track down where Solr\n    // isn't closing an IW, we can re-enable this:\n    dir.setAssertNoUnrefencedFilesOnClose(false);\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  public Directory create(String path) throws IOException {\n    MockDirectoryWrapper dir = LuceneTestCase.newFSDirectory(new File(path));\n    // Somehow removing unref'd files in Solr tests causes\n    // problems... there's some interaction w/\n    // CachingDirectoryFactory.  Once we track down where Solr\n    // isn't closing an IW, we can re-enable this:\n    dir.setAssertNoUnrefencedFilesOnClose(false);\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","sourceNew":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    // Somehow removing unref'd files in Solr tests causes\n    // problems... there's some interaction w/\n    // CachingDirectoryFactory.  Once we track down where Solr\n    // isn't closing an IW, we can re-enable this:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path) throws IOException {\n    MockDirectoryWrapper dir = LuceneTestCase.newDirectory();\n    // Somehow removing unref'd files in Solr tests causes\n    // problems... there's some interaction w/\n    // CachingDirectoryFactory.  Once we track down where Solr\n    // isn't closing an IW, we can re-enable this:\n    dir.setAssertNoUnrefencedFilesOnClose(false);\n    return dir;\n  }\n\n","bugFix":["8be580b58bcc650d428f3f22de81cadcf51d650a","47d5b6b2c183bf4deaffb52b7cb8dec16c8dcf0f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","sourceNew":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    // Somehow removing unref'd files in Solr tests causes\n    // problems... there's some interaction w/\n    // CachingDirectoryFactory.  Once we track down where Solr\n    // isn't closing an IW, we can re-enable this:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path) throws IOException {\n    MockDirectoryWrapper dir = LuceneTestCase.newDirectory();\n    // Somehow removing unref'd files in Solr tests causes\n    // problems... there's some interaction w/\n    // CachingDirectoryFactory.  Once we track down where Solr\n    // isn't closing an IW, we can re-enable this:\n    dir.setAssertNoUnrefencedFilesOnClose(false);\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","sourceNew":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    // Somehow removing unref'd files in Solr tests causes\n    // problems... there's some interaction w/\n    // CachingDirectoryFactory.  Once we track down where Solr\n    // isn't closing an IW, we can re-enable this:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path) throws IOException {\n    MockDirectoryWrapper dir = LuceneTestCase.newDirectory();\n    // Somehow removing unref'd files in Solr tests causes\n    // problems... there's some interaction w/\n    // CachingDirectoryFactory.  Once we track down where Solr\n    // isn't closing an IW, we can re-enable this:\n    dir.setAssertNoUnrefencedFilesOnClose(false);\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469","date":1345037674,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","sourceNew":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    // Somehow removing unref'd files in Solr tests causes\n    // problems... there's some interaction w/\n    // CachingDirectoryFactory.  Once we track down where Solr\n    // isn't closing an IW, we can re-enable this:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n    return dir;\n  }\n\n","bugFix":["47d5b6b2c183bf4deaffb52b7cb8dec16c8dcf0f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","sourceNew":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    // Somehow removing unref'd files in Solr tests causes\n    // problems... there's some interaction w/\n    // CachingDirectoryFactory.  Once we track down where Solr\n    // isn't closing an IW, we can re-enable this:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","sourceNew":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    // Somehow removing unref'd files in Solr tests causes\n    // problems... there's some interaction w/\n    // CachingDirectoryFactory.  Once we track down where Solr\n    // isn't closing an IW, we can re-enable this:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","sourceNew":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n    \n    // ram dirs in cores that are restarted end up empty\n    // and check index fails\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setCheckIndexOnClose(false);\n    }\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","sourceNew":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n    \n    // ram dirs in cores that are restarted end up empty\n    // and check index fails\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setCheckIndexOnClose(false);\n    }\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d334fd45eadb0b96170767a921bb579f54519b06","date":1354538334,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","sourceNew":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) dir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n    \n    // ram dirs in cores that are restarted end up empty\n    // and check index fails\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setCheckIndexOnClose(false);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77","11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","sourceNew":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) dir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n    \n    // ram dirs in cores that are restarted end up empty\n    // and check index fails\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setCheckIndexOnClose(false);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","date":1358098706,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","sourceNew":"  @Override\n  protected Directory create(String path, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) dir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) dir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n    }\n    \n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","sourceNew":"  @Override\n  protected Directory create(String path, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) dir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) dir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n    }\n    \n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"616c1830142ff5c1ddedec1ed898733b73c8e23b":["aba371508186796cc6151d8223a5b4e16d02e26e","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["407687e67faf6e1f02a211ca078d8e3eed631027","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["d334fd45eadb0b96170767a921bb579f54519b06"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d9405f486872f1e416304dfe389741f4ee2f8a4d","d334fd45eadb0b96170767a921bb579f54519b06"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["47d5b6b2c183bf4deaffb52b7cb8dec16c8dcf0f"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"aba371508186796cc6151d8223a5b4e16d02e26e":["8be580b58bcc650d428f3f22de81cadcf51d650a","d19974432be9aed28ee7dca73bdf01d139e763a9"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d334fd45eadb0b96170767a921bb579f54519b06":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["8be580b58bcc650d428f3f22de81cadcf51d650a","d19974432be9aed28ee7dca73bdf01d139e763a9"],"f2126b84bd093fa3d921582a109a0ee578c28126":["b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"47d5b6b2c183bf4deaffb52b7cb8dec16c8dcf0f":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"]},"commit2Childs":{"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["407687e67faf6e1f02a211ca078d8e3eed631027","d334fd45eadb0b96170767a921bb579f54519b06","f2126b84bd093fa3d921582a109a0ee578c28126"],"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469":["616c1830142ff5c1ddedec1ed898733b73c8e23b","d9405f486872f1e416304dfe389741f4ee2f8a4d","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","f2126b84bd093fa3d921582a109a0ee578c28126"],"aba371508186796cc6151d8223a5b4e16d02e26e":["616c1830142ff5c1ddedec1ed898733b73c8e23b"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"d334fd45eadb0b96170767a921bb579f54519b06":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","407687e67faf6e1f02a211ca078d8e3eed631027"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"47d5b6b2c183bf4deaffb52b7cb8dec16c8dcf0f":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["47d5b6b2c183bf4deaffb52b7cb8dec16c8dcf0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","8917bfede3b4ca30f4305c1e391e9218959cd723","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}