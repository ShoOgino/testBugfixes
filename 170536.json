{"path":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","pathOld":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","sourceNew":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    checkRandomData(random,\n                    new Analyzer() {\n                      @Override\n                      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n                        Tokenizer tokenizer = new JapaneseTokenizer(reader, readDict(), false, Mode.SEARCH);\n                        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n                        return new TokenStreamComponents(tokenizer, graph);\n                      }\n                    },\n                    200*RANDOM_MULTIPLIER, 8192);\n  }\n\n","sourceOld":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    checkRandomData(random,\n                    new Analyzer() {\n                      @Override\n                      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n                        Tokenizer tokenizer = new JapaneseTokenizer(reader, readDict(), false, Mode.SEARCH);\n                        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n                        return new TokenStreamComponents(tokenizer, graph);\n                      }\n                    },\n                    200*RANDOM_MULTIPLIER, 8192);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6","date":1341575807,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","sourceNew":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    checkRandomData(random,\n                    new Analyzer() {\n                      @Override\n                      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n                        Tokenizer tokenizer = new JapaneseTokenizer(reader, readDict(), false, Mode.SEARCH);\n                        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n                        return new TokenStreamComponents(tokenizer, graph);\n                      }\n                    },\n                    100*RANDOM_MULTIPLIER, 8192);\n  }\n\n","sourceOld":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    checkRandomData(random,\n                    new Analyzer() {\n                      @Override\n                      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n                        Tokenizer tokenizer = new JapaneseTokenizer(reader, readDict(), false, Mode.SEARCH);\n                        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n                        return new TokenStreamComponents(tokenizer, graph);\n                      }\n                    },\n                    200*RANDOM_MULTIPLIER, 8192);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e7f30683f53928b2fce016e6430c9795caff22","date":1341839598,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","sourceNew":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    checkRandomData(random,\n                    new Analyzer() {\n                      @Override\n                      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n                        Tokenizer tokenizer = new JapaneseTokenizer(reader, readDict(), false, Mode.SEARCH);\n                        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n                        return new TokenStreamComponents(tokenizer, graph);\n                      }\n                    },\n                    100*RANDOM_MULTIPLIER, 8192);\n  }\n\n","sourceOld":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    checkRandomData(random,\n                    new Analyzer() {\n                      @Override\n                      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n                        Tokenizer tokenizer = new JapaneseTokenizer(reader, readDict(), false, Mode.SEARCH);\n                        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n                        return new TokenStreamComponents(tokenizer, graph);\n                      }\n                    },\n                    200*RANDOM_MULTIPLIER, 8192);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","sourceNew":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    checkRandomData(random,\n                    new Analyzer() {\n                      @Override\n                      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n                        Tokenizer tokenizer = new JapaneseTokenizer(reader, readDict(), false, Mode.SEARCH);\n                        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n                        return new TokenStreamComponents(tokenizer, graph);\n                      }\n                    },\n                    100*RANDOM_MULTIPLIER, 8192);\n  }\n\n","sourceOld":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    checkRandomData(random,\n                    new Analyzer() {\n                      @Override\n                      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n                        Tokenizer tokenizer = new JapaneseTokenizer(reader, readDict(), false, Mode.SEARCH);\n                        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n                        return new TokenStreamComponents(tokenizer, graph);\n                      }\n                    },\n                    200*RANDOM_MULTIPLIER, 8192);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","sourceNew":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    checkRandomData(random,\n                    new Analyzer() {\n                      @Override\n                      protected TokenStreamComponents createComponents(String fieldName) {\n                        Tokenizer tokenizer = new JapaneseTokenizer(readDict(), false, Mode.SEARCH);\n                        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n                        return new TokenStreamComponents(tokenizer, graph);\n                      }\n                    },\n                    100*RANDOM_MULTIPLIER, 8192);\n  }\n\n","sourceOld":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    checkRandomData(random,\n                    new Analyzer() {\n                      @Override\n                      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n                        Tokenizer tokenizer = new JapaneseTokenizer(reader, readDict(), false, Mode.SEARCH);\n                        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n                        return new TokenStreamComponents(tokenizer, graph);\n                      }\n                    },\n                    100*RANDOM_MULTIPLIER, 8192);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75","date":1399205975,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","sourceNew":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    checkRandomData(random,\n                    new Analyzer() {\n                      @Override\n                      protected TokenStreamComponents createComponents(String fieldName) {\n                        Tokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), readDict(), false, Mode.SEARCH);\n                        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n                        return new TokenStreamComponents(tokenizer, graph);\n                      }\n                    },\n                    100*RANDOM_MULTIPLIER, 8192);\n  }\n\n","sourceOld":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    checkRandomData(random,\n                    new Analyzer() {\n                      @Override\n                      protected TokenStreamComponents createComponents(String fieldName) {\n                        Tokenizer tokenizer = new JapaneseTokenizer(readDict(), false, Mode.SEARCH);\n                        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n                        return new TokenStreamComponents(tokenizer, graph);\n                      }\n                    },\n                    100*RANDOM_MULTIPLIER, 8192);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2cf19af846fb7335f7eeceea2361aac5078de36b","date":1417060595,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","sourceNew":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    checkRandomData(random,\n                    new Analyzer() {\n                      @Override\n                      protected TokenStreamComponents createComponents(String fieldName) {\n                        Tokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), readDict(), false, Mode.SEARCH);\n                        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n                        return new TokenStreamComponents(tokenizer, graph);\n                      }\n                    },\n                    20*RANDOM_MULTIPLIER, 8192);\n  }\n\n","sourceOld":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    checkRandomData(random,\n                    new Analyzer() {\n                      @Override\n                      protected TokenStreamComponents createComponents(String fieldName) {\n                        Tokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), readDict(), false, Mode.SEARCH);\n                        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n                        return new TokenStreamComponents(tokenizer, graph);\n                      }\n                    },\n                    100*RANDOM_MULTIPLIER, 8192);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","sourceNew":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), readDict(), false, Mode.SEARCH);\n        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n        return new TokenStreamComponents(tokenizer, graph);\n      }\n    };\n    checkRandomData(random, analyzer, 20*RANDOM_MULTIPLIER, 8192);\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    checkRandomData(random,\n                    new Analyzer() {\n                      @Override\n                      protected TokenStreamComponents createComponents(String fieldName) {\n                        Tokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), readDict(), false, Mode.SEARCH);\n                        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n                        return new TokenStreamComponents(tokenizer, graph);\n                      }\n                    },\n                    20*RANDOM_MULTIPLIER, 8192);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","sourceNew":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), readDict(), false, Mode.SEARCH);\n        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n        return new TokenStreamComponents(tokenizer, graph);\n      }\n    };\n    checkRandomData(random, analyzer, 20*RANDOM_MULTIPLIER, 8192);\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    checkRandomData(random,\n                    new Analyzer() {\n                      @Override\n                      protected TokenStreamComponents createComponents(String fieldName) {\n                        Tokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), readDict(), false, Mode.SEARCH);\n                        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n                        return new TokenStreamComponents(tokenizer, graph);\n                      }\n                    },\n                    20*RANDOM_MULTIPLIER, 8192);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","sourceNew":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), readDict(), false, Mode.SEARCH);\n        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n        return new TokenStreamComponents(tokenizer, graph);\n      }\n    };\n    checkRandomData(random, analyzer, 3*RANDOM_MULTIPLIER, 8192);\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), readDict(), false, Mode.SEARCH);\n        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n        return new TokenStreamComponents(tokenizer, graph);\n      }\n    };\n    checkRandomData(random, analyzer, 20*RANDOM_MULTIPLIER, 8192);\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c6c784f777a2cc8fa014507ea129526822714d","date":1579733373,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testRandomHugeStringsMockGraphAfter().mjava","sourceNew":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), readDict(), false, Mode.SEARCH);\n        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n        return new TokenStreamComponents(tokenizer, graph);\n      }\n    };\n    checkRandomData(random, analyzer, RANDOM_MULTIPLIER, 4096);\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testRandomHugeStringsMockGraphAfter() throws Exception {\n    // Randomly inject graph tokens after JapaneseTokenizer:\n    Random random = random();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), readDict(), false, Mode.SEARCH);\n        TokenStream graph = new MockGraphTokenFilter(random(), tokenizer);\n        return new TokenStreamComponents(tokenizer, graph);\n      }\n    };\n    checkRandomData(random, analyzer, 3*RANDOM_MULTIPLIER, 8192);\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"04e7f30683f53928b2fce016e6430c9795caff22":["b89678825b68eccaf09e6ab71675fc0b0af1e099","16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6"],"16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"2cf19af846fb7335f7eeceea2361aac5078de36b":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"57c6c784f777a2cc8fa014507ea129526822714d":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["2cf19af846fb7335f7eeceea2361aac5078de36b","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["2cf19af846fb7335f7eeceea2361aac5078de36b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c6c784f777a2cc8fa014507ea129526822714d"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["57c6c784f777a2cc8fa014507ea129526822714d"],"04e7f30683f53928b2fce016e6430c9795caff22":[],"16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6":["04e7f30683f53928b2fce016e6430c9795caff22","ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["2cf19af846fb7335f7eeceea2361aac5078de36b"],"2cf19af846fb7335f7eeceea2361aac5078de36b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"57c6c784f777a2cc8fa014507ea129526822714d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["04e7f30683f53928b2fce016e6430c9795caff22","16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["04e7f30683f53928b2fce016e6430c9795caff22","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}