{"path":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","commits":[{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":1,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Query,Filter,int,Sort).mjava","sourceNew":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort)\n    throws IOException {\n    // don't specify the fields - we'll wait to do this until we get results\n    FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue (null, nDocs);\n    int totalHits = 0;\n    MultiSearcherThread[] msta = new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] =\n        new MultiSearcherThread(\n                                searchables[i],\n                                weight,\n                                filter,\n                                nDocs,\n                                hq,\n                                sort,\n                                i,\n                                starts,\n                                \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        ; // TODO: what should we do with this???\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    return new TopFieldDocs(totalHits, scoreDocs, hq.getFields());\n  }\n\n","sourceOld":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  public TopFieldDocs search(Query query, Filter filter, int nDocs, Sort sort)\n    throws IOException {\n    // don't specify the fields - we'll wait to do this until we get results\n    FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue (null, nDocs);\n    int totalHits = 0;\n    MultiSearcherThread[] msta = new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] =\n        new MultiSearcherThread(\n                                searchables[i],\n                                query,\n                                filter,\n                                nDocs,\n                                hq,\n                                sort,\n                                i,\n                                starts,\n                                \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        ; // TODO: what should we do with this???\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    return new TopFieldDocs(totalHits, scoreDocs, hq.getFields());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c88b3d0bf235942b9ead3322cac5fcee1e732d8","date":1133977717,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort)\n    throws IOException {\n    // don't specify the fields - we'll wait to do this until we get results\n    FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue (null, nDocs);\n    int totalHits = 0;\n    MultiSearcherThread[] msta = new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] =\n        new MultiSearcherThread(\n                                searchables[i],\n                                weight,\n                                filter,\n                                nDocs,\n                                hq,\n                                sort,\n                                i,\n                                starts,\n                                \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    float maxScore=Float.NEGATIVE_INFINITY;\n    \n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        ; // TODO: what should we do with this???\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n        maxScore=Math.max(maxScore, msta[i].getMaxScore());\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n  }\n\n","sourceOld":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort)\n    throws IOException {\n    // don't specify the fields - we'll wait to do this until we get results\n    FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue (null, nDocs);\n    int totalHits = 0;\n    MultiSearcherThread[] msta = new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] =\n        new MultiSearcherThread(\n                                searchables[i],\n                                weight,\n                                filter,\n                                nDocs,\n                                hq,\n                                sort,\n                                i,\n                                starts,\n                                \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        ; // TODO: what should we do with this???\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    return new TopFieldDocs(totalHits, scoreDocs, hq.getFields());\n  }\n\n","bugFix":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort)\n    throws IOException {\n    // don't specify the fields - we'll wait to do this until we get results\n    FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue (null, nDocs);\n    int totalHits = 0;\n    MultiSearcherThread[] msta = new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] =\n        new MultiSearcherThread(\n                                searchables[i],\n                                weight,\n                                filter,\n                                nDocs,\n                                hq,\n                                sort,\n                                i,\n                                starts,\n                                \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    float maxScore=Float.NEGATIVE_INFINITY;\n    \n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ie);\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n        maxScore=Math.max(maxScore, msta[i].getMaxScore());\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n  }\n\n","sourceOld":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort)\n    throws IOException {\n    // don't specify the fields - we'll wait to do this until we get results\n    FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue (null, nDocs);\n    int totalHits = 0;\n    MultiSearcherThread[] msta = new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] =\n        new MultiSearcherThread(\n                                searchables[i],\n                                weight,\n                                filter,\n                                nDocs,\n                                hq,\n                                sort,\n                                i,\n                                starts,\n                                \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    float maxScore=Float.NEGATIVE_INFINITY;\n    \n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        ; // TODO: what should we do with this???\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n        maxScore=Math.max(maxScore, msta[i].getMaxScore());\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(QueryWeight,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  public TopFieldDocs search(QueryWeight weight, Filter filter, int nDocs, Sort sort)\n    throws IOException {\n    // don't specify the fields - we'll wait to do this until we get results\n    FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue (null, nDocs);\n    int totalHits = 0;\n    MultiSearcherThread[] msta = new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] = new MultiSearcherThread(searchables[i], weight, filter, nDocs,\n          hq, sort, i, starts, \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    float maxScore=Float.NEGATIVE_INFINITY;\n    \n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ie);\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n        maxScore=Math.max(maxScore, msta[i].getMaxScore());\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n  }\n\n","sourceOld":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort)\n    throws IOException {\n    // don't specify the fields - we'll wait to do this until we get results\n    FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue (null, nDocs);\n    int totalHits = 0;\n    MultiSearcherThread[] msta = new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] =\n        new MultiSearcherThread(\n                                searchables[i],\n                                weight,\n                                filter,\n                                nDocs,\n                                hq,\n                                sort,\n                                i,\n                                starts,\n                                \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    float maxScore=Float.NEGATIVE_INFINITY;\n    \n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ie);\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n        maxScore=Math.max(maxScore, msta[i].getMaxScore());\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(QueryWeight,Filter,int,Sort).mjava","sourceNew":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort)\n    throws IOException {\n    // don't specify the fields - we'll wait to do this until we get results\n    FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue (null, nDocs);\n    int totalHits = 0;\n    MultiSearcherThread[] msta = new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] = new MultiSearcherThread(searchables[i], weight, filter, nDocs,\n          hq, sort, i, starts, \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    float maxScore=Float.NEGATIVE_INFINITY;\n    \n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ie);\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n        maxScore=Math.max(maxScore, msta[i].getMaxScore());\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n  }\n\n","sourceOld":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  public TopFieldDocs search(QueryWeight weight, Filter filter, int nDocs, Sort sort)\n    throws IOException {\n    // don't specify the fields - we'll wait to do this until we get results\n    FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue (null, nDocs);\n    int totalHits = 0;\n    MultiSearcherThread[] msta = new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] = new MultiSearcherThread(searchables[i], weight, filter, nDocs,\n          hq, sort, i, starts, \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    float maxScore=Float.NEGATIVE_INFINITY;\n    \n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ie);\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n        maxScore=Math.max(maxScore, msta[i].getMaxScore());\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20645c714ca2a7b7707c2707d58ee9fa384c7362","date":1256074979,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort)\n    throws IOException {\n    // don't specify the fields - we'll wait to do this until we get results\n    FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue (null, nDocs);\n    int totalHits = 0;\n    MultiSearcherThread[] msta = new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] = new MultiSearcherThread(searchables[i], weight, filter, nDocs,\n          hq, sort, i, starts, \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    float maxScore=Float.NEGATIVE_INFINITY;\n    \n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ie);\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n        maxScore=Math.max(maxScore, msta[i].getMaxScore());\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = hq.pop();\n\n    return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n  }\n\n","sourceOld":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort)\n    throws IOException {\n    // don't specify the fields - we'll wait to do this until we get results\n    FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue (null, nDocs);\n    int totalHits = 0;\n    MultiSearcherThread[] msta = new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] = new MultiSearcherThread(searchables[i], weight, filter, nDocs,\n          hq, sort, i, starts, \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    float maxScore=Float.NEGATIVE_INFINITY;\n    \n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ie);\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n        maxScore=Math.max(maxScore, msta[i].getMaxScore());\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  @Override\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort)\n    throws IOException {\n    // don't specify the fields - we'll wait to do this until we get results\n    FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue (null, nDocs);\n    int totalHits = 0;\n    MultiSearcherThread[] msta = new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] = new MultiSearcherThread(searchables[i], weight, filter, nDocs,\n          hq, sort, i, starts, \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    float maxScore=Float.NEGATIVE_INFINITY;\n    \n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ie);\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n        maxScore=Math.max(maxScore, msta[i].getMaxScore());\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = hq.pop();\n\n    return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n  }\n\n","sourceOld":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort)\n    throws IOException {\n    // don't specify the fields - we'll wait to do this until we get results\n    FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue (null, nDocs);\n    int totalHits = 0;\n    MultiSearcherThread[] msta = new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] = new MultiSearcherThread(searchables[i], weight, filter, nDocs,\n          hq, sort, i, starts, \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    float maxScore=Float.NEGATIVE_INFINITY;\n    \n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ie);\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n        maxScore=Math.max(maxScore, msta[i].getMaxScore());\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = hq.pop();\n\n    return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf","date":1257873376,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  @Override\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort) throws IOException {\n    if (sort == null) throw new NullPointerException();\n\n    final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n    final Lock lock = new ReentrantLock();\n    @SuppressWarnings(\"unchecked\") final Future<TopFieldDocs>[] searchThreads = new Future[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      searchThreads[i] = executor.submit(\n          new MultiSearcherCallableWithSort(lock, searchables[i], weight, filter, nDocs, hq, sort, i, starts));\n    }\n\n    final CountTotalHits<TopFieldDocs> func = new CountTotalHits<TopFieldDocs>();\n    foreach(func, Arrays.asList(searchThreads));\n\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = hq.pop();\n\n    return new TopFieldDocs(func.totalHits, scoreDocs, hq.getFields(), func.maxScore);\n  }\n\n","sourceOld":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  @Override\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort)\n    throws IOException {\n    // don't specify the fields - we'll wait to do this until we get results\n    FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue (null, nDocs);\n    int totalHits = 0;\n    MultiSearcherThread[] msta = new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] = new MultiSearcherThread(searchables[i], weight, filter, nDocs,\n          hq, sort, i, starts, \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    float maxScore=Float.NEGATIVE_INFINITY;\n    \n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ie);\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n        maxScore=Math.max(maxScore, msta[i].getMaxScore());\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = hq.pop();\n\n    return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  @Override\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort) throws IOException {\n    if (sort == null) throw new NullPointerException();\n\n    final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n    final Lock lock = new ReentrantLock();\n    @SuppressWarnings(\"unchecked\") final Future<TopFieldDocs>[] searchThreads = new Future[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      searchThreads[i] = executor.submit(\n          new MultiSearcherCallableWithSort(lock, searchables[i], weight, filter, nDocs, hq, sort, i, starts));\n    }\n\n    final CountTotalHits<TopFieldDocs> func = new CountTotalHits<TopFieldDocs>();\n    foreach(func, Arrays.asList(searchThreads));\n\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = hq.pop();\n\n    return new TopFieldDocs(func.totalHits, scoreDocs, hq.getFields(), func.maxScore);\n  }\n\n","sourceOld":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  @Override\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort) throws IOException {\n    if (sort == null) throw new NullPointerException();\n\n    final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n    final Lock lock = new ReentrantLock();\n    @SuppressWarnings(\"unchecked\") final Future<TopFieldDocs>[] searchThreads = new Future[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      searchThreads[i] = executor.submit(\n          new MultiSearcherCallableWithSort(lock, searchables[i], weight, filter, nDocs, hq, sort, i, starts));\n    }\n\n    final CountTotalHits<TopFieldDocs> func = new CountTotalHits<TopFieldDocs>();\n    foreach(func, Arrays.asList(searchThreads));\n\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = hq.pop();\n\n    return new TopFieldDocs(func.totalHits, scoreDocs, hq.getFields(), func.maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"402061809f3a4629ea0c449e33e9f94a9772f3c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["fe941135bdfc28c81e20b4d21422f8726af34925"],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"052fac7830290bd38a04cddee1a121ee07656b56":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"1c88b3d0bf235942b9ead3322cac5fcee1e732d8":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf"]},"commit2Childs":{"402061809f3a4629ea0c449e33e9f94a9772f3c3":["1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"8a9e385641d717e641408d8fbbc62be8fc766357":["7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf"],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["8a9e385641d717e641408d8fbbc62be8fc766357"],"fe941135bdfc28c81e20b4d21422f8726af34925":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"1c88b3d0bf235942b9ead3322cac5fcee1e732d8":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}