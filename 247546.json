{"path":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasics() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs:\" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList field = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(field.size() + \" does not equal: \" + 2, field.size() == 2);\n    NamedList titl = (NamedList) field.get(\"titl\");\n    assertTrue(\"titl is null and it shouldn't be\", titl != null);\n    assertTrue(titl.get(\"tf\") + \" does not equal: \" + 2, ((Integer) titl.get(\"tf\")) == 2);\n    //there should not be any positions or offsets\n    NamedList positions = (NamedList) titl.get(\"positions\");\n    assertTrue(\"positions is not null and it should be\", positions == null);\n    NamedList offsets = (NamedList) titl.get(\"offsets\");\n    assertTrue(\"offsets is not null and it should be\", offsets == null);\n    String uniqueKeyFieldName = (String) termVectors.getVal(1);\n    assertTrue(\"uniqueKeyFieldName is null and it shouldn't be\", uniqueKeyFieldName != null);\n    assertTrue(uniqueKeyFieldName + \" is not equal to \" + \"id\", uniqueKeyFieldName.equals(\"id\") == true);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":null,"sourceOld":"  public void testBasics() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs:\" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList field = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(field.size() + \" does not equal: \" + 2, field.size() == 2);\n    NamedList titl = (NamedList) field.get(\"titl\");\n    assertTrue(\"titl is null and it shouldn't be\", titl != null);\n    assertTrue(titl.get(\"tf\") + \" does not equal: \" + 2, ((Integer) titl.get(\"tf\")) == 2);\n    //there should not be any positions or offsets\n    NamedList positions = (NamedList) titl.get(\"positions\");\n    assertTrue(\"positions is not null and it should be\", positions == null);\n    NamedList offsets = (NamedList) titl.get(\"offsets\");\n    assertTrue(\"offsets is not null and it should be\", offsets == null);\n    String uniqueKeyFieldName = (String) termVectors.getVal(1);\n    assertTrue(\"uniqueKeyFieldName is null and it shouldn't be\", uniqueKeyFieldName != null);\n    assertTrue(uniqueKeyFieldName + \" is not equal to \" + \"id\", uniqueKeyFieldName.equals(\"id\") == true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs:\" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList field = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(field.size() + \" does not equal: \" + 2, field.size() == 2);\n    NamedList titl = (NamedList) field.get(\"titl\");\n    assertTrue(\"titl is null and it shouldn't be\", titl != null);\n    assertTrue(titl.get(\"tf\") + \" does not equal: \" + 2, ((Integer) titl.get(\"tf\")) == 2);\n    //there should not be any positions or offsets\n    NamedList positions = (NamedList) titl.get(\"positions\");\n    assertTrue(\"positions is not null and it should be\", positions == null);\n    NamedList offsets = (NamedList) titl.get(\"offsets\");\n    assertTrue(\"offsets is not null and it should be\", offsets == null);\n    String uniqueKeyFieldName = (String) termVectors.getVal(1);\n    assertTrue(\"uniqueKeyFieldName is null and it shouldn't be\", uniqueKeyFieldName != null);\n    assertTrue(uniqueKeyFieldName + \" is not equal to \" + \"id\", uniqueKeyFieldName.equals(\"id\") == true);\n\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs:\" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList field = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(field.size() + \" does not equal: \" + 2, field.size() == 2);\n    NamedList titl = (NamedList) field.get(\"titl\");\n    assertTrue(\"titl is null and it shouldn't be\", titl != null);\n    assertTrue(titl.get(\"tf\") + \" does not equal: \" + 2, ((Integer) titl.get(\"tf\")) == 2);\n    //there should not be any positions or offsets\n    NamedList positions = (NamedList) titl.get(\"positions\");\n    assertTrue(\"positions is not null and it should be\", positions == null);\n    NamedList offsets = (NamedList) titl.get(\"offsets\");\n    assertTrue(\"offsets is not null and it should be\", offsets == null);\n    String uniqueKeyFieldName = (String) termVectors.getVal(1);\n    assertTrue(\"uniqueKeyFieldName is null and it shouldn't be\", uniqueKeyFieldName != null);\n    assertTrue(uniqueKeyFieldName + \" is not equal to \" + \"id\", uniqueKeyFieldName.equals(\"id\") == true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasics() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs:\" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList field = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(field.size() + \" does not equal: \" + 2, field.size() == 2);\n    NamedList titl = (NamedList) field.get(\"titl\");\n    assertTrue(\"titl is null and it shouldn't be\", titl != null);\n    assertTrue(titl.get(\"tf\") + \" does not equal: \" + 2, ((Integer) titl.get(\"tf\")) == 2);\n    //there should not be any positions or offsets\n    NamedList positions = (NamedList) titl.get(\"positions\");\n    assertTrue(\"positions is not null and it should be\", positions == null);\n    NamedList offsets = (NamedList) titl.get(\"offsets\");\n    assertTrue(\"offsets is not null and it should be\", offsets == null);\n    String uniqueKeyFieldName = (String) termVectors.getVal(1);\n    assertTrue(\"uniqueKeyFieldName is null and it shouldn't be\", uniqueKeyFieldName != null);\n    assertTrue(uniqueKeyFieldName + \" is not equal to \" + \"id\", uniqueKeyFieldName.equals(\"id\") == true);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ce83f0d72db4660fd277a9d357698004d8f4336","date":1269047368,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    // System.out.println(\"TVs:\" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList field = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(field.size() + \" does not equal: \" + 2, field.size() == 2);\n    NamedList titl = (NamedList) field.get(\"titl\");\n    assertTrue(\"titl is null and it shouldn't be\", titl != null);\n    assertTrue(titl.get(\"tf\") + \" does not equal: \" + 2, ((Integer) titl.get(\"tf\")) == 2);\n    //there should not be any positions or offsets\n    NamedList positions = (NamedList) titl.get(\"positions\");\n    assertTrue(\"positions is not null and it should be\", positions == null);\n    NamedList offsets = (NamedList) titl.get(\"offsets\");\n    assertTrue(\"offsets is not null and it should be\", offsets == null);\n    String uniqueKeyFieldName = (String) termVectors.getVal(1);\n    assertTrue(\"uniqueKeyFieldName is null and it shouldn't be\", uniqueKeyFieldName != null);\n    assertTrue(uniqueKeyFieldName + \" is not equal to \" + \"id\", uniqueKeyFieldName.equals(\"id\") == true);\n\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs:\" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList field = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(field.size() + \" does not equal: \" + 2, field.size() == 2);\n    NamedList titl = (NamedList) field.get(\"titl\");\n    assertTrue(\"titl is null and it shouldn't be\", titl != null);\n    assertTrue(titl.get(\"tf\") + \" does not equal: \" + 2, ((Integer) titl.get(\"tf\")) == 2);\n    //there should not be any positions or offsets\n    NamedList positions = (NamedList) titl.get(\"positions\");\n    assertTrue(\"positions is not null and it should be\", positions == null);\n    NamedList offsets = (NamedList) titl.get(\"offsets\");\n    assertTrue(\"offsets is not null and it should be\", offsets == null);\n    String uniqueKeyFieldName = (String) termVectors.getVal(1);\n    assertTrue(\"uniqueKeyFieldName is null and it shouldn't be\", uniqueKeyFieldName != null);\n    assertTrue(uniqueKeyFieldName + \" is not equal to \" + \"id\", uniqueKeyFieldName.equals(\"id\") == true);\n\n  }\n\n","bugFix":null,"bugIntro":["df18b2465217a237531d0d944c22ea4a4316411e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"afeb033b2bd36d8ce9d82142b197da4dde13068b","date":1269115863,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    // System.out.println(\"TVs:\" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList field = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(field.size() + \" does not equal: \" + 2, field.size() == 2);\n    NamedList titl = (NamedList) field.get(\"titl\");\n    assertTrue(\"titl is null and it shouldn't be\", titl != null);\n    assertTrue(titl.get(\"tf\") + \" does not equal: \" + 2, ((Integer) titl.get(\"tf\")) == 2);\n    //there should not be any positions or offsets\n    NamedList positions = (NamedList) titl.get(\"positions\");\n    assertTrue(\"positions is not null and it should be\", positions == null);\n    NamedList offsets = (NamedList) titl.get(\"offsets\");\n    assertTrue(\"offsets is not null and it should be\", offsets == null);\n    String uniqueKeyFieldName = (String) termVectors.getVal(1);\n    assertTrue(\"uniqueKeyFieldName is null and it shouldn't be\", uniqueKeyFieldName != null);\n    assertTrue(uniqueKeyFieldName + \" is not equal to \" + \"id\", uniqueKeyFieldName.equals(\"id\") == true);\n\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    // System.out.println(\"TVs:\" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList field = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(field.size() + \" does not equal: \" + 2, field.size() == 2);\n    NamedList titl = (NamedList) field.get(\"titl\");\n    assertTrue(\"titl is null and it shouldn't be\", titl != null);\n    assertTrue(titl.get(\"tf\") + \" does not equal: \" + 2, ((Integer) titl.get(\"tf\")) == 2);\n    //there should not be any positions or offsets\n    NamedList positions = (NamedList) titl.get(\"positions\");\n    assertTrue(\"positions is not null and it should be\", positions == null);\n    NamedList offsets = (NamedList) titl.get(\"offsets\");\n    assertTrue(\"offsets is not null and it should be\", offsets == null);\n    String uniqueKeyFieldName = (String) termVectors.getVal(1);\n    assertTrue(\"uniqueKeyFieldName is null and it shouldn't be\", uniqueKeyFieldName != null);\n    assertTrue(uniqueKeyFieldName + \" is not equal to \" + \"id\", uniqueKeyFieldName.equals(\"id\") == true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df18b2465217a237531d0d944c22ea4a4316411e","date":1278157467,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs:\" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList field = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(field.size() + \" does not equal: \" + 2, field.size() == 2);\n    NamedList titl = (NamedList) field.get(\"titl\");\n    assertTrue(\"titl is null and it shouldn't be\", titl != null);\n    assertTrue(titl.get(\"tf\") + \" does not equal: \" + 2, ((Integer) titl.get(\"tf\")) == 2);\n    //there should not be any positions or offsets\n    NamedList positions = (NamedList) titl.get(\"positions\");\n    assertTrue(\"positions is not null and it should be\", positions == null);\n    NamedList offsets = (NamedList) titl.get(\"offsets\");\n    assertTrue(\"offsets is not null and it should be\", offsets == null);\n    String uniqueKeyFieldName = (String) termVectors.getVal(1);\n    assertTrue(\"uniqueKeyFieldName is null and it shouldn't be\", uniqueKeyFieldName != null);\n    assertTrue(uniqueKeyFieldName + \" is not equal to \" + \"id\", uniqueKeyFieldName.equals(\"id\") == true);\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    // System.out.println(\"TVs:\" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList field = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(field.size() + \" does not equal: \" + 2, field.size() == 2);\n    NamedList titl = (NamedList) field.get(\"titl\");\n    assertTrue(\"titl is null and it shouldn't be\", titl != null);\n    assertTrue(titl.get(\"tf\") + \" does not equal: \" + 2, ((Integer) titl.get(\"tf\")) == 2);\n    //there should not be any positions or offsets\n    NamedList positions = (NamedList) titl.get(\"positions\");\n    assertTrue(\"positions is not null and it should be\", positions == null);\n    NamedList offsets = (NamedList) titl.get(\"offsets\");\n    assertTrue(\"offsets is not null and it should be\", offsets == null);\n    String uniqueKeyFieldName = (String) termVectors.getVal(1);\n    assertTrue(\"uniqueKeyFieldName is null and it shouldn't be\", uniqueKeyFieldName != null);\n    assertTrue(uniqueKeyFieldName + \" is not equal to \" + \"id\", uniqueKeyFieldName.equals(\"id\") == true);\n\n  }\n\n","bugFix":["3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c","9ce83f0d72db4660fd277a9d357698004d8f4336"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d5cccaae6cc86d750cac2aff57b2748de06c0e7","date":1279072441,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    if (VERBOSE) System.out.println(\"TVs:\" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList field = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(field.size() + \" does not equal: \" + 2, field.size() == 2);\n    NamedList titl = (NamedList) field.get(\"titl\");\n    assertTrue(\"titl is null and it shouldn't be\", titl != null);\n    assertTrue(titl.get(\"tf\") + \" does not equal: \" + 2, ((Integer) titl.get(\"tf\")) == 2);\n    //there should not be any positions or offsets\n    NamedList positions = (NamedList) titl.get(\"positions\");\n    assertTrue(\"positions is not null and it should be\", positions == null);\n    NamedList offsets = (NamedList) titl.get(\"offsets\");\n    assertTrue(\"offsets is not null and it should be\", offsets == null);\n    String uniqueKeyFieldName = (String) termVectors.getVal(1);\n    assertTrue(\"uniqueKeyFieldName is null and it shouldn't be\", uniqueKeyFieldName != null);\n    assertTrue(uniqueKeyFieldName + \" is not equal to \" + \"id\", uniqueKeyFieldName.equals(\"id\") == true);\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs:\" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList field = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(field.size() + \" does not equal: \" + 2, field.size() == 2);\n    NamedList titl = (NamedList) field.get(\"titl\");\n    assertTrue(\"titl is null and it shouldn't be\", titl != null);\n    assertTrue(titl.get(\"tf\") + \" does not equal: \" + 2, ((Integer) titl.get(\"tf\")) == 2);\n    //there should not be any positions or offsets\n    NamedList positions = (NamedList) titl.get(\"positions\");\n    assertTrue(\"positions is not null and it should be\", positions == null);\n    NamedList offsets = (NamedList) titl.get(\"offsets\");\n    assertTrue(\"offsets is not null and it should be\", offsets == null);\n    String uniqueKeyFieldName = (String) termVectors.getVal(1);\n    assertTrue(\"uniqueKeyFieldName is null and it shouldn't be\", uniqueKeyFieldName != null);\n    assertTrue(uniqueKeyFieldName + \" is not equal to \" + \"id\", uniqueKeyFieldName.equals(\"id\") == true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    if (VERBOSE) System.out.println(\"TVs:\" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList field = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(field.size() + \" does not equal: \" + 2, field.size() == 2);\n    NamedList titl = (NamedList) field.get(\"titl\");\n    assertTrue(\"titl is null and it shouldn't be\", titl != null);\n    assertTrue(titl.get(\"tf\") + \" does not equal: \" + 2, ((Integer) titl.get(\"tf\")) == 2);\n    //there should not be any positions or offsets\n    NamedList positions = (NamedList) titl.get(\"positions\");\n    assertTrue(\"positions is not null and it should be\", positions == null);\n    NamedList offsets = (NamedList) titl.get(\"offsets\");\n    assertTrue(\"offsets is not null and it should be\", offsets == null);\n    String uniqueKeyFieldName = (String) termVectors.getVal(1);\n    assertTrue(\"uniqueKeyFieldName is null and it shouldn't be\", uniqueKeyFieldName != null);\n    assertTrue(uniqueKeyFieldName + \" is not equal to \" + \"id\", uniqueKeyFieldName.equals(\"id\") == true);\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    // System.out.println(\"TVs:\" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList field = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(field.size() + \" does not equal: \" + 2, field.size() == 2);\n    NamedList titl = (NamedList) field.get(\"titl\");\n    assertTrue(\"titl is null and it shouldn't be\", titl != null);\n    assertTrue(titl.get(\"tf\") + \" does not equal: \" + 2, ((Integer) titl.get(\"tf\")) == 2);\n    //there should not be any positions or offsets\n    NamedList positions = (NamedList) titl.get(\"positions\");\n    assertTrue(\"positions is not null and it should be\", positions == null);\n    NamedList offsets = (NamedList) titl.get(\"offsets\");\n    assertTrue(\"offsets is not null and it should be\", offsets == null);\n    String uniqueKeyFieldName = (String) termVectors.getVal(1);\n    assertTrue(\"uniqueKeyFieldName is null and it shouldn't be\", uniqueKeyFieldName != null);\n    assertTrue(uniqueKeyFieldName + \" is not equal to \" + \"id\", uniqueKeyFieldName.equals(\"id\") == true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4eacd50421fb83ad5dbe90a00984962e7ec0df7c","date":1287151800,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    if (VERBOSE) System.out.println(\"TVs:\" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList field = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(field.size() + \" does not equal: \" + 2, field.size() == 2);\n    NamedList titl = (NamedList) field.get(\"titl\");\n    assertTrue(\"titl is null and it shouldn't be\", titl != null);\n    assertTrue(titl.get(\"tf\") + \" does not equal: \" + 2, ((Integer) titl.get(\"tf\")) == 2);\n    //there should not be any positions or offsets\n    NamedList positions = (NamedList) titl.get(\"positions\");\n    assertTrue(\"positions is not null and it should be\", positions == null);\n    NamedList offsets = (NamedList) titl.get(\"offsets\");\n    assertTrue(\"offsets is not null and it should be\", offsets == null);\n    String uniqueKeyFieldName = (String) termVectors.getVal(1);\n    assertTrue(\"uniqueKeyFieldName is null and it shouldn't be\", uniqueKeyFieldName != null);\n    assertTrue(uniqueKeyFieldName + \" is not equal to \" + \"id\", uniqueKeyFieldName.equals(\"id\") == true);\n\n  }\n\n","bugFix":null,"bugIntro":["4e32cd9d49e5cda7e131c54c05d8e970583b7063","4e32cd9d49e5cda7e131c54c05d8e970583b7063","4e32cd9d49e5cda7e131c54c05d8e970583b7063"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    if (VERBOSE) System.out.println(\"TVs:\" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList field = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(field.size() + \" does not equal: \" + 2, field.size() == 2);\n    NamedList titl = (NamedList) field.get(\"titl\");\n    assertTrue(\"titl is null and it shouldn't be\", titl != null);\n    assertTrue(titl.get(\"tf\") + \" does not equal: \" + 2, ((Integer) titl.get(\"tf\")) == 2);\n    //there should not be any positions or offsets\n    NamedList positions = (NamedList) titl.get(\"positions\");\n    assertTrue(\"positions is not null and it should be\", positions == null);\n    NamedList offsets = (NamedList) titl.get(\"offsets\");\n    assertTrue(\"offsets is not null and it should be\", offsets == null);\n    String uniqueKeyFieldName = (String) termVectors.getVal(1);\n    assertTrue(\"uniqueKeyFieldName is null and it shouldn't be\", uniqueKeyFieldName != null);\n    assertTrue(uniqueKeyFieldName + \" is not equal to \" + \"id\", uniqueKeyFieldName.equals(\"id\") == true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    if (VERBOSE) System.out.println(\"TVs:\" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList field = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(field.size() + \" does not equal: \" + 2, field.size() == 2);\n    NamedList titl = (NamedList) field.get(\"titl\");\n    assertTrue(\"titl is null and it shouldn't be\", titl != null);\n    assertTrue(titl.get(\"tf\") + \" does not equal: \" + 2, ((Integer) titl.get(\"tf\")) == 2);\n    //there should not be any positions or offsets\n    NamedList positions = (NamedList) titl.get(\"positions\");\n    assertTrue(\"positions is not null and it should be\", positions == null);\n    NamedList offsets = (NamedList) titl.get(\"offsets\");\n    assertTrue(\"offsets is not null and it should be\", offsets == null);\n    String uniqueKeyFieldName = (String) termVectors.getVal(1);\n    assertTrue(\"uniqueKeyFieldName is null and it shouldn't be\", uniqueKeyFieldName != null);\n    assertTrue(uniqueKeyFieldName + \" is not equal to \" + \"id\", uniqueKeyFieldName.equals(\"id\") == true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["4eacd50421fb83ad5dbe90a00984962e7ec0df7c","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["afeb033b2bd36d8ce9d82142b197da4dde13068b","9d5cccaae6cc86d750cac2aff57b2748de06c0e7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","4eacd50421fb83ad5dbe90a00984962e7ec0df7c"],"df18b2465217a237531d0d944c22ea4a4316411e":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"9ce83f0d72db4660fd277a9d357698004d8f4336":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["4eacd50421fb83ad5dbe90a00984962e7ec0df7c"],"4eacd50421fb83ad5dbe90a00984962e7ec0df7c":["9d5cccaae6cc86d750cac2aff57b2748de06c0e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["9ce83f0d72db4660fd277a9d357698004d8f4336"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["4eacd50421fb83ad5dbe90a00984962e7ec0df7c"],"9d5cccaae6cc86d750cac2aff57b2748de06c0e7":["df18b2465217a237531d0d944c22ea4a4316411e"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["9d5cccaae6cc86d750cac2aff57b2748de06c0e7","4eacd50421fb83ad5dbe90a00984962e7ec0df7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"df18b2465217a237531d0d944c22ea4a4316411e":["9d5cccaae6cc86d750cac2aff57b2748de06c0e7"],"1da8d55113b689b06716246649de6f62430f15c0":["9ce83f0d72db4660fd277a9d357698004d8f4336"],"9ce83f0d72db4660fd277a9d357698004d8f4336":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"4eacd50421fb83ad5dbe90a00984962e7ec0df7c":["c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["5f4e87790277826a2aea119328600dfb07761f32","df18b2465217a237531d0d944c22ea4a4316411e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"9d5cccaae6cc86d750cac2aff57b2748de06c0e7":["5f4e87790277826a2aea119328600dfb07761f32","4eacd50421fb83ad5dbe90a00984962e7ec0df7c","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}