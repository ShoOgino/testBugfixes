{"path":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setValue(_TestUtil.randomUnicodeString(random, 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setValue(_TestUtil.randomUnicodeString(random, 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(_TestUtil.randomUnicodeString(random, 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setValue(_TestUtil.randomUnicodeString(random, 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a90788e9e5e3c97f7c5d71ce723d75f01b9f0f1","date":1329689643,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(_TestUtil.randomUnicodeString(random, 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader, /* TODO: change that back to true and add better test,\n      so wrapped readers are explicitely checked, see LUCENE-3800: */ false);\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(_TestUtil.randomUnicodeString(random, 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":["a2a81b3988dfbdfb187c425043b89868e359b238"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a2a81b3988dfbdfb187c425043b89868e359b238","date":1329919075,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(_TestUtil.randomUnicodeString(random, 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(_TestUtil.randomUnicodeString(random, 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader, /* TODO: change that back to true and add better test,\n      so wrapped readers are explicitely checked, see LUCENE-3800: */ false);\n    writer.close();\n  }\n\n","bugFix":["7a90788e9e5e3c97f7c5d71ce723d75f01b9f0f1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(_TestUtil.randomUnicodeString(random, 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(_TestUtil.randomUnicodeString(random, 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader, /* TODO: change that back to true and add better test,\n      so wrapped readers are explicitely checked, see LUCENE-3800: */ false);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(_TestUtil.randomUnicodeString(random(), 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(_TestUtil.randomUnicodeString(random, 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(_TestUtil.randomUnicodeString(random(), 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(_TestUtil.randomUnicodeString(random(), 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(TestUtil.randomUnicodeString(random(), 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(_TestUtil.randomUnicodeString(random(), 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(TestUtil.randomUnicodeString(random(), 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.shutdown();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(TestUtil.randomUnicodeString(random(), 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n          .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(TestUtil.randomUnicodeString(random(), 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.shutdown();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(TestUtil.randomUnicodeString(random(), 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n          .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(TestUtil.randomUnicodeString(random(), 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n          .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(TestUtil.randomUnicodeString(random(), 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n          .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(TestUtil.randomUnicodeString(random(), 10));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n          .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setStringValue(TestUtil.randomUnicodeString(random(), 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["7a90788e9e5e3c97f7c5d71ce723d75f01b9f0f1","a2a81b3988dfbdfb187c425043b89868e359b238"],"6613659748fe4411a7dcf85266e55db1f95f7315":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a2a81b3988dfbdfb187c425043b89868e359b238":["7a90788e9e5e3c97f7c5d71ce723d75f01b9f0f1"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"7a90788e9e5e3c97f7c5d71ce723d75f01b9f0f1":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a2a81b3988dfbdfb187c425043b89868e359b238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"a2a81b3988dfbdfb187c425043b89868e359b238":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["7a90788e9e5e3c97f7c5d71ce723d75f01b9f0f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"7a90788e9e5e3c97f7c5d71ce723d75f01b9f0f1":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a2a81b3988dfbdfb187c425043b89868e359b238"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}