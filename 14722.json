{"path":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocList(Query,List[Query],Sort,int,int,int).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocList(Query,List[Query],Sort,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public DocList getDocList(Query query, List<Query> filterList, Sort lsort, int offset, int len, int flags) throws IOException {\n    DocListAndSet answer = new DocListAndSet();\n    getDocListC(answer,query,filterList,null,lsort,offset,len,flags);\n    return answer.docList;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c686ad76bb74d110ec3c727914fb5693a7da23","date":1158901446,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocList(Query,List[Query],Sort,int,int,int).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocList(Query,List[Query],Sort,int,int,int).mjava","sourceNew":"  /**\n   * Returns documents matching both <code>query</code> and the \n   * intersection of the <code>filterList</code>, sorted by <code>sort</code>.\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   *\n   * @param query\n   * @param filterList may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocList meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocList getDocList(Query query, List<Query> filterList, Sort lsort, int offset, int len, int flags) throws IOException {\n    DocListAndSet answer = new DocListAndSet();\n    getDocListC(answer,query,filterList,null,lsort,offset,len,flags);\n    return answer.docList;\n  }\n\n","sourceOld":"  public DocList getDocList(Query query, List<Query> filterList, Sort lsort, int offset, int len, int flags) throws IOException {\n    DocListAndSet answer = new DocListAndSet();\n    getDocListC(answer,query,filterList,null,lsort,offset,len,flags);\n    return answer.docList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db25c1f61b5ae826f10777da6551a832703967d5","date":1215306972,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocList(Query,List[Query],Sort,int,int,int).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocList(Query,List[Query],Sort,int,int,int).mjava","sourceNew":"  /**\n   * Returns documents matching both <code>query</code> and the \n   * intersection of the <code>filterList</code>, sorted by <code>sort</code>.\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   *\n   * @param query\n   * @param filterList may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocList meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocList getDocList(Query query, List<Query> filterList, Sort lsort, int offset, int len, int flags) throws IOException {\n    QueryCommand qc = new QueryCommand();\n    qc.setQuery(query)\n      .setFilterList(filterList)\n      .setSort(lsort)\n      .setOffset(offset)\n      .setLen(len)\n      .setFlags(flags);\n    QueryResult qr = new QueryResult();\n    search(qr,qc);\n    return qr.getDocList();\n  }\n\n","sourceOld":"  /**\n   * Returns documents matching both <code>query</code> and the \n   * intersection of the <code>filterList</code>, sorted by <code>sort</code>.\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   *\n   * @param query\n   * @param filterList may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocList meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocList getDocList(Query query, List<Query> filterList, Sort lsort, int offset, int len, int flags) throws IOException {\n    DocListAndSet answer = new DocListAndSet();\n    getDocListC(answer,query,filterList,null,lsort,offset,len,flags);\n    return answer.docList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocList(Query,List[Query],Sort,int,int,int).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocList(Query,List[Query],Sort,int,int,int).mjava","sourceNew":"  /**\n   * Returns documents matching both <code>query</code> and the \n   * intersection of the <code>filterList</code>, sorted by <code>sort</code>.\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   *\n   * @param query\n   * @param filterList may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocList meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocList getDocList(Query query, List<Query> filterList, Sort lsort, int offset, int len, int flags) throws IOException {\n    QueryCommand qc = new QueryCommand();\n    qc.setQuery(query)\n      .setFilterList(filterList)\n      .setSort(lsort)\n      .setOffset(offset)\n      .setLen(len)\n      .setFlags(flags);\n    QueryResult qr = new QueryResult();\n    search(qr,qc);\n    return qr.getDocList();\n  }\n\n","sourceOld":"  /**\n   * Returns documents matching both <code>query</code> and the \n   * intersection of the <code>filterList</code>, sorted by <code>sort</code>.\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   *\n   * @param query\n   * @param filterList may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocList meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocList getDocList(Query query, List<Query> filterList, Sort lsort, int offset, int len, int flags) throws IOException {\n    QueryCommand qc = new QueryCommand();\n    qc.setQuery(query)\n      .setFilterList(filterList)\n      .setSort(lsort)\n      .setOffset(offset)\n      .setLen(len)\n      .setFlags(flags);\n    QueryResult qr = new QueryResult();\n    search(qr,qc);\n    return qr.getDocList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"79c686ad76bb74d110ec3c727914fb5693a7da23":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"db25c1f61b5ae826f10777da6551a832703967d5":["79c686ad76bb74d110ec3c727914fb5693a7da23"],"ad94625fb8d088209f46650c8097196fec67f00c":["db25c1f61b5ae826f10777da6551a832703967d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"79c686ad76bb74d110ec3c727914fb5693a7da23":["db25c1f61b5ae826f10777da6551a832703967d5"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["79c686ad76bb74d110ec3c727914fb5693a7da23"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"db25c1f61b5ae826f10777da6551a832703967d5":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}