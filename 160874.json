{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","sourceNew":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","sourceOld":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","sourceNew":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","sourceOld":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","sourceNew":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","sourceOld":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdad2c6b6234338031bcc1f24c001a5ad66f714","date":1296866109,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","sourceNew":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    currPathType = null;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        InputStream inputStream = getInputStream(f); // support either gzip, bzip2, or regular text file, by extension  \n        reader = new BufferedReader(new InputStreamReader(inputStream, encoding), BUFFER_SIZE);\n        currPathType = TrecDocParser.pathType(f);\n        return;\n      } catch (Exception e) {\n        if (verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath()+\" due to \"+e.getMessage());\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","sourceOld":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","sourceNew":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    currPathType = null;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        InputStream inputStream = getInputStream(f); // support either gzip, bzip2, or regular text file, by extension  \n        reader = new BufferedReader(new InputStreamReader(inputStream, encoding), BUFFER_SIZE);\n        currPathType = TrecDocParser.pathType(f);\n        return;\n      } catch (Exception e) {\n        if (verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath()+\" due to \"+e.getMessage());\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","sourceOld":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","sourceNew":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    currPathType = null;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        InputStream inputStream = getInputStream(f); // support either gzip, bzip2, or regular text file, by extension  \n        reader = new BufferedReader(new InputStreamReader(inputStream, encoding), BUFFER_SIZE);\n        currPathType = TrecDocParser.pathType(f);\n        return;\n      } catch (Exception e) {\n        if (verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath()+\" due to \"+e.getMessage());\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","sourceOld":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2944372726ed00fc05229687367002194c6c81","date":1300969333,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","sourceNew":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    currPathType = null;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        InputStream inputStream = StreamUtils.inputStream(f); // support either gzip, bzip2, or regular text file, by extension  \n        reader = new BufferedReader(new InputStreamReader(inputStream, encoding), StreamUtils.BUFFER_SIZE);\n        currPathType = TrecDocParser.pathType(f);\n        return;\n      } catch (Exception e) {\n        if (verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath()+\" due to \"+e.getMessage());\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","sourceOld":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    currPathType = null;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        InputStream inputStream = getInputStream(f); // support either gzip, bzip2, or regular text file, by extension  \n        reader = new BufferedReader(new InputStreamReader(inputStream, encoding), BUFFER_SIZE);\n        currPathType = TrecDocParser.pathType(f);\n        return;\n      } catch (Exception e) {\n        if (verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath()+\" due to \"+e.getMessage());\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","sourceNew":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    currPathType = null;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        InputStream inputStream = StreamUtils.inputStream(f); // support either gzip, bzip2, or regular text file, by extension  \n        reader = new BufferedReader(new InputStreamReader(inputStream, encoding), StreamUtils.BUFFER_SIZE);\n        currPathType = TrecDocParser.pathType(f);\n        return;\n      } catch (Exception e) {\n        if (verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath()+\" due to \"+e.getMessage());\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","sourceOld":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    currPathType = null;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        InputStream inputStream = getInputStream(f); // support either gzip, bzip2, or regular text file, by extension  \n        reader = new BufferedReader(new InputStreamReader(inputStream, encoding), BUFFER_SIZE);\n        currPathType = TrecDocParser.pathType(f);\n        return;\n      } catch (Exception e) {\n        if (verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath()+\" due to \"+e.getMessage());\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","sourceNew":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    currPathType = null;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        InputStream inputStream = StreamUtils.inputStream(f); // support either gzip, bzip2, or regular text file, by extension  \n        reader = new BufferedReader(new InputStreamReader(inputStream, encoding), StreamUtils.BUFFER_SIZE);\n        currPathType = TrecDocParser.pathType(f);\n        return;\n      } catch (Exception e) {\n        if (verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath()+\" due to \"+e.getMessage());\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","sourceOld":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    currPathType = null;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        InputStream inputStream = getInputStream(f); // support either gzip, bzip2, or regular text file, by extension  \n        reader = new BufferedReader(new InputStreamReader(inputStream, encoding), BUFFER_SIZE);\n        currPathType = TrecDocParser.pathType(f);\n        return;\n      } catch (Exception e) {\n        if (verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath()+\" due to \"+e.getMessage());\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","sourceNew":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    currPathType = null;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        InputStream inputStream = StreamUtils.inputStream(f); // support either gzip, bzip2, or regular text file, by extension  \n        reader = new BufferedReader(new InputStreamReader(inputStream, encoding), StreamUtils.BUFFER_SIZE);\n        currPathType = TrecDocParser.pathType(f);\n        return;\n      } catch (Exception e) {\n        if (verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath()+\" due to \"+e.getMessage());\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","sourceOld":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    currPathType = null;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        InputStream inputStream = StreamUtils.inputStream(f); // support either gzip, bzip2, or regular text file, by extension  \n        reader = new BufferedReader(new InputStreamReader(inputStream, encoding), StreamUtils.BUFFER_SIZE);\n        currPathType = TrecDocParser.pathType(f);\n        return;\n      } catch (Exception e) {\n        if (verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath()+\" due to \"+e.getMessage());\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6e2944372726ed00fc05229687367002194c6c81"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","6e2944372726ed00fc05229687367002194c6c81"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","6e2944372726ed00fc05229687367002194c6c81"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6e2944372726ed00fc05229687367002194c6c81":["3cdad2c6b6234338031bcc1f24c001a5ad66f714"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","3cdad2c6b6234338031bcc1f24c001a5ad66f714","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","6e2944372726ed00fc05229687367002194c6c81"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"6e2944372726ed00fc05229687367002194c6c81":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}