{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testFailAfterMergeCommitted().mjava","commits":[{"id":"3f354ba79a5a3e8491ec2953f14f365a02c058ac","date":1598293148,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testFailAfterMergeCommitted().mjava","pathOld":"/dev/null","sourceNew":"  public void testFailAfterMergeCommitted() throws IOException {\n    try (Directory directory = newDirectory()) {\n      AtomicBoolean mergeAndFail = new AtomicBoolean(false);\n      try (IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig()\n          .setMergePolicy(new MergeOnXMergePolicy(NoMergePolicy.INSTANCE,  MergeTrigger.GET_READER))\n          .setMaxFullFlushMergeWaitMillis(30 * 1000)\n          .setMergeScheduler(new SerialMergeScheduler())) {\n        @Override\n        protected void doAfterFlush() throws IOException {\n          if (mergeAndFail.get() && hasPendingMerges()) {\n            executeMerge(MergeTrigger.GET_READER);\n            throw new RuntimeException(\"boom\");\n          }\n        }\n      }) {\n        Document d1 = new Document();\n        d1.add(new StringField(\"id\", \"1\", Field.Store.NO));\n        writer.addDocument(d1);\n        writer.flush();\n        Document d2 = new Document();\n        d2.add(new StringField(\"id\", \"2\", Field.Store.NO));\n        writer.addDocument(d2);\n        writer.flush();\n        mergeAndFail.set(true);\n        try (DirectoryReader reader = writer.getReader()){\n          assertNotNull(reader); // make compiler happy and use the reader\n          fail();\n        } catch (RuntimeException e) {\n          assertEquals(\"boom\", e.getMessage());\n        } finally {\n          mergeAndFail.set(false);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}