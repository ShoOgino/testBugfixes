{"path":"lucene/src/test/org/apache/lucene/search/TestPrefixRandom#testPrefixes().mjava","commits":[{"id":"3e8e2c32d41530c055e3a720bf58a736e9a07c94","date":1279796448,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixRandom#testPrefixes().mjava","pathOld":"/dev/null","sourceNew":"  /** test a bunch of random prefixes */\n  public void testPrefixes() throws Exception {\n      for (int i = 0; i < 1000*_TestUtil.getRandomMultiplier(); i++)\n        assertSame(_TestUtil.randomUnicodeString(random, 5));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixRandom#testPrefixes().mjava","pathOld":"/dev/null","sourceNew":"  /** test a bunch of random prefixes */\n  public void testPrefixes() throws Exception {\n      for (int i = 0; i < 1000*_TestUtil.getRandomMultiplier(); i++)\n        assertSame(_TestUtil.randomUnicodeString(random, 5));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixRandom#testPrefixes().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixRandom#testPrefixes().mjava","sourceNew":"  /** test a bunch of random prefixes */\n  public void testPrefixes() throws Exception {\n      int num = 1000 * RANDOM_MULTIPLIER;\n      for (int i = 0; i < num; i++)\n        assertSame(_TestUtil.randomUnicodeString(random, 5));\n  }\n\n","sourceOld":"  /** test a bunch of random prefixes */\n  public void testPrefixes() throws Exception {\n      for (int i = 0; i < 1000*_TestUtil.getRandomMultiplier(); i++)\n        assertSame(_TestUtil.randomUnicodeString(random, 5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixRandom#testPrefixes().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixRandom#testPrefixes().mjava","sourceNew":"  /** test a bunch of random prefixes */\n  public void testPrefixes() throws Exception {\n      int num = 1000 * RANDOM_MULTIPLIER;\n      for (int i = 0; i < num; i++)\n        assertSame(_TestUtil.randomUnicodeString(random, 5));\n  }\n\n","sourceOld":"  /** test a bunch of random prefixes */\n  public void testPrefixes() throws Exception {\n      for (int i = 0; i < 1000*_TestUtil.getRandomMultiplier(); i++)\n        assertSame(_TestUtil.randomUnicodeString(random, 5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixRandom#testPrefixes().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixRandom#testPrefixes().mjava","sourceNew":"  /** test a bunch of random prefixes */\n  public void testPrefixes() throws Exception {\n      int num = atLeast(1000);\n      for (int i = 0; i < num; i++)\n        assertSame(_TestUtil.randomUnicodeString(random, 5));\n  }\n\n","sourceOld":"  /** test a bunch of random prefixes */\n  public void testPrefixes() throws Exception {\n      int num = 1000 * RANDOM_MULTIPLIER;\n      for (int i = 0; i < num; i++)\n        assertSame(_TestUtil.randomUnicodeString(random, 5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixRandom#testPrefixes().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixRandom#testPrefixes().mjava","sourceNew":"  /** test a bunch of random prefixes */\n  public void testPrefixes() throws Exception {\n      int num = atLeast(1000);\n      for (int i = 0; i < num; i++)\n        assertSame(_TestUtil.randomUnicodeString(random, 5));\n  }\n\n","sourceOld":"  /** test a bunch of random prefixes */\n  public void testPrefixes() throws Exception {\n      int num = 1000 * RANDOM_MULTIPLIER;\n      for (int i = 0; i < num; i++)\n        assertSame(_TestUtil.randomUnicodeString(random, 5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixRandom#testPrefixes().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixRandom#testPrefixes().mjava","sourceNew":"  /** test a bunch of random prefixes */\n  public void testPrefixes() throws Exception {\n      int num = atLeast(1000);\n      for (int i = 0; i < num; i++)\n        assertSame(_TestUtil.randomUnicodeString(random, 5));\n  }\n\n","sourceOld":"  /** test a bunch of random prefixes */\n  public void testPrefixes() throws Exception {\n      int num = 1000 * RANDOM_MULTIPLIER;\n      for (int i = 0; i < num; i++)\n        assertSame(_TestUtil.randomUnicodeString(random, 5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"459280d4c73660ea582f38afce7968563068fe49","date":1311128716,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixRandom#testPrefixes().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixRandom#testPrefixes().mjava","sourceNew":"  /** test a bunch of random prefixes */\n  public void testPrefixes() throws Exception {\n      int num = atLeast(100);\n      for (int i = 0; i < num; i++)\n        assertSame(_TestUtil.randomUnicodeString(random, 5));\n  }\n\n","sourceOld":"  /** test a bunch of random prefixes */\n  public void testPrefixes() throws Exception {\n      int num = atLeast(1000);\n      for (int i = 0; i < num; i++)\n        assertSame(_TestUtil.randomUnicodeString(random, 5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPrefixRandom#testPrefixes().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixRandom#testPrefixes().mjava","sourceNew":"  /** test a bunch of random prefixes */\n  public void testPrefixes() throws Exception {\n      int num = atLeast(100);\n      for (int i = 0; i < num; i++)\n        assertSame(_TestUtil.randomUnicodeString(random, 5));\n  }\n\n","sourceOld":"  /** test a bunch of random prefixes */\n  public void testPrefixes() throws Exception {\n      int num = atLeast(100);\n      for (int i = 0; i < num; i++)\n        assertSame(_TestUtil.randomUnicodeString(random, 5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["3e8e2c32d41530c055e3a720bf58a736e9a07c94"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"459280d4c73660ea582f38afce7968563068fe49":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["459280d4c73660ea582f38afce7968563068fe49"],"3e8e2c32d41530c055e3a720bf58a736e9a07c94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","f83af14a2a8131b14d7aee6274c740334e0363d3"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e8e2c32d41530c055e3a720bf58a736e9a07c94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","f83af14a2a8131b14d7aee6274c740334e0363d3","3242a09f703274d3b9283f2064a1a33064b53a1b","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","459280d4c73660ea582f38afce7968563068fe49","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3242a09f703274d3b9283f2064a1a33064b53a1b":[],"459280d4c73660ea582f38afce7968563068fe49":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e8e2c32d41530c055e3a720bf58a736e9a07c94":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e8e2c32d41530c055e3a720bf58a736e9a07c94","5f4e87790277826a2aea119328600dfb07761f32"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3242a09f703274d3b9283f2064a1a33064b53a1b","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}