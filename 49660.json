{"path":"lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery#merge(String,String[]).mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery#merge(String,String[]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillDownQuery#merge(String,String[]).mjava","sourceNew":"  /** Merges (ORs) a new path into an existing AND'd\n   *  clause. */ \n  private void merge(String dim, String[] path) {\n    int index = drillDownDims.get(dim);\n    if (query.getClauses().length == drillDownDims.size()+1) {\n      index++;\n    }\n    ConstantScoreQuery q = (ConstantScoreQuery) query.clauses().get(index).getQuery();\n    if ((q.getQuery() instanceof BooleanQuery) == false) {\n      // App called .add(dim, customQuery) and then tried to\n      // merge a facet label in:\n      throw new RuntimeException(\"cannot merge with custom Query\");\n    }\n    String indexedField = config.getDimConfig(dim).indexFieldName;\n\n    BooleanQuery bq = (BooleanQuery) q.getQuery();\n    bq.add(new TermQuery(term(indexedField, dim, path)), Occur.SHOULD);\n  }\n\n","sourceOld":"  /** Merges (ORs) a new path into an existing AND'd\n   *  clause. */ \n  private void merge(String dim, String[] path) {\n    int index = drillDownDims.get(dim);\n    if (query.getClauses().length == drillDownDims.size()+1) {\n      index++;\n    }\n    ConstantScoreQuery q = (ConstantScoreQuery) query.clauses().get(index).getQuery();\n    if ((q.getQuery() instanceof BooleanQuery) == false) {\n      // App called .add(dim, customQuery) and then tried to\n      // merge a facet label in:\n      throw new RuntimeException(\"cannot merge with custom Query\");\n    }\n    String indexedField = config.getDimConfig(dim).indexFieldName;\n\n    BooleanQuery bq = (BooleanQuery) q.getQuery();\n    bq.add(new TermQuery(term(indexedField, dim, path)), Occur.SHOULD);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery#merge(String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Merges (ORs) a new path into an existing AND'd\n   *  clause. */ \n  private void merge(String dim, String[] path) {\n    int index = drillDownDims.get(dim);\n    if (query.getClauses().length == drillDownDims.size()+1) {\n      index++;\n    }\n    ConstantScoreQuery q = (ConstantScoreQuery) query.clauses().get(index).getQuery();\n    if ((q.getQuery() instanceof BooleanQuery) == false) {\n      // App called .add(dim, customQuery) and then tried to\n      // merge a facet label in:\n      throw new RuntimeException(\"cannot merge with custom Query\");\n    }\n    String indexedField = config.getDimConfig(dim).indexFieldName;\n\n    BooleanQuery bq = (BooleanQuery) q.getQuery();\n    bq.add(new TermQuery(term(indexedField, dim, path)), Occur.SHOULD);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery#merge(String,String[]).mjava","sourceNew":null,"sourceOld":"  /** Merges (ORs) a new path into an existing AND'd\n   *  clause. */ \n  private void merge(String dim, String[] path) {\n    int index = drillDownDims.get(dim);\n    if (query.getClauses().length == drillDownDims.size()+1) {\n      index++;\n    }\n    ConstantScoreQuery q = (ConstantScoreQuery) query.clauses().get(index).getQuery();\n    if ((q.getQuery() instanceof BooleanQuery) == false) {\n      // App called .add(dim, customQuery) and then tried to\n      // merge a facet label in:\n      throw new RuntimeException(\"cannot merge with custom Query\");\n    }\n    String indexedField = config.getDimConfig(dim).indexFieldName;\n\n    BooleanQuery bq = (BooleanQuery) q.getQuery();\n    bq.add(new TermQuery(term(indexedField, dim, path)), Occur.SHOULD);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","3cc728b07df73b197e6d940d27f9b08b63918f13"],"21d36d0db865f7b84026b447bec653469a6e66df":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}