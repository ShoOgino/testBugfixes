{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","commits":[{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","sourceNew":"    /**\n     * Resets the encapsulated components with the given reader. This method by\n     * default returns <code>true</code> indicating that the components have\n     * been reset successfully. Subclasses of {@link ReusableAnalyzerBase} might use\n     * their own {@link TokenStreamComponents} returning <code>false</code> if\n     * the components cannot be reset.\n     * \n     * @param reader\n     *          a reader to reset the source component\n     * @return <code>true</code> if the components were reset, otherwise\n     *         <code>false</code>\n     * @throws IOException\n     *           if the component's reset method throws an {@link IOException}\n     */\n    protected boolean reset(final Reader reader) throws IOException {\n      source.reset(reader);\n      if(sink != source)\n        sink.reset(); // only reset if the sink reference is different from source\n      return true;\n    }\n\n","sourceOld":"    /**\n     * Resets the encapsulated components with the given reader. This method by\n     * default returns <code>true</code> indicating that the components have\n     * been reset successfully. Subclasses of {@link ReusableAnalyzerBase} might use\n     * their own {@link TokenStreamComponents} returning <code>false</code> if\n     * the components cannot be reset.\n     * \n     * @param reader\n     *          a reader to reset the source component\n     * @return <code>true</code> if the components were reset, otherwise\n     *         <code>false</code>\n     * @throws IOException\n     *           if the component's reset method throws an {@link IOException}\n     */\n    protected boolean reset(final Reader reader) throws IOException {\n      source.reset(reader);\n      if(sink != source)\n        sink.reset(); // only reset if the sink reference is different from source\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","sourceNew":"    /**\n     * Resets the encapsulated components with the given reader. This method by\n     * default returns <code>true</code> indicating that the components have\n     * been reset successfully. Subclasses of {@link ReusableAnalyzerBase} might use\n     * their own {@link TokenStreamComponents} returning <code>false</code> if\n     * the components cannot be reset.\n     * \n     * @param reader\n     *          a reader to reset the source component\n     * @return <code>true</code> if the components were reset, otherwise\n     *         <code>false</code>\n     * @throws IOException\n     *           if the component's reset method throws an {@link IOException}\n     */\n    protected boolean reset(final Reader reader) throws IOException {\n      source.reset(reader);\n      return true;\n    }\n\n","sourceOld":"    /**\n     * Resets the encapsulated components with the given reader. This method by\n     * default returns <code>true</code> indicating that the components have\n     * been reset successfully. Subclasses of {@link ReusableAnalyzerBase} might use\n     * their own {@link TokenStreamComponents} returning <code>false</code> if\n     * the components cannot be reset.\n     * \n     * @param reader\n     *          a reader to reset the source component\n     * @return <code>true</code> if the components were reset, otherwise\n     *         <code>false</code>\n     * @throws IOException\n     *           if the component's reset method throws an {@link IOException}\n     */\n    protected boolean reset(final Reader reader) throws IOException {\n      source.reset(reader);\n      if(sink != source)\n        sink.reset(); // only reset if the sink reference is different from source\n      return true;\n    }\n\n","bugFix":["ddc5fbfd4c64963aba52713a4496522540294d69"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","sourceNew":"    /**\n     * Resets the encapsulated components with the given reader. This method by\n     * default returns <code>true</code> indicating that the components have\n     * been reset successfully. Subclasses of {@link ReusableAnalyzerBase} might use\n     * their own {@link TokenStreamComponents} returning <code>false</code> if\n     * the components cannot be reset.\n     * \n     * @param reader\n     *          a reader to reset the source component\n     * @return <code>true</code> if the components were reset, otherwise\n     *         <code>false</code>\n     * @throws IOException\n     *           if the component's reset method throws an {@link IOException}\n     */\n    protected boolean reset(final Reader reader) throws IOException {\n      source.reset(reader);\n      return true;\n    }\n\n","sourceOld":"    /**\n     * Resets the encapsulated components with the given reader. This method by\n     * default returns <code>true</code> indicating that the components have\n     * been reset successfully. Subclasses of {@link ReusableAnalyzerBase} might use\n     * their own {@link TokenStreamComponents} returning <code>false</code> if\n     * the components cannot be reset.\n     * \n     * @param reader\n     *          a reader to reset the source component\n     * @return <code>true</code> if the components were reset, otherwise\n     *         <code>false</code>\n     * @throws IOException\n     *           if the component's reset method throws an {@link IOException}\n     */\n    protected boolean reset(final Reader reader) throws IOException {\n      source.reset(reader);\n      if(sink != source)\n        sink.reset(); // only reset if the sink reference is different from source\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","sourceNew":"    /**\n     * Resets the encapsulated components with the given reader. This method by\n     * default returns <code>true</code> indicating that the components have\n     * been reset successfully. Subclasses of {@link ReusableAnalyzerBase} might use\n     * their own {@link TokenStreamComponents} returning <code>false</code> if\n     * the components cannot be reset.\n     * \n     * @param reader\n     *          a reader to reset the source component\n     * @return <code>true</code> if the components were reset, otherwise\n     *         <code>false</code>\n     * @throws IOException\n     *           if the component's reset method throws an {@link IOException}\n     */\n    protected boolean reset(final Reader reader) throws IOException {\n      source.reset(reader);\n      return true;\n    }\n\n","sourceOld":"    /**\n     * Resets the encapsulated components with the given reader. This method by\n     * default returns <code>true</code> indicating that the components have\n     * been reset successfully. Subclasses of {@link ReusableAnalyzerBase} might use\n     * their own {@link TokenStreamComponents} returning <code>false</code> if\n     * the components cannot be reset.\n     * \n     * @param reader\n     *          a reader to reset the source component\n     * @return <code>true</code> if the components were reset, otherwise\n     *         <code>false</code>\n     * @throws IOException\n     *           if the component's reset method throws an {@link IOException}\n     */\n    protected boolean reset(final Reader reader) throws IOException {\n      source.reset(reader);\n      if(sink != source)\n        sink.reset(); // only reset if the sink reference is different from source\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8f1fd760e2a7a87de661158ca069c8dacab8360","date":1313992891,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","sourceNew":"    /**\n     * Resets the encapsulated components with the given reader. This method by\n     * default returns <code>true</code> indicating that the components have\n     * been reset successfully. Subclasses of {@link ReusableAnalyzerBase} might use\n     * their own {@link TokenStreamComponents} returning <code>false</code> if\n     * the components cannot be reset.\n     * \n     * @param reader\n     *          a reader to reset the source component\n     * @return <code>true</code> if the components were reset, otherwise\n     *         <code>false</code>\n     * @throws IOException\n     *           if the component's reset method throws an {@link IOException}\n     */\n    protected boolean reset(final Reader reader) throws IOException {\n      source.reset(reader);\n      return true;\n    }\n\n","sourceOld":"    /**\n     * Resets the encapsulated components with the given reader. This method by\n     * default returns <code>true</code> indicating that the components have\n     * been reset successfully. Subclasses of {@link ReusableAnalyzerBase} might use\n     * their own {@link TokenStreamComponents} returning <code>false</code> if\n     * the components cannot be reset.\n     * \n     * @param reader\n     *          a reader to reset the source component\n     * @return <code>true</code> if the components were reset, otherwise\n     *         <code>false</code>\n     * @throws IOException\n     *           if the component's reset method throws an {@link IOException}\n     */\n    protected boolean reset(final Reader reader) throws IOException {\n      source.reset(reader);\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b8f1fd760e2a7a87de661158ca069c8dacab8360":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8f1fd760e2a7a87de661158ca069c8dacab8360"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","b8f1fd760e2a7a87de661158ca069c8dacab8360"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"b8f1fd760e2a7a87de661158ca069c8dacab8360":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}