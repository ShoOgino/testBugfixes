{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseEnum#testOneDocument().mjava","commits":[{"id":"4c74000f48f15dd52e66dc2f279abd04cb226ed2","date":1429059243,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseEnum#testOneDocument().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests union on one document  */\n  public void testOneDocument() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    \n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"foo bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    \n    DirectoryReader ir = DirectoryReader.open(writer, true);\n    writer.close();\n\n    PostingsEnum p1 = getOnlySegmentReader(ir).postings(new Term(\"field\", \"foo\"), PostingsEnum.POSITIONS);\n    PostingsEnum p2 = getOnlySegmentReader(ir).postings(new Term(\"field\", \"bar\"), PostingsEnum.POSITIONS);\n    PostingsEnum union = new MultiPhraseQuery.UnionPostingsEnum(Arrays.asList(p1, p2));\n    \n    assertEquals(-1, union.docID());\n    \n    assertEquals(0, union.nextDoc());\n    assertEquals(2, union.freq());\n    assertEquals(0, union.nextPosition());\n    assertEquals(1, union.nextPosition());\n    \n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, union.nextDoc());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseEnum#testOneDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseEnum#testOneDocument().mjava","sourceNew":"  /** Tests union on one document  */\n  public void testOneDocument() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    \n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"foo bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    \n    DirectoryReader ir = DirectoryReader.open(writer);\n    writer.close();\n\n    PostingsEnum p1 = getOnlySegmentReader(ir).postings(new Term(\"field\", \"foo\"), PostingsEnum.POSITIONS);\n    PostingsEnum p2 = getOnlySegmentReader(ir).postings(new Term(\"field\", \"bar\"), PostingsEnum.POSITIONS);\n    PostingsEnum union = new MultiPhraseQuery.UnionPostingsEnum(Arrays.asList(p1, p2));\n    \n    assertEquals(-1, union.docID());\n    \n    assertEquals(0, union.nextDoc());\n    assertEquals(2, union.freq());\n    assertEquals(0, union.nextPosition());\n    assertEquals(1, union.nextPosition());\n    \n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, union.nextDoc());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests union on one document  */\n  public void testOneDocument() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    \n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"foo bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    \n    DirectoryReader ir = DirectoryReader.open(writer, true);\n    writer.close();\n\n    PostingsEnum p1 = getOnlySegmentReader(ir).postings(new Term(\"field\", \"foo\"), PostingsEnum.POSITIONS);\n    PostingsEnum p2 = getOnlySegmentReader(ir).postings(new Term(\"field\", \"bar\"), PostingsEnum.POSITIONS);\n    PostingsEnum union = new MultiPhraseQuery.UnionPostingsEnum(Arrays.asList(p1, p2));\n    \n    assertEquals(-1, union.docID());\n    \n    assertEquals(0, union.nextDoc());\n    assertEquals(2, union.freq());\n    assertEquals(0, union.nextPosition());\n    assertEquals(1, union.nextPosition());\n    \n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, union.nextDoc());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseEnum#testOneDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseEnum#testOneDocument().mjava","sourceNew":"  /** Tests union on one document  */\n  public void testOneDocument() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    \n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"foo bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    \n    DirectoryReader ir = DirectoryReader.open(writer);\n    writer.close();\n\n    PostingsEnum p1 = getOnlyLeafReader(ir).postings(new Term(\"field\", \"foo\"), PostingsEnum.POSITIONS);\n    PostingsEnum p2 = getOnlyLeafReader(ir).postings(new Term(\"field\", \"bar\"), PostingsEnum.POSITIONS);\n    PostingsEnum union = new MultiPhraseQuery.UnionPostingsEnum(Arrays.asList(p1, p2));\n    \n    assertEquals(-1, union.docID());\n    \n    assertEquals(0, union.nextDoc());\n    assertEquals(2, union.freq());\n    assertEquals(0, union.nextPosition());\n    assertEquals(1, union.nextPosition());\n    \n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, union.nextDoc());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests union on one document  */\n  public void testOneDocument() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    \n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"foo bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    \n    DirectoryReader ir = DirectoryReader.open(writer);\n    writer.close();\n\n    PostingsEnum p1 = getOnlySegmentReader(ir).postings(new Term(\"field\", \"foo\"), PostingsEnum.POSITIONS);\n    PostingsEnum p2 = getOnlySegmentReader(ir).postings(new Term(\"field\", \"bar\"), PostingsEnum.POSITIONS);\n    PostingsEnum union = new MultiPhraseQuery.UnionPostingsEnum(Arrays.asList(p1, p2));\n    \n    assertEquals(-1, union.docID());\n    \n    assertEquals(0, union.nextDoc());\n    assertEquals(2, union.freq());\n    assertEquals(0, union.nextPosition());\n    assertEquals(1, union.nextPosition());\n    \n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, union.nextDoc());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["4c74000f48f15dd52e66dc2f279abd04cb226ed2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["2a1862266772deb28cdcb7d996b64d2177022687"],"2a1862266772deb28cdcb7d996b64d2177022687":["4c74000f48f15dd52e66dc2f279abd04cb226ed2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4c74000f48f15dd52e66dc2f279abd04cb226ed2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a1862266772deb28cdcb7d996b64d2177022687":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c74000f48f15dd52e66dc2f279abd04cb226ed2"],"4c74000f48f15dd52e66dc2f279abd04cb226ed2":["2a1862266772deb28cdcb7d996b64d2177022687"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}