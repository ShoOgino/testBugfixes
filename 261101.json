{"path":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"/dev/null","sourceNew":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":null,"sourceOld":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"/dev/null","sourceNew":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd0a7f04b5a49a00149b867e7d51f632fb8a4664","date":1279497978,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5102241c972543f9baa7a9f7faca98b4f6d89eec","date":1287227415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    // broken for turkish: https://issues.apache.org/jira/browse/SOLR-2088\n    String defLang = Locale.getDefault().getLanguage();\n    Assume.assumeTrue(!defLang.equals(\"tr\") && !defLang.equals(\"az\"));\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f","date":1287243791,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    // broken for turkish: https://issues.apache.org/jira/browse/SOLR-2088\n    String defLang = Locale.getDefault().getLanguage();\n    assumeFalse(\"Known bugs under Turkish locale: https://issues.apache.org/jira/browse/SOLR-2088\", defLang.equals(\"tr\") || defLang.equals(\"az\"));\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    // broken for turkish: https://issues.apache.org/jira/browse/SOLR-2088\n    String defLang = Locale.getDefault().getLanguage();\n    Assume.assumeTrue(!defLang.equals(\"tr\") && !defLang.equals(\"az\"));\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    // broken for turkish: https://issues.apache.org/jira/browse/SOLR-2088\n    String defLang = Locale.getDefault().getLanguage();\n    assumeFalse(\"Known bugs under Turkish locale: https://issues.apache.org/jira/browse/SOLR-2088\", defLang.equals(\"tr\") || defLang.equals(\"az\"));\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0633d6cdc3b9d1f2b0ef8e5ab78701d285db0303","date":1291156410,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    // broken for turkish: https://issues.apache.org/jira/browse/SOLR-2088\n    String defLang = Locale.getDefault().getLanguage();\n    assumeFalse(\"Known bugs under Turkish locale: https://issues.apache.org/jira/browse/SOLR-2088\", defLang.equals(\"tr\") || defLang.equals(\"az\"));\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    // broken for turkish: https://issues.apache.org/jira/browse/SOLR-2088\n    String defLang = Locale.getDefault().getLanguage();\n    assumeFalse(\"Known bugs under Turkish locale: https://issues.apache.org/jira/browse/SOLR-2088\", defLang.equals(\"tr\") || defLang.equals(\"az\"));\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d345a86357a4042faeebfad2693a070019c95918","date":1305385272,"type":5,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5102241c972543f9baa7a9f7faca98b4f6d89eec":["bd0a7f04b5a49a00149b867e7d51f632fb8a4664"],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","bd0a7f04b5a49a00149b867e7d51f632fb8a4664"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","0633d6cdc3b9d1f2b0ef8e5ab78701d285db0303"],"0633d6cdc3b9d1f2b0ef8e5ab78701d285db0303":["e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"d345a86357a4042faeebfad2693a070019c95918":["0633d6cdc3b9d1f2b0ef8e5ab78701d285db0303"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["3bb13258feba31ab676502787ab2e1779f129b7a","d345a86357a4042faeebfad2693a070019c95918"],"a3776dccca01c11e7046323cfad46a3b4a471233":["0633d6cdc3b9d1f2b0ef8e5ab78701d285db0303","d345a86357a4042faeebfad2693a070019c95918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["bd0a7f04b5a49a00149b867e7d51f632fb8a4664","e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f"],"e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f":["5102241c972543f9baa7a9f7faca98b4f6d89eec"],"3bb13258feba31ab676502787ab2e1779f129b7a":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","0633d6cdc3b9d1f2b0ef8e5ab78701d285db0303"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d345a86357a4042faeebfad2693a070019c95918"],"bd0a7f04b5a49a00149b867e7d51f632fb8a4664":["1da8d55113b689b06716246649de6f62430f15c0"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5102241c972543f9baa7a9f7faca98b4f6d89eec":["e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"0633d6cdc3b9d1f2b0ef8e5ab78701d285db0303":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d345a86357a4042faeebfad2693a070019c95918","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"1da8d55113b689b06716246649de6f62430f15c0":["5f4e87790277826a2aea119328600dfb07761f32","bd0a7f04b5a49a00149b867e7d51f632fb8a4664"],"d345a86357a4042faeebfad2693a070019c95918":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3bb13258feba31ab676502787ab2e1779f129b7a"],"e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f":["0633d6cdc3b9d1f2b0ef8e5ab78701d285db0303","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"3bb13258feba31ab676502787ab2e1779f129b7a":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"bd0a7f04b5a49a00149b867e7d51f632fb8a4664":["5102241c972543f9baa7a9f7faca98b4f6d89eec","5f4e87790277826a2aea119328600dfb07761f32","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}