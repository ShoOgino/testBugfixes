{"path":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a","date":1443442239,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    final SolrParams params = req.getParams();\n    Map<String, String> map = new HashMap<>(1);\n    map.put(WT, \"raw\");\n    map.put(OMIT_HEADER, \"true\");\n    req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), params));\n    synchronized (this) {\n      if (pagingSupport == null) {\n        pagingSupport = new PagedCollectionSupport();\n        ZkController zkController = cores.getZkController();\n        if (zkController != null) {\n          // get notified when the ZK session expires (so we can clear the cached collections and rebuild)\n          zkController.addOnReconnectListener(pagingSupport);\n        }\n      }\n    }\n\n    String path = params.get(PATH);\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    int start = params.getInt(\"start\", 0);\n    int rows = params.getInt(\"rows\", -1);\n\n    String filterType = params.get(\"filterType\");\n    if (filterType != null) {\n      filterType = filterType.trim().toLowerCase(Locale.ROOT);\n      if (filterType.length() == 0)\n        filterType = null;\n    }\n    FilterType type = (filterType != null) ? FilterType.valueOf(filterType) : FilterType.none;\n\n    String filter = (type != FilterType.none) ? params.get(\"filter\") : null;\n    if (filter != null) {\n      filter = filter.trim();\n      if (filter.length() == 0)\n        filter = null;\n    }\n\n    ZKPrinter printer = new ZKPrinter(cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n    boolean isGraphView = \"graph\".equals(params.get(\"view\"));\n    printer.page = (isGraphView && \"/clusterstate.json\".equals(path))\n        ? new PageOfCollections(start, rows, type, filter) : null;\n    printer.pagingSupport = pagingSupport;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    rsp.getValues().add(RawResponseWriter.CONTENT,printer);\n  }\n\n","sourceOld":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n\n    synchronized (this) {\n      if (pagingSupport == null) {\n        pagingSupport = new PagedCollectionSupport();\n        ZkController zkController = cores.getZkController();\n        if (zkController != null) {\n          // get notified when the ZK session expires (so we can clear the cached collections and rebuild)\n          zkController.addOnReconnectListener(pagingSupport);\n        }\n      }\n    }\n    \n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(PATH);\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n    \n    int start = paramAsInt(\"start\", params, 0);\n    int rows = paramAsInt(\"rows\", params, -1);\n    \n    String filterType = params.get(\"filterType\");\n    if (filterType != null) {\n      filterType = filterType.trim().toLowerCase(Locale.ROOT);\n      if (filterType.length() == 0)\n        filterType = null;\n    }\n    FilterType type = (filterType != null) ? FilterType.valueOf(filterType) : FilterType.none;\n    \n    String filter = (type != FilterType.none) ? params.get(\"filter\") : null;\n    if (filter != null) {\n      filter = filter.trim();\n      if (filter.length() == 0)\n        filter = null;\n    }\n    \n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n    boolean isGraphView = \"graph\".equals(params.get(\"view\"));\n    printer.page = (isGraphView && \"/clusterstate.json\".equals(path))\n        ? new PageOfCollections(start, rows, type, filter) : null;\n    printer.pagingSupport = pagingSupport;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    \n    out.flush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4870c48a961a8c08481df64902e8cc68d376d742","date":1562176201,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    final SolrParams params = req.getParams();\n    Map<String, String> map = new HashMap<>(1);\n    map.put(WT, \"raw\");\n    map.put(OMIT_HEADER, \"true\");\n    req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), params));\n    synchronized (this) {\n      if (pagingSupport == null) {\n        pagingSupport = new PagedCollectionSupport();\n        ZkController zkController = cores.getZkController();\n        if (zkController != null) {\n          // get notified when the ZK session expires (so we can clear the cached collections and rebuild)\n          zkController.addOnReconnectListener(pagingSupport);\n        }\n      }\n    }\n\n    String path = params.get(PATH);\n\n    if (params.get(\"addr\") != null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Illegal parameter \\\"addr\\\"\");\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    int start = params.getInt(\"start\", 0);\n    int rows = params.getInt(\"rows\", -1);\n\n    String filterType = params.get(\"filterType\");\n    if (filterType != null) {\n      filterType = filterType.trim().toLowerCase(Locale.ROOT);\n      if (filterType.length() == 0)\n        filterType = null;\n    }\n    FilterType type = (filterType != null) ? FilterType.valueOf(filterType) : FilterType.none;\n\n    String filter = (type != FilterType.none) ? params.get(\"filter\") : null;\n    if (filter != null) {\n      filter = filter.trim();\n      if (filter.length() == 0)\n        filter = null;\n    }\n\n    ZKPrinter printer = new ZKPrinter(cores.getZkController());\n    printer.detail = detail;\n    printer.dump = dump;\n    boolean isGraphView = \"graph\".equals(params.get(\"view\"));\n    printer.page = (isGraphView && \"/clusterstate.json\".equals(path))\n        ? new PageOfCollections(start, rows, type, filter) : null;\n    printer.pagingSupport = pagingSupport;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    rsp.getValues().add(RawResponseWriter.CONTENT,printer);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    final SolrParams params = req.getParams();\n    Map<String, String> map = new HashMap<>(1);\n    map.put(WT, \"raw\");\n    map.put(OMIT_HEADER, \"true\");\n    req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), params));\n    synchronized (this) {\n      if (pagingSupport == null) {\n        pagingSupport = new PagedCollectionSupport();\n        ZkController zkController = cores.getZkController();\n        if (zkController != null) {\n          // get notified when the ZK session expires (so we can clear the cached collections and rebuild)\n          zkController.addOnReconnectListener(pagingSupport);\n        }\n      }\n    }\n\n    String path = params.get(PATH);\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    int start = params.getInt(\"start\", 0);\n    int rows = params.getInt(\"rows\", -1);\n\n    String filterType = params.get(\"filterType\");\n    if (filterType != null) {\n      filterType = filterType.trim().toLowerCase(Locale.ROOT);\n      if (filterType.length() == 0)\n        filterType = null;\n    }\n    FilterType type = (filterType != null) ? FilterType.valueOf(filterType) : FilterType.none;\n\n    String filter = (type != FilterType.none) ? params.get(\"filter\") : null;\n    if (filter != null) {\n      filter = filter.trim();\n      if (filter.length() == 0)\n        filter = null;\n    }\n\n    ZKPrinter printer = new ZKPrinter(cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n    boolean isGraphView = \"graph\".equals(params.get(\"view\"));\n    printer.page = (isGraphView && \"/clusterstate.json\".equals(path))\n        ? new PageOfCollections(start, rows, type, filter) : null;\n    printer.pagingSupport = pagingSupport;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    rsp.getValues().add(RawResponseWriter.CONTENT,printer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    final SolrParams params = req.getParams();\n    Map<String, String> map = new HashMap<>(1);\n    map.put(WT, \"raw\");\n    map.put(OMIT_HEADER, \"true\");\n    req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), params));\n    synchronized (this) {\n      if (pagingSupport == null) {\n        pagingSupport = new PagedCollectionSupport();\n        ZkController zkController = cores.getZkController();\n        if (zkController != null) {\n          // get notified when the ZK session expires (so we can clear the cached collections and rebuild)\n          zkController.addOnReconnectListener(pagingSupport);\n        }\n      }\n    }\n\n    String path = params.get(PATH);\n\n    if (params.get(\"addr\") != null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Illegal parameter \\\"addr\\\"\");\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    int start = params.getInt(\"start\", 0);\n    int rows = params.getInt(\"rows\", -1);\n\n    String filterType = params.get(\"filterType\");\n    if (filterType != null) {\n      filterType = filterType.trim().toLowerCase(Locale.ROOT);\n      if (filterType.length() == 0)\n        filterType = null;\n    }\n    FilterType type = (filterType != null) ? FilterType.valueOf(filterType) : FilterType.none;\n\n    String filter = (type != FilterType.none) ? params.get(\"filter\") : null;\n    if (filter != null) {\n      filter = filter.trim();\n      if (filter.length() == 0)\n        filter = null;\n    }\n\n    ZKPrinter printer = new ZKPrinter(cores.getZkController());\n    printer.detail = detail;\n    printer.dump = dump;\n    boolean isGraphView = \"graph\".equals(params.get(\"view\"));\n    printer.page = (isGraphView && \"/clusterstate.json\".equals(path))\n        ? new PageOfCollections(start, rows, type, filter) : null;\n    printer.pagingSupport = pagingSupport;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    rsp.getValues().add(RawResponseWriter.CONTENT,printer);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    final SolrParams params = req.getParams();\n    Map<String, String> map = new HashMap<>(1);\n    map.put(WT, \"raw\");\n    map.put(OMIT_HEADER, \"true\");\n    req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), params));\n    synchronized (this) {\n      if (pagingSupport == null) {\n        pagingSupport = new PagedCollectionSupport();\n        ZkController zkController = cores.getZkController();\n        if (zkController != null) {\n          // get notified when the ZK session expires (so we can clear the cached collections and rebuild)\n          zkController.addOnReconnectListener(pagingSupport);\n        }\n      }\n    }\n\n    String path = params.get(PATH);\n\n    if (params.get(\"addr\") != null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Illegal parameter \\\"addr\\\"\");\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    int start = params.getInt(\"start\", 0);\n    int rows = params.getInt(\"rows\", -1);\n\n    String filterType = params.get(\"filterType\");\n    if (filterType != null) {\n      filterType = filterType.trim().toLowerCase(Locale.ROOT);\n      if (filterType.length() == 0)\n        filterType = null;\n    }\n    FilterType type = (filterType != null) ? FilterType.valueOf(filterType) : FilterType.none;\n\n    String filter = (type != FilterType.none) ? params.get(\"filter\") : null;\n    if (filter != null) {\n      filter = filter.trim();\n      if (filter.length() == 0)\n        filter = null;\n    }\n\n    ZKPrinter printer = new ZKPrinter(cores.getZkController());\n    printer.detail = detail;\n    printer.dump = dump;\n    boolean isGraphView = \"graph\".equals(params.get(\"view\"));\n    printer.page = (isGraphView && \"/clusterstate.json\".equals(path))\n        ? new PageOfCollections(start, rows, type, filter) : null;\n    printer.pagingSupport = pagingSupport;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    rsp.getValues().add(RawResponseWriter.CONTENT,printer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    final SolrParams params = req.getParams();\n    Map<String, String> map = new HashMap<>(1);\n    map.put(WT, \"raw\");\n    map.put(OMIT_HEADER, \"true\");\n    req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), params));\n    synchronized (this) {\n      if (pagingSupport == null) {\n        pagingSupport = new PagedCollectionSupport();\n        ZkController zkController = cores.getZkController();\n        if (zkController != null) {\n          // get notified when the ZK session expires (so we can clear the cached collections and rebuild)\n          zkController.addOnReconnectListener(pagingSupport);\n        }\n      }\n    }\n\n    String path = params.get(PATH);\n\n    if (params.get(\"addr\") != null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Illegal parameter \\\"addr\\\"\");\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    int start = params.getInt(\"start\", 0); // Note start ignored if rows not specified\n    int rows = params.getInt(\"rows\", -1);\n\n    String filterType = params.get(\"filterType\");\n    if (filterType != null) {\n      filterType = filterType.trim().toLowerCase(Locale.ROOT);\n      if (filterType.length() == 0)\n        filterType = null;\n    }\n    FilterType type = (filterType != null) ? FilterType.valueOf(filterType) : FilterType.none;\n\n    String filter = (type != FilterType.none) ? params.get(\"filter\") : null;\n    if (filter != null) {\n      filter = filter.trim();\n      if (filter.length() == 0)\n        filter = null;\n    }\n\n    ZKPrinter printer = new ZKPrinter(cores.getZkController());\n    printer.detail = detail;\n    printer.dump = dump;\n    boolean isGraphView = \"graph\".equals(params.get(\"view\"));\n    // There is no znode /clusterstate.json (removed in Solr 9), but we do as if there's one and return collection listing\n    // Need to change services.js if cleaning up here, collection list is used from Admin UI Cloud - Graph\n    boolean paginateCollections = (isGraphView && \"/clusterstate.json\".equals(path));\n    printer.page = paginateCollections ? new PageOfCollections(start, rows, type, filter) : null;\n    printer.pagingSupport = pagingSupport;\n\n    try {\n      if (paginateCollections) {\n        // List collections and allow pagination, but no specific znode info like when looking at a normal ZK path\n        printer.printPaginatedCollections();\n      } else {\n        printer.print(path);\n      }\n    } finally {\n      printer.close();\n    }\n    rsp.getValues().add(RawResponseWriter.CONTENT,printer);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    final SolrParams params = req.getParams();\n    Map<String, String> map = new HashMap<>(1);\n    map.put(WT, \"raw\");\n    map.put(OMIT_HEADER, \"true\");\n    req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), params));\n    synchronized (this) {\n      if (pagingSupport == null) {\n        pagingSupport = new PagedCollectionSupport();\n        ZkController zkController = cores.getZkController();\n        if (zkController != null) {\n          // get notified when the ZK session expires (so we can clear the cached collections and rebuild)\n          zkController.addOnReconnectListener(pagingSupport);\n        }\n      }\n    }\n\n    String path = params.get(PATH);\n\n    if (params.get(\"addr\") != null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Illegal parameter \\\"addr\\\"\");\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    int start = params.getInt(\"start\", 0);\n    int rows = params.getInt(\"rows\", -1);\n\n    String filterType = params.get(\"filterType\");\n    if (filterType != null) {\n      filterType = filterType.trim().toLowerCase(Locale.ROOT);\n      if (filterType.length() == 0)\n        filterType = null;\n    }\n    FilterType type = (filterType != null) ? FilterType.valueOf(filterType) : FilterType.none;\n\n    String filter = (type != FilterType.none) ? params.get(\"filter\") : null;\n    if (filter != null) {\n      filter = filter.trim();\n      if (filter.length() == 0)\n        filter = null;\n    }\n\n    ZKPrinter printer = new ZKPrinter(cores.getZkController());\n    printer.detail = detail;\n    printer.dump = dump;\n    boolean isGraphView = \"graph\".equals(params.get(\"view\"));\n    printer.page = (isGraphView && \"/clusterstate.json\".equals(path))\n        ? new PageOfCollections(start, rows, type, filter) : null;\n    printer.pagingSupport = pagingSupport;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    rsp.getValues().add(RawResponseWriter.CONTENT,printer);\n  }\n\n","bugFix":["80ebe5b1d946f7c2ed9c46206b0c7254dc21206a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["ba055e19afc289adcb5bedaf68513793a7254012"],"ba055e19afc289adcb5bedaf68513793a7254012":["4870c48a961a8c08481df64902e8cc68d376d742"],"4870c48a961a8c08481df64902e8cc68d376d742":["80ebe5b1d946f7c2ed9c46206b0c7254dc21206a"],"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba055e19afc289adcb5bedaf68513793a7254012":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"4870c48a961a8c08481df64902e8cc68d376d742":["ba055e19afc289adcb5bedaf68513793a7254012"],"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a":["4870c48a961a8c08481df64902e8cc68d376d742"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80ebe5b1d946f7c2ed9c46206b0c7254dc21206a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}