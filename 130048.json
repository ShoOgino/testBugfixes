{"path":"src/java/org/apache/lucene/analysis/StopFilter#StopFilter(boolean,TokenStream,Set[#],boolean).mjava","commits":[{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/StopFilter#StopFilter(boolean,TokenStream,Set[#],boolean).mjava","pathOld":"src/java/org/apache/lucene/analysis/StopFilter#StopFilter(boolean,TokenStream,Set,boolean).mjava","sourceNew":"  /**\n   * Construct a token stream filtering the given input.\n   * If <code>stopWords</code> is an instance of {@link CharArraySet} (true if\n   * <code>makeStopSet()</code> was used to construct the set) it will be directly used\n   * and <code>ignoreCase</code> will be ignored since <code>CharArraySet</code>\n   * directly controls case sensitivity.\n   * <p/>\n   * If <code>stopWords</code> is not an instance of {@link CharArraySet},\n   * a new CharArraySet will be constructed and <code>ignoreCase</code> will be\n   * used to specify the case sensitivity of that set.\n   *\n   * @param enablePositionIncrements true if token positions should record the removed stop words\n   * @param input Input TokenStream\n   * @param stopWords A Set of Strings or char[] or any other toString()-able set representing the stopwords\n   * @param ignoreCase if true, all words are lower cased first\n   * @param ignoreCase -Ignore case when stopping.\n   */\n  public StopFilter(boolean enablePositionIncrements, TokenStream input, Set<?> stopWords, boolean ignoreCase)\n  {\n    super(input);\n    if (stopWords instanceof CharArraySet) {\n      this.stopWords = (CharArraySet)stopWords;\n    } else {\n      this.stopWords = new CharArraySet(stopWords.size(), ignoreCase);\n      this.stopWords.addAll(stopWords);\n    }\n    this.enablePositionIncrements = enablePositionIncrements;\n    termAtt = addAttribute(TermAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n  }\n\n","sourceOld":"  /**\n   * Construct a token stream filtering the given input.\n   * If <code>stopWords</code> is an instance of {@link CharArraySet} (true if\n   * <code>makeStopSet()</code> was used to construct the set) it will be directly used\n   * and <code>ignoreCase</code> will be ignored since <code>CharArraySet</code>\n   * directly controls case sensitivity.\n   * <p/>\n   * If <code>stopWords</code> is not an instance of {@link CharArraySet},\n   * a new CharArraySet will be constructed and <code>ignoreCase</code> will be\n   * used to specify the case sensitivity of that set.\n   *\n   * @param enablePositionIncrements true if token positions should record the removed stop words\n   * @param input Input TokenStream\n   * @param stopWords The set of Stop Words.\n   * @param ignoreCase -Ignore case when stopping.\n   */\n  public StopFilter(boolean enablePositionIncrements, TokenStream input, Set stopWords, boolean ignoreCase)\n  {\n    super(input);\n    if (stopWords instanceof CharArraySet) {\n      this.stopWords = (CharArraySet)stopWords;\n    } else {\n      this.stopWords = new CharArraySet(stopWords.size(), ignoreCase);\n      this.stopWords.addAll(stopWords);\n    }\n    this.enablePositionIncrements = enablePositionIncrements;\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4983c58e0e4597fc599fc70ef2feafd4ad61fbf1","date":1256476130,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/StopFilter#StopFilter(boolean,TokenStream,Set[#],boolean).mjava","pathOld":"src/java/org/apache/lucene/analysis/StopFilter#StopFilter(boolean,TokenStream,Set[#],boolean).mjava","sourceNew":"  /**\n   * Construct a token stream filtering the given input.\n   * If <code>stopWords</code> is an instance of {@link CharArraySet} (true if\n   * <code>makeStopSet()</code> was used to construct the set) it will be directly used\n   * and <code>ignoreCase</code> will be ignored since <code>CharArraySet</code>\n   * directly controls case sensitivity.\n   * <p/>\n   * If <code>stopWords</code> is not an instance of {@link CharArraySet},\n   * a new CharArraySet will be constructed and <code>ignoreCase</code> will be\n   * used to specify the case sensitivity of that set.\n   *\n   * @param enablePositionIncrements true if token positions should record the removed stop words\n   * @param input Input TokenStream\n   * @param stopWords A Set of Strings or char[] or any other toString()-able set representing the stopwords\n   * @param ignoreCase if true, all words are lower cased first\n   */\n  public StopFilter(boolean enablePositionIncrements, TokenStream input, Set<?> stopWords, boolean ignoreCase)\n  {\n    super(input);\n    if (stopWords instanceof CharArraySet) {\n      this.stopWords = (CharArraySet)stopWords;\n    } else {\n      this.stopWords = new CharArraySet(stopWords.size(), ignoreCase);\n      this.stopWords.addAll(stopWords);\n    }\n    this.enablePositionIncrements = enablePositionIncrements;\n    termAtt = addAttribute(TermAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n  }\n\n","sourceOld":"  /**\n   * Construct a token stream filtering the given input.\n   * If <code>stopWords</code> is an instance of {@link CharArraySet} (true if\n   * <code>makeStopSet()</code> was used to construct the set) it will be directly used\n   * and <code>ignoreCase</code> will be ignored since <code>CharArraySet</code>\n   * directly controls case sensitivity.\n   * <p/>\n   * If <code>stopWords</code> is not an instance of {@link CharArraySet},\n   * a new CharArraySet will be constructed and <code>ignoreCase</code> will be\n   * used to specify the case sensitivity of that set.\n   *\n   * @param enablePositionIncrements true if token positions should record the removed stop words\n   * @param input Input TokenStream\n   * @param stopWords A Set of Strings or char[] or any other toString()-able set representing the stopwords\n   * @param ignoreCase if true, all words are lower cased first\n   * @param ignoreCase -Ignore case when stopping.\n   */\n  public StopFilter(boolean enablePositionIncrements, TokenStream input, Set<?> stopWords, boolean ignoreCase)\n  {\n    super(input);\n    if (stopWords instanceof CharArraySet) {\n      this.stopWords = (CharArraySet)stopWords;\n    } else {\n      this.stopWords = new CharArraySet(stopWords.size(), ignoreCase);\n      this.stopWords.addAll(stopWords);\n    }\n    this.enablePositionIncrements = enablePositionIncrements;\n    termAtt = addAttribute(TermAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/StopFilter#StopFilter(boolean,TokenStream,Set[#],boolean).mjava","pathOld":"src/java/org/apache/lucene/analysis/StopFilter#StopFilter(boolean,TokenStream,Set[#],boolean).mjava","sourceNew":"  /**\n   * Construct a token stream filtering the given input.\n   * If <code>stopWords</code> is an instance of {@link CharArraySet} (true if\n   * <code>makeStopSet()</code> was used to construct the set) it will be directly used\n   * and <code>ignoreCase</code> will be ignored since <code>CharArraySet</code>\n   * directly controls case sensitivity.\n   * <p/>\n   * If <code>stopWords</code> is not an instance of {@link CharArraySet},\n   * a new CharArraySet will be constructed and <code>ignoreCase</code> will be\n   * used to specify the case sensitivity of that set.\n   *\n   * @param enablePositionIncrements true if token positions should record the removed stop words\n   * @param input Input TokenStream\n   * @param stopWords A Set of Strings or char[] or any other toString()-able set representing the stopwords\n   * @param ignoreCase if true, all words are lower cased first\n   * @deprecated use {@link #StopFilter(Version, TokenStream, Set, boolean)} instead\n   */\n  public StopFilter(boolean enablePositionIncrements, TokenStream input, Set<?> stopWords, boolean ignoreCase)\n  {\n    this(Version.LUCENE_30, enablePositionIncrements, input, stopWords, ignoreCase);\n  }\n\n","sourceOld":"  /**\n   * Construct a token stream filtering the given input.\n   * If <code>stopWords</code> is an instance of {@link CharArraySet} (true if\n   * <code>makeStopSet()</code> was used to construct the set) it will be directly used\n   * and <code>ignoreCase</code> will be ignored since <code>CharArraySet</code>\n   * directly controls case sensitivity.\n   * <p/>\n   * If <code>stopWords</code> is not an instance of {@link CharArraySet},\n   * a new CharArraySet will be constructed and <code>ignoreCase</code> will be\n   * used to specify the case sensitivity of that set.\n   *\n   * @param enablePositionIncrements true if token positions should record the removed stop words\n   * @param input Input TokenStream\n   * @param stopWords A Set of Strings or char[] or any other toString()-able set representing the stopwords\n   * @param ignoreCase if true, all words are lower cased first\n   */\n  public StopFilter(boolean enablePositionIncrements, TokenStream input, Set<?> stopWords, boolean ignoreCase)\n  {\n    super(input);\n    if (stopWords instanceof CharArraySet) {\n      this.stopWords = (CharArraySet)stopWords;\n    } else {\n      this.stopWords = new CharArraySet(stopWords.size(), ignoreCase);\n      this.stopWords.addAll(stopWords);\n    }\n    this.enablePositionIncrements = enablePositionIncrements;\n    termAtt = addAttribute(TermAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5384d626ad24f6a1d56141ba6b0b144d1b2eafc5","date":1262514702,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/StopFilter#StopFilter(boolean,TokenStream,Set[#],boolean).mjava","pathOld":"src/java/org/apache/lucene/analysis/StopFilter#StopFilter(boolean,TokenStream,Set[#],boolean).mjava","sourceNew":"  /**\n   * Construct a token stream filtering the given input.\n   * If <code>stopWords</code> is an instance of {@link CharArraySet} (true if\n   * <code>makeStopSet()</code> was used to construct the set) it will be directly used\n   * and <code>ignoreCase</code> will be ignored since <code>CharArraySet</code>\n   * directly controls case sensitivity.\n   * <p/>\n   * If <code>stopWords</code> is not an instance of {@link CharArraySet},\n   * a new CharArraySet will be constructed and <code>ignoreCase</code> will be\n   * used to specify the case sensitivity of that set.\n   *\n   * @param enablePositionIncrements true if token positions should record the removed stop words\n   * @param input Input TokenStream\n   * @param stopWords A Set of Strings or char[] or any other toString()-able set representing the stopwords\n   * @param ignoreCase if true, all words are lower cased first\n   * @deprecated use {@link #StopFilter(Version, TokenStream, Set, boolean)} instead\n   */\n  @Deprecated\n  public StopFilter(boolean enablePositionIncrements, TokenStream input, Set<?> stopWords, boolean ignoreCase)\n  {\n    this(Version.LUCENE_30, enablePositionIncrements, input, stopWords, ignoreCase);\n  }\n\n","sourceOld":"  /**\n   * Construct a token stream filtering the given input.\n   * If <code>stopWords</code> is an instance of {@link CharArraySet} (true if\n   * <code>makeStopSet()</code> was used to construct the set) it will be directly used\n   * and <code>ignoreCase</code> will be ignored since <code>CharArraySet</code>\n   * directly controls case sensitivity.\n   * <p/>\n   * If <code>stopWords</code> is not an instance of {@link CharArraySet},\n   * a new CharArraySet will be constructed and <code>ignoreCase</code> will be\n   * used to specify the case sensitivity of that set.\n   *\n   * @param enablePositionIncrements true if token positions should record the removed stop words\n   * @param input Input TokenStream\n   * @param stopWords A Set of Strings or char[] or any other toString()-able set representing the stopwords\n   * @param ignoreCase if true, all words are lower cased first\n   * @deprecated use {@link #StopFilter(Version, TokenStream, Set, boolean)} instead\n   */\n  public StopFilter(boolean enablePositionIncrements, TokenStream input, Set<?> stopWords, boolean ignoreCase)\n  {\n    this(Version.LUCENE_30, enablePositionIncrements, input, stopWords, ignoreCase);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/StopFilter#StopFilter(boolean,TokenStream,Set[#],boolean).mjava","pathOld":"src/java/org/apache/lucene/analysis/StopFilter#StopFilter(boolean,TokenStream,Set[#],boolean).mjava","sourceNew":"  /**\n   * Construct a token stream filtering the given input.\n   * If <code>stopWords</code> is an instance of {@link CharArraySet} (true if\n   * <code>makeStopSet()</code> was used to construct the set) it will be directly used\n   * and <code>ignoreCase</code> will be ignored since <code>CharArraySet</code>\n   * directly controls case sensitivity.\n   * <p/>\n   * If <code>stopWords</code> is not an instance of {@link CharArraySet},\n   * a new CharArraySet will be constructed and <code>ignoreCase</code> will be\n   * used to specify the case sensitivity of that set.\n   *\n   * @param enablePositionIncrements true if token positions should record the removed stop words\n   * @param input Input TokenStream\n   * @param stopWords A Set of Strings or char[] or any other toString()-able set representing the stopwords\n   * @param ignoreCase if true, all words are lower cased first\n   * @deprecated use {@link #StopFilter(Version, TokenStream, Set, boolean)} instead\n   */\n  @Deprecated\n  public StopFilter(boolean enablePositionIncrements, TokenStream input, Set<?> stopWords, boolean ignoreCase)\n  {\n    this(Version.LUCENE_30, enablePositionIncrements, input, stopWords, ignoreCase);\n  }\n\n","sourceOld":"  /**\n   * Construct a token stream filtering the given input.\n   * If <code>stopWords</code> is an instance of {@link CharArraySet} (true if\n   * <code>makeStopSet()</code> was used to construct the set) it will be directly used\n   * and <code>ignoreCase</code> will be ignored since <code>CharArraySet</code>\n   * directly controls case sensitivity.\n   * <p/>\n   * If <code>stopWords</code> is not an instance of {@link CharArraySet},\n   * a new CharArraySet will be constructed and <code>ignoreCase</code> will be\n   * used to specify the case sensitivity of that set.\n   *\n   * @param enablePositionIncrements true if token positions should record the removed stop words\n   * @param input Input TokenStream\n   * @param stopWords A Set of Strings or char[] or any other toString()-able set representing the stopwords\n   * @param ignoreCase if true, all words are lower cased first\n   * @deprecated use {@link #StopFilter(Version, TokenStream, Set, boolean)} instead\n   */\n  @Deprecated\n  public StopFilter(boolean enablePositionIncrements, TokenStream input, Set<?> stopWords, boolean ignoreCase)\n  {\n    this(Version.LUCENE_30, enablePositionIncrements, input, stopWords, ignoreCase);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5384d626ad24f6a1d56141ba6b0b144d1b2eafc5":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"4983c58e0e4597fc599fc70ef2feafd4ad61fbf1":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5384d626ad24f6a1d56141ba6b0b144d1b2eafc5"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["4983c58e0e4597fc599fc70ef2feafd4ad61fbf1"]},"commit2Childs":{"5384d626ad24f6a1d56141ba6b0b144d1b2eafc5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4983c58e0e4597fc599fc70ef2feafd4ad61fbf1":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["4983c58e0e4597fc599fc70ef2feafd4ad61fbf1"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["5384d626ad24f6a1d56141ba6b0b144d1b2eafc5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}