{"path":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds#writeInt(int,byte[],int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds#writeInt(int,byte[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocTermOrds#writeInt(int,byte[],int).mjava","sourceNew":"  // todo: if we know the size of the vInt already, we could do\n  // a single switch on the size\n  private static int writeInt(int x, byte[] arr, int pos) {\n    int a;\n    a = (x >>> (7*4));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*3));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*2));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*1));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    arr[pos++] = (byte)(x & 0x7f);\n    return pos;\n  }\n\n","sourceOld":"  // todo: if we know the size of the vInt already, we could do\n  // a single switch on the size\n  private static int writeInt(int x, byte[] arr, int pos) {\n    int a;\n    a = (x >>> (7*4));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*3));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*2));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*1));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    arr[pos++] = (byte)(x & 0x7f);\n    return pos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28dbdccfa460fb41c33b6d23411572298d589b99","date":1399839432,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds#writeInt(int,byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds#writeInt(int,byte[],int).mjava","sourceNew":"  // todo: if we know the size of the vInt already, we could do\n  // a single switch on the size\n  private static int writeInt(int x, byte[] arr, int pos) {\n    int a;\n    a = (x >>> (7*4));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*3));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*2));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*1));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    arr[pos++] = (byte)(x & 0x7f);\n    return pos;\n  }\n\n","sourceOld":"  // todo: if we know the size of the vInt already, we could do\n  // a single switch on the size\n  private static int writeInt(int x, byte[] arr, int pos) {\n    int a;\n    a = (x >>> (7*4));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*3));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*2));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*1));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    arr[pos++] = (byte)(x & 0x7f);\n    return pos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds#writeInt(int,byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds#writeInt(int,byte[],int).mjava","sourceNew":"  // todo: if we know the size of the vInt already, we could do\n  // a single switch on the size\n  private static int writeInt(int x, byte[] arr, int pos) {\n    int a;\n    a = (x >>> (7*4));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*3));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*2));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*1));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    arr[pos++] = (byte)(x & 0x7f);\n    return pos;\n  }\n\n","sourceOld":"  // todo: if we know the size of the vInt already, we could do\n  // a single switch on the size\n  private static int writeInt(int x, byte[] arr, int pos) {\n    int a;\n    a = (x >>> (7*4));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*3));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*2));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*1));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    arr[pos++] = (byte)(x & 0x7f);\n    return pos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds#writeInt(int,byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds#writeInt(int,byte[],int).mjava","sourceNew":"  // todo: if we know the size of the vInt already, we could do\n  // a single switch on the size\n  private static int writeInt(int x, byte[] arr, int pos) {\n    int a;\n    a = (x >>> (7*4));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*3));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*2));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*1));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    arr[pos++] = (byte)(x & 0x7f);\n    return pos;\n  }\n\n","sourceOld":"  // todo: if we know the size of the vInt already, we could do\n  // a single switch on the size\n  private static int writeInt(int x, byte[] arr, int pos) {\n    int a;\n    a = (x >>> (7*4));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*3));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*2));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*1));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    arr[pos++] = (byte)(x & 0x7f);\n    return pos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"28dbdccfa460fb41c33b6d23411572298d589b99":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","28dbdccfa460fb41c33b6d23411572298d589b99"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56572ec06f1407c066d6b7399413178b33176cd8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"28dbdccfa460fb41c33b6d23411572298d589b99":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["28dbdccfa460fb41c33b6d23411572298d589b99","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}