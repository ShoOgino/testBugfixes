{"path":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#getSolrCore(boolean).mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":1,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#getSolrCore(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#getSolrCore(boolean).mjava","sourceNew":"  private List<SolrCore> getSolrCore(boolean isLeader) {\n    List<SolrCore> rs = new ArrayList<>();\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection docCollection = cloudClient.getZkStateReader().getClusterState().getCollection(collectionName);\n\n    for (JettySolrRunner solrRunner : cluster.getJettySolrRunners()) {\n      if (solrRunner.getCoreContainer() == null) continue;\n      for (SolrCore solrCore : solrRunner.getCoreContainer().getCores()) {\n        CloudDescriptor cloudDescriptor = solrCore.getCoreDescriptor().getCloudDescriptor();\n        Slice slice = docCollection.getSlice(cloudDescriptor.getShardId());\n        Replica replica = docCollection.getReplica(cloudDescriptor.getCoreNodeName());\n        if (slice.getLeader().equals(replica) && isLeader) {\n          rs.add(solrCore);\n        } else if (!slice.getLeader().equals(replica) && !isLeader) {\n          rs.add(solrCore);\n        }\n      }\n    }\n    return rs;\n  }\n\n","sourceOld":"  private List<SolrCore> getSolrCore(boolean isLeader) {\n    List<SolrCore> rs = new ArrayList<>();\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection docCollection = cloudClient.getZkStateReader().getClusterState().getCollection(COLLECTION);\n\n    for (JettySolrRunner solrRunner : cluster.getJettySolrRunners()) {\n      if (solrRunner.getCoreContainer() == null) continue;\n      for (SolrCore solrCore : solrRunner.getCoreContainer().getCores()) {\n        CloudDescriptor cloudDescriptor = solrCore.getCoreDescriptor().getCloudDescriptor();\n        Slice slice = docCollection.getSlice(cloudDescriptor.getShardId());\n        Replica replica = docCollection.getReplica(cloudDescriptor.getCoreNodeName());\n        if (slice.getLeader() == replica && isLeader) {\n          rs.add(solrCore);\n        } else if (slice.getLeader() != replica && !isLeader) {\n          rs.add(solrCore);\n        }\n      }\n    }\n    return rs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#getSolrCore(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private List<SolrCore> getSolrCore(boolean isLeader) {\n    List<SolrCore> rs = new ArrayList<>();\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection docCollection = cloudClient.getZkStateReader().getClusterState().getCollection(collectionName);\n\n    for (JettySolrRunner solrRunner : cluster.getJettySolrRunners()) {\n      if (solrRunner.getCoreContainer() == null) continue;\n      for (SolrCore solrCore : solrRunner.getCoreContainer().getCores()) {\n        CloudDescriptor cloudDescriptor = solrCore.getCoreDescriptor().getCloudDescriptor();\n        Slice slice = docCollection.getSlice(cloudDescriptor.getShardId());\n        Replica replica = docCollection.getReplica(cloudDescriptor.getCoreNodeName());\n        if (slice.getLeader().equals(replica) && isLeader) {\n          rs.add(solrCore);\n        } else if (!slice.getLeader().equals(replica) && !isLeader) {\n          rs.add(solrCore);\n        }\n      }\n    }\n    return rs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61c45e99cf6676da48f19d7511c73712ad39402b"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}