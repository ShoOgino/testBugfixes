{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createField(SimpleSpatialFieldInfo,Shape,boolean,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createField(SimpleSpatialFieldInfo,Shape,boolean,boolean).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createField(SimpleSpatialFieldInfo,Shape,boolean,boolean).mjava","sourceNew":"  @Override\n  public IndexableField createField(SimpleSpatialFieldInfo fieldInfo, Shape shape, boolean index, boolean store) {\n    int detailLevel = grid.getMaxLevelForPrecision(shape,distErrPct);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n    //If shape isn't a point, add a full-resolution center-point so that\n    // PrefixFieldCacheProvider has the center-points.\n    // TODO index each center of a multi-point? Yes/no?\n    if (!(shape instanceof Point)) {\n      Point ctr = shape.getCenter();\n      //TODO should be smarter; don't index 2 tokens for this in CellTokenizer. Harmless though.\n      cells.add(grid.getNodes(ctr,grid.getMaxLevels(),false).get(0));\n    }\n\n    String fname = fieldInfo.getFieldName();\n    if( store ) {\n      //TODO figure out how to re-use original string instead of reconstituting it.\n      String wkt = grid.getSpatialContext().toString(shape);\n      if( index ) {\n        Field f = new Field(fname,wkt,TYPE_STORED);\n        f.setTokenStream(new CellTokenStream(cells.iterator()));\n        return f;\n      }\n      return new StoredField(fname,wkt);\n    }\n    \n    if( index ) {\n      return new Field(fname,new CellTokenStream(cells.iterator()),TYPE_UNSTORED);\n    }\n    \n    throw new UnsupportedOperationException(\"Fields need to be indexed or store [\"+fname+\"]\");\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SimpleSpatialFieldInfo fieldInfo, Shape shape, boolean index, boolean store) {\n    int detailLevel = grid.getMaxLevelForPrecision(shape,distErrPct);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n    //If shape isn't a point, add a full-resolution center-point so that\n    // PrefixFieldCacheProvider has the center-points.\n    // TODO index each center of a multi-point? Yes/no?\n    if (!(shape instanceof Point)) {\n      Point ctr = shape.getCenter();\n      //TODO should be smarter; don't index 2 tokens for this in CellTokenizer. Harmless though.\n      cells.add(grid.getNodes(ctr,grid.getMaxLevels(),false).get(0));\n    }\n\n    String fname = fieldInfo.getFieldName();\n    if( store ) {\n      //TODO figure out how to re-use original string instead of reconstituting it.\n      String wkt = grid.getSpatialContext().toString(shape);\n      if( index ) {\n        Field f = new Field(fname,wkt,TYPE_STORED);\n        f.setTokenStream(new CellTokenStream(cells.iterator()));\n        return f;\n      }\n      return new StoredField(fname,wkt);\n    }\n    \n    if( index ) {\n      return new Field(fname,new CellTokenStream(cells.iterator()),TYPE_UNSTORED);\n    }\n    \n    throw new UnsupportedOperationException(\"Fields need to be indexed or store [\"+fname+\"]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createField(SimpleSpatialFieldInfo,Shape,boolean,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createField(SimpleSpatialFieldInfo,Shape,boolean,boolean).mjava","sourceNew":"  @Override\n  public IndexableField createField(SimpleSpatialFieldInfo fieldInfo, Shape shape, boolean index, boolean store) {\n    int detailLevel = grid.getMaxLevelForPrecision(shape,distErrPct);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n    //If shape isn't a point, add a full-resolution center-point so that\n    // PrefixFieldCacheProvider has the center-points.\n    // TODO index each center of a multi-point? Yes/no?\n    if (!(shape instanceof Point)) {\n      Point ctr = shape.getCenter();\n      //TODO should be smarter; don't index 2 tokens for this in CellTokenizer. Harmless though.\n      cells.add(grid.getNodes(ctr,grid.getMaxLevels(),false).get(0));\n    }\n\n    String fname = fieldInfo.getFieldName();\n    if( store ) {\n      //TODO figure out how to re-use original string instead of reconstituting it.\n      String wkt = grid.getSpatialContext().toString(shape);\n      if( index ) {\n        Field f = new Field(fname,wkt,TYPE_STORED);\n        f.setTokenStream(new CellTokenStream(cells.iterator()));\n        return f;\n      }\n      return new StoredField(fname,wkt);\n    }\n    \n    if( index ) {\n      return new Field(fname,new CellTokenStream(cells.iterator()),TYPE_NOT_STORED);\n    }\n    \n    throw new UnsupportedOperationException(\"Fields need to be indexed or store [\"+fname+\"]\");\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SimpleSpatialFieldInfo fieldInfo, Shape shape, boolean index, boolean store) {\n    int detailLevel = grid.getMaxLevelForPrecision(shape,distErrPct);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n    //If shape isn't a point, add a full-resolution center-point so that\n    // PrefixFieldCacheProvider has the center-points.\n    // TODO index each center of a multi-point? Yes/no?\n    if (!(shape instanceof Point)) {\n      Point ctr = shape.getCenter();\n      //TODO should be smarter; don't index 2 tokens for this in CellTokenizer. Harmless though.\n      cells.add(grid.getNodes(ctr,grid.getMaxLevels(),false).get(0));\n    }\n\n    String fname = fieldInfo.getFieldName();\n    if( store ) {\n      //TODO figure out how to re-use original string instead of reconstituting it.\n      String wkt = grid.getSpatialContext().toString(shape);\n      if( index ) {\n        Field f = new Field(fname,wkt,TYPE_STORED);\n        f.setTokenStream(new CellTokenStream(cells.iterator()));\n        return f;\n      }\n      return new StoredField(fname,wkt);\n    }\n    \n    if( index ) {\n      return new Field(fname,new CellTokenStream(cells.iterator()),TYPE_UNSTORED);\n    }\n    \n    throw new UnsupportedOperationException(\"Fields need to be indexed or store [\"+fname+\"]\");\n  }\n\n","bugFix":["b17c5c53627893d93f9261826cc6d9c447c5ee3a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b86c66b8ec7ad1e131e634ec57fa65fb900deff3","date":1340911206,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createField(SimpleSpatialFieldInfo,Shape,boolean,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createField(SimpleSpatialFieldInfo,Shape,boolean,boolean).mjava","sourceNew":"  @Override\n  public IndexableField createField(SimpleSpatialFieldInfo fieldInfo, Shape shape, boolean index, boolean store) {\n    int detailLevel = grid.getMaxLevelForPrecision(shape,distErrPct);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n    //If shape isn't a point, add a full-resolution center-point so that\n    // PrefixFieldCacheProvider has the center-points.\n    // TODO index each center of a multi-point? Yes/no?\n    if (!(shape instanceof Point)) {\n      Point ctr = shape.getCenter();\n      //TODO should be smarter; don't index 2 tokens for this in CellTokenizer. Harmless though.\n      cells.add(grid.getNodes(ctr,grid.getMaxLevels(),false).get(0));\n    }\n\n    //TODO is CellTokenStream supposed to be re-used somehow? see Uwe's comments:\n    //  http://code.google.com/p/lucene-spatial-playground/issues/detail?id=4\n\n    String fname = fieldInfo.getFieldName();\n    if( store ) {\n      //TODO figure out how to re-use original string instead of reconstituting it.\n      String wkt = grid.getSpatialContext().toString(shape);\n      if( index ) {\n        Field f = new Field(fname,wkt,TYPE_STORED);\n        f.setTokenStream(new CellTokenStream(cells.iterator()));\n        return f;\n      }\n      return new StoredField(fname,wkt);\n    }\n    \n    if( index ) {\n      return new Field(fname,new CellTokenStream(cells.iterator()),TYPE_NOT_STORED);\n    }\n    \n    throw new UnsupportedOperationException(\"Fields need to be indexed or store [\"+fname+\"]\");\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SimpleSpatialFieldInfo fieldInfo, Shape shape, boolean index, boolean store) {\n    int detailLevel = grid.getMaxLevelForPrecision(shape,distErrPct);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n    //If shape isn't a point, add a full-resolution center-point so that\n    // PrefixFieldCacheProvider has the center-points.\n    // TODO index each center of a multi-point? Yes/no?\n    if (!(shape instanceof Point)) {\n      Point ctr = shape.getCenter();\n      //TODO should be smarter; don't index 2 tokens for this in CellTokenizer. Harmless though.\n      cells.add(grid.getNodes(ctr,grid.getMaxLevels(),false).get(0));\n    }\n\n    String fname = fieldInfo.getFieldName();\n    if( store ) {\n      //TODO figure out how to re-use original string instead of reconstituting it.\n      String wkt = grid.getSpatialContext().toString(shape);\n      if( index ) {\n        Field f = new Field(fname,wkt,TYPE_STORED);\n        f.setTokenStream(new CellTokenStream(cells.iterator()));\n        return f;\n      }\n      return new StoredField(fname,wkt);\n    }\n    \n    if( index ) {\n      return new Field(fname,new CellTokenStream(cells.iterator()),TYPE_NOT_STORED);\n    }\n    \n    throw new UnsupportedOperationException(\"Fields need to be indexed or store [\"+fname+\"]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0415a016b37e58a017fed0a91234f733ab359971","date":1341458183,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createField(Shape,boolean,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createField(SimpleSpatialFieldInfo,Shape,boolean,boolean).mjava","sourceNew":"  @Override\n  public IndexableField createField(Shape shape, boolean index, boolean store) {\n    int detailLevel = grid.getMaxLevelForPrecision(shape,distErrPct);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n    //If shape isn't a point, add a full-resolution center-point so that\n    // PrefixFieldCacheProvider has the center-points.\n    // TODO index each center of a multi-point? Yes/no?\n    if (!(shape instanceof Point)) {\n      Point ctr = shape.getCenter();\n      //TODO should be smarter; don't index 2 tokens for this in CellTokenizer. Harmless though.\n      cells.add(grid.getNodes(ctr,grid.getMaxLevels(),false).get(0));\n    }\n\n    //TODO is CellTokenStream supposed to be re-used somehow? see Uwe's comments:\n    //  http://code.google.com/p/lucene-spatial-playground/issues/detail?id=4\n\n    String fname = getFieldName();\n    if( store ) {\n      //TODO figure out how to re-use original string instead of reconstituting it.\n      String wkt = grid.getSpatialContext().toString(shape);\n      if( index ) {\n        Field f = new Field(fname,wkt,TYPE_STORED);\n        f.setTokenStream(new CellTokenStream(cells.iterator()));\n        return f;\n      }\n      return new StoredField(fname,wkt);\n    }\n    \n    if( index ) {\n      return new Field(fname,new CellTokenStream(cells.iterator()),TYPE_NOT_STORED);\n    }\n    \n    throw new UnsupportedOperationException(\"Fields need to be indexed or store [\"+fname+\"]\");\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SimpleSpatialFieldInfo fieldInfo, Shape shape, boolean index, boolean store) {\n    int detailLevel = grid.getMaxLevelForPrecision(shape,distErrPct);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n    //If shape isn't a point, add a full-resolution center-point so that\n    // PrefixFieldCacheProvider has the center-points.\n    // TODO index each center of a multi-point? Yes/no?\n    if (!(shape instanceof Point)) {\n      Point ctr = shape.getCenter();\n      //TODO should be smarter; don't index 2 tokens for this in CellTokenizer. Harmless though.\n      cells.add(grid.getNodes(ctr,grid.getMaxLevels(),false).get(0));\n    }\n\n    //TODO is CellTokenStream supposed to be re-used somehow? see Uwe's comments:\n    //  http://code.google.com/p/lucene-spatial-playground/issues/detail?id=4\n\n    String fname = fieldInfo.getFieldName();\n    if( store ) {\n      //TODO figure out how to re-use original string instead of reconstituting it.\n      String wkt = grid.getSpatialContext().toString(shape);\n      if( index ) {\n        Field f = new Field(fname,wkt,TYPE_STORED);\n        f.setTokenStream(new CellTokenStream(cells.iterator()));\n        return f;\n      }\n      return new StoredField(fname,wkt);\n    }\n    \n    if( index ) {\n      return new Field(fname,new CellTokenStream(cells.iterator()),TYPE_NOT_STORED);\n    }\n    \n    throw new UnsupportedOperationException(\"Fields need to be indexed or store [\"+fname+\"]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createField(SimpleSpatialFieldInfo,Shape,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public IndexableField createField(SimpleSpatialFieldInfo fieldInfo, Shape shape, boolean index, boolean store) {\n    int detailLevel = grid.getMaxLevelForPrecision(shape,distErrPct);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n    //If shape isn't a point, add a full-resolution center-point so that\n    // PrefixFieldCacheProvider has the center-points.\n    // TODO index each center of a multi-point? Yes/no?\n    if (!(shape instanceof Point)) {\n      Point ctr = shape.getCenter();\n      //TODO should be smarter; don't index 2 tokens for this in CellTokenizer. Harmless though.\n      cells.add(grid.getNodes(ctr,grid.getMaxLevels(),false).get(0));\n    }\n\n    String fname = fieldInfo.getFieldName();\n    if( store ) {\n      //TODO figure out how to re-use original string instead of reconstituting it.\n      String wkt = grid.getSpatialContext().toString(shape);\n      if( index ) {\n        Field f = new Field(fname,wkt,TYPE_STORED);\n        f.setTokenStream(new CellTokenStream(cells.iterator()));\n        return f;\n      }\n      return new StoredField(fname,wkt);\n    }\n    \n    if( index ) {\n      return new Field(fname,new CellTokenStream(cells.iterator()),TYPE_NOT_STORED);\n    }\n    \n    throw new UnsupportedOperationException(\"Fields need to be indexed or store [\"+fname+\"]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0415a016b37e58a017fed0a91234f733ab359971":["b86c66b8ec7ad1e131e634ec57fa65fb900deff3"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["04f07771a2a7dd3a395700665ed839c3dae2def2","0415a016b37e58a017fed0a91234f733ab359971"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b86c66b8ec7ad1e131e634ec57fa65fb900deff3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0415a016b37e58a017fed0a91234f733ab359971"]},"commit2Childs":{"0415a016b37e58a017fed0a91234f733ab359971":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["fe33227f6805edab2036cbb80645cc4e2d1fa424","b86c66b8ec7ad1e131e634ec57fa65fb900deff3"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b86c66b8ec7ad1e131e634ec57fa65fb900deff3":["0415a016b37e58a017fed0a91234f733ab359971"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}