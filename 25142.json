{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State).mjava","sourceNew":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, Replica.State stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler);\n    }\n\n    processResponses(results, shardHandler);\n\n  }\n\n","sourceOld":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, Replica.State stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler);\n    }\n\n    processResponses(results, shardHandler);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bbb741690cdafda7f1f7549c26351c912917a69","date":1453203134,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State).mjava","sourceNew":"  private void collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                             NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Slice slice : coll.getSlices()) {\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap);\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap);\n\n  }\n\n","sourceOld":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, Replica.State stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler);\n    }\n\n    processResponses(results, shardHandler);\n\n  }\n\n","bugFix":null,"bugIntro":["06263309947a9804c326e35ce627be8768e123a4","06263309947a9804c326e35ce627be8768e123a4"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3bbb741690cdafda7f1f7549c26351c912917a69":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bbb741690cdafda7f1f7549c26351c912917a69"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["3bbb741690cdafda7f1f7549c26351c912917a69"],"3bbb741690cdafda7f1f7549c26351c912917a69":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}