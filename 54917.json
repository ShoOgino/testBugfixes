{"path":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#monitorZookeeper(String).mjava","commits":[{"id":"01f63edf15d2e3dbb3355d974f733b263098cb46","date":1533724999,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#monitorZookeeper(String).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String, Object> monitorZookeeper(String zkHostPort) {\n    List<String> lines = getZkRawResponse(zkHostPort, \"mntr\");\n    Map<String, Object> obj = new HashMap<>();\n    obj.put(\"host\", zkHostPort);\n    obj.put(\"ok\", \"imok\".equals(getZkRawResponse(zkHostPort, \"ruok\").get(0)));\n    for (String line : lines) {\n      obj.put(line.split(\"\\t\")[0], line.split(\"\\t\")[1]);\n    }\n    lines = getZkRawResponse(zkHostPort, \"conf\");\n    for (String line : lines) {\n      obj.put(line.split(\"=\")[0], line.split(\"=\")[1]);\n    }\n    return obj;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#monitorZookeeper(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#monitorZookeeper(String).mjava","sourceNew":"  private Map<String, Object> monitorZookeeper(String zkHostPort) throws SolrException {\n    Map<String, Object> obj = new HashMap<>();\n    obj.put(\"host\", zkHostPort);\n    List<String> lines = getZkRawResponse(zkHostPort, \"ruok\");\n    boolean ok = \"imok\".equals(lines.get(0));\n    if (ok == false) {\n      log.warn(\"Check 4lw.commands.whitelist setting in zookeeper configuration file, ZK response {}\", lines.get(0));\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, lines.get(0) + \" Check 4lw.commands.whitelist setting in zookeeper configuration file.\");\n    }\n    obj.put(\"ok\", ok);\n    lines = getZkRawResponse(zkHostPort, \"mntr\");\n    String[] parts;\n    for (String line : lines) {\n      parts = line.split(\"\\t\");\n      if (parts.length >= 2) {\n        obj.put(parts[0], parts[1]);\n      } else {\n        log.warn(\"Check 4lw.commands.whitelist setting in zookeeper configuration file, ZK response {}\", line);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, line + \" Check 4lw.commands.whitelist setting in zookeeper configuration file.\");\n      }\n    }\n    lines = getZkRawResponse(zkHostPort, \"conf\");\n\n    for (String line : lines) {\n      parts = line.split(\"=\");\n      if (parts.length >= 2) {\n        obj.put(parts[0], parts[1]);\n      } else {\n        log.warn(\"Check 4lw.commands.whitelist setting in zookeeper configuration file, ZK response {}\", line);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, line + \" Check 4lw.commands.whitelist setting in zookeeper configuration file.\");\n      }\n    }\n    return obj;\n  }\n\n","sourceOld":"  private Map<String, Object> monitorZookeeper(String zkHostPort) {\n    List<String> lines = getZkRawResponse(zkHostPort, \"mntr\");\n    Map<String, Object> obj = new HashMap<>();\n    obj.put(\"host\", zkHostPort);\n    obj.put(\"ok\", \"imok\".equals(getZkRawResponse(zkHostPort, \"ruok\").get(0)));\n    for (String line : lines) {\n      obj.put(line.split(\"\\t\")[0], line.split(\"\\t\")[1]);\n    }\n    lines = getZkRawResponse(zkHostPort, \"conf\");\n    for (String line : lines) {\n      obj.put(line.split(\"=\")[0], line.split(\"=\")[1]);\n    }\n    return obj;\n  }\n\n","bugFix":null,"bugIntro":["8f5c7f5182346fe6abaab42f901d3728750aa0bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a9d28c0d6cbf63ba7920846fc5e87502b8ed9dc","date":1564743680,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#monitorZookeeper(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#monitorZookeeper(String).mjava","sourceNew":"  private Map<String, Object> monitorZookeeper(String zkHostPort) throws SolrException {\n    Map<String, Object> obj = new HashMap<>();\n    List<String> errors = new ArrayList<>();\n    obj.put(\"host\", zkHostPort);\n    List<String> lines = getZkRawResponse(zkHostPort, \"ruok\");\n    boolean ok = \"imok\".equals(lines.get(0));\n    obj.put(\"ok\", ok);\n    lines = getZkRawResponse(zkHostPort, \"mntr\");\n    for (String line : lines) {\n      String[] parts = line.split(\"\\t\");\n      if (parts.length >= 2) {\n        obj.put(parts[0], parts[1]);\n      } else {\n        String err = String.format(\"Unexpected line in 'mntr' response from Zookeeper %s: %s\", zkHostPort, line);\n        log.warn(err);\n        errors.add(err);\n      }\n    }\n    lines = getZkRawResponse(zkHostPort, \"conf\");\n    for (String line : lines) {\n      String[] parts = line.split(\"=\");\n      if (parts.length >= 2) {\n        obj.put(parts[0], parts[1]);\n      } else if (!line.startsWith(\"membership:\")) {\n        String err = String.format(\"Unexpected line in 'conf' response from Zookeeper %s: %s\", zkHostPort, line);\n        log.warn(err);\n        errors.add(err);\n      }\n    }\n    obj.put(\"errors\", errors);\n    return obj;\n  }\n\n","sourceOld":"  private Map<String, Object> monitorZookeeper(String zkHostPort) throws SolrException {\n    Map<String, Object> obj = new HashMap<>();\n    obj.put(\"host\", zkHostPort);\n    List<String> lines = getZkRawResponse(zkHostPort, \"ruok\");\n    boolean ok = \"imok\".equals(lines.get(0));\n    if (ok == false) {\n      log.warn(\"Check 4lw.commands.whitelist setting in zookeeper configuration file, ZK response {}\", lines.get(0));\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, lines.get(0) + \" Check 4lw.commands.whitelist setting in zookeeper configuration file.\");\n    }\n    obj.put(\"ok\", ok);\n    lines = getZkRawResponse(zkHostPort, \"mntr\");\n    String[] parts;\n    for (String line : lines) {\n      parts = line.split(\"\\t\");\n      if (parts.length >= 2) {\n        obj.put(parts[0], parts[1]);\n      } else {\n        log.warn(\"Check 4lw.commands.whitelist setting in zookeeper configuration file, ZK response {}\", line);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, line + \" Check 4lw.commands.whitelist setting in zookeeper configuration file.\");\n      }\n    }\n    lines = getZkRawResponse(zkHostPort, \"conf\");\n\n    for (String line : lines) {\n      parts = line.split(\"=\");\n      if (parts.length >= 2) {\n        obj.put(parts[0], parts[1]);\n      } else {\n        log.warn(\"Check 4lw.commands.whitelist setting in zookeeper configuration file, ZK response {}\", line);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, line + \" Check 4lw.commands.whitelist setting in zookeeper configuration file.\");\n      }\n    }\n    return obj;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e08cb336d64c53393bb8a1b09f3af187b885f626","date":1564751020,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#monitorZookeeper(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#monitorZookeeper(String).mjava","sourceNew":"  protected Map<String, Object> monitorZookeeper(String zkHostPort) throws SolrException {\n    Map<String, Object> obj = new HashMap<>();\n    List<String> errors = new ArrayList<>();\n    obj.put(\"host\", zkHostPort);\n    List<String> lines = getZkRawResponse(zkHostPort, \"ruok\");\n    validateZkRawResponse(lines, zkHostPort,\"ruok\");\n    boolean ok = \"imok\".equals(lines.get(0));\n    obj.put(\"ok\", ok);\n    lines = getZkRawResponse(zkHostPort, \"mntr\");\n    validateZkRawResponse(lines, zkHostPort,\"mntr\");\n    for (String line : lines) {\n      String[] parts = line.split(\"\\t\");\n      if (parts.length >= 2) {\n        obj.put(parts[0], parts[1]);\n      } else {\n        String err = String.format(Locale.ENGLISH, \"Unexpected line in 'mntr' response from Zookeeper %s: %s\", zkHostPort, line);\n        log.warn(err);\n        errors.add(err);\n      }\n    }\n    lines = getZkRawResponse(zkHostPort, \"conf\");\n    validateZkRawResponse(lines, zkHostPort,\"conf\");\n    for (String line : lines) {\n      String[] parts = line.split(\"=\");\n      if (parts.length >= 2) {\n        obj.put(parts[0], parts[1]);\n      } else if (!line.startsWith(\"membership:\")) {\n        String err = String.format(Locale.ENGLISH, \"Unexpected line in 'conf' response from Zookeeper %s: %s\", zkHostPort, line);\n        log.warn(err);\n        errors.add(err);\n      }\n    }\n    obj.put(\"errors\", errors);\n    return obj;\n  }\n\n","sourceOld":"  private Map<String, Object> monitorZookeeper(String zkHostPort) throws SolrException {\n    Map<String, Object> obj = new HashMap<>();\n    List<String> errors = new ArrayList<>();\n    obj.put(\"host\", zkHostPort);\n    List<String> lines = getZkRawResponse(zkHostPort, \"ruok\");\n    boolean ok = \"imok\".equals(lines.get(0));\n    obj.put(\"ok\", ok);\n    lines = getZkRawResponse(zkHostPort, \"mntr\");\n    for (String line : lines) {\n      String[] parts = line.split(\"\\t\");\n      if (parts.length >= 2) {\n        obj.put(parts[0], parts[1]);\n      } else {\n        String err = String.format(\"Unexpected line in 'mntr' response from Zookeeper %s: %s\", zkHostPort, line);\n        log.warn(err);\n        errors.add(err);\n      }\n    }\n    lines = getZkRawResponse(zkHostPort, \"conf\");\n    for (String line : lines) {\n      String[] parts = line.split(\"=\");\n      if (parts.length >= 2) {\n        obj.put(parts[0], parts[1]);\n      } else if (!line.startsWith(\"membership:\")) {\n        String err = String.format(\"Unexpected line in 'conf' response from Zookeeper %s: %s\", zkHostPort, line);\n        log.warn(err);\n        errors.add(err);\n      }\n    }\n    obj.put(\"errors\", errors);\n    return obj;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"97c197c6cb87b8c1babbdf9da5ed1f03c39e540d","date":1565097570,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#monitorZookeeper(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#monitorZookeeper(String).mjava","sourceNew":"  protected Map<String, Object> monitorZookeeper(String zkHostPort) throws SolrException {\n    Map<String, Object> obj = new HashMap<>();\n    List<String> errors = new ArrayList<>();\n    obj.put(\"host\", zkHostPort);\n    List<String> lines = getZkRawResponse(zkHostPort, \"ruok\");\n    validateZkRawResponse(lines, zkHostPort, \"ruok\");\n    boolean ok = \"imok\".equals(lines.get(0));\n    obj.put(\"ok\", ok);\n    lines = getZkRawResponse(zkHostPort, \"mntr\");\n    validateZkRawResponse(lines, zkHostPort, \"mntr\");\n    for (String line : lines) {\n      String[] parts = line.split(\"\\t\");\n      if (parts.length >= 2) {\n        obj.put(parts[0], parts[1]);\n      } else {\n        String err = String.format(Locale.ENGLISH, \"Unexpected line in 'mntr' response from Zookeeper %s: %s\", zkHostPort, line);\n        log.warn(err);\n        errors.add(err);\n      }\n    }\n    lines = getZkRawResponse(zkHostPort, \"conf\");\n    validateZkRawResponse(lines, zkHostPort, \"conf\");\n    for (String line : lines) {\n      String[] parts = line.split(\"=\");\n      if (parts.length >= 2) {\n        obj.put(parts[0], parts[1]);\n      } else if (!line.startsWith(\"membership:\")) {\n        String err = String.format(Locale.ENGLISH, \"Unexpected line in 'conf' response from Zookeeper %s: %s\", zkHostPort, line);\n        log.warn(err);\n        errors.add(err);\n      }\n    }\n    obj.put(\"errors\", errors);\n    return obj;\n  }\n\n","sourceOld":"  protected Map<String, Object> monitorZookeeper(String zkHostPort) throws SolrException {\n    Map<String, Object> obj = new HashMap<>();\n    List<String> errors = new ArrayList<>();\n    obj.put(\"host\", zkHostPort);\n    List<String> lines = getZkRawResponse(zkHostPort, \"ruok\");\n    validateZkRawResponse(lines, zkHostPort,\"ruok\");\n    boolean ok = \"imok\".equals(lines.get(0));\n    obj.put(\"ok\", ok);\n    lines = getZkRawResponse(zkHostPort, \"mntr\");\n    validateZkRawResponse(lines, zkHostPort,\"mntr\");\n    for (String line : lines) {\n      String[] parts = line.split(\"\\t\");\n      if (parts.length >= 2) {\n        obj.put(parts[0], parts[1]);\n      } else {\n        String err = String.format(Locale.ENGLISH, \"Unexpected line in 'mntr' response from Zookeeper %s: %s\", zkHostPort, line);\n        log.warn(err);\n        errors.add(err);\n      }\n    }\n    lines = getZkRawResponse(zkHostPort, \"conf\");\n    validateZkRawResponse(lines, zkHostPort,\"conf\");\n    for (String line : lines) {\n      String[] parts = line.split(\"=\");\n      if (parts.length >= 2) {\n        obj.put(parts[0], parts[1]);\n      } else if (!line.startsWith(\"membership:\")) {\n        String err = String.format(Locale.ENGLISH, \"Unexpected line in 'conf' response from Zookeeper %s: %s\", zkHostPort, line);\n        log.warn(err);\n        errors.add(err);\n      }\n    }\n    obj.put(\"errors\", errors);\n    return obj;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f5c7f5182346fe6abaab42f901d3728750aa0bc","date":1565161837,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#monitorZookeeper(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#monitorZookeeper(String).mjava","sourceNew":"  protected Map<String, Object> monitorZookeeper(String zkHostPort) throws SolrException {\n    Map<String, Object> obj = new HashMap<>();\n    List<String> errors = new ArrayList<>();\n    obj.put(\"host\", zkHostPort);\n    List<String> lines = getZkRawResponse(zkHostPort, \"ruok\");\n    validateZkRawResponse(lines, zkHostPort, \"ruok\");\n    boolean ok = \"imok\".equals(lines.get(0));\n    obj.put(\"ok\", ok);\n    lines = getZkRawResponse(zkHostPort, \"mntr\");\n    validateZkRawResponse(lines, zkHostPort, \"mntr\");\n    for (String line : lines) {\n      String[] parts = line.split(\"\\t\");\n      if (parts.length >= 2) {\n        obj.put(parts[0], parts[1]);\n      } else {\n        String err = String.format(Locale.ENGLISH, \"Unexpected line in 'mntr' response from Zookeeper %s: %s\", zkHostPort, line);\n        log.warn(err);\n        errors.add(err);\n      }\n    }\n    lines = getZkRawResponse(zkHostPort, \"conf\");\n    validateZkRawResponse(lines, zkHostPort, \"conf\");\n    for (String line : lines) {\n      String[] parts = line.split(\"=\");\n      if (parts.length >= 2) {\n        obj.put(parts[0], parts[1]);\n      } else if (!line.startsWith(\"membership:\")) {\n        String err = String.format(Locale.ENGLISH, \"Unexpected line in 'conf' response from Zookeeper %s: %s\", zkHostPort, line);\n        log.warn(err);\n        errors.add(err);\n      }\n    }\n    obj.put(\"errors\", errors);\n    return obj;\n  }\n\n","sourceOld":"  private Map<String, Object> monitorZookeeper(String zkHostPort) throws SolrException {\n    Map<String, Object> obj = new HashMap<>();\n    obj.put(\"host\", zkHostPort);\n    List<String> lines = getZkRawResponse(zkHostPort, \"ruok\");\n    boolean ok = \"imok\".equals(lines.get(0));\n    if (ok == false) {\n      log.warn(\"Check 4lw.commands.whitelist setting in zookeeper configuration file, ZK response {}\", lines.get(0));\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, lines.get(0) + \" Check 4lw.commands.whitelist setting in zookeeper configuration file.\");\n    }\n    obj.put(\"ok\", ok);\n    lines = getZkRawResponse(zkHostPort, \"mntr\");\n    String[] parts;\n    for (String line : lines) {\n      parts = line.split(\"\\t\");\n      if (parts.length >= 2) {\n        obj.put(parts[0], parts[1]);\n      } else {\n        log.warn(\"Check 4lw.commands.whitelist setting in zookeeper configuration file, ZK response {}\", line);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, line + \" Check 4lw.commands.whitelist setting in zookeeper configuration file.\");\n      }\n    }\n    lines = getZkRawResponse(zkHostPort, \"conf\");\n\n    for (String line : lines) {\n      parts = line.split(\"=\");\n      if (parts.length >= 2) {\n        obj.put(parts[0], parts[1]);\n      } else {\n        log.warn(\"Check 4lw.commands.whitelist setting in zookeeper configuration file, ZK response {}\", line);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, line + \" Check 4lw.commands.whitelist setting in zookeeper configuration file.\");\n      }\n    }\n    return obj;\n  }\n\n","bugFix":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e08cb336d64c53393bb8a1b09f3af187b885f626":["1a9d28c0d6cbf63ba7920846fc5e87502b8ed9dc"],"8f5c7f5182346fe6abaab42f901d3728750aa0bc":["1778938cb7fb298e6e07a43e2d5acaf552d61518","97c197c6cb87b8c1babbdf9da5ed1f03c39e540d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a9d28c0d6cbf63ba7920846fc5e87502b8ed9dc":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"01f63edf15d2e3dbb3355d974f733b263098cb46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["01f63edf15d2e3dbb3355d974f733b263098cb46"],"97c197c6cb87b8c1babbdf9da5ed1f03c39e540d":["e08cb336d64c53393bb8a1b09f3af187b885f626"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8f5c7f5182346fe6abaab42f901d3728750aa0bc"]},"commit2Childs":{"e08cb336d64c53393bb8a1b09f3af187b885f626":["97c197c6cb87b8c1babbdf9da5ed1f03c39e540d"],"8f5c7f5182346fe6abaab42f901d3728750aa0bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01f63edf15d2e3dbb3355d974f733b263098cb46"],"1a9d28c0d6cbf63ba7920846fc5e87502b8ed9dc":["e08cb336d64c53393bb8a1b09f3af187b885f626"],"01f63edf15d2e3dbb3355d974f733b263098cb46":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["8f5c7f5182346fe6abaab42f901d3728750aa0bc","1a9d28c0d6cbf63ba7920846fc5e87502b8ed9dc"],"97c197c6cb87b8c1babbdf9da5ed1f03c39e540d":["8f5c7f5182346fe6abaab42f901d3728750aa0bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}