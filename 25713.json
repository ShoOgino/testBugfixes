{"path":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#setMinCompetitiveScore(float).mjava","commits":[{"id":"3c5054bf15748079a041f921a9178e8fe84f1806","date":1514554505,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#setMinCompetitiveScore(float).mjava","pathOld":"/dev/null","sourceNew":"  public void setMinCompetitiveScore(float minScoreSum) {\n    for (int i = 0; i < numClauses; ++i) {\n      double sumOfOtherMaxScores = this.sumOfOtherMaxScores[i];\n      float minCompetitiveScore = getMinCompetitiveScore(minScoreSum, sumOfOtherMaxScores);\n      if (minCompetitiveScore <= 0) {\n        // given that scorers are sorted by decreasing max score, next scorers will\n        // have 0 as a minimum competitive score too\n        break;\n      }\n      scorers[i].setMinCompetitiveScore(minCompetitiveScore);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#setMinCompetitiveScore(float).mjava","sourceNew":null,"sourceOld":"  public void setMinCompetitiveScore(float minScoreSum) {\n    for (int i = 0; i < numClauses; ++i) {\n      double sumOfOtherMaxScores = this.sumOfOtherMaxScores[i];\n      float minCompetitiveScore = getMinCompetitiveScore(minScoreSum, sumOfOtherMaxScores);\n      if (minCompetitiveScore <= 0) {\n        // given that scorers are sorted by decreasing max score, next scorers will\n        // have 0 as a minimum competitive score too\n        break;\n      }\n      scorers[i].setMinCompetitiveScore(minCompetitiveScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12789a348ea3f09c9c3b71488cfa1c32da08b2a3","date":1534270167,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#setMinCompetitiveScore(float).mjava","pathOld":"/dev/null","sourceNew":"  void setMinCompetitiveScore(float minScore) {\n    if (minScore == 0) {\n      return ;\n    }\n    // A double that is less than 'minScore' might still be converted to 'minScore'\n    // when casted to a float, so we go to the previous float to avoid this issue\n    float minScoreDown = Math.nextDown(minScore);\n    for (int i = 0; i < numClauses; ++i) {\n      double sumOfOtherMaxScores = this.sumOfOtherMaxScores[i];\n      float minCompetitiveScore = getMinCompetitiveScore(minScoreDown, sumOfOtherMaxScores);\n      if (minCompetitiveScore <= 0) {\n        // given that scorers are sorted by decreasing max score, next scorers will\n        // have 0 as a minimum competitive score too\n        break;\n      }\n      scorers[i].setMinCompetitiveScore(minCompetitiveScore);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0dc52d2a83be9420989b1976a8e9d937160e1e5","date":1536062604,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#setMinCompetitiveScore(float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#setMinCompetitiveScore(float).mjava","sourceNew":"  void setMinCompetitiveScore(float minScore) throws IOException {\n    if (minScore == 0) {\n      return ;\n    }\n    // A double that is less than 'minScore' might still be converted to 'minScore'\n    // when casted to a float, so we go to the previous float to avoid this issue\n    float minScoreDown = Math.nextDown(minScore);\n    for (int i = 0; i < numClauses; ++i) {\n      double sumOfOtherMaxScores = this.sumOfOtherMaxScores[i];\n      float minCompetitiveScore = getMinCompetitiveScore(minScoreDown, sumOfOtherMaxScores);\n      if (minCompetitiveScore <= 0) {\n        // given that scorers are sorted by decreasing max score, next scorers will\n        // have 0 as a minimum competitive score too\n        break;\n      }\n      scorers[i].setMinCompetitiveScore(minCompetitiveScore);\n    }\n  }\n\n","sourceOld":"  void setMinCompetitiveScore(float minScore) {\n    if (minScore == 0) {\n      return ;\n    }\n    // A double that is less than 'minScore' might still be converted to 'minScore'\n    // when casted to a float, so we go to the previous float to avoid this issue\n    float minScoreDown = Math.nextDown(minScore);\n    for (int i = 0; i < numClauses; ++i) {\n      double sumOfOtherMaxScores = this.sumOfOtherMaxScores[i];\n      float minCompetitiveScore = getMinCompetitiveScore(minScoreDown, sumOfOtherMaxScores);\n      if (minCompetitiveScore <= 0) {\n        // given that scorers are sorted by decreasing max score, next scorers will\n        // have 0 as a minimum competitive score too\n        break;\n      }\n      scorers[i].setMinCompetitiveScore(minCompetitiveScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d0dc52d2a83be9420989b1976a8e9d937160e1e5":["12789a348ea3f09c9c3b71488cfa1c32da08b2a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12789a348ea3f09c9c3b71488cfa1c32da08b2a3":["523cc6563c99a55527ef7993efc5413c6648852d"],"523cc6563c99a55527ef7993efc5413c6648852d":["3c5054bf15748079a041f921a9178e8fe84f1806"],"3c5054bf15748079a041f921a9178e8fe84f1806":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0dc52d2a83be9420989b1976a8e9d937160e1e5"]},"commit2Childs":{"d0dc52d2a83be9420989b1976a8e9d937160e1e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c5054bf15748079a041f921a9178e8fe84f1806"],"12789a348ea3f09c9c3b71488cfa1c32da08b2a3":["d0dc52d2a83be9420989b1976a8e9d937160e1e5"],"523cc6563c99a55527ef7993efc5413c6648852d":["12789a348ea3f09c9c3b71488cfa1c32da08b2a3"],"3c5054bf15748079a041f921a9178e8fe84f1806":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}