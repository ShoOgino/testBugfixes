{"path":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    Random random = newRandom();\n    MockRAMDirectory dir = newDirectory(random);\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    Random random = newRandom();\n    MockDirectoryWrapper dir = newDirectory(random);\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    Random random = newRandom();\n    MockRAMDirectory dir = newDirectory(random);\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    Random random = newRandom();\n    MockDirectoryWrapper dir = newDirectory(random);\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7fc5a2665a7fa1b9450097ae658193a11ee4d02c","date":1292699695,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7fc5a2665a7fa1b9450097ae658193a11ee4d02c":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["132903c28af3aa6f67284b78de91c0f0a99488c2","7fc5a2665a7fa1b9450097ae658193a11ee4d02c"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","7fc5a2665a7fa1b9450097ae658193a11ee4d02c"],"c19f985e36a65cc969e8e564fe337a0d41512075":["7fc5a2665a7fa1b9450097ae658193a11ee4d02c"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c19f985e36a65cc969e8e564fe337a0d41512075"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7fc5a2665a7fa1b9450097ae658193a11ee4d02c":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7fc5a2665a7fa1b9450097ae658193a11ee4d02c","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}