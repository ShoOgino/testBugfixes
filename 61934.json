{"path":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","sourceNew":"  /**\n   * Set the {@link SegToken#index} for each token, based upon its order by startOffset. \n   * @return a {@link List} of these ordered tokens.\n   */\n  public List makeIndex() {\n    List result = new ArrayList();\n    int s = -1, count = 0, size = tokenListTable.size();\n    List tokenList;\n    short index = 0;\n    while (count < size) {\n      if (isStartExist(s)) {\n        tokenList = (List) tokenListTable.get(new Integer(s));\n        for (Iterator iter = tokenList.iterator(); iter.hasNext();) {\n          SegToken st = (SegToken) iter.next();\n          st.index = index;\n          result.add(st);\n          index++;\n        }\n        count++;\n      }\n      s++;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Set the {@link SegToken#index} for each token, based upon its order by startOffset. \n   * @return a {@link List} of these ordered tokens.\n   */\n  public List makeIndex() {\n    List result = new ArrayList();\n    int s = -1, count = 0, size = tokenListTable.size();\n    List tokenList;\n    short index = 0;\n    while (count < size) {\n      if (isStartExist(s)) {\n        tokenList = (List) tokenListTable.get(new Integer(s));\n        for (Iterator iter = tokenList.iterator(); iter.hasNext();) {\n          SegToken st = (SegToken) iter.next();\n          st.index = index;\n          result.add(st);\n          index++;\n        }\n        count++;\n      }\n      s++;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","sourceNew":"  /**\n   * Set the {@link SegToken#index} for each token, based upon its order by startOffset. \n   * @return a {@link List} of these ordered tokens.\n   */\n  public List makeIndex() {\n    List result = new ArrayList();\n    int s = -1, count = 0, size = tokenListTable.size();\n    List tokenList;\n    short index = 0;\n    while (count < size) {\n      if (isStartExist(s)) {\n        tokenList = (List) tokenListTable.get(Integer.valueOf(s));\n        for (Iterator iter = tokenList.iterator(); iter.hasNext();) {\n          SegToken st = (SegToken) iter.next();\n          st.index = index;\n          result.add(st);\n          index++;\n        }\n        count++;\n      }\n      s++;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Set the {@link SegToken#index} for each token, based upon its order by startOffset. \n   * @return a {@link List} of these ordered tokens.\n   */\n  public List makeIndex() {\n    List result = new ArrayList();\n    int s = -1, count = 0, size = tokenListTable.size();\n    List tokenList;\n    short index = 0;\n    while (count < size) {\n      if (isStartExist(s)) {\n        tokenList = (List) tokenListTable.get(new Integer(s));\n        for (Iterator iter = tokenList.iterator(); iter.hasNext();) {\n          SegToken st = (SegToken) iter.next();\n          st.index = index;\n          result.add(st);\n          index++;\n        }\n        count++;\n      }\n      s++;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"573b8638be27860dcb2ce77889c694e5f8a76106","date":1256855390,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","sourceNew":"  /**\n   * Set the {@link SegToken#index} for each token, based upon its order by startOffset. \n   * @return a {@link List} of these ordered tokens.\n   */\n  public List<SegToken> makeIndex() {\n    List<SegToken> result = new ArrayList<SegToken>();\n    int s = -1, count = 0, size = tokenListTable.size();\n    List<SegToken> tokenList;\n    short index = 0;\n    while (count < size) {\n      if (isStartExist(s)) {\n        tokenList = tokenListTable.get(s);\n        for (SegToken st : tokenList) {\n          st.index = index;\n          result.add(st);\n          index++;\n        }\n        count++;\n      }\n      s++;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Set the {@link SegToken#index} for each token, based upon its order by startOffset. \n   * @return a {@link List} of these ordered tokens.\n   */\n  public List makeIndex() {\n    List result = new ArrayList();\n    int s = -1, count = 0, size = tokenListTable.size();\n    List tokenList;\n    short index = 0;\n    while (count < size) {\n      if (isStartExist(s)) {\n        tokenList = (List) tokenListTable.get(Integer.valueOf(s));\n        for (Iterator iter = tokenList.iterator(); iter.hasNext();) {\n          SegToken st = (SegToken) iter.next();\n          st.index = index;\n          result.add(st);\n          index++;\n        }\n        count++;\n      }\n      s++;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph#makeIndex().mjava","sourceNew":"  /**\n   * Set the {@link SegToken#index} for each token, based upon its order by startOffset. \n   * @return a {@link List} of these ordered tokens.\n   */\n  public List<SegToken> makeIndex() {\n    List<SegToken> result = new ArrayList<SegToken>();\n    int s = -1, count = 0, size = tokenListTable.size();\n    List<SegToken> tokenList;\n    short index = 0;\n    while (count < size) {\n      if (isStartExist(s)) {\n        tokenList = tokenListTable.get(s);\n        for (SegToken st : tokenList) {\n          st.index = index;\n          result.add(st);\n          index++;\n        }\n        count++;\n      }\n      s++;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Set the {@link SegToken#index} for each token, based upon its order by startOffset. \n   * @return a {@link List} of these ordered tokens.\n   */\n  public List<SegToken> makeIndex() {\n    List<SegToken> result = new ArrayList<SegToken>();\n    int s = -1, count = 0, size = tokenListTable.size();\n    List<SegToken> tokenList;\n    short index = 0;\n    while (count < size) {\n      if (isStartExist(s)) {\n        tokenList = tokenListTable.get(s);\n        for (SegToken st : tokenList) {\n          st.index = index;\n          result.add(st);\n          index++;\n        }\n        count++;\n      }\n      s++;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"573b8638be27860dcb2ce77889c694e5f8a76106":["6bcde5e3f23911110baa101ed062b544162825b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["573b8638be27860dcb2ce77889c694e5f8a76106"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["573b8638be27860dcb2ce77889c694e5f8a76106"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["6bcde5e3f23911110baa101ed062b544162825b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"573b8638be27860dcb2ce77889c694e5f8a76106":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}