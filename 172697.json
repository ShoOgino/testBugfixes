{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocs#merge(int,TopSuggestDocs[]).mjava","commits":[{"id":"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a","date":1427495869,"type":0,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocs#merge(int,TopSuggestDocs[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a new TopSuggestDocs, containing topN results across\n   * the provided TopSuggestDocs, sorting by score. Each {@link TopSuggestDocs}\n   * instance must be sorted.\n   * Analogous to {@link org.apache.lucene.search.TopDocs#merge(int, org.apache.lucene.search.TopDocs[])}\n   * for {@link TopSuggestDocs}\n   *\n   * NOTE: assumes every <code>shardHit</code> is already sorted by score\n   */\n  public static TopSuggestDocs merge(int topN, TopSuggestDocs[] shardHits) {\n    SuggestScoreDocPriorityQueue priorityQueue = new SuggestScoreDocPriorityQueue(topN);\n    for (TopSuggestDocs shardHit : shardHits) {\n      for (SuggestScoreDoc scoreDoc : shardHit.scoreLookupDocs()) {\n        if (scoreDoc == priorityQueue.insertWithOverflow(scoreDoc)) {\n          break;\n        }\n      }\n    }\n    SuggestScoreDoc[] topNResults = priorityQueue.getResults();\n    if (topNResults.length > 0) {\n      return new TopSuggestDocs(topNResults.length, topNResults, topNResults[0].score);\n    } else {\n      return TopSuggestDocs.EMPTY;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocs#merge(int,TopSuggestDocs[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a new TopSuggestDocs, containing topN results across\n   * the provided TopSuggestDocs, sorting by score. Each {@link TopSuggestDocs}\n   * instance must be sorted.\n   * Analogous to {@link org.apache.lucene.search.TopDocs#merge(int, org.apache.lucene.search.TopDocs[])}\n   * for {@link TopSuggestDocs}\n   *\n   * NOTE: assumes every <code>shardHit</code> is already sorted by score\n   */\n  public static TopSuggestDocs merge(int topN, TopSuggestDocs[] shardHits) {\n    SuggestScoreDocPriorityQueue priorityQueue = new SuggestScoreDocPriorityQueue(topN);\n    for (TopSuggestDocs shardHit : shardHits) {\n      for (SuggestScoreDoc scoreDoc : shardHit.scoreLookupDocs()) {\n        if (scoreDoc == priorityQueue.insertWithOverflow(scoreDoc)) {\n          break;\n        }\n      }\n    }\n    SuggestScoreDoc[] topNResults = priorityQueue.getResults();\n    if (topNResults.length > 0) {\n      return new TopSuggestDocs(topNResults.length, topNResults, topNResults[0].score);\n    } else {\n      return TopSuggestDocs.EMPTY;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocs#merge(int,TopSuggestDocs[]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocs#merge(int,TopSuggestDocs[]).mjava","sourceNew":"  /**\n   * Returns a new TopSuggestDocs, containing topN results across\n   * the provided TopSuggestDocs, sorting by score. Each {@link TopSuggestDocs}\n   * instance must be sorted.\n   * Analogous to {@link org.apache.lucene.search.TopDocs#merge(int, org.apache.lucene.search.TopDocs[])}\n   * for {@link TopSuggestDocs}\n   *\n   * NOTE: assumes every <code>shardHit</code> is already sorted by score\n   */\n  public static TopSuggestDocs merge(int topN, TopSuggestDocs[] shardHits) {\n    SuggestScoreDocPriorityQueue priorityQueue = new SuggestScoreDocPriorityQueue(topN);\n    for (TopSuggestDocs shardHit : shardHits) {\n      for (SuggestScoreDoc scoreDoc : shardHit.scoreLookupDocs()) {\n        if (scoreDoc == priorityQueue.insertWithOverflow(scoreDoc)) {\n          break;\n        }\n      }\n    }\n    SuggestScoreDoc[] topNResults = priorityQueue.getResults();\n    if (topNResults.length > 0) {\n      return new TopSuggestDocs(topNResults.length, topNResults);\n    } else {\n      return TopSuggestDocs.EMPTY;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a new TopSuggestDocs, containing topN results across\n   * the provided TopSuggestDocs, sorting by score. Each {@link TopSuggestDocs}\n   * instance must be sorted.\n   * Analogous to {@link org.apache.lucene.search.TopDocs#merge(int, org.apache.lucene.search.TopDocs[])}\n   * for {@link TopSuggestDocs}\n   *\n   * NOTE: assumes every <code>shardHit</code> is already sorted by score\n   */\n  public static TopSuggestDocs merge(int topN, TopSuggestDocs[] shardHits) {\n    SuggestScoreDocPriorityQueue priorityQueue = new SuggestScoreDocPriorityQueue(topN);\n    for (TopSuggestDocs shardHit : shardHits) {\n      for (SuggestScoreDoc scoreDoc : shardHit.scoreLookupDocs()) {\n        if (scoreDoc == priorityQueue.insertWithOverflow(scoreDoc)) {\n          break;\n        }\n      }\n    }\n    SuggestScoreDoc[] topNResults = priorityQueue.getResults();\n    if (topNResults.length > 0) {\n      return new TopSuggestDocs(topNResults.length, topNResults, topNResults[0].score);\n    } else {\n      return TopSuggestDocs.EMPTY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocs#merge(int,TopSuggestDocs[]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocs#merge(int,TopSuggestDocs[]).mjava","sourceNew":"  /**\n   * Returns a new TopSuggestDocs, containing topN results across\n   * the provided TopSuggestDocs, sorting by score. Each {@link TopSuggestDocs}\n   * instance must be sorted.\n   * Analogous to {@link org.apache.lucene.search.TopDocs#merge(int, org.apache.lucene.search.TopDocs[])}\n   * for {@link TopSuggestDocs}\n   *\n   * NOTE: assumes every <code>shardHit</code> is already sorted by score\n   */\n  public static TopSuggestDocs merge(int topN, TopSuggestDocs[] shardHits) {\n    SuggestScoreDocPriorityQueue priorityQueue = new SuggestScoreDocPriorityQueue(topN);\n    for (TopSuggestDocs shardHit : shardHits) {\n      for (SuggestScoreDoc scoreDoc : shardHit.scoreLookupDocs()) {\n        if (scoreDoc == priorityQueue.insertWithOverflow(scoreDoc)) {\n          break;\n        }\n      }\n    }\n    SuggestScoreDoc[] topNResults = priorityQueue.getResults();\n    if (topNResults.length > 0) {\n      return new TopSuggestDocs(topNResults.length, topNResults);\n    } else {\n      return TopSuggestDocs.EMPTY;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a new TopSuggestDocs, containing topN results across\n   * the provided TopSuggestDocs, sorting by score. Each {@link TopSuggestDocs}\n   * instance must be sorted.\n   * Analogous to {@link org.apache.lucene.search.TopDocs#merge(int, org.apache.lucene.search.TopDocs[])}\n   * for {@link TopSuggestDocs}\n   *\n   * NOTE: assumes every <code>shardHit</code> is already sorted by score\n   */\n  public static TopSuggestDocs merge(int topN, TopSuggestDocs[] shardHits) {\n    SuggestScoreDocPriorityQueue priorityQueue = new SuggestScoreDocPriorityQueue(topN);\n    for (TopSuggestDocs shardHit : shardHits) {\n      for (SuggestScoreDoc scoreDoc : shardHit.scoreLookupDocs()) {\n        if (scoreDoc == priorityQueue.insertWithOverflow(scoreDoc)) {\n          break;\n        }\n      }\n    }\n    SuggestScoreDoc[] topNResults = priorityQueue.getResults();\n    if (topNResults.length > 0) {\n      return new TopSuggestDocs(topNResults.length, topNResults, topNResults[0].score);\n    } else {\n      return TopSuggestDocs.EMPTY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocs#merge(int,TopSuggestDocs[]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocs#merge(int,TopSuggestDocs[]).mjava","sourceNew":"  /**\n   * Returns a new TopSuggestDocs, containing topN results across\n   * the provided TopSuggestDocs, sorting by score. Each {@link TopSuggestDocs}\n   * instance must be sorted.\n   * Analogous to {@link org.apache.lucene.search.TopDocs#merge(int, org.apache.lucene.search.TopDocs[])}\n   * for {@link TopSuggestDocs}\n   *\n   * NOTE: assumes every <code>shardHit</code> is already sorted by score\n   */\n  public static TopSuggestDocs merge(int topN, TopSuggestDocs[] shardHits) {\n    SuggestScoreDocPriorityQueue priorityQueue = new SuggestScoreDocPriorityQueue(topN);\n    for (TopSuggestDocs shardHit : shardHits) {\n      for (SuggestScoreDoc scoreDoc : shardHit.scoreLookupDocs()) {\n        if (scoreDoc == priorityQueue.insertWithOverflow(scoreDoc)) {\n          break;\n        }\n      }\n    }\n    SuggestScoreDoc[] topNResults = priorityQueue.getResults();\n    if (topNResults.length > 0) {\n      return new TopSuggestDocs(new TotalHits(topNResults.length, TotalHits.Relation.EQUAL_TO), topNResults);\n    } else {\n      return TopSuggestDocs.EMPTY;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a new TopSuggestDocs, containing topN results across\n   * the provided TopSuggestDocs, sorting by score. Each {@link TopSuggestDocs}\n   * instance must be sorted.\n   * Analogous to {@link org.apache.lucene.search.TopDocs#merge(int, org.apache.lucene.search.TopDocs[])}\n   * for {@link TopSuggestDocs}\n   *\n   * NOTE: assumes every <code>shardHit</code> is already sorted by score\n   */\n  public static TopSuggestDocs merge(int topN, TopSuggestDocs[] shardHits) {\n    SuggestScoreDocPriorityQueue priorityQueue = new SuggestScoreDocPriorityQueue(topN);\n    for (TopSuggestDocs shardHit : shardHits) {\n      for (SuggestScoreDoc scoreDoc : shardHit.scoreLookupDocs()) {\n        if (scoreDoc == priorityQueue.insertWithOverflow(scoreDoc)) {\n          break;\n        }\n      }\n    }\n    SuggestScoreDoc[] topNResults = priorityQueue.getResults();\n    if (topNResults.length > 0) {\n      return new TopSuggestDocs(topNResults.length, topNResults);\n    } else {\n      return TopSuggestDocs.EMPTY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}