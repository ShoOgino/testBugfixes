{"path":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceFeatureQuery.DistanceScorer#setMinCompetitiveScore(float).mjava","commits":[{"id":"607e7af5082700f0a5d1b5e92452084cf94058d4","date":1537346996,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceFeatureQuery.DistanceScorer#setMinCompetitiveScore(float).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void setMinCompetitiveScore(float minScore) throws IOException {\n      if (minScore > boost) {\n        it = DocIdSetIterator.empty();\n        return;\n      }\n\n      setMinCompetitiveScoreCounter++;\n      // We sample the calls to this method as it is expensive to recalculate the iterator.\n      if (setMinCompetitiveScoreCounter > 256 && (setMinCompetitiveScoreCounter & 0x1f) != 0x1f) {\n        return;\n      }\n\n      double previousMaxDistance = maxDistance;\n      maxDistance = computeMaxDistance(minScore, maxDistance);\n      if (maxDistance == previousMaxDistance) {\n        // nothing to update\n        return;\n      }\n\n      //Ideally we would be doing a distance query but that is too expensive so we approximate\n      //with a box query which performs better.\n      Rectangle box = Rectangle.fromPointDistance(originLat, originLon, maxDistance);\n      final byte minLat[] = new byte[LatLonPoint.BYTES];\n      final byte maxLat[] = new byte[LatLonPoint.BYTES];\n      final byte minLon[] = new byte[LatLonPoint.BYTES];\n      final byte maxLon[] = new byte[LatLonPoint.BYTES];\n      final boolean crossDateLine = box.crossesDateline();\n\n\n      NumericUtils.intToSortableBytes(GeoEncodingUtils.encodeLatitude(box.minLat), minLat, 0);\n      NumericUtils.intToSortableBytes(GeoEncodingUtils.encodeLatitude(box.maxLat), maxLat, 0);\n      NumericUtils.intToSortableBytes(GeoEncodingUtils.encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(GeoEncodingUtils.encodeLongitude(box.maxLon), maxLon, 0);\n\n      DocIdSetBuilder result = new DocIdSetBuilder(maxDoc);\n      final int doc = docID();\n      IntersectVisitor visitor = new IntersectVisitor() {\n\n        DocIdSetBuilder.BulkAdder adder;\n\n        @Override\n        public void grow(int count) {\n          adder = result.grow(count);\n        }\n\n        @Override\n        public void visit(int docID) {\n          if (docID <= doc) {\n            // Already visited or skipped\n            return;\n          }\n          adder.add(docID);\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedValue) {\n          if (docID <= doc) {\n            // Already visited or skipped\n            return;\n          }\n          if (FutureArrays.compareUnsigned(packedValue, 0, LatLonPoint.BYTES, maxLat, 0, LatLonPoint.BYTES) > 0 ||\n              FutureArrays.compareUnsigned(packedValue, 0, LatLonPoint.BYTES, minLat, 0, LatLonPoint.BYTES) < 0) {\n            //Latitude out of range\n            return;\n          }\n          if (crossDateLine) {\n            if (FutureArrays.compareUnsigned(packedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, minLon, 0, LatLonPoint.BYTES) < 0 &&\n                FutureArrays.compareUnsigned(packedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, maxLon, 0, LatLonPoint.BYTES)  > 0) {\n              //Longitude out of range\n              return;\n            }\n\n          } else {\n            if (FutureArrays.compareUnsigned(packedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, maxLon, 0, LatLonPoint.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(packedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, minLon, 0, LatLonPoint.BYTES) < 0) {\n              //Longitude out of range\n              return;\n            }\n          }\n          adder.add(docID);\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n          if (FutureArrays.compareUnsigned(minPackedValue, 0, LatLonPoint.BYTES, maxLat, 0, LatLonPoint.BYTES) > 0 ||\n              FutureArrays.compareUnsigned(maxPackedValue, 0, LatLonPoint.BYTES, minLat, 0, LatLonPoint.BYTES) < 0) {\n            return Relation.CELL_OUTSIDE_QUERY;\n          }\n          boolean crosses = FutureArrays.compareUnsigned(minPackedValue, 0, LatLonPoint.BYTES, minLat, 0, LatLonPoint.BYTES) < 0 ||\n              FutureArrays.compareUnsigned(maxPackedValue, 0, LatLonPoint.BYTES, maxLat, 0, LatLonPoint.BYTES) > 0;\n\n          if (crossDateLine) {\n            if (FutureArrays.compareUnsigned(minPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, maxLon, 0, LatLonPoint.BYTES) > 0 &&\n                FutureArrays.compareUnsigned(maxPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, minLon, 0, LatLonPoint.BYTES) < 0) {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n            crosses |= FutureArrays.compareUnsigned(minPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, maxLon, 0, LatLonPoint.BYTES) < 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, minLon, 0, LatLonPoint.BYTES) > 0;\n\n          } else {\n            if (FutureArrays.compareUnsigned(minPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, maxLon, 0, LatLonPoint.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, minLon, 0, LatLonPoint.BYTES) < 0) {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n            crosses |= FutureArrays.compareUnsigned(minPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, minLon, 0, LatLonPoint.BYTES) < 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, maxLon, 0, LatLonPoint.BYTES) > 0;\n          }\n          if (crosses) {\n            return Relation.CELL_CROSSES_QUERY;\n          } else {\n            return Relation.CELL_INSIDE_QUERY;\n          }\n        }\n      };\n\n      final long currentQueryCost = Math.min(leadCost, it.cost());\n      final long threshold = currentQueryCost >>> 3;\n      long estimatedNumberOfMatches = pointValues.estimatePointCount(visitor); // runs in O(log(numPoints))\n      // TODO: what is the right factor compared to the current disi? Is 8 optimal?\n      if (estimatedNumberOfMatches >= threshold) {\n        // the new range is not selective enough to be worth materializing\n        return;\n      }\n      pointValues.intersect(visitor);\n      it = result.build().iterator();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceFeatureQuery.DistanceScorer#setMinCompetitiveScore(float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceFeatureQuery.DistanceScorer#setMinCompetitiveScore(float).mjava","sourceNew":"    @Override\n    public void setMinCompetitiveScore(float minScore) throws IOException {\n      if (minScore > boost) {\n        it = DocIdSetIterator.empty();\n        return;\n      }\n\n      setMinCompetitiveScoreCounter++;\n      // We sample the calls to this method as it is expensive to recalculate the iterator.\n      if (setMinCompetitiveScoreCounter > 256 && (setMinCompetitiveScoreCounter & 0x1f) != 0x1f) {\n        return;\n      }\n\n      double previousMaxDistance = maxDistance;\n      maxDistance = computeMaxDistance(minScore, maxDistance);\n      if (maxDistance == previousMaxDistance) {\n        // nothing to update\n        return;\n      }\n\n      //Ideally we would be doing a distance query but that is too expensive so we approximate\n      //with a box query which performs better.\n      Rectangle box = Rectangle.fromPointDistance(originLat, originLon, maxDistance);\n      final byte minLat[] = new byte[LatLonPoint.BYTES];\n      final byte maxLat[] = new byte[LatLonPoint.BYTES];\n      final byte minLon[] = new byte[LatLonPoint.BYTES];\n      final byte maxLon[] = new byte[LatLonPoint.BYTES];\n      final boolean crossDateLine = box.crossesDateline();\n\n\n      NumericUtils.intToSortableBytes(GeoEncodingUtils.encodeLatitude(box.minLat), minLat, 0);\n      NumericUtils.intToSortableBytes(GeoEncodingUtils.encodeLatitude(box.maxLat), maxLat, 0);\n      NumericUtils.intToSortableBytes(GeoEncodingUtils.encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(GeoEncodingUtils.encodeLongitude(box.maxLon), maxLon, 0);\n\n      DocIdSetBuilder result = new DocIdSetBuilder(maxDoc);\n      final int doc = docID();\n      IntersectVisitor visitor = new IntersectVisitor() {\n\n        DocIdSetBuilder.BulkAdder adder;\n\n        @Override\n        public void grow(int count) {\n          adder = result.grow(count);\n        }\n\n        @Override\n        public void visit(int docID) {\n          if (docID <= doc) {\n            // Already visited or skipped\n            return;\n          }\n          adder.add(docID);\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedValue) {\n          if (docID <= doc) {\n            // Already visited or skipped\n            return;\n          }\n          if (Arrays.compareUnsigned(packedValue, 0, LatLonPoint.BYTES, maxLat, 0, LatLonPoint.BYTES) > 0 ||\n              Arrays.compareUnsigned(packedValue, 0, LatLonPoint.BYTES, minLat, 0, LatLonPoint.BYTES) < 0) {\n            //Latitude out of range\n            return;\n          }\n          if (crossDateLine) {\n            if (Arrays.compareUnsigned(packedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, minLon, 0, LatLonPoint.BYTES) < 0 &&\n                Arrays.compareUnsigned(packedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, maxLon, 0, LatLonPoint.BYTES)  > 0) {\n              //Longitude out of range\n              return;\n            }\n\n          } else {\n            if (Arrays.compareUnsigned(packedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, maxLon, 0, LatLonPoint.BYTES) > 0 ||\n                Arrays.compareUnsigned(packedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, minLon, 0, LatLonPoint.BYTES) < 0) {\n              //Longitude out of range\n              return;\n            }\n          }\n          adder.add(docID);\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n          if (Arrays.compareUnsigned(minPackedValue, 0, LatLonPoint.BYTES, maxLat, 0, LatLonPoint.BYTES) > 0 ||\n              Arrays.compareUnsigned(maxPackedValue, 0, LatLonPoint.BYTES, minLat, 0, LatLonPoint.BYTES) < 0) {\n            return Relation.CELL_OUTSIDE_QUERY;\n          }\n          boolean crosses = Arrays.compareUnsigned(minPackedValue, 0, LatLonPoint.BYTES, minLat, 0, LatLonPoint.BYTES) < 0 ||\n              Arrays.compareUnsigned(maxPackedValue, 0, LatLonPoint.BYTES, maxLat, 0, LatLonPoint.BYTES) > 0;\n\n          if (crossDateLine) {\n            if (Arrays.compareUnsigned(minPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, maxLon, 0, LatLonPoint.BYTES) > 0 &&\n                Arrays.compareUnsigned(maxPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, minLon, 0, LatLonPoint.BYTES) < 0) {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n            crosses |= Arrays.compareUnsigned(minPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, maxLon, 0, LatLonPoint.BYTES) < 0 ||\n                Arrays.compareUnsigned(maxPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, minLon, 0, LatLonPoint.BYTES) > 0;\n\n          } else {\n            if (Arrays.compareUnsigned(minPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, maxLon, 0, LatLonPoint.BYTES) > 0 ||\n                Arrays.compareUnsigned(maxPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, minLon, 0, LatLonPoint.BYTES) < 0) {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n            crosses |= Arrays.compareUnsigned(minPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, minLon, 0, LatLonPoint.BYTES) < 0 ||\n                Arrays.compareUnsigned(maxPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, maxLon, 0, LatLonPoint.BYTES) > 0;\n          }\n          if (crosses) {\n            return Relation.CELL_CROSSES_QUERY;\n          } else {\n            return Relation.CELL_INSIDE_QUERY;\n          }\n        }\n      };\n\n      final long currentQueryCost = Math.min(leadCost, it.cost());\n      final long threshold = currentQueryCost >>> 3;\n      long estimatedNumberOfMatches = pointValues.estimatePointCount(visitor); // runs in O(log(numPoints))\n      // TODO: what is the right factor compared to the current disi? Is 8 optimal?\n      if (estimatedNumberOfMatches >= threshold) {\n        // the new range is not selective enough to be worth materializing\n        return;\n      }\n      pointValues.intersect(visitor);\n      it = result.build().iterator();\n    }\n\n","sourceOld":"    @Override\n    public void setMinCompetitiveScore(float minScore) throws IOException {\n      if (minScore > boost) {\n        it = DocIdSetIterator.empty();\n        return;\n      }\n\n      setMinCompetitiveScoreCounter++;\n      // We sample the calls to this method as it is expensive to recalculate the iterator.\n      if (setMinCompetitiveScoreCounter > 256 && (setMinCompetitiveScoreCounter & 0x1f) != 0x1f) {\n        return;\n      }\n\n      double previousMaxDistance = maxDistance;\n      maxDistance = computeMaxDistance(minScore, maxDistance);\n      if (maxDistance == previousMaxDistance) {\n        // nothing to update\n        return;\n      }\n\n      //Ideally we would be doing a distance query but that is too expensive so we approximate\n      //with a box query which performs better.\n      Rectangle box = Rectangle.fromPointDistance(originLat, originLon, maxDistance);\n      final byte minLat[] = new byte[LatLonPoint.BYTES];\n      final byte maxLat[] = new byte[LatLonPoint.BYTES];\n      final byte minLon[] = new byte[LatLonPoint.BYTES];\n      final byte maxLon[] = new byte[LatLonPoint.BYTES];\n      final boolean crossDateLine = box.crossesDateline();\n\n\n      NumericUtils.intToSortableBytes(GeoEncodingUtils.encodeLatitude(box.minLat), minLat, 0);\n      NumericUtils.intToSortableBytes(GeoEncodingUtils.encodeLatitude(box.maxLat), maxLat, 0);\n      NumericUtils.intToSortableBytes(GeoEncodingUtils.encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(GeoEncodingUtils.encodeLongitude(box.maxLon), maxLon, 0);\n\n      DocIdSetBuilder result = new DocIdSetBuilder(maxDoc);\n      final int doc = docID();\n      IntersectVisitor visitor = new IntersectVisitor() {\n\n        DocIdSetBuilder.BulkAdder adder;\n\n        @Override\n        public void grow(int count) {\n          adder = result.grow(count);\n        }\n\n        @Override\n        public void visit(int docID) {\n          if (docID <= doc) {\n            // Already visited or skipped\n            return;\n          }\n          adder.add(docID);\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedValue) {\n          if (docID <= doc) {\n            // Already visited or skipped\n            return;\n          }\n          if (FutureArrays.compareUnsigned(packedValue, 0, LatLonPoint.BYTES, maxLat, 0, LatLonPoint.BYTES) > 0 ||\n              FutureArrays.compareUnsigned(packedValue, 0, LatLonPoint.BYTES, minLat, 0, LatLonPoint.BYTES) < 0) {\n            //Latitude out of range\n            return;\n          }\n          if (crossDateLine) {\n            if (FutureArrays.compareUnsigned(packedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, minLon, 0, LatLonPoint.BYTES) < 0 &&\n                FutureArrays.compareUnsigned(packedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, maxLon, 0, LatLonPoint.BYTES)  > 0) {\n              //Longitude out of range\n              return;\n            }\n\n          } else {\n            if (FutureArrays.compareUnsigned(packedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, maxLon, 0, LatLonPoint.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(packedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, minLon, 0, LatLonPoint.BYTES) < 0) {\n              //Longitude out of range\n              return;\n            }\n          }\n          adder.add(docID);\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n          if (FutureArrays.compareUnsigned(minPackedValue, 0, LatLonPoint.BYTES, maxLat, 0, LatLonPoint.BYTES) > 0 ||\n              FutureArrays.compareUnsigned(maxPackedValue, 0, LatLonPoint.BYTES, minLat, 0, LatLonPoint.BYTES) < 0) {\n            return Relation.CELL_OUTSIDE_QUERY;\n          }\n          boolean crosses = FutureArrays.compareUnsigned(minPackedValue, 0, LatLonPoint.BYTES, minLat, 0, LatLonPoint.BYTES) < 0 ||\n              FutureArrays.compareUnsigned(maxPackedValue, 0, LatLonPoint.BYTES, maxLat, 0, LatLonPoint.BYTES) > 0;\n\n          if (crossDateLine) {\n            if (FutureArrays.compareUnsigned(minPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, maxLon, 0, LatLonPoint.BYTES) > 0 &&\n                FutureArrays.compareUnsigned(maxPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, minLon, 0, LatLonPoint.BYTES) < 0) {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n            crosses |= FutureArrays.compareUnsigned(minPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, maxLon, 0, LatLonPoint.BYTES) < 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, minLon, 0, LatLonPoint.BYTES) > 0;\n\n          } else {\n            if (FutureArrays.compareUnsigned(minPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, maxLon, 0, LatLonPoint.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, minLon, 0, LatLonPoint.BYTES) < 0) {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n            crosses |= FutureArrays.compareUnsigned(minPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, minLon, 0, LatLonPoint.BYTES) < 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES, maxLon, 0, LatLonPoint.BYTES) > 0;\n          }\n          if (crosses) {\n            return Relation.CELL_CROSSES_QUERY;\n          } else {\n            return Relation.CELL_INSIDE_QUERY;\n          }\n        }\n      };\n\n      final long currentQueryCost = Math.min(leadCost, it.cost());\n      final long threshold = currentQueryCost >>> 3;\n      long estimatedNumberOfMatches = pointValues.estimatePointCount(visitor); // runs in O(log(numPoints))\n      // TODO: what is the right factor compared to the current disi? Is 8 optimal?\n      if (estimatedNumberOfMatches >= threshold) {\n        // the new range is not selective enough to be worth materializing\n        return;\n      }\n      pointValues.intersect(visitor);\n      it = result.build().iterator();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["607e7af5082700f0a5d1b5e92452084cf94058d4"],"607e7af5082700f0a5d1b5e92452084cf94058d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"607e7af5082700f0a5d1b5e92452084cf94058d4":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607e7af5082700f0a5d1b5e92452084cf94058d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}