{"path":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexOutput.Index#write(IndexOutput,boolean).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexOutput.Index#write(IndexOutput,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void write(IndexOutput indexOut, boolean absolute) throws IOException {\n      if (absolute) {\n        indexOut.writeVLong(fp);\n        indexOut.writeVInt(upto);\n      } else if (fp == lastFP) {\n        // same block\n        indexOut.writeVLong(0);\n        assert upto >= lastUpto;\n        indexOut.writeVLong(upto - lastUpto);\n      } else {      \n        // new block\n        indexOut.writeVLong(fp - lastFP);\n        indexOut.writeVLong(upto);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8df828f6eb8a46ba5a58ab37d00659165feb274f","date":1288433840,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexOutput.Index#write(IndexOutput,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexOutput.Index#write(IndexOutput,boolean).mjava","sourceNew":"    @Override\n    public void write(IndexOutput indexOut, boolean absolute) throws IOException {\n      if (absolute) {\n        indexOut.writeVLong(fp);\n        indexOut.writeVInt(upto);\n      } else if (fp == lastFP) {\n        // same block\n        indexOut.writeVLong(0);\n        assert upto >= lastUpto;\n        indexOut.writeVInt(upto - lastUpto);\n      } else {      \n        // new block\n        indexOut.writeVLong(fp - lastFP);\n        indexOut.writeVInt(upto);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","sourceOld":"    @Override\n    public void write(IndexOutput indexOut, boolean absolute) throws IOException {\n      if (absolute) {\n        indexOut.writeVLong(fp);\n        indexOut.writeVInt(upto);\n      } else if (fp == lastFP) {\n        // same block\n        indexOut.writeVLong(0);\n        assert upto >= lastUpto;\n        indexOut.writeVLong(upto - lastUpto);\n      } else {      \n        // new block\n        indexOut.writeVLong(fp - lastFP);\n        indexOut.writeVLong(upto);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexOutput.Index#write(IndexOutput,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexOutput.Index#write(IndexOutput,boolean).mjava","sourceNew":"    @Override\n    public void write(IndexOutput indexOut, boolean absolute) throws IOException {\n      if (absolute) {\n        indexOut.writeVLong(fp);\n        indexOut.writeVInt(upto);\n      } else if (fp == lastFP) {\n        // same block\n        indexOut.writeVLong(0);\n        assert upto >= lastUpto;\n        indexOut.writeVInt(upto - lastUpto);\n      } else {      \n        // new block\n        indexOut.writeVLong(fp - lastFP);\n        indexOut.writeVInt(upto);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","sourceOld":"    @Override\n    public void write(IndexOutput indexOut, boolean absolute) throws IOException {\n      if (absolute) {\n        indexOut.writeVLong(fp);\n        indexOut.writeVInt(upto);\n      } else if (fp == lastFP) {\n        // same block\n        indexOut.writeVLong(0);\n        assert upto >= lastUpto;\n        indexOut.writeVLong(upto - lastUpto);\n      } else {      \n        // new block\n        indexOut.writeVLong(fp - lastFP);\n        indexOut.writeVLong(upto);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexOutput.Index#write(IndexOutput,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexOutput.Index#write(IndexOutput,boolean).mjava","sourceNew":"    @Override\n    public void write(IndexOutput indexOut, boolean absolute) throws IOException {\n      if (absolute) {\n        indexOut.writeVLong(fp);\n        indexOut.writeVInt(upto);\n      } else if (fp == lastFP) {\n        // same block\n        indexOut.writeVLong(0);\n        assert upto >= lastUpto;\n        indexOut.writeVInt(upto - lastUpto);\n      } else {      \n        // new block\n        indexOut.writeVLong(fp - lastFP);\n        indexOut.writeVInt(upto);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","sourceOld":"    @Override\n    public void write(IndexOutput indexOut, boolean absolute) throws IOException {\n      if (absolute) {\n        indexOut.writeVLong(fp);\n        indexOut.writeVInt(upto);\n      } else if (fp == lastFP) {\n        // same block\n        indexOut.writeVLong(0);\n        assert upto >= lastUpto;\n        indexOut.writeVLong(upto - lastUpto);\n      } else {      \n        // new block\n        indexOut.writeVLong(fp - lastFP);\n        indexOut.writeVLong(upto);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403fdca7693ef4212494b59ca9e73661615f170c","date":1297453315,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexOutput.Index#write(IndexOutput,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexOutput.Index#write(IndexOutput,boolean).mjava","sourceNew":"    @Override\n    public void write(IndexOutput indexOut, boolean absolute) throws IOException {\n      if (absolute) {\n        indexOut.writeVInt(upto);\n        indexOut.writeVLong(fp);\n      } else if (fp == lastFP) {\n        // same block\n        assert upto >= lastUpto;\n        int uptoDelta = upto - lastUpto;\n        indexOut.writeVInt(uptoDelta << 1 | 1);\n      } else {      \n        // new block\n        indexOut.writeVInt(upto << 1);\n        indexOut.writeVLong(fp - lastFP);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","sourceOld":"    @Override\n    public void write(IndexOutput indexOut, boolean absolute) throws IOException {\n      if (absolute) {\n        indexOut.writeVLong(fp);\n        indexOut.writeVInt(upto);\n      } else if (fp == lastFP) {\n        // same block\n        indexOut.writeVLong(0);\n        assert upto >= lastUpto;\n        indexOut.writeVInt(upto - lastUpto);\n      } else {      \n        // new block\n        indexOut.writeVLong(fp - lastFP);\n        indexOut.writeVInt(upto);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexOutput.Index#write(IndexOutput,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexOutput.Index#write(IndexOutput,boolean).mjava","sourceNew":"    @Override\n    public void write(IndexOutput indexOut, boolean absolute) throws IOException {\n      if (absolute) {\n        indexOut.writeVInt(upto);\n        indexOut.writeVLong(fp);\n      } else if (fp == lastFP) {\n        // same block\n        assert upto >= lastUpto;\n        int uptoDelta = upto - lastUpto;\n        indexOut.writeVInt(uptoDelta << 1 | 1);\n      } else {      \n        // new block\n        indexOut.writeVInt(upto << 1);\n        indexOut.writeVLong(fp - lastFP);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","sourceOld":"    @Override\n    public void write(IndexOutput indexOut, boolean absolute) throws IOException {\n      if (absolute) {\n        indexOut.writeVLong(fp);\n        indexOut.writeVInt(upto);\n      } else if (fp == lastFP) {\n        // same block\n        indexOut.writeVLong(0);\n        assert upto >= lastUpto;\n        indexOut.writeVInt(upto - lastUpto);\n      } else {      \n        // new block\n        indexOut.writeVLong(fp - lastFP);\n        indexOut.writeVInt(upto);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexOutput.Index#write(IndexOutput,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexOutput.Index#write(IndexOutput,boolean).mjava","sourceNew":"    @Override\n    public void write(IndexOutput indexOut, boolean absolute) throws IOException {\n      if (absolute) {\n        indexOut.writeVInt(upto);\n        indexOut.writeVLong(fp);\n      } else if (fp == lastFP) {\n        // same block\n        assert upto >= lastUpto;\n        int uptoDelta = upto - lastUpto;\n        indexOut.writeVInt(uptoDelta << 1 | 1);\n      } else {      \n        // new block\n        indexOut.writeVInt(upto << 1);\n        indexOut.writeVLong(fp - lastFP);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","sourceOld":"    @Override\n    public void write(IndexOutput indexOut, boolean absolute) throws IOException {\n      if (absolute) {\n        indexOut.writeVLong(fp);\n        indexOut.writeVInt(upto);\n      } else if (fp == lastFP) {\n        // same block\n        indexOut.writeVLong(0);\n        assert upto >= lastUpto;\n        indexOut.writeVInt(upto - lastUpto);\n      } else {      \n        // new block\n        indexOut.writeVLong(fp - lastFP);\n        indexOut.writeVInt(upto);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexOutput.Index#write(IndexOutput,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexOutput.Index#write(IndexOutput,boolean).mjava","sourceNew":"    @Override\n    public void write(IndexOutput indexOut, boolean absolute) throws IOException {\n      if (absolute) {\n        indexOut.writeVInt(upto);\n        indexOut.writeVLong(fp);\n      } else if (fp == lastFP) {\n        // same block\n        assert upto >= lastUpto;\n        int uptoDelta = upto - lastUpto;\n        indexOut.writeVInt(uptoDelta << 1 | 1);\n      } else {      \n        // new block\n        indexOut.writeVInt(upto << 1);\n        indexOut.writeVLong(fp - lastFP);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","sourceOld":"    @Override\n    public void write(IndexOutput indexOut, boolean absolute) throws IOException {\n      if (absolute) {\n        indexOut.writeVInt(upto);\n        indexOut.writeVLong(fp);\n      } else if (fp == lastFP) {\n        // same block\n        assert upto >= lastUpto;\n        int uptoDelta = upto - lastUpto;\n        indexOut.writeVInt(uptoDelta << 1 | 1);\n      } else {      \n        // new block\n        indexOut.writeVInt(upto << 1);\n        indexOut.writeVLong(fp - lastFP);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8df828f6eb8a46ba5a58ab37d00659165feb274f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["85a883878c0af761245ab048babc63d099f835f3","403fdca7693ef4212494b59ca9e73661615f170c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","8df828f6eb8a46ba5a58ab37d00659165feb274f"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","8df828f6eb8a46ba5a58ab37d00659165feb274f"],"403fdca7693ef4212494b59ca9e73661615f170c":["8df828f6eb8a46ba5a58ab37d00659165feb274f"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["403fdca7693ef4212494b59ca9e73661615f170c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","403fdca7693ef4212494b59ca9e73661615f170c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"8df828f6eb8a46ba5a58ab37d00659165feb274f":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","403fdca7693ef4212494b59ca9e73661615f170c"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"85a883878c0af761245ab048babc63d099f835f3":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["8df828f6eb8a46ba5a58ab37d00659165feb274f","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"403fdca7693ef4212494b59ca9e73661615f170c":["f1bdbf92da222965b46c0a942c3857ba56e5c638","a0ae5e3ed1232483b7b8a014f175a5fe43595982","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}