{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#getFiniteStrings(Automaton,int,boolean).mjava","commits":[{"id":"61ac0dce4a88019c61f1217b42753d505b9d9c84","date":1399218479,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#getFiniteStrings(Automaton,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Pass false for testRecursive if the expected strings\n   *  may be too long */\n  private Set<IntsRef> getFiniteStrings(Automaton a, int limit, boolean testRecursive) {\n    Set<IntsRef> result = SpecialOperations.getFiniteStrings(a, limit);\n    if (testRecursive) {\n      assertEquals(AutomatonTestUtil.getFiniteStringsRecursive(a, limit), result);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2de8b489026711e8edde133418a7cacfd2ce4d3","date":1402528930,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#getFiniteStrings(LightAutomaton,int,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#getFiniteStrings(Automaton,int,boolean).mjava","sourceNew":"  /** Pass false for testRecursive if the expected strings\n   *  may be too long */\n  private Set<IntsRef> getFiniteStrings(LightAutomaton a, int limit, boolean testRecursive) {\n    Set<IntsRef> result = SpecialOperations.getFiniteStrings(a, limit);\n    if (testRecursive) {\n      assertEquals(AutomatonTestUtil.getFiniteStringsRecursiveLight(a, limit), result);\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Pass false for testRecursive if the expected strings\n   *  may be too long */\n  private Set<IntsRef> getFiniteStrings(Automaton a, int limit, boolean testRecursive) {\n    Set<IntsRef> result = SpecialOperations.getFiniteStrings(a, limit);\n    if (testRecursive) {\n      assertEquals(AutomatonTestUtil.getFiniteStringsRecursive(a, limit), result);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#getFiniteStrings(Automaton,int,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#getFiniteStrings(Automaton,int,boolean).mjava","sourceNew":"  /** Pass false for testRecursive if the expected strings\n   *  may be too long */\n  private Set<IntsRef> getFiniteStrings(Automaton a, int limit, boolean testRecursive) {\n    Set<IntsRef> result = Operations.getFiniteStrings(a, limit);\n    if (testRecursive) {\n      assertEquals(AutomatonTestUtil.getFiniteStringsRecursive(a, limit), result);\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Pass false for testRecursive if the expected strings\n   *  may be too long */\n  private Set<IntsRef> getFiniteStrings(Automaton a, int limit, boolean testRecursive) {\n    Set<IntsRef> result = SpecialOperations.getFiniteStrings(a, limit);\n    if (testRecursive) {\n      assertEquals(AutomatonTestUtil.getFiniteStringsRecursive(a, limit), result);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a2de8b489026711e8edde133418a7cacfd2ce4d3":["61ac0dce4a88019c61f1217b42753d505b9d9c84"],"61ac0dce4a88019c61f1217b42753d505b9d9c84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c84485629d80d203608e8975a1139de9933cc38":["61ac0dce4a88019c61f1217b42753d505b9d9c84","a2de8b489026711e8edde133418a7cacfd2ce4d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"a2de8b489026711e8edde133418a7cacfd2ce4d3":["5c84485629d80d203608e8975a1139de9933cc38"],"61ac0dce4a88019c61f1217b42753d505b9d9c84":["a2de8b489026711e8edde133418a7cacfd2ce4d3","5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61ac0dce4a88019c61f1217b42753d505b9d9c84"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}