{"path":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testOne(DocsEnum,List[Integer]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testOne(DocsEnum,List[Integer]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressAdvance#testOne(DocsEnum,List[Integer]).mjava","sourceNew":"  private void testOne(DocsEnum docs, List<Integer> expected) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"test\");\n    }\n    int upto = -1;\n    while(upto < expected.size()) {\n      if (VERBOSE) {\n        System.out.println(\"  cycle upto=\" + upto + \" of \" + expected.size());\n      }\n      final int docID;\n      if (random.nextInt(4) == 1 || upto == expected.size()-1) {\n        // test nextDoc()\n        if (VERBOSE) {\n          System.out.println(\"    do nextDoc\");\n        }\n        upto++;\n        docID = docs.nextDoc();\n      } else {\n        // test advance()\n        final int inc = _TestUtil.nextInt(random, 1, expected.size()-1-upto);\n        if (VERBOSE) {\n          System.out.println(\"    do advance inc=\" + inc);\n        }\n        upto += inc;\n        docID = docs.advance(expected.get(upto));\n      }\n      if (upto == expected.size()) {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + DocsEnum.NO_MORE_DOCS + \" actual=\" + docID);\n        }\n        assertEquals(DocsEnum.NO_MORE_DOCS, docID);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + expected.get(upto) + \" actual=\" + docID);\n        }\n        assertTrue(docID != DocsEnum.NO_MORE_DOCS);\n        assertEquals(expected.get(upto).intValue(), docID);\n      }\n    }\n  }\n\n","sourceOld":"  private void testOne(DocsEnum docs, List<Integer> expected) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"test\");\n    }\n    int upto = -1;\n    while(upto < expected.size()) {\n      if (VERBOSE) {\n        System.out.println(\"  cycle upto=\" + upto + \" of \" + expected.size());\n      }\n      final int docID;\n      if (random.nextInt(4) == 1 || upto == expected.size()-1) {\n        // test nextDoc()\n        if (VERBOSE) {\n          System.out.println(\"    do nextDoc\");\n        }\n        upto++;\n        docID = docs.nextDoc();\n      } else {\n        // test advance()\n        final int inc = _TestUtil.nextInt(random, 1, expected.size()-1-upto);\n        if (VERBOSE) {\n          System.out.println(\"    do advance inc=\" + inc);\n        }\n        upto += inc;\n        docID = docs.advance(expected.get(upto));\n      }\n      if (upto == expected.size()) {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + DocsEnum.NO_MORE_DOCS + \" actual=\" + docID);\n        }\n        assertEquals(DocsEnum.NO_MORE_DOCS, docID);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + expected.get(upto) + \" actual=\" + docID);\n        }\n        assertTrue(docID != DocsEnum.NO_MORE_DOCS);\n        assertEquals(expected.get(upto).intValue(), docID);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testOne(DocsEnum,List[Integer]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testOne(DocsEnum,List[Integer]).mjava","sourceNew":"  private void testOne(DocsEnum docs, List<Integer> expected) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"test\");\n    }\n    int upto = -1;\n    while(upto < expected.size()) {\n      if (VERBOSE) {\n        System.out.println(\"  cycle upto=\" + upto + \" of \" + expected.size());\n      }\n      final int docID;\n      if (random.nextInt(4) == 1 || upto == expected.size()-1) {\n        // test nextDoc()\n        if (VERBOSE) {\n          System.out.println(\"    do nextDoc\");\n        }\n        upto++;\n        docID = docs.nextDoc();\n      } else {\n        // test advance()\n        final int inc = _TestUtil.nextInt(random, 1, expected.size()-1-upto);\n        if (VERBOSE) {\n          System.out.println(\"    do advance inc=\" + inc);\n        }\n        upto += inc;\n        docID = docs.advance(expected.get(upto));\n      }\n      if (upto == expected.size()) {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + DocIdSetIterator.NO_MORE_DOCS + \" actual=\" + docID);\n        }\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docID);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + expected.get(upto) + \" actual=\" + docID);\n        }\n        assertTrue(docID != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(expected.get(upto).intValue(), docID);\n      }\n    }\n  }\n\n","sourceOld":"  private void testOne(DocsEnum docs, List<Integer> expected) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"test\");\n    }\n    int upto = -1;\n    while(upto < expected.size()) {\n      if (VERBOSE) {\n        System.out.println(\"  cycle upto=\" + upto + \" of \" + expected.size());\n      }\n      final int docID;\n      if (random.nextInt(4) == 1 || upto == expected.size()-1) {\n        // test nextDoc()\n        if (VERBOSE) {\n          System.out.println(\"    do nextDoc\");\n        }\n        upto++;\n        docID = docs.nextDoc();\n      } else {\n        // test advance()\n        final int inc = _TestUtil.nextInt(random, 1, expected.size()-1-upto);\n        if (VERBOSE) {\n          System.out.println(\"    do advance inc=\" + inc);\n        }\n        upto += inc;\n        docID = docs.advance(expected.get(upto));\n      }\n      if (upto == expected.size()) {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + DocsEnum.NO_MORE_DOCS + \" actual=\" + docID);\n        }\n        assertEquals(DocsEnum.NO_MORE_DOCS, docID);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + expected.get(upto) + \" actual=\" + docID);\n        }\n        assertTrue(docID != DocsEnum.NO_MORE_DOCS);\n        assertEquals(expected.get(upto).intValue(), docID);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testOne(DocsEnum,List[Integer]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testOne(DocsEnum,List[Integer]).mjava","sourceNew":"  private void testOne(DocsEnum docs, List<Integer> expected) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"test\");\n    }\n    int upto = -1;\n    while(upto < expected.size()) {\n      if (VERBOSE) {\n        System.out.println(\"  cycle upto=\" + upto + \" of \" + expected.size());\n      }\n      final int docID;\n      if (random.nextInt(4) == 1 || upto == expected.size()-1) {\n        // test nextDoc()\n        if (VERBOSE) {\n          System.out.println(\"    do nextDoc\");\n        }\n        upto++;\n        docID = docs.nextDoc();\n      } else {\n        // test advance()\n        final int inc = _TestUtil.nextInt(random, 1, expected.size()-1-upto);\n        if (VERBOSE) {\n          System.out.println(\"    do advance inc=\" + inc);\n        }\n        upto += inc;\n        docID = docs.advance(expected.get(upto));\n      }\n      if (upto == expected.size()) {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + DocIdSetIterator.NO_MORE_DOCS + \" actual=\" + docID);\n        }\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docID);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + expected.get(upto) + \" actual=\" + docID);\n        }\n        assertTrue(docID != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(expected.get(upto).intValue(), docID);\n      }\n    }\n  }\n\n","sourceOld":"  private void testOne(DocsEnum docs, List<Integer> expected) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"test\");\n    }\n    int upto = -1;\n    while(upto < expected.size()) {\n      if (VERBOSE) {\n        System.out.println(\"  cycle upto=\" + upto + \" of \" + expected.size());\n      }\n      final int docID;\n      if (random.nextInt(4) == 1 || upto == expected.size()-1) {\n        // test nextDoc()\n        if (VERBOSE) {\n          System.out.println(\"    do nextDoc\");\n        }\n        upto++;\n        docID = docs.nextDoc();\n      } else {\n        // test advance()\n        final int inc = _TestUtil.nextInt(random, 1, expected.size()-1-upto);\n        if (VERBOSE) {\n          System.out.println(\"    do advance inc=\" + inc);\n        }\n        upto += inc;\n        docID = docs.advance(expected.get(upto));\n      }\n      if (upto == expected.size()) {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + DocsEnum.NO_MORE_DOCS + \" actual=\" + docID);\n        }\n        assertEquals(DocsEnum.NO_MORE_DOCS, docID);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + expected.get(upto) + \" actual=\" + docID);\n        }\n        assertTrue(docID != DocsEnum.NO_MORE_DOCS);\n        assertEquals(expected.get(upto).intValue(), docID);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testOne(DocsEnum,List[Integer]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testOne(DocsEnum,List[Integer]).mjava","sourceNew":"  private void testOne(DocsEnum docs, List<Integer> expected) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"test\");\n    }\n    int upto = -1;\n    while(upto < expected.size()) {\n      if (VERBOSE) {\n        System.out.println(\"  cycle upto=\" + upto + \" of \" + expected.size());\n      }\n      final int docID;\n      if (random().nextInt(4) == 1 || upto == expected.size()-1) {\n        // test nextDoc()\n        if (VERBOSE) {\n          System.out.println(\"    do nextDoc\");\n        }\n        upto++;\n        docID = docs.nextDoc();\n      } else {\n        // test advance()\n        final int inc = _TestUtil.nextInt(random(), 1, expected.size()-1-upto);\n        if (VERBOSE) {\n          System.out.println(\"    do advance inc=\" + inc);\n        }\n        upto += inc;\n        docID = docs.advance(expected.get(upto));\n      }\n      if (upto == expected.size()) {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + DocIdSetIterator.NO_MORE_DOCS + \" actual=\" + docID);\n        }\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docID);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + expected.get(upto) + \" actual=\" + docID);\n        }\n        assertTrue(docID != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(expected.get(upto).intValue(), docID);\n      }\n    }\n  }\n\n","sourceOld":"  private void testOne(DocsEnum docs, List<Integer> expected) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"test\");\n    }\n    int upto = -1;\n    while(upto < expected.size()) {\n      if (VERBOSE) {\n        System.out.println(\"  cycle upto=\" + upto + \" of \" + expected.size());\n      }\n      final int docID;\n      if (random.nextInt(4) == 1 || upto == expected.size()-1) {\n        // test nextDoc()\n        if (VERBOSE) {\n          System.out.println(\"    do nextDoc\");\n        }\n        upto++;\n        docID = docs.nextDoc();\n      } else {\n        // test advance()\n        final int inc = _TestUtil.nextInt(random, 1, expected.size()-1-upto);\n        if (VERBOSE) {\n          System.out.println(\"    do advance inc=\" + inc);\n        }\n        upto += inc;\n        docID = docs.advance(expected.get(upto));\n      }\n      if (upto == expected.size()) {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + DocIdSetIterator.NO_MORE_DOCS + \" actual=\" + docID);\n        }\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docID);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + expected.get(upto) + \" actual=\" + docID);\n        }\n        assertTrue(docID != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(expected.get(upto).intValue(), docID);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testOne(DocsEnum,List[Integer]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testOne(DocsEnum,List[Integer]).mjava","sourceNew":"  private void testOne(DocsEnum docs, List<Integer> expected) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"test\");\n    }\n    int upto = -1;\n    while(upto < expected.size()) {\n      if (VERBOSE) {\n        System.out.println(\"  cycle upto=\" + upto + \" of \" + expected.size());\n      }\n      final int docID;\n      if (random().nextInt(4) == 1 || upto == expected.size()-1) {\n        // test nextDoc()\n        if (VERBOSE) {\n          System.out.println(\"    do nextDoc\");\n        }\n        upto++;\n        docID = docs.nextDoc();\n      } else {\n        // test advance()\n        final int inc = TestUtil.nextInt(random(), 1, expected.size() - 1 - upto);\n        if (VERBOSE) {\n          System.out.println(\"    do advance inc=\" + inc);\n        }\n        upto += inc;\n        docID = docs.advance(expected.get(upto));\n      }\n      if (upto == expected.size()) {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + DocIdSetIterator.NO_MORE_DOCS + \" actual=\" + docID);\n        }\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docID);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + expected.get(upto) + \" actual=\" + docID);\n        }\n        assertTrue(docID != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(expected.get(upto).intValue(), docID);\n      }\n    }\n  }\n\n","sourceOld":"  private void testOne(DocsEnum docs, List<Integer> expected) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"test\");\n    }\n    int upto = -1;\n    while(upto < expected.size()) {\n      if (VERBOSE) {\n        System.out.println(\"  cycle upto=\" + upto + \" of \" + expected.size());\n      }\n      final int docID;\n      if (random().nextInt(4) == 1 || upto == expected.size()-1) {\n        // test nextDoc()\n        if (VERBOSE) {\n          System.out.println(\"    do nextDoc\");\n        }\n        upto++;\n        docID = docs.nextDoc();\n      } else {\n        // test advance()\n        final int inc = _TestUtil.nextInt(random(), 1, expected.size()-1-upto);\n        if (VERBOSE) {\n          System.out.println(\"    do advance inc=\" + inc);\n        }\n        upto += inc;\n        docID = docs.advance(expected.get(upto));\n      }\n      if (upto == expected.size()) {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + DocIdSetIterator.NO_MORE_DOCS + \" actual=\" + docID);\n        }\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docID);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + expected.get(upto) + \" actual=\" + docID);\n        }\n        assertTrue(docID != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(expected.get(upto).intValue(), docID);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testOne(PostingsEnum,List[Integer]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testOne(DocsEnum,List[Integer]).mjava","sourceNew":"  private void testOne(PostingsEnum docs, List<Integer> expected) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"test\");\n    }\n    int upto = -1;\n    while(upto < expected.size()) {\n      if (VERBOSE) {\n        System.out.println(\"  cycle upto=\" + upto + \" of \" + expected.size());\n      }\n      final int docID;\n      if (random().nextInt(4) == 1 || upto == expected.size()-1) {\n        // test nextDoc()\n        if (VERBOSE) {\n          System.out.println(\"    do nextDoc\");\n        }\n        upto++;\n        docID = docs.nextDoc();\n      } else {\n        // test advance()\n        final int inc = TestUtil.nextInt(random(), 1, expected.size() - 1 - upto);\n        if (VERBOSE) {\n          System.out.println(\"    do advance inc=\" + inc);\n        }\n        upto += inc;\n        docID = docs.advance(expected.get(upto));\n      }\n      if (upto == expected.size()) {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + DocIdSetIterator.NO_MORE_DOCS + \" actual=\" + docID);\n        }\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docID);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + expected.get(upto) + \" actual=\" + docID);\n        }\n        assertTrue(docID != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(expected.get(upto).intValue(), docID);\n      }\n    }\n  }\n\n","sourceOld":"  private void testOne(DocsEnum docs, List<Integer> expected) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"test\");\n    }\n    int upto = -1;\n    while(upto < expected.size()) {\n      if (VERBOSE) {\n        System.out.println(\"  cycle upto=\" + upto + \" of \" + expected.size());\n      }\n      final int docID;\n      if (random().nextInt(4) == 1 || upto == expected.size()-1) {\n        // test nextDoc()\n        if (VERBOSE) {\n          System.out.println(\"    do nextDoc\");\n        }\n        upto++;\n        docID = docs.nextDoc();\n      } else {\n        // test advance()\n        final int inc = TestUtil.nextInt(random(), 1, expected.size() - 1 - upto);\n        if (VERBOSE) {\n          System.out.println(\"    do advance inc=\" + inc);\n        }\n        upto += inc;\n        docID = docs.advance(expected.get(upto));\n      }\n      if (upto == expected.size()) {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + DocIdSetIterator.NO_MORE_DOCS + \" actual=\" + docID);\n        }\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docID);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + expected.get(upto) + \" actual=\" + docID);\n        }\n        assertTrue(docID != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(expected.get(upto).intValue(), docID);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"6613659748fe4411a7dcf85266e55db1f95f7315":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"51f5280f31484820499077f41fcdfe92d527d9dc":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6613659748fe4411a7dcf85266e55db1f95f7315":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}