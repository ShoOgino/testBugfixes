{"path":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#logDebugHelp(int[],QueryResponse,long,QueryResponse,long).mjava","commits":[{"id":"8735477f53284dd67c6335828378cadf20cddabc","date":1365956061,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#logDebugHelp(int[],QueryResponse,long,QueryResponse,long).mjava","pathOld":"/dev/null","sourceNew":"  protected void logDebugHelp(int[] docCounts, QueryResponse response, long shard10Count, QueryResponse response2, long shard11Count) {\n    for (int i = 0; i < docCounts.length; i++) {\n      int docCount = docCounts[i];\n      log.info(\"Expected docCount for shard1_{} = {}\", i, docCount);\n    }\n\n    log.info(\"Actual docCount for shard1_0 = {}\", shard10Count);\n    log.info(\"Actual docCount for shard1_1 = {}\", shard11Count);\n    Map<String, String> idVsVersion = new HashMap<String, String>();\n    Map<String, SolrDocument> shard10Docs = new HashMap<String, SolrDocument>();\n    Map<String, SolrDocument> shard11Docs = new HashMap<String, SolrDocument>();\n    for (int i = 0; i < response.getResults().size(); i++) {\n      SolrDocument document = response.getResults().get(i);\n      idVsVersion.put(document.getFieldValue(\"id\").toString(), document.getFieldValue(\"_version_\").toString());\n      SolrDocument old = shard10Docs.put(document.getFieldValue(\"id\").toString(), document);\n      if (old != null) {\n        log.error(\"EXTRA: ID: \" + document.getFieldValue(\"id\") + \" on shard1_0. Old version: \" + old.getFieldValue(\"_version_\") + \" new version: \" + document.getFieldValue(\"_version_\"));\n      }\n    }\n    for (int i = 0; i < response2.getResults().size(); i++) {\n      SolrDocument document = response2.getResults().get(i);\n      String value = document.getFieldValue(\"id\").toString();\n      String version = idVsVersion.get(value);\n      if (version != null) {\n        log.error(\"DUPLICATE: ID: \" + value + \" , shard1_0Version: \" + version + \" shard1_1Version:\" + document.getFieldValue(\"_version_\"));\n      }\n      SolrDocument old = shard11Docs.put(document.getFieldValue(\"id\").toString(), document);\n      if (old != null) {\n        log.error(\"EXTRA: ID: \" + document.getFieldValue(\"id\") + \" on shard1_1. Old version: \" + old.getFieldValue(\"_version_\") + \" new version: \" + document.getFieldValue(\"_version_\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#logDebugHelp(int[],QueryResponse,long,QueryResponse,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#logDebugHelp(int[],QueryResponse,long,QueryResponse,long).mjava","sourceNew":"  protected void logDebugHelp(int[] docCounts, QueryResponse response, long shard10Count, QueryResponse response2, long shard11Count) {\n    for (int i = 0; i < docCounts.length; i++) {\n      int docCount = docCounts[i];\n      log.info(\"Expected docCount for shard1_{} = {}\", i, docCount);\n    }\n\n    log.info(\"Actual docCount for shard1_0 = {}\", shard10Count);\n    log.info(\"Actual docCount for shard1_1 = {}\", shard11Count);\n    Map<String, String> idVsVersion = new HashMap<>();\n    Map<String, SolrDocument> shard10Docs = new HashMap<>();\n    Map<String, SolrDocument> shard11Docs = new HashMap<>();\n    for (int i = 0; i < response.getResults().size(); i++) {\n      SolrDocument document = response.getResults().get(i);\n      idVsVersion.put(document.getFieldValue(\"id\").toString(), document.getFieldValue(\"_version_\").toString());\n      SolrDocument old = shard10Docs.put(document.getFieldValue(\"id\").toString(), document);\n      if (old != null) {\n        log.error(\"EXTRA: ID: \" + document.getFieldValue(\"id\") + \" on shard1_0. Old version: \" + old.getFieldValue(\"_version_\") + \" new version: \" + document.getFieldValue(\"_version_\"));\n      }\n    }\n    for (int i = 0; i < response2.getResults().size(); i++) {\n      SolrDocument document = response2.getResults().get(i);\n      String value = document.getFieldValue(\"id\").toString();\n      String version = idVsVersion.get(value);\n      if (version != null) {\n        log.error(\"DUPLICATE: ID: \" + value + \" , shard1_0Version: \" + version + \" shard1_1Version:\" + document.getFieldValue(\"_version_\"));\n      }\n      SolrDocument old = shard11Docs.put(document.getFieldValue(\"id\").toString(), document);\n      if (old != null) {\n        log.error(\"EXTRA: ID: \" + document.getFieldValue(\"id\") + \" on shard1_1. Old version: \" + old.getFieldValue(\"_version_\") + \" new version: \" + document.getFieldValue(\"_version_\"));\n      }\n    }\n  }\n\n","sourceOld":"  protected void logDebugHelp(int[] docCounts, QueryResponse response, long shard10Count, QueryResponse response2, long shard11Count) {\n    for (int i = 0; i < docCounts.length; i++) {\n      int docCount = docCounts[i];\n      log.info(\"Expected docCount for shard1_{} = {}\", i, docCount);\n    }\n\n    log.info(\"Actual docCount for shard1_0 = {}\", shard10Count);\n    log.info(\"Actual docCount for shard1_1 = {}\", shard11Count);\n    Map<String, String> idVsVersion = new HashMap<String, String>();\n    Map<String, SolrDocument> shard10Docs = new HashMap<String, SolrDocument>();\n    Map<String, SolrDocument> shard11Docs = new HashMap<String, SolrDocument>();\n    for (int i = 0; i < response.getResults().size(); i++) {\n      SolrDocument document = response.getResults().get(i);\n      idVsVersion.put(document.getFieldValue(\"id\").toString(), document.getFieldValue(\"_version_\").toString());\n      SolrDocument old = shard10Docs.put(document.getFieldValue(\"id\").toString(), document);\n      if (old != null) {\n        log.error(\"EXTRA: ID: \" + document.getFieldValue(\"id\") + \" on shard1_0. Old version: \" + old.getFieldValue(\"_version_\") + \" new version: \" + document.getFieldValue(\"_version_\"));\n      }\n    }\n    for (int i = 0; i < response2.getResults().size(); i++) {\n      SolrDocument document = response2.getResults().get(i);\n      String value = document.getFieldValue(\"id\").toString();\n      String version = idVsVersion.get(value);\n      if (version != null) {\n        log.error(\"DUPLICATE: ID: \" + value + \" , shard1_0Version: \" + version + \" shard1_1Version:\" + document.getFieldValue(\"_version_\"));\n      }\n      SolrDocument old = shard11Docs.put(document.getFieldValue(\"id\").toString(), document);\n      if (old != null) {\n        log.error(\"EXTRA: ID: \" + document.getFieldValue(\"id\") + \" on shard1_1. Old version: \" + old.getFieldValue(\"_version_\") + \" new version: \" + document.getFieldValue(\"_version_\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#logDebugHelp(int[],QueryResponse,long,QueryResponse,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#logDebugHelp(int[],QueryResponse,long,QueryResponse,long).mjava","sourceNew":"  protected void logDebugHelp(int[] docCounts, QueryResponse response, long shard10Count, QueryResponse response2, long shard11Count) {\n    for (int i = 0; i < docCounts.length; i++) {\n      int docCount = docCounts[i];\n      log.info(\"Expected docCount for shard1_{} = {}\", i, docCount);\n    }\n\n    log.info(\"Actual docCount for shard1_0 = {}\", shard10Count);\n    log.info(\"Actual docCount for shard1_1 = {}\", shard11Count);\n    Map<String, String> idVsVersion = new HashMap<>();\n    Map<String, SolrDocument> shard10Docs = new HashMap<>();\n    Map<String, SolrDocument> shard11Docs = new HashMap<>();\n    for (int i = 0; i < response.getResults().size(); i++) {\n      SolrDocument document = response.getResults().get(i);\n      idVsVersion.put(document.getFieldValue(\"id\").toString(), document.getFieldValue(\"_version_\").toString());\n      SolrDocument old = shard10Docs.put(document.getFieldValue(\"id\").toString(), document);\n      if (old != null) {\n        log.error(\"EXTRA: ID: \" + document.getFieldValue(\"id\") + \" on shard1_0. Old version: \" + old.getFieldValue(\"_version_\") + \" new version: \" + document.getFieldValue(\"_version_\"));\n      }\n    }\n    for (int i = 0; i < response2.getResults().size(); i++) {\n      SolrDocument document = response2.getResults().get(i);\n      String value = document.getFieldValue(\"id\").toString();\n      String version = idVsVersion.get(value);\n      if (version != null) {\n        log.error(\"DUPLICATE: ID: \" + value + \" , shard1_0Version: \" + version + \" shard1_1Version:\" + document.getFieldValue(\"_version_\"));\n      }\n      SolrDocument old = shard11Docs.put(document.getFieldValue(\"id\").toString(), document);\n      if (old != null) {\n        log.error(\"EXTRA: ID: \" + document.getFieldValue(\"id\") + \" on shard1_1. Old version: \" + old.getFieldValue(\"_version_\") + \" new version: \" + document.getFieldValue(\"_version_\"));\n      }\n    }\n  }\n\n","sourceOld":"  protected void logDebugHelp(int[] docCounts, QueryResponse response, long shard10Count, QueryResponse response2, long shard11Count) {\n    for (int i = 0; i < docCounts.length; i++) {\n      int docCount = docCounts[i];\n      log.info(\"Expected docCount for shard1_{} = {}\", i, docCount);\n    }\n\n    log.info(\"Actual docCount for shard1_0 = {}\", shard10Count);\n    log.info(\"Actual docCount for shard1_1 = {}\", shard11Count);\n    Map<String, String> idVsVersion = new HashMap<>();\n    Map<String, SolrDocument> shard10Docs = new HashMap<>();\n    Map<String, SolrDocument> shard11Docs = new HashMap<>();\n    for (int i = 0; i < response.getResults().size(); i++) {\n      SolrDocument document = response.getResults().get(i);\n      idVsVersion.put(document.getFieldValue(\"id\").toString(), document.getFieldValue(\"_version_\").toString());\n      SolrDocument old = shard10Docs.put(document.getFieldValue(\"id\").toString(), document);\n      if (old != null) {\n        log.error(\"EXTRA: ID: \" + document.getFieldValue(\"id\") + \" on shard1_0. Old version: \" + old.getFieldValue(\"_version_\") + \" new version: \" + document.getFieldValue(\"_version_\"));\n      }\n    }\n    for (int i = 0; i < response2.getResults().size(); i++) {\n      SolrDocument document = response2.getResults().get(i);\n      String value = document.getFieldValue(\"id\").toString();\n      String version = idVsVersion.get(value);\n      if (version != null) {\n        log.error(\"DUPLICATE: ID: \" + value + \" , shard1_0Version: \" + version + \" shard1_1Version:\" + document.getFieldValue(\"_version_\"));\n      }\n      SolrDocument old = shard11Docs.put(document.getFieldValue(\"id\").toString(), document);\n      if (old != null) {\n        log.error(\"EXTRA: ID: \" + document.getFieldValue(\"id\") + \" on shard1_1. Old version: \" + old.getFieldValue(\"_version_\") + \" new version: \" + document.getFieldValue(\"_version_\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#logDebugHelp(int[],QueryResponse,long,QueryResponse,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#logDebugHelp(int[],QueryResponse,long,QueryResponse,long).mjava","sourceNew":"  protected void logDebugHelp(int[] docCounts, QueryResponse response, long shard10Count, QueryResponse response2, long shard11Count) {\n    for (int i = 0; i < docCounts.length; i++) {\n      int docCount = docCounts[i];\n      log.info(\"Expected docCount for shard1_{} = {}\", i, docCount);\n    }\n\n    log.info(\"Actual docCount for shard1_0 = {}\", shard10Count);\n    log.info(\"Actual docCount for shard1_1 = {}\", shard11Count);\n    Map<String, String> idVsVersion = new HashMap<>();\n    Map<String, SolrDocument> shard10Docs = new HashMap<>();\n    Map<String, SolrDocument> shard11Docs = new HashMap<>();\n    for (int i = 0; i < response.getResults().size(); i++) {\n      SolrDocument document = response.getResults().get(i);\n      idVsVersion.put(document.getFieldValue(\"id\").toString(), document.getFieldValue(\"_version_\").toString());\n      SolrDocument old = shard10Docs.put(document.getFieldValue(\"id\").toString(), document);\n      if (old != null) {\n        log.error(\"EXTRA: ID: \" + document.getFieldValue(\"id\") + \" on shard1_0. Old version: \" + old.getFieldValue(\"_version_\") + \" new version: \" + document.getFieldValue(\"_version_\"));\n      }\n    }\n    for (int i = 0; i < response2.getResults().size(); i++) {\n      SolrDocument document = response2.getResults().get(i);\n      String value = document.getFieldValue(\"id\").toString();\n      String version = idVsVersion.get(value);\n      if (version != null) {\n        log.error(\"DUPLICATE: ID: \" + value + \" , shard1_0Version: \" + version + \" shard1_1Version:\" + document.getFieldValue(\"_version_\"));\n      }\n      SolrDocument old = shard11Docs.put(document.getFieldValue(\"id\").toString(), document);\n      if (old != null) {\n        log.error(\"EXTRA: ID: \" + document.getFieldValue(\"id\") + \" on shard1_1. Old version: \" + old.getFieldValue(\"_version_\") + \" new version: \" + document.getFieldValue(\"_version_\"));\n      }\n    }\n  }\n\n","sourceOld":"  protected void logDebugHelp(int[] docCounts, QueryResponse response, long shard10Count, QueryResponse response2, long shard11Count) {\n    for (int i = 0; i < docCounts.length; i++) {\n      int docCount = docCounts[i];\n      log.info(\"Expected docCount for shard1_{} = {}\", i, docCount);\n    }\n\n    log.info(\"Actual docCount for shard1_0 = {}\", shard10Count);\n    log.info(\"Actual docCount for shard1_1 = {}\", shard11Count);\n    Map<String, String> idVsVersion = new HashMap<>();\n    Map<String, SolrDocument> shard10Docs = new HashMap<>();\n    Map<String, SolrDocument> shard11Docs = new HashMap<>();\n    for (int i = 0; i < response.getResults().size(); i++) {\n      SolrDocument document = response.getResults().get(i);\n      idVsVersion.put(document.getFieldValue(\"id\").toString(), document.getFieldValue(\"_version_\").toString());\n      SolrDocument old = shard10Docs.put(document.getFieldValue(\"id\").toString(), document);\n      if (old != null) {\n        log.error(\"EXTRA: ID: \" + document.getFieldValue(\"id\") + \" on shard1_0. Old version: \" + old.getFieldValue(\"_version_\") + \" new version: \" + document.getFieldValue(\"_version_\"));\n      }\n    }\n    for (int i = 0; i < response2.getResults().size(); i++) {\n      SolrDocument document = response2.getResults().get(i);\n      String value = document.getFieldValue(\"id\").toString();\n      String version = idVsVersion.get(value);\n      if (version != null) {\n        log.error(\"DUPLICATE: ID: \" + value + \" , shard1_0Version: \" + version + \" shard1_1Version:\" + document.getFieldValue(\"_version_\"));\n      }\n      SolrDocument old = shard11Docs.put(document.getFieldValue(\"id\").toString(), document);\n      if (old != null) {\n        log.error(\"EXTRA: ID: \" + document.getFieldValue(\"id\") + \" on shard1_1. Old version: \" + old.getFieldValue(\"_version_\") + \" new version: \" + document.getFieldValue(\"_version_\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8735477f53284dd67c6335828378cadf20cddabc"],"b94236357aaa22b76c10629851fe4e376e0cea82":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"8735477f53284dd67c6335828378cadf20cddabc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8735477f53284dd67c6335828378cadf20cddabc"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"8735477f53284dd67c6335828378cadf20cddabc":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}