{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testBehaviorEquivilenceOfUninvertibleFalse().mjava","commits":[{"id":"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e","date":1541777404,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testBehaviorEquivilenceOfUninvertibleFalse().mjava","pathOld":"/dev/null","sourceNew":"  public void testBehaviorEquivilenceOfUninvertibleFalse() throws Exception {\n    Client client = Client.localClient();\n    indexSimple(client);\n\n    // regardless of the facet method (parameterized via default at test class level)\n    // faceting on an \"uninvertible=false docValues=false\" field is not supported.\n    //\n    // it should behave the same as any attempt (using any method) at faceting on\n    // and \"indexed=false docValues=false\" field...\n    for (String f : Arrays.asList(\"where_s_not_indexed_sS\",\n                                  \"where_s_multi_not_uninvert\",\n                                  \"where_s_single_not_uninvert\")) {\n      SolrQueryRequest request = req(\"rows\", \"0\", \"q\", \"num_i:[* TO 2]\", \"json.facet\",\n                                     \"{x: {type:terms, field:'\"+f+\"'}}\");\n      if (FacetField.FacetMethod.DEFAULT_METHOD == FacetField.FacetMethod.DVHASH\n          && !f.contains(\"multi\")) {\n        // DVHASH is (currently) weird...\n        //\n        // it's ignored for multi valued fields -- but for single valued fields, it explicitly\n        // checks the *FieldInfos* on the reader to see if the DocVals type is ok.\n        //\n        // Which means that unlike most other facet method:xxx options, it fails hard if you try to use it\n        // on a field where no docs have been indexed (yet).\n        expectThrows(SolrException.class, () ->{\n            assertJQ(request);\n          });\n        \n      } else {\n        // In most cases, we should just get no buckets back...\n        assertJQ(request\n                 , \"response/numFound==3\"\n                 , \"facets/count==3\"\n                 , \"facets/x=={buckets:[]}\"\n\n                 );\n      }\n    }\n\n    // regardless of the facet method (parameterized via default at test class level)\n    // faceting on an \"uninvertible=false docValues=true\" field should work,\n    //\n    // it should behave equivilently to it's copyField source...\n    for (String f : Arrays.asList(\"where_s\",\n                                  \"where_s_multi_not_uninvert_dv\",\n                                  \"where_s_single_not_uninvert_dv\")) {\n      assertJQ(req(\"rows\", \"0\", \"q\", \"num_i:[* TO 2]\", \"json.facet\",\n                   \"{x: {type:terms, field:'\"+f+\"'}}\")\n               , \"response/numFound==3\"\n               , \"facets/count==3\"\n               , \"facets/x=={buckets:[ {val:NY, count:2} , {val:NJ, count:1} ]}\"\n               );\n    }\n   \n    // faceting on an \"uninvertible=false docValues=false\" field should be possible\n    // when using method:enum w/sort:index\n    //\n    // it should behave equivilent to it's copyField source...\n    for (String f : Arrays.asList(\"where_s\",\n                                  \"where_s_multi_not_uninvert\",\n                                  \"where_s_single_not_uninvert\")) {\n      assertJQ(req(\"rows\", \"0\", \"q\", \"num_i:[* TO 2]\", \"json.facet\",\n                                     \"{x: {type:terms, sort:'index asc', method:enum, field:'\"+f+\"'}}\")\n               , \"response/numFound==3\"\n               , \"facets/count==3\"\n               , \"facets/x=={buckets:[ {val:NJ, count:1} , {val:NY, count:2} ]}\"\n               );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}