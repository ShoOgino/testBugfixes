{"path":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","sourceNew":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) throws IOException {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.allTransitions = compiled.sortedTransitions;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","sourceOld":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) throws IOException {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.allTransitions = compiled.sortedTransitions;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","sourceNew":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) throws IOException {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.allTransitions = compiled.sortedTransitions;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","sourceOld":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) throws IOException {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.allTransitions = compiled.sortedTransitions;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}