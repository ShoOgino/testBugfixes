{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMean().mjava","commits":[{"id":"f7ca50d1c356fbe15a0179afa80057a096b11753","date":1506390115,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMean().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMean() throws Exception {\n    String cexpr = \"mean(array(1,2,3,4,5))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number mean = (Number)tuples.get(0).get(\"return-value\");\n    assertEquals(mean.doubleValue(), 3.0D, 0.0D);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9efa9c0fcd87863d1a86eed29d4304c11bc7d50a","date":1506410441,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMean().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMean() throws Exception {\n    String cexpr = \"mean(array(1,2,3,4,5))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number mean = (Number)tuples.get(0).get(\"return-value\");\n    assertEquals(mean.doubleValue(), 3.0D, 0.0D);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMean().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMean() throws Exception {\n    String cexpr = \"mean(array(1,2,3,4,5))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number mean = (Number)tuples.get(0).get(\"return-value\");\n    assertEquals(mean.doubleValue(), 3.0D, 0.0D);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMean().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMean().mjava","sourceNew":"  @Test\n  public void testMean() throws Exception {\n    String cexpr = \"mean(array(1,2,3,4,5))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number mean = (Number)tuples.get(0).get(\"return-value\");\n    assertEquals(mean.doubleValue(), 3.0D, 0.0D);\n  }\n\n","sourceOld":"  @Test\n  public void testMean() throws Exception {\n    String cexpr = \"mean(array(1,2,3,4,5))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number mean = (Number)tuples.get(0).get(\"return-value\");\n    assertEquals(mean.doubleValue(), 3.0D, 0.0D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9efa9c0fcd87863d1a86eed29d4304c11bc7d50a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f7ca50d1c356fbe15a0179afa80057a096b11753"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9efa9c0fcd87863d1a86eed29d4304c11bc7d50a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7ca50d1c356fbe15a0179afa80057a096b11753":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["9efa9c0fcd87863d1a86eed29d4304c11bc7d50a"]},"commit2Childs":{"9efa9c0fcd87863d1a86eed29d4304c11bc7d50a":["6240b74b884c5587f2a4062dd27d6c32bf228889","8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9efa9c0fcd87863d1a86eed29d4304c11bc7d50a","6240b74b884c5587f2a4062dd27d6c32bf228889","f7ca50d1c356fbe15a0179afa80057a096b11753"],"f7ca50d1c356fbe15a0179afa80057a096b11753":["9efa9c0fcd87863d1a86eed29d4304c11bc7d50a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}