{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testRegexps().mjava","commits":[{"id":"d94d6afa51157e490fc169e192a154ffc4cdad0b","date":1283184289,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testRegexps().mjava","pathOld":"/dev/null","sourceNew":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \", df));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0b96ebf39aa5127497a01b3456891ab9a50957ce"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testRegexps().mjava","pathOld":"/dev/null","sourceNew":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \", df));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \", df));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \", df));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["d94d6afa51157e490fc169e192a154ffc4cdad0b"],"d94d6afa51157e490fc169e192a154ffc4cdad0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d94d6afa51157e490fc169e192a154ffc4cdad0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d94d6afa51157e490fc169e192a154ffc4cdad0b":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d94d6afa51157e490fc169e192a154ffc4cdad0b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}