{"path":"src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a","date":1164667221,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *   \n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> fieldFilter = null;\n    Set<String> returnFields = res.getReturnFields();\n    if(returnFields != null) {\n      // copy return fields list\n      fieldFilter = new HashSet<String>(returnFields);\n      // add highlight fields\n      if(HighlightingUtils.isHighlightingEnabled(req)) {\n        for(String field: HighlightingUtils.getHighlightFields(query, req, null)) \n          fieldFilter.add(field);        \n      }\n      // fetch unique key if one exists.\n      SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n      if(null != keyField)\n          fieldFilter.add(keyField.getName());  \n    }\n\n    // get documents\n    DocIterator iter = docs.iterator();\n    for (int i=0; i<docs.size(); i++) {\n      searcher.doc(iter.nextDoc(), fieldFilter);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4cc0532e82274748c1910318b92089c5604e48a","date":1183443010,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *   \n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> fieldFilter = null;\n    Set<String> returnFields = res.getReturnFields();\n    if(returnFields != null) {\n      // copy return fields list\n      fieldFilter = new HashSet<String>(returnFields);\n      // add highlight fields\n      SolrHighlighter highligher = req.getCore().getHighlighter();\n      if(highligher.isHighlightingEnabled(req.getParams())) {\n        for(String field: highligher.getHighlightFields(query, req, null)) \n          fieldFilter.add(field);        \n      }\n      // fetch unique key if one exists.\n      SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n      if(null != keyField)\n          fieldFilter.add(keyField.getName());  \n    }\n\n    // get documents\n    DocIterator iter = docs.iterator();\n    for (int i=0; i<docs.size(); i++) {\n      searcher.doc(iter.nextDoc(), fieldFilter);\n    }\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *   \n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> fieldFilter = null;\n    Set<String> returnFields = res.getReturnFields();\n    if(returnFields != null) {\n      // copy return fields list\n      fieldFilter = new HashSet<String>(returnFields);\n      // add highlight fields\n      if(HighlightingUtils.isHighlightingEnabled(req)) {\n        for(String field: HighlightingUtils.getHighlightFields(query, req, null)) \n          fieldFilter.add(field);        \n      }\n      // fetch unique key if one exists.\n      SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n      if(null != keyField)\n          fieldFilter.add(keyField.getName());  \n    }\n\n    // get documents\n    DocIterator iter = docs.iterator();\n    for (int i=0; i<docs.size(); i++) {\n      searcher.doc(iter.nextDoc(), fieldFilter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *   \n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> fieldFilter = null;\n    Set<String> returnFields = res.getReturnFields();\n    if(returnFields != null) {\n      // copy return fields list\n      fieldFilter = new HashSet<String>(returnFields);\n      // add highlight fields\n      SolrHighlighter highligher = req.getCore().getHighlighter();\n      if(highligher.isHighlightingEnabled(req.getParams())) {\n        for(String field: highligher.getHighlightFields(query, req, null)) \n          fieldFilter.add(field);        \n      }\n      // fetch unique key if one exists.\n      SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n      if(null != keyField)\n          fieldFilter.add(keyField.getName());  \n    }\n\n    // get documents\n    DocIterator iter = docs.iterator();\n    for (int i=0; i<docs.size(); i++) {\n      searcher.doc(iter.nextDoc(), fieldFilter);\n    }\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *   \n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> fieldFilter = null;\n    Set<String> returnFields = res.getReturnFields();\n    if(returnFields != null) {\n      // copy return fields list\n      fieldFilter = new HashSet<String>(returnFields);\n      // add highlight fields\n      SolrHighlighter highligher = req.getCore().getHighlighter();\n      if(highligher.isHighlightingEnabled(req.getParams())) {\n        for(String field: highligher.getHighlightFields(query, req, null)) \n          fieldFilter.add(field);        \n      }\n      // fetch unique key if one exists.\n      SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n      if(null != keyField)\n          fieldFilter.add(keyField.getName());  \n    }\n\n    // get documents\n    DocIterator iter = docs.iterator();\n    for (int i=0; i<docs.size(); i++) {\n      searcher.doc(iter.nextDoc(), fieldFilter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4cc0532e82274748c1910318b92089c5604e48a":["7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a"],"7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["a4cc0532e82274748c1910318b92089c5604e48a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a4cc0532e82274748c1910318b92089c5604e48a":["ad94625fb8d088209f46650c8097196fec67f00c"],"7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a":["a4cc0532e82274748c1910318b92089c5604e48a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}