{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#parseParams(String,VariableResolver).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#parseParams(String,VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#parseParams(String,VariableResolver).mjava","sourceNew":"  /**\n   * Parses a string of expression into separate params. The values are separated by commas. each value will be\n   * translated into one of the following:\n   * &lt;ol&gt;\n   * &lt;li&gt;If it is in single quotes the value will be translated to a String&lt;/li&gt;\n   * &lt;li&gt;If is is not in quotes and is a number a it will be translated into a Double&lt;/li&gt;\n   * &lt;li&gt;else it is a variable which can be resolved and it will be put in as an instance of VariableWrapper&lt;/li&gt;\n   * &lt;/ol&gt;\n   *\n   * @param expression the expression to be parsed\n   * @param vr the VariableResolver instance for resolving variables\n   *\n   * @return a List of objects which can either be a string, number or a variable wrapper\n   */\n  public static List parseParams(String expression, VariableResolver vr) {\n    List result = new ArrayList();\n    expression = expression.trim();\n    String[] ss = expression.split(\",\");\n    for (int i = 0; i < ss.length; i++) {\n      ss[i] = ss[i].trim();\n      if (ss[i].startsWith(\"'\")) {//a string param has started\n        StringBuilder sb = new StringBuilder();\n        while (true) {\n          sb.append(ss[i]);\n          if (ss[i].endsWith(\"'\")) break;\n          i++;\n          if (i >= ss.length)\n            throw new DataImportHandlerException(SEVERE, \"invalid string at \" + ss[i - 1] + \" in function params: \" + expression);\n          sb.append(\",\");\n        }\n        String s = sb.substring(1, sb.length() - 1);\n        s = s.replaceAll(\"\\\\\\\\'\", \"'\");\n        result.add(s);\n      } else {\n        if (Character.isDigit(ss[i].charAt(0))) {\n          try {\n            Double doub = Double.parseDouble(ss[i]);\n            result.add(doub);\n          } catch (NumberFormatException e) {\n            if (vr.resolve(ss[i]) == null) {\n              wrapAndThrow(\n                      SEVERE, e, \"Invalid number :\" + ss[i] +\n                              \"in parameters  \" + expression);\n            }\n          }\n        } else {\n          result.add(new VariableWrapper(ss[i], vr));\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Parses a string of expression into separate params. The values are separated by commas. each value will be\n   * translated into one of the following:\n   * &lt;ol&gt;\n   * &lt;li&gt;If it is in single quotes the value will be translated to a String&lt;/li&gt;\n   * &lt;li&gt;If is is not in quotes and is a number a it will be translated into a Double&lt;/li&gt;\n   * &lt;li&gt;else it is a variable which can be resolved and it will be put in as an instance of VariableWrapper&lt;/li&gt;\n   * &lt;/ol&gt;\n   *\n   * @param expression the expression to be parsed\n   * @param vr the VariableResolver instance for resolving variables\n   *\n   * @return a List of objects which can either be a string, number or a variable wrapper\n   */\n  public static List parseParams(String expression, VariableResolver vr) {\n    List result = new ArrayList();\n    expression = expression.trim();\n    String[] ss = expression.split(\",\");\n    for (int i = 0; i < ss.length; i++) {\n      ss[i] = ss[i].trim();\n      if (ss[i].startsWith(\"'\")) {//a string param has started\n        StringBuilder sb = new StringBuilder();\n        while (true) {\n          sb.append(ss[i]);\n          if (ss[i].endsWith(\"'\")) break;\n          i++;\n          if (i >= ss.length)\n            throw new DataImportHandlerException(SEVERE, \"invalid string at \" + ss[i - 1] + \" in function params: \" + expression);\n          sb.append(\",\");\n        }\n        String s = sb.substring(1, sb.length() - 1);\n        s = s.replaceAll(\"\\\\\\\\'\", \"'\");\n        result.add(s);\n      } else {\n        if (Character.isDigit(ss[i].charAt(0))) {\n          try {\n            Double doub = Double.parseDouble(ss[i]);\n            result.add(doub);\n          } catch (NumberFormatException e) {\n            if (vr.resolve(ss[i]) == null) {\n              wrapAndThrow(\n                      SEVERE, e, \"Invalid number :\" + ss[i] +\n                              \"in parameters  \" + expression);\n            }\n          }\n        } else {\n          result.add(new VariableWrapper(ss[i], vr));\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#parseParams(String,VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#parseParams(String,VariableResolver).mjava","sourceNew":"  /**\n   * Parses a string of expression into separate params. The values are separated by commas. each value will be\n   * translated into one of the following:\n   * &lt;ol&gt;\n   * &lt;li&gt;If it is in single quotes the value will be translated to a String&lt;/li&gt;\n   * &lt;li&gt;If is is not in quotes and is a number a it will be translated into a Double&lt;/li&gt;\n   * &lt;li&gt;else it is a variable which can be resolved and it will be put in as an instance of VariableWrapper&lt;/li&gt;\n   * &lt;/ol&gt;\n   *\n   * @param expression the expression to be parsed\n   * @param vr the VariableResolver instance for resolving variables\n   *\n   * @return a List of objects which can either be a string, number or a variable wrapper\n   */\n  public static List parseParams(String expression, VariableResolver vr) {\n    List result = new ArrayList();\n    expression = expression.trim();\n    String[] ss = expression.split(\",\");\n    for (int i = 0; i < ss.length; i++) {\n      ss[i] = ss[i].trim();\n      if (ss[i].startsWith(\"'\")) {//a string param has started\n        StringBuilder sb = new StringBuilder();\n        while (true) {\n          sb.append(ss[i]);\n          if (ss[i].endsWith(\"'\")) break;\n          i++;\n          if (i >= ss.length)\n            throw new DataImportHandlerException(SEVERE, \"invalid string at \" + ss[i - 1] + \" in function params: \" + expression);\n          sb.append(\",\");\n        }\n        String s = sb.substring(1, sb.length() - 1);\n        s = s.replaceAll(\"\\\\\\\\'\", \"'\");\n        result.add(s);\n      } else {\n        if (Character.isDigit(ss[i].charAt(0))) {\n          try {\n            Double doub = Double.parseDouble(ss[i]);\n            result.add(doub);\n          } catch (NumberFormatException e) {\n            if (vr.resolve(ss[i]) == null) {\n              wrapAndThrow(\n                      SEVERE, e, \"Invalid number :\" + ss[i] +\n                              \"in parameters  \" + expression);\n            }\n          }\n        } else {\n          result.add(new VariableWrapper(ss[i], vr));\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Parses a string of expression into separate params. The values are separated by commas. each value will be\n   * translated into one of the following:\n   * &lt;ol&gt;\n   * &lt;li&gt;If it is in single quotes the value will be translated to a String&lt;/li&gt;\n   * &lt;li&gt;If is is not in quotes and is a number a it will be translated into a Double&lt;/li&gt;\n   * &lt;li&gt;else it is a variable which can be resolved and it will be put in as an instance of VariableWrapper&lt;/li&gt;\n   * &lt;/ol&gt;\n   *\n   * @param expression the expression to be parsed\n   * @param vr the VariableResolver instance for resolving variables\n   *\n   * @return a List of objects which can either be a string, number or a variable wrapper\n   */\n  public static List parseParams(String expression, VariableResolver vr) {\n    List result = new ArrayList();\n    expression = expression.trim();\n    String[] ss = expression.split(\",\");\n    for (int i = 0; i < ss.length; i++) {\n      ss[i] = ss[i].trim();\n      if (ss[i].startsWith(\"'\")) {//a string param has started\n        StringBuilder sb = new StringBuilder();\n        while (true) {\n          sb.append(ss[i]);\n          if (ss[i].endsWith(\"'\")) break;\n          i++;\n          if (i >= ss.length)\n            throw new DataImportHandlerException(SEVERE, \"invalid string at \" + ss[i - 1] + \" in function params: \" + expression);\n          sb.append(\",\");\n        }\n        String s = sb.substring(1, sb.length() - 1);\n        s = s.replaceAll(\"\\\\\\\\'\", \"'\");\n        result.add(s);\n      } else {\n        if (Character.isDigit(ss[i].charAt(0))) {\n          try {\n            Double doub = Double.parseDouble(ss[i]);\n            result.add(doub);\n          } catch (NumberFormatException e) {\n            if (vr.resolve(ss[i]) == null) {\n              wrapAndThrow(\n                      SEVERE, e, \"Invalid number :\" + ss[i] +\n                              \"in parameters  \" + expression);\n            }\n          }\n        } else {\n          result.add(new VariableWrapper(ss[i], vr));\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":5,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/Evaluator#parseParams(String,VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#parseParams(String,VariableResolver).mjava","sourceNew":"  /**\n   * Parses a string of expression into separate params. The values are separated by commas. each value will be\n   * translated into one of the following:\n   * &lt;ol&gt;\n   * &lt;li&gt;If it is in single quotes the value will be translated to a String&lt;/li&gt;\n   * &lt;li&gt;If is is not in quotes and is a number a it will be translated into a Double&lt;/li&gt;\n   * &lt;li&gt;else it is a variable which can be resolved and it will be put in as an instance of VariableWrapper&lt;/li&gt;\n   * &lt;/ol&gt;\n   *\n   * @param expression the expression to be parsed\n   * @param vr the VariableResolver instance for resolving variables\n   *\n   * @return a List of objects which can either be a string, number or a variable wrapper\n   */\n  List<Object> parseParams(String expression, VariableResolver vr) {\n    List<Object> result = new ArrayList<Object>();\n    expression = expression.trim();\n    String[] ss = expression.split(\",\");\n    for (int i = 0; i < ss.length; i++) {\n      ss[i] = ss[i].trim();\n      if (ss[i].startsWith(\"'\")) {//a string param has started\n        StringBuilder sb = new StringBuilder();\n        while (true) {\n          sb.append(ss[i]);\n          if (ss[i].endsWith(\"'\")) break;\n          i++;\n          if (i >= ss.length)\n            throw new DataImportHandlerException(SEVERE, \"invalid string at \" + ss[i - 1] + \" in function params: \" + expression);\n          sb.append(\",\");\n        }\n        String s = sb.substring(1, sb.length() - 1);\n        s = s.replaceAll(\"\\\\\\\\'\", \"'\");\n        result.add(s);\n      } else {\n        if (Character.isDigit(ss[i].charAt(0))) {\n          try {\n            Double doub = Double.parseDouble(ss[i]);\n            result.add(doub);\n          } catch (NumberFormatException e) {\n            if (vr.resolve(ss[i]) == null) {\n              wrapAndThrow(\n                      SEVERE, e, \"Invalid number :\" + ss[i] +\n                              \"in parameters  \" + expression);\n            }\n          }\n        } else {\n          result.add(new VariableWrapper(ss[i], vr));\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Parses a string of expression into separate params. The values are separated by commas. each value will be\n   * translated into one of the following:\n   * &lt;ol&gt;\n   * &lt;li&gt;If it is in single quotes the value will be translated to a String&lt;/li&gt;\n   * &lt;li&gt;If is is not in quotes and is a number a it will be translated into a Double&lt;/li&gt;\n   * &lt;li&gt;else it is a variable which can be resolved and it will be put in as an instance of VariableWrapper&lt;/li&gt;\n   * &lt;/ol&gt;\n   *\n   * @param expression the expression to be parsed\n   * @param vr the VariableResolver instance for resolving variables\n   *\n   * @return a List of objects which can either be a string, number or a variable wrapper\n   */\n  public static List parseParams(String expression, VariableResolver vr) {\n    List result = new ArrayList();\n    expression = expression.trim();\n    String[] ss = expression.split(\",\");\n    for (int i = 0; i < ss.length; i++) {\n      ss[i] = ss[i].trim();\n      if (ss[i].startsWith(\"'\")) {//a string param has started\n        StringBuilder sb = new StringBuilder();\n        while (true) {\n          sb.append(ss[i]);\n          if (ss[i].endsWith(\"'\")) break;\n          i++;\n          if (i >= ss.length)\n            throw new DataImportHandlerException(SEVERE, \"invalid string at \" + ss[i - 1] + \" in function params: \" + expression);\n          sb.append(\",\");\n        }\n        String s = sb.substring(1, sb.length() - 1);\n        s = s.replaceAll(\"\\\\\\\\'\", \"'\");\n        result.add(s);\n      } else {\n        if (Character.isDigit(ss[i].charAt(0))) {\n          try {\n            Double doub = Double.parseDouble(ss[i]);\n            result.add(doub);\n          } catch (NumberFormatException e) {\n            if (vr.resolve(ss[i]) == null) {\n              wrapAndThrow(\n                      SEVERE, e, \"Invalid number :\" + ss[i] +\n                              \"in parameters  \" + expression);\n            }\n          }\n        } else {\n          result.add(new VariableWrapper(ss[i], vr));\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#parseParams(String,VariableResolver).mjava","sourceNew":null,"sourceOld":"  /**\n   * Parses a string of expression into separate params. The values are separated by commas. each value will be\n   * translated into one of the following:\n   * &lt;ol&gt;\n   * &lt;li&gt;If it is in single quotes the value will be translated to a String&lt;/li&gt;\n   * &lt;li&gt;If is is not in quotes and is a number a it will be translated into a Double&lt;/li&gt;\n   * &lt;li&gt;else it is a variable which can be resolved and it will be put in as an instance of VariableWrapper&lt;/li&gt;\n   * &lt;/ol&gt;\n   *\n   * @param expression the expression to be parsed\n   * @param vr the VariableResolver instance for resolving variables\n   *\n   * @return a List of objects which can either be a string, number or a variable wrapper\n   */\n  public static List parseParams(String expression, VariableResolver vr) {\n    List result = new ArrayList();\n    expression = expression.trim();\n    String[] ss = expression.split(\",\");\n    for (int i = 0; i < ss.length; i++) {\n      ss[i] = ss[i].trim();\n      if (ss[i].startsWith(\"'\")) {//a string param has started\n        StringBuilder sb = new StringBuilder();\n        while (true) {\n          sb.append(ss[i]);\n          if (ss[i].endsWith(\"'\")) break;\n          i++;\n          if (i >= ss.length)\n            throw new DataImportHandlerException(SEVERE, \"invalid string at \" + ss[i - 1] + \" in function params: \" + expression);\n          sb.append(\",\");\n        }\n        String s = sb.substring(1, sb.length() - 1);\n        s = s.replaceAll(\"\\\\\\\\'\", \"'\");\n        result.add(s);\n      } else {\n        if (Character.isDigit(ss[i].charAt(0))) {\n          try {\n            Double doub = Double.parseDouble(ss[i]);\n            result.add(doub);\n          } catch (NumberFormatException e) {\n            if (vr.resolve(ss[i]) == null) {\n              wrapAndThrow(\n                      SEVERE, e, \"Invalid number :\" + ss[i] +\n                              \"in parameters  \" + expression);\n            }\n          }\n        } else {\n          result.add(new VariableWrapper(ss[i], vr));\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c7b0ae5716b6c2044195a818e9ae58205175659":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","7c7b0ae5716b6c2044195a818e9ae58205175659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c7b0ae5716b6c2044195a818e9ae58205175659"]},"commit2Childs":{"7c7b0ae5716b6c2044195a818e9ae58205175659":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}