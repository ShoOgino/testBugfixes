{"path":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomExternalQuery().mjava","commits":[{"id":"c8fda790e002fff32e201cbd0f7bed4c2b333a64","date":1309401082,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomExternalQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testCustomExternalQuery().mjava","sourceNew":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir, true);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir, true);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomExternalQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testCustomExternalQuery().mjava","sourceNew":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir, true);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir, true);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomExternalQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testCustomExternalQuery().mjava","sourceNew":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir, true);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir, true);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfd4d352ddf04b37253ad97ce1aad1448253f0f7","date":1310173878,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomExternalQuery().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomExternalQuery().mjava","sourceNew":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir, true);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir, true);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomExternalQuery().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomExternalQuery().mjava","sourceNew":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir, true);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir, true);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomExternalQuery().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomExternalQuery().mjava","sourceNew":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n    r.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir, true);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":["2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomExternalQuery().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomExternalQuery().mjava","sourceNew":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    r.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomExternalQuery().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomExternalQuery().mjava","sourceNew":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    r.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomExternalQuery().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomExternalQuery().mjava","sourceNew":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    r.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["817d8435e9135b756f08ce6710ab0baac51bdf88","dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["b89678825b68eccaf09e6ab71675fc0b0af1e099","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8fda790e002fff32e201cbd0f7bed4c2b333a64","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","63639dd66fd5bd9b90bc24dd596ae01575f27cc4","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}