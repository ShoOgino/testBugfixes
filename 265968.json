{"path":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#setReader(Reader).mjava","commits":[{"id":"b893541afcaa76dcbac2fcd24bbfa05ca6b41129","date":1342450620,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#setReader(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset(Reader).mjava","sourceNew":"  @Override\n  public void setReader(Reader input) {\n   try {\n      super.setReader(input);\n      input = super.input;\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void reset(Reader input) {\n   try {\n      super.reset(input);\n      input = super.input;\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#setReader(Reader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setReader(Reader input) {\n   try {\n      super.setReader(input);\n      input = super.input;\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#setReader(Reader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setReader(Reader input) {\n   try {\n      super.setReader(input);\n      input = super.input;\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c1b87b155748a27fbed84a0ffb3f8799177451e","date":1346349018,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#setReader(Reader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void setReader(Reader input) {\n   try {\n      super.setReader(input);\n      input = super.input;\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#setReader(Reader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void setReader(Reader input) {\n   try {\n      super.setReader(input);\n      input = super.input;\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c1b87b155748a27fbed84a0ffb3f8799177451e":["b893541afcaa76dcbac2fcd24bbfa05ca6b41129"],"b893541afcaa76dcbac2fcd24bbfa05ca6b41129":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b893541afcaa76dcbac2fcd24bbfa05ca6b41129"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b893541afcaa76dcbac2fcd24bbfa05ca6b41129"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":["aba371508186796cc6151d8223a5b4e16d02e26e","4c1b87b155748a27fbed84a0ffb3f8799177451e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4c1b87b155748a27fbed84a0ffb3f8799177451e"]},"commit2Childs":{"4c1b87b155748a27fbed84a0ffb3f8799177451e":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b893541afcaa76dcbac2fcd24bbfa05ca6b41129":["4c1b87b155748a27fbed84a0ffb3f8799177451e","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b893541afcaa76dcbac2fcd24bbfa05ca6b41129","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}