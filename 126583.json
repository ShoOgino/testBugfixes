{"path":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","pathOld":"/dev/null","sourceNew":"  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","sourceNew":null,"sourceOld":"  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","sourceNew":"  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","sourceOld":"  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","pathOld":"/dev/null","sourceNew":"  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd0a7f04b5a49a00149b867e7d51f632fb8a4664","date":1279497978,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","sourceNew":"  @Test\n  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","sourceOld":"  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","sourceNew":"  @Test\n  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","sourceOld":"  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d345a86357a4042faeebfad2693a070019c95918","date":1305385272,"type":5,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtractOnly().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","sourceNew":"  @Test\n  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtractOnly().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","sourceNew":"  @Test\n  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtractOnly().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","sourceNew":"  @Test\n  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"d345a86357a4042faeebfad2693a070019c95918":["bd0a7f04b5a49a00149b867e7d51f632fb8a4664"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["bd0a7f04b5a49a00149b867e7d51f632fb8a4664","d345a86357a4042faeebfad2693a070019c95918"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a3776dccca01c11e7046323cfad46a3b4a471233":["bd0a7f04b5a49a00149b867e7d51f632fb8a4664","d345a86357a4042faeebfad2693a070019c95918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","bd0a7f04b5a49a00149b867e7d51f632fb8a4664"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d345a86357a4042faeebfad2693a070019c95918"],"bd0a7f04b5a49a00149b867e7d51f632fb8a4664":["1da8d55113b689b06716246649de6f62430f15c0"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["5f4e87790277826a2aea119328600dfb07761f32","bd0a7f04b5a49a00149b867e7d51f632fb8a4664"],"d345a86357a4042faeebfad2693a070019c95918":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bd0a7f04b5a49a00149b867e7d51f632fb8a4664":["d345a86357a4042faeebfad2693a070019c95918","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}