{"path":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","pathOld":"src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","sourceNew":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<ReaderField, Set<ReaderField>>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<ReaderField, ReaderField>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<ReaderField>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDecendentReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<CacheEntry>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for decendents of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<ReaderField, Set<ReaderField>>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<ReaderField, ReaderField>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<ReaderField>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDecendentReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<CacheEntry>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for decendents of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","sourceNew":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<ReaderField, Set<ReaderField>>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<ReaderField, ReaderField>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<ReaderField>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDescendentReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<CacheEntry>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for descendants of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<ReaderField, Set<ReaderField>>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<ReaderField, ReaderField>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<ReaderField>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDecendentReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<CacheEntry>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for decendents of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","sourceNew":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<ReaderField, Set<ReaderField>>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<ReaderField, ReaderField>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<ReaderField>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDescendentReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<CacheEntry>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for descendants of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<ReaderField, Set<ReaderField>>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<ReaderField, ReaderField>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<ReaderField>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDecendentReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<CacheEntry>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for decendents of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","sourceNew":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<ReaderField, Set<ReaderField>>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<ReaderField, ReaderField>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<ReaderField>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDescendentReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<CacheEntry>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for descendants of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<ReaderField, Set<ReaderField>>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<ReaderField, ReaderField>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<ReaderField>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDecendentReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<CacheEntry>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for decendents of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"394c00f30af74c90fe5ad1ec80ad2f781b7a69d7","date":1320858224,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","sourceNew":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<ReaderField, Set<ReaderField>>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<ReaderField, ReaderField>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<ReaderField>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDescendantReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<CacheEntry>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for descendants of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<ReaderField, Set<ReaderField>>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<ReaderField, ReaderField>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<ReaderField>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDescendentReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<CacheEntry>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for descendants of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","sourceNew":null,"sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<ReaderField, Set<ReaderField>>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<ReaderField, ReaderField>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<ReaderField>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDescendantReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<CacheEntry>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for descendants of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","sourceNew":null,"sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<ReaderField, Set<ReaderField>>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<ReaderField, ReaderField>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<ReaderField>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDescendantReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<CacheEntry>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for descendants of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fa38e5ecc85303dce7ded93b3cc9a48b3d546d9","date":1327969999,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<ReaderField, Set<ReaderField>>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<ReaderField, ReaderField>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<ReaderField>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDescendantReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<CacheEntry>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for descendants of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","sourceNew":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<ReaderField, Set<ReaderField>>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<ReaderField, ReaderField>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<ReaderField>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDescendantReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<CacheEntry>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for descendants of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<ReaderField, Set<ReaderField>>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<ReaderField, ReaderField>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<ReaderField>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDescendantReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<CacheEntry>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for descendants of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8fa38e5ecc85303dce7ded93b3cc9a48b3d546d9":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8fa38e5ecc85303dce7ded93b3cc9a48b3d546d9"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"394c00f30af74c90fe5ad1ec80ad2f781b7a69d7":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"2553b00f699380c64959ccb27991289aae87be2e":["9454a6510e2db155fb01faa5c049b06ece95fab9","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["9454a6510e2db155fb01faa5c049b06ece95fab9","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["394c00f30af74c90fe5ad1ec80ad2f781b7a69d7","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["394c00f30af74c90fe5ad1ec80ad2f781b7a69d7"]},"commit2Childs":{"8fa38e5ecc85303dce7ded93b3cc9a48b3d546d9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["394c00f30af74c90fe5ad1ec80ad2f781b7a69d7","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"394c00f30af74c90fe5ad1ec80ad2f781b7a69d7":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["8fa38e5ecc85303dce7ded93b3cc9a48b3d546d9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}