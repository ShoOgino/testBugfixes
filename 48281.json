{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","commits":[{"id":"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","date":1358793943,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesProducer#Lucene41DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, metaCodec, \n                                Lucene42DocValuesConsumer.VERSION_START,\n                                Lucene42DocValuesConsumer.VERSION_START);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n    \n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    data = state.directory.openInput(dataName, state.context);\n    CodecUtil.checkHeader(data, dataCodec, \n                                Lucene42DocValuesConsumer.VERSION_START,\n                                Lucene42DocValuesConsumer.VERSION_START);\n  }\n\n","sourceOld":"  Lucene41DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, metaCodec, \n                                Lucene41DocValuesConsumer.VERSION_START,\n                                Lucene41DocValuesConsumer.VERSION_START);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n    \n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    data = state.directory.openInput(dataName, state.context);\n    CodecUtil.checkHeader(data, dataCodec, \n                                Lucene41DocValuesConsumer.VERSION_START,\n                                Lucene41DocValuesConsumer.VERSION_START);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce33b902e857f52067011e1a4f4bd4a42627b139","date":1359144094,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, metaCodec, \n                                Lucene42DocValuesConsumer.VERSION_START,\n                                Lucene42DocValuesConsumer.VERSION_START);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n    \n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    data = state.directory.openInput(dataName, state.context);\n    CodecUtil.checkHeader(data, dataCodec, \n                                Lucene42DocValuesConsumer.VERSION_START,\n                                Lucene42DocValuesConsumer.VERSION_START);\n  }\n\n","sourceOld":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, metaCodec, \n                                Lucene42DocValuesConsumer.VERSION_START,\n                                Lucene42DocValuesConsumer.VERSION_START);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n    \n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    data = state.directory.openInput(dataName, state.context);\n    CodecUtil.checkHeader(data, dataCodec, \n                                Lucene42DocValuesConsumer.VERSION_START,\n                                Lucene42DocValuesConsumer.VERSION_START);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, metaCodec, \n                                Lucene42DocValuesConsumer.VERSION_START,\n                                Lucene42DocValuesConsumer.VERSION_START);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n    \n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    data = state.directory.openInput(dataName, state.context);\n    CodecUtil.checkHeader(data, dataCodec, \n                                Lucene42DocValuesConsumer.VERSION_START,\n                                Lucene42DocValuesConsumer.VERSION_START);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf317f41f8247db62a955791ebb8a5ab3e7c8d47","date":1366724337,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene42DocValuesConsumer.VERSION_START,\n                                      Lucene42DocValuesConsumer.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene42DocValuesConsumer.VERSION_START,\n                                                 Lucene42DocValuesConsumer.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, metaCodec, \n                                Lucene42DocValuesConsumer.VERSION_START,\n                                Lucene42DocValuesConsumer.VERSION_START);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n    \n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    data = state.directory.openInput(dataName, state.context);\n    CodecUtil.checkHeader(data, dataCodec, \n                                Lucene42DocValuesConsumer.VERSION_START,\n                                Lucene42DocValuesConsumer.VERSION_START);\n  }\n\n","bugFix":null,"bugIntro":["37bbe660229a1c295260800f4ee03365b37fa15c","9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09a42395865f791464f0bd5f6118a4abbfa3eb8a","date":1376920143,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene42DocValuesConsumer.VERSION_START,\n                                      Lucene42DocValuesConsumer.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene42DocValuesConsumer.VERSION_START,\n                                                 Lucene42DocValuesConsumer.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene42DocValuesConsumer.VERSION_START,\n                                      Lucene42DocValuesConsumer.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene42DocValuesConsumer.VERSION_START,\n                                                 Lucene42DocValuesConsumer.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene42DocValuesConsumer.VERSION_START,\n                                      Lucene42DocValuesConsumer.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene42DocValuesConsumer.VERSION_START,\n                                                 Lucene42DocValuesConsumer.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dac1db31006989ae24922811f00f909d30f1391d","date":1387560411,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<>();\n      binaries = new HashMap<>();\n      fsts = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6120217e09092280e618050d052131ebcf6802d5","date":1395430033,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<>();\n      binaries = new HashMap<>();\n      fsts = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (in.getFilePointer() != in.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + metaName + \"\\\": read \" + in.getFilePointer() + \" vs size \" + in.length() + \" (resource: \" + in + \")\");\n      }\n      \n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<>();\n      binaries = new HashMap<>();\n      fsts = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<>();\n      binaries = new HashMap<>();\n      fsts = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n      \n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<>();\n      binaries = new HashMap<>();\n      fsts = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (in.getFilePointer() != in.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + metaName + \"\\\": read \" + in.getFilePointer() + \" vs size \" + in.length() + \" (resource: \" + in + \")\");\n      }\n      \n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<>();\n      binaries = new HashMap<>();\n      fsts = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n      \n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<>();\n      binaries = new HashMap<>();\n      fsts = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (in.getFilePointer() != in.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + metaName + \"\\\": read \" + in.getFilePointer() + \" vs size \" + in.length() + \" (resource: \" + in + \")\");\n      }\n      \n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37bbe660229a1c295260800f4ee03365b37fa15c","date":1400939801,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<>();\n      binaries = new HashMap<>();\n      fsts = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n      \n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<>();\n      binaries = new HashMap<>();\n      fsts = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n      \n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b612f3f700a1ca999f12198b7a33c65b4a96fd0","date":1406127397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<>();\n      binaries = new HashMap<>();\n      fsts = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n      \n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n      \n      if (version >= VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(data);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<>();\n      binaries = new HashMap<>();\n      fsts = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n      \n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<>();\n      binaries = new HashMap<>();\n      fsts = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n      \n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n      \n      if (version >= VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(data);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<>();\n      binaries = new HashMap<>();\n      fsts = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n      \n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n      \n      if (version >= VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(data);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<>();\n      binaries = new HashMap<>();\n      fsts = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n      \n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n      \n      if (version >= VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(data);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<>();\n      binaries = new HashMap<>();\n      fsts = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n      \n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n      \n      if (version >= VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(data);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["6120217e09092280e618050d052131ebcf6802d5","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["6120217e09092280e618050d052131ebcf6802d5"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["dac1db31006989ae24922811f00f909d30f1391d"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"4b612f3f700a1ca999f12198b7a33c65b4a96fd0":["37bbe660229a1c295260800f4ee03365b37fa15c"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47","09a42395865f791464f0bd5f6118a4abbfa3eb8a"],"37bbe660229a1c295260800f4ee03365b37fa15c":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"09a42395865f791464f0bd5f6118a4abbfa3eb8a":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["4b612f3f700a1ca999f12198b7a33c65b4a96fd0","4cc45c615dbb82bf79d5f9550286098367874fbf"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ce33b902e857f52067011e1a4f4bd4a42627b139"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ce33b902e857f52067011e1a4f4bd4a42627b139":["3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["4b612f3f700a1ca999f12198b7a33c65b4a96fd0"],"dac1db31006989ae24922811f00f909d30f1391d":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"6120217e09092280e618050d052131ebcf6802d5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","37bbe660229a1c295260800f4ee03365b37fa15c"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6120217e09092280e618050d052131ebcf6802d5"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"4b612f3f700a1ca999f12198b7a33c65b4a96fd0":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","4cc45c615dbb82bf79d5f9550286098367874fbf"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","09a42395865f791464f0bd5f6118a4abbfa3eb8a"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","dac1db31006989ae24922811f00f909d30f1391d"],"37bbe660229a1c295260800f4ee03365b37fa15c":["4b612f3f700a1ca999f12198b7a33c65b4a96fd0"],"09a42395865f791464f0bd5f6118a4abbfa3eb8a":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["ce33b902e857f52067011e1a4f4bd4a42627b139"],"ce33b902e857f52067011e1a4f4bd4a42627b139":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"dac1db31006989ae24922811f00f909d30f1391d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6120217e09092280e618050d052131ebcf6802d5":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}