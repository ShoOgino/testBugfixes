{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckBackupStatus#fetchStatus().mjava","commits":[{"id":"4dbfe3d3dc9ac9bda8ee276ce539e571f3125052","date":1401862284,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckBackupStatus#fetchStatus().mjava","pathOld":"/dev/null","sourceNew":"    public void fetchStatus() {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), \"/solr\") + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(!m.find()) {\n            fail(\"could not find the completed timestamp in response.\");\n          }\n          backupTimestamp = m.group(1);\n          if(!backupTimestamp.equals(lastBackupTimestamp)) {\n            success = true;\n          }\n        }\n        stream.close();\n      } catch (Exception e) {\n        fail = e.getMessage();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n\n    }\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34d359645acebeba5edce0f1186d99aa81bbe546","date":1402921077,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckBackupStatus#fetchStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckBackupStatus#fetchStatus().mjava","sourceNew":"    public void fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), \"/solr\") + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(pException.matcher(response).find()) {\n          fail(\"Failed to create backup\");\n        }\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(!m.find()) {\n            fail(\"could not find the completed timestamp in response.\");\n          }\n          backupTimestamp = m.group(1);\n          if(!backupTimestamp.equals(lastBackupTimestamp)) {\n            success = true;\n          }\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n\n    }\n","sourceOld":"    public void fetchStatus() {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), \"/solr\") + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(!m.find()) {\n            fail(\"could not find the completed timestamp in response.\");\n          }\n          backupTimestamp = m.group(1);\n          if(!backupTimestamp.equals(lastBackupTimestamp)) {\n            success = true;\n          }\n        }\n        stream.close();\n      } catch (Exception e) {\n        fail = e.getMessage();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n\n    }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckBackupStatus#fetchStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckBackupStatus#fetchStatus().mjava","sourceNew":"    public void fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), \"/solr\") + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(pException.matcher(response).find()) {\n          fail(\"Failed to create backup\");\n        }\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(!m.find()) {\n            fail(\"could not find the completed timestamp in response.\");\n          }\n          backupTimestamp = m.group(1);\n          if(!backupTimestamp.equals(lastBackupTimestamp)) {\n            success = true;\n          }\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n\n    }\n","sourceOld":"    public void fetchStatus() {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), \"/solr\") + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(!m.find()) {\n            fail(\"could not find the completed timestamp in response.\");\n          }\n          backupTimestamp = m.group(1);\n          if(!backupTimestamp.equals(lastBackupTimestamp)) {\n            success = true;\n          }\n        }\n        stream.close();\n      } catch (Exception e) {\n        fail = e.getMessage();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n\n    }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckBackupStatus#fetchStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckBackupStatus#fetchStatus().mjava","sourceNew":"    public void fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), \"/solr\") + \"/\" + DEFAULT_TEST_CORENAME + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(pException.matcher(response).find()) {\n          fail(\"Failed to create backup\");\n        }\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(!m.find()) {\n            fail(\"could not find the completed timestamp in response.\");\n          }\n          backupTimestamp = m.group(1);\n          if(!backupTimestamp.equals(lastBackupTimestamp)) {\n            success = true;\n          }\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n\n    }\n","sourceOld":"    public void fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), \"/solr\") + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(pException.matcher(response).find()) {\n          fail(\"Failed to create backup\");\n        }\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(!m.find()) {\n            fail(\"could not find the completed timestamp in response.\");\n          }\n          backupTimestamp = m.group(1);\n          if(!backupTimestamp.equals(lastBackupTimestamp)) {\n            success = true;\n          }\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n\n    }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6","date":1423132645,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckBackupStatus#fetchStatus().mjava","sourceNew":null,"sourceOld":"    public void fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), \"/solr\") + \"/\" + DEFAULT_TEST_CORENAME + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(pException.matcher(response).find()) {\n          fail(\"Failed to create backup\");\n        }\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(!m.find()) {\n            fail(\"could not find the completed timestamp in response.\");\n          }\n          backupTimestamp = m.group(1);\n          if(!backupTimestamp.equals(lastBackupTimestamp)) {\n            success = true;\n          }\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n\n    }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4dbfe3d3dc9ac9bda8ee276ce539e571f3125052":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["34d359645acebeba5edce0f1186d99aa81bbe546"],"34d359645acebeba5edce0f1186d99aa81bbe546":["4dbfe3d3dc9ac9bda8ee276ce539e571f3125052"],"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["4dbfe3d3dc9ac9bda8ee276ce539e571f3125052","34d359645acebeba5edce0f1186d99aa81bbe546"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6"]},"commit2Childs":{"4dbfe3d3dc9ac9bda8ee276ce539e571f3125052":["34d359645acebeba5edce0f1186d99aa81bbe546","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4dbfe3d3dc9ac9bda8ee276ce539e571f3125052"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6"],"34d359645acebeba5edce0f1186d99aa81bbe546":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}