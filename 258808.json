{"path":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testAlgorithms().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testAlgorithms().mjava","pathOld":"modules/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testAlgorithms().mjava","sourceNew":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(new Metaphone(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(new Metaphone(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(new DoubleMetaphone(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(new DoubleMetaphone(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(new Soundex(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(new Soundex(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(new RefinedSoundex(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(new RefinedSoundex(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(new Caverphone(), true, \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(new Caverphone(), false, \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n  }\n\n","sourceOld":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(new Metaphone(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(new Metaphone(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(new DoubleMetaphone(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(new DoubleMetaphone(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(new Soundex(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(new Soundex(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(new RefinedSoundex(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(new RefinedSoundex(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(new Caverphone(), true, \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(new Caverphone(), false, \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1d6778b519a53bb76b0e31b6bbb17d6920abfe0","date":1335842208,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testAlgorithms().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testAlgorithms().mjava","sourceNew":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(new Metaphone(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(new Metaphone(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(new DoubleMetaphone(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(new DoubleMetaphone(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(new Soundex(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(new Soundex(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(new RefinedSoundex(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(new RefinedSoundex(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(new Caverphone2(), true, \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(new Caverphone2(), false, \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n  }\n\n","sourceOld":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(new Metaphone(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(new Metaphone(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(new DoubleMetaphone(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(new DoubleMetaphone(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(new Soundex(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(new Soundex(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(new RefinedSoundex(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(new RefinedSoundex(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(new Caverphone(), true, \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(new Caverphone(), false, \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83ce4396c24a8d20a883c17c9770cbe348ca2df1","date":1415729085,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testAlgorithms().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testAlgorithms().mjava","sourceNew":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(new Metaphone(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(new Metaphone(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(new DoubleMetaphone(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(new DoubleMetaphone(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(new Soundex(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(new Soundex(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(new RefinedSoundex(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(new RefinedSoundex(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(new Caverphone2(), true, \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(new Caverphone2(), false, \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n\n    assertAlgorithm(new Nysiis(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"C\", \"ccc\", \"EASGAS\", \"easgasg\" });\n    assertAlgorithm(new Nysiis(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"C\", \"EASGAS\" });\n  }\n\n","sourceOld":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(new Metaphone(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(new Metaphone(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(new DoubleMetaphone(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(new DoubleMetaphone(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(new Soundex(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(new Soundex(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(new RefinedSoundex(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(new RefinedSoundex(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(new Caverphone2(), true, \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(new Caverphone2(), false, \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e1d6778b519a53bb76b0e31b6bbb17d6920abfe0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83ce4396c24a8d20a883c17c9770cbe348ca2df1":["e1d6778b519a53bb76b0e31b6bbb17d6920abfe0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83ce4396c24a8d20a883c17c9770cbe348ca2df1"]},"commit2Childs":{"e1d6778b519a53bb76b0e31b6bbb17d6920abfe0":["83ce4396c24a8d20a883c17c9770cbe348ca2df1"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e1d6778b519a53bb76b0e31b6bbb17d6920abfe0"],"83ce4396c24a8d20a883c17c9770cbe348ca2df1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}