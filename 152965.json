{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(LightAutomaton,Set[Integer]).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(LightAutomaton,Set[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  public static LightAutomaton reverse(LightAutomaton a, Set<Integer> initialStates) {\n\n    if (a.isEmpty()) {\n      return a;\n    }\n\n    int numStates = a.getNumStates();\n\n    // Build a new automaton with all edges reversed\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n\n    // Initial node; we'll add epsilon transitions in the end:\n    builder.createState();\n\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n\n    // Old initial state becomes new accept state:\n    builder.setAccept(1, true);\n\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    for (int s=0;s<numStates;s++) {\n      int numTransitions = a.getNumTransitions(s);\n      a.initTransition(s, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest+1, s+1, t.min, t.max);\n      }\n    }\n\n    LightAutomaton result = builder.finish();\n    \n    for(int s : a.getAcceptStates()) {\n      result.addEpsilon(0, s+1);\n      if (initialStates != null) {\n        initialStates.add(s+1);\n      }\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c8cfaac638acc80d26d08288440ede37e6539e9","date":1402678000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(LightAutomaton,Set[Integer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(LightAutomaton,Set[Integer]).mjava","sourceNew":"  public static LightAutomaton reverse(LightAutomaton a, Set<Integer> initialStates) {\n\n    if (a.isEmpty()) {\n      return a;\n    }\n\n    int numStates = a.getNumStates();\n\n    // Build a new automaton with all edges reversed\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n\n    // Initial node; we'll add epsilon transitions in the end:\n    builder.createState();\n\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n\n    // Old initial state becomes new accept state:\n    builder.setAccept(1, true);\n\n    Transition t = new Transition();\n    for (int s=0;s<numStates;s++) {\n      int numTransitions = a.getNumTransitions(s);\n      a.initTransition(s, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest+1, s+1, t.min, t.max);\n      }\n    }\n\n    LightAutomaton result = builder.finish();\n    \n    for(int s : a.getAcceptStates()) {\n      result.addEpsilon(0, s+1);\n      if (initialStates != null) {\n        initialStates.add(s+1);\n      }\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","sourceOld":"  public static LightAutomaton reverse(LightAutomaton a, Set<Integer> initialStates) {\n\n    if (a.isEmpty()) {\n      return a;\n    }\n\n    int numStates = a.getNumStates();\n\n    // Build a new automaton with all edges reversed\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n\n    // Initial node; we'll add epsilon transitions in the end:\n    builder.createState();\n\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n\n    // Old initial state becomes new accept state:\n    builder.setAccept(1, true);\n\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    for (int s=0;s<numStates;s++) {\n      int numTransitions = a.getNumTransitions(s);\n      a.initTransition(s, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest+1, s+1, t.min, t.max);\n      }\n    }\n\n    LightAutomaton result = builder.finish();\n    \n    for(int s : a.getAcceptStates()) {\n      result.addEpsilon(0, s+1);\n      if (initialStates != null) {\n        initialStates.add(s+1);\n      }\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(LightAutomaton,Set[Integer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(LightAutomaton,Set[Integer]).mjava","sourceNew":"  public static LightAutomaton reverse(LightAutomaton a, Set<Integer> initialStates) {\n\n    if (BasicOperations.isEmpty(a)) {\n      return new LightAutomaton();\n    }\n\n    int numStates = a.getNumStates();\n\n    // Build a new automaton with all edges reversed\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n\n    // Initial node; we'll add epsilon transitions in the end:\n    builder.createState();\n\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n\n    // Old initial state becomes new accept state:\n    builder.setAccept(1, true);\n\n    Transition t = new Transition();\n    for (int s=0;s<numStates;s++) {\n      int numTransitions = a.getNumTransitions(s);\n      a.initTransition(s, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest+1, s+1, t.min, t.max);\n      }\n    }\n\n    LightAutomaton result = builder.finish();\n\n    for(int s : a.getAcceptStates()) {\n      assert s < numStates;\n      result.addEpsilon(0, s+1);\n      if (initialStates != null) {\n        initialStates.add(s+1);\n      }\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","sourceOld":"  public static LightAutomaton reverse(LightAutomaton a, Set<Integer> initialStates) {\n\n    if (a.isEmpty()) {\n      return a;\n    }\n\n    int numStates = a.getNumStates();\n\n    // Build a new automaton with all edges reversed\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n\n    // Initial node; we'll add epsilon transitions in the end:\n    builder.createState();\n\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n\n    // Old initial state becomes new accept state:\n    builder.setAccept(1, true);\n\n    Transition t = new Transition();\n    for (int s=0;s<numStates;s++) {\n      int numTransitions = a.getNumTransitions(s);\n      a.initTransition(s, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest+1, s+1, t.min, t.max);\n      }\n    }\n\n    LightAutomaton result = builder.finish();\n    \n    for(int s : a.getAcceptStates()) {\n      result.addEpsilon(0, s+1);\n      if (initialStates != null) {\n        initialStates.add(s+1);\n      }\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#reverse(Automaton,Set[Integer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(LightAutomaton,Set[Integer]).mjava","sourceNew":"  public static Automaton reverse(Automaton a, Set<Integer> initialStates) {\n\n    if (Operations.isEmpty(a)) {\n      return new Automaton();\n    }\n\n    int numStates = a.getNumStates();\n\n    // Build a new automaton with all edges reversed\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // Initial node; we'll add epsilon transitions in the end:\n    builder.createState();\n\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n\n    // Old initial state becomes new accept state:\n    builder.setAccept(1, true);\n\n    Transition t = new Transition();\n    for (int s=0;s<numStates;s++) {\n      int numTransitions = a.getNumTransitions(s);\n      a.initTransition(s, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest+1, s+1, t.min, t.max);\n      }\n    }\n\n    Automaton result = builder.finish();\n\n    for(int s : a.getAcceptStates()) {\n      assert s < numStates;\n      result.addEpsilon(0, s+1);\n      if (initialStates != null) {\n        initialStates.add(s+1);\n      }\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","sourceOld":"  public static LightAutomaton reverse(LightAutomaton a, Set<Integer> initialStates) {\n\n    if (BasicOperations.isEmpty(a)) {\n      return new LightAutomaton();\n    }\n\n    int numStates = a.getNumStates();\n\n    // Build a new automaton with all edges reversed\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n\n    // Initial node; we'll add epsilon transitions in the end:\n    builder.createState();\n\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n\n    // Old initial state becomes new accept state:\n    builder.setAccept(1, true);\n\n    Transition t = new Transition();\n    for (int s=0;s<numStates;s++) {\n      int numTransitions = a.getNumTransitions(s);\n      a.initTransition(s, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest+1, s+1, t.min, t.max);\n      }\n    }\n\n    LightAutomaton result = builder.finish();\n\n    for(int s : a.getAcceptStates()) {\n      assert s < numStates;\n      result.addEpsilon(0, s+1);\n      if (initialStates != null) {\n        initialStates.add(s+1);\n      }\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"0c8cfaac638acc80d26d08288440ede37e6539e9":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}