{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessor2#testCompositePk_DeltaImport_DeletedPkQuery().mjava","commits":[{"id":"5a2fb92cb166ab36a1320f8bf3cb157063177c45","date":1228504451,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessor2#testCompositePk_DeltaImport_DeletedPkQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_DeletedPkQuery() throws Exception {\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"11\"));\n    MockDataSource.setIterator(\"select * from x\", parentRow.iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"desc\", \"hello\"));\n\n    MockDataSource.setIterator(\"select * from y where y.A=11\", childRow\n            .iterator());\n\n    super.runFullImport(dataConfig);\n\n    assertQ(req(\"id:11\"), \"//*[@numFound='1']\");\n\n\n\n    List deltaRow = new ArrayList();\n    deltaRow.add(createMap(\"id\", \"15\"));\n    deltaRow.add(createMap(\"id\", \"17\"));\n    MockDataSource.setIterator(\"select id from x where last_modified > NOW\",\n            deltaRow.iterator());\n\n    List deltaDeleteRow = new ArrayList();\n    deltaDeleteRow.add(createMap(\"id\", \"11\"));\n    deltaDeleteRow.add(createMap(\"id\", \"17\"));\n    MockDataSource.setIterator(\"select id from x where last_modified > NOW AND deleted='true'\",\n            deltaDeleteRow.iterator());\n\n    parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"15\"));\n    MockDataSource.setIterator(\"select * from x where id = '15'\", parentRow\n            .iterator());\n\n    parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"17\"));\n    MockDataSource.setIterator(\"select * from x where id = '17'\", parentRow\n            .iterator());\n\n    super.runDeltaImport(dataConfig);\n\n    assertQ(req(\"id:15\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:11\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:17\"), \"//*[@numFound='0']\");\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessor2#testCompositePk_DeltaImport_DeletedPkQuery().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessor2#testCompositePk_DeltaImport_DeletedPkQuery().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_DeletedPkQuery() throws Exception {\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"11\"));\n    MockDataSource.setIterator(\"select * from x\", parentRow.iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"desc\", \"hello\"));\n\n    MockDataSource.setIterator(\"select * from y where y.A=11\", childRow\n            .iterator());\n\n    super.runFullImport(dataConfig);\n\n    assertQ(req(\"id:11\"), \"//*[@numFound='1']\");\n\n\n\n    List deltaRow = new ArrayList();\n    deltaRow.add(createMap(\"id\", \"15\"));\n    deltaRow.add(createMap(\"id\", \"17\"));\n    MockDataSource.setIterator(\"select id from x where last_modified > NOW\",\n            deltaRow.iterator());\n\n    List deltaDeleteRow = new ArrayList();\n    deltaDeleteRow.add(createMap(\"id\", \"11\"));\n    deltaDeleteRow.add(createMap(\"id\", \"17\"));\n    MockDataSource.setIterator(\"select id from x where last_modified > NOW AND deleted='true'\",\n            deltaDeleteRow.iterator());\n\n    parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"15\"));\n    MockDataSource.setIterator(\"select * from x where id = '15'\", parentRow\n            .iterator());\n\n    parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"17\"));\n    MockDataSource.setIterator(\"select * from x where id = '17'\", parentRow\n            .iterator());\n\n    super.runDeltaImport(dataConfig);\n\n    assertQ(req(\"id:15\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:11\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:17\"), \"//*[@numFound='0']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_DeletedPkQuery() throws Exception {\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"11\"));\n    MockDataSource.setIterator(\"select * from x\", parentRow.iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"desc\", \"hello\"));\n\n    MockDataSource.setIterator(\"select * from y where y.A=11\", childRow\n            .iterator());\n\n    super.runFullImport(dataConfig);\n\n    assertQ(req(\"id:11\"), \"//*[@numFound='1']\");\n\n\n\n    List deltaRow = new ArrayList();\n    deltaRow.add(createMap(\"id\", \"15\"));\n    deltaRow.add(createMap(\"id\", \"17\"));\n    MockDataSource.setIterator(\"select id from x where last_modified > NOW\",\n            deltaRow.iterator());\n\n    List deltaDeleteRow = new ArrayList();\n    deltaDeleteRow.add(createMap(\"id\", \"11\"));\n    deltaDeleteRow.add(createMap(\"id\", \"17\"));\n    MockDataSource.setIterator(\"select id from x where last_modified > NOW AND deleted='true'\",\n            deltaDeleteRow.iterator());\n\n    parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"15\"));\n    MockDataSource.setIterator(\"select * from x where id = '15'\", parentRow\n            .iterator());\n\n    parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"17\"));\n    MockDataSource.setIterator(\"select * from x where id = '17'\", parentRow\n            .iterator());\n\n    super.runDeltaImport(dataConfig);\n\n    assertQ(req(\"id:15\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:11\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:17\"), \"//*[@numFound='0']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["5a2fb92cb166ab36a1320f8bf3cb157063177c45"],"5a2fb92cb166ab36a1320f8bf3cb157063177c45":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5a2fb92cb166ab36a1320f8bf3cb157063177c45"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5a2fb92cb166ab36a1320f8bf3cb157063177c45":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}