{"path":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#newExactQuery(String,double).mjava","commits":[{"id":"d3104a6ba367dfb690806b227c5ef17c42c6107b","date":1456265035,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#newExactQuery(String,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#newDoubleExact(String,double).mjava","sourceNew":"  /** \n   * Create a query for matching an exact double value.\n   * <p>\n   * This is for simple one-dimension points, for multidimensional points use\n   * {@link #newMultiRangeQuery newMultiRangeQuery()} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value double value\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents with this exact value\n   */\n  public static PointRangeQuery newExactQuery(String field, double value) {\n    return newRangeQuery(field, value, true, value, true);\n  }\n\n","sourceOld":"  /** \n   * Create a range query for matching an exact double value.\n   * <p>\n   * This is for simple one-dimension points, for multidimensional points use\n   * {@link #newMultiDoubleRange newMultiDoubleRange()} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value double value\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents with this exact value\n   */\n  public static PointRangeQuery newDoubleExact(String field, double value) {\n    return newDoubleRange(field, value, true, value, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","date":1456265720,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#newExactQuery(String,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#newDoubleExact(String,double).mjava","sourceNew":"  /** \n   * Create a query for matching an exact double value.\n   * <p>\n   * This is for simple one-dimension points, for multidimensional points use\n   * {@link #newMultiRangeQuery newMultiRangeQuery()} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value double value\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents with this exact value\n   */\n  public static PointRangeQuery newExactQuery(String field, double value) {\n    return newRangeQuery(field, value, true, value, true);\n  }\n\n","sourceOld":"  /** \n   * Create a range query for matching an exact double value.\n   * <p>\n   * This is for simple one-dimension points, for multidimensional points use\n   * {@link #newMultiDoubleRange newMultiDoubleRange()} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value double value\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents with this exact value\n   */\n  public static PointRangeQuery newDoubleExact(String field, double value) {\n    return newDoubleRange(field, value, true, value, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#newExactQuery(String,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#newDoubleExact(String,double).mjava","sourceNew":"  /** \n   * Create a query for matching an exact double value.\n   * <p>\n   * This is for simple one-dimension points, for multidimensional points use\n   * {@link #newMultiRangeQuery newMultiRangeQuery()} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value double value\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents with this exact value\n   */\n  public static PointRangeQuery newExactQuery(String field, double value) {\n    return newRangeQuery(field, value, true, value, true);\n  }\n\n","sourceOld":"  /** \n   * Create a range query for matching an exact double value.\n   * <p>\n   * This is for simple one-dimension points, for multidimensional points use\n   * {@link #newMultiDoubleRange newMultiDoubleRange()} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value double value\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents with this exact value\n   */\n  public static PointRangeQuery newDoubleExact(String field, double value) {\n    return newDoubleRange(field, value, true, value, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#newExactQuery(String,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#newDoubleExact(String,double).mjava","sourceNew":"  /** \n   * Create a query for matching an exact double value.\n   * <p>\n   * This is for simple one-dimension points, for multidimensional points use\n   * {@link #newMultiRangeQuery newMultiRangeQuery()} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value double value\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents with this exact value\n   */\n  public static PointRangeQuery newExactQuery(String field, double value) {\n    return newRangeQuery(field, value, true, value, true);\n  }\n\n","sourceOld":"  /** \n   * Create a range query for matching an exact double value.\n   * <p>\n   * This is for simple one-dimension points, for multidimensional points use\n   * {@link #newMultiDoubleRange newMultiDoubleRange()} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value double value\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents with this exact value\n   */\n  public static PointRangeQuery newDoubleExact(String field, double value) {\n    return newDoubleRange(field, value, true, value, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"609ba4ce51a7095e9815d4fb2666ec85714f8f54","date":1456320705,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#newExactQuery(String,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#newExactQuery(String,double).mjava","sourceNew":"  /** \n   * Create a query for matching an exact double value.\n   * <p>\n   * This is for simple one-dimension points, for multidimensional points use\n   * {@link #newMultiRangeQuery newMultiRangeQuery()} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value double value\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents with this exact value\n   */\n  public static Query newExactQuery(String field, double value) {\n    return newRangeQuery(field, value, true, value, true);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching an exact double value.\n   * <p>\n   * This is for simple one-dimension points, for multidimensional points use\n   * {@link #newMultiRangeQuery newMultiRangeQuery()} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value double value\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents with this exact value\n   */\n  public static PointRangeQuery newExactQuery(String field, double value) {\n    return newRangeQuery(field, value, true, value, true);\n  }\n\n","bugFix":["d3104a6ba367dfb690806b227c5ef17c42c6107b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","date":1456321728,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#newExactQuery(String,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#newExactQuery(String,double).mjava","sourceNew":"  /** \n   * Create a query for matching an exact double value.\n   * <p>\n   * This is for simple one-dimension points, for multidimensional points use\n   * {@link #newMultiRangeQuery newMultiRangeQuery()} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value double value\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents with this exact value\n   */\n  public static Query newExactQuery(String field, double value) {\n    return newRangeQuery(field, value, true, value, true);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching an exact double value.\n   * <p>\n   * This is for simple one-dimension points, for multidimensional points use\n   * {@link #newMultiRangeQuery newMultiRangeQuery()} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value double value\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents with this exact value\n   */\n  public static PointRangeQuery newExactQuery(String field, double value) {\n    return newRangeQuery(field, value, true, value, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#newExactQuery(String,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#newExactQuery(String,double).mjava","sourceNew":"  /** \n   * Create a query for matching an exact double value.\n   * <p>\n   * This is for simple one-dimension points, for multidimensional points use\n   * {@link #newRangeQuery(String, double[], double[])} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value double value\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents with this exact value\n   */\n  public static Query newExactQuery(String field, double value) {\n    return newRangeQuery(field, value, value);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching an exact double value.\n   * <p>\n   * This is for simple one-dimension points, for multidimensional points use\n   * {@link #newMultiRangeQuery newMultiRangeQuery()} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value double value\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents with this exact value\n   */\n  public static Query newExactQuery(String field, double value) {\n    return newRangeQuery(field, value, true, value, true);\n  }\n\n","bugFix":["d3104a6ba367dfb690806b227c5ef17c42c6107b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#newExactQuery(String,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#newExactQuery(String,double).mjava","sourceNew":"  /** \n   * Create a query for matching an exact double value.\n   * <p>\n   * This is for simple one-dimension points, for multidimensional points use\n   * {@link #newRangeQuery(String, double[], double[])} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value double value\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents with this exact value\n   */\n  public static Query newExactQuery(String field, double value) {\n    return newRangeQuery(field, value, value);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching an exact double value.\n   * <p>\n   * This is for simple one-dimension points, for multidimensional points use\n   * {@link #newMultiRangeQuery newMultiRangeQuery()} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value double value\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents with this exact value\n   */\n  public static Query newExactQuery(String field, double value) {\n    return newRangeQuery(field, value, true, value, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#newExactQuery(String,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#newExactQuery(String,double).mjava","sourceNew":"  /** \n   * Create a query for matching an exact double value.\n   * <p>\n   * This is for simple one-dimension points, for multidimensional points use\n   * {@link #newRangeQuery(String, double[], double[])} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value double value\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents with this exact value\n   */\n  public static Query newExactQuery(String field, double value) {\n    return newRangeQuery(field, value, value);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching an exact double value.\n   * <p>\n   * This is for simple one-dimension points, for multidimensional points use\n   * {@link #newMultiRangeQuery newMultiRangeQuery()} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value double value\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents with this exact value\n   */\n  public static Query newExactQuery(String field, double value) {\n    return newRangeQuery(field, value, true, value, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3104a6ba367dfb690806b227c5ef17c42c6107b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5296efc4b319f5647b606629c093a94b23692c6"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"a5296efc4b319f5647b606629c093a94b23692c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","c422e924212367b334b4938f1fd3e44438e88c40"],"c422e924212367b334b4938f1fd3e44438e88c40":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"d3104a6ba367dfb690806b227c5ef17c42c6107b":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3104a6ba367dfb690806b227c5ef17c42c6107b","1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}