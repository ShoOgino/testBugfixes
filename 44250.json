{"path":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","sourceNew":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<String,QueryFacet>();\n      facets = new LinkedHashMap<String,DistribFieldFacet>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n\n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n\n        for (String field : facetFs) {\n          DistribFieldFacet ff = new DistribFieldFacet(rb, field);\n          facets.put(ff.getKey(), ff);\n        }\n      }\n    }\n\n","sourceOld":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<String,QueryFacet>();\n      facets = new LinkedHashMap<String,DistribFieldFacet>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n\n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n\n        for (String field : facetFs) {\n          DistribFieldFacet ff = new DistribFieldFacet(rb, field);\n          facets.put(ff.getKey(), ff);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","sourceNew":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<String,QueryFacet>();\n      facets = new LinkedHashMap<String,DistribFieldFacet>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n\n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n\n        for (String field : facetFs) {\n          DistribFieldFacet ff = new DistribFieldFacet(rb, field);\n          facets.put(ff.getKey(), ff);\n        }\n      }\n    }\n\n","sourceOld":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<String,QueryFacet>();\n      facets = new LinkedHashMap<String,DistribFieldFacet>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n\n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n\n        for (String field : facetFs) {\n          DistribFieldFacet ff = new DistribFieldFacet(rb, field);\n          facets.put(ff.getKey(), ff);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","sourceNew":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<String,QueryFacet>();\n      facets = new LinkedHashMap<String,DistribFieldFacet>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n\n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n\n        for (String field : facetFs) {\n          DistribFieldFacet ff = new DistribFieldFacet(rb, field);\n          facets.put(ff.getKey(), ff);\n        }\n      }\n    }\n\n","sourceOld":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<String,QueryFacet>();\n      facets = new LinkedHashMap<String,DistribFieldFacet>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n\n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n\n        for (String field : facetFs) {\n          DistribFieldFacet ff = new DistribFieldFacet(rb, field);\n          facets.put(ff.getKey(), ff);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","sourceNew":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<>();\n      facets = new LinkedHashMap<>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n\n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n\n        for (String field : facetFs) {\n          DistribFieldFacet ff = new DistribFieldFacet(rb, field);\n          facets.put(ff.getKey(), ff);\n        }\n      }\n    }\n\n","sourceOld":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<String,QueryFacet>();\n      facets = new LinkedHashMap<String,DistribFieldFacet>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n\n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n\n        for (String field : facetFs) {\n          DistribFieldFacet ff = new DistribFieldFacet(rb, field);\n          facets.put(ff.getKey(), ff);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","sourceNew":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<>();\n      facets = new LinkedHashMap<>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n      \n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n        \n        for (String field : facetFs) {\n          DistribFieldFacet ff = new DistribFieldFacet(rb, field);\n          facets.put(ff.getKey(), ff);\n        }\n      }\n\n      // Develop Pivot Facet Information\n      String[] facetPFs = params.getParams(FacetParams.FACET_PIVOT);\n      if (facetPFs != null) {\n        for (String fieldGroup : facetPFs) {\n          PivotFacet pf = new PivotFacet(rb, fieldGroup);\n          pivotFacets.add(pf.getKey(), pf);\n        }\n      }\n    }\n\n","sourceOld":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<>();\n      facets = new LinkedHashMap<>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n\n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n\n        for (String field : facetFs) {\n          DistribFieldFacet ff = new DistribFieldFacet(rb, field);\n          facets.put(ff.getKey(), ff);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59d82b0be40ecfcc2c94c776b324e0903a62b844","date":1423535462,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","sourceNew":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<>();\n      facets = new LinkedHashMap<>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n      \n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n        \n        for (String field : facetFs) {\n          DistribFieldFacet ff = new DistribFieldFacet(rb, field);\n          facets.put(ff.getKey(), ff);\n        }\n      }\n\n      // Develop Pivot Facet Information\n      String[] facetPFs = params.getParams(FacetParams.FACET_PIVOT);\n      if (facetPFs != null) {\n        for (String fieldGroup : facetPFs) {\n          PivotFacet pf = new PivotFacet(rb, fieldGroup);\n          pivotFacets.add(pf.getKey(), pf);\n        }\n      }\n\n      heatmapFacets = SpatialHeatmapFacets.distribParse(params, rb);\n    }\n\n","sourceOld":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<>();\n      facets = new LinkedHashMap<>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n      \n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n        \n        for (String field : facetFs) {\n          DistribFieldFacet ff = new DistribFieldFacet(rb, field);\n          facets.put(ff.getKey(), ff);\n        }\n      }\n\n      // Develop Pivot Facet Information\n      String[] facetPFs = params.getParams(FacetParams.FACET_PIVOT);\n      if (facetPFs != null) {\n        for (String fieldGroup : facetPFs) {\n          PivotFacet pf = new PivotFacet(rb, fieldGroup);\n          pivotFacets.add(pf.getKey(), pf);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39342cb658ac11dfcbf4459807fb00eb9ada0218","date":1472876688,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","sourceNew":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<>();\n      facets = new LinkedHashMap<>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n      \n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n        \n        for (String field : facetFs) {\n          final DistribFieldFacet ff;\n          \n          if (params.getFieldBool(field, FacetParams.FACET_EXISTS, false)) {\n            // cap facet count by 1 with this method\n            ff = new DistribFacetExistsField(rb, field);\n          } else {\n            ff = new DistribFieldFacet(rb, field);\n          }\n          facets.put(ff.getKey(), ff);\n        }\n      }\n\n      // Develop Pivot Facet Information\n      String[] facetPFs = params.getParams(FacetParams.FACET_PIVOT);\n      if (facetPFs != null) {\n        for (String fieldGroup : facetPFs) {\n          PivotFacet pf = new PivotFacet(rb, fieldGroup);\n          pivotFacets.add(pf.getKey(), pf);\n        }\n      }\n\n      heatmapFacets = SpatialHeatmapFacets.distribParse(params, rb);\n    }\n\n","sourceOld":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<>();\n      facets = new LinkedHashMap<>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n      \n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n        \n        for (String field : facetFs) {\n          DistribFieldFacet ff = new DistribFieldFacet(rb, field);\n          facets.put(ff.getKey(), ff);\n        }\n      }\n\n      // Develop Pivot Facet Information\n      String[] facetPFs = params.getParams(FacetParams.FACET_PIVOT);\n      if (facetPFs != null) {\n        for (String fieldGroup : facetPFs) {\n          PivotFacet pf = new PivotFacet(rb, fieldGroup);\n          pivotFacets.add(pf.getKey(), pf);\n        }\n      }\n\n      heatmapFacets = SpatialHeatmapFacets.distribParse(params, rb);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","sourceNew":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<>();\n      facets = new LinkedHashMap<>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n      \n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n        \n        for (String field : facetFs) {\n          final DistribFieldFacet ff;\n          \n          if (params.getFieldBool(field, FacetParams.FACET_EXISTS, false)) {\n            // cap facet count by 1 with this method\n            ff = new DistribFacetExistsField(rb, field);\n          } else {\n            ff = new DistribFieldFacet(rb, field);\n          }\n          facets.put(ff.getKey(), ff);\n        }\n      }\n\n      // Develop Pivot Facet Information\n      String[] facetPFs = params.getParams(FacetParams.FACET_PIVOT);\n      if (facetPFs != null) {\n        for (String fieldGroup : facetPFs) {\n          PivotFacet pf = new PivotFacet(rb, fieldGroup);\n          pivotFacets.add(pf.getKey(), pf);\n        }\n      }\n\n      heatmapFacets = SpatialHeatmapFacets.distribParse(params, rb);\n    }\n\n","sourceOld":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<>();\n      facets = new LinkedHashMap<>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n      \n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n        \n        for (String field : facetFs) {\n          DistribFieldFacet ff = new DistribFieldFacet(rb, field);\n          facets.put(ff.getKey(), ff);\n        }\n      }\n\n      // Develop Pivot Facet Information\n      String[] facetPFs = params.getParams(FacetParams.FACET_PIVOT);\n      if (facetPFs != null) {\n        for (String fieldGroup : facetPFs) {\n          PivotFacet pf = new PivotFacet(rb, fieldGroup);\n          pivotFacets.add(pf.getKey(), pf);\n        }\n      }\n\n      heatmapFacets = SpatialHeatmapFacets.distribParse(params, rb);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","sourceNew":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<>();\n      facets = new LinkedHashMap<>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n      \n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n        \n        for (String field : facetFs) {\n          final DistribFieldFacet ff;\n          \n          if (params.getFieldBool(field, FacetParams.FACET_EXISTS, false)) {\n            // cap facet count by 1 with this method\n            ff = new DistribFacetExistsField(rb, field);\n          } else {\n            ff = new DistribFieldFacet(rb, field);\n          }\n          facets.put(ff.getKey(), ff);\n        }\n      }\n\n      // Develop Pivot Facet Information\n      String[] facetPFs = params.getParams(FacetParams.FACET_PIVOT);\n      if (facetPFs != null) {\n        for (String fieldGroup : facetPFs) {\n          PivotFacet pf = new PivotFacet(rb, fieldGroup);\n          pivotFacets.add(pf.getKey(), pf);\n        }\n      }\n\n      heatmapFacets = SpatialHeatmapFacets.distribParse(params, rb);\n    }\n\n","sourceOld":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<>();\n      facets = new LinkedHashMap<>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n      \n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n        \n        for (String field : facetFs) {\n          DistribFieldFacet ff = new DistribFieldFacet(rb, field);\n          facets.put(ff.getKey(), ff);\n        }\n      }\n\n      // Develop Pivot Facet Information\n      String[] facetPFs = params.getParams(FacetParams.FACET_PIVOT);\n      if (facetPFs != null) {\n        for (String fieldGroup : facetPFs) {\n          PivotFacet pf = new PivotFacet(rb, fieldGroup);\n          pivotFacets.add(pf.getKey(), pf);\n        }\n      }\n\n      heatmapFacets = SpatialHeatmapFacets.distribParse(params, rb);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","sourceNew":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<>();\n      facets = new LinkedHashMap<>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n      \n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n        \n        for (String field : facetFs) {\n          final DistribFieldFacet ff;\n          \n          if (params.getFieldBool(field, FacetParams.FACET_EXISTS, false)) {\n            // cap facet count by 1 with this method\n            ff = new DistribFacetExistsField(rb, field);\n          } else {\n            ff = new DistribFieldFacet(rb, field);\n          }\n          facets.put(ff.getKey(), ff);\n        }\n      }\n\n      // Develop Pivot Facet Information\n      String[] facetPFs = params.getParams(FacetParams.FACET_PIVOT);\n      if (facetPFs != null) {\n        for (String fieldGroup : facetPFs) {\n          PivotFacet pf = new PivotFacet(rb, fieldGroup);\n          pivotFacets.add(pf.getKey(), pf);\n        }\n      }\n\n      heatmapFacets = SpatialHeatmapFacets.distribParse(params, rb);\n    }\n\n","sourceOld":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<>();\n      facets = new LinkedHashMap<>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n      \n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n        \n        for (String field : facetFs) {\n          DistribFieldFacet ff = new DistribFieldFacet(rb, field);\n          facets.put(ff.getKey(), ff);\n        }\n      }\n\n      // Develop Pivot Facet Information\n      String[] facetPFs = params.getParams(FacetParams.FACET_PIVOT);\n      if (facetPFs != null) {\n        for (String fieldGroup : facetPFs) {\n          PivotFacet pf = new PivotFacet(rb, fieldGroup);\n          pivotFacets.add(pf.getKey(), pf);\n        }\n      }\n\n      heatmapFacets = SpatialHeatmapFacets.distribParse(params, rb);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetInfo#parse(SolrParams,ResponseBuilder).mjava","sourceNew":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<>();\n      facets = new LinkedHashMap<>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n      \n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n        \n        for (String field : facetFs) {\n          final DistribFieldFacet ff;\n          \n          if (params.getFieldBool(field, FacetParams.FACET_EXISTS, false)) {\n            // cap facet count by 1 with this method\n            ff = new DistribFacetExistsField(rb, field);\n          } else {\n            ff = new DistribFieldFacet(rb, field);\n          }\n          facets.put(ff.getKey(), ff);\n        }\n      }\n\n      // Develop Pivot Facet Information\n      String[] facetPFs = params.getParams(FacetParams.FACET_PIVOT);\n      if (facetPFs != null) {\n        for (String fieldGroup : facetPFs) {\n          PivotFacet pf = new PivotFacet(rb, fieldGroup);\n          pivotFacets.add(pf.getKey(), pf);\n        }\n      }\n\n      heatmapFacets = SpatialHeatmapFacets.distribParse(params, rb);\n    }\n\n","sourceOld":"    void parse(SolrParams params, ResponseBuilder rb) {\n      queryFacets = new LinkedHashMap<>();\n      facets = new LinkedHashMap<>();\n\n      String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n      if (facetQs != null) {\n        for (String query : facetQs) {\n          QueryFacet queryFacet = new QueryFacet(rb, query);\n          queryFacets.put(queryFacet.getKey(), queryFacet);\n        }\n      }\n      \n      String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n      if (facetFs != null) {\n        \n        for (String field : facetFs) {\n          DistribFieldFacet ff = new DistribFieldFacet(rb, field);\n          facets.put(ff.getKey(), ff);\n        }\n      }\n\n      // Develop Pivot Facet Information\n      String[] facetPFs = params.getParams(FacetParams.FACET_PIVOT);\n      if (facetPFs != null) {\n        for (String fieldGroup : facetPFs) {\n          PivotFacet pf = new PivotFacet(rb, fieldGroup);\n          pivotFacets.add(pf.getKey(), pf);\n        }\n      }\n\n      heatmapFacets = SpatialHeatmapFacets.distribParse(params, rb);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59d82b0be40ecfcc2c94c776b324e0903a62b844":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"92751ba9273251eab6a2e379ec42a1697a32ff96":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"bc8f206328a706450934717bec7ccc22ad166fc0":["59d82b0be40ecfcc2c94c776b324e0903a62b844","39342cb658ac11dfcbf4459807fb00eb9ada0218"],"39342cb658ac11dfcbf4459807fb00eb9ada0218":["59d82b0be40ecfcc2c94c776b324e0903a62b844"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["59d82b0be40ecfcc2c94c776b324e0903a62b844","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["59d82b0be40ecfcc2c94c776b324e0903a62b844","bc8f206328a706450934717bec7ccc22ad166fc0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["59d82b0be40ecfcc2c94c776b324e0903a62b844","89424def13674ea17829b41c5883c54ecc31a132"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"59d82b0be40ecfcc2c94c776b324e0903a62b844":["bc8f206328a706450934717bec7ccc22ad166fc0","39342cb658ac11dfcbf4459807fb00eb9ada0218","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"92751ba9273251eab6a2e379ec42a1697a32ff96":["59d82b0be40ecfcc2c94c776b324e0903a62b844"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bc8f206328a706450934717bec7ccc22ad166fc0":["89424def13674ea17829b41c5883c54ecc31a132"],"39342cb658ac11dfcbf4459807fb00eb9ada0218":["bc8f206328a706450934717bec7ccc22ad166fc0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}