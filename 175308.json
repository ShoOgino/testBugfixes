{"path":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageBuffer#addEntry(StorageEntryWrapper).mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageBuffer#addEntry(StorageEntryWrapper).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageBuffer#addEntry(StorageEntryWrapper).mjava","sourceNew":"    /**\n     * Adds a {@link StorageEntryWrapper} to the buffer. If a wrapper\n     * representing the same entry are already in the buffer the wrapper will be\n     * replaced.\n     * <p>\n     * This method does ignore already delted entries. This should before the\n     * entry is added to the buffer.\n     * </p>\n     * \n     * @param wrapper -\n     *            the wrapper to buffer\n     */\n    public void addEntry(final StorageEntryWrapper wrapper) {\n        this.writeLock.lock();\n        try {\n            if (LOG.isInfoEnabled())\n                LOG.info(\" Buffering wrapper - \" + wrapper.getOperation()\n                        + \" ID: \" + wrapper.getEntryId() + \" FeedID: \"\n                        + wrapper.getFeedId());\n            if (wrapper.getOperation().equals(StorageOperation.DELETE))\n                return;\n            String feedId = wrapper.getFeedId();\n            if (this.bufferMap.containsKey(feedId))\n                this.bufferMap.get(feedId).put(wrapper.getEntryId(), wrapper);\n            else {\n                Map<String, StorageEntryWrapper> newFeedMap = new HashMap<String, StorageEntryWrapper>(\n                        20);\n                newFeedMap.put(wrapper.getEntryId(), wrapper);\n                this.bufferMap.put(feedId, newFeedMap);\n\n            }\n            addLastModified(wrapper.getFeedId(), wrapper.getTimestamp());\n            /*\n             * add to exclude from searches doc will be available via the buffer\n             * if the entry is not already in the buffer\n             */\n            if (!this.excludeList.contains(wrapper.getEntryId()))\n                this.excludeList.add(wrapper.getEntryId());\n        } finally {\n            this.writeLock.unlock();\n        }\n    }\n\n","sourceOld":"    /**\n     * Adds a {@link StorageEntryWrapper} to the buffer. If a wrapper\n     * representing the same entry are already in the buffer the wrapper will be\n     * replaced.\n     * <p>\n     * This method does ignore already delted entries. This should before the\n     * entry is added to the buffer.\n     * </p>\n     * \n     * @param wrapper -\n     *            the wrapper to buffer\n     */\n    public void addEntry(final StorageEntryWrapper wrapper) {\n        this.writeLock.lock();\n        try {\n            if (LOG.isInfoEnabled())\n                LOG.info(\" Buffering wrapper - \" + wrapper.getOperation()\n                        + \" ID: \" + wrapper.getEntryId() + \" FeedID: \"\n                        + wrapper.getFeedId());\n            if (wrapper.getOperation().equals(StorageOperation.DELETE))\n                return;\n            String feedId = wrapper.getFeedId();\n            if (this.bufferMap.containsKey(feedId))\n                this.bufferMap.get(feedId).put(wrapper.getEntryId(), wrapper);\n            else {\n                Map<String, StorageEntryWrapper> newFeedMap = new HashMap<String, StorageEntryWrapper>(\n                        20);\n                newFeedMap.put(wrapper.getEntryId(), wrapper);\n                this.bufferMap.put(feedId, newFeedMap);\n\n            }\n            addLastModified(wrapper.getFeedId(), wrapper.getTimestamp());\n            /*\n             * add to exclude from searches doc will be available via the buffer\n             * if the entry is not already in the buffer\n             */\n            if (!this.excludeList.contains(wrapper.getEntryId()))\n                this.excludeList.add(wrapper.getEntryId());\n        } finally {\n            this.writeLock.unlock();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageBuffer#addEntry(StorageEntryWrapper).mjava","sourceNew":null,"sourceOld":"    /**\n     * Adds a {@link StorageEntryWrapper} to the buffer. If a wrapper\n     * representing the same entry are already in the buffer the wrapper will be\n     * replaced.\n     * <p>\n     * This method does ignore already delted entries. This should before the\n     * entry is added to the buffer.\n     * </p>\n     * \n     * @param wrapper -\n     *            the wrapper to buffer\n     */\n    public void addEntry(final StorageEntryWrapper wrapper) {\n        this.writeLock.lock();\n        try {\n            if (LOG.isInfoEnabled())\n                LOG.info(\" Buffering wrapper - \" + wrapper.getOperation()\n                        + \" ID: \" + wrapper.getEntryId() + \" FeedID: \"\n                        + wrapper.getFeedId());\n            if (wrapper.getOperation().equals(StorageOperation.DELETE))\n                return;\n            String feedId = wrapper.getFeedId();\n            if (this.bufferMap.containsKey(feedId))\n                this.bufferMap.get(feedId).put(wrapper.getEntryId(), wrapper);\n            else {\n                Map<String, StorageEntryWrapper> newFeedMap = new HashMap<String, StorageEntryWrapper>(\n                        20);\n                newFeedMap.put(wrapper.getEntryId(), wrapper);\n                this.bufferMap.put(feedId, newFeedMap);\n\n            }\n            addLastModified(wrapper.getFeedId(), wrapper.getTimestamp());\n            /*\n             * add to exclude from searches doc will be available via the buffer\n             * if the entry is not already in the buffer\n             */\n            if (!this.excludeList.contains(wrapper.getEntryId()))\n                this.excludeList.add(wrapper.getEntryId());\n        } finally {\n            this.writeLock.unlock();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}