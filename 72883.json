{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42TermVectorsWriter#Lucene42TermVectorsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int).mjava","commits":[{"id":"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6","date":1411857884,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42TermVectorsWriter#Lucene42TermVectorsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Sole constructor. */\n  public Lucene42TermVectorsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize) throws IOException {\n    assert directory != null;\n    this.directory = directory;\n    this.segment = si.name;\n    this.segmentSuffix = segmentSuffix;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n\n    numDocs = 0;\n    pendingDocs = new ArrayDeque<>();\n    termSuffixes = new GrowableByteArrayDataOutput(ArrayUtil.oversize(chunkSize, 1));\n    payloadBytes = new GrowableByteArrayDataOutput(ArrayUtil.oversize(1, 1));\n    lastTerm = new BytesRef(ArrayUtil.oversize(30, 1));\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, VECTORS_INDEX_EXTENSION), \n                                                                     context);\n    try {\n      vectorsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, VECTORS_EXTENSION),\n                                                     context);\n\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      CodecUtil.writeHeader(indexStream, codecNameIdx, VERSION_CURRENT);\n      CodecUtil.writeHeader(vectorsStream, codecNameDat, VERSION_CURRENT);\n      assert CodecUtil.headerLength(codecNameDat) == vectorsStream.getFilePointer();\n      assert CodecUtil.headerLength(codecNameIdx) == indexStream.getFilePointer();\n\n      indexWriter = new Lucene41StoredFieldsIndexWriter(indexStream);\n      indexStream = null;\n\n      vectorsStream.writeVInt(PackedInts.VERSION_CURRENT);\n      vectorsStream.writeVInt(chunkSize);\n      writer = new BlockPackedWriter(vectorsStream, BLOCK_SIZE);\n\n      positionsBuf = new int[1024];\n      startOffsetsBuf = new int[1024];\n      lengthsBuf = new int[1024];\n      payloadLengthsBuf = new int[1024];\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexStream);\n        abort();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42TermVectorsWriter#Lucene42TermVectorsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Sole constructor. */\n  public Lucene42TermVectorsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize) throws IOException {\n    assert directory != null;\n    this.directory = directory;\n    this.segment = si.name;\n    this.segmentSuffix = segmentSuffix;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n\n    numDocs = 0;\n    pendingDocs = new ArrayDeque<>();\n    termSuffixes = new GrowableByteArrayDataOutput(ArrayUtil.oversize(chunkSize, 1));\n    payloadBytes = new GrowableByteArrayDataOutput(ArrayUtil.oversize(1, 1));\n    lastTerm = new BytesRef(ArrayUtil.oversize(30, 1));\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, VECTORS_INDEX_EXTENSION), \n                                                                     context);\n    try {\n      vectorsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, VECTORS_EXTENSION),\n                                                     context);\n\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      CodecUtil.writeHeader(indexStream, codecNameIdx, VERSION_CURRENT);\n      CodecUtil.writeHeader(vectorsStream, codecNameDat, VERSION_CURRENT);\n      assert CodecUtil.headerLength(codecNameDat) == vectorsStream.getFilePointer();\n      assert CodecUtil.headerLength(codecNameIdx) == indexStream.getFilePointer();\n\n      indexWriter = new Lucene41StoredFieldsIndexWriter(indexStream);\n      indexStream = null;\n\n      vectorsStream.writeVInt(PackedInts.VERSION_CURRENT);\n      vectorsStream.writeVInt(chunkSize);\n      writer = new BlockPackedWriter(vectorsStream, BLOCK_SIZE);\n\n      positionsBuf = new int[1024];\n      startOffsetsBuf = new int[1024];\n      lengthsBuf = new int[1024];\n      payloadLengthsBuf = new int[1024];\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexStream);\n        abort();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42TermVectorsWriter#Lucene42TermVectorsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int).mjava","sourceNew":null,"sourceOld":"  /** Sole constructor. */\n  public Lucene42TermVectorsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize) throws IOException {\n    assert directory != null;\n    this.directory = directory;\n    this.segment = si.name;\n    this.segmentSuffix = segmentSuffix;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n\n    numDocs = 0;\n    pendingDocs = new ArrayDeque<>();\n    termSuffixes = new GrowableByteArrayDataOutput(ArrayUtil.oversize(chunkSize, 1));\n    payloadBytes = new GrowableByteArrayDataOutput(ArrayUtil.oversize(1, 1));\n    lastTerm = new BytesRef(ArrayUtil.oversize(30, 1));\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, VECTORS_INDEX_EXTENSION), \n                                                                     context);\n    try {\n      vectorsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, VECTORS_EXTENSION),\n                                                     context);\n\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      CodecUtil.writeHeader(indexStream, codecNameIdx, VERSION_CURRENT);\n      CodecUtil.writeHeader(vectorsStream, codecNameDat, VERSION_CURRENT);\n      assert CodecUtil.headerLength(codecNameDat) == vectorsStream.getFilePointer();\n      assert CodecUtil.headerLength(codecNameIdx) == indexStream.getFilePointer();\n\n      indexWriter = new Lucene41StoredFieldsIndexWriter(indexStream);\n      indexStream = null;\n\n      vectorsStream.writeVInt(PackedInts.VERSION_CURRENT);\n      vectorsStream.writeVInt(chunkSize);\n      writer = new BlockPackedWriter(vectorsStream, BLOCK_SIZE);\n\n      positionsBuf = new int[1024];\n      startOffsetsBuf = new int[1024];\n      lengthsBuf = new int[1024];\n      payloadLengthsBuf = new int[1024];\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexStream);\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d5291145ae0cea7e6e6a2379f3a32643bf71bf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"9bb9a29a5e71a90295f175df8919802993142c9a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9bb9a29a5e71a90295f175df8919802993142c9a","3d5291145ae0cea7e6e6a2379f3a32643bf71bf6"],"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6":["9bb9a29a5e71a90295f175df8919802993142c9a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}