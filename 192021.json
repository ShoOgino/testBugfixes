{"path":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0, null);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Fieldable field = doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n\n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == true);\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0, null);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Fieldable field = doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n\n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == true);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0, null);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Fieldable field = doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n\n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getIndexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n    assertTrue(field.getIndexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getIndexOptions() == IndexOptions.DOCS_ONLY);\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0, null);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Fieldable field = doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n\n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == true);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = IndexReader.open(dir);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Field field = (Field) doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.storeTermVectors() == true);\n\n    assertTrue(field.storeTermVectorOffsets() == true);\n    assertTrue(field.storeTermVectorPositions() == true);\n    assertTrue(field.omitNorms() == false);\n    assertTrue(field.indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.storeTermVectors() == false);\n    assertTrue(field.storeTermVectorOffsets() == false);\n    assertTrue(field.storeTermVectorPositions() == false);\n    assertTrue(field.omitNorms() == true);\n    assertTrue(field.indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertTrue(field.storeTermVectors() == false);\n    assertTrue(field.storeTermVectorOffsets() == false);\n    assertTrue(field.storeTermVectorPositions() == false);\n    assertTrue(field.omitNorms() == false);\n    assertTrue(field.indexOptions() == IndexOptions.DOCS_ONLY);\n\n    DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(DocHelper.TEXT_FIELD_3_KEY);\n    reader.document(0, visitor);\n    final List<IndexableField> fields = visitor.getDocument().getFields();\n    assertEquals(1, fields.size());\n    assertEquals(DocHelper.TEXT_FIELD_3_KEY, fields.get(0).name());\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0, null);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Fieldable field = doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n\n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getIndexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n    assertTrue(field.getIndexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getIndexOptions() == IndexOptions.DOCS_ONLY);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6eb141f80638abdb6ffaa5149877f36ea39b6ad5","date":1315714072,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = IndexReader.open(dir);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Field field = (Field) doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.fieldType().storeTermVectors());\n\n    assertTrue(field.fieldType().storeTermVectorOffsets());\n    assertTrue(field.fieldType().storeTermVectorPositions());\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertFalse(field.fieldType().storeTermVectorOffsets());\n    assertFalse(field.fieldType().storeTermVectorPositions());\n    assertTrue(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertFalse(field.fieldType().storeTermVectorOffsets());\n    assertFalse(field.fieldType().storeTermVectorPositions());\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_ONLY);\n\n    DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(DocHelper.TEXT_FIELD_3_KEY);\n    reader.document(0, visitor);\n    final List<IndexableField> fields = visitor.getDocument().getFields();\n    assertEquals(1, fields.size());\n    assertEquals(DocHelper.TEXT_FIELD_3_KEY, fields.get(0).name());\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = IndexReader.open(dir);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Field field = (Field) doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.storeTermVectors() == true);\n\n    assertTrue(field.storeTermVectorOffsets() == true);\n    assertTrue(field.storeTermVectorPositions() == true);\n    assertTrue(field.omitNorms() == false);\n    assertTrue(field.indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.storeTermVectors() == false);\n    assertTrue(field.storeTermVectorOffsets() == false);\n    assertTrue(field.storeTermVectorPositions() == false);\n    assertTrue(field.omitNorms() == true);\n    assertTrue(field.indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertTrue(field.storeTermVectors() == false);\n    assertTrue(field.storeTermVectorOffsets() == false);\n    assertTrue(field.storeTermVectorPositions() == false);\n    assertTrue(field.omitNorms() == false);\n    assertTrue(field.indexOptions() == IndexOptions.DOCS_ONLY);\n\n    DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(DocHelper.TEXT_FIELD_3_KEY);\n    reader.document(0, visitor);\n    final List<IndexableField> fields = visitor.getDocument().getFields();\n    assertEquals(1, fields.size());\n    assertEquals(DocHelper.TEXT_FIELD_3_KEY, fields.get(0).name());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = IndexReader.open(dir);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Field field = (Field) doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.fieldType().storeTermVectors());\n\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertTrue(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_ONLY);\n\n    DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(DocHelper.TEXT_FIELD_3_KEY);\n    reader.document(0, visitor);\n    final List<IndexableField> fields = visitor.getDocument().getFields();\n    assertEquals(1, fields.size());\n    assertEquals(DocHelper.TEXT_FIELD_3_KEY, fields.get(0).name());\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = IndexReader.open(dir);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Field field = (Field) doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.fieldType().storeTermVectors());\n\n    assertTrue(field.fieldType().storeTermVectorOffsets());\n    assertTrue(field.fieldType().storeTermVectorPositions());\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertFalse(field.fieldType().storeTermVectorOffsets());\n    assertFalse(field.fieldType().storeTermVectorPositions());\n    assertTrue(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertFalse(field.fieldType().storeTermVectorOffsets());\n    assertFalse(field.fieldType().storeTermVectorPositions());\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_ONLY);\n\n    DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(DocHelper.TEXT_FIELD_3_KEY);\n    reader.document(0, visitor);\n    final List<IndexableField> fields = visitor.getDocument().getFields();\n    assertEquals(1, fields.size());\n    assertEquals(DocHelper.TEXT_FIELD_3_KEY, fields.get(0).name());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = IndexReader.open(dir);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Field field = (Field) doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.fieldType().storeTermVectors());\n\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertTrue(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_ONLY);\n\n    DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(DocHelper.TEXT_FIELD_3_KEY);\n    reader.document(0, visitor);\n    final List<IndexableField> fields = visitor.getDocument().getFields();\n    assertEquals(1, fields.size());\n    assertEquals(DocHelper.TEXT_FIELD_3_KEY, fields.get(0).name());\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = IndexReader.open(dir);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Field field = (Field) doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.fieldType().storeTermVectors());\n\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertTrue(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_ONLY);\n\n    DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(DocHelper.TEXT_FIELD_3_KEY);\n    reader.document(0, visitor);\n    final List<IndexableField> fields = visitor.getDocument().getFields();\n    assertEquals(1, fields.size());\n    assertEquals(DocHelper.TEXT_FIELD_3_KEY, fields.get(0).name());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}