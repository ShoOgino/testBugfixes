{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#logReplicaTypesReplicationInfo(String,ZkStateReader).mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#logReplicaTypesReplicationInfo(String,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  protected void logReplicaTypesReplicationInfo(String collectionName, ZkStateReader zkStateReader) throws KeeperException, InterruptedException, IOException {\n    log.info(\"## Collecting extra Replica.Type information of the cluster\");\n    zkStateReader.updateLiveNodes();\n    StringBuilder builder = new StringBuilder();\n    zkStateReader.forceUpdateCollection(collectionName);\n    DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n    for(Slice s:collection.getSlices()) {\n      Replica leader = s.getLeader();\n      for (Replica r:s.getReplicas()) {\n        if (!r.isActive(zkStateReader.getClusterState().getLiveNodes())) {\n          builder.append(String.format(Locale.ROOT, \"Replica %s not in liveNodes or is not active%s\", r.getName(), System.lineSeparator()));\n          continue;\n        }\n        if (r.equals(leader)) {\n          builder.append(String.format(Locale.ROOT, \"Replica %s is leader%s\", r.getName(), System.lineSeparator()));\n        }\n        logReplicationDetails(r, builder);\n      }\n    }\n    log.info(\"Summary of the cluster: \" + builder.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#logReplicaTypesReplicationInfo(String,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  protected void logReplicaTypesReplicationInfo(String collectionName, ZkStateReader zkStateReader) throws KeeperException, InterruptedException, IOException {\n    log.info(\"## Collecting extra Replica.Type information of the cluster\");\n    zkStateReader.updateLiveNodes();\n    StringBuilder builder = new StringBuilder();\n    zkStateReader.forceUpdateCollection(collectionName);\n    DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n    for(Slice s:collection.getSlices()) {\n      Replica leader = s.getLeader();\n      for (Replica r:s.getReplicas()) {\n        if (!r.isActive(zkStateReader.getClusterState().getLiveNodes())) {\n          builder.append(String.format(Locale.ROOT, \"Replica %s not in liveNodes or is not active%s\", r.getName(), System.lineSeparator()));\n          continue;\n        }\n        if (r.equals(leader)) {\n          builder.append(String.format(Locale.ROOT, \"Replica %s is leader%s\", r.getName(), System.lineSeparator()));\n        }\n        logReplicationDetails(r, builder);\n      }\n    }\n    log.info(\"Summary of the cluster: \" + builder.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#logReplicaTypesReplicationInfo(String,ZkStateReader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#logReplicaTypesReplicationInfo(String,ZkStateReader).mjava","sourceNew":"  protected void logReplicaTypesReplicationInfo(String collectionName, ZkStateReader zkStateReader) throws KeeperException, InterruptedException, IOException {\n    log.info(\"## Collecting extra Replica.Type information of the cluster\");\n    zkStateReader.updateLiveNodes();\n    StringBuilder builder = new StringBuilder();\n    zkStateReader.forceUpdateCollection(collectionName);\n    DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n    for(Slice s:collection.getSlices()) {\n      Replica leader = s.getLeader();\n      for (Replica r:s.getReplicas()) {\n        if (!r.isActive(zkStateReader.getClusterState().getLiveNodes())) {\n          builder.append(String.format(Locale.ROOT, \"Replica %s not in liveNodes or is not active%s\", r.getName(), System.lineSeparator()));\n          continue;\n        }\n        if (r.equals(leader)) {\n          builder.append(String.format(Locale.ROOT, \"Replica %s is leader%s\", r.getName(), System.lineSeparator()));\n        }\n        logReplicationDetails(r, builder);\n      }\n    }\n    log.info(\"Summary of the cluster: {}\", builder);\n  }\n\n","sourceOld":"  protected void logReplicaTypesReplicationInfo(String collectionName, ZkStateReader zkStateReader) throws KeeperException, InterruptedException, IOException {\n    log.info(\"## Collecting extra Replica.Type information of the cluster\");\n    zkStateReader.updateLiveNodes();\n    StringBuilder builder = new StringBuilder();\n    zkStateReader.forceUpdateCollection(collectionName);\n    DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n    for(Slice s:collection.getSlices()) {\n      Replica leader = s.getLeader();\n      for (Replica r:s.getReplicas()) {\n        if (!r.isActive(zkStateReader.getClusterState().getLiveNodes())) {\n          builder.append(String.format(Locale.ROOT, \"Replica %s not in liveNodes or is not active%s\", r.getName(), System.lineSeparator()));\n          continue;\n        }\n        if (r.equals(leader)) {\n          builder.append(String.format(Locale.ROOT, \"Replica %s is leader%s\", r.getName(), System.lineSeparator()));\n        }\n        logReplicationDetails(r, builder);\n      }\n    }\n    log.info(\"Summary of the cluster: \" + builder.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}