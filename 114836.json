{"path":"src/java/org/apache/lucene/index/ParallelReader#isCurrent().mjava","commits":[{"id":"4e4962d33c7b8f7092842cb4760383123f35092b","date":1185928991,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#isCurrent().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    for (int i = 0; i < readers.size(); i++) {\n      if (!((IndexReader)readers.get(i)).isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","date":1255859449,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#isCurrent().mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#isCurrent().mjava","sourceNew":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    for (final IndexReader reader : readers) {\n      if (!reader.isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    for (int i = 0; i < readers.size(); i++) {\n      if (!((IndexReader)readers.get(i)).isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#isCurrent().mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#isCurrent().mjava","sourceNew":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    for (final IndexReader reader : readers) {\n      if (!reader.isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    for (final IndexReader reader : readers) {\n      if (!reader.isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#isCurrent().mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#isCurrent().mjava","sourceNew":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    for (final IndexReader reader : readers) {\n      if (!reader.isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    for (final IndexReader reader : readers) {\n      if (!reader.isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["4e4962d33c7b8f7092842cb4760383123f35092b"],"8a9e385641d717e641408d8fbbc62be8fc766357":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e4962d33c7b8f7092842cb4760383123f35092b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e4962d33c7b8f7092842cb4760383123f35092b"],"4e4962d33c7b8f7092842cb4760383123f35092b":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}