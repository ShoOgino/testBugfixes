{"path":"src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","commits":[{"id":"d8a96a486e2153573397d8df6d7e1aa6997a93a0","date":1149990497,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","pathOld":"src/test/org/apache/solr/search/TestDocSet[DocSetPerf]#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    String bsSize=args[0];\n    boolean randSize=false;\n\n    if (bsSize.endsWith(\"-\")) {\n      bsSize=bsSize.substring(0,bsSize.length()-1);\n      randSize=true;\n    }\n\n    int bitSetSize = Integer.parseInt(bsSize);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3].intern();\n    int iter = Integer.parseInt(args[4]);\n\n    int ret=0;\n\n    OpenBitSet[] sets = new OpenBitSet[numSets];\n    DocSet[] bset = new DocSet[numSets];\n    DocSet[] hset = new DocSet[numSets];\n    BitSet scratch=new BitSet();\n\n    for (int i=0; i<numSets; i++) {\n      generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n      sets[i] = bs;\n      bset[i] = bds;\n      hset[i] = hds;\n    }\n\n    long start = System.currentTimeMillis();\n\n    if (\"test\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n        OpenBitSet bs1=bs;\n        BitDocSet bds1=bds;\n        HashDocSet hds1=hds;\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n\n        OpenBitSet res = ((OpenBitSet)bs1.clone());\n        res.and(bs);\n        int icount = (int)res.cardinality();\n\n        test(bds1.intersection(bds).size() == icount);\n        test(bds1.intersectionSize(bds) == icount);\n        if (bds1.intersection(hds).size() != icount) {\n          DocSet ds = bds1.intersection(hds);\n          System.out.println(\"STOP\");\n        }\n\n        test(bds1.intersection(hds).size() == icount);\n        test(bds1.intersectionSize(hds) == icount);\n        test(hds1.intersection(bds).size() == icount);\n        test(hds1.intersectionSize(bds) == icount);\n        test(hds1.intersection(hds).size() == icount);\n        test(hds1.intersectionSize(hds) == icount);\n\n        ret += icount;\n      }\n    }\n\n    String type=null;\n    String oper=null;\n\n    if (test.endsWith(\"B\")) { type=\"B\"; }\n    if (test.endsWith(\"H\")) { type=\"H\"; }\n    if (test.endsWith(\"M\")) { type=\"M\"; }\n    if (test.startsWith(\"intersect\")) oper=\"intersect\";\n    if (test.startsWith(\"intersectSize\")) oper=\"intersectSize\";\n    if (test.startsWith(\"intersectAndSize\")) oper=\"intersectSize\";\n\n\n    if (oper!=null) {\n      for (int it=0; it<iter; it++) {\n        int idx1 = rand.nextInt(numSets);\n        int idx2 = rand.nextInt(numSets);\n        DocSet a=null,b=null;\n\n        if (type==\"B\") {\n          a=bset[idx1]; b=bset[idx2];\n        } else if (type==\"H\") {\n          a=hset[idx1]; b=bset[idx2];\n        } else if (type==\"M\") {\n          if (idx1 < idx2) {\n            a=bset[idx1];\n            b=hset[idx2];\n          } else {\n            a=hset[idx1];\n            b=bset[idx2];\n          }\n        }\n\n        if (oper==\"intersect\") {\n          DocSet res = a.intersection(b);\n          ret += res.memSize();\n        } else if (oper==\"intersectSize\") {\n          ret += a.intersectionSize(b);\n        } else if (oper==\"intersectAndSize\") {\n          DocSet res = a.intersection(b);\n          ret += res.size();\n        }\n      }\n    }\n\n\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"TIME=\"+(end-start));\n\n    // System.out.println(\"ret=\"+ret + \" scratchsize=\"+scratch.size());\n    System.out.println(\"ret=\"+ret);\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    String bsSize=args[0];\n    boolean randSize=false;\n\n    if (bsSize.endsWith(\"-\")) {\n      bsSize=bsSize.substring(0,bsSize.length()-1);\n      randSize=true;\n    }\n\n    int bitSetSize = Integer.parseInt(bsSize);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3].intern();\n    int iter = Integer.parseInt(args[4]);\n\n    int ret=0;\n\n    OpenBitSet[] sets = new OpenBitSet[numSets];\n    DocSet[] bset = new DocSet[numSets];\n    DocSet[] hset = new DocSet[numSets];\n    BitSet scratch=new BitSet();\n\n    for (int i=0; i<numSets; i++) {\n      generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n      sets[i] = bs;\n      bset[i] = bds;\n      hset[i] = hds;\n    }\n\n    long start = System.currentTimeMillis();\n\n    if (\"test\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n        OpenBitSet bs1=bs;\n        BitDocSet bds1=bds;\n        HashDocSet hds1=hds;\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n\n        OpenBitSet res = ((OpenBitSet)bs1.clone());\n        res.and(bs);\n        int icount = (int)res.cardinality();\n\n        test(bds1.intersection(bds).size() == icount);\n        test(bds1.intersectionSize(bds) == icount);\n        if (bds1.intersection(hds).size() != icount) {\n          DocSet ds = bds1.intersection(hds);\n          System.out.println(\"STOP\");\n        }\n\n        test(bds1.intersection(hds).size() == icount);\n        test(bds1.intersectionSize(hds) == icount);\n        test(hds1.intersection(bds).size() == icount);\n        test(hds1.intersectionSize(bds) == icount);\n        test(hds1.intersection(hds).size() == icount);\n        test(hds1.intersectionSize(hds) == icount);\n\n        ret += icount;\n      }\n    }\n\n    String type=null;\n    String oper=null;\n\n    if (test.endsWith(\"B\")) { type=\"B\"; }\n    if (test.endsWith(\"H\")) { type=\"H\"; }\n    if (test.endsWith(\"M\")) { type=\"M\"; }\n    if (test.startsWith(\"intersect\")) oper=\"intersect\";\n    if (test.startsWith(\"intersectSize\")) oper=\"intersectSize\";\n    if (test.startsWith(\"intersectAndSize\")) oper=\"intersectSize\";\n\n\n    if (oper!=null) {\n      for (int it=0; it<iter; it++) {\n        int idx1 = rand.nextInt(numSets);\n        int idx2 = rand.nextInt(numSets);\n        DocSet a=null,b=null;\n\n        if (type==\"B\") {\n          a=bset[idx1]; b=bset[idx2];\n        } else if (type==\"H\") {\n          a=hset[idx1]; b=bset[idx2];\n        } else if (type==\"M\") {\n          if (idx1 < idx2) {\n            a=bset[idx1];\n            b=hset[idx2];\n          } else {\n            a=hset[idx1];\n            b=bset[idx2];\n          }\n        }\n\n        if (oper==\"intersect\") {\n          DocSet res = a.intersection(b);\n          ret += res.memSize();\n        } else if (oper==\"intersectSize\") {\n          ret += a.intersectionSize(b);\n        } else if (oper==\"intersectAndSize\") {\n          DocSet res = a.intersection(b);\n          ret += res.size();\n        }\n      }\n    }\n\n\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"TIME=\"+(end-start));\n\n    // System.out.println(\"ret=\"+ret + \" scratchsize=\"+scratch.size());\n    System.out.println(\"ret=\"+ret);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","pathOld":"src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    String bsSize=args[0];\n    boolean randSize=false;\n\n    if (bsSize.endsWith(\"-\")) {\n      bsSize=bsSize.substring(0,bsSize.length()-1);\n      randSize=true;\n    }\n\n    int bitSetSize = Integer.parseInt(bsSize);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3].intern();\n    int iter = Integer.parseInt(args[4]);\n\n    int ret=0;\n\n    OpenBitSet[] sets = new OpenBitSet[numSets];\n    DocSet[] bset = new DocSet[numSets];\n    DocSet[] hset = new DocSet[numSets];\n    BitSet scratch=new BitSet();\n\n    for (int i=0; i<numSets; i++) {\n      generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n      sets[i] = bs;\n      bset[i] = bds;\n      hset[i] = hds;\n    }\n\n    long start = System.currentTimeMillis();\n\n    if (\"test\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n        OpenBitSet bs1=bs;\n        BitDocSet bds1=bds;\n        HashDocSet hds1=hds;\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n\n        OpenBitSet res = ((OpenBitSet)bs1.clone());\n        res.and(bs);\n        int icount = (int)res.cardinality();\n\n        test(bds1.intersection(bds).size() == icount);\n        test(bds1.intersectionSize(bds) == icount);\n        if (bds1.intersection(hds).size() != icount) {\n          DocSet ds = bds1.intersection(hds);\n          System.out.println(\"STOP\");\n        }\n\n        test(bds1.intersection(hds).size() == icount);\n        test(bds1.intersectionSize(hds) == icount);\n        test(hds1.intersection(bds).size() == icount);\n        test(hds1.intersectionSize(bds) == icount);\n        test(hds1.intersection(hds).size() == icount);\n        test(hds1.intersectionSize(hds) == icount);\n\n        ret += icount;\n      }\n    }\n\n    String type=null;\n    String oper=null;\n\n    if (test.endsWith(\"B\")) { type=\"B\"; }\n    if (test.endsWith(\"H\")) { type=\"H\"; }\n    if (test.endsWith(\"M\")) { type=\"M\"; }\n    if (test.startsWith(\"intersect\")) oper=\"intersect\";\n    if (test.startsWith(\"intersectSize\")) oper=\"intersectSize\";\n    if (test.startsWith(\"intersectAndSize\")) oper=\"intersectSize\";\n\n\n    if (oper!=null) {\n      for (int it=0; it<iter; it++) {\n        int idx1 = rand.nextInt(numSets);\n        int idx2 = rand.nextInt(numSets);\n        DocSet a=null,b=null;\n\n        if (type==\"B\") {\n          a=bset[idx1]; b=bset[idx2];\n        } else if (type==\"H\") {\n          a=hset[idx1]; b=bset[idx2];\n        } else if (type==\"M\") {\n          if (idx1 < idx2) {\n            a=bset[idx1];\n            b=hset[idx2];\n          } else {\n            a=hset[idx1];\n            b=bset[idx2];\n          }\n        }\n\n        if (oper==\"intersect\") {\n          DocSet res = a.intersection(b);\n          ret += res.memSize();\n        } else if (oper==\"intersectSize\") {\n          ret += a.intersectionSize(b);\n        } else if (oper==\"intersectAndSize\") {\n          DocSet res = a.intersection(b);\n          ret += res.size();\n        }\n      }\n    }\n\n\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"TIME=\"+(end-start));\n\n    // System.out.println(\"ret=\"+ret + \" scratchsize=\"+scratch.size());\n    System.out.println(\"ret=\"+ret);\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    String bsSize=args[0];\n    boolean randSize=false;\n\n    if (bsSize.endsWith(\"-\")) {\n      bsSize=bsSize.substring(0,bsSize.length()-1);\n      randSize=true;\n    }\n\n    int bitSetSize = Integer.parseInt(bsSize);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3].intern();\n    int iter = Integer.parseInt(args[4]);\n\n    int ret=0;\n\n    OpenBitSet[] sets = new OpenBitSet[numSets];\n    DocSet[] bset = new DocSet[numSets];\n    DocSet[] hset = new DocSet[numSets];\n    BitSet scratch=new BitSet();\n\n    for (int i=0; i<numSets; i++) {\n      generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n      sets[i] = bs;\n      bset[i] = bds;\n      hset[i] = hds;\n    }\n\n    long start = System.currentTimeMillis();\n\n    if (\"test\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n        OpenBitSet bs1=bs;\n        BitDocSet bds1=bds;\n        HashDocSet hds1=hds;\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n\n        OpenBitSet res = ((OpenBitSet)bs1.clone());\n        res.and(bs);\n        int icount = (int)res.cardinality();\n\n        test(bds1.intersection(bds).size() == icount);\n        test(bds1.intersectionSize(bds) == icount);\n        if (bds1.intersection(hds).size() != icount) {\n          DocSet ds = bds1.intersection(hds);\n          System.out.println(\"STOP\");\n        }\n\n        test(bds1.intersection(hds).size() == icount);\n        test(bds1.intersectionSize(hds) == icount);\n        test(hds1.intersection(bds).size() == icount);\n        test(hds1.intersectionSize(bds) == icount);\n        test(hds1.intersection(hds).size() == icount);\n        test(hds1.intersectionSize(hds) == icount);\n\n        ret += icount;\n      }\n    }\n\n    String type=null;\n    String oper=null;\n\n    if (test.endsWith(\"B\")) { type=\"B\"; }\n    if (test.endsWith(\"H\")) { type=\"H\"; }\n    if (test.endsWith(\"M\")) { type=\"M\"; }\n    if (test.startsWith(\"intersect\")) oper=\"intersect\";\n    if (test.startsWith(\"intersectSize\")) oper=\"intersectSize\";\n    if (test.startsWith(\"intersectAndSize\")) oper=\"intersectSize\";\n\n\n    if (oper!=null) {\n      for (int it=0; it<iter; it++) {\n        int idx1 = rand.nextInt(numSets);\n        int idx2 = rand.nextInt(numSets);\n        DocSet a=null,b=null;\n\n        if (type==\"B\") {\n          a=bset[idx1]; b=bset[idx2];\n        } else if (type==\"H\") {\n          a=hset[idx1]; b=bset[idx2];\n        } else if (type==\"M\") {\n          if (idx1 < idx2) {\n            a=bset[idx1];\n            b=hset[idx2];\n          } else {\n            a=hset[idx1];\n            b=bset[idx2];\n          }\n        }\n\n        if (oper==\"intersect\") {\n          DocSet res = a.intersection(b);\n          ret += res.memSize();\n        } else if (oper==\"intersectSize\") {\n          ret += a.intersectionSize(b);\n        } else if (oper==\"intersectAndSize\") {\n          DocSet res = a.intersection(b);\n          ret += res.size();\n        }\n      }\n    }\n\n\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"TIME=\"+(end-start));\n\n    // System.out.println(\"ret=\"+ret + \" scratchsize=\"+scratch.size());\n    System.out.println(\"ret=\"+ret);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["d8a96a486e2153573397d8df6d7e1aa6997a93a0"],"d8a96a486e2153573397d8df6d7e1aa6997a93a0":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d8a96a486e2153573397d8df6d7e1aa6997a93a0"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"d8a96a486e2153573397d8df6d7e1aa6997a93a0":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}