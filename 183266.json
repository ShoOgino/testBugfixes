{"path":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doStats || (sreq.purpose & ShardRequest.PURPOSE_GET_STATS) == 0) return;\n\n    StatsInfo si = rb._statsInfo;\n\n    for (ShardResponse srsp : sreq.responses) {\n      NamedList stats = (NamedList) srsp.getSolrResponse().getResponse().get(\"stats\");\n\n      NamedList stats_fields = (NamedList) stats.get(\"stats_fields\");\n      if (stats_fields != null) {\n        for (int i = 0; i < stats_fields.size(); i++) {\n          String field = stats_fields.getName(i);\n          StatsValues stv = si.statsFields.get(field);\n          NamedList shardStv = (NamedList) stats_fields.get(field);\n          stv.accumulate(shardStv);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doStats || (sreq.purpose & ShardRequest.PURPOSE_GET_STATS) == 0) return;\n\n    StatsInfo si = rb._statsInfo;\n\n    for (ShardResponse srsp : sreq.responses) {\n      NamedList stats = (NamedList) srsp.getSolrResponse().getResponse().get(\"stats\");\n\n      NamedList stats_fields = (NamedList) stats.get(\"stats_fields\");\n      if (stats_fields != null) {\n        for (int i = 0; i < stats_fields.size(); i++) {\n          String field = stats_fields.getName(i);\n          StatsValues stv = si.statsFields.get(field);\n          NamedList shardStv = (NamedList) stats_fields.get(field);\n          stv.accumulate(shardStv);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doStats || (sreq.purpose & ShardRequest.PURPOSE_GET_STATS) == 0) return;\n\n    StatsInfo si = rb._statsInfo;\n\n    for (ShardResponse srsp : sreq.responses) {\n      NamedList stats = (NamedList) srsp.getSolrResponse().getResponse().get(\"stats\");\n\n      NamedList stats_fields = (NamedList) stats.get(\"stats_fields\");\n      if (stats_fields != null) {\n        for (int i = 0; i < stats_fields.size(); i++) {\n          String field = stats_fields.getName(i);\n          StatsValues stv = si.statsFields.get(field);\n          NamedList shardStv = (NamedList) stats_fields.get(field);\n          stv.accumulate(shardStv);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doStats || (sreq.purpose & ShardRequest.PURPOSE_GET_STATS) == 0) return;\n\n    StatsInfo si = rb._statsInfo;\n\n    for (ShardResponse srsp : sreq.responses) {\n      NamedList stats = (NamedList) srsp.getSolrResponse().getResponse().get(\"stats\");\n\n      NamedList stats_fields = (NamedList) stats.get(\"stats_fields\");\n      if (stats_fields != null) {\n        for (int i = 0; i < stats_fields.size(); i++) {\n          String field = stats_fields.getName(i);\n          StatsValues stv = si.statsFields.get(field);\n          NamedList shardStv = (NamedList) stats_fields.get(field);\n          stv.accumulate(shardStv);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doStats || (sreq.purpose & ShardRequest.PURPOSE_GET_STATS) == 0) return;\n\n    StatsInfo si = rb._statsInfo;\n\n    for (ShardResponse srsp : sreq.responses) {\n      NamedList stats = (NamedList) srsp.getSolrResponse().getResponse().get(\"stats\");\n\n      NamedList stats_fields = (NamedList) stats.get(\"stats_fields\");\n      if (stats_fields != null) {\n        for (int i = 0; i < stats_fields.size(); i++) {\n          String field = stats_fields.getName(i);\n          StatsValues stv = si.statsFields.get(field);\n          NamedList shardStv = (NamedList) stats_fields.get(field);\n          stv.accumulate(shardStv);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doStats || (sreq.purpose & ShardRequest.PURPOSE_GET_STATS) == 0) return;\n\n    StatsInfo si = rb._statsInfo;\n\n    for (ShardResponse srsp : sreq.responses) {\n      NamedList stats = (NamedList) srsp.getSolrResponse().getResponse().get(\"stats\");\n\n      NamedList stats_fields = (NamedList) stats.get(\"stats_fields\");\n      if (stats_fields != null) {\n        for (int i = 0; i < stats_fields.size(); i++) {\n          String field = stats_fields.getName(i);\n          StatsValues stv = si.statsFields.get(field);\n          NamedList shardStv = (NamedList) stats_fields.get(field);\n          stv.accumulate(shardStv);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d9835c6ddd23dd02eefd5adfc0e5d1e89075fbe","date":1385910402,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doStats || (sreq.purpose & ShardRequest.PURPOSE_GET_STATS) == 0) return;\n\n    StatsInfo si = rb._statsInfo;\n\n    for (ShardResponse srsp : sreq.responses) {\n      NamedList stats = null;\n      try {\n        stats = (NamedList) srsp.getSolrResponse().getResponse().get(\"stats\");\n      } catch (Exception e) {\n        if (rb.req.getParams().getBool(ShardParams.SHARDS_TOLERANT, false)) {\n          continue; // looks like a shard did not return anything\n        }\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to read stats info for shard: \" + srsp.getShard(), e);\n      }\n\n      NamedList stats_fields = (NamedList) stats.get(\"stats_fields\");\n      if (stats_fields != null) {\n        for (int i = 0; i < stats_fields.size(); i++) {\n          String field = stats_fields.getName(i);\n          StatsValues stv = si.statsFields.get(field);\n          NamedList shardStv = (NamedList) stats_fields.get(field);\n          stv.accumulate(shardStv);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doStats || (sreq.purpose & ShardRequest.PURPOSE_GET_STATS) == 0) return;\n\n    StatsInfo si = rb._statsInfo;\n\n    for (ShardResponse srsp : sreq.responses) {\n      NamedList stats = (NamedList) srsp.getSolrResponse().getResponse().get(\"stats\");\n\n      NamedList stats_fields = (NamedList) stats.get(\"stats_fields\");\n      if (stats_fields != null) {\n        for (int i = 0; i < stats_fields.size(); i++) {\n          String field = stats_fields.getName(i);\n          StatsValues stv = si.statsFields.get(field);\n          NamedList shardStv = (NamedList) stats_fields.get(field);\n          stv.accumulate(shardStv);\n        }\n      }\n    }\n  }\n\n","bugFix":["c1c2dfb6aa7b4d342a493c0982be96b76f595add"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doStats || (sreq.purpose & ShardRequest.PURPOSE_GET_STATS) == 0) return;\n\n    StatsInfo si = rb._statsInfo;\n\n    for (ShardResponse srsp : sreq.responses) {\n      NamedList stats = null;\n      try {\n        stats = (NamedList) srsp.getSolrResponse().getResponse().get(\"stats\");\n      } catch (Exception e) {\n        if (rb.req.getParams().getBool(ShardParams.SHARDS_TOLERANT, false)) {\n          continue; // looks like a shard did not return anything\n        }\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to read stats info for shard: \" + srsp.getShard(), e);\n      }\n\n      NamedList stats_fields = (NamedList) stats.get(\"stats_fields\");\n      if (stats_fields != null) {\n        for (int i = 0; i < stats_fields.size(); i++) {\n          String field = stats_fields.getName(i);\n          StatsValues stv = si.statsFields.get(field);\n          NamedList shardStv = (NamedList) stats_fields.get(field);\n          stv.accumulate(shardStv);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doStats || (sreq.purpose & ShardRequest.PURPOSE_GET_STATS) == 0) return;\n\n    StatsInfo si = rb._statsInfo;\n\n    for (ShardResponse srsp : sreq.responses) {\n      NamedList stats = (NamedList) srsp.getSolrResponse().getResponse().get(\"stats\");\n\n      NamedList stats_fields = (NamedList) stats.get(\"stats_fields\");\n      if (stats_fields != null) {\n        for (int i = 0; i < stats_fields.size(); i++) {\n          String field = stats_fields.getName(i);\n          StatsValues stv = si.statsFields.get(field);\n          NamedList shardStv = (NamedList) stats_fields.get(field);\n          stv.accumulate(shardStv);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"610c97b96420e614c67797fd43822ebc1d4b7ee2","date":1410814832,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doStats || (sreq.purpose & ShardRequest.PURPOSE_GET_STATS) == 0) return;\n\n    Map<String, StatsValues> allStatsValues = rb._statsInfo.getAggregateStatsValues();\n\n    for (ShardResponse srsp : sreq.responses) {\n      NamedList stats = null;\n      try {\n        stats = (NamedList) srsp.getSolrResponse().getResponse().get(\"stats\");\n      } catch (Exception e) {\n        if (rb.req.getParams().getBool(ShardParams.SHARDS_TOLERANT, false)) {\n          continue; // looks like a shard did not return anything\n        }\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to read stats info for shard: \" + srsp.getShard(), e);\n      }\n\n      NamedList stats_fields = (NamedList) stats.get(\"stats_fields\");\n      if (stats_fields != null) {\n        for (int i = 0; i < stats_fields.size(); i++) {\n          String key = stats_fields.getName(i);\n          StatsValues stv = allStatsValues.get(key);\n          NamedList shardStv = (NamedList) stats_fields.get(key);\n          stv.accumulate(shardStv);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doStats || (sreq.purpose & ShardRequest.PURPOSE_GET_STATS) == 0) return;\n\n    StatsInfo si = rb._statsInfo;\n\n    for (ShardResponse srsp : sreq.responses) {\n      NamedList stats = null;\n      try {\n        stats = (NamedList) srsp.getSolrResponse().getResponse().get(\"stats\");\n      } catch (Exception e) {\n        if (rb.req.getParams().getBool(ShardParams.SHARDS_TOLERANT, false)) {\n          continue; // looks like a shard did not return anything\n        }\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to read stats info for shard: \" + srsp.getShard(), e);\n      }\n\n      NamedList stats_fields = (NamedList) stats.get(\"stats_fields\");\n      if (stats_fields != null) {\n        for (int i = 0; i < stats_fields.size(); i++) {\n          String field = stats_fields.getName(i);\n          StatsValues stv = si.statsFields.get(field);\n          NamedList shardStv = (NamedList) stats_fields.get(field);\n          stv.accumulate(shardStv);\n        }\n      }\n    }\n  }\n\n","bugFix":["758a0ba5e213f4d1fc89087ae6e4678f7879e450","c1c2dfb6aa7b4d342a493c0982be96b76f595add"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c18a95e9168a30be855f5d5e7d61a863186fdc5","date":1415142581,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doStats || (sreq.purpose & ShardRequest.PURPOSE_GET_STATS) == 0) return;\n\n    Map<String, StatsValues> allStatsValues = rb._statsInfo.getAggregateStatsValues();\n\n    for (ShardResponse srsp : sreq.responses) {\n      NamedList stats = null;\n      try {\n        stats = (NamedList<NamedList<NamedList<?>>>) \n          srsp.getSolrResponse().getResponse().get(\"stats\");\n      } catch (Exception e) {\n        if (rb.req.getParams().getBool(ShardParams.SHARDS_TOLERANT, false)) {\n          continue; // looks like a shard did not return anything\n        }\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to read stats info for shard: \" + srsp.getShard(), e);\n      }\n\n      NamedList stats_fields = unwrapStats(stats);\n      if (stats_fields != null) {\n        for (int i = 0; i < stats_fields.size(); i++) {\n          String key = stats_fields.getName(i);\n          StatsValues stv = allStatsValues.get(key);\n          NamedList shardStv = (NamedList) stats_fields.get(key);\n          stv.accumulate(shardStv);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doStats || (sreq.purpose & ShardRequest.PURPOSE_GET_STATS) == 0) return;\n\n    Map<String, StatsValues> allStatsValues = rb._statsInfo.getAggregateStatsValues();\n\n    for (ShardResponse srsp : sreq.responses) {\n      NamedList stats = null;\n      try {\n        stats = (NamedList) srsp.getSolrResponse().getResponse().get(\"stats\");\n      } catch (Exception e) {\n        if (rb.req.getParams().getBool(ShardParams.SHARDS_TOLERANT, false)) {\n          continue; // looks like a shard did not return anything\n        }\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to read stats info for shard: \" + srsp.getShard(), e);\n      }\n\n      NamedList stats_fields = (NamedList) stats.get(\"stats_fields\");\n      if (stats_fields != null) {\n        for (int i = 0; i < stats_fields.size(); i++) {\n          String key = stats_fields.getName(i);\n          StatsValues stv = allStatsValues.get(key);\n          NamedList shardStv = (NamedList) stats_fields.get(key);\n          stv.accumulate(shardStv);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd22dcd3ba035a1626face7319c94be45ae07172","date":1527224634,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doStats || (sreq.purpose & ShardRequest.PURPOSE_GET_STATS) == 0) return;\n\n    Map<String, StatsValues> allStatsValues = rb._statsInfo.getAggregateStatsValues();\n\n    for (ShardResponse srsp : sreq.responses) {\n      NamedList stats = null;\n      try {\n        stats = (NamedList<NamedList<NamedList<?>>>) \n          srsp.getSolrResponse().getResponse().get(\"stats\");\n      } catch (Exception e) {\n        if (ShardParams.getShardsTolerantAsBool(rb.req.getParams())) {\n          continue; // looks like a shard did not return anything\n        }\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to read stats info for shard: \" + srsp.getShard(), e);\n      }\n\n      NamedList stats_fields = unwrapStats(stats);\n      if (stats_fields != null) {\n        for (int i = 0; i < stats_fields.size(); i++) {\n          String key = stats_fields.getName(i);\n          StatsValues stv = allStatsValues.get(key);\n          NamedList shardStv = (NamedList) stats_fields.get(key);\n          stv.accumulate(shardStv);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doStats || (sreq.purpose & ShardRequest.PURPOSE_GET_STATS) == 0) return;\n\n    Map<String, StatsValues> allStatsValues = rb._statsInfo.getAggregateStatsValues();\n\n    for (ShardResponse srsp : sreq.responses) {\n      NamedList stats = null;\n      try {\n        stats = (NamedList<NamedList<NamedList<?>>>) \n          srsp.getSolrResponse().getResponse().get(\"stats\");\n      } catch (Exception e) {\n        if (rb.req.getParams().getBool(ShardParams.SHARDS_TOLERANT, false)) {\n          continue; // looks like a shard did not return anything\n        }\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to read stats info for shard: \" + srsp.getShard(), e);\n      }\n\n      NamedList stats_fields = unwrapStats(stats);\n      if (stats_fields != null) {\n        for (int i = 0; i < stats_fields.size(); i++) {\n          String key = stats_fields.getName(i);\n          StatsValues stv = allStatsValues.get(key);\n          NamedList shardStv = (NamedList) stats_fields.get(key);\n          stv.accumulate(shardStv);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doStats || (sreq.purpose & ShardRequest.PURPOSE_GET_STATS) == 0) return;\n\n    Map<String, StatsValues> allStatsValues = rb._statsInfo.getAggregateStatsValues();\n\n    for (ShardResponse srsp : sreq.responses) {\n      NamedList stats = null;\n      try {\n        stats = (NamedList<NamedList<NamedList<?>>>)\n            srsp.getSolrResponse().getResponse().get(\"stats\");\n      } catch (Exception e) {\n        if (ShardParams.getShardsTolerantAsBool(rb.req.getParams())) {\n          continue; // looks like a shard did not return anything\n        }\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to read stats info for shard: \" + srsp.getShard(), e);\n      }\n\n      NamedList stats_fields = unwrapStats(stats);\n      if (stats_fields != null) {\n        for (int i = 0; i < stats_fields.size(); i++) {\n          String key = stats_fields.getName(i);\n          StatsValues stv = allStatsValues.get(key);\n          NamedList shardStv = (NamedList) stats_fields.get(key);\n          stv.accumulate(shardStv);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doStats || (sreq.purpose & ShardRequest.PURPOSE_GET_STATS) == 0) return;\n\n    Map<String, StatsValues> allStatsValues = rb._statsInfo.getAggregateStatsValues();\n\n    for (ShardResponse srsp : sreq.responses) {\n      NamedList stats = null;\n      try {\n        stats = (NamedList<NamedList<NamedList<?>>>) \n          srsp.getSolrResponse().getResponse().get(\"stats\");\n      } catch (Exception e) {\n        if (ShardParams.getShardsTolerantAsBool(rb.req.getParams())) {\n          continue; // looks like a shard did not return anything\n        }\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to read stats info for shard: \" + srsp.getShard(), e);\n      }\n\n      NamedList stats_fields = unwrapStats(stats);\n      if (stats_fields != null) {\n        for (int i = 0; i < stats_fields.size(); i++) {\n          String key = stats_fields.getName(i);\n          StatsValues stv = allStatsValues.get(key);\n          NamedList shardStv = (NamedList) stats_fields.get(key);\n          stv.accumulate(shardStv);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doStats || (sreq.purpose & ShardRequest.PURPOSE_GET_STATS) == 0) return;\n\n    Map<String, StatsValues> allStatsValues = rb._statsInfo.getAggregateStatsValues();\n\n    for (ShardResponse srsp : sreq.responses) {\n      NamedList stats = null;\n      try {\n        stats = (NamedList<NamedList<NamedList<?>>>)\n            srsp.getSolrResponse().getResponse().get(\"stats\");\n      } catch (Exception e) {\n        if (ShardParams.getShardsTolerantAsBool(rb.req.getParams())) {\n          continue; // looks like a shard did not return anything\n        }\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to read stats info for shard: \" + srsp.getShard(), e);\n      }\n\n      NamedList stats_fields = unwrapStats(stats);\n      if (stats_fields != null) {\n        for (int i = 0; i < stats_fields.size(); i++) {\n          String key = stats_fields.getName(i);\n          StatsValues stv = allStatsValues.get(key);\n          @SuppressWarnings({\"rawtypes\"})\n          NamedList shardStv = (NamedList) stats_fields.get(key);\n          stv.accumulate(shardStv);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if (!rb.doStats || (sreq.purpose & ShardRequest.PURPOSE_GET_STATS) == 0) return;\n\n    Map<String, StatsValues> allStatsValues = rb._statsInfo.getAggregateStatsValues();\n\n    for (ShardResponse srsp : sreq.responses) {\n      NamedList stats = null;\n      try {\n        stats = (NamedList<NamedList<NamedList<?>>>)\n            srsp.getSolrResponse().getResponse().get(\"stats\");\n      } catch (Exception e) {\n        if (ShardParams.getShardsTolerantAsBool(rb.req.getParams())) {\n          continue; // looks like a shard did not return anything\n        }\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to read stats info for shard: \" + srsp.getShard(), e);\n      }\n\n      NamedList stats_fields = unwrapStats(stats);\n      if (stats_fields != null) {\n        for (int i = 0; i < stats_fields.size(); i++) {\n          String key = stats_fields.getName(i);\n          StatsValues stv = allStatsValues.get(key);\n          NamedList shardStv = (NamedList) stats_fields.get(key);\n          stv.accumulate(shardStv);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d9835c6ddd23dd02eefd5adfc0e5d1e89075fbe":["c26f00b574427b55127e869b935845554afde1fa"],"610c97b96420e614c67797fd43822ebc1d4b7ee2":["0d9835c6ddd23dd02eefd5adfc0e5d1e89075fbe"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["610c97b96420e614c67797fd43822ebc1d4b7ee2"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"bd22dcd3ba035a1626face7319c94be45ae07172":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["c26f00b574427b55127e869b935845554afde1fa","0d9835c6ddd23dd02eefd5adfc0e5d1e89075fbe"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["bd22dcd3ba035a1626face7319c94be45ae07172"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"0d9835c6ddd23dd02eefd5adfc0e5d1e89075fbe":["610c97b96420e614c67797fd43822ebc1d4b7ee2","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"610c97b96420e614c67797fd43822ebc1d4b7ee2":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0d9835c6ddd23dd02eefd5adfc0e5d1e89075fbe","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["bd22dcd3ba035a1626face7319c94be45ae07172"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bd22dcd3ba035a1626face7319c94be45ae07172":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ba33781da68babcaa5828121b443d3eb5c9d8480":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}