{"path":"solr/src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","pathOld":"/dev/null","sourceNew":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    log.info(\"Persisting cores config to \" + (file==null ? configFile : file));\n\n    File tmpFile = null;\n    try {\n      // write in temp first\n      if (file == null) {\n        file = tmpFile = File.createTempFile(\"solr\", \".xml\", configFile.getParentFile());\n      }\n      java.io.FileOutputStream out = new java.io.FileOutputStream(file);\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it this fails\n        if (tmpFile != null) {\n          if (tmpFile.renameTo(configFile))\n            tmpFile = null;\n          else\n            fileCopy(tmpFile, configFile);\n        }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","sourceNew":null,"sourceOld":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    log.info(\"Persisting cores config to \" + (file==null ? configFile : file));\n\n    File tmpFile = null;\n    try {\n      // write in temp first\n      if (file == null) {\n        file = tmpFile = File.createTempFile(\"solr\", \".xml\", configFile.getParentFile());\n      }\n      java.io.FileOutputStream out = new java.io.FileOutputStream(file);\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it this fails\n        if (tmpFile != null) {\n          if (tmpFile.renameTo(configFile))\n            tmpFile = null;\n          else\n            fileCopy(tmpFile, configFile);\n        }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","sourceNew":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    log.info(\"Persisting cores config to \" + (file==null ? configFile : file));\n\n    File tmpFile = null;\n    try {\n      // write in temp first\n      if (file == null) {\n        file = tmpFile = File.createTempFile(\"solr\", \".xml\", configFile.getParentFile());\n      }\n      java.io.FileOutputStream out = new java.io.FileOutputStream(file);\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it this fails\n        if (tmpFile != null) {\n          if (tmpFile.renameTo(configFile))\n            tmpFile = null;\n          else\n            fileCopy(tmpFile, configFile);\n        }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","sourceOld":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    log.info(\"Persisting cores config to \" + (file==null ? configFile : file));\n\n    File tmpFile = null;\n    try {\n      // write in temp first\n      if (file == null) {\n        file = tmpFile = File.createTempFile(\"solr\", \".xml\", configFile.getParentFile());\n      }\n      java.io.FileOutputStream out = new java.io.FileOutputStream(file);\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it this fails\n        if (tmpFile != null) {\n          if (tmpFile.renameTo(configFile))\n            tmpFile = null;\n          else\n            fileCopy(tmpFile, configFile);\n        }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","pathOld":"/dev/null","sourceNew":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    log.info(\"Persisting cores config to \" + (file==null ? configFile : file));\n\n    File tmpFile = null;\n    try {\n      // write in temp first\n      if (file == null) {\n        file = tmpFile = File.createTempFile(\"solr\", \".xml\", configFile.getParentFile());\n      }\n      java.io.FileOutputStream out = new java.io.FileOutputStream(file);\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it this fails\n        if (tmpFile != null) {\n          if (tmpFile.renameTo(configFile))\n            tmpFile = null;\n          else\n            fileCopy(tmpFile, configFile);\n        }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d2901bdb2faeb41d619d969ce5655adf783746d","date":1309912641,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","sourceNew":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    log.info(\"Persisting cores config to \" + (file == null ? configFile : file));\n    // <solr attrib=\"value\">\n    Map<String,String> rootSolrAttribs = new HashMap<String,String>();\n    if (libDir != null) rootSolrAttribs.put(\"sharedLib\", libDir);\n    rootSolrAttribs.put(\"persistent\", Boolean.toString(isPersistent()));\n    \n    // <solr attrib=\"value\"> <cores attrib=\"value\">\n    Map<String,String> coresAttribs = new HashMap<String,String>();\n    coresAttribs.put(\"adminPath\", adminPath);\n    if (adminHandler != null) coresAttribs.put(\"adminHandler\", adminHandler);\n    if (shareSchema) coresAttribs.put(\"shareSchema\", \"true\");\n    if (!defaultCoreName.equals(\"\")) coresAttribs.put(\"defaultCoreName\",\n        defaultCoreName);\n    if (host != null) coresAttribs.put(\"host\", host);\n    if (hostPort != null) coresAttribs.put(\"hostPort\", hostPort);\n    if (zkClientTimeout != null) coresAttribs.put(\"zkClientTimeout\", Integer.toString(zkClientTimeout));\n    if (hostContext != null) coresAttribs.put(\"hostContext\", hostContext);\n    \n    List<SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrCoreXMLDef>();\n    \n    synchronized (cores) {\n      Map<String,String> coreAttribs = new HashMap<String,String>();\n      for (SolrCore solrCore : cores.values()) {\n        CoreDescriptor dcore = solrCore.getCoreDescriptor();\n        \n        coreAttribs.put(\"name\", dcore.name.equals(\"\") ? defaultCoreName\n            : dcore.name);\n        coreAttribs.put(\"instanceDir\", dcore.getInstanceDir());\n        // write config (if not default)\n        String opt = dcore.getConfigName();\n        if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n          coreAttribs.put(\"config\", opt);\n        }\n        // write schema (if not default)\n        opt = dcore.getSchemaName();\n        if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n          coreAttribs.put(\"schema\", opt);\n        }\n        opt = dcore.getPropertiesName();\n        if (opt != null) {\n          coreAttribs.put(\"properties\", opt);\n        }\n        opt = dcore.dataDir;\n        if (opt != null) coreAttribs.put(\"dataDir\", opt);\n        \n        CloudDescriptor cd = dcore.getCloudDescriptor();\n        if (cd != null) {\n          opt = cd.getShardId();\n          if (opt != null) coreAttribs.put(\"shard\", opt);\n          // only write out the collection name if it's not the default (the\n          // core\n          // name)\n          opt = cd.getCollectionName();\n          if (opt != null && !opt.equals(dcore.name)) coreAttribs.put(\n              \"collection\", opt);\n        }\n        \n        SolrCoreXMLDef solrCoreXMLDef = new SolrCoreXMLDef();\n        solrCoreXMLDef.coreAttribs = coreAttribs;\n        solrCoreXMLDef.coreProperties = dcore.getCoreProperties();\n        solrCoreXMLDefs.add(solrCoreXMLDef);\n      }\n      \n      SolrXMLDef solrXMLDef = new SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      solrXMLSerializer.persistFile(file == null ? configFile : file,\n          solrXMLDef);\n    }\n  }\n\n","sourceOld":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    log.info(\"Persisting cores config to \" + (file==null ? configFile : file));\n\n    File tmpFile = null;\n    try {\n      // write in temp first\n      if (file == null) {\n        file = tmpFile = File.createTempFile(\"solr\", \".xml\", configFile.getParentFile());\n      }\n      java.io.FileOutputStream out = new java.io.FileOutputStream(file);\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it this fails\n        if (tmpFile != null) {\n          if (tmpFile.renameTo(configFile))\n            tmpFile = null;\n          else\n            fileCopy(tmpFile, configFile);\n        }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["fa9fef69a29d64a132d51b8bca52175417bdb0c1","fa9fef69a29d64a132d51b8bca52175417bdb0c1","fa9fef69a29d64a132d51b8bca52175417bdb0c1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","sourceNew":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    log.info(\"Persisting cores config to \" + (file == null ? configFile : file));\n    // <solr attrib=\"value\">\n    Map<String,String> rootSolrAttribs = new HashMap<String,String>();\n    if (libDir != null) rootSolrAttribs.put(\"sharedLib\", libDir);\n    rootSolrAttribs.put(\"persistent\", Boolean.toString(isPersistent()));\n    \n    // <solr attrib=\"value\"> <cores attrib=\"value\">\n    Map<String,String> coresAttribs = new HashMap<String,String>();\n    coresAttribs.put(\"adminPath\", adminPath);\n    if (adminHandler != null) coresAttribs.put(\"adminHandler\", adminHandler);\n    if (shareSchema) coresAttribs.put(\"shareSchema\", \"true\");\n    if (!defaultCoreName.equals(\"\")) coresAttribs.put(\"defaultCoreName\",\n        defaultCoreName);\n    if (host != null) coresAttribs.put(\"host\", host);\n    if (hostPort != null) coresAttribs.put(\"hostPort\", hostPort);\n    if (zkClientTimeout != null) coresAttribs.put(\"zkClientTimeout\", Integer.toString(zkClientTimeout));\n    if (hostContext != null) coresAttribs.put(\"hostContext\", hostContext);\n    \n    List<SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrCoreXMLDef>();\n    \n    synchronized (cores) {\n      Map<String,String> coreAttribs = new HashMap<String,String>();\n      for (SolrCore solrCore : cores.values()) {\n        CoreDescriptor dcore = solrCore.getCoreDescriptor();\n        \n        coreAttribs.put(\"name\", dcore.name.equals(\"\") ? defaultCoreName\n            : dcore.name);\n        coreAttribs.put(\"instanceDir\", dcore.getInstanceDir());\n        // write config (if not default)\n        String opt = dcore.getConfigName();\n        if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n          coreAttribs.put(\"config\", opt);\n        }\n        // write schema (if not default)\n        opt = dcore.getSchemaName();\n        if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n          coreAttribs.put(\"schema\", opt);\n        }\n        opt = dcore.getPropertiesName();\n        if (opt != null) {\n          coreAttribs.put(\"properties\", opt);\n        }\n        opt = dcore.dataDir;\n        if (opt != null) coreAttribs.put(\"dataDir\", opt);\n        \n        CloudDescriptor cd = dcore.getCloudDescriptor();\n        if (cd != null) {\n          opt = cd.getShardId();\n          if (opt != null) coreAttribs.put(\"shard\", opt);\n          // only write out the collection name if it's not the default (the\n          // core\n          // name)\n          opt = cd.getCollectionName();\n          if (opt != null && !opt.equals(dcore.name)) coreAttribs.put(\n              \"collection\", opt);\n        }\n        \n        SolrCoreXMLDef solrCoreXMLDef = new SolrCoreXMLDef();\n        solrCoreXMLDef.coreAttribs = coreAttribs;\n        solrCoreXMLDef.coreProperties = dcore.getCoreProperties();\n        solrCoreXMLDefs.add(solrCoreXMLDef);\n      }\n      \n      SolrXMLDef solrXMLDef = new SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      solrXMLSerializer.persistFile(file == null ? configFile : file,\n          solrXMLDef);\n    }\n  }\n\n","sourceOld":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    log.info(\"Persisting cores config to \" + (file==null ? configFile : file));\n\n    File tmpFile = null;\n    try {\n      // write in temp first\n      if (file == null) {\n        file = tmpFile = File.createTempFile(\"solr\", \".xml\", configFile.getParentFile());\n      }\n      java.io.FileOutputStream out = new java.io.FileOutputStream(file);\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it this fails\n        if (tmpFile != null) {\n          if (tmpFile.renameTo(configFile))\n            tmpFile = null;\n          else\n            fileCopy(tmpFile, configFile);\n        }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","sourceNew":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    log.info(\"Persisting cores config to \" + (file == null ? configFile : file));\n    // <solr attrib=\"value\">\n    Map<String,String> rootSolrAttribs = new HashMap<String,String>();\n    if (libDir != null) rootSolrAttribs.put(\"sharedLib\", libDir);\n    rootSolrAttribs.put(\"persistent\", Boolean.toString(isPersistent()));\n    \n    // <solr attrib=\"value\"> <cores attrib=\"value\">\n    Map<String,String> coresAttribs = new HashMap<String,String>();\n    coresAttribs.put(\"adminPath\", adminPath);\n    if (adminHandler != null) coresAttribs.put(\"adminHandler\", adminHandler);\n    if (shareSchema) coresAttribs.put(\"shareSchema\", \"true\");\n    if (!defaultCoreName.equals(\"\")) coresAttribs.put(\"defaultCoreName\",\n        defaultCoreName);\n    if (host != null) coresAttribs.put(\"host\", host);\n    if (hostPort != null) coresAttribs.put(\"hostPort\", hostPort);\n    if (zkClientTimeout != null) coresAttribs.put(\"zkClientTimeout\", Integer.toString(zkClientTimeout));\n    if (hostContext != null) coresAttribs.put(\"hostContext\", hostContext);\n    \n    List<SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrCoreXMLDef>();\n    \n    synchronized (cores) {\n      Map<String,String> coreAttribs = new HashMap<String,String>();\n      for (SolrCore solrCore : cores.values()) {\n        CoreDescriptor dcore = solrCore.getCoreDescriptor();\n        \n        coreAttribs.put(\"name\", dcore.name.equals(\"\") ? defaultCoreName\n            : dcore.name);\n        coreAttribs.put(\"instanceDir\", dcore.getInstanceDir());\n        // write config (if not default)\n        String opt = dcore.getConfigName();\n        if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n          coreAttribs.put(\"config\", opt);\n        }\n        // write schema (if not default)\n        opt = dcore.getSchemaName();\n        if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n          coreAttribs.put(\"schema\", opt);\n        }\n        opt = dcore.getPropertiesName();\n        if (opt != null) {\n          coreAttribs.put(\"properties\", opt);\n        }\n        opt = dcore.dataDir;\n        if (opt != null) coreAttribs.put(\"dataDir\", opt);\n        \n        CloudDescriptor cd = dcore.getCloudDescriptor();\n        if (cd != null) {\n          opt = cd.getShardId();\n          if (opt != null) coreAttribs.put(\"shard\", opt);\n          // only write out the collection name if it's not the default (the\n          // core\n          // name)\n          opt = cd.getCollectionName();\n          if (opt != null && !opt.equals(dcore.name)) coreAttribs.put(\n              \"collection\", opt);\n        }\n        \n        SolrCoreXMLDef solrCoreXMLDef = new SolrCoreXMLDef();\n        solrCoreXMLDef.coreAttribs = coreAttribs;\n        solrCoreXMLDef.coreProperties = dcore.getCoreProperties();\n        solrCoreXMLDefs.add(solrCoreXMLDef);\n      }\n      \n      SolrXMLDef solrXMLDef = new SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      solrXMLSerializer.persistFile(file == null ? configFile : file,\n          solrXMLDef);\n    }\n  }\n\n","sourceOld":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    log.info(\"Persisting cores config to \" + (file==null ? configFile : file));\n\n    File tmpFile = null;\n    try {\n      // write in temp first\n      if (file == null) {\n        file = tmpFile = File.createTempFile(\"solr\", \".xml\", configFile.getParentFile());\n      }\n      java.io.FileOutputStream out = new java.io.FileOutputStream(file);\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it this fails\n        if (tmpFile != null) {\n          if (tmpFile.renameTo(configFile))\n            tmpFile = null;\n          else\n            fileCopy(tmpFile, configFile);\n        }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","sourceNew":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    log.info(\"Persisting cores config to \" + (file == null ? configFile : file));\n    // <solr attrib=\"value\">\n    Map<String,String> rootSolrAttribs = new HashMap<String,String>();\n    if (libDir != null) rootSolrAttribs.put(\"sharedLib\", libDir);\n    rootSolrAttribs.put(\"persistent\", Boolean.toString(isPersistent()));\n    \n    // <solr attrib=\"value\"> <cores attrib=\"value\">\n    Map<String,String> coresAttribs = new HashMap<String,String>();\n    coresAttribs.put(\"adminPath\", adminPath);\n    if (adminHandler != null) coresAttribs.put(\"adminHandler\", adminHandler);\n    if (shareSchema) coresAttribs.put(\"shareSchema\", \"true\");\n    if (!defaultCoreName.equals(\"\")) coresAttribs.put(\"defaultCoreName\",\n        defaultCoreName);\n    if (host != null) coresAttribs.put(\"host\", host);\n    if (hostPort != null) coresAttribs.put(\"hostPort\", hostPort);\n    if (zkClientTimeout != null) coresAttribs.put(\"zkClientTimeout\", Integer.toString(zkClientTimeout));\n    if (hostContext != null) coresAttribs.put(\"hostContext\", hostContext);\n    \n    List<SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrCoreXMLDef>();\n    \n    synchronized (cores) {\n      Map<String,String> coreAttribs = new HashMap<String,String>();\n      for (SolrCore solrCore : cores.values()) {\n        CoreDescriptor dcore = solrCore.getCoreDescriptor();\n        \n        coreAttribs.put(\"name\", dcore.name.equals(\"\") ? defaultCoreName\n            : dcore.name);\n        coreAttribs.put(\"instanceDir\", dcore.getInstanceDir());\n        // write config (if not default)\n        String opt = dcore.getConfigName();\n        if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n          coreAttribs.put(\"config\", opt);\n        }\n        // write schema (if not default)\n        opt = dcore.getSchemaName();\n        if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n          coreAttribs.put(\"schema\", opt);\n        }\n        opt = dcore.getPropertiesName();\n        if (opt != null) {\n          coreAttribs.put(\"properties\", opt);\n        }\n        opt = dcore.dataDir;\n        if (opt != null) coreAttribs.put(\"dataDir\", opt);\n        \n        CloudDescriptor cd = dcore.getCloudDescriptor();\n        if (cd != null) {\n          opt = cd.getShardId();\n          if (opt != null) coreAttribs.put(\"shard\", opt);\n          // only write out the collection name if it's not the default (the\n          // core\n          // name)\n          opt = cd.getCollectionName();\n          if (opt != null && !opt.equals(dcore.name)) coreAttribs.put(\n              \"collection\", opt);\n        }\n        \n        SolrCoreXMLDef solrCoreXMLDef = new SolrCoreXMLDef();\n        solrCoreXMLDef.coreAttribs = coreAttribs;\n        solrCoreXMLDef.coreProperties = dcore.getCoreProperties();\n        solrCoreXMLDefs.add(solrCoreXMLDef);\n      }\n      \n      SolrXMLDef solrXMLDef = new SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      solrXMLSerializer.persistFile(file == null ? configFile : file,\n          solrXMLDef);\n    }\n  }\n\n","sourceOld":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    log.info(\"Persisting cores config to \" + (file == null ? configFile : file));\n    // <solr attrib=\"value\">\n    Map<String,String> rootSolrAttribs = new HashMap<String,String>();\n    if (libDir != null) rootSolrAttribs.put(\"sharedLib\", libDir);\n    rootSolrAttribs.put(\"persistent\", Boolean.toString(isPersistent()));\n    \n    // <solr attrib=\"value\"> <cores attrib=\"value\">\n    Map<String,String> coresAttribs = new HashMap<String,String>();\n    coresAttribs.put(\"adminPath\", adminPath);\n    if (adminHandler != null) coresAttribs.put(\"adminHandler\", adminHandler);\n    if (shareSchema) coresAttribs.put(\"shareSchema\", \"true\");\n    if (!defaultCoreName.equals(\"\")) coresAttribs.put(\"defaultCoreName\",\n        defaultCoreName);\n    if (host != null) coresAttribs.put(\"host\", host);\n    if (hostPort != null) coresAttribs.put(\"hostPort\", hostPort);\n    if (zkClientTimeout != null) coresAttribs.put(\"zkClientTimeout\", Integer.toString(zkClientTimeout));\n    if (hostContext != null) coresAttribs.put(\"hostContext\", hostContext);\n    \n    List<SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrCoreXMLDef>();\n    \n    synchronized (cores) {\n      Map<String,String> coreAttribs = new HashMap<String,String>();\n      for (SolrCore solrCore : cores.values()) {\n        CoreDescriptor dcore = solrCore.getCoreDescriptor();\n        \n        coreAttribs.put(\"name\", dcore.name.equals(\"\") ? defaultCoreName\n            : dcore.name);\n        coreAttribs.put(\"instanceDir\", dcore.getInstanceDir());\n        // write config (if not default)\n        String opt = dcore.getConfigName();\n        if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n          coreAttribs.put(\"config\", opt);\n        }\n        // write schema (if not default)\n        opt = dcore.getSchemaName();\n        if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n          coreAttribs.put(\"schema\", opt);\n        }\n        opt = dcore.getPropertiesName();\n        if (opt != null) {\n          coreAttribs.put(\"properties\", opt);\n        }\n        opt = dcore.dataDir;\n        if (opt != null) coreAttribs.put(\"dataDir\", opt);\n        \n        CloudDescriptor cd = dcore.getCloudDescriptor();\n        if (cd != null) {\n          opt = cd.getShardId();\n          if (opt != null) coreAttribs.put(\"shard\", opt);\n          // only write out the collection name if it's not the default (the\n          // core\n          // name)\n          opt = cd.getCollectionName();\n          if (opt != null && !opt.equals(dcore.name)) coreAttribs.put(\n              \"collection\", opt);\n        }\n        \n        SolrCoreXMLDef solrCoreXMLDef = new SolrCoreXMLDef();\n        solrCoreXMLDef.coreAttribs = coreAttribs;\n        solrCoreXMLDef.coreProperties = dcore.getCoreProperties();\n        solrCoreXMLDefs.add(solrCoreXMLDef);\n      }\n      \n      SolrXMLDef solrXMLDef = new SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      solrXMLSerializer.persistFile(file == null ? configFile : file,\n          solrXMLDef);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","sourceNew":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    log.info(\"Persisting cores config to \" + (file == null ? configFile : file));\n    // <solr attrib=\"value\">\n    Map<String,String> rootSolrAttribs = new HashMap<String,String>();\n    if (libDir != null) rootSolrAttribs.put(\"sharedLib\", libDir);\n    rootSolrAttribs.put(\"persistent\", Boolean.toString(isPersistent()));\n    \n    // <solr attrib=\"value\"> <cores attrib=\"value\">\n    Map<String,String> coresAttribs = new HashMap<String,String>();\n    coresAttribs.put(\"adminPath\", adminPath);\n    if (adminHandler != null) coresAttribs.put(\"adminHandler\", adminHandler);\n    if (shareSchema) coresAttribs.put(\"shareSchema\", \"true\");\n    if (!defaultCoreName.equals(\"\")) coresAttribs.put(\"defaultCoreName\",\n        defaultCoreName);\n    if (host != null) coresAttribs.put(\"host\", host);\n    if (hostPort != null) coresAttribs.put(\"hostPort\", hostPort);\n    if (zkClientTimeout != null) coresAttribs.put(\"zkClientTimeout\", Integer.toString(zkClientTimeout));\n    if (hostContext != null) coresAttribs.put(\"hostContext\", hostContext);\n    \n    List<SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrCoreXMLDef>();\n    \n    synchronized (cores) {\n      Map<String,String> coreAttribs = new HashMap<String,String>();\n      for (SolrCore solrCore : cores.values()) {\n        CoreDescriptor dcore = solrCore.getCoreDescriptor();\n        \n        coreAttribs.put(\"name\", dcore.name.equals(\"\") ? defaultCoreName\n            : dcore.name);\n        coreAttribs.put(\"instanceDir\", dcore.getInstanceDir());\n        // write config (if not default)\n        String opt = dcore.getConfigName();\n        if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n          coreAttribs.put(\"config\", opt);\n        }\n        // write schema (if not default)\n        opt = dcore.getSchemaName();\n        if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n          coreAttribs.put(\"schema\", opt);\n        }\n        opt = dcore.getPropertiesName();\n        if (opt != null) {\n          coreAttribs.put(\"properties\", opt);\n        }\n        opt = dcore.dataDir;\n        if (opt != null) coreAttribs.put(\"dataDir\", opt);\n        \n        CloudDescriptor cd = dcore.getCloudDescriptor();\n        if (cd != null) {\n          opt = cd.getShardId();\n          if (opt != null) coreAttribs.put(\"shard\", opt);\n          // only write out the collection name if it's not the default (the\n          // core\n          // name)\n          opt = cd.getCollectionName();\n          if (opt != null && !opt.equals(dcore.name)) coreAttribs.put(\n              \"collection\", opt);\n        }\n        \n        SolrCoreXMLDef solrCoreXMLDef = new SolrCoreXMLDef();\n        solrCoreXMLDef.coreAttribs = coreAttribs;\n        solrCoreXMLDef.coreProperties = dcore.getCoreProperties();\n        solrCoreXMLDefs.add(solrCoreXMLDef);\n      }\n      \n      SolrXMLDef solrXMLDef = new SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      solrXMLSerializer.persistFile(file == null ? configFile : file,\n          solrXMLDef);\n    }\n  }\n\n","sourceOld":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    log.info(\"Persisting cores config to \" + (file == null ? configFile : file));\n    // <solr attrib=\"value\">\n    Map<String,String> rootSolrAttribs = new HashMap<String,String>();\n    if (libDir != null) rootSolrAttribs.put(\"sharedLib\", libDir);\n    rootSolrAttribs.put(\"persistent\", Boolean.toString(isPersistent()));\n    \n    // <solr attrib=\"value\"> <cores attrib=\"value\">\n    Map<String,String> coresAttribs = new HashMap<String,String>();\n    coresAttribs.put(\"adminPath\", adminPath);\n    if (adminHandler != null) coresAttribs.put(\"adminHandler\", adminHandler);\n    if (shareSchema) coresAttribs.put(\"shareSchema\", \"true\");\n    if (!defaultCoreName.equals(\"\")) coresAttribs.put(\"defaultCoreName\",\n        defaultCoreName);\n    if (host != null) coresAttribs.put(\"host\", host);\n    if (hostPort != null) coresAttribs.put(\"hostPort\", hostPort);\n    if (zkClientTimeout != null) coresAttribs.put(\"zkClientTimeout\", Integer.toString(zkClientTimeout));\n    if (hostContext != null) coresAttribs.put(\"hostContext\", hostContext);\n    \n    List<SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrCoreXMLDef>();\n    \n    synchronized (cores) {\n      Map<String,String> coreAttribs = new HashMap<String,String>();\n      for (SolrCore solrCore : cores.values()) {\n        CoreDescriptor dcore = solrCore.getCoreDescriptor();\n        \n        coreAttribs.put(\"name\", dcore.name.equals(\"\") ? defaultCoreName\n            : dcore.name);\n        coreAttribs.put(\"instanceDir\", dcore.getInstanceDir());\n        // write config (if not default)\n        String opt = dcore.getConfigName();\n        if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n          coreAttribs.put(\"config\", opt);\n        }\n        // write schema (if not default)\n        opt = dcore.getSchemaName();\n        if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n          coreAttribs.put(\"schema\", opt);\n        }\n        opt = dcore.getPropertiesName();\n        if (opt != null) {\n          coreAttribs.put(\"properties\", opt);\n        }\n        opt = dcore.dataDir;\n        if (opt != null) coreAttribs.put(\"dataDir\", opt);\n        \n        CloudDescriptor cd = dcore.getCloudDescriptor();\n        if (cd != null) {\n          opt = cd.getShardId();\n          if (opt != null) coreAttribs.put(\"shard\", opt);\n          // only write out the collection name if it's not the default (the\n          // core\n          // name)\n          opt = cd.getCollectionName();\n          if (opt != null && !opt.equals(dcore.name)) coreAttribs.put(\n              \"collection\", opt);\n        }\n        \n        SolrCoreXMLDef solrCoreXMLDef = new SolrCoreXMLDef();\n        solrCoreXMLDef.coreAttribs = coreAttribs;\n        solrCoreXMLDef.coreProperties = dcore.getCoreProperties();\n        solrCoreXMLDefs.add(solrCoreXMLDef);\n      }\n      \n      SolrXMLDef solrXMLDef = new SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      solrXMLSerializer.persistFile(file == null ? configFile : file,\n          solrXMLDef);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","sourceNew":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    log.info(\"Persisting cores config to \" + (file == null ? configFile : file));\n    // <solr attrib=\"value\">\n    Map<String,String> rootSolrAttribs = new HashMap<String,String>();\n    if (libDir != null) rootSolrAttribs.put(\"sharedLib\", libDir);\n    rootSolrAttribs.put(\"persistent\", Boolean.toString(isPersistent()));\n    \n    // <solr attrib=\"value\"> <cores attrib=\"value\">\n    Map<String,String> coresAttribs = new HashMap<String,String>();\n    coresAttribs.put(\"adminPath\", adminPath);\n    if (adminHandler != null) coresAttribs.put(\"adminHandler\", adminHandler);\n    if (shareSchema) coresAttribs.put(\"shareSchema\", \"true\");\n    if (!defaultCoreName.equals(\"\")) coresAttribs.put(\"defaultCoreName\",\n        defaultCoreName);\n    if (host != null) coresAttribs.put(\"host\", host);\n    if (hostPort != null) coresAttribs.put(\"hostPort\", hostPort);\n    if (zkClientTimeout != null) coresAttribs.put(\"zkClientTimeout\", Integer.toString(zkClientTimeout));\n    if (hostContext != null) coresAttribs.put(\"hostContext\", hostContext);\n    \n    List<SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrCoreXMLDef>();\n    \n    synchronized (cores) {\n      Map<String,String> coreAttribs = new HashMap<String,String>();\n      for (SolrCore solrCore : cores.values()) {\n        CoreDescriptor dcore = solrCore.getCoreDescriptor();\n        \n        coreAttribs.put(\"name\", dcore.name.equals(\"\") ? defaultCoreName\n            : dcore.name);\n        coreAttribs.put(\"instanceDir\", dcore.getInstanceDir());\n        // write config (if not default)\n        String opt = dcore.getConfigName();\n        if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n          coreAttribs.put(\"config\", opt);\n        }\n        // write schema (if not default)\n        opt = dcore.getSchemaName();\n        if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n          coreAttribs.put(\"schema\", opt);\n        }\n        opt = dcore.getPropertiesName();\n        if (opt != null) {\n          coreAttribs.put(\"properties\", opt);\n        }\n        opt = dcore.dataDir;\n        if (opt != null) coreAttribs.put(\"dataDir\", opt);\n        \n        CloudDescriptor cd = dcore.getCloudDescriptor();\n        if (cd != null) {\n          opt = cd.getShardId();\n          if (opt != null) coreAttribs.put(\"shard\", opt);\n          // only write out the collection name if it's not the default (the\n          // core\n          // name)\n          opt = cd.getCollectionName();\n          if (opt != null && !opt.equals(dcore.name)) coreAttribs.put(\n              \"collection\", opt);\n        }\n        \n        SolrCoreXMLDef solrCoreXMLDef = new SolrCoreXMLDef();\n        solrCoreXMLDef.coreAttribs = coreAttribs;\n        solrCoreXMLDef.coreProperties = dcore.getCoreProperties();\n        solrCoreXMLDefs.add(solrCoreXMLDef);\n      }\n      \n      SolrXMLDef solrXMLDef = new SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      solrXMLSerializer.persistFile(file == null ? configFile : file,\n          solrXMLDef);\n    }\n  }\n\n","sourceOld":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    log.info(\"Persisting cores config to \" + (file == null ? configFile : file));\n    // <solr attrib=\"value\">\n    Map<String,String> rootSolrAttribs = new HashMap<String,String>();\n    if (libDir != null) rootSolrAttribs.put(\"sharedLib\", libDir);\n    rootSolrAttribs.put(\"persistent\", Boolean.toString(isPersistent()));\n    \n    // <solr attrib=\"value\"> <cores attrib=\"value\">\n    Map<String,String> coresAttribs = new HashMap<String,String>();\n    coresAttribs.put(\"adminPath\", adminPath);\n    if (adminHandler != null) coresAttribs.put(\"adminHandler\", adminHandler);\n    if (shareSchema) coresAttribs.put(\"shareSchema\", \"true\");\n    if (!defaultCoreName.equals(\"\")) coresAttribs.put(\"defaultCoreName\",\n        defaultCoreName);\n    if (host != null) coresAttribs.put(\"host\", host);\n    if (hostPort != null) coresAttribs.put(\"hostPort\", hostPort);\n    if (zkClientTimeout != null) coresAttribs.put(\"zkClientTimeout\", Integer.toString(zkClientTimeout));\n    if (hostContext != null) coresAttribs.put(\"hostContext\", hostContext);\n    \n    List<SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrCoreXMLDef>();\n    \n    synchronized (cores) {\n      Map<String,String> coreAttribs = new HashMap<String,String>();\n      for (SolrCore solrCore : cores.values()) {\n        CoreDescriptor dcore = solrCore.getCoreDescriptor();\n        \n        coreAttribs.put(\"name\", dcore.name.equals(\"\") ? defaultCoreName\n            : dcore.name);\n        coreAttribs.put(\"instanceDir\", dcore.getInstanceDir());\n        // write config (if not default)\n        String opt = dcore.getConfigName();\n        if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n          coreAttribs.put(\"config\", opt);\n        }\n        // write schema (if not default)\n        opt = dcore.getSchemaName();\n        if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n          coreAttribs.put(\"schema\", opt);\n        }\n        opt = dcore.getPropertiesName();\n        if (opt != null) {\n          coreAttribs.put(\"properties\", opt);\n        }\n        opt = dcore.dataDir;\n        if (opt != null) coreAttribs.put(\"dataDir\", opt);\n        \n        CloudDescriptor cd = dcore.getCloudDescriptor();\n        if (cd != null) {\n          opt = cd.getShardId();\n          if (opt != null) coreAttribs.put(\"shard\", opt);\n          // only write out the collection name if it's not the default (the\n          // core\n          // name)\n          opt = cd.getCollectionName();\n          if (opt != null && !opt.equals(dcore.name)) coreAttribs.put(\n              \"collection\", opt);\n        }\n        \n        SolrCoreXMLDef solrCoreXMLDef = new SolrCoreXMLDef();\n        solrCoreXMLDef.coreAttribs = coreAttribs;\n        solrCoreXMLDef.coreProperties = dcore.getCoreProperties();\n        solrCoreXMLDefs.add(solrCoreXMLDef);\n      }\n      \n      SolrXMLDef solrXMLDef = new SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      solrXMLSerializer.persistFile(file == null ? configFile : file,\n          solrXMLDef);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["8d2901bdb2faeb41d619d969ce5655adf783746d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1da8d55113b689b06716246649de6f62430f15c0","8d2901bdb2faeb41d619d969ce5655adf783746d"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["1da8d55113b689b06716246649de6f62430f15c0","8d2901bdb2faeb41d619d969ce5655adf783746d"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d2901bdb2faeb41d619d969ce5655adf783746d":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["8d2901bdb2faeb41d619d969ce5655adf783746d"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"1da8d55113b689b06716246649de6f62430f15c0":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","8d2901bdb2faeb41d619d969ce5655adf783746d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"8d2901bdb2faeb41d619d969ce5655adf783746d":["c26f00b574427b55127e869b935845554afde1fa","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}