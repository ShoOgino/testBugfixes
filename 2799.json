{"path":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#getDbData(RrdDb,String[],Format,SolrParams).mjava","commits":[{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#getDbData(RrdDb,String[],Format,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  private NamedList<Object> getDbData(RrdDb db, String[] dsNames, Format format, SolrParams params) throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    if (dsNames == null || dsNames.length == 0) {\n      dsNames = db.getDsNames();\n    }\n    StringBuilder str = new StringBuilder();\n    RrdDef def = db.getRrdDef();\n    ArcDef[] arcDefs = def.getArcDefs();\n    for (ArcDef arcDef : arcDefs) {\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      res.add(arcDef.dump(), map);\n      Archive a = db.getArchive(arcDef.getConsolFun(), arcDef.getSteps());\n      // startTime / endTime, arcStep are in seconds\n      FetchRequest fr = db.createFetchRequest(arcDef.getConsolFun(),\n          a.getStartTime() - a.getArcStep(),\n          a.getEndTime() + a.getArcStep());\n      FetchData fd = fr.fetchData();\n      if (format != Format.GRAPH) {\n        // add timestamps separately from values\n        long[] timestamps = fd.getTimestamps();\n        str.setLength(0);\n        for (int i = 0; i < timestamps.length; i++) {\n          if (format == Format.LIST) {\n            map.add(\"timestamps\", timestamps[i]);\n          } else {\n            if (i > 0) {\n              str.append('\\n');\n            }\n            str.append(String.valueOf(timestamps[i]));\n          }\n        }\n        if (format == Format.STRING) {\n          map.add(\"timestamps\", str.toString());\n        }\n      }\n      SimpleOrderedMap values = new SimpleOrderedMap();\n      map.add(\"values\", values);\n      for (String name : dsNames) {\n        double[] vals = fd.getValues(name);\n        switch (format) {\n          case GRAPH:\n            RrdGraphDef graphDef = new RrdGraphDef();\n            graphDef.setTitle(name);\n            graphDef.datasource(name, fd);\n            graphDef.setStartTime(a.getStartTime() - a.getArcStep());\n            graphDef.setEndTime(a.getEndTime() + a.getArcStep());\n            graphDef.setPoolUsed(false);\n            graphDef.setAltAutoscale(true);\n            graphDef.setAltYGrid(true);\n            graphDef.setAltYMrtg(true);\n            graphDef.setSignature(\"Apache Solr \" + versionString);\n            graphDef.setNoLegend(true);\n            graphDef.setAntiAliasing(true);\n            graphDef.setTextAntiAliasing(true);\n            graphDef.setWidth(500);\n            graphDef.setHeight(175);\n            graphDef.setTimeZone(TimeZone.getDefault());\n            graphDef.setLocale(Locale.getDefault());\n            // redraw immediately\n            graphDef.setLazy(false);\n            // area with a border\n            graphDef.area(name, new Color(0xffb860), null);\n            graphDef.line(name, Color.RED, null, 1.0f);\n            RrdGraph graph = new RrdGraph(graphDef);\n            BufferedImage bi = new BufferedImage(\n                graph.getRrdGraphInfo().getWidth(),\n                graph.getRrdGraphInfo().getHeight(),\n                BufferedImage.TYPE_INT_RGB);\n            graph.render(bi.getGraphics());\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(bi, \"png\", baos);\n            values.add(name, Base64.byteArrayToBase64(baos.toByteArray()));\n            break;\n          case STRING:\n            str.setLength(0);\n            for (int i = 0; i < vals.length; i++) {\n              if (i > 0) {\n                str.append('\\n');\n              }\n              str.append(String.valueOf(vals[i]));\n            }\n            values.add(name, str.toString());\n            break;\n          case LIST:\n            for (int i = 0; i < vals.length; i++) {\n              values.add(name, vals[i]);\n            }\n            break;\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"82ddd56ebef796c826e12ab1aca3682a6971d5de","date":1527694653,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#getDbData(RrdDb,String[],Format,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#getDbData(RrdDb,String[],Format,SolrParams).mjava","sourceNew":"  private NamedList<Object> getDbData(RrdDb db, String[] dsNames, Format format, SolrParams params) throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    if (dsNames == null || dsNames.length == 0) {\n      dsNames = db.getDsNames();\n    }\n    StringBuilder str = new StringBuilder();\n    RrdDef def = db.getRrdDef();\n    ArcDef[] arcDefs = def.getArcDefs();\n    for (ArcDef arcDef : arcDefs) {\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      res.add(arcDef.dump(), map);\n      Archive a = db.getArchive(arcDef.getConsolFun(), arcDef.getSteps());\n      // startTime / endTime, arcStep are in seconds\n      FetchRequest fr = db.createFetchRequest(arcDef.getConsolFun(),\n          a.getStartTime() - a.getArcStep(),\n          a.getEndTime() + a.getArcStep());\n      FetchData fd = fr.fetchData();\n      if (format != Format.GRAPH) {\n        // add timestamps separately from values\n        long[] timestamps = fd.getTimestamps();\n        str.setLength(0);\n        for (int i = 0; i < timestamps.length; i++) {\n          if (format == Format.LIST) {\n            map.add(\"timestamps\", timestamps[i]);\n          } else {\n            if (i > 0) {\n              str.append('\\n');\n            }\n            str.append(String.valueOf(timestamps[i]));\n          }\n        }\n        if (format == Format.STRING) {\n          map.add(\"timestamps\", str.toString());\n        }\n      }\n      SimpleOrderedMap values = new SimpleOrderedMap();\n      map.add(\"values\", values);\n      for (String name : dsNames) {\n        double[] vals = fd.getValues(name);\n        switch (format) {\n          case GRAPH:\n            RrdGraphDef graphDef = new RrdGraphDef();\n            graphDef.setTitle(name);\n            graphDef.datasource(name, fd);\n            graphDef.setStartTime(a.getStartTime() - a.getArcStep());\n            graphDef.setEndTime(a.getEndTime() + a.getArcStep());\n            graphDef.setPoolUsed(false);\n            graphDef.setAltAutoscale(true);\n            graphDef.setAltYGrid(true);\n            graphDef.setAltYMrtg(true);\n            graphDef.setSignature(\"Apache Solr \" + versionString);\n            graphDef.setNoLegend(true);\n            graphDef.setAntiAliasing(true);\n            graphDef.setTextAntiAliasing(true);\n            graphDef.setWidth(500);\n            graphDef.setHeight(175);\n            graphDef.setTimeZone(TimeZone.getDefault());\n            graphDef.setLocale(Locale.ROOT);\n            // redraw immediately\n            graphDef.setLazy(false);\n            // area with a border\n            graphDef.area(name, new Color(0xffb860), null);\n            graphDef.line(name, Color.RED, null, 1.0f);\n            RrdGraph graph = new RrdGraph(graphDef);\n            BufferedImage bi = new BufferedImage(\n                graph.getRrdGraphInfo().getWidth(),\n                graph.getRrdGraphInfo().getHeight(),\n                BufferedImage.TYPE_INT_RGB);\n            graph.render(bi.getGraphics());\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(bi, \"png\", baos);\n            values.add(name, Base64.byteArrayToBase64(baos.toByteArray()));\n            break;\n          case STRING:\n            str.setLength(0);\n            for (int i = 0; i < vals.length; i++) {\n              if (i > 0) {\n                str.append('\\n');\n              }\n              str.append(String.valueOf(vals[i]));\n            }\n            values.add(name, str.toString());\n            break;\n          case LIST:\n            for (int i = 0; i < vals.length; i++) {\n              values.add(name, vals[i]);\n            }\n            break;\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  private NamedList<Object> getDbData(RrdDb db, String[] dsNames, Format format, SolrParams params) throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    if (dsNames == null || dsNames.length == 0) {\n      dsNames = db.getDsNames();\n    }\n    StringBuilder str = new StringBuilder();\n    RrdDef def = db.getRrdDef();\n    ArcDef[] arcDefs = def.getArcDefs();\n    for (ArcDef arcDef : arcDefs) {\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      res.add(arcDef.dump(), map);\n      Archive a = db.getArchive(arcDef.getConsolFun(), arcDef.getSteps());\n      // startTime / endTime, arcStep are in seconds\n      FetchRequest fr = db.createFetchRequest(arcDef.getConsolFun(),\n          a.getStartTime() - a.getArcStep(),\n          a.getEndTime() + a.getArcStep());\n      FetchData fd = fr.fetchData();\n      if (format != Format.GRAPH) {\n        // add timestamps separately from values\n        long[] timestamps = fd.getTimestamps();\n        str.setLength(0);\n        for (int i = 0; i < timestamps.length; i++) {\n          if (format == Format.LIST) {\n            map.add(\"timestamps\", timestamps[i]);\n          } else {\n            if (i > 0) {\n              str.append('\\n');\n            }\n            str.append(String.valueOf(timestamps[i]));\n          }\n        }\n        if (format == Format.STRING) {\n          map.add(\"timestamps\", str.toString());\n        }\n      }\n      SimpleOrderedMap values = new SimpleOrderedMap();\n      map.add(\"values\", values);\n      for (String name : dsNames) {\n        double[] vals = fd.getValues(name);\n        switch (format) {\n          case GRAPH:\n            RrdGraphDef graphDef = new RrdGraphDef();\n            graphDef.setTitle(name);\n            graphDef.datasource(name, fd);\n            graphDef.setStartTime(a.getStartTime() - a.getArcStep());\n            graphDef.setEndTime(a.getEndTime() + a.getArcStep());\n            graphDef.setPoolUsed(false);\n            graphDef.setAltAutoscale(true);\n            graphDef.setAltYGrid(true);\n            graphDef.setAltYMrtg(true);\n            graphDef.setSignature(\"Apache Solr \" + versionString);\n            graphDef.setNoLegend(true);\n            graphDef.setAntiAliasing(true);\n            graphDef.setTextAntiAliasing(true);\n            graphDef.setWidth(500);\n            graphDef.setHeight(175);\n            graphDef.setTimeZone(TimeZone.getDefault());\n            graphDef.setLocale(Locale.getDefault());\n            // redraw immediately\n            graphDef.setLazy(false);\n            // area with a border\n            graphDef.area(name, new Color(0xffb860), null);\n            graphDef.line(name, Color.RED, null, 1.0f);\n            RrdGraph graph = new RrdGraph(graphDef);\n            BufferedImage bi = new BufferedImage(\n                graph.getRrdGraphInfo().getWidth(),\n                graph.getRrdGraphInfo().getHeight(),\n                BufferedImage.TYPE_INT_RGB);\n            graph.render(bi.getGraphics());\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(bi, \"png\", baos);\n            values.add(name, Base64.byteArrayToBase64(baos.toByteArray()));\n            break;\n          case STRING:\n            str.setLength(0);\n            for (int i = 0; i < vals.length; i++) {\n              if (i > 0) {\n                str.append('\\n');\n              }\n              str.append(String.valueOf(vals[i]));\n            }\n            values.add(name, str.toString());\n            break;\n          case LIST:\n            for (int i = 0; i < vals.length; i++) {\n              values.add(name, vals[i]);\n            }\n            break;\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f0f2472d437d44ec2144932e1d13fb494e82a3","date":1528403207,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#getDbData(RrdDb,String[],Format,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#getDbData(RrdDb,String[],Format,SolrParams).mjava","sourceNew":"  private NamedList<Object> getDbData(RrdDb db, String[] dsNames, Format format, SolrParams params) throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    if (dsNames == null || dsNames.length == 0) {\n      dsNames = db.getDsNames();\n    }\n    StringBuilder str = new StringBuilder();\n    RrdDef def = db.getRrdDef();\n    ArcDef[] arcDefs = def.getArcDefs();\n    for (ArcDef arcDef : arcDefs) {\n      SimpleOrderedMap<Object> map = new SimpleOrderedMap<>();\n      res.add(arcDef.dump(), map);\n      Archive a = db.getArchive(arcDef.getConsolFun(), arcDef.getSteps());\n      // startTime / endTime, arcStep are in seconds\n      FetchRequest fr = db.createFetchRequest(arcDef.getConsolFun(),\n          a.getStartTime() - a.getArcStep(),\n          a.getEndTime() + a.getArcStep());\n      FetchData fd = fr.fetchData();\n      if (format != Format.GRAPH) {\n        // add timestamps separately from values\n        long[] timestamps = fd.getTimestamps();\n        if (format == Format.LIST) {\n          // Arrays.asList works only on arrays of Objects\n          map.add(\"timestamps\", Arrays.stream(timestamps).boxed().collect(Collectors.toList()));\n        } else {\n          str.setLength(0);\n          for (int i = 0; i < timestamps.length; i++) {\n            if (i > 0) {\n              str.append('\\n');\n            }\n            str.append(String.valueOf(timestamps[i]));\n          }\n          map.add(\"timestamps\", str.toString());\n        }\n      }\n      SimpleOrderedMap<Object> values = new SimpleOrderedMap<>();\n      map.add(\"values\", values);\n      for (String name : dsNames) {\n        double[] vals = fd.getValues(name);\n        switch (format) {\n          case GRAPH:\n            RrdGraphDef graphDef = new RrdGraphDef();\n            graphDef.setTitle(name);\n            graphDef.datasource(name, fd);\n            graphDef.setStartTime(a.getStartTime() - a.getArcStep());\n            graphDef.setEndTime(a.getEndTime() + a.getArcStep());\n            graphDef.setPoolUsed(false);\n            graphDef.setAltAutoscale(true);\n            graphDef.setAltYGrid(true);\n            graphDef.setAltYMrtg(true);\n            graphDef.setSignature(\"Apache Solr \" + versionString);\n            graphDef.setNoLegend(true);\n            graphDef.setAntiAliasing(true);\n            graphDef.setTextAntiAliasing(true);\n            graphDef.setWidth(500);\n            graphDef.setHeight(175);\n            graphDef.setTimeZone(TimeZone.getDefault());\n            graphDef.setLocale(Locale.ROOT);\n            // redraw immediately\n            graphDef.setLazy(false);\n            // area with a border\n            graphDef.area(name, new Color(0xffb860), null);\n            graphDef.line(name, Color.RED, null, 1.0f);\n            RrdGraph graph = new RrdGraph(graphDef);\n            BufferedImage bi = new BufferedImage(\n                graph.getRrdGraphInfo().getWidth(),\n                graph.getRrdGraphInfo().getHeight(),\n                BufferedImage.TYPE_INT_RGB);\n            graph.render(bi.getGraphics());\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(bi, \"png\", baos);\n            values.add(name, Base64.byteArrayToBase64(baos.toByteArray()));\n            break;\n          case STRING:\n            str.setLength(0);\n            for (int i = 0; i < vals.length; i++) {\n              if (i > 0) {\n                str.append('\\n');\n              }\n              str.append(String.valueOf(vals[i]));\n            }\n            values.add(name, str.toString());\n            break;\n          case LIST:\n            values.add(name, Arrays.stream(vals).boxed().collect(Collectors.toList()));\n            break;\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  private NamedList<Object> getDbData(RrdDb db, String[] dsNames, Format format, SolrParams params) throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    if (dsNames == null || dsNames.length == 0) {\n      dsNames = db.getDsNames();\n    }\n    StringBuilder str = new StringBuilder();\n    RrdDef def = db.getRrdDef();\n    ArcDef[] arcDefs = def.getArcDefs();\n    for (ArcDef arcDef : arcDefs) {\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      res.add(arcDef.dump(), map);\n      Archive a = db.getArchive(arcDef.getConsolFun(), arcDef.getSteps());\n      // startTime / endTime, arcStep are in seconds\n      FetchRequest fr = db.createFetchRequest(arcDef.getConsolFun(),\n          a.getStartTime() - a.getArcStep(),\n          a.getEndTime() + a.getArcStep());\n      FetchData fd = fr.fetchData();\n      if (format != Format.GRAPH) {\n        // add timestamps separately from values\n        long[] timestamps = fd.getTimestamps();\n        str.setLength(0);\n        for (int i = 0; i < timestamps.length; i++) {\n          if (format == Format.LIST) {\n            map.add(\"timestamps\", timestamps[i]);\n          } else {\n            if (i > 0) {\n              str.append('\\n');\n            }\n            str.append(String.valueOf(timestamps[i]));\n          }\n        }\n        if (format == Format.STRING) {\n          map.add(\"timestamps\", str.toString());\n        }\n      }\n      SimpleOrderedMap values = new SimpleOrderedMap();\n      map.add(\"values\", values);\n      for (String name : dsNames) {\n        double[] vals = fd.getValues(name);\n        switch (format) {\n          case GRAPH:\n            RrdGraphDef graphDef = new RrdGraphDef();\n            graphDef.setTitle(name);\n            graphDef.datasource(name, fd);\n            graphDef.setStartTime(a.getStartTime() - a.getArcStep());\n            graphDef.setEndTime(a.getEndTime() + a.getArcStep());\n            graphDef.setPoolUsed(false);\n            graphDef.setAltAutoscale(true);\n            graphDef.setAltYGrid(true);\n            graphDef.setAltYMrtg(true);\n            graphDef.setSignature(\"Apache Solr \" + versionString);\n            graphDef.setNoLegend(true);\n            graphDef.setAntiAliasing(true);\n            graphDef.setTextAntiAliasing(true);\n            graphDef.setWidth(500);\n            graphDef.setHeight(175);\n            graphDef.setTimeZone(TimeZone.getDefault());\n            graphDef.setLocale(Locale.ROOT);\n            // redraw immediately\n            graphDef.setLazy(false);\n            // area with a border\n            graphDef.area(name, new Color(0xffb860), null);\n            graphDef.line(name, Color.RED, null, 1.0f);\n            RrdGraph graph = new RrdGraph(graphDef);\n            BufferedImage bi = new BufferedImage(\n                graph.getRrdGraphInfo().getWidth(),\n                graph.getRrdGraphInfo().getHeight(),\n                BufferedImage.TYPE_INT_RGB);\n            graph.render(bi.getGraphics());\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(bi, \"png\", baos);\n            values.add(name, Base64.byteArrayToBase64(baos.toByteArray()));\n            break;\n          case STRING:\n            str.setLength(0);\n            for (int i = 0; i < vals.length; i++) {\n              if (i > 0) {\n                str.append('\\n');\n              }\n              str.append(String.valueOf(vals[i]));\n            }\n            values.add(name, str.toString());\n            break;\n          case LIST:\n            for (int i = 0; i < vals.length; i++) {\n              values.add(name, vals[i]);\n            }\n            break;\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#getDbData(RrdDb,String[],Format,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#getDbData(RrdDb,String[],Format,SolrParams).mjava","sourceNew":"  private NamedList<Object> getDbData(RrdDb db, String[] dsNames, Format format, SolrParams params) throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    if (dsNames == null || dsNames.length == 0) {\n      dsNames = db.getDsNames();\n    }\n    StringBuilder str = new StringBuilder();\n    RrdDef def = db.getRrdDef();\n    ArcDef[] arcDefs = def.getArcDefs();\n    for (ArcDef arcDef : arcDefs) {\n      SimpleOrderedMap<Object> map = new SimpleOrderedMap<>();\n      res.add(arcDef.dump(), map);\n      Archive a = db.getArchive(arcDef.getConsolFun(), arcDef.getSteps());\n      // startTime / endTime, arcStep are in seconds\n      FetchRequest fr = db.createFetchRequest(arcDef.getConsolFun(),\n          a.getStartTime() - a.getArcStep(),\n          a.getEndTime() + a.getArcStep());\n      FetchData fd = fr.fetchData();\n      if (format != Format.GRAPH) {\n        // add timestamps separately from values\n        long[] timestamps = fd.getTimestamps();\n        if (format == Format.LIST) {\n          // Arrays.asList works only on arrays of Objects\n          map.add(\"timestamps\", Arrays.stream(timestamps).boxed().collect(Collectors.toList()));\n        } else {\n          str.setLength(0);\n          for (int i = 0; i < timestamps.length; i++) {\n            if (i > 0) {\n              str.append('\\n');\n            }\n            str.append(String.valueOf(timestamps[i]));\n          }\n          map.add(\"timestamps\", str.toString());\n        }\n      }\n      SimpleOrderedMap<Object> values = new SimpleOrderedMap<>();\n      map.add(\"values\", values);\n      for (String name : dsNames) {\n        double[] vals = fd.getValues(name);\n        switch (format) {\n          case GRAPH:\n            RrdGraphDef graphDef = new RrdGraphDef();\n            graphDef.setTitle(name);\n            graphDef.datasource(name, fd);\n            graphDef.setStartTime(a.getStartTime() - a.getArcStep());\n            graphDef.setEndTime(a.getEndTime() + a.getArcStep());\n            graphDef.setPoolUsed(false);\n            graphDef.setAltAutoscale(true);\n            graphDef.setAltYGrid(true);\n            graphDef.setAltYMrtg(true);\n            graphDef.setSignature(\"Apache Solr \" + versionString);\n            graphDef.setNoLegend(true);\n            graphDef.setAntiAliasing(true);\n            graphDef.setTextAntiAliasing(true);\n            graphDef.setWidth(500);\n            graphDef.setHeight(175);\n            graphDef.setTimeZone(TimeZone.getDefault());\n            graphDef.setLocale(Locale.ROOT);\n            // redraw immediately\n            graphDef.setLazy(false);\n            // area with a border\n            graphDef.area(name, new Color(0xffb860), null);\n            graphDef.line(name, Color.RED, null, 1.0f);\n            RrdGraph graph = new RrdGraph(graphDef);\n            BufferedImage bi = new BufferedImage(\n                graph.getRrdGraphInfo().getWidth(),\n                graph.getRrdGraphInfo().getHeight(),\n                BufferedImage.TYPE_INT_RGB);\n            graph.render(bi.getGraphics());\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(bi, \"png\", baos);\n            values.add(name, Base64.byteArrayToBase64(baos.toByteArray()));\n            break;\n          case STRING:\n            str.setLength(0);\n            for (int i = 0; i < vals.length; i++) {\n              if (i > 0) {\n                str.append('\\n');\n              }\n              str.append(String.valueOf(vals[i]));\n            }\n            values.add(name, str.toString());\n            break;\n          case LIST:\n            values.add(name, Arrays.stream(vals).boxed().collect(Collectors.toList()));\n            break;\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  private NamedList<Object> getDbData(RrdDb db, String[] dsNames, Format format, SolrParams params) throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    if (dsNames == null || dsNames.length == 0) {\n      dsNames = db.getDsNames();\n    }\n    StringBuilder str = new StringBuilder();\n    RrdDef def = db.getRrdDef();\n    ArcDef[] arcDefs = def.getArcDefs();\n    for (ArcDef arcDef : arcDefs) {\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      res.add(arcDef.dump(), map);\n      Archive a = db.getArchive(arcDef.getConsolFun(), arcDef.getSteps());\n      // startTime / endTime, arcStep are in seconds\n      FetchRequest fr = db.createFetchRequest(arcDef.getConsolFun(),\n          a.getStartTime() - a.getArcStep(),\n          a.getEndTime() + a.getArcStep());\n      FetchData fd = fr.fetchData();\n      if (format != Format.GRAPH) {\n        // add timestamps separately from values\n        long[] timestamps = fd.getTimestamps();\n        str.setLength(0);\n        for (int i = 0; i < timestamps.length; i++) {\n          if (format == Format.LIST) {\n            map.add(\"timestamps\", timestamps[i]);\n          } else {\n            if (i > 0) {\n              str.append('\\n');\n            }\n            str.append(String.valueOf(timestamps[i]));\n          }\n        }\n        if (format == Format.STRING) {\n          map.add(\"timestamps\", str.toString());\n        }\n      }\n      SimpleOrderedMap values = new SimpleOrderedMap();\n      map.add(\"values\", values);\n      for (String name : dsNames) {\n        double[] vals = fd.getValues(name);\n        switch (format) {\n          case GRAPH:\n            RrdGraphDef graphDef = new RrdGraphDef();\n            graphDef.setTitle(name);\n            graphDef.datasource(name, fd);\n            graphDef.setStartTime(a.getStartTime() - a.getArcStep());\n            graphDef.setEndTime(a.getEndTime() + a.getArcStep());\n            graphDef.setPoolUsed(false);\n            graphDef.setAltAutoscale(true);\n            graphDef.setAltYGrid(true);\n            graphDef.setAltYMrtg(true);\n            graphDef.setSignature(\"Apache Solr \" + versionString);\n            graphDef.setNoLegend(true);\n            graphDef.setAntiAliasing(true);\n            graphDef.setTextAntiAliasing(true);\n            graphDef.setWidth(500);\n            graphDef.setHeight(175);\n            graphDef.setTimeZone(TimeZone.getDefault());\n            graphDef.setLocale(Locale.ROOT);\n            // redraw immediately\n            graphDef.setLazy(false);\n            // area with a border\n            graphDef.area(name, new Color(0xffb860), null);\n            graphDef.line(name, Color.RED, null, 1.0f);\n            RrdGraph graph = new RrdGraph(graphDef);\n            BufferedImage bi = new BufferedImage(\n                graph.getRrdGraphInfo().getWidth(),\n                graph.getRrdGraphInfo().getHeight(),\n                BufferedImage.TYPE_INT_RGB);\n            graph.render(bi.getGraphics());\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(bi, \"png\", baos);\n            values.add(name, Base64.byteArrayToBase64(baos.toByteArray()));\n            break;\n          case STRING:\n            str.setLength(0);\n            for (int i = 0; i < vals.length; i++) {\n              if (i > 0) {\n                str.append('\\n');\n              }\n              str.append(String.valueOf(vals[i]));\n            }\n            values.add(name, str.toString());\n            break;\n          case LIST:\n            for (int i = 0; i < vals.length; i++) {\n              values.add(name, vals[i]);\n            }\n            break;\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#getDbData(RrdDb,String[],Format,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#getDbData(RrdDb,String[],Format,SolrParams).mjava","sourceNew":"  private NamedList<Object> getDbData(RrdDb db, String[] dsNames, Format format, SolrParams params) throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    if (dsNames == null || dsNames.length == 0) {\n      dsNames = db.getDsNames();\n    }\n    StringBuilder str = new StringBuilder();\n    RrdDef def = db.getRrdDef();\n    ArcDef[] arcDefs = def.getArcDefs();\n    for (ArcDef arcDef : arcDefs) {\n      SimpleOrderedMap<Object> map = new SimpleOrderedMap<>();\n      res.add(arcDef.dump(), map);\n      Archive a = db.getArchive(arcDef.getConsolFun(), arcDef.getSteps());\n      // startTime / endTime, arcStep are in seconds\n      FetchRequest fr = db.createFetchRequest(arcDef.getConsolFun(),\n          a.getStartTime() - a.getArcStep(),\n          a.getEndTime() + a.getArcStep());\n      FetchData fd = fr.fetchData();\n      if (format != Format.GRAPH) {\n        // add timestamps separately from values\n        long[] timestamps = fd.getTimestamps();\n        if (format == Format.LIST) {\n          // Arrays.asList works only on arrays of Objects\n          map.add(\"timestamps\", Arrays.stream(timestamps).boxed().collect(Collectors.toList()));\n        } else {\n          str.setLength(0);\n          for (int i = 0; i < timestamps.length; i++) {\n            if (i > 0) {\n              str.append('\\n');\n            }\n            str.append(String.valueOf(timestamps[i]));\n          }\n          map.add(\"timestamps\", str.toString());\n        }\n      }\n      SimpleOrderedMap<Object> values = new SimpleOrderedMap<>();\n      map.add(\"values\", values);\n      for (String name : dsNames) {\n        double[] vals = fd.getValues(name);\n        switch (format) {\n          case GRAPH:\n            RrdGraphDef graphDef = new RrdGraphDef();\n            graphDef.setTitle(name);\n            graphDef.datasource(name, fd);\n            graphDef.setStartTime(a.getStartTime() - a.getArcStep());\n            graphDef.setEndTime(a.getEndTime() + a.getArcStep());\n            graphDef.setPoolUsed(false);\n            graphDef.setAltAutoscale(true);\n            graphDef.setAltYGrid(true);\n            graphDef.setAltYMrtg(true);\n            graphDef.setSignature(\"Apache Solr \" + versionString);\n            graphDef.setNoLegend(true);\n            graphDef.setAntiAliasing(true);\n            graphDef.setTextAntiAliasing(true);\n            graphDef.setWidth(500);\n            graphDef.setHeight(175);\n            graphDef.setTimeZone(TimeZone.getDefault());\n            graphDef.setLocale(Locale.ROOT);\n            // redraw immediately\n            graphDef.setLazy(false);\n            // area with a border\n            graphDef.area(name, new Color(0xffb860), null);\n            graphDef.line(name, Color.RED, null, 1.0f);\n            RrdGraph graph = new RrdGraph(graphDef);\n            BufferedImage bi = new BufferedImage(\n                graph.getRrdGraphInfo().getWidth(),\n                graph.getRrdGraphInfo().getHeight(),\n                BufferedImage.TYPE_INT_RGB);\n            graph.render(bi.getGraphics());\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(bi, \"png\", baos);\n            values.add(name, Base64.byteArrayToBase64(baos.toByteArray()));\n            break;\n          case STRING:\n            str.setLength(0);\n            for (int i = 0; i < vals.length; i++) {\n              if (i > 0) {\n                str.append('\\n');\n              }\n              str.append(String.valueOf(vals[i]));\n            }\n            values.add(name, str.toString());\n            break;\n          case LIST:\n            values.add(name, Arrays.stream(vals).boxed().collect(Collectors.toList()));\n            break;\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  private NamedList<Object> getDbData(RrdDb db, String[] dsNames, Format format, SolrParams params) throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    if (dsNames == null || dsNames.length == 0) {\n      dsNames = db.getDsNames();\n    }\n    StringBuilder str = new StringBuilder();\n    RrdDef def = db.getRrdDef();\n    ArcDef[] arcDefs = def.getArcDefs();\n    for (ArcDef arcDef : arcDefs) {\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      res.add(arcDef.dump(), map);\n      Archive a = db.getArchive(arcDef.getConsolFun(), arcDef.getSteps());\n      // startTime / endTime, arcStep are in seconds\n      FetchRequest fr = db.createFetchRequest(arcDef.getConsolFun(),\n          a.getStartTime() - a.getArcStep(),\n          a.getEndTime() + a.getArcStep());\n      FetchData fd = fr.fetchData();\n      if (format != Format.GRAPH) {\n        // add timestamps separately from values\n        long[] timestamps = fd.getTimestamps();\n        str.setLength(0);\n        for (int i = 0; i < timestamps.length; i++) {\n          if (format == Format.LIST) {\n            map.add(\"timestamps\", timestamps[i]);\n          } else {\n            if (i > 0) {\n              str.append('\\n');\n            }\n            str.append(String.valueOf(timestamps[i]));\n          }\n        }\n        if (format == Format.STRING) {\n          map.add(\"timestamps\", str.toString());\n        }\n      }\n      SimpleOrderedMap values = new SimpleOrderedMap();\n      map.add(\"values\", values);\n      for (String name : dsNames) {\n        double[] vals = fd.getValues(name);\n        switch (format) {\n          case GRAPH:\n            RrdGraphDef graphDef = new RrdGraphDef();\n            graphDef.setTitle(name);\n            graphDef.datasource(name, fd);\n            graphDef.setStartTime(a.getStartTime() - a.getArcStep());\n            graphDef.setEndTime(a.getEndTime() + a.getArcStep());\n            graphDef.setPoolUsed(false);\n            graphDef.setAltAutoscale(true);\n            graphDef.setAltYGrid(true);\n            graphDef.setAltYMrtg(true);\n            graphDef.setSignature(\"Apache Solr \" + versionString);\n            graphDef.setNoLegend(true);\n            graphDef.setAntiAliasing(true);\n            graphDef.setTextAntiAliasing(true);\n            graphDef.setWidth(500);\n            graphDef.setHeight(175);\n            graphDef.setTimeZone(TimeZone.getDefault());\n            graphDef.setLocale(Locale.ROOT);\n            // redraw immediately\n            graphDef.setLazy(false);\n            // area with a border\n            graphDef.area(name, new Color(0xffb860), null);\n            graphDef.line(name, Color.RED, null, 1.0f);\n            RrdGraph graph = new RrdGraph(graphDef);\n            BufferedImage bi = new BufferedImage(\n                graph.getRrdGraphInfo().getWidth(),\n                graph.getRrdGraphInfo().getHeight(),\n                BufferedImage.TYPE_INT_RGB);\n            graph.render(bi.getGraphics());\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(bi, \"png\", baos);\n            values.add(name, Base64.byteArrayToBase64(baos.toByteArray()));\n            break;\n          case STRING:\n            str.setLength(0);\n            for (int i = 0; i < vals.length; i++) {\n              if (i > 0) {\n                str.append('\\n');\n              }\n              str.append(String.valueOf(vals[i]));\n            }\n            values.add(name, str.toString());\n            break;\n          case LIST:\n            for (int i = 0; i < vals.length; i++) {\n              values.add(name, vals[i]);\n            }\n            break;\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["82ddd56ebef796c826e12ab1aca3682a6971d5de"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["82ddd56ebef796c826e12ab1aca3682a6971d5de","f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"82ddd56ebef796c826e12ab1aca3682a6971d5de":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["82ddd56ebef796c826e12ab1aca3682a6971d5de","f8f0f2472d437d44ec2144932e1d13fb494e82a3"]},"commit2Childs":{"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["82ddd56ebef796c826e12ab1aca3682a6971d5de"],"82ddd56ebef796c826e12ab1aca3682a6971d5de":["f8f0f2472d437d44ec2144932e1d13fb494e82a3","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}