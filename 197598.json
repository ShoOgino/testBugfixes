{"path":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSegmentsFileLength(IndexCommit).mjava","commits":[{"id":"3bfa1cc7f31c97f229456239c8c3975c3ea5e1d2","date":1510246402,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSegmentsFileLength(IndexCommit).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>A helper method that attempts to determine the file length of the the segments file for the \n   * specified IndexCommit from it's Directory.\n   * </p>\n   * <p>\n   * If any sort of {@link IOException} occurs, this method will return \"-1\" and swallow the exception since \n   * this may be normal if the IndexCommit is no longer \"on disk\".  The specific type of the Exception will \n   * affect how severely it is logged: {@link NoSuchFileException} is considered more \"acceptible\" then other \n   * types of IOException which may indicate an actual problem with the Directory.\n   */\n  private static long getSegmentsFileLength(IndexCommit commit) {\n    try {\n      return commit.getDirectory().fileLength(commit.getSegmentsFileName());\n    } catch (NoSuchFileException okException) {\n      log.debug(\"Unable to determine the (optional) fileSize for the current IndexReader's segments file because it is \"\n                + \"no longer in the Directory, this can happen if there are new commits since the Reader was opened\",\n                okException);\n    } catch (IOException strangeException) {\n      log.warn(\"Ignoring IOException wile attempting to determine the (optional) fileSize stat for the current IndexReader's segments file\",\n               strangeException);\n    }\n    return -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSegmentsFileLength(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSegmentsFileLength(IndexCommit).mjava","sourceNew":"  /**\n   * <p>A helper method that attempts to determine the file length of the the segments file for the \n   * specified IndexCommit from it's Directory.\n   * </p>\n   * <p>\n   * If any sort of {@link IOException} occurs, this method will return \"-1\" and swallow the exception since \n   * this may be normal if the IndexCommit is no longer \"on disk\".  The specific type of the Exception will \n   * affect how severely it is logged: {@link NoSuchFileException} is considered more \"acceptible\" then other \n   * types of IOException which may indicate an actual problem with the Directory.\n   */\n  private static long getSegmentsFileLength(IndexCommit commit) {\n    try {\n      return commit.getDirectory().fileLength(commit.getSegmentsFileName());\n    } catch (NoSuchFileException okException) {\n      log.debug(\"Unable to determine the (optional) fileSize for the current IndexReader's segments file because it is {}{}\"\n          , \"no longer in the Directory, this can happen if there are new commits since the Reader was opened\"\n          , okException);\n    } catch (IOException strangeException) {\n      log.warn(\"Ignoring IOException wile attempting to determine the (optional) fileSize stat for the current IndexReader's segments file\",\n               strangeException);\n    }\n    return -1;\n  }\n\n","sourceOld":"  /**\n   * <p>A helper method that attempts to determine the file length of the the segments file for the \n   * specified IndexCommit from it's Directory.\n   * </p>\n   * <p>\n   * If any sort of {@link IOException} occurs, this method will return \"-1\" and swallow the exception since \n   * this may be normal if the IndexCommit is no longer \"on disk\".  The specific type of the Exception will \n   * affect how severely it is logged: {@link NoSuchFileException} is considered more \"acceptible\" then other \n   * types of IOException which may indicate an actual problem with the Directory.\n   */\n  private static long getSegmentsFileLength(IndexCommit commit) {\n    try {\n      return commit.getDirectory().fileLength(commit.getSegmentsFileName());\n    } catch (NoSuchFileException okException) {\n      log.debug(\"Unable to determine the (optional) fileSize for the current IndexReader's segments file because it is \"\n                + \"no longer in the Directory, this can happen if there are new commits since the Reader was opened\",\n                okException);\n    } catch (IOException strangeException) {\n      log.warn(\"Ignoring IOException wile attempting to determine the (optional) fileSize stat for the current IndexReader's segments file\",\n               strangeException);\n    }\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854","date":1588352817,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSegmentsFileLength(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSegmentsFileLength(IndexCommit).mjava","sourceNew":"  /**\n   * <p>A helper method that attempts to determine the file length of the the segments file for the \n   * specified IndexCommit from it's Directory.\n   * </p>\n   * <p>\n   * If any sort of {@link IOException} occurs, this method will return \"-1\" and swallow the exception since \n   * this may be normal if the IndexCommit is no longer \"on disk\".  The specific type of the Exception will \n   * affect how severely it is logged: {@link NoSuchFileException} is considered more \"acceptible\" then other \n   * types of IOException which may indicate an actual problem with the Directory.\n   */\n  private static long getSegmentsFileLength(IndexCommit commit) {\n    try {\n      return commit.getDirectory().fileLength(commit.getSegmentsFileName());\n    } catch (NoSuchFileException okException) {\n      log.debug(\"Unable to determine the (optional) fileSize for the current IndexReader's segments file because it is \"\n          + \"no longer in the Directory, this can happen if there are new commits since the Reader was opened\"\n          , okException);\n    } catch (IOException strangeException) {\n      log.warn(\"Ignoring IOException wile attempting to determine the (optional) fileSize stat for the current IndexReader's segments file\",\n               strangeException);\n    }\n    return -1;\n  }\n\n","sourceOld":"  /**\n   * <p>A helper method that attempts to determine the file length of the the segments file for the \n   * specified IndexCommit from it's Directory.\n   * </p>\n   * <p>\n   * If any sort of {@link IOException} occurs, this method will return \"-1\" and swallow the exception since \n   * this may be normal if the IndexCommit is no longer \"on disk\".  The specific type of the Exception will \n   * affect how severely it is logged: {@link NoSuchFileException} is considered more \"acceptible\" then other \n   * types of IOException which may indicate an actual problem with the Directory.\n   */\n  private static long getSegmentsFileLength(IndexCommit commit) {\n    try {\n      return commit.getDirectory().fileLength(commit.getSegmentsFileName());\n    } catch (NoSuchFileException okException) {\n      log.debug(\"Unable to determine the (optional) fileSize for the current IndexReader's segments file because it is {}{}\"\n          , \"no longer in the Directory, this can happen if there are new commits since the Reader was opened\"\n          , okException);\n    } catch (IOException strangeException) {\n      log.warn(\"Ignoring IOException wile attempting to determine the (optional) fileSize stat for the current IndexReader's segments file\",\n               strangeException);\n    }\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["3bfa1cc7f31c97f229456239c8c3975c3ea5e1d2"],"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854":["575e66bd4b2349209027f6801184da7fc3cba13f"],"3bfa1cc7f31c97f229456239c8c3975c3ea5e1d2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bfa1cc7f31c97f229456239c8c3975c3ea5e1d2"],"575e66bd4b2349209027f6801184da7fc3cba13f":["55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854"],"3bfa1cc7f31c97f229456239c8c3975c3ea5e1d2":["575e66bd4b2349209027f6801184da7fc3cba13f"],"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}