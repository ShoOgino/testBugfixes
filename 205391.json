{"path":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testSolrDocumentEquals().mjava","commits":[{"id":"2aab39e9a8941dd8a50d0f9ee4d90b8ca29135d4","date":1394446722,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testSolrDocumentEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testSolrDocumentEquals() {\n\n    String randomString = TestUtil.randomSimpleString(random());\n\n    SolrDocument doc1 = new SolrDocument();\n    doc1.addField(\"foo\", randomString);\n\n    SolrDocument doc2 = new SolrDocument();\n    doc2.addField(\"foo\", randomString);\n\n    assertTrue(doc1.equals(doc2));\n\n    doc1.addField(\"foo\", \"bar\");\n\n    assertFalse(doc1.equals(doc2));\n\n    doc1 = new SolrDocument();\n    doc1.addField(\"bar\", randomString);\n\n    assertFalse(doc1.equals(doc2));\n\n    int randomInt = random().nextInt();\n    doc1 = new SolrDocument();\n    doc1.addField(\"foo\", randomInt);\n    doc2 = new SolrDocument();\n    doc2.addField(\"foo\", randomInt);\n\n    assertTrue(doc1.equals(doc2));\n\n    doc2 = new SolrDocument();\n    doc2.addField(\"bar\", randomInt);\n\n    assertFalse(doc1.equals(doc2));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testSolrDocumentEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testSolrDocumentEquals() {\n\n    String randomString = TestUtil.randomSimpleString(random());\n\n    SolrDocument doc1 = new SolrDocument();\n    doc1.addField(\"foo\", randomString);\n\n    SolrDocument doc2 = new SolrDocument();\n    doc2.addField(\"foo\", randomString);\n\n    assertTrue(doc1.equals(doc2));\n\n    doc1.addField(\"foo\", \"bar\");\n\n    assertFalse(doc1.equals(doc2));\n\n    doc1 = new SolrDocument();\n    doc1.addField(\"bar\", randomString);\n\n    assertFalse(doc1.equals(doc2));\n\n    int randomInt = random().nextInt();\n    doc1 = new SolrDocument();\n    doc1.addField(\"foo\", randomInt);\n    doc2 = new SolrDocument();\n    doc2.addField(\"foo\", randomInt);\n\n    assertTrue(doc1.equals(doc2));\n\n    doc2 = new SolrDocument();\n    doc2.addField(\"bar\", randomInt);\n\n    assertFalse(doc1.equals(doc2));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6071e662e00f61ccd046fe73a31ac6e57aaca116","date":1394797480,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testSolrDocumentEquals().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testSolrDocumentEquals().mjava","sourceNew":"  public void testSolrDocumentEquals() {\n\n    String randomString = TestUtil.randomSimpleString(random());\n\n    SolrDocument doc1 = new SolrDocument();\n    doc1.addField(\"foo\", randomString);\n\n    SolrDocument doc2 = new SolrDocument();\n    doc2.addField(\"foo\", randomString);\n\n    assertTrue(assertSolrDocumentEquals(doc1, doc2));\n\n    doc1.addField(\"foo\", \"bar\");\n\n    assertFalse(assertSolrDocumentEquals(doc1, doc2));\n\n    doc1 = new SolrDocument();\n    doc1.addField(\"bar\", randomString);\n\n    assertFalse(assertSolrDocumentEquals(doc1, doc2));\n\n    int randomInt = random().nextInt();\n    doc1 = new SolrDocument();\n    doc1.addField(\"foo\", randomInt);\n    doc2 = new SolrDocument();\n    doc2.addField(\"foo\", randomInt);\n\n    assertTrue(assertSolrDocumentEquals(doc1, doc2));\n\n    doc2 = new SolrDocument();\n    doc2.addField(\"bar\", randomInt);\n\n    assertFalse(assertSolrDocumentEquals(doc1, doc2));\n\n  }\n\n","sourceOld":"  public void testSolrDocumentEquals() {\n\n    String randomString = TestUtil.randomSimpleString(random());\n\n    SolrDocument doc1 = new SolrDocument();\n    doc1.addField(\"foo\", randomString);\n\n    SolrDocument doc2 = new SolrDocument();\n    doc2.addField(\"foo\", randomString);\n\n    assertTrue(doc1.equals(doc2));\n\n    doc1.addField(\"foo\", \"bar\");\n\n    assertFalse(doc1.equals(doc2));\n\n    doc1 = new SolrDocument();\n    doc1.addField(\"bar\", randomString);\n\n    assertFalse(doc1.equals(doc2));\n\n    int randomInt = random().nextInt();\n    doc1 = new SolrDocument();\n    doc1.addField(\"foo\", randomInt);\n    doc2 = new SolrDocument();\n    doc2.addField(\"foo\", randomInt);\n\n    assertTrue(doc1.equals(doc2));\n\n    doc2 = new SolrDocument();\n    doc2.addField(\"bar\", randomInt);\n\n    assertFalse(doc1.equals(doc2));\n\n  }\n\n","bugFix":null,"bugIntro":["3f50fec5dadda9f0c72e0e8fe342b6438178a459"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f50fec5dadda9f0c72e0e8fe342b6438178a459","date":1402575501,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testSolrDocumentEquals().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testSolrDocumentEquals().mjava","sourceNew":"  public void testSolrDocumentEquals() {\n\n    String randomString = TestUtil.randomSimpleString(random());\n\n    SolrDocument doc1 = new SolrDocument();\n    doc1.addField(\"foo\", randomString);\n\n    SolrDocument doc2 = new SolrDocument();\n    doc2.addField(\"foo\", randomString);\n\n    assertTrue(compareSolrDocument(doc1, doc2));\n\n    doc1.addField(\"foo\", \"bar\");\n\n    assertFalse(compareSolrDocument(doc1, doc2));\n\n    doc1 = new SolrDocument();\n    doc1.addField(\"bar\", randomString);\n\n    assertFalse(compareSolrDocument(doc1, doc2));\n\n    int randomInt = random().nextInt();\n    doc1 = new SolrDocument();\n    doc1.addField(\"foo\", randomInt);\n    doc2 = new SolrDocument();\n    doc2.addField(\"foo\", randomInt);\n\n    assertTrue(compareSolrDocument(doc1, doc2));\n\n    doc2 = new SolrDocument();\n    doc2.addField(\"bar\", randomInt);\n\n    assertFalse(compareSolrDocument(doc1, doc2));\n\n  }\n\n","sourceOld":"  public void testSolrDocumentEquals() {\n\n    String randomString = TestUtil.randomSimpleString(random());\n\n    SolrDocument doc1 = new SolrDocument();\n    doc1.addField(\"foo\", randomString);\n\n    SolrDocument doc2 = new SolrDocument();\n    doc2.addField(\"foo\", randomString);\n\n    assertTrue(assertSolrDocumentEquals(doc1, doc2));\n\n    doc1.addField(\"foo\", \"bar\");\n\n    assertFalse(assertSolrDocumentEquals(doc1, doc2));\n\n    doc1 = new SolrDocument();\n    doc1.addField(\"bar\", randomString);\n\n    assertFalse(assertSolrDocumentEquals(doc1, doc2));\n\n    int randomInt = random().nextInt();\n    doc1 = new SolrDocument();\n    doc1.addField(\"foo\", randomInt);\n    doc2 = new SolrDocument();\n    doc2.addField(\"foo\", randomInt);\n\n    assertTrue(assertSolrDocumentEquals(doc1, doc2));\n\n    doc2 = new SolrDocument();\n    doc2.addField(\"bar\", randomInt);\n\n    assertFalse(assertSolrDocumentEquals(doc1, doc2));\n\n  }\n\n","bugFix":["6071e662e00f61ccd046fe73a31ac6e57aaca116"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testSolrDocumentEquals().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testSolrDocumentEquals().mjava","sourceNew":"  public void testSolrDocumentEquals() {\n\n    String randomString = TestUtil.randomSimpleString(random());\n\n    SolrDocument doc1 = new SolrDocument();\n    doc1.addField(\"foo\", randomString);\n\n    SolrDocument doc2 = new SolrDocument();\n    doc2.addField(\"foo\", randomString);\n\n    assertTrue(compareSolrDocument(doc1, doc2));\n\n    doc1.addField(\"foo\", \"bar\");\n\n    assertFalse(compareSolrDocument(doc1, doc2));\n\n    doc1 = new SolrDocument();\n    doc1.addField(\"bar\", randomString);\n\n    assertFalse(compareSolrDocument(doc1, doc2));\n\n    int randomInt = random().nextInt();\n    doc1 = new SolrDocument();\n    doc1.addField(\"foo\", randomInt);\n    doc2 = new SolrDocument();\n    doc2.addField(\"foo\", randomInt);\n\n    assertTrue(compareSolrDocument(doc1, doc2));\n\n    doc2 = new SolrDocument();\n    doc2.addField(\"bar\", randomInt);\n\n    assertFalse(compareSolrDocument(doc1, doc2));\n\n  }\n\n","sourceOld":"  public void testSolrDocumentEquals() {\n\n    String randomString = TestUtil.randomSimpleString(random());\n\n    SolrDocument doc1 = new SolrDocument();\n    doc1.addField(\"foo\", randomString);\n\n    SolrDocument doc2 = new SolrDocument();\n    doc2.addField(\"foo\", randomString);\n\n    assertTrue(assertSolrDocumentEquals(doc1, doc2));\n\n    doc1.addField(\"foo\", \"bar\");\n\n    assertFalse(assertSolrDocumentEquals(doc1, doc2));\n\n    doc1 = new SolrDocument();\n    doc1.addField(\"bar\", randomString);\n\n    assertFalse(assertSolrDocumentEquals(doc1, doc2));\n\n    int randomInt = random().nextInt();\n    doc1 = new SolrDocument();\n    doc1.addField(\"foo\", randomInt);\n    doc2 = new SolrDocument();\n    doc2.addField(\"foo\", randomInt);\n\n    assertTrue(assertSolrDocumentEquals(doc1, doc2));\n\n    doc2 = new SolrDocument();\n    doc2.addField(\"bar\", randomInt);\n\n    assertFalse(assertSolrDocumentEquals(doc1, doc2));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6071e662e00f61ccd046fe73a31ac6e57aaca116":["2aab39e9a8941dd8a50d0f9ee4d90b8ca29135d4"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2aab39e9a8941dd8a50d0f9ee4d90b8ca29135d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f50fec5dadda9f0c72e0e8fe342b6438178a459":["6071e662e00f61ccd046fe73a31ac6e57aaca116"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["6071e662e00f61ccd046fe73a31ac6e57aaca116","3f50fec5dadda9f0c72e0e8fe342b6438178a459"],"2aab39e9a8941dd8a50d0f9ee4d90b8ca29135d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f50fec5dadda9f0c72e0e8fe342b6438178a459"]},"commit2Childs":{"6071e662e00f61ccd046fe73a31ac6e57aaca116":["3f50fec5dadda9f0c72e0e8fe342b6438178a459","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","2aab39e9a8941dd8a50d0f9ee4d90b8ca29135d4"],"3f50fec5dadda9f0c72e0e8fe342b6438178a459":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"2aab39e9a8941dd8a50d0f9ee4d90b8ca29135d4":["6071e662e00f61ccd046fe73a31ac6e57aaca116","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}