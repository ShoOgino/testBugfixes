{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      clusterState = client.getZkStateReader().getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n      replica = (docCollection == null) ? null : docCollection.getReplica(replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getProperty(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getProperty(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      clusterState = client.getZkStateReader().getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n      replica = (docCollection == null) ? null : docCollection.getReplica(replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getProperty(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getProperty(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      clusterState = client.getZkStateReader().getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n      replica = (docCollection == null) ? null : docCollection.getReplica(replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getProperty(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getProperty(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      clusterState = client.getZkStateReader().getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n      replica = (docCollection == null) ? null : docCollection.getReplica(replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getProperty(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getProperty(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}