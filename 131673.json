{"path":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDoc(int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDoc(int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDoc(int).mjava","sourceNew":"  SolrInputDocument parseDoc(int ev) throws IOException\n  {\n    Stack<Object> stack = new Stack<Object>();\n    Object obj = null;\n    boolean inArray = false;\n    \n    if( ev != JSONParser.OBJECT_START ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"object should already be started\" );\n    }\n    \n    while( true ) {\n      //System.out.println( ev + \"[\"+JSONParser.getEventString(ev)+\"] \"+parser.wasKey() ); //+ parser.getString() );\n\n      switch (ev) {\n        case JSONParser.STRING:\n          if( parser.wasKey() ) {\n            obj = stack.peek();\n            String v = parser.getString();\n            if( obj instanceof SolrInputField ) {\n              SolrInputField field = (SolrInputField)obj;\n              if( \"boost\".equals( v ) ) {\n                ev = parser.nextEvent();\n                if( ev != JSONParser.NUMBER &&\n                    ev != JSONParser.LONG &&  \n                    ev != JSONParser.BIGNUMBER ) {\n                  throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"boost should have number! \"+JSONParser.getEventString(ev) );\n                }\n                field.setBoost( Float.valueOf( parser.getNumberChars().toString() ) );\n              }\n              else if( \"value\".equals( v  ) ) {\n                // nothing special...\n                stack.push( field ); // so it can be popped\n              }\n              else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"invalid key: \"+v + \" [\"+ parser.getPosition()+\"]\" );\n              }\n            }\n            else if( obj instanceof SolrInputDocument ) {\n              SolrInputDocument doc = (SolrInputDocument)obj;\n              SolrInputField f = doc.get( v );\n              if( f == null ) {\n                f = new SolrInputField( v );\n                doc.put( f.getName(), f );\n              }\n              stack.push( f );\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"hymmm [\"+ parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            addValToField(stack, parser.getString(), inArray, parser);\n          }\n          break;\n\n        case JSONParser.LONG:\n        case JSONParser.NUMBER:\n        case JSONParser.BIGNUMBER:\n          addValToField(stack, parser.getNumberChars().toString(), inArray, parser);\n          break;\n          \n        case JSONParser.BOOLEAN:\n          addValToField(stack, parser.getBoolean(),inArray, parser);\n          break;\n          \n        case JSONParser.OBJECT_START:\n          if( stack.isEmpty() ) {\n            stack.push( new SolrInputDocument() );\n          }\n          else {\n            obj = stack.peek();\n            if( obj instanceof SolrInputField ) {\n              // should alreay be pushed...\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should not start new object with: \"+obj + \" [\"+ parser.getPosition()+\"]\" );\n            }\n          }\n          break;\n          \n        case JSONParser.OBJECT_END:\n          obj = stack.pop();\n          if( obj instanceof SolrInputDocument ) {\n            return (SolrInputDocument)obj;\n          }\n          else if( obj instanceof SolrInputField ) {\n            // should already be pushed...\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should not start new object with: \"+obj + \" [\"+ parser.getPosition()+\"]\" );\n          }\n          break;\n\n        case JSONParser.ARRAY_START:\n          inArray = true;\n          break;\n          \n        case JSONParser.ARRAY_END:\n          inArray = false;\n          stack.pop(); // the val should have done it...\n          break;\n          \n        default:\n          System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n          break;\n      }\n\n      ev = parser.nextEvent();\n      if( ev == JSONParser.EOF ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should finish doc first!\" );\n      }\n    }\n  }\n\n","sourceOld":"  SolrInputDocument parseDoc(int ev) throws IOException\n  {\n    Stack<Object> stack = new Stack<Object>();\n    Object obj = null;\n    boolean inArray = false;\n    \n    if( ev != JSONParser.OBJECT_START ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"object should already be started\" );\n    }\n    \n    while( true ) {\n      //System.out.println( ev + \"[\"+JSONParser.getEventString(ev)+\"] \"+parser.wasKey() ); //+ parser.getString() );\n\n      switch (ev) {\n        case JSONParser.STRING:\n          if( parser.wasKey() ) {\n            obj = stack.peek();\n            String v = parser.getString();\n            if( obj instanceof SolrInputField ) {\n              SolrInputField field = (SolrInputField)obj;\n              if( \"boost\".equals( v ) ) {\n                ev = parser.nextEvent();\n                if( ev != JSONParser.NUMBER &&\n                    ev != JSONParser.LONG &&  \n                    ev != JSONParser.BIGNUMBER ) {\n                  throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"boost should have number! \"+JSONParser.getEventString(ev) );\n                }\n                field.setBoost( Float.valueOf( parser.getNumberChars().toString() ) );\n              }\n              else if( \"value\".equals( v  ) ) {\n                // nothing special...\n                stack.push( field ); // so it can be popped\n              }\n              else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"invalid key: \"+v + \" [\"+ parser.getPosition()+\"]\" );\n              }\n            }\n            else if( obj instanceof SolrInputDocument ) {\n              SolrInputDocument doc = (SolrInputDocument)obj;\n              SolrInputField f = doc.get( v );\n              if( f == null ) {\n                f = new SolrInputField( v );\n                doc.put( f.getName(), f );\n              }\n              stack.push( f );\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"hymmm [\"+ parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            addValToField(stack, parser.getString(), inArray, parser);\n          }\n          break;\n\n        case JSONParser.LONG:\n        case JSONParser.NUMBER:\n        case JSONParser.BIGNUMBER:\n          addValToField(stack, parser.getNumberChars().toString(), inArray, parser);\n          break;\n          \n        case JSONParser.BOOLEAN:\n          addValToField(stack, parser.getBoolean(),inArray, parser);\n          break;\n          \n        case JSONParser.OBJECT_START:\n          if( stack.isEmpty() ) {\n            stack.push( new SolrInputDocument() );\n          }\n          else {\n            obj = stack.peek();\n            if( obj instanceof SolrInputField ) {\n              // should alreay be pushed...\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should not start new object with: \"+obj + \" [\"+ parser.getPosition()+\"]\" );\n            }\n          }\n          break;\n          \n        case JSONParser.OBJECT_END:\n          obj = stack.pop();\n          if( obj instanceof SolrInputDocument ) {\n            return (SolrInputDocument)obj;\n          }\n          else if( obj instanceof SolrInputField ) {\n            // should already be pushed...\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should not start new object with: \"+obj + \" [\"+ parser.getPosition()+\"]\" );\n          }\n          break;\n\n        case JSONParser.ARRAY_START:\n          inArray = true;\n          break;\n          \n        case JSONParser.ARRAY_END:\n          inArray = false;\n          stack.pop(); // the val should have done it...\n          break;\n          \n        default:\n          System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n          break;\n      }\n\n      ev = parser.nextEvent();\n      if( ev == JSONParser.EOF ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should finish doc first!\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDoc(int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDoc(int).mjava","sourceNew":"  SolrInputDocument parseDoc(int ev) throws IOException\n  {\n    Stack<Object> stack = new Stack<Object>();\n    Object obj = null;\n    boolean inArray = false;\n    \n    if( ev != JSONParser.OBJECT_START ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"object should already be started\" );\n    }\n    \n    while( true ) {\n      //System.out.println( ev + \"[\"+JSONParser.getEventString(ev)+\"] \"+parser.wasKey() ); //+ parser.getString() );\n\n      switch (ev) {\n        case JSONParser.STRING:\n          if( parser.wasKey() ) {\n            obj = stack.peek();\n            String v = parser.getString();\n            if( obj instanceof SolrInputField ) {\n              SolrInputField field = (SolrInputField)obj;\n              if( \"boost\".equals( v ) ) {\n                ev = parser.nextEvent();\n                if( ev != JSONParser.NUMBER &&\n                    ev != JSONParser.LONG &&  \n                    ev != JSONParser.BIGNUMBER ) {\n                  throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"boost should have number! \"+JSONParser.getEventString(ev) );\n                }\n                field.setBoost( Float.valueOf( parser.getNumberChars().toString() ) );\n              }\n              else if( \"value\".equals( v  ) ) {\n                // nothing special...\n                stack.push( field ); // so it can be popped\n              }\n              else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"invalid key: \"+v + \" [\"+ parser.getPosition()+\"]\" );\n              }\n            }\n            else if( obj instanceof SolrInputDocument ) {\n              SolrInputDocument doc = (SolrInputDocument)obj;\n              SolrInputField f = doc.get( v );\n              if( f == null ) {\n                f = new SolrInputField( v );\n                doc.put( f.getName(), f );\n              }\n              stack.push( f );\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"hymmm [\"+ parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            addValToField(stack, parser.getString(), inArray, parser);\n          }\n          break;\n\n        case JSONParser.LONG:\n        case JSONParser.NUMBER:\n        case JSONParser.BIGNUMBER:\n          addValToField(stack, parser.getNumberChars().toString(), inArray, parser);\n          break;\n          \n        case JSONParser.BOOLEAN:\n          addValToField(stack, parser.getBoolean(),inArray, parser);\n          break;\n          \n        case JSONParser.OBJECT_START:\n          if( stack.isEmpty() ) {\n            stack.push( new SolrInputDocument() );\n          }\n          else {\n            obj = stack.peek();\n            if( obj instanceof SolrInputField ) {\n              // should alreay be pushed...\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should not start new object with: \"+obj + \" [\"+ parser.getPosition()+\"]\" );\n            }\n          }\n          break;\n          \n        case JSONParser.OBJECT_END:\n          obj = stack.pop();\n          if( obj instanceof SolrInputDocument ) {\n            return (SolrInputDocument)obj;\n          }\n          else if( obj instanceof SolrInputField ) {\n            // should already be pushed...\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should not start new object with: \"+obj + \" [\"+ parser.getPosition()+\"]\" );\n          }\n          break;\n\n        case JSONParser.ARRAY_START:\n          inArray = true;\n          break;\n          \n        case JSONParser.ARRAY_END:\n          inArray = false;\n          stack.pop(); // the val should have done it...\n          break;\n          \n        default:\n          System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n          break;\n      }\n\n      ev = parser.nextEvent();\n      if( ev == JSONParser.EOF ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should finish doc first!\" );\n      }\n    }\n  }\n\n","sourceOld":"  SolrInputDocument parseDoc(int ev) throws IOException\n  {\n    Stack<Object> stack = new Stack<Object>();\n    Object obj = null;\n    boolean inArray = false;\n    \n    if( ev != JSONParser.OBJECT_START ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"object should already be started\" );\n    }\n    \n    while( true ) {\n      //System.out.println( ev + \"[\"+JSONParser.getEventString(ev)+\"] \"+parser.wasKey() ); //+ parser.getString() );\n\n      switch (ev) {\n        case JSONParser.STRING:\n          if( parser.wasKey() ) {\n            obj = stack.peek();\n            String v = parser.getString();\n            if( obj instanceof SolrInputField ) {\n              SolrInputField field = (SolrInputField)obj;\n              if( \"boost\".equals( v ) ) {\n                ev = parser.nextEvent();\n                if( ev != JSONParser.NUMBER &&\n                    ev != JSONParser.LONG &&  \n                    ev != JSONParser.BIGNUMBER ) {\n                  throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"boost should have number! \"+JSONParser.getEventString(ev) );\n                }\n                field.setBoost( Float.valueOf( parser.getNumberChars().toString() ) );\n              }\n              else if( \"value\".equals( v  ) ) {\n                // nothing special...\n                stack.push( field ); // so it can be popped\n              }\n              else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"invalid key: \"+v + \" [\"+ parser.getPosition()+\"]\" );\n              }\n            }\n            else if( obj instanceof SolrInputDocument ) {\n              SolrInputDocument doc = (SolrInputDocument)obj;\n              SolrInputField f = doc.get( v );\n              if( f == null ) {\n                f = new SolrInputField( v );\n                doc.put( f.getName(), f );\n              }\n              stack.push( f );\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"hymmm [\"+ parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            addValToField(stack, parser.getString(), inArray, parser);\n          }\n          break;\n\n        case JSONParser.LONG:\n        case JSONParser.NUMBER:\n        case JSONParser.BIGNUMBER:\n          addValToField(stack, parser.getNumberChars().toString(), inArray, parser);\n          break;\n          \n        case JSONParser.BOOLEAN:\n          addValToField(stack, parser.getBoolean(),inArray, parser);\n          break;\n          \n        case JSONParser.OBJECT_START:\n          if( stack.isEmpty() ) {\n            stack.push( new SolrInputDocument() );\n          }\n          else {\n            obj = stack.peek();\n            if( obj instanceof SolrInputField ) {\n              // should alreay be pushed...\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should not start new object with: \"+obj + \" [\"+ parser.getPosition()+\"]\" );\n            }\n          }\n          break;\n          \n        case JSONParser.OBJECT_END:\n          obj = stack.pop();\n          if( obj instanceof SolrInputDocument ) {\n            return (SolrInputDocument)obj;\n          }\n          else if( obj instanceof SolrInputField ) {\n            // should already be pushed...\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should not start new object with: \"+obj + \" [\"+ parser.getPosition()+\"]\" );\n          }\n          break;\n\n        case JSONParser.ARRAY_START:\n          inArray = true;\n          break;\n          \n        case JSONParser.ARRAY_END:\n          inArray = false;\n          stack.pop(); // the val should have done it...\n          break;\n          \n        default:\n          System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n          break;\n      }\n\n      ev = parser.nextEvent();\n      if( ev == JSONParser.EOF ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should finish doc first!\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDoc(int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDoc(int).mjava","sourceNew":"  SolrInputDocument parseDoc(int ev) throws IOException\n  {\n    Stack<Object> stack = new Stack<Object>();\n    Object obj = null;\n    boolean inArray = false;\n    \n    if( ev != JSONParser.OBJECT_START ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"object should already be started\" );\n    }\n    \n    while( true ) {\n      //System.out.println( ev + \"[\"+JSONParser.getEventString(ev)+\"] \"+parser.wasKey() ); //+ parser.getString() );\n\n      switch (ev) {\n        case JSONParser.STRING:\n          if( parser.wasKey() ) {\n            obj = stack.peek();\n            String v = parser.getString();\n            if( obj instanceof SolrInputField ) {\n              SolrInputField field = (SolrInputField)obj;\n              if( \"boost\".equals( v ) ) {\n                ev = parser.nextEvent();\n                if( ev != JSONParser.NUMBER &&\n                    ev != JSONParser.LONG &&  \n                    ev != JSONParser.BIGNUMBER ) {\n                  throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"boost should have number! \"+JSONParser.getEventString(ev) );\n                }\n                field.setBoost( Float.valueOf( parser.getNumberChars().toString() ) );\n              }\n              else if( \"value\".equals( v  ) ) {\n                // nothing special...\n                stack.push( field ); // so it can be popped\n              }\n              else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"invalid key: \"+v + \" [\"+ parser.getPosition()+\"]\" );\n              }\n            }\n            else if( obj instanceof SolrInputDocument ) {\n              SolrInputDocument doc = (SolrInputDocument)obj;\n              SolrInputField f = doc.get( v );\n              if( f == null ) {\n                f = new SolrInputField( v );\n                doc.put( f.getName(), f );\n              }\n              stack.push( f );\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"hymmm [\"+ parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            addValToField(stack, parser.getString(), inArray, parser);\n          }\n          break;\n\n        case JSONParser.LONG:\n        case JSONParser.NUMBER:\n        case JSONParser.BIGNUMBER:\n          addValToField(stack, parser.getNumberChars().toString(), inArray, parser);\n          break;\n          \n        case JSONParser.BOOLEAN:\n          addValToField(stack, parser.getBoolean(),inArray, parser);\n          break;\n          \n        case JSONParser.OBJECT_START:\n          if( stack.isEmpty() ) {\n            stack.push( new SolrInputDocument() );\n          }\n          else {\n            obj = stack.peek();\n            if( obj instanceof SolrInputField ) {\n              // should alreay be pushed...\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should not start new object with: \"+obj + \" [\"+ parser.getPosition()+\"]\" );\n            }\n          }\n          break;\n          \n        case JSONParser.OBJECT_END:\n          obj = stack.pop();\n          if( obj instanceof SolrInputDocument ) {\n            return (SolrInputDocument)obj;\n          }\n          else if( obj instanceof SolrInputField ) {\n            // should already be pushed...\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should not start new object with: \"+obj + \" [\"+ parser.getPosition()+\"]\" );\n          }\n          break;\n\n        case JSONParser.ARRAY_START:\n          inArray = true;\n          break;\n          \n        case JSONParser.ARRAY_END:\n          inArray = false;\n          stack.pop(); // the val should have done it...\n          break;\n          \n        default:\n          System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n          break;\n      }\n\n      ev = parser.nextEvent();\n      if( ev == JSONParser.EOF ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should finish doc first!\" );\n      }\n    }\n  }\n\n","sourceOld":"  SolrInputDocument parseDoc(int ev) throws IOException\n  {\n    Stack<Object> stack = new Stack<Object>();\n    Object obj = null;\n    boolean inArray = false;\n    \n    if( ev != JSONParser.OBJECT_START ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"object should already be started\" );\n    }\n    \n    while( true ) {\n      //System.out.println( ev + \"[\"+JSONParser.getEventString(ev)+\"] \"+parser.wasKey() ); //+ parser.getString() );\n\n      switch (ev) {\n        case JSONParser.STRING:\n          if( parser.wasKey() ) {\n            obj = stack.peek();\n            String v = parser.getString();\n            if( obj instanceof SolrInputField ) {\n              SolrInputField field = (SolrInputField)obj;\n              if( \"boost\".equals( v ) ) {\n                ev = parser.nextEvent();\n                if( ev != JSONParser.NUMBER &&\n                    ev != JSONParser.LONG &&  \n                    ev != JSONParser.BIGNUMBER ) {\n                  throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"boost should have number! \"+JSONParser.getEventString(ev) );\n                }\n                field.setBoost( Float.valueOf( parser.getNumberChars().toString() ) );\n              }\n              else if( \"value\".equals( v  ) ) {\n                // nothing special...\n                stack.push( field ); // so it can be popped\n              }\n              else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"invalid key: \"+v + \" [\"+ parser.getPosition()+\"]\" );\n              }\n            }\n            else if( obj instanceof SolrInputDocument ) {\n              SolrInputDocument doc = (SolrInputDocument)obj;\n              SolrInputField f = doc.get( v );\n              if( f == null ) {\n                f = new SolrInputField( v );\n                doc.put( f.getName(), f );\n              }\n              stack.push( f );\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"hymmm [\"+ parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            addValToField(stack, parser.getString(), inArray, parser);\n          }\n          break;\n\n        case JSONParser.LONG:\n        case JSONParser.NUMBER:\n        case JSONParser.BIGNUMBER:\n          addValToField(stack, parser.getNumberChars().toString(), inArray, parser);\n          break;\n          \n        case JSONParser.BOOLEAN:\n          addValToField(stack, parser.getBoolean(),inArray, parser);\n          break;\n          \n        case JSONParser.OBJECT_START:\n          if( stack.isEmpty() ) {\n            stack.push( new SolrInputDocument() );\n          }\n          else {\n            obj = stack.peek();\n            if( obj instanceof SolrInputField ) {\n              // should alreay be pushed...\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should not start new object with: \"+obj + \" [\"+ parser.getPosition()+\"]\" );\n            }\n          }\n          break;\n          \n        case JSONParser.OBJECT_END:\n          obj = stack.pop();\n          if( obj instanceof SolrInputDocument ) {\n            return (SolrInputDocument)obj;\n          }\n          else if( obj instanceof SolrInputField ) {\n            // should already be pushed...\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should not start new object with: \"+obj + \" [\"+ parser.getPosition()+\"]\" );\n          }\n          break;\n\n        case JSONParser.ARRAY_START:\n          inArray = true;\n          break;\n          \n        case JSONParser.ARRAY_END:\n          inArray = false;\n          stack.pop(); // the val should have done it...\n          break;\n          \n        default:\n          System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n          break;\n      }\n\n      ev = parser.nextEvent();\n      if( ev == JSONParser.EOF ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should finish doc first!\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd5c2a6d346a6df2ab9e4081a999fdcbdab28974","date":1314737184,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDoc(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDoc(int).mjava","sourceNew":"  SolrInputDocument parseDoc(int ev) throws IOException\n  {\n    Stack<Object> stack = new Stack<Object>();\n    Object obj = null;\n    boolean inArray = false;\n\n    if( ev != JSONParser.OBJECT_START ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"object should already be started\" );\n    }\n    \n    while( true ) {\n      //System.out.println( ev + \"[\"+JSONParser.getEventString(ev)+\"] \"+parser.wasKey() ); //+ parser.getString() );\n\n      switch (ev) {\n        case JSONParser.STRING:\n          if( parser.wasKey() ) {\n            obj = stack.peek();\n            String v = parser.getString();\n            if( obj instanceof SolrInputField ) {\n              SolrInputField field = (SolrInputField)obj;\n              if( \"boost\".equals( v ) ) {\n                ev = parser.nextEvent();\n                if( ev != JSONParser.NUMBER &&\n                    ev != JSONParser.LONG &&  \n                    ev != JSONParser.BIGNUMBER ) {\n                  throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"boost should have number! \"+JSONParser.getEventString(ev) );\n                }\n                field.setBoost((float)parser.getDouble());\n              }\n              else if( \"value\".equals( v  ) ) {\n                // nothing special...\n                stack.push( field ); // so it can be popped\n              }\n              else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"invalid key: \"+v + \" [\"+ parser.getPosition()+\"]\" );\n              }\n            }\n            else if( obj instanceof SolrInputDocument ) {\n              SolrInputDocument doc = (SolrInputDocument)obj;\n              SolrInputField f = doc.get( v );\n              if( f == null ) {\n                f = new SolrInputField( v );\n                doc.put( f.getName(), f );\n              }\n              stack.push( f );\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"hymmm [\"+ parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            addValToField(stack, parser.getString(), inArray, parser);\n          }\n          break;\n\n        case JSONParser.LONG:\n        case JSONParser.NUMBER:\n        case JSONParser.BIGNUMBER:\n          addValToField(stack, parser.getNumberChars().toString(), inArray, parser);\n          break;\n          \n        case JSONParser.BOOLEAN:\n          addValToField(stack, parser.getBoolean(),inArray, parser);\n          break;\n\n        case JSONParser.NULL:\n          parser.getNull();\n          /*** if we wanted to remove the field from the document now...\n          if (!inArray) {\n            Object o = stack.peek();\n            // if null was only value in the field, then remove the field\n            if (o instanceof SolrInputField) {\n              SolrInputField sif = (SolrInputField)o;\n              if (sif.getValueCount() == 0) {\n                sdoc.remove(sif.getName());\n              }\n            }\n          }\n          ***/\n\n          addValToField(stack, null, inArray, parser);\n          break;\n\n        case JSONParser.OBJECT_START:\n          if( stack.isEmpty() ) {\n            stack.push( new SolrInputDocument() );\n          }\n          else {\n            obj = stack.peek();\n            if( obj instanceof SolrInputField ) {\n              // should alreay be pushed...\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should not start new object with: \"+obj + \" [\"+ parser.getPosition()+\"]\" );\n            }\n          }\n          break;\n        case JSONParser.OBJECT_END:\n          obj = stack.pop();\n          if( obj instanceof SolrInputDocument ) {\n            return (SolrInputDocument)obj;\n          }\n          else if( obj instanceof SolrInputField ) {\n            // should already be pushed...\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should not start new object with: \"+obj + \" [\"+ parser.getPosition()+\"]\" );\n          }\n          break;\n\n        case JSONParser.ARRAY_START:\n          inArray = true;\n          break;\n          \n        case JSONParser.ARRAY_END:\n          inArray = false;\n          stack.pop(); // the val should have done it...\n          break;\n          \n        default:\n          System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n          break;\n      }\n\n      ev = parser.nextEvent();\n      if( ev == JSONParser.EOF ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should finish doc first!\" );\n      }\n    }\n  }\n\n","sourceOld":"  SolrInputDocument parseDoc(int ev) throws IOException\n  {\n    Stack<Object> stack = new Stack<Object>();\n    Object obj = null;\n    boolean inArray = false;\n    \n    if( ev != JSONParser.OBJECT_START ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"object should already be started\" );\n    }\n    \n    while( true ) {\n      //System.out.println( ev + \"[\"+JSONParser.getEventString(ev)+\"] \"+parser.wasKey() ); //+ parser.getString() );\n\n      switch (ev) {\n        case JSONParser.STRING:\n          if( parser.wasKey() ) {\n            obj = stack.peek();\n            String v = parser.getString();\n            if( obj instanceof SolrInputField ) {\n              SolrInputField field = (SolrInputField)obj;\n              if( \"boost\".equals( v ) ) {\n                ev = parser.nextEvent();\n                if( ev != JSONParser.NUMBER &&\n                    ev != JSONParser.LONG &&  \n                    ev != JSONParser.BIGNUMBER ) {\n                  throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"boost should have number! \"+JSONParser.getEventString(ev) );\n                }\n                field.setBoost( Float.valueOf( parser.getNumberChars().toString() ) );\n              }\n              else if( \"value\".equals( v  ) ) {\n                // nothing special...\n                stack.push( field ); // so it can be popped\n              }\n              else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"invalid key: \"+v + \" [\"+ parser.getPosition()+\"]\" );\n              }\n            }\n            else if( obj instanceof SolrInputDocument ) {\n              SolrInputDocument doc = (SolrInputDocument)obj;\n              SolrInputField f = doc.get( v );\n              if( f == null ) {\n                f = new SolrInputField( v );\n                doc.put( f.getName(), f );\n              }\n              stack.push( f );\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"hymmm [\"+ parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            addValToField(stack, parser.getString(), inArray, parser);\n          }\n          break;\n\n        case JSONParser.LONG:\n        case JSONParser.NUMBER:\n        case JSONParser.BIGNUMBER:\n          addValToField(stack, parser.getNumberChars().toString(), inArray, parser);\n          break;\n          \n        case JSONParser.BOOLEAN:\n          addValToField(stack, parser.getBoolean(),inArray, parser);\n          break;\n          \n        case JSONParser.OBJECT_START:\n          if( stack.isEmpty() ) {\n            stack.push( new SolrInputDocument() );\n          }\n          else {\n            obj = stack.peek();\n            if( obj instanceof SolrInputField ) {\n              // should alreay be pushed...\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should not start new object with: \"+obj + \" [\"+ parser.getPosition()+\"]\" );\n            }\n          }\n          break;\n          \n        case JSONParser.OBJECT_END:\n          obj = stack.pop();\n          if( obj instanceof SolrInputDocument ) {\n            return (SolrInputDocument)obj;\n          }\n          else if( obj instanceof SolrInputField ) {\n            // should already be pushed...\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should not start new object with: \"+obj + \" [\"+ parser.getPosition()+\"]\" );\n          }\n          break;\n\n        case JSONParser.ARRAY_START:\n          inArray = true;\n          break;\n          \n        case JSONParser.ARRAY_END:\n          inArray = false;\n          stack.pop(); // the val should have done it...\n          break;\n          \n        default:\n          System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n          break;\n      }\n\n      ev = parser.nextEvent();\n      if( ev == JSONParser.EOF ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should finish doc first!\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bea3922196318026c4274f2013416acb60c691e","date":1336496433,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDoc(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDoc(int).mjava","sourceNew":"  private SolrInputDocument parseDoc(int ev) throws IOException {\n    assert ev == JSONParser.OBJECT_START;\n\n    SolrInputDocument sdoc = new SolrInputDocument();\n    for (;;) {\n      SolrInputField sif = parseField();\n      if (sif == null) return sdoc;\n      SolrInputField prev = sdoc.put(sif.getName(), sif);\n      if (prev != null) {\n        // blech - repeated keys\n        sif.addValue(prev.getValue(), prev.getBoost());\n      }\n    }\n  }\n\n","sourceOld":"  SolrInputDocument parseDoc(int ev) throws IOException\n  {\n    Stack<Object> stack = new Stack<Object>();\n    Object obj = null;\n    boolean inArray = false;\n\n    if( ev != JSONParser.OBJECT_START ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"object should already be started\" );\n    }\n    \n    while( true ) {\n      //System.out.println( ev + \"[\"+JSONParser.getEventString(ev)+\"] \"+parser.wasKey() ); //+ parser.getString() );\n\n      switch (ev) {\n        case JSONParser.STRING:\n          if( parser.wasKey() ) {\n            obj = stack.peek();\n            String v = parser.getString();\n            if( obj instanceof SolrInputField ) {\n              SolrInputField field = (SolrInputField)obj;\n              if( \"boost\".equals( v ) ) {\n                ev = parser.nextEvent();\n                if( ev != JSONParser.NUMBER &&\n                    ev != JSONParser.LONG &&  \n                    ev != JSONParser.BIGNUMBER ) {\n                  throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"boost should have number! \"+JSONParser.getEventString(ev) );\n                }\n                field.setBoost((float)parser.getDouble());\n              }\n              else if( \"value\".equals( v  ) ) {\n                // nothing special...\n                stack.push( field ); // so it can be popped\n              }\n              else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"invalid key: \"+v + \" [\"+ parser.getPosition()+\"]\" );\n              }\n            }\n            else if( obj instanceof SolrInputDocument ) {\n              SolrInputDocument doc = (SolrInputDocument)obj;\n              SolrInputField f = doc.get( v );\n              if( f == null ) {\n                f = new SolrInputField( v );\n                doc.put( f.getName(), f );\n              }\n              stack.push( f );\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"hymmm [\"+ parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            addValToField(stack, parser.getString(), inArray, parser);\n          }\n          break;\n\n        case JSONParser.LONG:\n        case JSONParser.NUMBER:\n        case JSONParser.BIGNUMBER:\n          addValToField(stack, parser.getNumberChars().toString(), inArray, parser);\n          break;\n          \n        case JSONParser.BOOLEAN:\n          addValToField(stack, parser.getBoolean(),inArray, parser);\n          break;\n\n        case JSONParser.NULL:\n          parser.getNull();\n          /*** if we wanted to remove the field from the document now...\n          if (!inArray) {\n            Object o = stack.peek();\n            // if null was only value in the field, then remove the field\n            if (o instanceof SolrInputField) {\n              SolrInputField sif = (SolrInputField)o;\n              if (sif.getValueCount() == 0) {\n                sdoc.remove(sif.getName());\n              }\n            }\n          }\n          ***/\n\n          addValToField(stack, null, inArray, parser);\n          break;\n\n        case JSONParser.OBJECT_START:\n          if( stack.isEmpty() ) {\n            stack.push( new SolrInputDocument() );\n          }\n          else {\n            obj = stack.peek();\n            if( obj instanceof SolrInputField ) {\n              // should alreay be pushed...\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should not start new object with: \"+obj + \" [\"+ parser.getPosition()+\"]\" );\n            }\n          }\n          break;\n        case JSONParser.OBJECT_END:\n          obj = stack.pop();\n          if( obj instanceof SolrInputDocument ) {\n            return (SolrInputDocument)obj;\n          }\n          else if( obj instanceof SolrInputField ) {\n            // should already be pushed...\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should not start new object with: \"+obj + \" [\"+ parser.getPosition()+\"]\" );\n          }\n          break;\n\n        case JSONParser.ARRAY_START:\n          inArray = true;\n          break;\n          \n        case JSONParser.ARRAY_END:\n          inArray = false;\n          stack.pop(); // the val should have done it...\n          break;\n          \n        default:\n          System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n          break;\n      }\n\n      ev = parser.nextEvent();\n      if( ev == JSONParser.EOF ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"should finish doc first!\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDoc(int).mjava","sourceNew":null,"sourceOld":"  private SolrInputDocument parseDoc(int ev) throws IOException {\n    assert ev == JSONParser.OBJECT_START;\n\n    SolrInputDocument sdoc = new SolrInputDocument();\n    for (;;) {\n      SolrInputField sif = parseField();\n      if (sif == null) return sdoc;\n      SolrInputField prev = sdoc.put(sif.getName(), sif);\n      if (prev != null) {\n        // blech - repeated keys\n        sif.addValue(prev.getValue(), prev.getBoost());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042e4d934397657ba04c82b46cc5665076bc5c58":["1bea3922196318026c4274f2013416acb60c691e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"dd5c2a6d346a6df2ab9e4081a999fdcbdab28974":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1bea3922196318026c4274f2013416acb60c691e":["dd5c2a6d346a6df2ab9e4081a999fdcbdab28974"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["042e4d934397657ba04c82b46cc5665076bc5c58"]},"commit2Childs":{"042e4d934397657ba04c82b46cc5665076bc5c58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["dd5c2a6d346a6df2ab9e4081a999fdcbdab28974"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"dd5c2a6d346a6df2ab9e4081a999fdcbdab28974":["1bea3922196318026c4274f2013416acb60c691e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1bea3922196318026c4274f2013416acb60c691e":["042e4d934397657ba04c82b46cc5665076bc5c58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}