{"path":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfoPerCommit]).mjava","commits":[{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfoPerCommit]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfo]).mjava","sourceNew":"    public OneMerge(List<SegmentInfoPerCommit> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<SegmentInfoPerCommit>(segments);\n      int count = 0;\n      for(SegmentInfoPerCommit info : segments) {\n        count += info.info.docCount;\n      }\n      totalDocCount = count;\n    }\n\n","sourceOld":"    public OneMerge(List<SegmentInfo> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<SegmentInfo>(segments);\n      int count = 0;\n      for(SegmentInfo info : segments) {\n        count += info.docCount;\n      }\n      totalDocCount = count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"203d7d3cb7712e10ef33009a63247ae40c302d7a","date":1337798111,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfoPerCommit]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfoPerCommit]).mjava","sourceNew":"    public OneMerge(List<SegmentInfoPerCommit> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<SegmentInfoPerCommit>(segments);\n      int count = 0;\n      for(SegmentInfoPerCommit info : segments) {\n        count += info.info.getDocCount();\n      }\n      totalDocCount = count;\n    }\n\n","sourceOld":"    public OneMerge(List<SegmentInfoPerCommit> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<SegmentInfoPerCommit>(segments);\n      int count = 0;\n      for(SegmentInfoPerCommit info : segments) {\n        count += info.info.docCount;\n      }\n      totalDocCount = count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfoPerCommit]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfo]).mjava","sourceNew":"    public OneMerge(List<SegmentInfoPerCommit> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<SegmentInfoPerCommit>(segments);\n      int count = 0;\n      for(SegmentInfoPerCommit info : segments) {\n        count += info.info.getDocCount();\n      }\n      totalDocCount = count;\n    }\n\n","sourceOld":"    public OneMerge(List<SegmentInfo> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<SegmentInfo>(segments);\n      int count = 0;\n      for(SegmentInfo info : segments) {\n        count += info.docCount;\n      }\n      totalDocCount = count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c14aed69f37b57db63b1fccc0740b17060a08f2b","date":1348227091,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfoPerCommit]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfoPerCommit]).mjava","sourceNew":"    /** Sole constructor.\n     * @param segments List of {@link SegmentInfoPerCommit}s\n     *        to be merged. */\n    public OneMerge(List<SegmentInfoPerCommit> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<SegmentInfoPerCommit>(segments);\n      int count = 0;\n      for(SegmentInfoPerCommit info : segments) {\n        count += info.info.getDocCount();\n      }\n      totalDocCount = count;\n    }\n\n","sourceOld":"    public OneMerge(List<SegmentInfoPerCommit> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<SegmentInfoPerCommit>(segments);\n      int count = 0;\n      for(SegmentInfoPerCommit info : segments) {\n        count += info.info.getDocCount();\n      }\n      totalDocCount = count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfoPerCommit]).mjava","sourceNew":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<SegmentCommitInfo>(segments);\n      int count = 0;\n      for(SegmentCommitInfo info : segments) {\n        count += info.info.getDocCount();\n      }\n      totalDocCount = count;\n    }\n\n","sourceOld":"    /** Sole constructor.\n     * @param segments List of {@link SegmentInfoPerCommit}s\n     *        to be merged. */\n    public OneMerge(List<SegmentInfoPerCommit> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<SegmentInfoPerCommit>(segments);\n      int count = 0;\n      for(SegmentInfoPerCommit info : segments) {\n        count += info.info.getDocCount();\n      }\n      totalDocCount = count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["c14aed69f37b57db63b1fccc0740b17060a08f2b"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","203d7d3cb7712e10ef33009a63247ae40c302d7a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c14aed69f37b57db63b1fccc0740b17060a08f2b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["c14aed69f37b57db63b1fccc0740b17060a08f2b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["203d7d3cb7712e10ef33009a63247ae40c302d7a"],"c14aed69f37b57db63b1fccc0740b17060a08f2b":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}