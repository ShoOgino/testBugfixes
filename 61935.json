{"path":"src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","commits":[{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      if (compressed)\n        doc.add(new Field(fi.name, uncompress(b), Field.Store.COMPRESS));\n      else\n        doc.add(new Field(fi.name, b, Field.Store.YES));\n\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      Fieldable f;\n      if (compressed) {\n        store = Field.Store.COMPRESS;\n        int toRead = fieldsStream.readVInt();\n\n        final byte[] b = new byte[toRead];\n        fieldsStream.readBytes(b, 0, b.length);\n        f = new Field(fi.name,      // field name\n                new String(uncompress(b), \"UTF-8\"), // uncompress the value and add as string\n                store,\n                index,\n                termVector);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        f = new Field(fi.name,     // name\n                fieldsStream.readString(), // read value\n                store,\n                index,\n                termVector);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      doc.add(f);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df","1b54a9bc667895a2095a886184bf69a3179e63df","42f6b4065cdaf7d1be530c926dc327494bee4ffa","42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      if (compressed)\n        doc.add(new Field(fi.name, uncompress(b), Field.Store.COMPRESS));\n      else\n        doc.add(new Field(fi.name, b, Field.Store.YES));\n\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      Fieldable f;\n      if (compressed) {\n        store = Field.Store.COMPRESS;\n        int toRead = fieldsStream.readVInt();\n\n        final byte[] b = new byte[toRead];\n        fieldsStream.readBytes(b, 0, b.length);\n        f = new Field(fi.name,      // field name\n                new String(uncompress(b), \"UTF-8\"), // uncompress the value and add as string\n                store,\n                index,\n                termVector);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        f = new Field(fi.name,     // name\n                fieldsStream.readString(), // read value\n                store,\n                index,\n                termVector);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      doc.add(f);\n    }\n  }\n\n","sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      if (compressed)\n        doc.add(new Field(fi.name, uncompress(b), Field.Store.COMPRESS));\n      else\n        doc.add(new Field(fi.name, b, Field.Store.YES));\n\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      Fieldable f;\n      if (compressed) {\n        store = Field.Store.COMPRESS;\n        int toRead = fieldsStream.readVInt();\n\n        final byte[] b = new byte[toRead];\n        fieldsStream.readBytes(b, 0, b.length);\n        f = new Field(fi.name,      // field name\n                new String(uncompress(b), \"UTF-8\"), // uncompress the value and add as string\n                store,\n                index,\n                termVector);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        f = new Field(fi.name,     // name\n                fieldsStream.readString(), // read value\n                store,\n                index,\n                termVector);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      doc.add(f);\n    }\n  }\n\n","bugFix":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42f6b4065cdaf7d1be530c926dc327494bee4ffa","date":1239273470,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      if (compressed)\n        doc.add(new Field(fi.name, uncompress(b), Field.Store.COMPRESS));\n      else\n        doc.add(new Field(fi.name, b, Field.Store.YES));\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      Fieldable f;\n      if (compressed) {\n        store = Field.Store.COMPRESS;\n        int toRead = fieldsStream.readVInt();\n\n        final byte[] b = new byte[toRead];\n        fieldsStream.readBytes(b, 0, b.length);\n        f = new Field(fi.name,      // field name\n                new String(uncompress(b), \"UTF-8\"), // uncompress the value and add as string\n                store,\n                index,\n                termVector);\n        f.setOmitTf(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        f = new Field(fi.name,     // name\n                fieldsStream.readString(), // read value\n                store,\n                index,\n                termVector);\n        f.setOmitTf(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      doc.add(f);\n    }\n  }\n\n","sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      if (compressed)\n        doc.add(new Field(fi.name, uncompress(b), Field.Store.COMPRESS));\n      else\n        doc.add(new Field(fi.name, b, Field.Store.YES));\n\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      Fieldable f;\n      if (compressed) {\n        store = Field.Store.COMPRESS;\n        int toRead = fieldsStream.readVInt();\n\n        final byte[] b = new byte[toRead];\n        fieldsStream.readBytes(b, 0, b.length);\n        f = new Field(fi.name,      // field name\n                new String(uncompress(b), \"UTF-8\"), // uncompress the value and add as string\n                store,\n                index,\n                termVector);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        f = new Field(fi.name,     // name\n                fieldsStream.readString(), // read value\n                store,\n                index,\n                termVector);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      doc.add(f);\n    }\n  }\n\n","bugFix":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b07c96634c26a70c1ddde2bf4a3b64a6ea8886b","date":1239653248,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      if (compressed)\n        doc.add(new Field(fi.name, uncompress(b), Field.Store.COMPRESS));\n      else\n        doc.add(new Field(fi.name, b, Field.Store.YES));\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      Fieldable f;\n      if (compressed) {\n        store = Field.Store.COMPRESS;\n        int toRead = fieldsStream.readVInt();\n\n        final byte[] b = new byte[toRead];\n        fieldsStream.readBytes(b, 0, b.length);\n        f = new Field(fi.name,      // field name\n                false,\n                new String(uncompress(b), \"UTF-8\"), // uncompress the value and add as string\n                store,\n                index,\n                termVector);\n        f.setOmitTf(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        f = new Field(fi.name,     // name\n      \t\tfalse,\n                fieldsStream.readString(), // read value\n                store,\n                index,\n                termVector);\n        f.setOmitTf(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      doc.add(f);\n    }\n  }\n\n","sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      if (compressed)\n        doc.add(new Field(fi.name, uncompress(b), Field.Store.COMPRESS));\n      else\n        doc.add(new Field(fi.name, b, Field.Store.YES));\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      Fieldable f;\n      if (compressed) {\n        store = Field.Store.COMPRESS;\n        int toRead = fieldsStream.readVInt();\n\n        final byte[] b = new byte[toRead];\n        fieldsStream.readBytes(b, 0, b.length);\n        f = new Field(fi.name,      // field name\n                new String(uncompress(b), \"UTF-8\"), // uncompress the value and add as string\n                store,\n                index,\n                termVector);\n        f.setOmitTf(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        f = new Field(fi.name,     // name\n                fieldsStream.readString(), // read value\n                store,\n                index,\n                termVector);\n        f.setOmitTf(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      doc.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"437d1054f9dc950ab4824757a6fc0f49e17071fc","date":1240824845,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      if (compressed)\n        doc.add(new Field(fi.name, uncompress(b), Field.Store.COMPRESS));\n      else\n        doc.add(new Field(fi.name, b, Field.Store.YES));\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      AbstractField f;\n      if (compressed) {\n        store = Field.Store.COMPRESS;\n        int toRead = fieldsStream.readVInt();\n\n        final byte[] b = new byte[toRead];\n        fieldsStream.readBytes(b, 0, b.length);\n        f = new Field(fi.name,      // field name\n                false,\n                new String(uncompress(b), \"UTF-8\"), // uncompress the value and add as string\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        f = new Field(fi.name,     // name\n      \t\tfalse,\n                fieldsStream.readString(), // read value\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      doc.add(f);\n    }\n  }\n\n","sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      if (compressed)\n        doc.add(new Field(fi.name, uncompress(b), Field.Store.COMPRESS));\n      else\n        doc.add(new Field(fi.name, b, Field.Store.YES));\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      Fieldable f;\n      if (compressed) {\n        store = Field.Store.COMPRESS;\n        int toRead = fieldsStream.readVInt();\n\n        final byte[] b = new byte[toRead];\n        fieldsStream.readBytes(b, 0, b.length);\n        f = new Field(fi.name,      // field name\n                false,\n                new String(uncompress(b), \"UTF-8\"), // uncompress the value and add as string\n                store,\n                index,\n                termVector);\n        f.setOmitTf(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        f = new Field(fi.name,     // name\n      \t\tfalse,\n                fieldsStream.readString(), // read value\n                store,\n                index,\n                termVector);\n        f.setOmitTf(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      doc.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0c804f7aa477229414a7e12882af490c241f64d","date":1254963299,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      doc.add(new Field(fi.name, b, Field.Store.YES));\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      AbstractField f;\n      f = new Field(fi.name,     // name\n    \t\tfalse,\n              fieldsStream.readString(), // read value\n              store,\n              index,\n              termVector);\n      f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      f.setOmitNorms(fi.omitNorms);\n      doc.add(f);\n    }\n  }\n\n","sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      if (compressed)\n        doc.add(new Field(fi.name, uncompress(b), Field.Store.COMPRESS));\n      else\n        doc.add(new Field(fi.name, b, Field.Store.YES));\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = getIndexType(fi, tokenize);\n      Field.TermVector termVector = getTermVectorType(fi);\n\n      AbstractField f;\n      if (compressed) {\n        store = Field.Store.COMPRESS;\n        int toRead = fieldsStream.readVInt();\n\n        final byte[] b = new byte[toRead];\n        fieldsStream.readBytes(b, 0, b.length);\n        f = new Field(fi.name,      // field name\n                false,\n                new String(uncompress(b), \"UTF-8\"), // uncompress the value and add as string\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        f = new Field(fi.name,     // name\n      \t\tfalse,\n                fieldsStream.readString(), // read value\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      doc.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab50480bb5a7c7abad9762badcf87f8b69efeabe","date":1256591817,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean).mjava","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      if (compressed) {\n        doc.add(new Field(fi.name, uncompress(b), Field.Store.YES));\n      } else {\n        doc.add(new Field(fi.name, b, Field.Store.YES));\n      }\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      if (compressed) {\n        int toRead = fieldsStream.readVInt();\n\n        final byte[] b = new byte[toRead];\n        fieldsStream.readBytes(b, 0, b.length);\n        f = new Field(fi.name,      // field name\n                false,\n                new String(uncompress(b), \"UTF-8\"), // uncompress the value and add as string\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        f = new Field(fi.name,     // name\n         false,\n                fieldsStream.readString(), // read value\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      \n      doc.add(f);\n    }\n  }\n\n","sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      doc.add(new Field(fi.name, b, Field.Store.YES));\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      f = new Field(fi.name,     // name\n    \t\tfalse,\n              fieldsStream.readString(), // read value\n              store,\n              index,\n              termVector);\n      f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      f.setOmitNorms(fi.omitNorms);\n      doc.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      if (compressed) {\n        doc.add(new Field(fi.name, uncompress(b)));\n      } else {\n        doc.add(new Field(fi.name, b));\n      }\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      if (compressed) {\n        int toRead = fieldsStream.readVInt();\n\n        final byte[] b = new byte[toRead];\n        fieldsStream.readBytes(b, 0, b.length);\n        f = new Field(fi.name,      // field name\n                false,\n                new String(uncompress(b), \"UTF-8\"), // uncompress the value and add as string\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        f = new Field(fi.name,     // name\n         false,\n                fieldsStream.readString(), // read value\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      \n      doc.add(f);\n    }\n  }\n\n","sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      if (compressed) {\n        doc.add(new Field(fi.name, uncompress(b), Field.Store.YES));\n      } else {\n        doc.add(new Field(fi.name, b, Field.Store.YES));\n      }\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      if (compressed) {\n        int toRead = fieldsStream.readVInt();\n\n        final byte[] b = new byte[toRead];\n        fieldsStream.readBytes(b, 0, b.length);\n        f = new Field(fi.name,      // field name\n                false,\n                new String(uncompress(b), \"UTF-8\"), // uncompress the value and add as string\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        f = new Field(fi.name,     // name\n         false,\n                fieldsStream.readString(), // read value\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      \n      doc.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      if (compressed) {\n        doc.add(new Field(fi.name, uncompress(b)));\n      } else {\n        doc.add(new Field(fi.name, b));\n      }\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      if (compressed) {\n        int toRead = fieldsStream.readVInt();\n\n        final byte[] b = new byte[toRead];\n        fieldsStream.readBytes(b, 0, b.length);\n        f = new Field(fi.name,      // field name\n                false,\n                new String(uncompress(b), \"UTF-8\"), // uncompress the value and add as string\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        f = new Field(fi.name,     // name\n         false,\n                fieldsStream.readString(), // read value\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      \n      doc.add(f);\n    }\n  }\n\n","sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      if (compressed) {\n        doc.add(new Field(fi.name, uncompress(b)));\n      } else {\n        doc.add(new Field(fi.name, b));\n      }\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      if (compressed) {\n        int toRead = fieldsStream.readVInt();\n\n        final byte[] b = new byte[toRead];\n        fieldsStream.readBytes(b, 0, b.length);\n        f = new Field(fi.name,      // field name\n                false,\n                new String(uncompress(b), \"UTF-8\"), // uncompress the value and add as string\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        f = new Field(fi.name,     // name\n         false,\n                fieldsStream.readString(), // read value\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      \n      doc.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab50480bb5a7c7abad9762badcf87f8b69efeabe":["e0c804f7aa477229414a7e12882af490c241f64d"],"437d1054f9dc950ab4824757a6fc0f49e17071fc":["9b07c96634c26a70c1ddde2bf4a3b64a6ea8886b"],"1b54a9bc667895a2095a886184bf69a3179e63df":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"42f6b4065cdaf7d1be530c926dc327494bee4ffa":["1b54a9bc667895a2095a886184bf69a3179e63df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b07c96634c26a70c1ddde2bf4a3b64a6ea8886b":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["ab50480bb5a7c7abad9762badcf87f8b69efeabe"],"e0c804f7aa477229414a7e12882af490c241f64d":["437d1054f9dc950ab4824757a6fc0f49e17071fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"ab50480bb5a7c7abad9762badcf87f8b69efeabe":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"437d1054f9dc950ab4824757a6fc0f49e17071fc":["e0c804f7aa477229414a7e12882af490c241f64d"],"1b54a9bc667895a2095a886184bf69a3179e63df":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"42f6b4065cdaf7d1be530c926dc327494bee4ffa":["9b07c96634c26a70c1ddde2bf4a3b64a6ea8886b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"9b07c96634c26a70c1ddde2bf4a3b64a6ea8886b":["437d1054f9dc950ab4824757a6fc0f49e17071fc"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["1b54a9bc667895a2095a886184bf69a3179e63df"],"e0c804f7aa477229414a7e12882af490c241f64d":["ab50480bb5a7c7abad9762badcf87f8b69efeabe"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}