{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFieldExactQuery(String,String,boolean).mjava","commits":[{"id":"0ff61c2e5ce6b1f26a271d9d454206db1917d628","date":1491505661,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFieldExactQuery(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param field the field to use for indexing and searching against\n   * @param baseDate basic value to use for indexing and searching\n   * @param searchable set to true if searches against \"field\" should succeed, false if field is only stored and searches should always get numFound=0\n   */\n  private void doTestDatePointFieldExactQuery(final String field, final String baseDate, final boolean searchable) throws Exception {\n    final String MATCH_ONE = \"//*[@numFound='\" + (searchable ? \"1\" : \"0\") + \"']\";\n    final String MATCH_TWO = \"//*[@numFound='\" + (searchable ? \"2\" : \"0\") + \"']\";\n    \n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.format(Locale.ROOT, \"%s+%dMINUTES\", baseDate, i+1)));\n    }\n    assertU(commit());\n    for (int i = 0; i < 10; i++) {\n      String date = String.format(Locale.ROOT, \"%s+%dMINUTES\", baseDate, i+1);\n      assertQ(req(\"q\", field + \":\\\"\"+date+\"\\\"\", \"fl\", \"id, \" + field),\n              MATCH_ONE);\n    }\n\n    for (int i = 0; i < 10; i++) {\n      String date1 = String.format(Locale.ROOT, \"%s+%dMINUTES\", baseDate, i+1);\n      String date2 = String.format(Locale.ROOT, \"%s+%dMINUTES\", baseDate, ((i+1)%10 + 1));\n      assertQ(req(\"q\", field + \":\\\"\" + date1 + \"\\\"\"\n                  + \" OR \" + field + \":\\\"\" + date2 + \"\\\"\"),\n              MATCH_TWO);\n    }\n\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFieldExactQuery(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param field the field to use for indexing and searching against\n   * @param baseDate basic value to use for indexing and searching\n   * @param searchable set to true if searches against \"field\" should succeed, false if field is only stored and searches should always get numFound=0\n   */\n  private void doTestDatePointFieldExactQuery(final String field, final String baseDate, final boolean searchable) throws Exception {\n    final String MATCH_ONE = \"//*[@numFound='\" + (searchable ? \"1\" : \"0\") + \"']\";\n    final String MATCH_TWO = \"//*[@numFound='\" + (searchable ? \"2\" : \"0\") + \"']\";\n    \n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.format(Locale.ROOT, \"%s+%dMINUTES\", baseDate, i+1)));\n    }\n    assertU(commit());\n    for (int i = 0; i < 10; i++) {\n      String date = String.format(Locale.ROOT, \"%s+%dMINUTES\", baseDate, i+1);\n      assertQ(req(\"q\", field + \":\\\"\"+date+\"\\\"\", \"fl\", \"id, \" + field),\n              MATCH_ONE);\n    }\n\n    for (int i = 0; i < 10; i++) {\n      String date1 = String.format(Locale.ROOT, \"%s+%dMINUTES\", baseDate, i+1);\n      String date2 = String.format(Locale.ROOT, \"%s+%dMINUTES\", baseDate, ((i+1)%10 + 1));\n      assertQ(req(\"q\", field + \":\\\"\" + date1 + \"\\\"\"\n                  + \" OR \" + field + \":\\\"\" + date2 + \"\\\"\"),\n              MATCH_TWO);\n    }\n\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}