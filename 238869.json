{"path":"modules/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n    \n    if (tp.docID() > docId) {\n      return false;\n    }\n\n    // making sure we have the requested document\n    if (tp.docID() < docId) {\n      // Skipping to requested document\n      if (tp.advance(docId) == DocIdSetIterator.NO_MORE_DOCS) {\n        this.hasMore = false;\n        return false;\n      }\n\n      // If document not found (skipped to much)\n      if (tp.docID() != docId) {\n        return false;\n      }\n    }\n\n    // Prepare for payload extraction\n    tp.nextPosition();\n\n    // TODO: fix bug in SepCodec and then remove this check (the null check should be enough)\n    if (!tp.hasPayload()) {\n      return false;\n    }\n\n    BytesRef br = tp.getPayload();\n\n    if (br == null || br.length == 0) {\n      return false;\n    }\n\n    this.payloadLength = br.length;\n    \n    if (this.payloadLength > this.buffer.length) {\n      // Growing if necessary.\n      this.buffer = new byte[this.payloadLength * 2 + 1];\n    }\n    // Loading the payload\n    System.arraycopy(br.bytes, br.offset, this.buffer, 0, payloadLength);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n    \n    if (tp.docID() > docId) {\n      return false;\n    }\n\n    // making sure we have the requested document\n    if (tp.docID() < docId) {\n      // Skipping to requested document\n      if (tp.advance(docId) == DocIdSetIterator.NO_MORE_DOCS) {\n        this.hasMore = false;\n        return false;\n      }\n\n      // If document not found (skipped to much)\n      if (tp.docID() != docId) {\n        return false;\n      }\n    }\n\n    // Prepare for payload extraction\n    tp.nextPosition();\n\n    // TODO: fix bug in SepCodec and then remove this check (the null check should be enough)\n    if (!tp.hasPayload()) {\n      return false;\n    }\n\n    BytesRef br = tp.getPayload();\n\n    if (br == null || br.length == 0) {\n      return false;\n    }\n\n    this.payloadLength = br.length;\n    \n    if (this.payloadLength > this.buffer.length) {\n      // Growing if necessary.\n      this.buffer = new byte[this.payloadLength * 2 + 1];\n    }\n    // Loading the payload\n    System.arraycopy(br.bytes, br.offset, this.buffer, 0, payloadLength);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n    \n    if (tp.docID() > docId) {\n      return false;\n    }\n\n    // making sure we have the requested document\n    if (tp.docID() < docId) {\n      // Skipping to requested document\n      if (tp.advance(docId) == DocIdSetIterator.NO_MORE_DOCS) {\n        this.hasMore = false;\n        return false;\n      }\n\n      // If document not found (skipped to much)\n      if (tp.docID() != docId) {\n        return false;\n      }\n    }\n\n    // Prepare for payload extraction\n    tp.nextPosition();\n\n    // TODO: fix bug in SepCodec and then remove this check (the null check should be enough)\n    if (!tp.hasPayload()) {\n      return false;\n    }\n\n    BytesRef br = tp.getPayload();\n\n    if (br == null || br.length == 0) {\n      return false;\n    }\n\n    this.payloadLength = br.length;\n    \n    if (this.payloadLength > this.buffer.length) {\n      // Growing if necessary.\n      this.buffer = new byte[this.payloadLength * 2 + 1];\n    }\n    // Loading the payload\n    System.arraycopy(br.bytes, br.offset, this.buffer, 0, payloadLength);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","sourceNew":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n    \n    if (tp.docID() > docId) {\n      return false;\n    }\n\n    // making sure we have the requested document\n    if (tp.docID() < docId) {\n      // Skipping to requested document\n      if (tp.advance(docId) == DocIdSetIterator.NO_MORE_DOCS) {\n        this.hasMore = false;\n        return false;\n      }\n\n      // If document not found (skipped to much)\n      if (tp.docID() != docId) {\n        return false;\n      }\n    }\n\n    // Prepare for payload extraction\n    tp.nextPosition();\n\n    // TODO: fix bug in SepCodec and then remove this check (the null check should be enough)\n    if (!tp.hasPayload()) {\n      return false;\n    }\n\n    BytesRef br = tp.getPayload();\n\n    if (br == null || br.length == 0) {\n      return false;\n    }\n\n    this.payloadLength = br.length;\n    \n    if (this.payloadLength > this.buffer.length) {\n      // Growing if necessary.\n      this.buffer = new byte[this.payloadLength * 2 + 1];\n    }\n    // Loading the payload\n    System.arraycopy(br.bytes, br.offset, this.buffer, 0, payloadLength);\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n    \n    if (tp.docID() > docId) {\n      return false;\n    }\n\n    // making sure we have the requested document\n    if (tp.docID() < docId) {\n      // Skipping to requested document\n      if (tp.advance(docId) == DocIdSetIterator.NO_MORE_DOCS) {\n        this.hasMore = false;\n        return false;\n      }\n\n      // If document not found (skipped to much)\n      if (tp.docID() != docId) {\n        return false;\n      }\n    }\n\n    // Prepare for payload extraction\n    tp.nextPosition();\n\n    // TODO: fix bug in SepCodec and then remove this check (the null check should be enough)\n    if (!tp.hasPayload()) {\n      return false;\n    }\n\n    BytesRef br = tp.getPayload();\n\n    if (br == null || br.length == 0) {\n      return false;\n    }\n\n    this.payloadLength = br.length;\n    \n    if (this.payloadLength > this.buffer.length) {\n      // Growing if necessary.\n      this.buffer = new byte[this.payloadLength * 2 + 1];\n    }\n    // Loading the payload\n    System.arraycopy(br.bytes, br.offset, this.buffer, 0, payloadLength);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}