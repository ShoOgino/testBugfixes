{"path":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#updateMinCompetitiveScore(Scorable,boolean).mjava","commits":[{"id":"f00d3f1ad3bbb957062c4871ec23f49edda800c6","date":1569925943,"type":0,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#updateMinCompetitiveScore(Scorable,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected void updateMinCompetitiveScore(Scorable scorer, boolean checkQueue) throws IOException {\n    if (hitsThresholdChecker.isThresholdReached()) {\n      boolean hasChanged = false;\n      if (checkQueue && isQueueFull()) {\n        // since we tie-break on doc id and collect in doc id order, we can require\n        // the next float\n        float localMinScore = Math.nextUp(pqTop.score);\n        if (localMinScore > minCompetitiveScore) {\n          hasChanged = true;\n          minCompetitiveScore = localMinScore;\n          if (bottomValueChecker != null) {\n            // we don't use the next float here since we register a minimum value\n            // for other segments that might have smaller doc ids\n            bottomValueChecker.updateThreadLocalBottomValue(pqTop.score);\n          }\n        }\n      }\n\n      // Global bottom can only be greater than or equal to the local bottom score\n      // The updating of global bottom score for this hit before getting here should\n      // ensure that\n      if (bottomValueChecker != null) {\n        float globalMinScore = bottomValueChecker.getBottomValue();\n        if (globalMinScore > minCompetitiveScore) {\n          assert isQueueFull() == false || bottomValueChecker.getBottomValue() > Math.nextUp(pqTop.score);\n          hasChanged = true;\n          minCompetitiveScore = bottomValueChecker.getBottomValue();\n        }\n      }\n\n      if (hasChanged) {\n        scorer.setMinCompetitiveScore(minCompetitiveScore);\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db0ef4e326916fc107ab6e066754d3ecba5197b","date":1570005243,"type":5,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#updateMinCompetitiveScore(Scorable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#updateMinCompetitiveScore(Scorable,boolean).mjava","sourceNew":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (hitsThresholdChecker.isThresholdReached()) {\n      boolean hasChanged = false;\n      if (isQueueFull()) {\n        // since we tie-break on doc id and collect in doc id order, we can require\n        // the next float\n        float localMinScore = Math.nextUp(pqTop.score);\n        if (localMinScore > minCompetitiveScore) {\n          hasChanged = true;\n          minCompetitiveScore = localMinScore;\n          if (bottomValueChecker != null) {\n            // we don't use the next float here since we register a minimum value\n            // for other segments that might have smaller doc ids\n            bottomValueChecker.updateThreadLocalBottomValue(pqTop.score);\n          }\n        }\n      }\n\n      // Global bottom can only be greater than or equal to the local bottom score\n      // The updating of global bottom score for this hit before getting here should\n      // ensure that\n      if (bottomValueChecker != null) {\n        float globalMinScore = bottomValueChecker.getBottomValue();\n        if (globalMinScore > minCompetitiveScore) {\n          assert isQueueFull() == false || bottomValueChecker.getBottomValue() > Math.nextUp(pqTop.score);\n          hasChanged = true;\n          minCompetitiveScore = bottomValueChecker.getBottomValue();\n        }\n      }\n\n      if (hasChanged) {\n        scorer.setMinCompetitiveScore(minCompetitiveScore);\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n    }\n  }\n\n","sourceOld":"  protected void updateMinCompetitiveScore(Scorable scorer, boolean checkQueue) throws IOException {\n    if (hitsThresholdChecker.isThresholdReached()) {\n      boolean hasChanged = false;\n      if (checkQueue && isQueueFull()) {\n        // since we tie-break on doc id and collect in doc id order, we can require\n        // the next float\n        float localMinScore = Math.nextUp(pqTop.score);\n        if (localMinScore > minCompetitiveScore) {\n          hasChanged = true;\n          minCompetitiveScore = localMinScore;\n          if (bottomValueChecker != null) {\n            // we don't use the next float here since we register a minimum value\n            // for other segments that might have smaller doc ids\n            bottomValueChecker.updateThreadLocalBottomValue(pqTop.score);\n          }\n        }\n      }\n\n      // Global bottom can only be greater than or equal to the local bottom score\n      // The updating of global bottom score for this hit before getting here should\n      // ensure that\n      if (bottomValueChecker != null) {\n        float globalMinScore = bottomValueChecker.getBottomValue();\n        if (globalMinScore > minCompetitiveScore) {\n          assert isQueueFull() == false || bottomValueChecker.getBottomValue() > Math.nextUp(pqTop.score);\n          hasChanged = true;\n          minCompetitiveScore = bottomValueChecker.getBottomValue();\n        }\n      }\n\n      if (hasChanged) {\n        scorer.setMinCompetitiveScore(minCompetitiveScore);\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0db0ef4e326916fc107ab6e066754d3ecba5197b":["f00d3f1ad3bbb957062c4871ec23f49edda800c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f00d3f1ad3bbb957062c4871ec23f49edda800c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0db0ef4e326916fc107ab6e066754d3ecba5197b":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00d3f1ad3bbb957062c4871ec23f49edda800c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f00d3f1ad3bbb957062c4871ec23f49edda800c6":["0db0ef4e326916fc107ab6e066754d3ecba5197b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0db0ef4e326916fc107ab6e066754d3ecba5197b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}