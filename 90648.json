{"path":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertQ(String,String...).mjava","commits":[{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertQ(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Validates a query matches some XPath test expressions\n   * \n   * @param request a URL path with optional query params, e.g. \"/schema/fields?fl=id,_version_\" \n   */\n  public static void assertQ(String request, String... tests) {\n    try {\n      int queryStartPos = request.indexOf('?');\n      String query;\n      String path;\n      if (-1 == queryStartPos) {\n        query = \"\";\n        path = request;\n      } else {\n        query = request.substring(queryStartPos + 1);\n        path = request.substring(0, queryStartPos);\n      }\n      query = setParam(query, \"wt\", \"xml\");\n      request = path + '?' + setParam(query, \"indent\", \"on\");\n\n      String response = restTestHarness.query(request);\n\n      // TODO: should the facet handling below be converted to parse the URL?\n      /*\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n      */\n\n      String results = restTestHarness.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + request;\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log, \"REQUEST FAILED: \" + request, e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd","date":1364185773,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertQ(String,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertQ(String,String...).mjava","sourceNew":"  /** \n   * Validates a query matches some XPath test expressions\n   * \n   * @param request a URL path with optional query params, e.g. \"/schema/fields?fl=id,_version_\" \n   */\n  public static void assertQ(String request, String... tests) {\n    try {\n      int queryStartPos = request.indexOf('?');\n      String query;\n      String path;\n      if (-1 == queryStartPos) {\n        query = \"\";\n        path = request;\n      } else {\n        query = request.substring(queryStartPos + 1);\n        path = request.substring(0, queryStartPos);\n      }\n      if ( ! query.matches(\".*wt=schema\\\\.xml.*\")) { // don't overwrite wt=schema.xml\n        query = setParam(query, \"wt\", \"xml\");\n      }\n      request = path + '?' + setParam(query, \"indent\", \"on\");\n\n      String response = restTestHarness.query(request);\n\n      // TODO: should the facet handling below be converted to parse the URL?\n      /*\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n      */\n\n      String results = restTestHarness.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + request;\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log, \"REQUEST FAILED: \" + request, e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** \n   * Validates a query matches some XPath test expressions\n   * \n   * @param request a URL path with optional query params, e.g. \"/schema/fields?fl=id,_version_\" \n   */\n  public static void assertQ(String request, String... tests) {\n    try {\n      int queryStartPos = request.indexOf('?');\n      String query;\n      String path;\n      if (-1 == queryStartPos) {\n        query = \"\";\n        path = request;\n      } else {\n        query = request.substring(queryStartPos + 1);\n        path = request.substring(0, queryStartPos);\n      }\n      query = setParam(query, \"wt\", \"xml\");\n      request = path + '?' + setParam(query, \"indent\", \"on\");\n\n      String response = restTestHarness.query(request);\n\n      // TODO: should the facet handling below be converted to parse the URL?\n      /*\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n      */\n\n      String results = restTestHarness.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + request;\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log, \"REQUEST FAILED: \" + request, e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertQ(String,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertQ(String,String...).mjava","sourceNew":"  /** \n   * Validates a query matches some XPath test expressions\n   * \n   * @param request a URL path with optional query params, e.g. \"/schema/fields?fl=id,_version_\" \n   */\n  public static void assertQ(String request, String... tests) {\n    try {\n      int queryStartPos = request.indexOf('?');\n      String query;\n      String path;\n      if (-1 == queryStartPos) {\n        query = \"\";\n        path = request;\n      } else {\n        query = request.substring(queryStartPos + 1);\n        path = request.substring(0, queryStartPos);\n      }\n      if ( ! query.matches(\".*wt=schema\\\\.xml.*\")) { // don't overwrite wt=schema.xml\n        query = setParam(query, \"wt\", \"xml\");\n      }\n      request = path + '?' + setParam(query, \"indent\", \"on\");\n\n      String response = restTestHarness.query(request);\n\n      // TODO: should the facet handling below be converted to parse the URL?\n      /*\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n      */\n\n      String results = TestHarness.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + request;\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log, \"REQUEST FAILED: \" + request, e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** \n   * Validates a query matches some XPath test expressions\n   * \n   * @param request a URL path with optional query params, e.g. \"/schema/fields?fl=id,_version_\" \n   */\n  public static void assertQ(String request, String... tests) {\n    try {\n      int queryStartPos = request.indexOf('?');\n      String query;\n      String path;\n      if (-1 == queryStartPos) {\n        query = \"\";\n        path = request;\n      } else {\n        query = request.substring(queryStartPos + 1);\n        path = request.substring(0, queryStartPos);\n      }\n      if ( ! query.matches(\".*wt=schema\\\\.xml.*\")) { // don't overwrite wt=schema.xml\n        query = setParam(query, \"wt\", \"xml\");\n      }\n      request = path + '?' + setParam(query, \"indent\", \"on\");\n\n      String response = restTestHarness.query(request);\n\n      // TODO: should the facet handling below be converted to parse the URL?\n      /*\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n      */\n\n      String results = restTestHarness.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + request;\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log, \"REQUEST FAILED: \" + request, e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertQ(String,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertQ(String,String...).mjava","sourceNew":"  /** \n   * Validates a query matches some XPath test expressions\n   * \n   * @param request a URL path with optional query params, e.g. \"/schema/fields?fl=id,_version_\" \n   */\n  public static void assertQ(String request, String... tests) {\n    try {\n      int queryStartPos = request.indexOf('?');\n      String query;\n      String path;\n      if (-1 == queryStartPos) {\n        query = \"\";\n        path = request;\n      } else {\n        query = request.substring(queryStartPos + 1);\n        path = request.substring(0, queryStartPos);\n      }\n      if ( ! query.matches(\".*wt=schema\\\\.xml.*\")) { // don't overwrite wt=schema.xml\n        query = setParam(query, \"wt\", \"xml\");\n      }\n      request = path + '?' + setParam(query, \"indent\", \"on\");\n\n      String response = restTestHarness.query(request);\n\n      // TODO: should the facet handling below be converted to parse the URL?\n      /*\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n      */\n\n      String results = restTestHarness.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + request;\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log, \"REQUEST FAILED: \" + request, e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** \n   * Validates a query matches some XPath test expressions\n   * \n   * @param request a URL path with optional query params, e.g. \"/schema/fields?fl=id,_version_\" \n   */\n  public static void assertQ(String request, String... tests) {\n    try {\n      int queryStartPos = request.indexOf('?');\n      String query;\n      String path;\n      if (-1 == queryStartPos) {\n        query = \"\";\n        path = request;\n      } else {\n        query = request.substring(queryStartPos + 1);\n        path = request.substring(0, queryStartPos);\n      }\n      if ( ! query.matches(\".*wt=schema\\\\.xml.*\")) { // don't overwrite wt=schema.xml\n        query = setParam(query, \"wt\", \"xml\");\n      }\n      request = path + '?' + setParam(query, \"indent\", \"on\");\n\n      String response = restTestHarness.query(request);\n\n      // TODO: should the facet handling below be converted to parse the URL?\n      /*\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n      */\n\n      String results = TestHarness.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + request;\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log, \"REQUEST FAILED: \" + request, e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertQ(String,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertQ(String,String...).mjava","sourceNew":"  /** \n   * Validates a query matches some XPath test expressions\n   * \n   * @param request a URL path with optional query params, e.g. \"/schema/fields?fl=id,_version_\" \n   */\n  public static void assertQ(String request, String... tests) {\n    try {\n      int queryStartPos = request.indexOf('?');\n      String query;\n      String path;\n      if (-1 == queryStartPos) {\n        query = \"\";\n        path = request;\n      } else {\n        query = request.substring(queryStartPos + 1);\n        path = request.substring(0, queryStartPos);\n      }\n      if ( ! query.matches(\".*wt=schema\\\\.xml.*\")) { // don't overwrite wt=schema.xml\n        query = setParam(query, \"wt\", \"xml\");\n      }\n      request = path + '?' + setParam(query, \"indent\", \"on\");\n\n      String response = restTestHarness.query(request);\n\n      // TODO: should the facet handling below be converted to parse the URL?\n      /*\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n      */\n\n      String results = TestHarness.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + request;\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log, \"REQUEST FAILED: \" + request, e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** \n   * Validates a query matches some XPath test expressions\n   * \n   * @param request a URL path with optional query params, e.g. \"/schema/fields?fl=id,_version_\" \n   */\n  public static void assertQ(String request, String... tests) {\n    try {\n      int queryStartPos = request.indexOf('?');\n      String query;\n      String path;\n      if (-1 == queryStartPos) {\n        query = \"\";\n        path = request;\n      } else {\n        query = request.substring(queryStartPos + 1);\n        path = request.substring(0, queryStartPos);\n      }\n      if ( ! query.matches(\".*wt=schema\\\\.xml.*\")) { // don't overwrite wt=schema.xml\n        query = setParam(query, \"wt\", \"xml\");\n      }\n      request = path + '?' + setParam(query, \"indent\", \"on\");\n\n      String response = restTestHarness.query(request);\n\n      // TODO: should the facet handling below be converted to parse the URL?\n      /*\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n      */\n\n      String results = restTestHarness.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + request;\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log, \"REQUEST FAILED: \" + request, e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertQ(String,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertQ(String,String...).mjava","sourceNew":"  /** \n   * Validates a query matches some XPath test expressions\n   * \n   * @param request a URL path with optional query params, e.g. \"/schema/fields?fl=id,_version_\" \n   */\n  public static void assertQ(String request, String... tests) {\n    try {\n      int queryStartPos = request.indexOf('?');\n      String query;\n      String path;\n      if (-1 == queryStartPos) {\n        query = \"\";\n        path = request;\n      } else {\n        query = request.substring(queryStartPos + 1);\n        path = request.substring(0, queryStartPos);\n      }\n      if ( ! query.matches(\".*wt=schema\\\\.xml.*\")) { // don't overwrite wt=schema.xml\n        query = setParam(query, \"wt\", \"xml\");\n      }\n      request = path + '?' + setParam(query, \"indent\", \"on\");\n\n      String response = restTestHarness.query(request);\n\n      // TODO: should the facet handling below be converted to parse the URL?\n      /*\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n      */\n\n      String results = TestHarness.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + request;\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log, \"REQUEST FAILED: \" + request, e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** \n   * Validates a query matches some XPath test expressions\n   * \n   * @param request a URL path with optional query params, e.g. \"/schema/fields?fl=id,_version_\" \n   */\n  public static void assertQ(String request, String... tests) {\n    try {\n      int queryStartPos = request.indexOf('?');\n      String query;\n      String path;\n      if (-1 == queryStartPos) {\n        query = \"\";\n        path = request;\n      } else {\n        query = request.substring(queryStartPos + 1);\n        path = request.substring(0, queryStartPos);\n      }\n      if ( ! query.matches(\".*wt=schema\\\\.xml.*\")) { // don't overwrite wt=schema.xml\n        query = setParam(query, \"wt\", \"xml\");\n      }\n      request = path + '?' + setParam(query, \"indent\", \"on\");\n\n      String response = restTestHarness.query(request);\n\n      // TODO: should the facet handling below be converted to parse the URL?\n      /*\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n      */\n\n      String results = restTestHarness.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + request;\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log, \"REQUEST FAILED: \" + request, e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd","7116474e2e390259937401cf928323e0cbc75e60"],"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d264f386d864b5751209060e8886ca9845f70469":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7116474e2e390259937401cf928323e0cbc75e60"]},"commit2Childs":{"7116474e2e390259937401cf928323e0cbc75e60":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d264f386d864b5751209060e8886ca9845f70469"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}