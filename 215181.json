{"path":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","commits":[{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    if (SortingMergePolicy.isSorted(context.reader(), sort)) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    if (SortingMergePolicy.isSorted(context.reader(), sort)) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d17901785875f5d523c1f729cd7898d2ab907c69","date":1419959847,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    if (mergePolicy.isSorted(context.reader())) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    if (SortingMergePolicy.isSorted(context.reader(), sort)) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    if (mergePolicy.isSorted(context.reader())) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            throw new CollectionTerminatedException();\n          }\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    if (mergePolicy.isSorted(context.reader())) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76","date":1435865633,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    if (SortingMergePolicy.isSorted(context.reader(), mergePolicySort)) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            throw new CollectionTerminatedException();\n          }\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    if (mergePolicy.isSorted(context.reader())) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            throw new CollectionTerminatedException();\n          }\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff0a9c7bbae145588b269529bb55009dec1bb733","date":1438605556,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    if (SortingMergePolicy.isSorted(context.reader(), mergePolicySort)) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            terminatedEarly.set(true);\n            throw new CollectionTerminatedException();\n          }\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    if (SortingMergePolicy.isSorted(context.reader(), mergePolicySort)) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            throw new CollectionTerminatedException();\n          }\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    Sort segmentSort = context.reader().getIndexSort();\n    if (segmentSort != null && canEarlyTerminate(sort, segmentSort) == false) {\n      throw new IllegalStateException(\"Cannot early terminate with sort order \" + sort + \" if segments are sorted with \" + segmentSort);\n    }\n\n    if (segmentSort != null) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            terminatedEarly.set(true);\n            throw new CollectionTerminatedException();\n          }\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    if (SortingMergePolicy.isSorted(context.reader(), mergePolicySort)) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            terminatedEarly.set(true);\n            throw new CollectionTerminatedException();\n          }\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0345a2d45479f891041f8b3ce351bc975e64ac","date":1462708700,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    Sort segmentSort = context.reader().getIndexSort();\n    if (segmentSort != null && canEarlyTerminate(sort, segmentSort) == false) {\n      throw new IllegalStateException(\"Cannot early terminate with sort order \" + sort + \" if segments are sorted with \" + segmentSort);\n    }\n\n    if (segmentSort != null) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            terminatedEarly.set(true);\n            throw new CollectionTerminatedException();\n          }\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    Sort segmentSort = context.reader().getIndexSort();\n    if (segmentSort != null && canEarlyTerminate(sort, segmentSort) == false) {\n      throw new IllegalStateException(\"Cannot early terminate with sort order \" + sort + \" if segments are sorted with \" + segmentSort);\n    }\n\n    if (segmentSort != null) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            terminatedEarly.set(true);\n            throw new CollectionTerminatedException();\n          }\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    Sort segmentSort = context.reader().getIndexSort();\n    if (segmentSort != null && canEarlyTerminate(sort, segmentSort) == false) {\n      throw new IllegalStateException(\"Cannot early terminate with sort order \" + sort + \" if segments are sorted with \" + segmentSort);\n    }\n\n    if (segmentSort != null) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            terminatedEarly.set(true);\n            throw new CollectionTerminatedException();\n          }\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    if (SortingMergePolicy.isSorted(context.reader(), mergePolicySort)) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            terminatedEarly.set(true);\n            throw new CollectionTerminatedException();\n          }\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    Sort segmentSort = context.reader().getIndexSort();\n    if (segmentSort != null && canEarlyTerminate(sort, segmentSort) == false) {\n      throw new IllegalStateException(\"Cannot early terminate with sort order \" + sort + \" if segments are sorted with \" + segmentSort);\n    }\n\n    if (segmentSort != null) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            terminatedEarly.set(true);\n            throw new CollectionTerminatedException();\n          }\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    if (SortingMergePolicy.isSorted(context.reader(), mergePolicySort)) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            terminatedEarly.set(true);\n            throw new CollectionTerminatedException();\n          }\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    Sort segmentSort = context.reader().getIndexSort();\n    if (segmentSort != null && canEarlyTerminate(sort, segmentSort) == false) {\n      throw new IllegalStateException(\"Cannot early terminate with sort order \" + sort + \" if segments are sorted with \" + segmentSort);\n    }\n\n    if (segmentSort != null) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            terminatedEarly.set(true);\n            throw new CollectionTerminatedException();\n          }\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    if (SortingMergePolicy.isSorted(context.reader(), mergePolicySort)) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            terminatedEarly.set(true);\n            throw new CollectionTerminatedException();\n          }\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    if (SortingMergePolicy.isSorted(context.reader(), mergePolicySort)) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            terminatedEarly.set(true);\n            throw new CollectionTerminatedException();\n          }\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ad30c6a479e764150a3316e57263319775f1df2":["ff0a9c7bbae145588b269529bb55009dec1bb733","3d33e731a93d4b57e662ff094f64f94a745422d4"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ff0a9c7bbae145588b269529bb55009dec1bb733","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["ff0a9c7bbae145588b269529bb55009dec1bb733","0ad30c6a479e764150a3316e57263319775f1df2"],"fb0345a2d45479f891041f8b3ce351bc975e64ac":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["ff0a9c7bbae145588b269529bb55009dec1bb733"],"ff0a9c7bbae145588b269529bb55009dec1bb733":["5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["d17901785875f5d523c1f729cd7898d2ab907c69"],"d17901785875f5d523c1f729cd7898d2ab907c69":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d33e731a93d4b57e662ff094f64f94a745422d4":["ff0a9c7bbae145588b269529bb55009dec1bb733","fb0345a2d45479f891041f8b3ce351bc975e64ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"commit2Childs":{"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["d17901785875f5d523c1f729cd7898d2ab907c69"],"5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76":["ff0a9c7bbae145588b269529bb55009dec1bb733"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb0345a2d45479f891041f8b3ce351bc975e64ac":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["fb0345a2d45479f891041f8b3ce351bc975e64ac"],"ff0a9c7bbae145588b269529bb55009dec1bb733":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76"],"d17901785875f5d523c1f729cd7898d2ab907c69":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}