{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,SortedDocValues,int,GroupHeadSelector,SortSpec,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","sourceNew":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        if(fieldType instanceof TrieIntField) {\n          this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if(fieldType instanceof TrieFloatField) {\n          this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if(fieldType instanceof TrieLongField) {\n          this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else {\n          throw new IOException(\"min/max must be either TrieInt, TrieLong, TrieFloat.\");\n        }\n      }\n    }\n\n","sourceOld":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  SortedDocValues collapseValues,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValues = collapseValues;\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        if(fieldType instanceof TrieIntField) {\n          this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if(fieldType instanceof TrieFloatField) {\n          this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if(fieldType instanceof TrieLongField) {\n          this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else {\n          throw new IOException(\"min/max must be either TrieInt, TrieLong, TrieFloat.\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        if(fieldType instanceof TrieIntField) {\n          this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if(fieldType instanceof TrieFloatField) {\n          this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if(fieldType instanceof TrieLongField) {\n          this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else {\n          throw new IOException(\"min/max must be either TrieInt, TrieLong, TrieFloat.\");\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        if(fieldType instanceof TrieIntField) {\n          this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if(fieldType instanceof TrieFloatField) {\n          this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if(fieldType instanceof TrieLongField) {\n          this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else {\n          throw new IOException(\"min/max must be either TrieInt, TrieLong, TrieFloat.\");\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ea826cad27aae1c1287b70d2eaf0202ec6aa754","date":1490169633,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","sourceNew":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        if (fieldType instanceof TrieIntField || fieldType instanceof IntPointField) {\n          this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if (fieldType instanceof TrieFloatField || fieldType instanceof FloatPointField) {\n          this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if (fieldType instanceof TrieLongField || fieldType instanceof LongPointField) {\n          this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else {\n          throw new IOException(\"min/max must be either Int/Long/Float field types\");\n        }\n      }\n    }\n\n","sourceOld":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        if(fieldType instanceof TrieIntField) {\n          this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if(fieldType instanceof TrieFloatField) {\n          this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if(fieldType instanceof TrieLongField) {\n          this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else {\n          throw new IOException(\"min/max must be either TrieInt, TrieLong, TrieFloat.\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa09e86cb64347ee96ff0a59f09b539abd620e57","date":1490280013,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","sourceNew":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        if (fieldType instanceof TrieIntField || fieldType instanceof IntPointField) {\n          this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if (fieldType instanceof TrieFloatField || fieldType instanceof FloatPointField) {\n          this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if (fieldType instanceof TrieLongField || fieldType instanceof LongPointField) {\n          this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else {\n          throw new IOException(\"min/max must be either Int/Long/Float field types\");\n        }\n      }\n    }\n\n","sourceOld":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        if(fieldType instanceof TrieIntField) {\n          this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if(fieldType instanceof TrieFloatField) {\n          this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if(fieldType instanceof TrieLongField) {\n          this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else {\n          throw new IOException(\"min/max must be either TrieInt, TrieLong, TrieFloat.\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d048016075a0b8589fcfc77fdf8e2a29fc80964","date":1494631326,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","sourceNew":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        NumberType numType = fieldType.getNumberType();\n        if (null == numType) {\n          throw new IOException(\"min/max must be either Int/Long/Float based field types\");\n        }\n        switch (numType) {\n          case INTEGER: {\n            this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case FLOAT: {\n            this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case LONG: {\n            this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          default: {\n            throw new IOException(\"min/max must be either Int/Long/Float field types\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        if (fieldType instanceof TrieIntField || fieldType instanceof IntPointField) {\n          this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if (fieldType instanceof TrieFloatField || fieldType instanceof FloatPointField) {\n          this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if (fieldType instanceof TrieLongField || fieldType instanceof LongPointField) {\n          this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else {\n          throw new IOException(\"min/max must be either Int/Long/Float field types\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["432fdfa612cbca5b4cf9125a2c6aa055cd53cadb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","sourceNew":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        NumberType numType = fieldType.getNumberType();\n        if (null == numType) {\n          throw new IOException(\"min/max must be either Int/Long/Float based field types\");\n        }\n        switch (numType) {\n          case INTEGER: {\n            this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case FLOAT: {\n            this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case LONG: {\n            this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          default: {\n            throw new IOException(\"min/max must be either Int/Long/Float field types\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        if (fieldType instanceof TrieIntField || fieldType instanceof IntPointField) {\n          this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if (fieldType instanceof TrieFloatField || fieldType instanceof FloatPointField) {\n          this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if (fieldType instanceof TrieLongField || fieldType instanceof LongPointField) {\n          this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else {\n          throw new IOException(\"min/max must be either Int/Long/Float field types\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3","date":1556831715,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,DocValuesProducer,int,GroupHeadSelector,SortSpec,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","sourceNew":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores4Collapsing,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores4Collapsing = needsScores4Collapsing;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores4Collapsing, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores4Collapsing, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        NumberType numType = fieldType.getNumberType();\n        if (null == numType) {\n          throw new IOException(\"min/max must be either Int/Long/Float based field types\");\n        }\n        switch (numType) {\n          case INTEGER: {\n            this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case FLOAT: {\n            this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case LONG: {\n            this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          default: {\n            throw new IOException(\"min/max must be either Int/Long/Float field types\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  DocValuesProducer collapseValuesProducer,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        NumberType numType = fieldType.getNumberType();\n        if (null == numType) {\n          throw new IOException(\"min/max must be either Int/Long/Float based field types\");\n        }\n        switch (numType) {\n          case INTEGER: {\n            this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case FLOAT: {\n            this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          case LONG: {\n            this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n            break;\n          }\n          default: {\n            throw new IOException(\"min/max must be either Int/Long/Float field types\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["fa09e86cb64347ee96ff0a59f09b539abd620e57","4d048016075a0b8589fcfc77fdf8e2a29fc80964"],"4d048016075a0b8589fcfc77fdf8e2a29fc80964":["5ea826cad27aae1c1287b70d2eaf0202ec6aa754"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3":["4d048016075a0b8589fcfc77fdf8e2a29fc80964"],"fa09e86cb64347ee96ff0a59f09b539abd620e57":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3"],"5ea826cad27aae1c1287b70d2eaf0202ec6aa754":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"4d048016075a0b8589fcfc77fdf8e2a29fc80964":["e9017cf144952056066919f1ebc7897ff9bd71b1","446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["fa09e86cb64347ee96ff0a59f09b539abd620e57","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5ea826cad27aae1c1287b70d2eaf0202ec6aa754"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"fa09e86cb64347ee96ff0a59f09b539abd620e57":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"5ea826cad27aae1c1287b70d2eaf0202ec6aa754":["4d048016075a0b8589fcfc77fdf8e2a29fc80964"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}