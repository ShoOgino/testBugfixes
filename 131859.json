{"path":"src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(TermFreqVector[],TermFreqVector[]).mjava","commits":[{"id":"49adbad5232116eb2448ea8166464e6a68bca007","date":1202851885,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(TermFreqVector[],TermFreqVector[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void verifyEquals(TermFreqVector[] d1, TermFreqVector[] d2) {\n    if (d1 == null) {\n      assertTrue(d2 == null);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    assertEquals(d1.length, d2.length);\n    for(int i=0;i<d1.length;i++) {\n      TermFreqVector v1 = d1[i];\n      TermFreqVector v2 = d2[i];\n      assertEquals(v1.size(), v2.size());\n      int numTerms = v1.size();\n      String[] terms1 = v1.getTerms();\n      String[] terms2 = v2.getTerms();\n      int[] freq1 = v1.getTermFrequencies();\n      int[] freq2 = v2.getTermFrequencies();\n      for(int j=0;j<numTerms;j++) {\n        if (!terms1[j].equals(terms2[j]))\n          assertEquals(terms1[j], terms2[j]);\n        assertEquals(freq1[j], freq2[j]);\n      }\n      if (v1 instanceof TermPositionVector) {\n        assertTrue(v2 instanceof TermPositionVector);\n        TermPositionVector tpv1 = (TermPositionVector) v1;\n        TermPositionVector tpv2 = (TermPositionVector) v2;\n        for(int j=0;j<numTerms;j++) {\n          int[] pos1 = tpv1.getTermPositions(j);\n          int[] pos2 = tpv2.getTermPositions(j);\n          assertEquals(pos1.length, pos2.length);\n          TermVectorOffsetInfo[] offsets1 = tpv1.getOffsets(j);\n          TermVectorOffsetInfo[] offsets2 = tpv2.getOffsets(j);\n          if (offsets1 == null)\n            assertTrue(offsets2 == null);\n          else\n            assertTrue(offsets2 != null);\n          for(int k=0;k<pos1.length;k++) {\n            assertEquals(pos1[k], pos2[k]);\n            if (offsets1 != null) {\n              assertEquals(offsets1[k].getStartOffset(),\n                           offsets2[k].getStartOffset());\n              assertEquals(offsets1[k].getEndOffset(),\n                           offsets2[k].getEndOffset());\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(TermFreqVector[],TermFreqVector[]).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(TermFreqVector[],TermFreqVector[]).mjava","sourceNew":"  public static void verifyEquals(TermFreqVector[] d1, TermFreqVector[] d2) {\n    if (d1 == null) {\n      assertTrue(d2 == null);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    assertEquals(d1.length, d2.length);\n    for(int i=0;i<d1.length;i++) {\n      TermFreqVector v1 = d1[i];\n      TermFreqVector v2 = d2[i];\n      if (v1 == null || v2 == null)\n        System.out.println(\"v1=\" + v1 + \" v2=\" + v2 + \" i=\" + i + \" of \" + d1.length);\n      assertEquals(v1.size(), v2.size());\n      int numTerms = v1.size();\n      String[] terms1 = v1.getTerms();\n      String[] terms2 = v2.getTerms();\n      int[] freq1 = v1.getTermFrequencies();\n      int[] freq2 = v2.getTermFrequencies();\n      for(int j=0;j<numTerms;j++) {\n        if (!terms1[j].equals(terms2[j]))\n          assertEquals(terms1[j], terms2[j]);\n        assertEquals(freq1[j], freq2[j]);\n      }\n      if (v1 instanceof TermPositionVector) {\n        assertTrue(v2 instanceof TermPositionVector);\n        TermPositionVector tpv1 = (TermPositionVector) v1;\n        TermPositionVector tpv2 = (TermPositionVector) v2;\n        for(int j=0;j<numTerms;j++) {\n          int[] pos1 = tpv1.getTermPositions(j);\n          int[] pos2 = tpv2.getTermPositions(j);\n          assertEquals(pos1.length, pos2.length);\n          TermVectorOffsetInfo[] offsets1 = tpv1.getOffsets(j);\n          TermVectorOffsetInfo[] offsets2 = tpv2.getOffsets(j);\n          if (offsets1 == null)\n            assertTrue(offsets2 == null);\n          else\n            assertTrue(offsets2 != null);\n          for(int k=0;k<pos1.length;k++) {\n            assertEquals(pos1[k], pos2[k]);\n            if (offsets1 != null) {\n              assertEquals(offsets1[k].getStartOffset(),\n                           offsets2[k].getStartOffset());\n              assertEquals(offsets1[k].getEndOffset(),\n                           offsets2[k].getEndOffset());\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyEquals(TermFreqVector[] d1, TermFreqVector[] d2) {\n    if (d1 == null) {\n      assertTrue(d2 == null);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    assertEquals(d1.length, d2.length);\n    for(int i=0;i<d1.length;i++) {\n      TermFreqVector v1 = d1[i];\n      TermFreqVector v2 = d2[i];\n      assertEquals(v1.size(), v2.size());\n      int numTerms = v1.size();\n      String[] terms1 = v1.getTerms();\n      String[] terms2 = v2.getTerms();\n      int[] freq1 = v1.getTermFrequencies();\n      int[] freq2 = v2.getTermFrequencies();\n      for(int j=0;j<numTerms;j++) {\n        if (!terms1[j].equals(terms2[j]))\n          assertEquals(terms1[j], terms2[j]);\n        assertEquals(freq1[j], freq2[j]);\n      }\n      if (v1 instanceof TermPositionVector) {\n        assertTrue(v2 instanceof TermPositionVector);\n        TermPositionVector tpv1 = (TermPositionVector) v1;\n        TermPositionVector tpv2 = (TermPositionVector) v2;\n        for(int j=0;j<numTerms;j++) {\n          int[] pos1 = tpv1.getTermPositions(j);\n          int[] pos2 = tpv2.getTermPositions(j);\n          assertEquals(pos1.length, pos2.length);\n          TermVectorOffsetInfo[] offsets1 = tpv1.getOffsets(j);\n          TermVectorOffsetInfo[] offsets2 = tpv2.getOffsets(j);\n          if (offsets1 == null)\n            assertTrue(offsets2 == null);\n          else\n            assertTrue(offsets2 != null);\n          for(int k=0;k<pos1.length;k++) {\n            assertEquals(pos1[k], pos2[k]);\n            if (offsets1 != null) {\n              assertEquals(offsets1[k].getStartOffset(),\n                           offsets2[k].getStartOffset());\n              assertEquals(offsets1[k].getEndOffset(),\n                           offsets2[k].getEndOffset());\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(TermFreqVector[],TermFreqVector[]).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(TermFreqVector[],TermFreqVector[]).mjava","sourceNew":"  public static void verifyEquals(TermFreqVector[] d1, TermFreqVector[] d2) {\n    if (d1 == null) {\n      assertTrue(d2 == null);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    assertEquals(d1.length, d2.length);\n    for(int i=0;i<d1.length;i++) {\n      TermFreqVector v1 = d1[i];\n      TermFreqVector v2 = d2[i];\n      if (v1 == null || v2 == null)\n        System.out.println(\"v1=\" + v1 + \" v2=\" + v2 + \" i=\" + i + \" of \" + d1.length);\n      assertEquals(v1.size(), v2.size());\n      int numTerms = v1.size();\n      String[] terms1 = v1.getTerms();\n      String[] terms2 = v2.getTerms();\n      int[] freq1 = v1.getTermFrequencies();\n      int[] freq2 = v2.getTermFrequencies();\n      for(int j=0;j<numTerms;j++) {\n        if (!terms1[j].equals(terms2[j]))\n          assertEquals(terms1[j], terms2[j]);\n        assertEquals(freq1[j], freq2[j]);\n      }\n      if (v1 instanceof TermPositionVector) {\n        assertTrue(v2 instanceof TermPositionVector);\n        TermPositionVector tpv1 = (TermPositionVector) v1;\n        TermPositionVector tpv2 = (TermPositionVector) v2;\n        for(int j=0;j<numTerms;j++) {\n          int[] pos1 = tpv1.getTermPositions(j);\n          int[] pos2 = tpv2.getTermPositions(j);\n          assertEquals(pos1.length, pos2.length);\n          TermVectorOffsetInfo[] offsets1 = tpv1.getOffsets(j);\n          TermVectorOffsetInfo[] offsets2 = tpv2.getOffsets(j);\n          if (offsets1 == null)\n            assertTrue(offsets2 == null);\n          else\n            assertTrue(offsets2 != null);\n          for(int k=0;k<pos1.length;k++) {\n            assertEquals(pos1[k], pos2[k]);\n            if (offsets1 != null) {\n              assertEquals(offsets1[k].getStartOffset(),\n                           offsets2[k].getStartOffset());\n              assertEquals(offsets1[k].getEndOffset(),\n                           offsets2[k].getEndOffset());\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyEquals(TermFreqVector[] d1, TermFreqVector[] d2) {\n    if (d1 == null) {\n      assertTrue(d2 == null);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    assertEquals(d1.length, d2.length);\n    for(int i=0;i<d1.length;i++) {\n      TermFreqVector v1 = d1[i];\n      TermFreqVector v2 = d2[i];\n      if (v1 == null || v2 == null)\n        System.out.println(\"v1=\" + v1 + \" v2=\" + v2 + \" i=\" + i + \" of \" + d1.length);\n      assertEquals(v1.size(), v2.size());\n      int numTerms = v1.size();\n      String[] terms1 = v1.getTerms();\n      String[] terms2 = v2.getTerms();\n      int[] freq1 = v1.getTermFrequencies();\n      int[] freq2 = v2.getTermFrequencies();\n      for(int j=0;j<numTerms;j++) {\n        if (!terms1[j].equals(terms2[j]))\n          assertEquals(terms1[j], terms2[j]);\n        assertEquals(freq1[j], freq2[j]);\n      }\n      if (v1 instanceof TermPositionVector) {\n        assertTrue(v2 instanceof TermPositionVector);\n        TermPositionVector tpv1 = (TermPositionVector) v1;\n        TermPositionVector tpv2 = (TermPositionVector) v2;\n        for(int j=0;j<numTerms;j++) {\n          int[] pos1 = tpv1.getTermPositions(j);\n          int[] pos2 = tpv2.getTermPositions(j);\n          assertEquals(pos1.length, pos2.length);\n          TermVectorOffsetInfo[] offsets1 = tpv1.getOffsets(j);\n          TermVectorOffsetInfo[] offsets2 = tpv2.getOffsets(j);\n          if (offsets1 == null)\n            assertTrue(offsets2 == null);\n          else\n            assertTrue(offsets2 != null);\n          for(int k=0;k<pos1.length;k++) {\n            assertEquals(pos1[k], pos2[k]);\n            if (offsets1 != null) {\n              assertEquals(offsets1[k].getStartOffset(),\n                           offsets2[k].getStartOffset());\n              assertEquals(offsets1[k].getEndOffset(),\n                           offsets2[k].getEndOffset());\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"49adbad5232116eb2448ea8166464e6a68bca007":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5350389bf83287111f7760b9e3db3af8e3648474":["49adbad5232116eb2448ea8166464e6a68bca007"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5350389bf83287111f7760b9e3db3af8e3648474"]},"commit2Childs":{"49adbad5232116eb2448ea8166464e6a68bca007":["5350389bf83287111f7760b9e3db3af8e3648474"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["49adbad5232116eb2448ea8166464e6a68bca007"],"5350389bf83287111f7760b9e3db3af8e3648474":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}