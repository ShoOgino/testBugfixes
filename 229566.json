{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#get(IntsRef).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#get(IntsRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public T get(IntsRef input) throws IOException {\n    assert inputType == INPUT_TYPE.BYTE4;\n\n    if (input.length == 0) {\n      return getEmptyOutput();\n    }\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = new FST.Arc<T>();\n    int node = getStartNode();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (!hasArcs(node)) {\n        // hit end of FST before input end\n        return null;\n      }\n\n      if (findArc(node, input.ints[input.offset + i], arc) != null) {\n        node = arc.target;\n        if (arc.output != NO_OUTPUT) {\n          output = outputs.add(output, arc.output);\n        }\n      } else {\n        return null;\n      }\n    }\n\n    if (!arc.isFinal()) {\n      // hit input's end before end node\n      return null;\n    }\n\n    if (arc.nextFinalOutput != NO_OUTPUT) {\n      output = outputs.add(output, arc.nextFinalOutput);\n    }\n\n    return output;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#get(IntsRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public T get(IntsRef input) throws IOException {\n    assert inputType == INPUT_TYPE.BYTE4;\n\n    if (input.length == 0) {\n      return getEmptyOutput();\n    }\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = new FST.Arc<T>();\n    int node = getStartNode();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (!hasArcs(node)) {\n        // hit end of FST before input end\n        return null;\n      }\n\n      if (findArc(node, input.ints[input.offset + i], arc) != null) {\n        node = arc.target;\n        if (arc.output != NO_OUTPUT) {\n          output = outputs.add(output, arc.output);\n        }\n      } else {\n        return null;\n      }\n    }\n\n    if (!arc.isFinal()) {\n      // hit input's end before end node\n      return null;\n    }\n\n    if (arc.nextFinalOutput != NO_OUTPUT) {\n      output = outputs.add(output, arc.nextFinalOutput);\n    }\n\n    return output;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#get(IntsRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public T get(IntsRef input) throws IOException {\n    assert inputType == INPUT_TYPE.BYTE4;\n\n    if (input.length == 0) {\n      return getEmptyOutput();\n    }\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = new FST.Arc<T>();\n    int node = getStartNode();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (!hasArcs(node)) {\n        // hit end of FST before input end\n        return null;\n      }\n\n      if (findArc(node, input.ints[input.offset + i], arc) != null) {\n        node = arc.target;\n        if (arc.output != NO_OUTPUT) {\n          output = outputs.add(output, arc.output);\n        }\n      } else {\n        return null;\n      }\n    }\n\n    if (!arc.isFinal()) {\n      // hit input's end before end node\n      return null;\n    }\n\n    if (arc.nextFinalOutput != NO_OUTPUT) {\n      output = outputs.add(output, arc.nextFinalOutput);\n    }\n\n    return output;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Util#[T]_get(FST[T],IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#get(IntsRef).mjava","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE4;\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public T get(IntsRef input) throws IOException {\n    assert inputType == INPUT_TYPE.BYTE4;\n\n    if (input.length == 0) {\n      return getEmptyOutput();\n    }\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = new FST.Arc<T>();\n    int node = getStartNode();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (!hasArcs(node)) {\n        // hit end of FST before input end\n        return null;\n      }\n\n      if (findArc(node, input.ints[input.offset + i], arc) != null) {\n        node = arc.target;\n        if (arc.output != NO_OUTPUT) {\n          output = outputs.add(output, arc.output);\n        }\n      } else {\n        return null;\n      }\n    }\n\n    if (!arc.isFinal()) {\n      // hit input's end before end node\n      return null;\n    }\n\n    if (arc.nextFinalOutput != NO_OUTPUT) {\n      output = outputs.add(output, arc.nextFinalOutput);\n    }\n\n    return output;\n  }\n\n","bugFix":null,"bugIntro":["1ec890fad2ea96317f4429e0aa0085bb25673641","1ec890fad2ea96317f4429e0aa0085bb25673641","1ec890fad2ea96317f4429e0aa0085bb25673641"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#get(IntsRef).mjava","sourceNew":null,"sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public T get(IntsRef input) throws IOException {\n    assert inputType == INPUT_TYPE.BYTE4;\n\n    if (input.length == 0) {\n      return getEmptyOutput();\n    }\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = new FST.Arc<T>();\n    int node = getStartNode();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (!hasArcs(node)) {\n        // hit end of FST before input end\n        return null;\n      }\n\n      if (findArc(node, input.ints[input.offset + i], arc) != null) {\n        node = arc.target;\n        if (arc.output != NO_OUTPUT) {\n          output = outputs.add(output, arc.output);\n        }\n      } else {\n        return null;\n      }\n    }\n\n    if (!arc.isFinal()) {\n      // hit input's end before end node\n      return null;\n    }\n\n    if (arc.nextFinalOutput != NO_OUTPUT) {\n      output = outputs.add(output, arc.nextFinalOutput);\n    }\n\n    return output;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#get(IntsRef).mjava","sourceNew":null,"sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public T get(IntsRef input) throws IOException {\n    assert inputType == INPUT_TYPE.BYTE4;\n\n    if (input.length == 0) {\n      return getEmptyOutput();\n    }\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = new FST.Arc<T>();\n    int node = getStartNode();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (!hasArcs(node)) {\n        // hit end of FST before input end\n        return null;\n      }\n\n      if (findArc(node, input.ints[input.offset + i], arc) != null) {\n        node = arc.target;\n        if (arc.output != NO_OUTPUT) {\n          output = outputs.add(output, arc.output);\n        }\n      } else {\n        return null;\n      }\n    }\n\n    if (!arc.isFinal()) {\n      // hit input's end before end node\n      return null;\n    }\n\n    if (arc.nextFinalOutput != NO_OUTPUT) {\n      output = outputs.add(output, arc.nextFinalOutput);\n    }\n\n    return output;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","56da903869515527852ee21ea7ef7bfe414cd40d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56da903869515527852ee21ea7ef7bfe414cd40d"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["56da903869515527852ee21ea7ef7bfe414cd40d","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}