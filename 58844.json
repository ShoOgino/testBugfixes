{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/BaseNonFuzzySpatialOpStrategyTest#testOperation(SpatialOperation,List[Shape],List[Shape],boolean).mjava","commits":[{"id":"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093","date":1401932592,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/BaseNonFuzzySpatialOpStrategyTest#testOperation(SpatialOperation,List[Shape],List[Shape],boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected void testOperation(final SpatialOperation operation,\n                               List<Shape> indexedShapes, List<Shape> queryShapes, boolean havoc) throws IOException {\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (havoc && random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n    if (havoc) {\n      //delete some documents randomly\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        if (random().nextInt(10) == 0) {\n          deleteDoc(\"\"+id);\n          indexedShapes.set(id, null);\n        }\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < queryShapes.size(); queryIdx++) {\n      final Shape queryShape = queryShapes.get(queryIdx);\n\n      if (havoc)\n        preQueryHavoc();\n\n      //Generate truth via brute force:\n      // We ensure true-positive matches (if the predicate on the raw shapes match\n      //  then the search should find those same matches).\n      Set<String> expectedIds = new LinkedHashSet<>();//true-positives\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        Shape indexedShape = indexedShapes.get(id);\n        if (indexedShape == null)\n          continue;\n        if (operation.evaluate(indexedShape, queryShape)) {\n          expectedIds.add(\"\"+id);\n        }\n      }\n\n      //Search and verify results\n      SpatialArgs args = new SpatialArgs(operation, queryShape);\n      Query query = strategy.makeQuery(args);\n      SearchResults got = executeQuery(query, 100);\n      Set<String> remainingExpectedIds = new LinkedHashSet<>(expectedIds);\n      for (SearchResult result : got.results) {\n        String id = result.getId();\n        if (!remainingExpectedIds.remove(id)) {\n          fail(\"Shouldn't match\", id, indexedShapes, queryShape);\n        }\n      }\n      if (!remainingExpectedIds.isEmpty()) {\n        String id = remainingExpectedIds.iterator().next();\n        fail(\"Should have matched\", id, indexedShapes, queryShape);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0521546db127e358ced1772a9d696dbdd255b203","date":1403202289,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperation(SpatialOperation,List[Shape],List[Shape],boolean).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/BaseNonFuzzySpatialOpStrategyTest#testOperation(SpatialOperation,List[Shape],List[Shape],boolean).mjava","sourceNew":"  protected void testOperation(final SpatialOperation operation,\n                               List<Shape> indexedShapes, List<Shape> queryShapes, boolean havoc) throws IOException {\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (havoc && random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n    if (havoc) {\n      //delete some documents randomly\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        if (random().nextInt(10) == 0) {\n          deleteDoc(\"\"+id);\n          indexedShapes.set(id, null);\n        }\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < queryShapes.size(); queryIdx++) {\n      final Shape queryShape = queryShapes.get(queryIdx);\n\n      if (havoc)\n        preQueryHavoc();\n\n      //Generate truth via brute force:\n      // We ensure true-positive matches (if the predicate on the raw shapes match\n      //  then the search should find those same matches).\n      Set<String> expectedIds = new LinkedHashSet<>();//true-positives\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        Shape indexedShape = indexedShapes.get(id);\n        if (indexedShape == null)\n          continue;\n        if (operation.evaluate(indexedShape, queryShape)) {\n          expectedIds.add(\"\"+id);\n        }\n      }\n\n      //Search and verify results\n      SpatialArgs args = new SpatialArgs(operation, queryShape);\n      Query query = strategy.makeQuery(args);\n      SearchResults got = executeQuery(query, 100);\n      Set<String> remainingExpectedIds = new LinkedHashSet<>(expectedIds);\n      for (SearchResult result : got.results) {\n        String id = result.getId();\n        if (!remainingExpectedIds.remove(id)) {\n          fail(\"Shouldn't match\", id, indexedShapes, queryShape, operation);\n        }\n      }\n      if (!remainingExpectedIds.isEmpty()) {\n        String id = remainingExpectedIds.iterator().next();\n        fail(\"Should have matched\", id, indexedShapes, queryShape, operation);\n      }\n    }\n  }\n\n","sourceOld":"  protected void testOperation(final SpatialOperation operation,\n                               List<Shape> indexedShapes, List<Shape> queryShapes, boolean havoc) throws IOException {\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (havoc && random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n    if (havoc) {\n      //delete some documents randomly\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        if (random().nextInt(10) == 0) {\n          deleteDoc(\"\"+id);\n          indexedShapes.set(id, null);\n        }\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < queryShapes.size(); queryIdx++) {\n      final Shape queryShape = queryShapes.get(queryIdx);\n\n      if (havoc)\n        preQueryHavoc();\n\n      //Generate truth via brute force:\n      // We ensure true-positive matches (if the predicate on the raw shapes match\n      //  then the search should find those same matches).\n      Set<String> expectedIds = new LinkedHashSet<>();//true-positives\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        Shape indexedShape = indexedShapes.get(id);\n        if (indexedShape == null)\n          continue;\n        if (operation.evaluate(indexedShape, queryShape)) {\n          expectedIds.add(\"\"+id);\n        }\n      }\n\n      //Search and verify results\n      SpatialArgs args = new SpatialArgs(operation, queryShape);\n      Query query = strategy.makeQuery(args);\n      SearchResults got = executeQuery(query, 100);\n      Set<String> remainingExpectedIds = new LinkedHashSet<>(expectedIds);\n      for (SearchResult result : got.results) {\n        String id = result.getId();\n        if (!remainingExpectedIds.remove(id)) {\n          fail(\"Shouldn't match\", id, indexedShapes, queryShape);\n        }\n      }\n      if (!remainingExpectedIds.isEmpty()) {\n        String id = remainingExpectedIds.iterator().next();\n        fail(\"Should have matched\", id, indexedShapes, queryShape);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0521546db127e358ced1772a9d696dbdd255b203":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0521546db127e358ced1772a9d696dbdd255b203"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["0521546db127e358ced1772a9d696dbdd255b203"],"0521546db127e358ced1772a9d696dbdd255b203":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}