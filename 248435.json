{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGangliaReporter#start().mjava","commits":[{"id":"6ec5db7acd7b6e2289702f52a15f6aec3680dbf1","date":1482864726,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGangliaReporter#start().mjava","pathOld":"/dev/null","sourceNew":"  //this is a separate method for unit tests\n  void start() {\n    if (!testing) {\n      try {\n        ganglia = new GMetric(host, port,\n            multicast ? GMetric.UDPAddressingMode.MULTICAST : GMetric.UDPAddressingMode.UNICAST,\n            1);\n      } catch (IOException ioe) {\n        throw new IllegalStateException(\"Exception connecting to Ganglia\", ioe);\n      }\n    }\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GangliaReporter.Builder builder = GangliaReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .prefixedWith(instancePrefix);\n    MetricFilter filter;\n    if (filterPrefix != null) {\n      filter = new SolrMetricManager.PrefixFilter(filterPrefix);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(ganglia);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGangliaReporter#start().mjava","pathOld":"/dev/null","sourceNew":"  //this is a separate method for unit tests\n  void start() {\n    if (!testing) {\n      try {\n        ganglia = new GMetric(host, port,\n            multicast ? GMetric.UDPAddressingMode.MULTICAST : GMetric.UDPAddressingMode.UNICAST,\n            1);\n      } catch (IOException ioe) {\n        throw new IllegalStateException(\"Exception connecting to Ganglia\", ioe);\n      }\n    }\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GangliaReporter.Builder builder = GangliaReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .prefixedWith(instancePrefix);\n    MetricFilter filter;\n    if (filterPrefix != null) {\n      filter = new SolrMetricManager.PrefixFilter(filterPrefix);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(ganglia);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGangliaReporter#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGangliaReporter#start().mjava","sourceNew":"  //this is a separate method for unit tests\n  void start() {\n    if (!testing) {\n      String id = host + \":\" + port + \":\" + multicast;\n      ganglia = serviceRegistry.getOrCreate(id, () -> new GMetric(host, port,\n          multicast ? GMetric.UDPAddressingMode.MULTICAST : GMetric.UDPAddressingMode.UNICAST,\n          1));\n      if (ganglia == null) {\n        return;\n      }\n    }\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GangliaReporter.Builder builder = GangliaReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .prefixedWith(instancePrefix);\n    MetricFilter filter;\n    if (!filters.isEmpty()) {\n      filter = new SolrMetricManager.PrefixFilter(filters);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(ganglia);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  //this is a separate method for unit tests\n  void start() {\n    if (!testing) {\n      try {\n        ganglia = new GMetric(host, port,\n            multicast ? GMetric.UDPAddressingMode.MULTICAST : GMetric.UDPAddressingMode.UNICAST,\n            1);\n      } catch (IOException ioe) {\n        throw new IllegalStateException(\"Exception connecting to Ganglia\", ioe);\n      }\n    }\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GangliaReporter.Builder builder = GangliaReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .prefixedWith(instancePrefix);\n    MetricFilter filter;\n    if (filterPrefix != null) {\n      filter = new SolrMetricManager.PrefixFilter(filterPrefix);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(ganglia);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGangliaReporter#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGangliaReporter#start().mjava","sourceNew":"  //this is a separate method for unit tests\n  void start() {\n    if (!testing) {\n      String id = host + \":\" + port + \":\" + multicast;\n      ganglia = serviceRegistry.getOrCreate(id, () -> new GMetric(host, port,\n          multicast ? GMetric.UDPAddressingMode.MULTICAST : GMetric.UDPAddressingMode.UNICAST,\n          1));\n      if (ganglia == null) {\n        return;\n      }\n    }\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GangliaReporter.Builder builder = GangliaReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .prefixedWith(instancePrefix);\n    MetricFilter filter;\n    if (!filters.isEmpty()) {\n      filter = new SolrMetricManager.PrefixFilter(filters);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(ganglia);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  //this is a separate method for unit tests\n  void start() {\n    if (!testing) {\n      try {\n        ganglia = new GMetric(host, port,\n            multicast ? GMetric.UDPAddressingMode.MULTICAST : GMetric.UDPAddressingMode.UNICAST,\n            1);\n      } catch (IOException ioe) {\n        throw new IllegalStateException(\"Exception connecting to Ganglia\", ioe);\n      }\n    }\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GangliaReporter.Builder builder = GangliaReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .prefixedWith(instancePrefix);\n    MetricFilter filter;\n    if (filterPrefix != null) {\n      filter = new SolrMetricManager.PrefixFilter(filterPrefix);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(ganglia);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a","date":1499173980,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGangliaReporter#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGangliaReporter#start().mjava","sourceNew":"  //this is a separate method for unit tests\n  void start() {\n    if (!testing) {\n      String id = host + \":\" + port + \":\" + multicast;\n      ganglia = serviceRegistry.getOrCreate(id, () -> new GMetric(host, port,\n          multicast ? GMetric.UDPAddressingMode.MULTICAST : GMetric.UDPAddressingMode.UNICAST,\n          1));\n      if (ganglia == null) {\n        return;\n      }\n    }\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GangliaReporter.Builder builder = GangliaReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .prefixedWith(instancePrefix);\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    reporter = builder.build(ganglia);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  //this is a separate method for unit tests\n  void start() {\n    if (!testing) {\n      String id = host + \":\" + port + \":\" + multicast;\n      ganglia = serviceRegistry.getOrCreate(id, () -> new GMetric(host, port,\n          multicast ? GMetric.UDPAddressingMode.MULTICAST : GMetric.UDPAddressingMode.UNICAST,\n          1));\n      if (ganglia == null) {\n        return;\n      }\n    }\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GangliaReporter.Builder builder = GangliaReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .prefixedWith(instancePrefix);\n    MetricFilter filter;\n    if (!filters.isEmpty()) {\n      filter = new SolrMetricManager.PrefixFilter(filters);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(ganglia);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGangliaReporter#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGangliaReporter#start().mjava","sourceNew":"  //this is a separate method for unit tests\n  void start() {\n    if (!testing) {\n      String id = host + \":\" + port + \":\" + multicast;\n      ganglia = serviceRegistry.getOrCreate(id, () -> new GMetric(host, port,\n          multicast ? GMetric.UDPAddressingMode.MULTICAST : GMetric.UDPAddressingMode.UNICAST,\n          1));\n      if (ganglia == null) {\n        return;\n      }\n    }\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GangliaReporter.Builder builder = GangliaReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .prefixedWith(instancePrefix);\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    reporter = builder.build(ganglia);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  //this is a separate method for unit tests\n  void start() {\n    if (!testing) {\n      String id = host + \":\" + port + \":\" + multicast;\n      ganglia = serviceRegistry.getOrCreate(id, () -> new GMetric(host, port,\n          multicast ? GMetric.UDPAddressingMode.MULTICAST : GMetric.UDPAddressingMode.UNICAST,\n          1));\n      if (ganglia == null) {\n        return;\n      }\n    }\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GangliaReporter.Builder builder = GangliaReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .prefixedWith(instancePrefix);\n    MetricFilter filter;\n    if (!filters.isEmpty()) {\n      filter = new SolrMetricManager.PrefixFilter(filters);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(ganglia);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90f8f57b02301cce9a16e8ac900fb6aef3cd18a9","date":1555607300,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGangliaReporter#start().mjava","sourceNew":null,"sourceOld":"  //this is a separate method for unit tests\n  void start() {\n    if (!testing) {\n      String id = host + \":\" + port + \":\" + multicast;\n      ganglia = serviceRegistry.getOrCreate(id, () -> new GMetric(host, port,\n          multicast ? GMetric.UDPAddressingMode.MULTICAST : GMetric.UDPAddressingMode.UNICAST,\n          1));\n      if (ganglia == null) {\n        return;\n      }\n    }\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GangliaReporter.Builder builder = GangliaReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .prefixedWith(instancePrefix);\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    reporter = builder.build(ganglia);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["6ec5db7acd7b6e2289702f52a15f6aec3680dbf1"],"13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a"],"6ec5db7acd7b6e2289702f52a15f6aec3680dbf1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90f8f57b02301cce9a16e8ac900fb6aef3cd18a9":["13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["6ec5db7acd7b6e2289702f52a15f6aec3680dbf1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90f8f57b02301cce9a16e8ac900fb6aef3cd18a9"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6ec5db7acd7b6e2289702f52a15f6aec3680dbf1"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","90f8f57b02301cce9a16e8ac900fb6aef3cd18a9"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"6ec5db7acd7b6e2289702f52a15f6aec3680dbf1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"90f8f57b02301cce9a16e8ac900fb6aef3cd18a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ec5db7acd7b6e2289702f52a15f6aec3680dbf1","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"816521ebaad5add9cb96bb88c577394e2938c40b":["13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}