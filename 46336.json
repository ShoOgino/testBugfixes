{"path":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertSameResults(List[FacetResult],List[FacetResult]).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertSameResults(List[FacetResult],List[FacetResult]).mjava","pathOld":"/dev/null","sourceNew":"  /** Validate results equality */\n  protected static void assertSameResults(List<FacetResult> expected,\n                                          List<FacetResult> actual) {\n    String expectedResults = resStringValueOnly(expected);\n    String actualResults = resStringValueOnly(actual);\n    if (!expectedResults.equals(actualResults)) {\n      System.err.println(\"Results are not the same!\");\n      System.err.println(\"Expected:\\n\" + expectedResults);\n      System.err.println(\"Actual\" + actualResults);\n      fail(\"Results are not the same!\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["99b17503f4e360f8140fe80a593268486cd718b4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertSameResults(List[FacetResult],List[FacetResult]).mjava","pathOld":"/dev/null","sourceNew":"  /** Validate results equality */\n  protected static void assertSameResults(List<FacetResult> expected,\n                                          List<FacetResult> actual) {\n    String expectedResults = resStringValueOnly(expected);\n    String actualResults = resStringValueOnly(actual);\n    if (!expectedResults.equals(actualResults)) {\n      System.err.println(\"Results are not the same!\");\n      System.err.println(\"Expected:\\n\" + expectedResults);\n      System.err.println(\"Actual\" + actualResults);\n      fail(\"Results are not the same!\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertSameResults(List[FacetResult],List[FacetResult]).mjava","pathOld":"/dev/null","sourceNew":"  /** Validate results equality */\n  protected static void assertSameResults(List<FacetResult> expected,\n                                          List<FacetResult> actual) {\n    String expectedResults = resStringValueOnly(expected);\n    String actualResults = resStringValueOnly(actual);\n    if (!expectedResults.equals(actualResults)) {\n      System.err.println(\"Results are not the same!\");\n      System.err.println(\"Expected:\\n\" + expectedResults);\n      System.err.println(\"Actual\" + actualResults);\n      fail(\"Results are not the same!\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99b17503f4e360f8140fe80a593268486cd718b4","date":1318337685,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertSameResults(List[FacetResult],List[FacetResult]).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertSameResults(List[FacetResult],List[FacetResult]).mjava","sourceNew":"  /** Validate results equality */\n  protected static void assertSameResults(List<FacetResult> expected,\n                                          List<FacetResult> actual) {\n    String expectedResults = resStringValueOnly(expected);\n    String actualResults = resStringValueOnly(actual);\n    if (!expectedResults.equals(actualResults)) {\n      System.err.println(\"Results are not the same!\");\n      System.err.println(\"Expected:\\n\" + expectedResults);\n      System.err.println(\"Actual\" + actualResults);\n      throw new NotSameResultError();\n    }\n  }\n\n","sourceOld":"  /** Validate results equality */\n  protected static void assertSameResults(List<FacetResult> expected,\n                                          List<FacetResult> actual) {\n    String expectedResults = resStringValueOnly(expected);\n    String actualResults = resStringValueOnly(actual);\n    if (!expectedResults.equals(actualResults)) {\n      System.err.println(\"Results are not the same!\");\n      System.err.println(\"Expected:\\n\" + expectedResults);\n      System.err.println(\"Actual\" + actualResults);\n      fail(\"Results are not the same!\");\n    }\n  }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertSameResults(List[FacetResult],List[FacetResult]).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#assertSameResults(List[FacetResult],List[FacetResult]).mjava","sourceNew":"  /** Validate results equality */\n  protected static void assertSameResults(List<FacetResult> expected,\n                                          List<FacetResult> actual) {\n    String expectedResults = resStringValueOnly(expected);\n    String actualResults = resStringValueOnly(actual);\n    if (!expectedResults.equals(actualResults)) {\n      System.err.println(\"Results are not the same!\");\n      System.err.println(\"Expected:\\n\" + expectedResults);\n      System.err.println(\"Actual\" + actualResults);\n      throw new NotSameResultError();\n    }\n  }\n\n","sourceOld":"  /** Validate results equality */\n  protected static void assertSameResults(List<FacetResult> expected,\n                                          List<FacetResult> actual) {\n    String expectedResults = resStringValueOnly(expected);\n    String actualResults = resStringValueOnly(actual);\n    if (!expectedResults.equals(actualResults)) {\n      System.err.println(\"Results are not the same!\");\n      System.err.println(\"Expected:\\n\" + expectedResults);\n      System.err.println(\"Actual\" + actualResults);\n      throw new NotSameResultError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["99b17503f4e360f8140fe80a593268486cd718b4"],"99b17503f4e360f8140fe80a593268486cd718b4":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"99b17503f4e360f8140fe80a593268486cd718b4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["99b17503f4e360f8140fe80a593268486cd718b4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}