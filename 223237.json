{"path":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#iterator(Comparator[BytesRef]).mjava","commits":[{"id":"ce73f585d17f53055185a19beb46db23d76e0ad9","date":1353077110,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#iterator(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"847d1294c8ff2f0172af20892ef98a1c6a952e09","date":1359503775,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#iterator(Comparator[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#iterator(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] indices = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, indices == null ? pos++ : indices[pos++]);\n        }\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] indices = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, indices == null ? pos++ : indices[pos++]);\n        }\n        return null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#iterator(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] indices = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, indices == null ? pos++ : indices[pos++]);\n        }\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] indices = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, indices == null ? pos++ : indices[pos++]);\n        }\n        return null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#iterator(Comparator[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRefBuilder spare = new BytesRefBuilder();\n    final int size = size();\n    final int[] indices = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, indices == null ? pos++ : indices[pos++]);\n        }\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] indices = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, indices == null ? pos++ : indices[pos++]);\n        }\n        return null;\n      }\n    };\n  }\n\n","bugFix":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73860c1174109b7d888d50a10088afb18293b153","date":1457392330,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#iterator(Comparator[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRefBuilder spare = new BytesRefBuilder();\n    final BytesRef result = new BytesRef();\n    final int size = size();\n    final int[] indices = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          setBytesRef(spare, result, indices == null ? pos++ : indices[pos++]);\n          return result;\n        }\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRefBuilder spare = new BytesRefBuilder();\n    final int size = size();\n    final int[] indices = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, indices == null ? pos++ : indices[pos++]);\n        }\n        return null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee52259641568741fbc6ecc51284431e2a36475c","date":1459331525,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#iterator(Comparator[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  @Override\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRefBuilder spare = new BytesRefBuilder();\n    final BytesRef result = new BytesRef();\n    final int size = size();\n    final int[] indices = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          setBytesRef(spare, result, indices == null ? pos++ : indices[pos++]);\n          return result;\n        }\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRefBuilder spare = new BytesRefBuilder();\n    final BytesRef result = new BytesRef();\n    final int size = size();\n    final int[] indices = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          setBytesRef(spare, result, indices == null ? pos++ : indices[pos++]);\n          return result;\n        }\n        return null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83b6ce113ec151d7bf9175578d92d5320f91ab2e","date":1544711434,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#iterator(Comparator[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  @Override\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRefBuilder spare = new BytesRefBuilder();\n    final BytesRef result = new BytesRef();\n    final int size = size();\n    final int[] indices = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          setBytesRef(spare, result, indices == null ? pos++ : indices[pos++]);\n          return result;\n        }\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  @Override\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRefBuilder spare = new BytesRefBuilder();\n    final BytesRef result = new BytesRef();\n    final int size = size();\n    final int[] indices = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          setBytesRef(spare, result, indices == null ? pos++ : indices[pos++]);\n          return result;\n        }\n        return null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8","date":1582222690,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#iterator(Comparator[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  @Override\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    return iterator(sort(comp, (i, j) -> 0));\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  @Override\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRefBuilder spare = new BytesRefBuilder();\n    final BytesRef result = new BytesRef();\n    final int size = size();\n    final int[] indices = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          setBytesRef(spare, result, indices == null ? pos++ : indices[pos++]);\n          return result;\n        }\n        return null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8":["83b6ce113ec151d7bf9175578d92d5320f91ab2e"],"83b6ce113ec151d7bf9175578d92d5320f91ab2e":["ee52259641568741fbc6ecc51284431e2a36475c"],"ce73f585d17f53055185a19beb46db23d76e0ad9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","36f5a8c57e16c0f801006a52f87c75378427852e"],"73860c1174109b7d888d50a10088afb18293b153":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"36f5a8c57e16c0f801006a52f87c75378427852e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee52259641568741fbc6ecc51284431e2a36475c":["73860c1174109b7d888d50a10088afb18293b153"],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["ce73f585d17f53055185a19beb46db23d76e0ad9"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8"]},"commit2Childs":{"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83b6ce113ec151d7bf9175578d92d5320f91ab2e":["fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8"],"ce73f585d17f53055185a19beb46db23d76e0ad9":["847d1294c8ff2f0172af20892ef98a1c6a952e09"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"73860c1174109b7d888d50a10088afb18293b153":["ee52259641568741fbc6ecc51284431e2a36475c"],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce73f585d17f53055185a19beb46db23d76e0ad9","ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e"],"ee52259641568741fbc6ecc51284431e2a36475c":["83b6ce113ec151d7bf9175578d92d5320f91ab2e"],"847d1294c8ff2f0172af20892ef98a1c6a952e09":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["73860c1174109b7d888d50a10088afb18293b153"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["847d1294c8ff2f0172af20892ef98a1c6a952e09","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}