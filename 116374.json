{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testHashCodeAndEquals().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testHashCodeAndEquals().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testHashCodeAndEquals().mjava","sourceNew":"  public void testHashCodeAndEquals() {\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1, query2);\n    \n    Term term1 = new Term(\"someField\", \"someText\");\n    \n    query1.add(term1);\n    query2.add(term1);\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1, query2);\n    \n    Term term2 = new Term(\"someField\", \"someMoreText\");\n    \n    query1.add(term2);\n    \n    assertFalse(query1.hashCode() == query2.hashCode());\n    assertFalse(query1.equals(query2));\n    \n    query2.add(term2);\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1, query2);\n  }\n\n","sourceOld":"  public void testHashCodeAndEquals() {\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1, query2);\n    \n    Term term1 = new Term(\"someField\", \"someText\");\n    \n    query1.add(term1);\n    query2.add(term1);\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1, query2);\n    \n    Term term2 = new Term(\"someField\", \"someMoreText\");\n    \n    query1.add(term2);\n    \n    assertFalse(query1.hashCode() == query2.hashCode());\n    assertFalse(query1.equals(query2));\n    \n    query2.add(term2);\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1, query2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b4a131f1796dd57cc6698aae3d589d32a29deb","date":1457087316,"type":3,"author":"Luc Vanlerberghe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testHashCodeAndEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testHashCodeAndEquals().mjava","sourceNew":"  public void testHashCodeAndEquals() {\n    MultiPhraseQuery.Builder query1builder = new MultiPhraseQuery.Builder();\n    MultiPhraseQuery query1 = query1builder.build();\n    \n    MultiPhraseQuery.Builder query2builder = new MultiPhraseQuery.Builder();\n    MultiPhraseQuery query2 = query2builder.build();\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1, query2);\n    \n    Term term1 = new Term(\"someField\", \"someText\");\n    \n    query1builder.add(term1);\n    query1 = query1builder.build();\n\n    query2builder.add(term1);\n    query2 = query2builder.build();\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1, query2);\n    \n    Term term2 = new Term(\"someField\", \"someMoreText\");\n    \n    query1builder.add(term2);\n    query1 = query1builder.build();\n    \n    assertFalse(query1.hashCode() == query2.hashCode());\n    assertFalse(query1.equals(query2));\n    \n    query2builder.add(term2);\n    query2 = query2builder.build();\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1, query2);\n  }\n\n","sourceOld":"  public void testHashCodeAndEquals() {\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1, query2);\n    \n    Term term1 = new Term(\"someField\", \"someText\");\n    \n    query1.add(term1);\n    query2.add(term1);\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1, query2);\n    \n    Term term2 = new Term(\"someField\", \"someMoreText\");\n    \n    query1.add(term2);\n    \n    assertFalse(query1.hashCode() == query2.hashCode());\n    assertFalse(query1.equals(query2));\n    \n    query2.add(term2);\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1, query2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testHashCodeAndEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testHashCodeAndEquals().mjava","sourceNew":"  public void testHashCodeAndEquals() {\n    MultiPhraseQuery.Builder query1builder = new MultiPhraseQuery.Builder();\n    MultiPhraseQuery query1 = query1builder.build();\n    \n    MultiPhraseQuery.Builder query2builder = new MultiPhraseQuery.Builder();\n    MultiPhraseQuery query2 = query2builder.build();\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1, query2);\n    \n    Term term1 = new Term(\"someField\", \"someText\");\n    \n    query1builder.add(term1);\n    query1 = query1builder.build();\n\n    query2builder.add(term1);\n    query2 = query2builder.build();\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1, query2);\n    \n    Term term2 = new Term(\"someField\", \"someMoreText\");\n    \n    query1builder.add(term2);\n    query1 = query1builder.build();\n    \n    assertFalse(query1.hashCode() == query2.hashCode());\n    assertFalse(query1.equals(query2));\n    \n    query2builder.add(term2);\n    query2 = query2builder.build();\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1, query2);\n  }\n\n","sourceOld":"  public void testHashCodeAndEquals() {\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1, query2);\n    \n    Term term1 = new Term(\"someField\", \"someText\");\n    \n    query1.add(term1);\n    query2.add(term1);\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1, query2);\n    \n    Term term2 = new Term(\"someField\", \"someMoreText\");\n    \n    query1.add(term2);\n    \n    assertFalse(query1.hashCode() == query2.hashCode());\n    assertFalse(query1.equals(query2));\n    \n    query2.add(term2);\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1, query2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92b4a131f1796dd57cc6698aae3d589d32a29deb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","92b4a131f1796dd57cc6698aae3d589d32a29deb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"92b4a131f1796dd57cc6698aae3d589d32a29deb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["92b4a131f1796dd57cc6698aae3d589d32a29deb","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}