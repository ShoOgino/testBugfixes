{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readEntity().mjava","commits":[{"id":"9b31138e7b06f84b96de212b2102103cb629ee68","date":1272962032,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readEntity().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readEntity().mjava","sourceNew":"  private int readEntity() throws IOException {\n    int ch = next();\n    if (ch=='#') return readNumericEntity();\n\n    //read an entity reference\n\n    // for an entity reference, require the ';' for safety.\n    // otherwise we may try and convert part of some company\n    // names to an entity.  \"Alpha&Beta Corp\" for instance.\n    //\n    // TODO: perhaps I should special case some of the\n    // more common ones like &amp to make the ';' optional...\n\n    sb.setLength(0);\n    sb.append((char)ch);\n\n    for (int i=0; i< safeReadAheadLimit; i++) {\n      ch=next();\n      if (Character.isLetter(ch)) {\n        sb.append((char)ch);\n      } else {\n        break;\n      }\n    }\n\n    if (ch==';') {\n      String entity=sb.toString();\n      Character entityChar = entityTable.get(entity);\n      if (entityChar!=null) {\n        numWhitespace = entity.length() + 1 ;\n        return entityChar.charValue();\n      }\n    }\n\n    return MISMATCH;\n  }\n\n","sourceOld":"  private int readEntity() throws IOException {\n    int ch = next();\n    if (ch=='#') return readNumericEntity();\n\n    //read an entity reference\n\n    // for an entity reference, require the ';' for safety.\n    // otherwise we may try and convert part of some company\n    // names to an entity.  \"Alpha&Beta Corp\" for instance.\n    //\n    // TODO: perhaps I should special case some of the\n    // more common ones like &amp to make the ';' optional...\n\n    sb.setLength(0);\n    sb.append((char)ch);\n\n    for (int i=0; i< safeReadAheadLimit; i++) {\n      ch=next();\n      if (Character.isLetter(ch)) {\n        sb.append((char)ch);\n      } else {\n        break;\n      }\n    }\n\n    if (ch==';') {\n      String entity=sb.toString();\n      Character entityChar = entityTable.get(entity);\n      if (entityChar!=null) {\n        numWhitespace = entity.length() + 1 ;\n        return entityChar.charValue();\n      }\n    }\n\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readEntity().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readEntity().mjava","sourceNew":"  private int readEntity() throws IOException {\n    int ch = next();\n    if (ch=='#') return readNumericEntity();\n\n    //read an entity reference\n\n    // for an entity reference, require the ';' for safety.\n    // otherwise we may try and convert part of some company\n    // names to an entity.  \"Alpha&Beta Corp\" for instance.\n    //\n    // TODO: perhaps I should special case some of the\n    // more common ones like &amp to make the ';' optional...\n\n    sb.setLength(0);\n    sb.append((char)ch);\n\n    for (int i=0; i< safeReadAheadLimit; i++) {\n      ch=next();\n      if (Character.isLetter(ch)) {\n        sb.append((char)ch);\n      } else {\n        break;\n      }\n    }\n\n    if (ch==';') {\n      String entity=sb.toString();\n      Character entityChar = entityTable.get(entity);\n      if (entityChar!=null) {\n        numWhitespace = entity.length() + 1 ;\n        return entityChar.charValue();\n      }\n    }\n\n    return MISMATCH;\n  }\n\n","sourceOld":"  private int readEntity() throws IOException {\n    int ch = next();\n    if (ch=='#') return readNumericEntity();\n\n    //read an entity reference\n\n    // for an entity reference, require the ';' for safety.\n    // otherwise we may try and convert part of some company\n    // names to an entity.  \"Alpha&Beta Corp\" for instance.\n    //\n    // TODO: perhaps I should special case some of the\n    // more common ones like &amp to make the ';' optional...\n\n    sb.setLength(0);\n    sb.append((char)ch);\n\n    for (int i=0; i< safeReadAheadLimit; i++) {\n      ch=next();\n      if (Character.isLetter(ch)) {\n        sb.append((char)ch);\n      } else {\n        break;\n      }\n    }\n\n    if (ch==';') {\n      String entity=sb.toString();\n      Character entityChar = entityTable.get(entity);\n      if (entityChar!=null) {\n        numWhitespace = entity.length() + 1 ;\n        return entityChar.charValue();\n      }\n    }\n\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b31138e7b06f84b96de212b2102103cb629ee68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9b31138e7b06f84b96de212b2102103cb629ee68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"9b31138e7b06f84b96de212b2102103cb629ee68":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b31138e7b06f84b96de212b2102103cb629ee68"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}