{"path":"src/java/org/apache/lucene/search/spans/SpanScorer#SpanScorer(Spans,Weight,Similarity,byte[]).mjava","commits":[{"id":"0bcbf4ed0baed877c8b36d024e17a99bedfdd904","date":1075500600,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanScorer#SpanScorer(Spans,Weight,Similarity,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  SpanScorer(Spans spans, Weight weight, Similarity similarity, byte[] norms)\n    throws IOException {\n    super(similarity);\n    this.spans = spans;\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c62564d5adf82d1fc178ea3e881841b5ae83a94","date":1144164358,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanScorer#SpanScorer(Spans,Weight,Similarity,byte[]).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanScorer#SpanScorer(Spans,Weight,Similarity,byte[]).mjava","sourceNew":"  SpanScorer(Spans spans, Weight weight, Similarity similarity, byte[] norms)\n    throws IOException {\n    super(similarity);\n    this.spans = spans;\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n    doc = -1;\n  }\n\n","sourceOld":"  SpanScorer(Spans spans, Weight weight, Similarity similarity, byte[] norms)\n    throws IOException {\n    super(similarity);\n    this.spans = spans;\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5426a570e28de2804e59c68509fe71ab7f43afe5","date":1175086695,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanScorer#SpanScorer(Spans,Weight,Similarity,byte[]).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanScorer#SpanScorer(Spans,Weight,Similarity,byte[]).mjava","sourceNew":"  protected SpanScorer(Spans spans, Weight weight, Similarity similarity, byte[] norms)\n    throws IOException {\n    super(similarity);\n    this.spans = spans;\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n    doc = -1;\n  }\n\n","sourceOld":"  SpanScorer(Spans spans, Weight weight, Similarity similarity, byte[] norms)\n    throws IOException {\n    super(similarity);\n    this.spans = spans;\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n    doc = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanScorer#SpanScorer(Spans,Weight,Similarity,byte[]).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanScorer#SpanScorer(Spans,Weight,Similarity,byte[]).mjava","sourceNew":"  protected SpanScorer(Spans spans, Weight weight, Similarity similarity, byte[] norms)\n    throws IOException {\n    super(similarity);\n    this.spans = spans;\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n    if (this.spans.next()) {\n      doc = -1;\n    } else {\n      doc = NO_MORE_DOCS;\n      more = false;\n    }\n  }\n\n","sourceOld":"  protected SpanScorer(Spans spans, Weight weight, Similarity similarity, byte[] norms)\n    throws IOException {\n    super(similarity);\n    this.spans = spans;\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n    doc = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanScorer#SpanScorer(Spans,Weight,Similarity,byte[]).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanScorer#SpanScorer(Spans,Weight,Similarity,byte[]).mjava","sourceNew":"  /** @deprecated use {@link #SpanScorer(Spans, QueryWeight, Similarity, byte[])} instead.*/\n  protected SpanScorer(Spans spans, Weight weight, Similarity similarity, byte[] norms)\n    throws IOException {\n    this(spans, new QueryWeightWrapper(weight), similarity, norms);\n  }\n\n","sourceOld":"  protected SpanScorer(Spans spans, Weight weight, Similarity similarity, byte[] norms)\n    throws IOException {\n    super(similarity);\n    this.spans = spans;\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n    if (this.spans.next()) {\n      doc = -1;\n    } else {\n      doc = NO_MORE_DOCS;\n      more = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanScorer#SpanScorer(Spans,Weight,Similarity,byte[]).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanScorer#SpanScorer(Spans,Weight,Similarity,byte[]).mjava","sourceNew":"  protected SpanScorer(Spans spans, Weight weight, Similarity similarity, byte[] norms)\n  throws IOException {\n    super(similarity);\n    this.spans = spans;\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n    if (this.spans.next()) {\n      doc = -1;\n    } else {\n      doc = NO_MORE_DOCS;\n      more = false;\n    }\n  }\n\n","sourceOld":"  /** @deprecated use {@link #SpanScorer(Spans, QueryWeight, Similarity, byte[])} instead.*/\n  protected SpanScorer(Spans spans, Weight weight, Similarity similarity, byte[] norms)\n    throws IOException {\n    this(spans, new QueryWeightWrapper(weight), similarity, norms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanScorer#SpanScorer(Spans,Weight,Similarity,byte[]).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanScorer#SpanScorer(Spans,Weight,Similarity,byte[]).mjava","sourceNew":"  protected SpanScorer(Spans spans, Weight weight, Similarity similarity, byte[] norms)\n  throws IOException {\n    super(similarity);\n    this.spans = spans;\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n    if (this.spans.next()) {\n      doc = -1;\n    } else {\n      doc = NO_MORE_DOCS;\n      more = false;\n    }\n  }\n\n","sourceOld":"  protected SpanScorer(Spans spans, Weight weight, Similarity similarity, byte[] norms)\n  throws IOException {\n    super(similarity);\n    this.spans = spans;\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n    if (this.spans.next()) {\n      doc = -1;\n    } else {\n      doc = NO_MORE_DOCS;\n      more = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30a558487f2298c2c19ceca9103c1b6865d64708":["5426a570e28de2804e59c68509fe71ab7f43afe5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"5426a570e28de2804e59c68509fe71ab7f43afe5":["7c62564d5adf82d1fc178ea3e881841b5ae83a94"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"052fac7830290bd38a04cddee1a121ee07656b56":["30a558487f2298c2c19ceca9103c1b6865d64708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fe941135bdfc28c81e20b4d21422f8726af34925"],"7c62564d5adf82d1fc178ea3e881841b5ae83a94":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"]},"commit2Childs":{"30a558487f2298c2c19ceca9103c1b6865d64708":["052fac7830290bd38a04cddee1a121ee07656b56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"fe941135bdfc28c81e20b4d21422f8726af34925":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5426a570e28de2804e59c68509fe71ab7f43afe5":["30a558487f2298c2c19ceca9103c1b6865d64708"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["7c62564d5adf82d1fc178ea3e881841b5ae83a94"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"7c62564d5adf82d1fc178ea3e881841b5ae83a94":["5426a570e28de2804e59c68509fe71ab7f43afe5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}