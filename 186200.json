{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#resolveAliases(List[String]).mjava","commits":[{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#resolveAliases(List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#resolveAliases(List[String]).mjava","sourceNew":"  /** Resolves the input collections to their possible aliased collections. Doesn't validate collection existence. */\n  private LinkedHashSet<String> resolveAliases(List<String> inputCollections) {\n    LinkedHashSet<String> collectionNames = new LinkedHashSet<>(); // consistent ordering\n    for (String collectionName : inputCollections) {\n      if (getClusterStateProvider().getState(collectionName) == null) {\n        // perhaps it's an alias\n        List<String> aliasedCollections = getClusterStateProvider().resolveAlias(collectionName);\n        // one more level of alias indirection...  (dubious that we should support this)\n        for (String aliasedCollection : aliasedCollections) {\n          collectionNames.addAll(getClusterStateProvider().resolveAlias(aliasedCollection));\n        }\n      } else {\n        collectionNames.add(collectionName); // it's a collection\n      }\n    }\n    return collectionNames;\n  }\n\n","sourceOld":"  /** Resolves the input collections to their possible aliased collections. Doesn't validate collection existence. */\n  private LinkedHashSet<String> resolveAliases(List<String> inputCollections) {\n    LinkedHashSet<String> collectionNames = new LinkedHashSet<>(); // consistent ordering\n    for (String collectionName : inputCollections) {\n      if (stateProvider.getState(collectionName) == null) {\n        // perhaps it's an alias\n        List<String> aliasedCollections = stateProvider.resolveAlias(collectionName);\n        // one more level of alias indirection...  (dubious that we should support this)\n        for (String aliasedCollection : aliasedCollections) {\n          collectionNames.addAll(stateProvider.resolveAlias(aliasedCollection));\n        }\n      } else {\n        collectionNames.add(collectionName); // it's a collection\n      }\n    }\n    return collectionNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59bad1cc1e7f90125a140496e79b06afcedb68ec","date":1554915399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#resolveAliases(List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#resolveAliases(List[String]).mjava","sourceNew":"  /** Resolves the input collections to their possible aliased collections. Doesn't validate collection existence. */\n  private LinkedHashSet<String> resolveAliases(List<String> inputCollections) {\n    LinkedHashSet<String> collectionNames = new LinkedHashSet<>(); // consistent ordering\n    for (String collectionName : inputCollections) {\n      if (getClusterStateProvider().getState(collectionName) == null) {\n        // perhaps it's an alias\n        collectionNames.addAll(getClusterStateProvider().resolveAlias(collectionName));\n      } else {\n        collectionNames.add(collectionName); // it's a collection\n      }\n    }\n    return collectionNames;\n  }\n\n","sourceOld":"  /** Resolves the input collections to their possible aliased collections. Doesn't validate collection existence. */\n  private LinkedHashSet<String> resolveAliases(List<String> inputCollections) {\n    LinkedHashSet<String> collectionNames = new LinkedHashSet<>(); // consistent ordering\n    for (String collectionName : inputCollections) {\n      if (getClusterStateProvider().getState(collectionName) == null) {\n        // perhaps it's an alias\n        List<String> aliasedCollections = getClusterStateProvider().resolveAlias(collectionName);\n        // one more level of alias indirection...  (dubious that we should support this)\n        for (String aliasedCollection : aliasedCollections) {\n          collectionNames.addAll(getClusterStateProvider().resolveAlias(aliasedCollection));\n        }\n      } else {\n        collectionNames.add(collectionName); // it's a collection\n      }\n    }\n    return collectionNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"813335f324f8bd40ae4d83d8391674b42b536cc0","date":1555591986,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#resolveAliases(List[String],boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#resolveAliases(List[String]).mjava","sourceNew":"  /** Resolves the input collections to their possible aliased collections. Doesn't validate collection existence. */\n  private Set<String> resolveAliases(List<String> inputCollections, boolean isUpdate) {\n    if (inputCollections.isEmpty()) {\n      return Collections.emptySet();\n    }\n    LinkedHashSet<String> uniqueNames = new LinkedHashSet<>(); // consistent ordering\n    for (String collectionName : inputCollections) {\n      if (getClusterStateProvider().getState(collectionName) == null) {\n        // perhaps it's an alias\n        uniqueNames.addAll(getClusterStateProvider().resolveAlias(collectionName));\n      } else {\n        uniqueNames.add(collectionName); // it's a collection\n      }\n    }\n    return uniqueNames;\n  }\n\n","sourceOld":"  /** Resolves the input collections to their possible aliased collections. Doesn't validate collection existence. */\n  private LinkedHashSet<String> resolveAliases(List<String> inputCollections) {\n    LinkedHashSet<String> collectionNames = new LinkedHashSet<>(); // consistent ordering\n    for (String collectionName : inputCollections) {\n      if (getClusterStateProvider().getState(collectionName) == null) {\n        // perhaps it's an alias\n        collectionNames.addAll(getClusterStateProvider().resolveAlias(collectionName));\n      } else {\n        collectionNames.add(collectionName); // it's a collection\n      }\n    }\n    return collectionNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"813335f324f8bd40ae4d83d8391674b42b536cc0":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["813335f324f8bd40ae4d83d8391674b42b536cc0"]},"commit2Childs":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["813335f324f8bd40ae4d83d8391674b42b536cc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"813335f324f8bd40ae4d83d8391674b42b536cc0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}