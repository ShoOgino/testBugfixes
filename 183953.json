{"path":"lucene/src/java/org/apache/lucene/index/values/SortedBytesMergeUtils.RecordMerger#pullTop().mjava","commits":[{"id":"1346e81f172438a4f28d91266cdd03851f94b831","date":1318404834,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/SortedBytesMergeUtils.RecordMerger#pullTop().mjava","pathOld":"/dev/null","sourceNew":"    private void pullTop() {\n      // extract all subs from the queue that have the same\n      // top record\n      assert numTop == 0;\n      assert currentOrd >= 0;\n      while (true) {\n        final SortedSourceSlice popped = top[numTop++] = queue.pop();\n        // use ord + 1 to identify unreferenced values (ie. == 0)\n        popped.ordMapping[popped.relativeOrd] = currentOrd + 1;\n        if (queue.size() == 0\n            || !(queue.top()).current.bytesEquals(top[0].current)) {\n          break;\n        }\n      }\n      current = top[0].current;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/SortedBytesMergeUtils.RecordMerger#pullTop().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/SortedBytesMergeUtils.RecordMerger#pullTop().mjava","sourceNew":"    private void pullTop() {\n      // extract all subs from the queue that have the same\n      // top record\n      assert numTop == 0;\n      assert currentOrd >= 0;\n      while (true) {\n        final SortedSourceSlice popped = top[numTop++] = queue.pop();\n        // use ord + 1 to identify unreferenced values (ie. == 0)\n        popped.ordMapping[popped.relativeOrd] = currentOrd + 1;\n        if (queue.size() == 0\n            || !(queue.top()).current.bytesEquals(top[0].current)) {\n          break;\n        }\n      }\n      current = top[0].current;\n    }\n\n","sourceOld":"    private void pullTop() {\n      // extract all subs from the queue that have the same\n      // top record\n      assert numTop == 0;\n      assert currentOrd >= 0;\n      while (true) {\n        final SortedSourceSlice popped = top[numTop++] = queue.pop();\n        // use ord + 1 to identify unreferenced values (ie. == 0)\n        popped.ordMapping[popped.relativeOrd] = currentOrd + 1;\n        if (queue.size() == 0\n            || !(queue.top()).current.bytesEquals(top[0].current)) {\n          break;\n        }\n      }\n      current = top[0].current;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SortedBytesMergeUtils.RecordMerger#pullTop().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/SortedBytesMergeUtils.RecordMerger#pullTop().mjava","sourceNew":"    private void pullTop() {\n      // extract all subs from the queue that have the same\n      // top record\n      assert numTop == 0;\n      assert currentOrd >= 0;\n      while (true) {\n        final SortedSourceSlice popped = top[numTop++] = queue.pop();\n        // use ord + 1 to identify unreferenced values (ie. == 0)\n        popped.ordMapping[popped.relativeOrd] = currentOrd + 1;\n        if (queue.size() == 0\n            || !(queue.top()).current.bytesEquals(top[0].current)) {\n          break;\n        }\n      }\n      current = top[0].current;\n    }\n\n","sourceOld":"    private void pullTop() {\n      // extract all subs from the queue that have the same\n      // top record\n      assert numTop == 0;\n      assert currentOrd >= 0;\n      while (true) {\n        final SortedSourceSlice popped = top[numTop++] = queue.pop();\n        // use ord + 1 to identify unreferenced values (ie. == 0)\n        popped.ordMapping[popped.relativeOrd] = currentOrd + 1;\n        if (queue.size() == 0\n            || !(queue.top()).current.bytesEquals(top[0].current)) {\n          break;\n        }\n      }\n      current = top[0].current;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1346e81f172438a4f28d91266cdd03851f94b831":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["1346e81f172438a4f28d91266cdd03851f94b831"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["1346e81f172438a4f28d91266cdd03851f94b831","f9efc72acdea22f5285be0a808f8bba51bb8e367"]},"commit2Childs":{"1346e81f172438a4f28d91266cdd03851f94b831":["f9efc72acdea22f5285be0a808f8bba51bb8e367","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1346e81f172438a4f28d91266cdd03851f94b831"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}