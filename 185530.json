{"path":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#exactDocScorer(Stats,String,AtomicReaderContext).mjava","commits":[{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#exactDocScorer(Stats,String,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ExactDocScorer exactDocScorer(Stats stats, String fieldName,\n      AtomicReaderContext context) throws IOException {\n    byte norms[] = context.reader.norms(fieldName);\n    \n    if (stats instanceof MultiSimilarity.MultiStats) {\n      // a multi term query (e.g. phrase). return the summation, \n      // scoring almost as if it were boolean query\n      Stats subStats[] = ((MultiSimilarity.MultiStats) stats).subStats;\n      ExactDocScorer subScorers[] = new ExactDocScorer[subStats.length];\n      for (int i = 0; i < subScorers.length; i++) {\n        subScorers[i] = new BasicExactDocScorer((BasicStats)subStats[i], norms);\n      }\n      return new MultiSimilarity.MultiExactDocScorer(subScorers);\n    } else {\n      return new BasicExactDocScorer((BasicStats) stats, norms);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d","date":1325789720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#exactDocScorer(Stats,String,AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#exactDocScorer(Stats,String,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public ExactDocScorer exactDocScorer(Stats stats, String fieldName,\n      AtomicReaderContext context) throws IOException {\n    DocValues norms = context.reader.normValues(fieldName);\n    \n    if (stats instanceof MultiSimilarity.MultiStats) {\n      // a multi term query (e.g. phrase). return the summation, \n      // scoring almost as if it were boolean query\n      Stats subStats[] = ((MultiSimilarity.MultiStats) stats).subStats;\n      ExactDocScorer subScorers[] = new ExactDocScorer[subStats.length];\n      for (int i = 0; i < subScorers.length; i++) {\n        subScorers[i] = new BasicExactDocScorer((BasicStats)subStats[i], norms);\n      }\n      return new MultiSimilarity.MultiExactDocScorer(subScorers);\n    } else {\n      return new BasicExactDocScorer((BasicStats) stats, norms);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ExactDocScorer exactDocScorer(Stats stats, String fieldName,\n      AtomicReaderContext context) throws IOException {\n    byte norms[] = context.reader.norms(fieldName);\n    \n    if (stats instanceof MultiSimilarity.MultiStats) {\n      // a multi term query (e.g. phrase). return the summation, \n      // scoring almost as if it were boolean query\n      Stats subStats[] = ((MultiSimilarity.MultiStats) stats).subStats;\n      ExactDocScorer subScorers[] = new ExactDocScorer[subStats.length];\n      for (int i = 0; i < subScorers.length; i++) {\n        subScorers[i] = new BasicExactDocScorer((BasicStats)subStats[i], norms);\n      }\n      return new MultiSimilarity.MultiExactDocScorer(subScorers);\n    } else {\n      return new BasicExactDocScorer((BasicStats) stats, norms);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#exactDocScorer(Stats,String,AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#exactDocScorer(Stats,String,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public ExactDocScorer exactDocScorer(Stats stats, String fieldName,\n      AtomicReaderContext context) throws IOException {\n    DocValues norms = context.reader().normValues(fieldName);\n    \n    if (stats instanceof MultiSimilarity.MultiStats) {\n      // a multi term query (e.g. phrase). return the summation, \n      // scoring almost as if it were boolean query\n      Stats subStats[] = ((MultiSimilarity.MultiStats) stats).subStats;\n      ExactDocScorer subScorers[] = new ExactDocScorer[subStats.length];\n      for (int i = 0; i < subScorers.length; i++) {\n        subScorers[i] = new BasicExactDocScorer((BasicStats)subStats[i], norms);\n      }\n      return new MultiSimilarity.MultiExactDocScorer(subScorers);\n    } else {\n      return new BasicExactDocScorer((BasicStats) stats, norms);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ExactDocScorer exactDocScorer(Stats stats, String fieldName,\n      AtomicReaderContext context) throws IOException {\n    DocValues norms = context.reader.normValues(fieldName);\n    \n    if (stats instanceof MultiSimilarity.MultiStats) {\n      // a multi term query (e.g. phrase). return the summation, \n      // scoring almost as if it were boolean query\n      Stats subStats[] = ((MultiSimilarity.MultiStats) stats).subStats;\n      ExactDocScorer subScorers[] = new ExactDocScorer[subStats.length];\n      for (int i = 0; i < subScorers.length; i++) {\n        subScorers[i] = new BasicExactDocScorer((BasicStats)subStats[i], norms);\n      }\n      return new MultiSimilarity.MultiExactDocScorer(subScorers);\n    } else {\n      return new BasicExactDocScorer((BasicStats) stats, norms);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#exactDocScorer(Stats,String,AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#exactDocScorer(Stats,String,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public ExactDocScorer exactDocScorer(Stats stats, String fieldName,\n      AtomicReaderContext context) throws IOException {\n    DocValues norms = context.reader().normValues(fieldName);\n    \n    if (stats instanceof MultiSimilarity.MultiStats) {\n      // a multi term query (e.g. phrase). return the summation, \n      // scoring almost as if it were boolean query\n      Stats subStats[] = ((MultiSimilarity.MultiStats) stats).subStats;\n      ExactDocScorer subScorers[] = new ExactDocScorer[subStats.length];\n      for (int i = 0; i < subScorers.length; i++) {\n        subScorers[i] = new BasicExactDocScorer((BasicStats)subStats[i], norms);\n      }\n      return new MultiSimilarity.MultiExactDocScorer(subScorers);\n    } else {\n      return new BasicExactDocScorer((BasicStats) stats, norms);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ExactDocScorer exactDocScorer(Stats stats, String fieldName,\n      AtomicReaderContext context) throws IOException {\n    DocValues norms = context.reader.normValues(fieldName);\n    \n    if (stats instanceof MultiSimilarity.MultiStats) {\n      // a multi term query (e.g. phrase). return the summation, \n      // scoring almost as if it were boolean query\n      Stats subStats[] = ((MultiSimilarity.MultiStats) stats).subStats;\n      ExactDocScorer subScorers[] = new ExactDocScorer[subStats.length];\n      for (int i = 0; i < subScorers.length; i++) {\n        subScorers[i] = new BasicExactDocScorer((BasicStats)subStats[i], norms);\n      }\n      return new MultiSimilarity.MultiExactDocScorer(subScorers);\n    } else {\n      return new BasicExactDocScorer((BasicStats) stats, norms);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"660345363f16c7d4c38aa11a35bf59aa99466cf1","date":1328227279,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#exactSimScorer(SimWeight,AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#exactDocScorer(Stats,String,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public ExactSimScorer exactSimScorer(SimWeight stats, AtomicReaderContext context) throws IOException {\n    if (stats instanceof MultiSimilarity.MultiStats) {\n      // a multi term query (e.g. phrase). return the summation, \n      // scoring almost as if it were boolean query\n      SimWeight subStats[] = ((MultiSimilarity.MultiStats) stats).subStats;\n      ExactSimScorer subScorers[] = new ExactSimScorer[subStats.length];\n      for (int i = 0; i < subScorers.length; i++) {\n        BasicStats basicstats = (BasicStats) subStats[i];\n        subScorers[i] = new BasicExactDocScorer(basicstats, context.reader().normValues(basicstats.field));\n      }\n      return new MultiSimilarity.MultiExactDocScorer(subScorers);\n    } else {\n      BasicStats basicstats = (BasicStats) stats;\n      return new BasicExactDocScorer(basicstats, context.reader().normValues(basicstats.field));\n    }\n  }\n\n","sourceOld":"  @Override\n  public ExactDocScorer exactDocScorer(Stats stats, String fieldName,\n      AtomicReaderContext context) throws IOException {\n    DocValues norms = context.reader().normValues(fieldName);\n    \n    if (stats instanceof MultiSimilarity.MultiStats) {\n      // a multi term query (e.g. phrase). return the summation, \n      // scoring almost as if it were boolean query\n      Stats subStats[] = ((MultiSimilarity.MultiStats) stats).subStats;\n      ExactDocScorer subScorers[] = new ExactDocScorer[subStats.length];\n      for (int i = 0; i < subScorers.length; i++) {\n        subScorers[i] = new BasicExactDocScorer((BasicStats)subStats[i], norms);\n      }\n      return new MultiSimilarity.MultiExactDocScorer(subScorers);\n    } else {\n      return new BasicExactDocScorer((BasicStats) stats, norms);\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"660345363f16c7d4c38aa11a35bf59aa99466cf1":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d","6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["660345363f16c7d4c38aa11a35bf59aa99466cf1"]},"commit2Childs":{"660345363f16c7d4c38aa11a35bf59aa99466cf1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}