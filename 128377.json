{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean,boolean).mjava","sourceNew":"  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder, boolean collectPayloads) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList<SpanQuery>(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (i == 0) {                               // check field\n        field = clause.getField();\n      } else if (!clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n    this.collectPayloads = collectPayloads;\n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","sourceOld":"  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder, boolean collectPayloads) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList<SpanQuery>(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (i == 0) {                               // check field\n        field = clause.getField();\n      } else if (!clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n    this.collectPayloads = collectPayloads;\n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15b2c0b1d50ad54ea367036e4bd9376be42c2805","date":1392752466,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean,boolean).mjava","sourceNew":"  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder, boolean collectPayloads) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList<SpanQuery>(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (field == null) {                               // check field\n        field = clause.getField();\n      } else if (clause.getField() != null && !clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n    this.collectPayloads = collectPayloads;\n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","sourceOld":"  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder, boolean collectPayloads) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList<SpanQuery>(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (i == 0) {                               // check field\n        field = clause.getField();\n      } else if (!clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n    this.collectPayloads = collectPayloads;\n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","bugFix":["b00d44ccb616bf40482a9ba5302cb256c26c6e4c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean,boolean).mjava","sourceNew":"  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder, boolean collectPayloads) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList<>(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (field == null) {                               // check field\n        field = clause.getField();\n      } else if (clause.getField() != null && !clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n    this.collectPayloads = collectPayloads;\n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","sourceOld":"  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder, boolean collectPayloads) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList<SpanQuery>(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (field == null) {                               // check field\n        field = clause.getField();\n      } else if (clause.getField() != null && !clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n    this.collectPayloads = collectPayloads;\n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean,boolean).mjava","sourceNew":"  public SpanNearQuery(SpanQuery[] clausesIn, int slop, boolean inOrder, boolean collectPayloads) {\n    this.clauses = new ArrayList<>(clausesIn.length);\n    for (SpanQuery clause : clausesIn) {\n      if (this.field == null) {                               // check field\n        this.field = clause.getField();\n      } else if (clause.getField() != null && !clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n    this.collectPayloads = collectPayloads;\n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","sourceOld":"  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder, boolean collectPayloads) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList<>(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (field == null) {                               // check field\n        field = clause.getField();\n      } else if (clause.getField() != null && !clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n    this.collectPayloads = collectPayloads;\n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean,boolean).mjava","sourceNew":"  public SpanNearQuery(SpanQuery[] clausesIn, int slop, boolean inOrder, boolean collectPayloads) {\n    this.clauses = new ArrayList<>(clausesIn.length);\n    for (SpanQuery clause : clausesIn) {\n      if (this.field == null) {                               // check field\n        this.field = clause.getField();\n      } else if (clause.getField() != null && !clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n    this.collectPayloads = collectPayloads;\n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","sourceOld":"  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder, boolean collectPayloads) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList<>(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (field == null) {                               // check field\n        field = clause.getField();\n      } else if (clause.getField() != null && !clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n    this.collectPayloads = collectPayloads;\n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67926a77440e5dcb5f9c63f02b9bbe865c066978","date":1434459674,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  public SpanNearQuery(SpanQuery[] clausesIn, int slop, boolean inOrder, boolean collectPayloads) {\n    this.clauses = new ArrayList<>(clausesIn.length);\n    for (SpanQuery clause : clausesIn) {\n      if (this.field == null) {                               // check field\n        this.field = clause.getField();\n      } else if (clause.getField() != null && !clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n    this.collectPayloads = collectPayloads;\n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["15b2c0b1d50ad54ea367036e4bd9376be42c2805"],"67926a77440e5dcb5f9c63f02b9bbe865c066978":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15b2c0b1d50ad54ea367036e4bd9376be42c2805":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"fab172655716b96f7e42376116235017a922de3a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["67926a77440e5dcb5f9c63f02b9bbe865c066978"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"67926a77440e5dcb5f9c63f02b9bbe865c066978":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["15b2c0b1d50ad54ea367036e4bd9376be42c2805"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"15b2c0b1d50ad54ea367036e4bd9376be42c2805":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["67926a77440e5dcb5f9c63f02b9bbe865c066978","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}