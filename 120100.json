{"path":"solr/core/src/test/org/apache/solr/util/stats/TimerUtilsTest#testSolrTimerGetSnapshot().mjava","commits":[{"id":"0f3e7752e8a5e963c6939aaa99c36134147a5ece","date":1479805653,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/TimerUtilsTest#testSolrTimerGetSnapshot().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(random().nextInt(), TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    final NamedList<Object> lst = new SimpleOrderedMap<>();\n    TimerUtils.addMetrics(lst, timer);\n    // check that expected metrics were obtained\n    assertEquals(lst.size(), 9);\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerMinute\"), timer.getMeanRate());\n    assertEquals(lst.get(\"5minRateRequestsPerMinute\"), timer.getFiveMinuteRate());\n    assertEquals(lst.get(\"15minRateRequestsPerMinute\"), timer.getFifteenMinuteRate());\n    assertEquals(lst.get(\"avgTimePerRequest\"), TimerUtils.nsToMs(snapshot.getMean()));\n    assertEquals(lst.get(\"medianRequestTime\"), TimerUtils.nsToMs(snapshot.getMedian()));\n    assertEquals(lst.get(\"75thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get75thPercentile()));\n    assertEquals(lst.get(\"95thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get95thPercentile()));\n    assertEquals(lst.get(\"99thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get99thPercentile()));\n    assertEquals(lst.get(\"999thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get999thPercentile()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4eb5edf90df93f00e2f9bfe2628dfb058c2c81a3","date":1479922896,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/TimerUtilsTest#testSolrTimerGetSnapshot().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/TimerUtilsTest#testSolrTimerGetSnapshot().mjava","sourceNew":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(random().nextInt(), TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    final NamedList<Object> lst = new SimpleOrderedMap<>();\n    TimerUtils.addMetrics(lst, timer);\n    // check that expected metrics were obtained\n    assertEquals(lst.size(), 9);\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerMinute\"), TimerUtils.convertRateToPerMinute(timer.getMeanRate()));\n    assertEquals(lst.get(\"5minRateRequestsPerMinute\"), TimerUtils.convertRateToPerMinute(timer.getFiveMinuteRate()));\n    assertEquals(lst.get(\"15minRateRequestsPerMinute\"), TimerUtils.convertRateToPerMinute(timer.getFifteenMinuteRate()));\n    assertEquals(lst.get(\"avgTimePerRequest\"), TimerUtils.nsToMs(snapshot.getMean()));\n    assertEquals(lst.get(\"medianRequestTime\"), TimerUtils.nsToMs(snapshot.getMedian()));\n    assertEquals(lst.get(\"75thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get75thPercentile()));\n    assertEquals(lst.get(\"95thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get95thPercentile()));\n    assertEquals(lst.get(\"99thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get99thPercentile()));\n    assertEquals(lst.get(\"999thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get999thPercentile()));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(random().nextInt(), TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    final NamedList<Object> lst = new SimpleOrderedMap<>();\n    TimerUtils.addMetrics(lst, timer);\n    // check that expected metrics were obtained\n    assertEquals(lst.size(), 9);\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerMinute\"), timer.getMeanRate());\n    assertEquals(lst.get(\"5minRateRequestsPerMinute\"), timer.getFiveMinuteRate());\n    assertEquals(lst.get(\"15minRateRequestsPerMinute\"), timer.getFifteenMinuteRate());\n    assertEquals(lst.get(\"avgTimePerRequest\"), TimerUtils.nsToMs(snapshot.getMean()));\n    assertEquals(lst.get(\"medianRequestTime\"), TimerUtils.nsToMs(snapshot.getMedian()));\n    assertEquals(lst.get(\"75thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get75thPercentile()));\n    assertEquals(lst.get(\"95thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get95thPercentile()));\n    assertEquals(lst.get(\"99thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get99thPercentile()));\n    assertEquals(lst.get(\"999thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get999thPercentile()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"226fc770efccd9e2012263fe97ee25f9d68e28f3","date":1479923448,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/TimerUtilsTest#testSolrTimerGetSnapshot().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/TimerUtilsTest#testSolrTimerGetSnapshot().mjava","sourceNew":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(random().nextInt(), TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    final NamedList<Object> lst = new SimpleOrderedMap<>();\n    TimerUtils.addMetrics(lst, timer);\n    // check that expected metrics were obtained\n    assertEquals(lst.size(), 9);\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(lst.get(\"5minRateRequestsPerSecond\"), timer.getFiveMinuteRate());\n    assertEquals(lst.get(\"15minRateRequestsPerSecond\"), timer.getFifteenMinuteRate());\n    assertEquals(lst.get(\"avgTimePerRequest\"), TimerUtils.nsToMs(snapshot.getMean()));\n    assertEquals(lst.get(\"medianRequestTime\"), TimerUtils.nsToMs(snapshot.getMedian()));\n    assertEquals(lst.get(\"75thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get75thPercentile()));\n    assertEquals(lst.get(\"95thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get95thPercentile()));\n    assertEquals(lst.get(\"99thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get99thPercentile()));\n    assertEquals(lst.get(\"999thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get999thPercentile()));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(random().nextInt(), TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    final NamedList<Object> lst = new SimpleOrderedMap<>();\n    TimerUtils.addMetrics(lst, timer);\n    // check that expected metrics were obtained\n    assertEquals(lst.size(), 9);\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerMinute\"), TimerUtils.convertRateToPerMinute(timer.getMeanRate()));\n    assertEquals(lst.get(\"5minRateRequestsPerMinute\"), TimerUtils.convertRateToPerMinute(timer.getFiveMinuteRate()));\n    assertEquals(lst.get(\"15minRateRequestsPerMinute\"), TimerUtils.convertRateToPerMinute(timer.getFifteenMinuteRate()));\n    assertEquals(lst.get(\"avgTimePerRequest\"), TimerUtils.nsToMs(snapshot.getMean()));\n    assertEquals(lst.get(\"medianRequestTime\"), TimerUtils.nsToMs(snapshot.getMedian()));\n    assertEquals(lst.get(\"75thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get75thPercentile()));\n    assertEquals(lst.get(\"95thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get95thPercentile()));\n    assertEquals(lst.get(\"99thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get99thPercentile()));\n    assertEquals(lst.get(\"999thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get999thPercentile()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/TimerUtilsTest#testSolrTimerGetSnapshot().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(random().nextInt(), TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    final NamedList<Object> lst = new SimpleOrderedMap<>();\n    TimerUtils.addMetrics(lst, timer);\n    // check that expected metrics were obtained\n    assertEquals(lst.size(), 9);\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(lst.get(\"5minRateRequestsPerSecond\"), timer.getFiveMinuteRate());\n    assertEquals(lst.get(\"15minRateRequestsPerSecond\"), timer.getFifteenMinuteRate());\n    assertEquals(lst.get(\"avgTimePerRequest\"), TimerUtils.nsToMs(snapshot.getMean()));\n    assertEquals(lst.get(\"medianRequestTime\"), TimerUtils.nsToMs(snapshot.getMedian()));\n    assertEquals(lst.get(\"75thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get75thPercentile()));\n    assertEquals(lst.get(\"95thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get95thPercentile()));\n    assertEquals(lst.get(\"99thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get99thPercentile()));\n    assertEquals(lst.get(\"999thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get999thPercentile()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/TimerUtilsTest#testSolrTimerGetSnapshot().mjava","sourceNew":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(random().nextInt(), TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    final NamedList<Object> lst = new SimpleOrderedMap<>();\n    MetricUtils.addMetrics(lst, timer);\n    // check that expected metrics were obtained\n    assertEquals(lst.size(), 9);\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(lst.get(\"5minRateRequestsPerSecond\"), timer.getFiveMinuteRate());\n    assertEquals(lst.get(\"15minRateRequestsPerSecond\"), timer.getFifteenMinuteRate());\n    assertEquals(lst.get(\"avgTimePerRequest\"), MetricUtils.nsToMs(snapshot.getMean()));\n    assertEquals(lst.get(\"medianRequestTime\"), MetricUtils.nsToMs(snapshot.getMedian()));\n    assertEquals(lst.get(\"75thPcRequestTime\"), MetricUtils.nsToMs(snapshot.get75thPercentile()));\n    assertEquals(lst.get(\"95thPcRequestTime\"), MetricUtils.nsToMs(snapshot.get95thPercentile()));\n    assertEquals(lst.get(\"99thPcRequestTime\"), MetricUtils.nsToMs(snapshot.get99thPercentile()));\n    assertEquals(lst.get(\"999thPcRequestTime\"), MetricUtils.nsToMs(snapshot.get999thPercentile()));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(random().nextInt(), TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    final NamedList<Object> lst = new SimpleOrderedMap<>();\n    TimerUtils.addMetrics(lst, timer);\n    // check that expected metrics were obtained\n    assertEquals(lst.size(), 9);\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(lst.get(\"5minRateRequestsPerSecond\"), timer.getFiveMinuteRate());\n    assertEquals(lst.get(\"15minRateRequestsPerSecond\"), timer.getFifteenMinuteRate());\n    assertEquals(lst.get(\"avgTimePerRequest\"), TimerUtils.nsToMs(snapshot.getMean()));\n    assertEquals(lst.get(\"medianRequestTime\"), TimerUtils.nsToMs(snapshot.getMedian()));\n    assertEquals(lst.get(\"75thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get75thPercentile()));\n    assertEquals(lst.get(\"95thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get95thPercentile()));\n    assertEquals(lst.get(\"99thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get99thPercentile()));\n    assertEquals(lst.get(\"999thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get999thPercentile()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/util/stats/TimerUtilsTest#testSolrTimerGetSnapshot().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(random().nextInt(), TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    final NamedList<Object> lst = new SimpleOrderedMap<>();\n    TimerUtils.addMetrics(lst, timer);\n    // check that expected metrics were obtained\n    assertEquals(lst.size(), 9);\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(lst.get(\"5minRateRequestsPerSecond\"), timer.getFiveMinuteRate());\n    assertEquals(lst.get(\"15minRateRequestsPerSecond\"), timer.getFifteenMinuteRate());\n    assertEquals(lst.get(\"avgTimePerRequest\"), TimerUtils.nsToMs(snapshot.getMean()));\n    assertEquals(lst.get(\"medianRequestTime\"), TimerUtils.nsToMs(snapshot.getMedian()));\n    assertEquals(lst.get(\"75thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get75thPercentile()));\n    assertEquals(lst.get(\"95thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get95thPercentile()));\n    assertEquals(lst.get(\"99thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get99thPercentile()));\n    assertEquals(lst.get(\"999thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get999thPercentile()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0265144286422ad99682a00904cc2536b79c8535":["226fc770efccd9e2012263fe97ee25f9d68e28f3"],"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","226fc770efccd9e2012263fe97ee25f9d68e28f3"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["727bb765ff2542275f6d31f67be18d7104bae148","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4eb5edf90df93f00e2f9bfe2628dfb058c2c81a3":["0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0265144286422ad99682a00904cc2536b79c8535"],"226fc770efccd9e2012263fe97ee25f9d68e28f3":["4eb5edf90df93f00e2f9bfe2628dfb058c2c81a3"]},"commit2Childs":{"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["4eb5edf90df93f00e2f9bfe2628dfb058c2c81a3"],"727bb765ff2542275f6d31f67be18d7104bae148":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f3e7752e8a5e963c6939aaa99c36134147a5ece","727bb765ff2542275f6d31f67be18d7104bae148"],"4eb5edf90df93f00e2f9bfe2628dfb058c2c81a3":["226fc770efccd9e2012263fe97ee25f9d68e28f3"],"226fc770efccd9e2012263fe97ee25f9d68e28f3":["0265144286422ad99682a00904cc2536b79c8535","727bb765ff2542275f6d31f67be18d7104bae148"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}