{"path":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testMergeImpacts().mjava","commits":[{"id":"f8dd25829321d66cd54ea7d40a4130e0d2a29bec","date":1562680889,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testMergeImpacts().mjava","pathOld":"/dev/null","sourceNew":"  public void testMergeImpacts() throws IOException {\n    DummyImpactsEnum impacts1 = new DummyImpactsEnum(1000);\n    DummyImpactsEnum impacts2 = new DummyImpactsEnum(2000);\n    ImpactsSource mergedImpacts = ExactPhraseMatcher.mergeImpacts(new ImpactsEnum[] { impacts1, impacts2 });\n\n    impacts1.reset(\n        new Impact[][] {\n          new Impact[] { new Impact(3, 10), new Impact(5, 12), new Impact(8, 13) },\n          new Impact[] { new Impact(3, 10), new Impact(5, 11), new Impact(8, 13),  new Impact(12, 14) }\n        },\n        new int[] {\n            110,\n            945\n        });\n\n    // Merge with empty impacts\n    impacts2.reset(\n        new Impact[0][],\n        new int[0]);\n    assertEquals(\n        new Impact[][] {\n          new Impact[] { new Impact(3, 10), new Impact(5, 12), new Impact(8, 13) },\n          new Impact[] { new Impact(3, 10), new Impact(5, 11), new Impact(8, 13),  new Impact(12, 14) }\n        },\n        new int[] {\n            110,\n            945\n        },\n        mergedImpacts.getImpacts());\n\n    // Merge with dummy impacts\n    impacts2.reset(\n        new Impact[][] {\n          new Impact[] { new Impact(Integer.MAX_VALUE, 1) }\n        },\n        new int[] {\n            5000\n        });\n    assertEquals(\n        new Impact[][] {\n          new Impact[] { new Impact(3, 10), new Impact(5, 12), new Impact(8, 13) },\n          new Impact[] { new Impact(3, 10), new Impact(5, 11), new Impact(8, 13),  new Impact(12, 14) }\n        },\n        new int[] {\n            110,\n            945\n        },\n        mergedImpacts.getImpacts());\n\n    // Merge with dummy impacts that we don't special case\n    impacts2.reset(\n        new Impact[][] {\n          new Impact[] { new Impact(Integer.MAX_VALUE, 2) }\n        },\n        new int[] {\n            5000\n        });\n    assertEquals(\n        new Impact[][] {\n          new Impact[] { new Impact(3, 10), new Impact(5, 12), new Impact(8, 13) },\n          new Impact[] { new Impact(3, 10), new Impact(5, 11), new Impact(8, 13),  new Impact(12, 14) }\n        },\n        new int[] {\n            110,\n            945\n        },\n        mergedImpacts.getImpacts());\n\n    // First level of impacts2 doesn't cover the first level of impacts1\n    impacts2.reset(\n        new Impact[][] {\n          new Impact[] { new Impact(2, 10), new Impact(6, 13) },\n          new Impact[] { new Impact(3, 9), new Impact(5, 11), new Impact(7, 13) }\n        },\n        new int[] {\n            90,\n            1000\n        }); \n    assertEquals(\n        new Impact[][] {\n          new Impact[] { new Impact(3, 10), new Impact(5, 12), new Impact(7, 13) },\n          new Impact[] { new Impact(3, 10), new Impact(5, 11), new Impact(7, 13) }\n        },\n        new int[] {\n            110,\n            945\n        },\n        mergedImpacts.getImpacts());\n\n    // Second level of impacts2 doesn't cover the first level of impacts1\n    impacts2.reset(\n        new Impact[][] {\n          new Impact[] { new Impact(2, 10), new Impact(6, 11) },\n          new Impact[] { new Impact(3, 9), new Impact(5, 11), new Impact(7, 13) }\n        },\n        new int[] {\n            150,\n            900\n        });\n    assertEquals(\n        new Impact[][] {\n          new Impact[] { new Impact(2, 10), new Impact(3, 11), new Impact(5, 12), new Impact(6, 13) },\n          new Impact[] { new Impact(3, 10), new Impact(5, 11), new Impact(8, 13),  new Impact(12, 14) } // same as impacts1\n        },\n        new int[] {\n            110,\n            945\n        },\n        mergedImpacts.getImpacts());\n\n    impacts2.reset(\n        new Impact[][] {\n          new Impact[] { new Impact(4, 10), new Impact(9, 13) },\n          new Impact[] { new Impact(1, 1), new Impact(4, 10), new Impact(5, 11), new Impact(8, 13), new Impact(12, 14), new Impact(13, 15) }\n        },\n        new int[] {\n            113,\n            950\n        });\n    assertEquals(\n        new Impact[][] {\n          new Impact[] { new Impact(3, 10), new Impact(4, 12), new Impact(8, 13) },\n          new Impact[] { new Impact(3, 10), new Impact(5, 11), new Impact(8, 13), new Impact(12, 14) }\n        },\n        new int[] {\n            110,\n            945\n        },\n        mergedImpacts.getImpacts());\n\n    // Make sure negative norms are treated as unsigned\n    impacts1.reset(\n        new Impact[][] {\n          new Impact[] { new Impact(3, 10), new Impact(5, -10), new Impact(8, -5) },\n          new Impact[] { new Impact(3, 10), new Impact(5, -15), new Impact(8, -5),  new Impact(12, -3) }\n        },\n        new int[] {\n            110,\n            945\n        });\n    impacts2.reset(\n        new Impact[][] {\n          new Impact[] { new Impact(2, 10), new Impact(12, -4) },\n          new Impact[] { new Impact(3, 9), new Impact(12, -4), new Impact(20, -1) }\n        },\n        new int[] {\n            150,\n            960\n        });\n    assertEquals(\n        new Impact[][] {\n          new Impact[] { new Impact(2, 10), new Impact(8, -4) },\n          new Impact[] { new Impact(3, 10), new Impact(8, -4), new Impact(12, -3) }\n        },\n        new int[] {\n            110,\n            945\n        },\n        mergedImpacts.getImpacts());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"]},"commit2Childs":{"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}