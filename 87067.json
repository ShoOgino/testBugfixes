{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#parse(Version,String[],String[],Analyzer).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#parse(Version,String[],String[],Analyzer).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#parse(Version,String[],String[],Analyzer).mjava","sourceNew":"  /**\n   * Parses a query which searches on the fields specified.\n   * <p>\n   * If x fields are specified, this effectively constructs:\n   * <pre>\n   * <code>\n   * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n   * </code>\n   * </pre>\n   * @param matchVersion Lucene version to match; this is passed through to QueryParser.\n   * @param queries Queries strings to parse\n   * @param fields Fields to search on\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries array differs\n   *  from the length of the fields array\n   */\n  public static Query parse(Version matchVersion, String[] queries, String[] fields,\n      Analyzer analyzer) throws ParseException\n  {\n    if (queries.length != fields.length)\n      throw new IllegalArgumentException(\"queries.length != fields.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(matchVersion, fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      if (q!=null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery)q).getClauses().length>0)) {\n        bQuery.add(q, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return bQuery;\n  }\n\n","sourceOld":"  /**\n   * Parses a query which searches on the fields specified.\n   * <p>\n   * If x fields are specified, this effectively constructs:\n   * <pre>\n   * <code>\n   * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n   * </code>\n   * </pre>\n   * @param matchVersion Lucene version to match; this is passed through to QueryParser.\n   * @param queries Queries strings to parse\n   * @param fields Fields to search on\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries array differs\n   *  from the length of the fields array\n   */\n  public static Query parse(Version matchVersion, String[] queries, String[] fields,\n      Analyzer analyzer) throws ParseException\n  {\n    if (queries.length != fields.length)\n      throw new IllegalArgumentException(\"queries.length != fields.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(matchVersion, fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      if (q!=null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery)q).getClauses().length>0)) {\n        bQuery.add(q, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return bQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#parse(String[],String[],Analyzer).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#parse(Version,String[],String[],Analyzer).mjava","sourceNew":"  /**\n   * Parses a query which searches on the fields specified.\n   * <p>\n   * If x fields are specified, this effectively constructs:\n   * <pre>\n   * <code>\n   * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n   * </code>\n   * </pre>\n   * @param queries Queries strings to parse\n   * @param fields Fields to search on\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries array differs\n   *  from the length of the fields array\n   */\n  public static Query parse(String[] queries, String[] fields, Analyzer analyzer) throws ParseException {\n    if (queries.length != fields.length)\n      throw new IllegalArgumentException(\"queries.length != fields.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      if (q!=null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery)q).getClauses().length>0)) {\n        bQuery.add(q, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return bQuery;\n  }\n\n","sourceOld":"  /**\n   * Parses a query which searches on the fields specified.\n   * <p>\n   * If x fields are specified, this effectively constructs:\n   * <pre>\n   * <code>\n   * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n   * </code>\n   * </pre>\n   * @param matchVersion Lucene version to match; this is passed through to QueryParser.\n   * @param queries Queries strings to parse\n   * @param fields Fields to search on\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries array differs\n   *  from the length of the fields array\n   */\n  public static Query parse(Version matchVersion, String[] queries, String[] fields,\n      Analyzer analyzer) throws ParseException\n  {\n    if (queries.length != fields.length)\n      throw new IllegalArgumentException(\"queries.length != fields.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(matchVersion, fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      if (q!=null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery)q).getClauses().length>0)) {\n        bQuery.add(q, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return bQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#parse(Version,String[],String[],Analyzer).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#parse(String[],String[],Analyzer).mjava","sourceNew":"  /**\n   * Parses a query which searches on the fields specified.\n   * <p>\n   * If x fields are specified, this effectively constructs:\n   * <pre>\n   * <code>\n   * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n   * </code>\n   * </pre>\n   * @param matchVersion Lucene version to match; this is passed through to QueryParser.\n   * @param queries Queries strings to parse\n   * @param fields Fields to search on\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries array differs\n   *  from the length of the fields array\n   */\n  public static Query parse(Version matchVersion, String[] queries, String[] fields,\n      Analyzer analyzer) throws ParseException\n  {\n    if (queries.length != fields.length)\n      throw new IllegalArgumentException(\"queries.length != fields.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(matchVersion, fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      if (q!=null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery)q).getClauses().length>0)) {\n        bQuery.add(q, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return bQuery;\n  }\n\n","sourceOld":"  /**\n   * Parses a query which searches on the fields specified.\n   * <p>\n   * If x fields are specified, this effectively constructs:\n   * <pre>\n   * <code>\n   * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n   * </code>\n   * </pre>\n   * @param queries Queries strings to parse\n   * @param fields Fields to search on\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries array differs\n   *  from the length of the fields array\n   */\n  public static Query parse(String[] queries, String[] fields, Analyzer analyzer) throws ParseException {\n    if (queries.length != fields.length)\n      throw new IllegalArgumentException(\"queries.length != fields.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      if (q!=null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery)q).getClauses().length>0)) {\n        bQuery.add(q, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return bQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#parse(String[],String[],Analyzer).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#parse(Version,String[],String[],Analyzer).mjava","sourceNew":"  /**\n   * Parses a query which searches on the fields specified.\n   * <p>\n   * If x fields are specified, this effectively constructs:\n   * <pre>\n   * <code>\n   * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n   * </code>\n   * </pre>\n   * @param queries Queries strings to parse\n   * @param fields Fields to search on\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries array differs\n   *  from the length of the fields array\n   */\n  public static Query parse(String[] queries, String[] fields, Analyzer analyzer) throws ParseException {\n    if (queries.length != fields.length)\n      throw new IllegalArgumentException(\"queries.length != fields.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      if (q!=null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery)q).getClauses().length>0)) {\n        bQuery.add(q, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return bQuery;\n  }\n\n","sourceOld":"  /**\n   * Parses a query which searches on the fields specified.\n   * <p>\n   * If x fields are specified, this effectively constructs:\n   * <pre>\n   * <code>\n   * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n   * </code>\n   * </pre>\n   * @param matchVersion Lucene version to match; this is passed through to QueryParser.\n   * @param queries Queries strings to parse\n   * @param fields Fields to search on\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries array differs\n   *  from the length of the fields array\n   */\n  public static Query parse(Version matchVersion, String[] queries, String[] fields,\n      Analyzer analyzer) throws ParseException\n  {\n    if (queries.length != fields.length)\n      throw new IllegalArgumentException(\"queries.length != fields.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(matchVersion, fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      if (q!=null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery)q).getClauses().length>0)) {\n        bQuery.add(q, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return bQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}