{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter.OverseerUrlSupplier#get().mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter.OverseerUrlSupplier#get().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public String get() {\n      if (zk == null) {\n        return null;\n      }\n      // primitive caching for lastKnownUrl\n      long now = System.nanoTime();\n      if (lastKnownUrl != null && (now - lastCheckTime) < interval) {\n        return lastKnownUrl;\n      }\n      if (!zk.isConnected()) {\n        return lastKnownUrl;\n      }\n      lastCheckTime = now;\n      SolrZkClient zkClient = zk.getZkClient();\n      ZkNodeProps props;\n      try {\n        props = ZkNodeProps.load(zkClient.getData(\n            Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      } catch (KeeperException e) {\n        log.warn(\"Could not obtain overseer's address, skipping.\", e);\n        return lastKnownUrl;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return lastKnownUrl;\n      }\n      if (props == null) {\n        return lastKnownUrl;\n      }\n      String oid = props.getStr(\"id\");\n      if (oid == null) {\n        return lastKnownUrl;\n      }\n      String[] ids = oid.split(\"-\");\n      if (ids.length != 3) { // unknown format\n        log.warn(\"Unknown format of leader id, skipping: \" + oid);\n        return lastKnownUrl;\n      }\n      // convert nodeName back to URL\n      String url = zk.getZkStateReader().getBaseUrlForNodeName(ids[1]);\n      // check that it's parseable\n      try {\n        new java.net.URL(url);\n      } catch (MalformedURLException mue) {\n        log.warn(\"Malformed Overseer's leader URL: url\", mue);\n        return lastKnownUrl;\n      }\n      lastKnownUrl = url;\n      return url;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2d7769c1ceca6a76710f154832127db9f9df2bf1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter.OverseerUrlSupplier#get().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter.OverseerUrlSupplier#get().mjava","sourceNew":"    @Override\n    public String get() {\n      if (zk == null) {\n        return null;\n      }\n      // primitive caching for lastKnownUrl\n      long now = System.nanoTime();\n      if (lastKnownUrl != null && (now - lastCheckTime) < interval) {\n        return lastKnownUrl;\n      }\n      if (!zk.isConnected()) {\n        return lastKnownUrl;\n      }\n      lastCheckTime = now;\n      SolrZkClient zkClient = zk.getZkClient();\n      ZkNodeProps props;\n      try {\n        props = ZkNodeProps.load(zkClient.getData(\n            Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      } catch (KeeperException e) {\n        log.warn(\"Could not obtain overseer's address, skipping.\", e);\n        return lastKnownUrl;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return lastKnownUrl;\n      }\n      if (props == null) {\n        return lastKnownUrl;\n      }\n      String oid = props.getStr(ID);\n      if (oid == null) {\n        return lastKnownUrl;\n      }\n      String[] ids = oid.split(\"-\");\n      if (ids.length != 3) { // unknown format\n        log.warn(\"Unknown format of leader id, skipping: \" + oid);\n        return lastKnownUrl;\n      }\n      // convert nodeName back to URL\n      String url = zk.getZkStateReader().getBaseUrlForNodeName(ids[1]);\n      // check that it's parseable\n      try {\n        new java.net.URL(url);\n      } catch (MalformedURLException mue) {\n        log.warn(\"Malformed Overseer's leader URL: url\", mue);\n        return lastKnownUrl;\n      }\n      lastKnownUrl = url;\n      return url;\n    }\n\n","sourceOld":"    @Override\n    public String get() {\n      if (zk == null) {\n        return null;\n      }\n      // primitive caching for lastKnownUrl\n      long now = System.nanoTime();\n      if (lastKnownUrl != null && (now - lastCheckTime) < interval) {\n        return lastKnownUrl;\n      }\n      if (!zk.isConnected()) {\n        return lastKnownUrl;\n      }\n      lastCheckTime = now;\n      SolrZkClient zkClient = zk.getZkClient();\n      ZkNodeProps props;\n      try {\n        props = ZkNodeProps.load(zkClient.getData(\n            Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      } catch (KeeperException e) {\n        log.warn(\"Could not obtain overseer's address, skipping.\", e);\n        return lastKnownUrl;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return lastKnownUrl;\n      }\n      if (props == null) {\n        return lastKnownUrl;\n      }\n      String oid = props.getStr(\"id\");\n      if (oid == null) {\n        return lastKnownUrl;\n      }\n      String[] ids = oid.split(\"-\");\n      if (ids.length != 3) { // unknown format\n        log.warn(\"Unknown format of leader id, skipping: \" + oid);\n        return lastKnownUrl;\n      }\n      // convert nodeName back to URL\n      String url = zk.getZkStateReader().getBaseUrlForNodeName(ids[1]);\n      // check that it's parseable\n      try {\n        new java.net.URL(url);\n      } catch (MalformedURLException mue) {\n        log.warn(\"Malformed Overseer's leader URL: url\", mue);\n        return lastKnownUrl;\n      }\n      lastKnownUrl = url;\n      return url;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter.OverseerUrlSupplier#get().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter.OverseerUrlSupplier#get().mjava","sourceNew":"    @Override\n    public String get() {\n      if (zk == null) {\n        return null;\n      }\n      // primitive caching for lastKnownUrl\n      long now = System.nanoTime();\n      if (lastKnownUrl != null && (now - lastCheckTime) < interval) {\n        return lastKnownUrl;\n      }\n      if (!zk.isConnected()) {\n        return lastKnownUrl;\n      }\n      lastCheckTime = now;\n      SolrZkClient zkClient = zk.getZkClient();\n      ZkNodeProps props;\n      try {\n        props = ZkNodeProps.load(zkClient.getData(\n            Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      } catch (KeeperException e) {\n        log.warn(\"Could not obtain overseer's address, skipping.\", e);\n        return lastKnownUrl;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return lastKnownUrl;\n      }\n      if (props == null) {\n        return lastKnownUrl;\n      }\n      String oid = props.getStr(ID);\n      if (oid == null) {\n        return lastKnownUrl;\n      }\n      String[] ids = oid.split(\"-\");\n      if (ids.length != 3) { // unknown format\n        log.warn(\"Unknown format of leader id, skipping: \" + oid);\n        return lastKnownUrl;\n      }\n      // convert nodeName back to URL\n      String url = zk.getZkStateReader().getBaseUrlForNodeName(ids[1]);\n      // check that it's parseable\n      try {\n        new java.net.URL(url);\n      } catch (MalformedURLException mue) {\n        log.warn(\"Malformed Overseer's leader URL: url\", mue);\n        return lastKnownUrl;\n      }\n      lastKnownUrl = url;\n      return url;\n    }\n\n","sourceOld":"    @Override\n    public String get() {\n      if (zk == null) {\n        return null;\n      }\n      // primitive caching for lastKnownUrl\n      long now = System.nanoTime();\n      if (lastKnownUrl != null && (now - lastCheckTime) < interval) {\n        return lastKnownUrl;\n      }\n      if (!zk.isConnected()) {\n        return lastKnownUrl;\n      }\n      lastCheckTime = now;\n      SolrZkClient zkClient = zk.getZkClient();\n      ZkNodeProps props;\n      try {\n        props = ZkNodeProps.load(zkClient.getData(\n            Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      } catch (KeeperException e) {\n        log.warn(\"Could not obtain overseer's address, skipping.\", e);\n        return lastKnownUrl;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return lastKnownUrl;\n      }\n      if (props == null) {\n        return lastKnownUrl;\n      }\n      String oid = props.getStr(\"id\");\n      if (oid == null) {\n        return lastKnownUrl;\n      }\n      String[] ids = oid.split(\"-\");\n      if (ids.length != 3) { // unknown format\n        log.warn(\"Unknown format of leader id, skipping: \" + oid);\n        return lastKnownUrl;\n      }\n      // convert nodeName back to URL\n      String url = zk.getZkStateReader().getBaseUrlForNodeName(ids[1]);\n      // check that it's parseable\n      try {\n        new java.net.URL(url);\n      } catch (MalformedURLException mue) {\n        log.warn(\"Malformed Overseer's leader URL: url\", mue);\n        return lastKnownUrl;\n      }\n      lastKnownUrl = url;\n      return url;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d7769c1ceca6a76710f154832127db9f9df2bf1","date":1533228478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter.OverseerUrlSupplier#get().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter.OverseerUrlSupplier#get().mjava","sourceNew":"    @Override\n    public String get() {\n      if (zk == null) {\n        return null;\n      }\n      // primitive caching for lastKnownUrl\n      long now = System.nanoTime();\n      if (lastKnownUrl != null && (now - lastCheckTime) < interval) {\n        return lastKnownUrl;\n      }\n      if (!zk.isConnected()) {\n        return lastKnownUrl;\n      }\n      lastCheckTime = now;\n      SolrZkClient zkClient = zk.getZkClient();\n      ZkNodeProps props;\n      try {\n        props = ZkNodeProps.load(zkClient.getData(\n            Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      } catch (KeeperException e) {\n        log.warn(\"Could not obtain overseer's address, skipping.\", e);\n        return lastKnownUrl;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return lastKnownUrl;\n      }\n      if (props == null) {\n        return lastKnownUrl;\n      }\n      String oid = props.getStr(ID);\n      if (oid == null) {\n        return lastKnownUrl;\n      }\n      String nodeName = null;\n      try {\n        nodeName = LeaderElector.getNodeName(oid);\n      } catch (Exception e) {\n        log.warn(\"Unknown format of leader id, skipping: \" + oid, e);\n        return lastKnownUrl;\n      }\n      // convert nodeName back to URL\n      String url = zk.getZkStateReader().getBaseUrlForNodeName(nodeName);\n      // check that it's parseable\n      try {\n        new java.net.URL(url);\n      } catch (MalformedURLException mue) {\n        log.warn(\"Malformed Overseer's leader URL: url\", mue);\n        return lastKnownUrl;\n      }\n      lastKnownUrl = url;\n      return url;\n    }\n\n","sourceOld":"    @Override\n    public String get() {\n      if (zk == null) {\n        return null;\n      }\n      // primitive caching for lastKnownUrl\n      long now = System.nanoTime();\n      if (lastKnownUrl != null && (now - lastCheckTime) < interval) {\n        return lastKnownUrl;\n      }\n      if (!zk.isConnected()) {\n        return lastKnownUrl;\n      }\n      lastCheckTime = now;\n      SolrZkClient zkClient = zk.getZkClient();\n      ZkNodeProps props;\n      try {\n        props = ZkNodeProps.load(zkClient.getData(\n            Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      } catch (KeeperException e) {\n        log.warn(\"Could not obtain overseer's address, skipping.\", e);\n        return lastKnownUrl;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return lastKnownUrl;\n      }\n      if (props == null) {\n        return lastKnownUrl;\n      }\n      String oid = props.getStr(ID);\n      if (oid == null) {\n        return lastKnownUrl;\n      }\n      String[] ids = oid.split(\"-\");\n      if (ids.length != 3) { // unknown format\n        log.warn(\"Unknown format of leader id, skipping: \" + oid);\n        return lastKnownUrl;\n      }\n      // convert nodeName back to URL\n      String url = zk.getZkStateReader().getBaseUrlForNodeName(ids[1]);\n      // check that it's parseable\n      try {\n        new java.net.URL(url);\n      } catch (MalformedURLException mue) {\n        log.warn(\"Malformed Overseer's leader URL: url\", mue);\n        return lastKnownUrl;\n      }\n      lastKnownUrl = url;\n      return url;\n    }\n\n","bugFix":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter.OverseerUrlSupplier#get().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter.OverseerUrlSupplier#get().mjava","sourceNew":"    @Override\n    public String get() {\n      if (zk == null) {\n        return null;\n      }\n      // primitive caching for lastKnownUrl\n      long now = System.nanoTime();\n      if (lastKnownUrl != null && (now - lastCheckTime) < interval) {\n        return lastKnownUrl;\n      }\n      if (!zk.isConnected()) {\n        return lastKnownUrl;\n      }\n      lastCheckTime = now;\n      SolrZkClient zkClient = zk.getZkClient();\n      ZkNodeProps props;\n      try {\n        props = ZkNodeProps.load(zkClient.getData(\n            Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      } catch (KeeperException e) {\n        log.warn(\"Could not obtain overseer's address, skipping.\", e);\n        return lastKnownUrl;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return lastKnownUrl;\n      }\n      if (props == null) {\n        return lastKnownUrl;\n      }\n      String oid = props.getStr(ID);\n      if (oid == null) {\n        return lastKnownUrl;\n      }\n      String nodeName = null;\n      try {\n        nodeName = LeaderElector.getNodeName(oid);\n      } catch (Exception e) {\n        log.warn(\"Unknown format of leader id, skipping: {}\", oid, e);\n        return lastKnownUrl;\n      }\n      // convert nodeName back to URL\n      String url = zk.getZkStateReader().getBaseUrlForNodeName(nodeName);\n      // check that it's parseable\n      try {\n        new java.net.URL(url);\n      } catch (MalformedURLException mue) {\n        log.warn(\"Malformed Overseer's leader URL: url\", mue);\n        return lastKnownUrl;\n      }\n      lastKnownUrl = url;\n      return url;\n    }\n\n","sourceOld":"    @Override\n    public String get() {\n      if (zk == null) {\n        return null;\n      }\n      // primitive caching for lastKnownUrl\n      long now = System.nanoTime();\n      if (lastKnownUrl != null && (now - lastCheckTime) < interval) {\n        return lastKnownUrl;\n      }\n      if (!zk.isConnected()) {\n        return lastKnownUrl;\n      }\n      lastCheckTime = now;\n      SolrZkClient zkClient = zk.getZkClient();\n      ZkNodeProps props;\n      try {\n        props = ZkNodeProps.load(zkClient.getData(\n            Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      } catch (KeeperException e) {\n        log.warn(\"Could not obtain overseer's address, skipping.\", e);\n        return lastKnownUrl;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return lastKnownUrl;\n      }\n      if (props == null) {\n        return lastKnownUrl;\n      }\n      String oid = props.getStr(ID);\n      if (oid == null) {\n        return lastKnownUrl;\n      }\n      String nodeName = null;\n      try {\n        nodeName = LeaderElector.getNodeName(oid);\n      } catch (Exception e) {\n        log.warn(\"Unknown format of leader id, skipping: \" + oid, e);\n        return lastKnownUrl;\n      }\n      // convert nodeName back to URL\n      String url = zk.getZkStateReader().getBaseUrlForNodeName(nodeName);\n      // check that it's parseable\n      try {\n        new java.net.URL(url);\n      } catch (MalformedURLException mue) {\n        log.warn(\"Malformed Overseer's leader URL: url\", mue);\n        return lastKnownUrl;\n      }\n      lastKnownUrl = url;\n      return url;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d7769c1ceca6a76710f154832127db9f9df2bf1":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["2d7769c1ceca6a76710f154832127db9f9df2bf1"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["2d7769c1ceca6a76710f154832127db9f9df2bf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75"],"2d7769c1ceca6a76710f154832127db9f9df2bf1":["9df8125ba9193a2e2e285ed92157810b1952a244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}