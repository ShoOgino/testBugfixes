{"path":"src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","pathOld":"/dev/null","sourceNew":"  public void testConstructor() {\n    String [] queryTerm = {\"foo\", \"bar\", \"foo\", \"again\", \"foo\", \"bar\", \"go\", \"go\", \"go\"};\n    //Items are sorted lexicographically\n    String [] gold = {\"again\", \"bar\", \"foo\", \"go\"};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new WhitespaceAnalyzer());\n    assertTrue(result != null);\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","pathOld":"src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","sourceNew":"  public void testConstructor() {\n    String [] queryTerm = {\"foo\", \"bar\", \"foo\", \"again\", \"foo\", \"bar\", \"go\", \"go\", \"go\"};\n    //Items are sorted lexicographically\n    String [] gold = {\"again\", \"bar\", \"foo\", \"go\"};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT));\n    assertTrue(result != null);\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","sourceOld":"  public void testConstructor() {\n    String [] queryTerm = {\"foo\", \"bar\", \"foo\", \"again\", \"foo\", \"bar\", \"go\", \"go\", \"go\"};\n    //Items are sorted lexicographically\n    String [] gold = {\"again\", \"bar\", \"foo\", \"go\"};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new WhitespaceAnalyzer());\n    assertTrue(result != null);\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","pathOld":"src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","sourceNew":"  public void testConstructor() {\n    String [] queryTerm = {\"foo\", \"bar\", \"foo\", \"again\", \"foo\", \"bar\", \"go\", \"go\", \"go\"};\n    //Items are sorted lexicographically\n    String [] gold = {\"again\", \"bar\", \"foo\", \"go\"};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    assertTrue(result != null);\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","sourceOld":"  public void testConstructor() {\n    String [] queryTerm = {\"foo\", \"bar\", \"foo\", \"again\", \"foo\", \"bar\", \"go\", \"go\", \"go\"};\n    //Items are sorted lexicographically\n    String [] gold = {\"again\", \"bar\", \"foo\", \"go\"};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT));\n    assertTrue(result != null);\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","pathOld":"src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","sourceNew":"  public void testConstructor() {\n    String [] queryTerm = {\"foo\", \"bar\", \"foo\", \"again\", \"foo\", \"bar\", \"go\", \"go\", \"go\"};\n    //Items are sorted lexicographically\n    String [] gold = {\"again\", \"bar\", \"foo\", \"go\"};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    String [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","sourceOld":"  public void testConstructor() {\n    String [] queryTerm = {\"foo\", \"bar\", \"foo\", \"again\", \"foo\", \"bar\", \"go\", \"go\", \"go\"};\n    //Items are sorted lexicographically\n    String [] gold = {\"again\", \"bar\", \"foo\", \"go\"};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    assertTrue(result != null);\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","pathOld":"src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","sourceNew":"  public void testConstructor() {\n    String [] queryTerm = {\"foo\", \"bar\", \"foo\", \"again\", \"foo\", \"bar\", \"go\", \"go\", \"go\"};\n    //Items are sorted lexicographically\n    String [] gold = {\"again\", \"bar\", \"foo\", \"go\"};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    String [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","sourceOld":"  public void testConstructor() {\n    String [] queryTerm = {\"foo\", \"bar\", \"foo\", \"again\", \"foo\", \"bar\", \"go\", \"go\", \"go\"};\n    //Items are sorted lexicographically\n    String [] gold = {\"again\", \"bar\", \"foo\", \"go\"};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    String [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}