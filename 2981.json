{"path":"lucene/backwards/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = writer.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments), useCompoundFile));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = writer.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments), useCompoundFile));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":null,"sourceOld":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = writer.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments), useCompoundFile));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}