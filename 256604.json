{"path":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testJSONWrapper().mjava","commits":[{"id":"1936b95f78af7bc57e67df5b0de3f21a54df10af","date":1420842770,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testJSONWrapper().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJSONWrapper() throws Exception {\n    assertEquals(\"foo({\\\"result\\\":\\\"0\\\"})\", h.query(req(\"q\", \"*:*\", \"wt\", \"velocity\",\n        VelocityResponseWriter.TEMPLATE, \"numFound\",\n        VelocityResponseWriter.JSON,\"foo\")));\n\n    // Now with layout, for good measure\n    assertEquals(\"foo({\\\"result\\\":\\\"{{{0}}}\\\"})\", h.query(req(\"q\", \"*:*\", \"wt\", \"velocity\",\n        VelocityResponseWriter.TEMPLATE, \"numFound\",\n        VelocityResponseWriter.JSON,\"foo\",\n        VelocityResponseWriter.LAYOUT,\"layout\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"461700e207a328fd8b164d3ab5342866009a361a","date":1527689709,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testJSONWrapper().mjava","pathOld":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testJSONWrapper().mjava","sourceNew":"  @Test\n  public void testJSONWrapper() throws Exception {\n    assertEquals(\"foo({\\\"result\\\":\\\"0\\\"})\", h.query(req(\"q\", \"*:*\", \"wt\", \"velocity\",\n        VelocityResponseWriter.TEMPLATE, \"numFound\",\n        VelocityResponseWriter.JSON,\"foo\")));\n\n    // Now with layout, for good measure\n    assertEquals(\"foo({\\\"result\\\":\\\"{{{0}}}\\\"})\", h.query(req(\"q\", \"*:*\", \"wt\", \"velocity\",\n        VelocityResponseWriter.TEMPLATE, \"numFound\",\n        VelocityResponseWriter.JSON,\"foo\",\n        VelocityResponseWriter.LAYOUT,\"layout\")));\n\n    assertQEx(\"Bad function name should throw exception\", req(\"q\", \"*:*\", \"wt\", \"velocity\",\n        VelocityResponseWriter.TEMPLATE, \"numFound\",\n        VelocityResponseWriter.JSON,\"<foo>\"), SolrException.ErrorCode.BAD_REQUEST\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testJSONWrapper() throws Exception {\n    assertEquals(\"foo({\\\"result\\\":\\\"0\\\"})\", h.query(req(\"q\", \"*:*\", \"wt\", \"velocity\",\n        VelocityResponseWriter.TEMPLATE, \"numFound\",\n        VelocityResponseWriter.JSON,\"foo\")));\n\n    // Now with layout, for good measure\n    assertEquals(\"foo({\\\"result\\\":\\\"{{{0}}}\\\"})\", h.query(req(\"q\", \"*:*\", \"wt\", \"velocity\",\n        VelocityResponseWriter.TEMPLATE, \"numFound\",\n        VelocityResponseWriter.JSON,\"foo\",\n        VelocityResponseWriter.LAYOUT,\"layout\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b659435fdb2401d91fa87bb3df798ae41a8046cd","date":1600346713,"type":4,"author":"Erik Hatcher","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testJSONWrapper().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testJSONWrapper() throws Exception {\n    assertEquals(\"foo({\\\"result\\\":\\\"0\\\"})\", h.query(req(\"q\", \"*:*\", \"wt\", \"velocity\",\n        VelocityResponseWriter.TEMPLATE, \"numFound\",\n        VelocityResponseWriter.JSON,\"foo\")));\n\n    // Now with layout, for good measure\n    assertEquals(\"foo({\\\"result\\\":\\\"{{{0}}}\\\"})\", h.query(req(\"q\", \"*:*\", \"wt\", \"velocity\",\n        VelocityResponseWriter.TEMPLATE, \"numFound\",\n        VelocityResponseWriter.JSON,\"foo\",\n        VelocityResponseWriter.LAYOUT,\"layout\")));\n\n    assertQEx(\"Bad function name should throw exception\", req(\"q\", \"*:*\", \"wt\", \"velocity\",\n        VelocityResponseWriter.TEMPLATE, \"numFound\",\n        VelocityResponseWriter.JSON,\"<foo>\"), SolrException.ErrorCode.BAD_REQUEST\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1936b95f78af7bc57e67df5b0de3f21a54df10af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"461700e207a328fd8b164d3ab5342866009a361a":["1936b95f78af7bc57e67df5b0de3f21a54df10af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b659435fdb2401d91fa87bb3df798ae41a8046cd":["461700e207a328fd8b164d3ab5342866009a361a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b659435fdb2401d91fa87bb3df798ae41a8046cd"]},"commit2Childs":{"1936b95f78af7bc57e67df5b0de3f21a54df10af":["461700e207a328fd8b164d3ab5342866009a361a"],"461700e207a328fd8b164d3ab5342866009a361a":["b659435fdb2401d91fa87bb3df798ae41a8046cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1936b95f78af7bc57e67df5b0de3f21a54df10af"],"b659435fdb2401d91fa87bb3df798ae41a8046cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}