{"path":"solr/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","pathOld":"/dev/null","sourceNew":"  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","sourceNew":null,"sourceOld":"  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","pathOld":"src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","sourceNew":"  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","sourceOld":"  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","pathOld":"/dev/null","sourceNew":"  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a3ee7c72e7539c6ad4b8494808b7d64c210febf","date":1269122965,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","sourceNew":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","sourceOld":"  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","sourceNew":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","sourceOld":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","sourceNew":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","sourceOld":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","sourceNew":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","sourceOld":"  @Test\n  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a3ee7c72e7539c6ad4b8494808b7d64c210febf":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["9a3ee7c72e7539c6ad4b8494808b7d64c210febf"],"c26f00b574427b55127e869b935845554afde1fa":["9a3ee7c72e7539c6ad4b8494808b7d64c210febf","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["9a3ee7c72e7539c6ad4b8494808b7d64c210febf"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["9a3ee7c72e7539c6ad4b8494808b7d64c210febf"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"9a3ee7c72e7539c6ad4b8494808b7d64c210febf":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}