{"path":"lucene/src/java/org/apache/lucene/index/ParallelReader#getTermVectors(int).mjava","commits":[{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#getTermVectors(int).mjava","pathOld":"/dev/null","sourceNew":"  // get all vectors\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = new ParallelFields();\n    for (Map.Entry<String,IndexReader> ent : fieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        fields.addField(fieldName, vector);\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#getTermVectors(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#getTermVectors(int).mjava","sourceNew":"  // get all vectors\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = new ParallelFields();\n    for (Map.Entry<String,AtomicIndexReader> ent : fieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        fields.addField(fieldName, vector);\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  // get all vectors\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = new ParallelFields();\n    for (Map.Entry<String,IndexReader> ent : fieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        fields.addField(fieldName, vector);\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#getTermVectors(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#getTermVectors(int).mjava","sourceNew":"  // get all vectors\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = new ParallelFields();\n    for (Map.Entry<String,AtomicReader> ent : fieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        fields.addField(fieldName, vector);\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  // get all vectors\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = new ParallelFields();\n    for (Map.Entry<String,AtomicIndexReader> ent : fieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        fields.addField(fieldName, vector);\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#getTermVectors(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#getTermVectors(int).mjava","sourceNew":"  // get all vectors\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = new ParallelFields();\n    for (Map.Entry<String,AtomicReader> ent : fieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        fields.addField(fieldName, vector);\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  // get all vectors\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = new ParallelFields();\n    for (Map.Entry<String,IndexReader> ent : fieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        fields.addField(fieldName, vector);\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b","date":1328624680,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelAtomicReader#getTermVectors(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#getTermVectors(int).mjava","sourceNew":"  // get all vectors\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = new ParallelFields();\n    for (Map.Entry<String,AtomicReader> ent : fieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        fields.addField(fieldName, vector);\n      }\n    }\n    \n    return fields;\n  }\n\n","sourceOld":"  // get all vectors\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = new ParallelFields();\n    for (Map.Entry<String,AtomicReader> ent : fieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        fields.addField(fieldName, vector);\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08b385e33541f6749e71618c9ab36fad908a7ed0","date":1328629771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#getTermVectors(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelAtomicReader#getTermVectors(int).mjava","sourceNew":"  // get all vectors\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = new ParallelFields();\n    for (Map.Entry<String,AtomicReader> ent : fieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        fields.addField(fieldName, vector);\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  // get all vectors\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = new ParallelFields();\n    for (Map.Entry<String,AtomicReader> ent : fieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        fields.addField(fieldName, vector);\n      }\n    }\n    \n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ParallelReader#getTermVectors(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#getTermVectors(int).mjava","sourceNew":"  // get all vectors\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = new ParallelFields();\n    for (Map.Entry<String,AtomicReader> ent : fieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        fields.addField(fieldName, vector);\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  // get all vectors\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = new ParallelFields();\n    for (Map.Entry<String,AtomicReader> ent : fieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        fields.addField(fieldName, vector);\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08b385e33541f6749e71618c9ab36fad908a7ed0":["9ecf541c11d0df215aa1ea806f826d88fb9b5b9b"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["08b385e33541f6749e71618c9ab36fad908a7ed0"],"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3cc749c053615f5871f3b95715fe292f34e70a53","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["3cc749c053615f5871f3b95715fe292f34e70a53"]},"commit2Childs":{"08b385e33541f6749e71618c9ab36fad908a7ed0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b":["08b385e33541f6749e71618c9ab36fad908a7ed0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9ecf541c11d0df215aa1ea806f826d88fb9b5b9b"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}