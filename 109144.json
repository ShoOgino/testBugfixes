{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","commits":[{"id":"ca83400a04ed1cbfa09560d2e7184f93f5d75363","date":1428921124,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = ZkNodeProps.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n\n    ByteArrayOutputStream os1 = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(m, os1);\n    Map m1 = (Map) new JavaBinCodec().unmarshal(new ByteArrayInputStream(os1.toByteArray()));\n    ByteArrayOutputStream os2 = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(m, os2);\n    Map m2 = (Map) new JavaBinCodec().unmarshal(new ByteArrayInputStream(os2.toByteArray()));\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new Cache<JavaBinCodec.StringBytes, String>() {\n      private HashMap<JavaBinCodec.StringBytes, String> cache = new HashMap<>();\n\n      @Override\n      public String put(JavaBinCodec.StringBytes key, String val) {\n        return cache.put(key, val);\n      }\n\n      @Override\n      public String get(JavaBinCodec.StringBytes key) {\n        return cache.get(key);\n      }\n\n      @Override\n      public String remove(JavaBinCodec.StringBytes key) {\n        return cache.remove(key);\n      }\n\n      @Override\n      public void clear() {\n        cache.clear();\n\n      }\n    });\n\n\n    m1 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(os1.toByteArray()));\n    m2 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(os2.toByteArray()));\n    l1 = new ArrayList<>(m1.keySet());\n    l2 = new ArrayList<>(m2.keySet());\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","sourceNew":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n\n    ByteArrayOutputStream os1 = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(m, os1);\n    Map m1 = (Map) new JavaBinCodec().unmarshal(new ByteArrayInputStream(os1.toByteArray()));\n    ByteArrayOutputStream os2 = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(m, os2);\n    Map m2 = (Map) new JavaBinCodec().unmarshal(new ByteArrayInputStream(os2.toByteArray()));\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new Cache<JavaBinCodec.StringBytes, String>() {\n      private HashMap<JavaBinCodec.StringBytes, String> cache = new HashMap<>();\n\n      @Override\n      public String put(JavaBinCodec.StringBytes key, String val) {\n        return cache.put(key, val);\n      }\n\n      @Override\n      public String get(JavaBinCodec.StringBytes key) {\n        return cache.get(key);\n      }\n\n      @Override\n      public String remove(JavaBinCodec.StringBytes key) {\n        return cache.remove(key);\n      }\n\n      @Override\n      public void clear() {\n        cache.clear();\n\n      }\n    });\n\n\n    m1 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(os1.toByteArray()));\n    m2 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(os2.toByteArray()));\n    l1 = new ArrayList<>(m1.keySet());\n    l2 = new ArrayList<>(m2.keySet());\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = ZkNodeProps.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n\n    ByteArrayOutputStream os1 = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(m, os1);\n    Map m1 = (Map) new JavaBinCodec().unmarshal(new ByteArrayInputStream(os1.toByteArray()));\n    ByteArrayOutputStream os2 = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(m, os2);\n    Map m2 = (Map) new JavaBinCodec().unmarshal(new ByteArrayInputStream(os2.toByteArray()));\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new Cache<JavaBinCodec.StringBytes, String>() {\n      private HashMap<JavaBinCodec.StringBytes, String> cache = new HashMap<>();\n\n      @Override\n      public String put(JavaBinCodec.StringBytes key, String val) {\n        return cache.put(key, val);\n      }\n\n      @Override\n      public String get(JavaBinCodec.StringBytes key) {\n        return cache.get(key);\n      }\n\n      @Override\n      public String remove(JavaBinCodec.StringBytes key) {\n        return cache.remove(key);\n      }\n\n      @Override\n      public void clear() {\n        cache.clear();\n\n      }\n    });\n\n\n    m1 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(os1.toByteArray()));\n    m2 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(os2.toByteArray()));\n    l1 = new ArrayList<>(m1.keySet());\n    l2 = new ArrayList<>(m2.keySet());\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04aef18a25f8e0d1832199f0cc7607773de5a229","date":1473142144,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","sourceNew":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n    byte[] b1 = getBytes(m);//copy 1\n    byte[] b2 = getBytes(m);//copy 2\n    Map m1 = (Map) getObject(b1);\n    Map m2 = (Map) getObject(b1);\n\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new Cache<JavaBinCodec.StringBytes, String>() {\n      private HashMap<JavaBinCodec.StringBytes, String> cache = new HashMap<>();\n\n      @Override\n      public String put(JavaBinCodec.StringBytes key, String val) {\n        return cache.put(key, val);\n      }\n\n      @Override\n      public String get(JavaBinCodec.StringBytes key) {\n        return cache.get(key);\n      }\n\n      @Override\n      public String remove(JavaBinCodec.StringBytes key) {\n        return cache.remove(key);\n      }\n\n      @Override\n      public void clear() {\n        cache.clear();\n\n      }\n    });\n\n\n    m1 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b1));\n    m2 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b2));\n    l1 = new ArrayList<>(m1.keySet());\n    l2 = new ArrayList<>(m2.keySet());\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n\n    ByteArrayOutputStream os1 = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(m, os1);\n    Map m1 = (Map) new JavaBinCodec().unmarshal(new ByteArrayInputStream(os1.toByteArray()));\n    ByteArrayOutputStream os2 = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(m, os2);\n    Map m2 = (Map) new JavaBinCodec().unmarshal(new ByteArrayInputStream(os2.toByteArray()));\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new Cache<JavaBinCodec.StringBytes, String>() {\n      private HashMap<JavaBinCodec.StringBytes, String> cache = new HashMap<>();\n\n      @Override\n      public String put(JavaBinCodec.StringBytes key, String val) {\n        return cache.put(key, val);\n      }\n\n      @Override\n      public String get(JavaBinCodec.StringBytes key) {\n        return cache.get(key);\n      }\n\n      @Override\n      public String remove(JavaBinCodec.StringBytes key) {\n        return cache.remove(key);\n      }\n\n      @Override\n      public void clear() {\n        cache.clear();\n\n      }\n    });\n\n\n    m1 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(os1.toByteArray()));\n    m2 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(os2.toByteArray()));\n    l1 = new ArrayList<>(m1.keySet());\n    l2 = new ArrayList<>(m2.keySet());\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","sourceNew":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n    byte[] b1 = getBytes(m);//copy 1\n    byte[] b2 = getBytes(m);//copy 2\n    Map m1 = (Map) getObject(b1);\n    Map m2 = (Map) getObject(b1);\n\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new Cache<JavaBinCodec.StringBytes, String>() {\n      private HashMap<JavaBinCodec.StringBytes, String> cache = new HashMap<>();\n\n      @Override\n      public String put(JavaBinCodec.StringBytes key, String val) {\n        return cache.put(key, val);\n      }\n\n      @Override\n      public String get(JavaBinCodec.StringBytes key) {\n        return cache.get(key);\n      }\n\n      @Override\n      public String remove(JavaBinCodec.StringBytes key) {\n        return cache.remove(key);\n      }\n\n      @Override\n      public void clear() {\n        cache.clear();\n\n      }\n    });\n\n\n    m1 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b1));\n    m2 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b2));\n    l1 = new ArrayList<>(m1.keySet());\n    l2 = new ArrayList<>(m2.keySet());\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n\n    ByteArrayOutputStream os1 = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(m, os1);\n    Map m1 = (Map) new JavaBinCodec().unmarshal(new ByteArrayInputStream(os1.toByteArray()));\n    ByteArrayOutputStream os2 = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(m, os2);\n    Map m2 = (Map) new JavaBinCodec().unmarshal(new ByteArrayInputStream(os2.toByteArray()));\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new Cache<JavaBinCodec.StringBytes, String>() {\n      private HashMap<JavaBinCodec.StringBytes, String> cache = new HashMap<>();\n\n      @Override\n      public String put(JavaBinCodec.StringBytes key, String val) {\n        return cache.put(key, val);\n      }\n\n      @Override\n      public String get(JavaBinCodec.StringBytes key) {\n        return cache.get(key);\n      }\n\n      @Override\n      public String remove(JavaBinCodec.StringBytes key) {\n        return cache.remove(key);\n      }\n\n      @Override\n      public void clear() {\n        cache.clear();\n\n      }\n    });\n\n\n    m1 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(os1.toByteArray()));\n    m2 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(os2.toByteArray()));\n    l1 = new ArrayList<>(m1.keySet());\n    l2 = new ArrayList<>(m2.keySet());\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","sourceNew":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n    byte[] b1 = getBytes(m);//copy 1\n    byte[] b2 = getBytes(m);//copy 2\n    Map m1 = (Map) getObject(b1);\n    Map m2 = (Map) getObject(b1);\n\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new Cache<JavaBinCodec.StringBytes, String>() {\n      private HashMap<JavaBinCodec.StringBytes, String> cache = new HashMap<>();\n\n      @Override\n      public String put(JavaBinCodec.StringBytes key, String val) {\n        return cache.put(key, val);\n      }\n\n      @Override\n      public String get(JavaBinCodec.StringBytes key) {\n        return cache.get(key);\n      }\n\n      @Override\n      public String remove(JavaBinCodec.StringBytes key) {\n        return cache.remove(key);\n      }\n\n      @Override\n      public void clear() {\n        cache.clear();\n\n      }\n    });\n\n\n    m1 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b1));\n    m2 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b2));\n    l1 = new ArrayList<>(m1.keySet());\n    l2 = new ArrayList<>(m2.keySet());\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n\n    ByteArrayOutputStream os1 = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(m, os1);\n    Map m1 = (Map) new JavaBinCodec().unmarshal(new ByteArrayInputStream(os1.toByteArray()));\n    ByteArrayOutputStream os2 = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(m, os2);\n    Map m2 = (Map) new JavaBinCodec().unmarshal(new ByteArrayInputStream(os2.toByteArray()));\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new Cache<JavaBinCodec.StringBytes, String>() {\n      private HashMap<JavaBinCodec.StringBytes, String> cache = new HashMap<>();\n\n      @Override\n      public String put(JavaBinCodec.StringBytes key, String val) {\n        return cache.put(key, val);\n      }\n\n      @Override\n      public String get(JavaBinCodec.StringBytes key) {\n        return cache.get(key);\n      }\n\n      @Override\n      public String remove(JavaBinCodec.StringBytes key) {\n        return cache.remove(key);\n      }\n\n      @Override\n      public void clear() {\n        cache.clear();\n\n      }\n    });\n\n\n    m1 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(os1.toByteArray()));\n    m2 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(os2.toByteArray()));\n    l1 = new ArrayList<>(m1.keySet());\n    l2 = new ArrayList<>(m2.keySet());\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bca807fcb2fa11c40a0c929d869a16376c24932b","date":1476974181,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","sourceNew":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n    byte[] b1 = getBytes(m);//copy 1\n    byte[] b2 = getBytes(m);//copy 2\n    Map m1 = (Map) getObject(b1);\n    Map m2 = (Map) getObject(b1);\n\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new MapBackedCache<>(new HashMap<>()));\n\n\n    m1 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b1));\n    m2 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b2));\n    l1 = new ArrayList<>(m1.keySet());\n    l2 = new ArrayList<>(m2.keySet());\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n    byte[] b1 = getBytes(m);//copy 1\n    byte[] b2 = getBytes(m);//copy 2\n    Map m1 = (Map) getObject(b1);\n    Map m2 = (Map) getObject(b1);\n\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new Cache<JavaBinCodec.StringBytes, String>() {\n      private HashMap<JavaBinCodec.StringBytes, String> cache = new HashMap<>();\n\n      @Override\n      public String put(JavaBinCodec.StringBytes key, String val) {\n        return cache.put(key, val);\n      }\n\n      @Override\n      public String get(JavaBinCodec.StringBytes key) {\n        return cache.get(key);\n      }\n\n      @Override\n      public String remove(JavaBinCodec.StringBytes key) {\n        return cache.remove(key);\n      }\n\n      @Override\n      public void clear() {\n        cache.clear();\n\n      }\n    });\n\n\n    m1 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b1));\n    m2 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b2));\n    l1 = new ArrayList<>(m1.keySet());\n    l2 = new ArrayList<>(m2.keySet());\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","sourceNew":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n    byte[] b1 = getBytes(m);//copy 1\n    byte[] b2 = getBytes(m);//copy 2\n    Map m1 = (Map) getObject(b1);\n    Map m2 = (Map) getObject(b1);\n\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new Cache<JavaBinCodec.StringBytes, String>() {\n      private HashMap<JavaBinCodec.StringBytes, String> cache = new HashMap<>();\n\n      @Override\n      public String put(JavaBinCodec.StringBytes key, String val) {\n        return cache.put(key, val);\n      }\n\n      @Override\n      public String get(JavaBinCodec.StringBytes key) {\n        return cache.get(key);\n      }\n\n      @Override\n      public String remove(JavaBinCodec.StringBytes key) {\n        return cache.remove(key);\n      }\n\n      @Override\n      public void clear() {\n        cache.clear();\n\n      }\n    });\n\n\n    m1 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b1));\n    m2 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b2));\n    l1 = new ArrayList<>(m1.keySet());\n    l2 = new ArrayList<>(m2.keySet());\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n\n    ByteArrayOutputStream os1 = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(m, os1);\n    Map m1 = (Map) new JavaBinCodec().unmarshal(new ByteArrayInputStream(os1.toByteArray()));\n    ByteArrayOutputStream os2 = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(m, os2);\n    Map m2 = (Map) new JavaBinCodec().unmarshal(new ByteArrayInputStream(os2.toByteArray()));\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new Cache<JavaBinCodec.StringBytes, String>() {\n      private HashMap<JavaBinCodec.StringBytes, String> cache = new HashMap<>();\n\n      @Override\n      public String put(JavaBinCodec.StringBytes key, String val) {\n        return cache.put(key, val);\n      }\n\n      @Override\n      public String get(JavaBinCodec.StringBytes key) {\n        return cache.get(key);\n      }\n\n      @Override\n      public String remove(JavaBinCodec.StringBytes key) {\n        return cache.remove(key);\n      }\n\n      @Override\n      public void clear() {\n        cache.clear();\n\n      }\n    });\n\n\n    m1 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(os1.toByteArray()));\n    m2 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(os2.toByteArray()));\n    l1 = new ArrayList<>(m1.keySet());\n    l2 = new ArrayList<>(m2.keySet());\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","sourceNew":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n    byte[] b1 = getBytes(m);//copy 1\n    byte[] b2 = getBytes(m);//copy 2\n    Map m1 = (Map) getObject(b1);\n    Map m2 = (Map) getObject(b1);\n\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new MapBackedCache<>(new HashMap<>()));\n\n\n    m1 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b1));\n    m2 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b2));\n    l1 = new ArrayList<>(m1.keySet());\n    l2 = new ArrayList<>(m2.keySet());\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n    byte[] b1 = getBytes(m);//copy 1\n    byte[] b2 = getBytes(m);//copy 2\n    Map m1 = (Map) getObject(b1);\n    Map m2 = (Map) getObject(b1);\n\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new Cache<JavaBinCodec.StringBytes, String>() {\n      private HashMap<JavaBinCodec.StringBytes, String> cache = new HashMap<>();\n\n      @Override\n      public String put(JavaBinCodec.StringBytes key, String val) {\n        return cache.put(key, val);\n      }\n\n      @Override\n      public String get(JavaBinCodec.StringBytes key) {\n        return cache.get(key);\n      }\n\n      @Override\n      public String remove(JavaBinCodec.StringBytes key) {\n        return cache.remove(key);\n      }\n\n      @Override\n      public void clear() {\n        cache.clear();\n\n      }\n    });\n\n\n    m1 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b1));\n    m2 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b2));\n    l1 = new ArrayList<>(m1.keySet());\n    l2 = new ArrayList<>(m2.keySet());\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","date":1497850557,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","sourceNew":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n    byte[] b1 = getBytes(m);//copy 1\n    byte[] b2 = getBytes(m);//copy 2\n    Map m1 = (Map) getObject(b1);\n    Map m2 = (Map) getObject(b1);\n\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new MapBackedCache<>(new HashMap<>()));\n\n\n    try (JavaBinCodec c1 = new JavaBinCodec(null, stringCache);\n         JavaBinCodec c2 = new JavaBinCodec(null, stringCache)) {\n\n      m1 = (Map) c1.unmarshal(new ByteArrayInputStream(b1));\n      m2 = (Map) c2.unmarshal(new ByteArrayInputStream(b2));\n\n      l1 = new ArrayList<>(m1.keySet());\n      l2 = new ArrayList<>(m2.keySet());\n    }\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n    byte[] b1 = getBytes(m);//copy 1\n    byte[] b2 = getBytes(m);//copy 2\n    Map m1 = (Map) getObject(b1);\n    Map m2 = (Map) getObject(b1);\n\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new MapBackedCache<>(new HashMap<>()));\n\n\n    m1 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b1));\n    m2 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b2));\n    l1 = new ArrayList<>(m1.keySet());\n    l2 = new ArrayList<>(m2.keySet());\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","sourceNew":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n    byte[] b1 = getBytes(m);//copy 1\n    byte[] b2 = getBytes(m);//copy 2\n    Map m1 = (Map) getObject(b1);\n    Map m2 = (Map) getObject(b1);\n\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new MapBackedCache<>(new HashMap<>()));\n\n\n    try (JavaBinCodec c1 = new JavaBinCodec(null, stringCache);\n         JavaBinCodec c2 = new JavaBinCodec(null, stringCache)) {\n\n      m1 = (Map) c1.unmarshal(new ByteArrayInputStream(b1));\n      m2 = (Map) c2.unmarshal(new ByteArrayInputStream(b2));\n\n      l1 = new ArrayList<>(m1.keySet());\n      l2 = new ArrayList<>(m2.keySet());\n    }\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n    byte[] b1 = getBytes(m);//copy 1\n    byte[] b2 = getBytes(m);//copy 2\n    Map m1 = (Map) getObject(b1);\n    Map m2 = (Map) getObject(b1);\n\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new MapBackedCache<>(new HashMap<>()));\n\n\n    m1 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b1));\n    m2 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b2));\n    l1 = new ArrayList<>(m1.keySet());\n    l2 = new ArrayList<>(m2.keySet());\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","sourceNew":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n    byte[] b1 = getBytes(m);//copy 1\n    byte[] b2 = getBytes(m);//copy 2\n    Map m1 = (Map) getObject(b1);\n    Map m2 = (Map) getObject(b1);\n\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new MapBackedCache<>(new HashMap<>()));\n\n\n    try (JavaBinCodec c1 = new JavaBinCodec(null, stringCache);\n         JavaBinCodec c2 = new JavaBinCodec(null, stringCache)) {\n\n      m1 = (Map) c1.unmarshal(new ByteArrayInputStream(b1));\n      m2 = (Map) c2.unmarshal(new ByteArrayInputStream(b2));\n\n      l1 = new ArrayList<>(m1.keySet());\n      l2 = new ArrayList<>(m2.keySet());\n    }\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n    byte[] b1 = getBytes(m);//copy 1\n    byte[] b2 = getBytes(m);//copy 2\n    Map m1 = (Map) getObject(b1);\n    Map m2 = (Map) getObject(b1);\n\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new MapBackedCache<>(new HashMap<>()));\n\n\n    m1 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b1));\n    m2 = (Map) new JavaBinCodec(null, stringCache).unmarshal(new ByteArrayInputStream(b2));\n    l1 = new ArrayList<>(m1.keySet());\n    l2 = new ArrayList<>(m2.keySet());\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStringCaching().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n    byte[] b1 = getBytes(m);//copy 1\n    byte[] b2 = getBytes(m);//copy 2\n    Map m1 = (Map) getObject(b1);\n    Map m2 = (Map) getObject(b1);\n\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new MapBackedCache<>(new HashMap<>()));\n\n\n    try (JavaBinCodec c1 = new JavaBinCodec(null, stringCache);\n         JavaBinCodec c2 = new JavaBinCodec(null, stringCache)) {\n\n      m1 = (Map) c1.unmarshal(new ByteArrayInputStream(b1));\n      m2 = (Map) c2.unmarshal(new ByteArrayInputStream(b2));\n\n      l1 = new ArrayList<>(m1.keySet());\n      l2 = new ArrayList<>(m2.keySet());\n    }\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testStringCaching() throws Exception {\n    Map<String, Object> m = Utils.makeMap(\"key1\", \"val1\", \"key2\", \"val2\");\n    byte[] b1 = getBytes(m);//copy 1\n    byte[] b2 = getBytes(m);//copy 2\n    Map m1 = (Map) getObject(b1);\n    Map m2 = (Map) getObject(b1);\n\n    List l1 = new ArrayList<>(m1.keySet());\n    List l2 = new ArrayList<>(m2.keySet());\n\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertFalse(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertFalse(l1.get(1) == l2.get(1));\n\n    JavaBinCodec.StringCache stringCache = new JavaBinCodec.StringCache(new MapBackedCache<>(new HashMap<>()));\n\n\n    try (JavaBinCodec c1 = new JavaBinCodec(null, stringCache);\n         JavaBinCodec c2 = new JavaBinCodec(null, stringCache)) {\n\n      m1 = (Map) c1.unmarshal(new ByteArrayInputStream(b1));\n      m2 = (Map) c2.unmarshal(new ByteArrayInputStream(b2));\n\n      l1 = new ArrayList<>(m1.keySet());\n      l2 = new ArrayList<>(m2.keySet());\n    }\n    assertTrue(l1.get(0).equals(l2.get(0)));\n    assertTrue(l1.get(0) == l2.get(0));\n    assertTrue(l1.get(1).equals(l2.get(1)));\n    assertTrue(l1.get(1) == l2.get(1));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["28288370235ed02234a64753cdbf0c6ec096304a"],"ca83400a04ed1cbfa09560d2e7184f93f5d75363":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04aef18a25f8e0d1832199f0cc7607773de5a229":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["ca83400a04ed1cbfa09560d2e7184f93f5d75363"],"28288370235ed02234a64753cdbf0c6ec096304a":["bca807fcb2fa11c40a0c929d869a16376c24932b","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b693a83132c9e45afcd564fd65a25b60ed80388b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["b693a83132c9e45afcd564fd65a25b60ed80388b","04aef18a25f8e0d1832199f0cc7607773de5a229"],"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["bca807fcb2fa11c40a0c929d869a16376c24932b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b693a83132c9e45afcd564fd65a25b60ed80388b","89424def13674ea17829b41c5883c54ecc31a132"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","bca807fcb2fa11c40a0c929d869a16376c24932b"],"bca807fcb2fa11c40a0c929d869a16376c24932b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["bca807fcb2fa11c40a0c929d869a16376c24932b","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca83400a04ed1cbfa09560d2e7184f93f5d75363":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"04aef18a25f8e0d1832199f0cc7607773de5a229":["89424def13674ea17829b41c5883c54ecc31a132"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["04aef18a25f8e0d1832199f0cc7607773de5a229","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"28288370235ed02234a64753cdbf0c6ec096304a":["9ba1b632c041956c93c41aa1143d16a567014891"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca83400a04ed1cbfa09560d2e7184f93f5d75363"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","bca807fcb2fa11c40a0c929d869a16376c24932b"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"bca807fcb2fa11c40a0c929d869a16376c24932b":["28288370235ed02234a64753cdbf0c6ec096304a","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}