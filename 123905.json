{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#Lucene50PostingsReader(SegmentReadState).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#Lucene50PostingsReader(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  /** Sole constructor. */\n  public Lucene50PostingsReader(SegmentReadState state) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    String docName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.DOC_EXTENSION);\n    try {\n      docIn = state.directory.openInput(docName, state.context);\n      version = CodecUtil.checkSegmentHeader(docIn,\n                                             Lucene50PostingsWriter.DOC_CODEC,\n                                             Lucene50PostingsWriter.VERSION_START,\n                                             Lucene50PostingsWriter.VERSION_CURRENT,\n                                             state.segmentInfo.getId(), state.segmentSuffix);\n      forUtil = new ForUtil(docIn);\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(docIn);\n\n      if (state.fieldInfos.hasProx()) {\n        String proxName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.POS_EXTENSION);\n        posIn = state.directory.openInput(proxName, state.context);\n        CodecUtil.checkSegmentHeader(posIn, Lucene50PostingsWriter.POS_CODEC, version, version, state.segmentInfo.getId(), state.segmentSuffix);\n        \n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(posIn);\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.PAY_EXTENSION);\n          payIn = state.directory.openInput(payName, state.context);\n          CodecUtil.checkSegmentHeader(payIn, Lucene50PostingsWriter.PAY_CODEC, version, version, state.segmentInfo.getId(), state.segmentSuffix);\n          \n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(payIn);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41474419488c9bf7affce00196d7010a7c3dcfdf","date":1413900484,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#Lucene50PostingsReader(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#Lucene50PostingsReader(SegmentReadState).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene50PostingsReader(SegmentReadState state) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    \n    // NOTE: these data files are too costly to verify checksum against all the bytes on open,\n    // but for now we at least verify proper structure of the checksum footer: which looks\n    // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n    // such as file truncation.\n    \n    String docName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.DOC_EXTENSION);\n    try {\n      docIn = state.directory.openInput(docName, state.context);\n      version = CodecUtil.checkSegmentHeader(docIn, DOC_CODEC, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      forUtil = new ForUtil(docIn);\n      CodecUtil.retrieveChecksum(docIn);\n\n      if (state.fieldInfos.hasProx()) {\n        String proxName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.POS_EXTENSION);\n        posIn = state.directory.openInput(proxName, state.context);\n        CodecUtil.checkSegmentHeader(posIn, POS_CODEC, version, version, state.segmentInfo.getId(), state.segmentSuffix);\n        CodecUtil.retrieveChecksum(posIn);\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.PAY_EXTENSION);\n          payIn = state.directory.openInput(payName, state.context);\n          CodecUtil.checkSegmentHeader(payIn, PAY_CODEC, version, version, state.segmentInfo.getId(), state.segmentSuffix);\n          CodecUtil.retrieveChecksum(payIn);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene50PostingsReader(SegmentReadState state) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    String docName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.DOC_EXTENSION);\n    try {\n      docIn = state.directory.openInput(docName, state.context);\n      version = CodecUtil.checkSegmentHeader(docIn,\n                                             Lucene50PostingsWriter.DOC_CODEC,\n                                             Lucene50PostingsWriter.VERSION_START,\n                                             Lucene50PostingsWriter.VERSION_CURRENT,\n                                             state.segmentInfo.getId(), state.segmentSuffix);\n      forUtil = new ForUtil(docIn);\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(docIn);\n\n      if (state.fieldInfos.hasProx()) {\n        String proxName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.POS_EXTENSION);\n        posIn = state.directory.openInput(proxName, state.context);\n        CodecUtil.checkSegmentHeader(posIn, Lucene50PostingsWriter.POS_CODEC, version, version, state.segmentInfo.getId(), state.segmentSuffix);\n        \n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(posIn);\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.PAY_EXTENSION);\n          payIn = state.directory.openInput(payName, state.context);\n          CodecUtil.checkSegmentHeader(payIn, Lucene50PostingsWriter.PAY_CODEC, version, version, state.segmentInfo.getId(), state.segmentSuffix);\n          \n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(payIn);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#Lucene50PostingsReader(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#Lucene50PostingsReader(SegmentReadState).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene50PostingsReader(SegmentReadState state) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    \n    // NOTE: these data files are too costly to verify checksum against all the bytes on open,\n    // but for now we at least verify proper structure of the checksum footer: which looks\n    // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n    // such as file truncation.\n    \n    String docName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.DOC_EXTENSION);\n    try {\n      docIn = state.directory.openInput(docName, state.context);\n      version = CodecUtil.checkIndexHeader(docIn, DOC_CODEC, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      forUtil = new ForUtil(docIn);\n      CodecUtil.retrieveChecksum(docIn);\n\n      if (state.fieldInfos.hasProx()) {\n        String proxName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.POS_EXTENSION);\n        posIn = state.directory.openInput(proxName, state.context);\n        CodecUtil.checkIndexHeader(posIn, POS_CODEC, version, version, state.segmentInfo.getId(), state.segmentSuffix);\n        CodecUtil.retrieveChecksum(posIn);\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.PAY_EXTENSION);\n          payIn = state.directory.openInput(payName, state.context);\n          CodecUtil.checkIndexHeader(payIn, PAY_CODEC, version, version, state.segmentInfo.getId(), state.segmentSuffix);\n          CodecUtil.retrieveChecksum(payIn);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene50PostingsReader(SegmentReadState state) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    \n    // NOTE: these data files are too costly to verify checksum against all the bytes on open,\n    // but for now we at least verify proper structure of the checksum footer: which looks\n    // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n    // such as file truncation.\n    \n    String docName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.DOC_EXTENSION);\n    try {\n      docIn = state.directory.openInput(docName, state.context);\n      version = CodecUtil.checkSegmentHeader(docIn, DOC_CODEC, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      forUtil = new ForUtil(docIn);\n      CodecUtil.retrieveChecksum(docIn);\n\n      if (state.fieldInfos.hasProx()) {\n        String proxName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.POS_EXTENSION);\n        posIn = state.directory.openInput(proxName, state.context);\n        CodecUtil.checkSegmentHeader(posIn, POS_CODEC, version, version, state.segmentInfo.getId(), state.segmentSuffix);\n        CodecUtil.retrieveChecksum(posIn);\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.PAY_EXTENSION);\n          payIn = state.directory.openInput(payName, state.context);\n          CodecUtil.checkSegmentHeader(payIn, PAY_CODEC, version, version, state.segmentInfo.getId(), state.segmentSuffix);\n          CodecUtil.retrieveChecksum(payIn);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#Lucene50PostingsReader(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  /** Sole constructor. */\n  public Lucene50PostingsReader(SegmentReadState state) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    \n    // NOTE: these data files are too costly to verify checksum against all the bytes on open,\n    // but for now we at least verify proper structure of the checksum footer: which looks\n    // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n    // such as file truncation.\n    \n    String docName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.DOC_EXTENSION);\n    try {\n      docIn = state.directory.openInput(docName, state.context);\n      version = CodecUtil.checkIndexHeader(docIn, DOC_CODEC, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      forUtil = new ForUtil(docIn);\n      CodecUtil.retrieveChecksum(docIn);\n\n      if (state.fieldInfos.hasProx()) {\n        String proxName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.POS_EXTENSION);\n        posIn = state.directory.openInput(proxName, state.context);\n        CodecUtil.checkIndexHeader(posIn, POS_CODEC, version, version, state.segmentInfo.getId(), state.segmentSuffix);\n        CodecUtil.retrieveChecksum(posIn);\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.PAY_EXTENSION);\n          payIn = state.directory.openInput(payName, state.context);\n          CodecUtil.checkIndexHeader(payIn, PAY_CODEC, version, version, state.segmentInfo.getId(), state.segmentSuffix);\n          CodecUtil.retrieveChecksum(payIn);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#Lucene50PostingsReader(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#Lucene50PostingsReader(SegmentReadState).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene50PostingsReader(SegmentReadState state) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    \n    // NOTE: these data files are too costly to verify checksum against all the bytes on open,\n    // but for now we at least verify proper structure of the checksum footer: which looks\n    // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n    // such as file truncation.\n    \n    String docName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.DOC_EXTENSION);\n    try {\n      docIn = state.directory.openInput(docName, state.context);\n      version = CodecUtil.checkIndexHeader(docIn, DOC_CODEC, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      forUtil = new ForUtil(docIn);\n      CodecUtil.retrieveChecksum(docIn);\n\n      if (state.fieldInfos.hasProx()) {\n        String proxName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.POS_EXTENSION);\n        posIn = state.directory.openInput(proxName, state.context);\n        CodecUtil.checkIndexHeader(posIn, POS_CODEC, version, version, state.segmentInfo.getId(), state.segmentSuffix);\n        CodecUtil.retrieveChecksum(posIn);\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.PAY_EXTENSION);\n          payIn = state.directory.openInput(payName, state.context);\n          CodecUtil.checkIndexHeader(payIn, PAY_CODEC, version, version, state.segmentInfo.getId(), state.segmentSuffix);\n          CodecUtil.retrieveChecksum(payIn);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene50PostingsReader(SegmentReadState state) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    \n    // NOTE: these data files are too costly to verify checksum against all the bytes on open,\n    // but for now we at least verify proper structure of the checksum footer: which looks\n    // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n    // such as file truncation.\n    \n    String docName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.DOC_EXTENSION);\n    try {\n      docIn = state.directory.openInput(docName, state.context);\n      version = CodecUtil.checkIndexHeader(docIn, DOC_CODEC, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      forUtil = new ForUtil(docIn);\n      CodecUtil.retrieveChecksum(docIn);\n\n      if (state.fieldInfos.hasProx()) {\n        String proxName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.POS_EXTENSION);\n        posIn = state.directory.openInput(proxName, state.context);\n        CodecUtil.checkIndexHeader(posIn, POS_CODEC, version, version, state.segmentInfo.getId(), state.segmentSuffix);\n        CodecUtil.retrieveChecksum(posIn);\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.PAY_EXTENSION);\n          payIn = state.directory.openInput(payName, state.context);\n          CodecUtil.checkIndexHeader(payIn, PAY_CODEC, version, version, state.segmentInfo.getId(), state.segmentSuffix);\n          CodecUtil.retrieveChecksum(payIn);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3384e6013a93e4d11b7d75388693f8d0388602bf":["41474419488c9bf7affce00196d7010a7c3dcfdf"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"41474419488c9bf7affce00196d7010a7c3dcfdf":["99eb4a732d1a908f4636ace52928876136bf1896"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["41474419488c9bf7affce00196d7010a7c3dcfdf"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"41474419488c9bf7affce00196d7010a7c3dcfdf":["3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}