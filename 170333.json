{"path":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testWildcard().mjava","commits":[{"id":"e3c9188b2bff41b228f06f721e7da193b96f895b","date":1548164162,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testWildcard().mjava","pathOld":"/dev/null","sourceNew":"  public void testWildcard() throws IOException {\n    IntervalsSource source = Intervals.wildcard(\"?ot\");\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 2, 2, 10, 10, 17, 17, 27, 27 },\n        { 5, 5, 10, 10, 21, 21 },\n        { 3, 3 },\n        { 2, 2, 10, 10, 17, 17 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 4, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 2, 2, 15, 18);\n    assertMatch(mi, 10, 10, 63, 66);\n    assertMatch(mi, 17, 17, 97, 100);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testWildcard().mjava","pathOld":"/dev/null","sourceNew":"  public void testWildcard() throws IOException {\n    IntervalsSource source = Intervals.wildcard(\"?ot\");\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 2, 2, 10, 10, 17, 17, 27, 27 },\n        { 5, 5, 10, 10, 21, 21 },\n        { 3, 3 },\n        { 2, 2, 10, 10, 17, 17 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 4, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 2, 2, 15, 18);\n    assertMatch(mi, 10, 10, 63, 66);\n    assertMatch(mi, 17, 17, 97, 100);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de83feac39749388139af49796b399fc1033cde2","date":1560179682,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testWildcard().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testWildcard().mjava","sourceNew":"  public void testWildcard() throws IOException {\n    IntervalsSource source = Intervals.wildcard(\"?ot\");\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 2, 2, 10, 10, 17, 17, 27, 27 },\n        { 5, 5, 10, 10, 21, 21 },\n        { 3, 3 },\n        { 2, 2, 10, 10, 17, 17 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 4, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 2, 2, 15, 18);\n    assertMatch(mi, 10, 10, 63, 66);\n    assertMatch(mi, 17, 17, 97, 100);\n\n    IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n      IntervalsSource s = Intervals.wildcard(\"?ot\", 1);\n      for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n        s.intervals(\"field1\", ctx);\n      }\n    });\n    assertEquals(\"Automaton [?ot] expanded to too many terms (limit 1)\", e.getMessage());\n  }\n\n","sourceOld":"  public void testWildcard() throws IOException {\n    IntervalsSource source = Intervals.wildcard(\"?ot\");\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 2, 2, 10, 10, 17, 17, 27, 27 },\n        { 5, 5, 10, 10, 21, 21 },\n        { 3, 3 },\n        { 2, 2, 10, 10, 17, 17 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 4, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 2, 2, 15, 18);\n    assertMatch(mi, 10, 10, 63, 66);\n    assertMatch(mi, 17, 17, 97, 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testWildcard().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testWildcard().mjava","sourceNew":"  public void testWildcard() throws IOException {\n    IntervalsSource source = Intervals.wildcard(\"?ot\");\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 2, 2, 10, 10, 17, 17, 27, 27 },\n        { 5, 5, 10, 10, 21, 21 },\n        { 3, 3 },\n        { 2, 2, 10, 10, 17, 17 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 4, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 2, 2, 15, 18);\n    assertMatch(mi, 10, 10, 63, 66);\n    assertMatch(mi, 17, 17, 97, 100);\n\n    IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n      IntervalsSource s = Intervals.wildcard(\"?ot\", 1);\n      for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n        s.intervals(\"field1\", ctx);\n      }\n    });\n    assertEquals(\"Automaton [?ot] expanded to too many terms (limit 1)\", e.getMessage());\n  }\n\n","sourceOld":"  public void testWildcard() throws IOException {\n    IntervalsSource source = Intervals.wildcard(\"?ot\");\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 2, 2, 10, 10, 17, 17, 27, 27 },\n        { 5, 5, 10, 10, 21, 21 },\n        { 3, 3 },\n        { 2, 2, 10, 10, 17, 17 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 4, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 2, 2, 15, 18);\n    assertMatch(mi, 10, 10, 63, 66);\n    assertMatch(mi, 17, 17, 97, 100);\n\n    IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n      IntervalsSource s = Intervals.wildcard(\"?ot\", 1);\n      for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n        s.intervals(\"field1\", ctx);\n      }\n    });\n    assertEquals(\"Automaton [?ot] expanded to too many terms (limit 1)\", e.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["de83feac39749388139af49796b399fc1033cde2"],"de83feac39749388139af49796b399fc1033cde2":["e3c9188b2bff41b228f06f721e7da193b96f895b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3c9188b2bff41b228f06f721e7da193b96f895b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3c9188b2bff41b228f06f721e7da193b96f895b"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de83feac39749388139af49796b399fc1033cde2":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3c9188b2bff41b228f06f721e7da193b96f895b","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"e3c9188b2bff41b228f06f721e7da193b96f895b":["de83feac39749388139af49796b399fc1033cde2","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}