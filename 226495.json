{"path":"src/test-deprecated/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryInConjunctionScorer().mjava","commits":[{"id":"5b5461affe637a07375542c763a4805300802be8","date":1102270918,"type":0,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test-deprecated/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryInConjunctionScorer().mjava","pathOld":"/dev/null","sourceNew":"  public void testPhraseQueryInConjunctionScorer() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"source\", \"marketing info\", true, true, true));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"contents\", \"foobar\", true, true, true));\n    doc.add(new Field(\"source\", \"marketing info\", true, true, true)); \n    writer.addDocument(doc);\n    \n    writer.optimize();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(directory);\n    \n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"source\", \"marketing\"));\n    phraseQuery.add(new Term(\"source\", \"info\"));\n    Hits hits = searcher.search(phraseQuery);\n    assertEquals(2, hits.length());\n    \n    TermQuery termQuery = new TermQuery(new Term(\"contents\",\"foobar\"));\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, true, false);\n    booleanQuery.add(phraseQuery, true, false);\n    hits = searcher.search(booleanQuery);\n    assertEquals(1, hits.length());\n    \n    searcher.close();\n    \n    writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    doc = new Document();\n    doc.add(new Field(\"contents\", \"map entry woo\", true, true, true));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new Field(\"contents\", \"woo map entry\", true, true, true));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new Field(\"contents\", \"map foobarword entry woo\", true, true, true));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n    \n    searcher = new IndexSearcher(directory);\n    \n    termQuery = new TermQuery(new Term(\"contents\",\"woo\"));\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"contents\",\"map\"));\n    phraseQuery.add(new Term(\"contents\",\"entry\"));\n    \n    hits = searcher.search(termQuery);\n    assertEquals(3, hits.length());\n    hits = searcher.search(phraseQuery);\n    assertEquals(2, hits.length());\n    \n    booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, true, false);\n    booleanQuery.add(phraseQuery, true, false);\n    hits = searcher.search(booleanQuery);\n    assertEquals(2, hits.length());\n    \n    booleanQuery = new BooleanQuery();\n    booleanQuery.add(phraseQuery, true, false);\n    booleanQuery.add(termQuery, true, false);\n    hits = searcher.search(booleanQuery);\n    assertEquals(2, hits.length());\n    \n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test-deprecated/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryInConjunctionScorer().mjava","sourceNew":null,"sourceOld":"  public void testPhraseQueryInConjunctionScorer() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"source\", \"marketing info\", true, true, true));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"contents\", \"foobar\", true, true, true));\n    doc.add(new Field(\"source\", \"marketing info\", true, true, true)); \n    writer.addDocument(doc);\n    \n    writer.optimize();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(directory);\n    \n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"source\", \"marketing\"));\n    phraseQuery.add(new Term(\"source\", \"info\"));\n    Hits hits = searcher.search(phraseQuery);\n    assertEquals(2, hits.length());\n    \n    TermQuery termQuery = new TermQuery(new Term(\"contents\",\"foobar\"));\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, true, false);\n    booleanQuery.add(phraseQuery, true, false);\n    hits = searcher.search(booleanQuery);\n    assertEquals(1, hits.length());\n    \n    searcher.close();\n    \n    writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    doc = new Document();\n    doc.add(new Field(\"contents\", \"map entry woo\", true, true, true));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new Field(\"contents\", \"woo map entry\", true, true, true));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new Field(\"contents\", \"map foobarword entry woo\", true, true, true));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n    \n    searcher = new IndexSearcher(directory);\n    \n    termQuery = new TermQuery(new Term(\"contents\",\"woo\"));\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"contents\",\"map\"));\n    phraseQuery.add(new Term(\"contents\",\"entry\"));\n    \n    hits = searcher.search(termQuery);\n    assertEquals(3, hits.length());\n    hits = searcher.search(phraseQuery);\n    assertEquals(2, hits.length());\n    \n    booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, true, false);\n    booleanQuery.add(phraseQuery, true, false);\n    hits = searcher.search(booleanQuery);\n    assertEquals(2, hits.length());\n    \n    booleanQuery = new BooleanQuery();\n    booleanQuery.add(phraseQuery, true, false);\n    booleanQuery.add(termQuery, true, false);\n    hits = searcher.search(booleanQuery);\n    assertEquals(2, hits.length());\n    \n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b5461affe637a07375542c763a4805300802be8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["5b5461affe637a07375542c763a4805300802be8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"5b5461affe637a07375542c763a4805300802be8":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b5461affe637a07375542c763a4805300802be8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}