{"path":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#internalNext().mjava","commits":[{"id":"cdcf766020b9b159d0b3a6ecae90ff1998ded019","date":1286818331,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#internalNext().mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * <p>\n\t * This method is converting the independent LinkHashMaps containing various\n\t * (silo'ed) suggestions for each mis-spelled word into individual\n\t * \"holistic query corrections\", aka. \"Spell Check Possibility\"\n\t * </p>\n\t * <p>\n\t * Rank here is the sum of each selected term's position in its respective\n\t * LinkedHashMap.\n\t * </p>\n\t * \n\t * @return\n\t */\n\tprivate RankedSpellPossibility internalNext() {\n\t\tif (done) {\n\t\t\tthrow new NoSuchElementException();\n\t\t}\n\n\t\tList<SpellCheckCorrection> possibleCorrection = new ArrayList<SpellCheckCorrection>();\n\t\tint rank = 0;\n\t\tfor (int i = 0; i < correctionIndex.length; i++) {\n\t\t\tList<SpellCheckCorrection> singleWordPossibilities = possibilityList.get(i);\n\t\t\tSpellCheckCorrection singleWordPossibility = singleWordPossibilities.get(correctionIndex[i]);\n\t\t\trank += correctionIndex[i];\n\n\t\t\tif (i == correctionIndex.length - 1) {\n\t\t\t\tcorrectionIndex[i]++;\n\t\t\t\tif (correctionIndex[i] == singleWordPossibilities.size()) {\n\t\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t\t\tif (correctionIndex.length == 1) {\n\t\t\t\t\t\tdone = true;\n\t\t\t\t\t}\n\t\t\t\t\tfor (int ii = i - 1; ii >= 0; ii--) {\n\t\t\t\t\t\tcorrectionIndex[ii]++;\n\t\t\t\t\t\tif (correctionIndex[ii] >= possibilityList.get(ii).size() && ii > 0) {\n\t\t\t\t\t\t\tcorrectionIndex[ii] = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpossibleCorrection.add(singleWordPossibility);\n\t\t}\n\t\t\n\t\tif(correctionIndex[0] == possibilityList.get(0).size())\n\t\t{\n\t\t\tdone = true;\n\t\t}\n\n\t\tRankedSpellPossibility rsl = new RankedSpellPossibility();\n\t\trsl.setCorrections(possibleCorrection);\n\t\trsl.setRank(rank);\n\t\treturn rsl;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#internalNext().mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * <p>\n\t * This method is converting the independent LinkHashMaps containing various\n\t * (silo'ed) suggestions for each mis-spelled word into individual\n\t * \"holistic query corrections\", aka. \"Spell Check Possibility\"\n\t * </p>\n\t * <p>\n\t * Rank here is the sum of each selected term's position in its respective\n\t * LinkedHashMap.\n\t * </p>\n\t * \n\t * @return\n\t */\n\tprivate RankedSpellPossibility internalNext() {\n\t\tif (done) {\n\t\t\tthrow new NoSuchElementException();\n\t\t}\n\n\t\tList<SpellCheckCorrection> possibleCorrection = new ArrayList<SpellCheckCorrection>();\n\t\tint rank = 0;\n\t\tfor (int i = 0; i < correctionIndex.length; i++) {\n\t\t\tList<SpellCheckCorrection> singleWordPossibilities = possibilityList.get(i);\n\t\t\tSpellCheckCorrection singleWordPossibility = singleWordPossibilities.get(correctionIndex[i]);\n\t\t\trank += correctionIndex[i];\n\n\t\t\tif (i == correctionIndex.length - 1) {\n\t\t\t\tcorrectionIndex[i]++;\n\t\t\t\tif (correctionIndex[i] == singleWordPossibilities.size()) {\n\t\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t\t\tif (correctionIndex.length == 1) {\n\t\t\t\t\t\tdone = true;\n\t\t\t\t\t}\n\t\t\t\t\tfor (int ii = i - 1; ii >= 0; ii--) {\n\t\t\t\t\t\tcorrectionIndex[ii]++;\n\t\t\t\t\t\tif (correctionIndex[ii] >= possibilityList.get(ii).size() && ii > 0) {\n\t\t\t\t\t\t\tcorrectionIndex[ii] = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpossibleCorrection.add(singleWordPossibility);\n\t\t}\n\t\t\n\t\tif(correctionIndex[0] == possibilityList.get(0).size())\n\t\t{\n\t\t\tdone = true;\n\t\t}\n\n\t\tRankedSpellPossibility rsl = new RankedSpellPossibility();\n\t\trsl.setCorrections(possibleCorrection);\n\t\trsl.setRank(rank);\n\t\treturn rsl;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/PossibilityIterator#internalNext().mjava","pathOld":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#internalNext().mjava","sourceNew":"\t/**\n\t * <p>\n\t * This method is converting the independent LinkHashMaps containing various\n\t * (silo'ed) suggestions for each mis-spelled word into individual\n\t * \"holistic query corrections\", aka. \"Spell Check Possibility\"\n\t * </p>\n\t * <p>\n\t * Rank here is the sum of each selected term's position in its respective\n\t * LinkedHashMap.\n\t * </p>\n\t * \n\t * @return\n\t */\n\tprivate RankedSpellPossibility internalNext() {\n\t\tif (done) {\n\t\t\tthrow new NoSuchElementException();\n\t\t}\n\n\t\tList<SpellCheckCorrection> possibleCorrection = new ArrayList<SpellCheckCorrection>();\n\t\tint rank = 0;\n\t\tfor (int i = 0; i < correctionIndex.length; i++) {\n\t\t\tList<SpellCheckCorrection> singleWordPossibilities = possibilityList.get(i);\n\t\t\tSpellCheckCorrection singleWordPossibility = singleWordPossibilities.get(correctionIndex[i]);\n\t\t\trank += correctionIndex[i];\n\n\t\t\tif (i == correctionIndex.length - 1) {\n\t\t\t\tcorrectionIndex[i]++;\n\t\t\t\tif (correctionIndex[i] == singleWordPossibilities.size()) {\n\t\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t\t\tif (correctionIndex.length == 1) {\n\t\t\t\t\t\tdone = true;\n\t\t\t\t\t}\n\t\t\t\t\tfor (int ii = i - 1; ii >= 0; ii--) {\n\t\t\t\t\t\tcorrectionIndex[ii]++;\n\t\t\t\t\t\tif (correctionIndex[ii] >= possibilityList.get(ii).size() && ii > 0) {\n\t\t\t\t\t\t\tcorrectionIndex[ii] = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpossibleCorrection.add(singleWordPossibility);\n\t\t}\n\t\t\n\t\tif(correctionIndex[0] == possibilityList.get(0).size())\n\t\t{\n\t\t\tdone = true;\n\t\t}\n\n\t\tRankedSpellPossibility rsl = new RankedSpellPossibility();\n\t\trsl.setCorrections(possibleCorrection);\n\t\trsl.setRank(rank);\n\t\treturn rsl;\n\t}\n\n","sourceOld":"\t/**\n\t * <p>\n\t * This method is converting the independent LinkHashMaps containing various\n\t * (silo'ed) suggestions for each mis-spelled word into individual\n\t * \"holistic query corrections\", aka. \"Spell Check Possibility\"\n\t * </p>\n\t * <p>\n\t * Rank here is the sum of each selected term's position in its respective\n\t * LinkedHashMap.\n\t * </p>\n\t * \n\t * @return\n\t */\n\tprivate RankedSpellPossibility internalNext() {\n\t\tif (done) {\n\t\t\tthrow new NoSuchElementException();\n\t\t}\n\n\t\tList<SpellCheckCorrection> possibleCorrection = new ArrayList<SpellCheckCorrection>();\n\t\tint rank = 0;\n\t\tfor (int i = 0; i < correctionIndex.length; i++) {\n\t\t\tList<SpellCheckCorrection> singleWordPossibilities = possibilityList.get(i);\n\t\t\tSpellCheckCorrection singleWordPossibility = singleWordPossibilities.get(correctionIndex[i]);\n\t\t\trank += correctionIndex[i];\n\n\t\t\tif (i == correctionIndex.length - 1) {\n\t\t\t\tcorrectionIndex[i]++;\n\t\t\t\tif (correctionIndex[i] == singleWordPossibilities.size()) {\n\t\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t\t\tif (correctionIndex.length == 1) {\n\t\t\t\t\t\tdone = true;\n\t\t\t\t\t}\n\t\t\t\t\tfor (int ii = i - 1; ii >= 0; ii--) {\n\t\t\t\t\t\tcorrectionIndex[ii]++;\n\t\t\t\t\t\tif (correctionIndex[ii] >= possibilityList.get(ii).size() && ii > 0) {\n\t\t\t\t\t\t\tcorrectionIndex[ii] = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpossibleCorrection.add(singleWordPossibility);\n\t\t}\n\t\t\n\t\tif(correctionIndex[0] == possibilityList.get(0).size())\n\t\t{\n\t\t\tdone = true;\n\t\t}\n\n\t\tRankedSpellPossibility rsl = new RankedSpellPossibility();\n\t\trsl.setCorrections(possibleCorrection);\n\t\trsl.setRank(rank);\n\t\treturn rsl;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/PossibilityIterator#internalNext().mjava","pathOld":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#internalNext().mjava","sourceNew":"\t/**\n\t * <p>\n\t * This method is converting the independent LinkHashMaps containing various\n\t * (silo'ed) suggestions for each mis-spelled word into individual\n\t * \"holistic query corrections\", aka. \"Spell Check Possibility\"\n\t * </p>\n\t * <p>\n\t * Rank here is the sum of each selected term's position in its respective\n\t * LinkedHashMap.\n\t * </p>\n\t * \n\t * @return\n\t */\n\tprivate RankedSpellPossibility internalNext() {\n\t\tif (done) {\n\t\t\tthrow new NoSuchElementException();\n\t\t}\n\n\t\tList<SpellCheckCorrection> possibleCorrection = new ArrayList<SpellCheckCorrection>();\n\t\tint rank = 0;\n\t\tfor (int i = 0; i < correctionIndex.length; i++) {\n\t\t\tList<SpellCheckCorrection> singleWordPossibilities = possibilityList.get(i);\n\t\t\tSpellCheckCorrection singleWordPossibility = singleWordPossibilities.get(correctionIndex[i]);\n\t\t\trank += correctionIndex[i];\n\n\t\t\tif (i == correctionIndex.length - 1) {\n\t\t\t\tcorrectionIndex[i]++;\n\t\t\t\tif (correctionIndex[i] == singleWordPossibilities.size()) {\n\t\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t\t\tif (correctionIndex.length == 1) {\n\t\t\t\t\t\tdone = true;\n\t\t\t\t\t}\n\t\t\t\t\tfor (int ii = i - 1; ii >= 0; ii--) {\n\t\t\t\t\t\tcorrectionIndex[ii]++;\n\t\t\t\t\t\tif (correctionIndex[ii] >= possibilityList.get(ii).size() && ii > 0) {\n\t\t\t\t\t\t\tcorrectionIndex[ii] = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpossibleCorrection.add(singleWordPossibility);\n\t\t}\n\t\t\n\t\tif(correctionIndex[0] == possibilityList.get(0).size())\n\t\t{\n\t\t\tdone = true;\n\t\t}\n\n\t\tRankedSpellPossibility rsl = new RankedSpellPossibility();\n\t\trsl.setCorrections(possibleCorrection);\n\t\trsl.setRank(rank);\n\t\treturn rsl;\n\t}\n\n","sourceOld":"\t/**\n\t * <p>\n\t * This method is converting the independent LinkHashMaps containing various\n\t * (silo'ed) suggestions for each mis-spelled word into individual\n\t * \"holistic query corrections\", aka. \"Spell Check Possibility\"\n\t * </p>\n\t * <p>\n\t * Rank here is the sum of each selected term's position in its respective\n\t * LinkedHashMap.\n\t * </p>\n\t * \n\t * @return\n\t */\n\tprivate RankedSpellPossibility internalNext() {\n\t\tif (done) {\n\t\t\tthrow new NoSuchElementException();\n\t\t}\n\n\t\tList<SpellCheckCorrection> possibleCorrection = new ArrayList<SpellCheckCorrection>();\n\t\tint rank = 0;\n\t\tfor (int i = 0; i < correctionIndex.length; i++) {\n\t\t\tList<SpellCheckCorrection> singleWordPossibilities = possibilityList.get(i);\n\t\t\tSpellCheckCorrection singleWordPossibility = singleWordPossibilities.get(correctionIndex[i]);\n\t\t\trank += correctionIndex[i];\n\n\t\t\tif (i == correctionIndex.length - 1) {\n\t\t\t\tcorrectionIndex[i]++;\n\t\t\t\tif (correctionIndex[i] == singleWordPossibilities.size()) {\n\t\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t\t\tif (correctionIndex.length == 1) {\n\t\t\t\t\t\tdone = true;\n\t\t\t\t\t}\n\t\t\t\t\tfor (int ii = i - 1; ii >= 0; ii--) {\n\t\t\t\t\t\tcorrectionIndex[ii]++;\n\t\t\t\t\t\tif (correctionIndex[ii] >= possibilityList.get(ii).size() && ii > 0) {\n\t\t\t\t\t\t\tcorrectionIndex[ii] = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpossibleCorrection.add(singleWordPossibility);\n\t\t}\n\t\t\n\t\tif(correctionIndex[0] == possibilityList.get(0).size())\n\t\t{\n\t\t\tdone = true;\n\t\t}\n\n\t\tRankedSpellPossibility rsl = new RankedSpellPossibility();\n\t\trsl.setCorrections(possibleCorrection);\n\t\trsl.setRank(rank);\n\t\treturn rsl;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/PossibilityIterator#internalNext().mjava","pathOld":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#internalNext().mjava","sourceNew":"\t/**\n\t * <p>\n\t * This method is converting the independent LinkHashMaps containing various\n\t * (silo'ed) suggestions for each mis-spelled word into individual\n\t * \"holistic query corrections\", aka. \"Spell Check Possibility\"\n\t * </p>\n\t * <p>\n\t * Rank here is the sum of each selected term's position in its respective\n\t * LinkedHashMap.\n\t * </p>\n\t * \n\t * @return\n\t */\n\tprivate RankedSpellPossibility internalNext() {\n\t\tif (done) {\n\t\t\tthrow new NoSuchElementException();\n\t\t}\n\n\t\tList<SpellCheckCorrection> possibleCorrection = new ArrayList<SpellCheckCorrection>();\n\t\tint rank = 0;\n\t\tfor (int i = 0; i < correctionIndex.length; i++) {\n\t\t\tList<SpellCheckCorrection> singleWordPossibilities = possibilityList.get(i);\n\t\t\tSpellCheckCorrection singleWordPossibility = singleWordPossibilities.get(correctionIndex[i]);\n\t\t\trank += correctionIndex[i];\n\n\t\t\tif (i == correctionIndex.length - 1) {\n\t\t\t\tcorrectionIndex[i]++;\n\t\t\t\tif (correctionIndex[i] == singleWordPossibilities.size()) {\n\t\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t\t\tif (correctionIndex.length == 1) {\n\t\t\t\t\t\tdone = true;\n\t\t\t\t\t}\n\t\t\t\t\tfor (int ii = i - 1; ii >= 0; ii--) {\n\t\t\t\t\t\tcorrectionIndex[ii]++;\n\t\t\t\t\t\tif (correctionIndex[ii] >= possibilityList.get(ii).size() && ii > 0) {\n\t\t\t\t\t\t\tcorrectionIndex[ii] = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpossibleCorrection.add(singleWordPossibility);\n\t\t}\n\t\t\n\t\tif(correctionIndex[0] == possibilityList.get(0).size())\n\t\t{\n\t\t\tdone = true;\n\t\t}\n\n\t\tRankedSpellPossibility rsl = new RankedSpellPossibility();\n\t\trsl.setCorrections(possibleCorrection);\n\t\trsl.setRank(rank);\n\t\treturn rsl;\n\t}\n\n","sourceOld":"\t/**\n\t * <p>\n\t * This method is converting the independent LinkHashMaps containing various\n\t * (silo'ed) suggestions for each mis-spelled word into individual\n\t * \"holistic query corrections\", aka. \"Spell Check Possibility\"\n\t * </p>\n\t * <p>\n\t * Rank here is the sum of each selected term's position in its respective\n\t * LinkedHashMap.\n\t * </p>\n\t * \n\t * @return\n\t */\n\tprivate RankedSpellPossibility internalNext() {\n\t\tif (done) {\n\t\t\tthrow new NoSuchElementException();\n\t\t}\n\n\t\tList<SpellCheckCorrection> possibleCorrection = new ArrayList<SpellCheckCorrection>();\n\t\tint rank = 0;\n\t\tfor (int i = 0; i < correctionIndex.length; i++) {\n\t\t\tList<SpellCheckCorrection> singleWordPossibilities = possibilityList.get(i);\n\t\t\tSpellCheckCorrection singleWordPossibility = singleWordPossibilities.get(correctionIndex[i]);\n\t\t\trank += correctionIndex[i];\n\n\t\t\tif (i == correctionIndex.length - 1) {\n\t\t\t\tcorrectionIndex[i]++;\n\t\t\t\tif (correctionIndex[i] == singleWordPossibilities.size()) {\n\t\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t\t\tif (correctionIndex.length == 1) {\n\t\t\t\t\t\tdone = true;\n\t\t\t\t\t}\n\t\t\t\t\tfor (int ii = i - 1; ii >= 0; ii--) {\n\t\t\t\t\t\tcorrectionIndex[ii]++;\n\t\t\t\t\t\tif (correctionIndex[ii] >= possibilityList.get(ii).size() && ii > 0) {\n\t\t\t\t\t\t\tcorrectionIndex[ii] = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpossibleCorrection.add(singleWordPossibility);\n\t\t}\n\t\t\n\t\tif(correctionIndex[0] == possibilityList.get(0).size())\n\t\t{\n\t\t\tdone = true;\n\t\t}\n\n\t\tRankedSpellPossibility rsl = new RankedSpellPossibility();\n\t\trsl.setCorrections(possibleCorrection);\n\t\trsl.setRank(rank);\n\t\treturn rsl;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["cdcf766020b9b159d0b3a6ecae90ff1998ded019"],"cdcf766020b9b159d0b3a6ecae90ff1998ded019":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["cdcf766020b9b159d0b3a6ecae90ff1998ded019","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["cdcf766020b9b159d0b3a6ecae90ff1998ded019"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cdcf766020b9b159d0b3a6ecae90ff1998ded019"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"cdcf766020b9b159d0b3a6ecae90ff1998ded019":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cdcf766020b9b159d0b3a6ecae90ff1998ded019","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}