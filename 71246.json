{"path":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#parallel(Random,boolean).mjava","commits":[{"id":"8be807b98a5aab36b690a9bd4ef0e4b5d33b8689","date":1329492225,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#parallel(Random,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#parallel(Random).mjava","sourceNew":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random, boolean compositeComposite) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    final CompositeReader rd1, rd2;\n    if (compositeComposite) {\n      rd1 = new MultiReader(DirectoryReader.open(dir1), DirectoryReader.open(dir1));\n      rd2 = new MultiReader(DirectoryReader.open(dir2), DirectoryReader.open(dir2));\n      assertEquals(2, rd1.getSequentialSubReaders().length);\n      assertEquals(2, rd2.getSequentialSubReaders().length);\n    } else {\n      rd1 = DirectoryReader.open(dir1);\n      rd2 = DirectoryReader.open(dir2);\n      assertEquals(3, rd1.getSequentialSubReaders().length);\n      assertEquals(3, rd2.getSequentialSubReaders().length);\n    }\n    ParallelCompositeReader pr = new ParallelCompositeReader(rd1, rd2);\n    return newSearcher(pr);\n  }\n\n","sourceOld":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    final DirectoryReader rd1 = DirectoryReader.open(dir1),\n      rd2 = DirectoryReader.open(dir2);\n    assertEquals(3, rd1.getSequentialSubReaders().length);\n    assertEquals(3, rd2.getSequentialSubReaders().length);\n    ParallelCompositeReader pr = new ParallelCompositeReader(rd1, rd2);\n    return newSearcher(pr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#parallel(Random,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#parallel(Random,boolean).mjava","sourceNew":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random, boolean compositeComposite) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    final CompositeReader rd1, rd2;\n    if (compositeComposite) {\n      rd1 = new MultiReader(DirectoryReader.open(dir1), DirectoryReader.open(dir1));\n      rd2 = new MultiReader(DirectoryReader.open(dir2), DirectoryReader.open(dir2));\n      assertEquals(2, rd1.getSequentialSubReaders().size());\n      assertEquals(2, rd2.getSequentialSubReaders().size());\n    } else {\n      rd1 = DirectoryReader.open(dir1);\n      rd2 = DirectoryReader.open(dir2);\n      assertEquals(3, rd1.getSequentialSubReaders().size());\n      assertEquals(3, rd2.getSequentialSubReaders().size());\n    }\n    ParallelCompositeReader pr = new ParallelCompositeReader(rd1, rd2);\n    return newSearcher(pr);\n  }\n\n","sourceOld":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random, boolean compositeComposite) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    final CompositeReader rd1, rd2;\n    if (compositeComposite) {\n      rd1 = new MultiReader(DirectoryReader.open(dir1), DirectoryReader.open(dir1));\n      rd2 = new MultiReader(DirectoryReader.open(dir2), DirectoryReader.open(dir2));\n      assertEquals(2, rd1.getSequentialSubReaders().length);\n      assertEquals(2, rd2.getSequentialSubReaders().length);\n    } else {\n      rd1 = DirectoryReader.open(dir1);\n      rd2 = DirectoryReader.open(dir2);\n      assertEquals(3, rd1.getSequentialSubReaders().length);\n      assertEquals(3, rd2.getSequentialSubReaders().length);\n    }\n    ParallelCompositeReader pr = new ParallelCompositeReader(rd1, rd2);\n    return newSearcher(pr);\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#parallel(Random,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#parallel(Random,boolean).mjava","sourceNew":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random, boolean compositeComposite) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    final CompositeReader rd1, rd2;\n    if (compositeComposite) {\n      rd1 = new MultiReader(DirectoryReader.open(dir1), DirectoryReader.open(dir1));\n      rd2 = new MultiReader(DirectoryReader.open(dir2), DirectoryReader.open(dir2));\n      assertEquals(2, rd1.getTopReaderContext().children().size());\n      assertEquals(2, rd2.getTopReaderContext().children().size());\n    } else {\n      rd1 = DirectoryReader.open(dir1);\n      rd2 = DirectoryReader.open(dir2);\n      assertEquals(3, rd1.getTopReaderContext().children().size());\n      assertEquals(3, rd2.getTopReaderContext().children().size());\n    }\n    ParallelCompositeReader pr = new ParallelCompositeReader(rd1, rd2);\n    return newSearcher(pr);\n  }\n\n","sourceOld":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random, boolean compositeComposite) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    final CompositeReader rd1, rd2;\n    if (compositeComposite) {\n      rd1 = new MultiReader(DirectoryReader.open(dir1), DirectoryReader.open(dir1));\n      rd2 = new MultiReader(DirectoryReader.open(dir2), DirectoryReader.open(dir2));\n      assertEquals(2, rd1.getSequentialSubReaders().size());\n      assertEquals(2, rd2.getSequentialSubReaders().size());\n    } else {\n      rd1 = DirectoryReader.open(dir1);\n      rd2 = DirectoryReader.open(dir2);\n      assertEquals(3, rd1.getSequentialSubReaders().size());\n      assertEquals(3, rd2.getSequentialSubReaders().size());\n    }\n    ParallelCompositeReader pr = new ParallelCompositeReader(rd1, rd2);\n    return newSearcher(pr);\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"211b1506e56f7860762fbd4698f6d1d1b57f672c","date":1344976996,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#parallel(Random,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#parallel(Random,boolean).mjava","sourceNew":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random, boolean compositeComposite) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    final CompositeReader rd1, rd2;\n    if (compositeComposite) {\n      rd1 = new MultiReader(DirectoryReader.open(dir1), DirectoryReader.open(dir1));\n      rd2 = new MultiReader(DirectoryReader.open(dir2), DirectoryReader.open(dir2));\n      assertEquals(2, rd1.getContext().children().size());\n      assertEquals(2, rd2.getContext().children().size());\n    } else {\n      rd1 = DirectoryReader.open(dir1);\n      rd2 = DirectoryReader.open(dir2);\n      assertEquals(3, rd1.getContext().children().size());\n      assertEquals(3, rd2.getContext().children().size());\n    }\n    ParallelCompositeReader pr = new ParallelCompositeReader(rd1, rd2);\n    return newSearcher(pr);\n  }\n\n","sourceOld":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random, boolean compositeComposite) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    final CompositeReader rd1, rd2;\n    if (compositeComposite) {\n      rd1 = new MultiReader(DirectoryReader.open(dir1), DirectoryReader.open(dir1));\n      rd2 = new MultiReader(DirectoryReader.open(dir2), DirectoryReader.open(dir2));\n      assertEquals(2, rd1.getTopReaderContext().children().size());\n      assertEquals(2, rd2.getTopReaderContext().children().size());\n    } else {\n      rd1 = DirectoryReader.open(dir1);\n      rd2 = DirectoryReader.open(dir2);\n      assertEquals(3, rd1.getTopReaderContext().children().size());\n      assertEquals(3, rd2.getTopReaderContext().children().size());\n    }\n    ParallelCompositeReader pr = new ParallelCompositeReader(rd1, rd2);\n    return newSearcher(pr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#parallel(Random,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#parallel(Random,boolean).mjava","sourceNew":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random, boolean compositeComposite) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    final CompositeReader rd1, rd2;\n    if (compositeComposite) {\n      rd1 = new MultiReader(DirectoryReader.open(dir1), DirectoryReader.open(dir1));\n      rd2 = new MultiReader(DirectoryReader.open(dir2), DirectoryReader.open(dir2));\n      assertEquals(2, rd1.getContext().children().size());\n      assertEquals(2, rd2.getContext().children().size());\n    } else {\n      rd1 = DirectoryReader.open(dir1);\n      rd2 = DirectoryReader.open(dir2);\n      assertEquals(3, rd1.getContext().children().size());\n      assertEquals(3, rd2.getContext().children().size());\n    }\n    ParallelCompositeReader pr = new ParallelCompositeReader(rd1, rd2);\n    return newSearcher(pr);\n  }\n\n","sourceOld":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random, boolean compositeComposite) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    final CompositeReader rd1, rd2;\n    if (compositeComposite) {\n      rd1 = new MultiReader(DirectoryReader.open(dir1), DirectoryReader.open(dir1));\n      rd2 = new MultiReader(DirectoryReader.open(dir2), DirectoryReader.open(dir2));\n      assertEquals(2, rd1.getSequentialSubReaders().size());\n      assertEquals(2, rd2.getSequentialSubReaders().size());\n    } else {\n      rd1 = DirectoryReader.open(dir1);\n      rd2 = DirectoryReader.open(dir2);\n      assertEquals(3, rd1.getSequentialSubReaders().size());\n      assertEquals(3, rd2.getSequentialSubReaders().size());\n    }\n    ParallelCompositeReader pr = new ParallelCompositeReader(rd1, rd2);\n    return newSearcher(pr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#parallel(Random,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#parallel(Random,boolean).mjava","sourceNew":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random, boolean compositeComposite) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    final CompositeReader rd1, rd2;\n    if (compositeComposite) {\n      rd1 = new MultiReader(DirectoryReader.open(dir1), DirectoryReader.open(dir1));\n      rd2 = new MultiReader(DirectoryReader.open(dir2), DirectoryReader.open(dir2));\n      assertEquals(2, rd1.getContext().children().size());\n      assertEquals(2, rd2.getContext().children().size());\n    } else {\n      rd1 = DirectoryReader.open(dir1);\n      rd2 = DirectoryReader.open(dir2);\n      assertEquals(3, rd1.getContext().children().size());\n      assertEquals(3, rd2.getContext().children().size());\n    }\n    ParallelCompositeReader pr = new ParallelCompositeReader(rd1, rd2);\n    return newSearcher(pr);\n  }\n\n","sourceOld":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random, boolean compositeComposite) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    final CompositeReader rd1, rd2;\n    if (compositeComposite) {\n      rd1 = new MultiReader(DirectoryReader.open(dir1), DirectoryReader.open(dir1));\n      rd2 = new MultiReader(DirectoryReader.open(dir2), DirectoryReader.open(dir2));\n      assertEquals(2, rd1.getSequentialSubReaders().size());\n      assertEquals(2, rd2.getSequentialSubReaders().size());\n    } else {\n      rd1 = DirectoryReader.open(dir1);\n      rd2 = DirectoryReader.open(dir2);\n      assertEquals(3, rd1.getSequentialSubReaders().size());\n      assertEquals(3, rd2.getSequentialSubReaders().size());\n    }\n    ParallelCompositeReader pr = new ParallelCompositeReader(rd1, rd2);\n    return newSearcher(pr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#parallel(Random,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#parallel(Random,boolean).mjava","sourceNew":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random, boolean compositeComposite) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    final CompositeReader rd1, rd2;\n    if (compositeComposite) {\n      rd1 = new MultiReader(DirectoryReader.open(dir1), DirectoryReader.open(dir1));\n      rd2 = new MultiReader(DirectoryReader.open(dir2), DirectoryReader.open(dir2));\n      assertEquals(2, rd1.getSequentialSubReaders().size());\n      assertEquals(2, rd2.getSequentialSubReaders().size());\n    } else {\n      rd1 = DirectoryReader.open(dir1);\n      rd2 = DirectoryReader.open(dir2);\n      assertEquals(3, rd1.getSequentialSubReaders().size());\n      assertEquals(3, rd2.getSequentialSubReaders().size());\n    }\n    ParallelCompositeReader pr = new ParallelCompositeReader(rd1, rd2);\n    return newSearcher(pr);\n  }\n\n","sourceOld":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random, boolean compositeComposite) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    final CompositeReader rd1, rd2;\n    if (compositeComposite) {\n      rd1 = new MultiReader(DirectoryReader.open(dir1), DirectoryReader.open(dir1));\n      rd2 = new MultiReader(DirectoryReader.open(dir2), DirectoryReader.open(dir2));\n      assertEquals(2, rd1.getContext().children().size());\n      assertEquals(2, rd2.getContext().children().size());\n    } else {\n      rd1 = DirectoryReader.open(dir1);\n      rd2 = DirectoryReader.open(dir2);\n      assertEquals(3, rd1.getContext().children().size());\n      assertEquals(3, rd2.getContext().children().size());\n    }\n    ParallelCompositeReader pr = new ParallelCompositeReader(rd1, rd2);\n    return newSearcher(pr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#parallel(Random,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#parallel(Random,boolean).mjava","sourceNew":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random, boolean compositeComposite) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    final CompositeReader rd1, rd2;\n    if (compositeComposite) {\n      rd1 = new MultiReader(DirectoryReader.open(dir1), DirectoryReader.open(dir1));\n      rd2 = new MultiReader(DirectoryReader.open(dir2), DirectoryReader.open(dir2));\n      assertEquals(2, rd1.getContext().children().size());\n      assertEquals(2, rd2.getContext().children().size());\n    } else {\n      rd1 = DirectoryReader.open(dir1);\n      rd2 = DirectoryReader.open(dir2);\n      assertEquals(3, rd1.getContext().children().size());\n      assertEquals(3, rd2.getContext().children().size());\n    }\n    ParallelCompositeReader pr = new ParallelCompositeReader(rd1, rd2);\n    return newSearcher(pr);\n  }\n\n","sourceOld":"  // Fields 1 & 2 in one index, 3 & 4 in other, with ParallelReader:\n  private IndexSearcher parallel(Random random, boolean compositeComposite) throws IOException {\n    dir1 = getDir1(random);\n    dir2 = getDir2(random);\n    final CompositeReader rd1, rd2;\n    if (compositeComposite) {\n      rd1 = new MultiReader(DirectoryReader.open(dir1), DirectoryReader.open(dir1));\n      rd2 = new MultiReader(DirectoryReader.open(dir2), DirectoryReader.open(dir2));\n      assertEquals(2, rd1.getSequentialSubReaders().size());\n      assertEquals(2, rd2.getSequentialSubReaders().size());\n    } else {\n      rd1 = DirectoryReader.open(dir1);\n      rd2 = DirectoryReader.open(dir2);\n      assertEquals(3, rd1.getSequentialSubReaders().size());\n      assertEquals(3, rd2.getSequentialSubReaders().size());\n    }\n    ParallelCompositeReader pr = new ParallelCompositeReader(rd1, rd2);\n    return newSearcher(pr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c188105a9aae04f56c24996f98f8333fc825d2e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["8be807b98a5aab36b690a9bd4ef0e4b5d33b8689"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"8be807b98a5aab36b690a9bd4ef0e4b5d33b8689":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["211b1506e56f7860762fbd4698f6d1d1b57f672c"]},"commit2Childs":{"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["3c188105a9aae04f56c24996f98f8333fc825d2e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be807b98a5aab36b690a9bd4ef0e4b5d33b8689"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"8be807b98a5aab36b690a9bd4ef0e4b5d33b8689":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["211b1506e56f7860762fbd4698f6d1d1b57f672c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}