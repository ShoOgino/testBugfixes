{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest#testDeleteDoesNotDeleteSharedAutocreatedConfigSet().mjava","commits":[{"id":"121de2b1a2f90238d017b11597526f7441dd0792","date":1598038996,"type":0,"author":"Anderson Dorow","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest#testDeleteDoesNotDeleteSharedAutocreatedConfigSet().mjava","pathOld":"/dev/null","sourceNew":"    @Test\n    @ShardsFixed(num = 1)\n    public void testDeleteDoesNotDeleteSharedAutocreatedConfigSet() throws Exception {\n        String collectionNameInitial = \"SimpleCollectionCreateDeleteTest.initialCollection\";\n        CollectionAdminRequest.Create createInitial = CollectionAdminRequest.createCollection(collectionNameInitial, 1, 1);\n\n        NamedList<Object> requestInitial = createInitial.process(cloudClient).getResponse();\n\n        if (requestInitial.get(\"success\") != null) {\n            // collection exists now\n            assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionNameInitial, false));\n\n            String configName = cloudClient.getZkStateReader().readConfigName(collectionNameInitial);\n\n            // config for this collection is '.AUTOCREATED', and exists globally\n            assertTrue(configName.endsWith(\".AUTOCREATED\"));\n            assertTrue(cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n\n            // create a second collection, sharing the same configSet\n            String collectionNameWithSharedConfig = \"SimpleCollectionCreateDeleteTest.collectionSharingAutocreatedConfigSet\";\n            CollectionAdminRequest.Create createWithSharedConfig = CollectionAdminRequest.createCollection(collectionNameWithSharedConfig, configName, 1, 1);\n\n            NamedList<Object> requestWithSharedConfig = createWithSharedConfig.process(cloudClient).getResponse();\n            assertTrue(\"The collection with shared config set should have been created\", requestWithSharedConfig.get(\"success\") != null);\n            assertTrue(\"The new collection should exist after a successful creation\", cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionNameWithSharedConfig, false));\n\n            String configNameOfSecondCollection = cloudClient.getZkStateReader().readConfigName(collectionNameWithSharedConfig);\n\n            assertEquals(\"Both collections should be using the same config\", configName, configNameOfSecondCollection);\n\n            // delete the initial collection - the config set should stay, since it is shared with the other collection\n            CollectionAdminRequest.Delete deleteInitialCollection = CollectionAdminRequest.deleteCollection(collectionNameInitial);\n            cloudClient.request(deleteInitialCollection);\n\n            // initial collection has been deleted\n            assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionNameInitial, false));\n            // ... but not its autocreated config set, since it is shared with another collection\n            assertTrue(\"The auto-created config set should NOT have been deleted. Another collection is using it.\", cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n\n            // delete the second collection - the config set should now be deleted, since it is no longer shared any other collection\n            CollectionAdminRequest.Delete deleteSecondCollection = CollectionAdminRequest.deleteCollection(collectionNameWithSharedConfig);\n            cloudClient.request(deleteSecondCollection);\n\n            // the collection has been deleted\n            assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionNameWithSharedConfig, false));\n            // ... and the config set is now also deleted - once it doesn't get referenced by any collection\n            assertFalse(\"The auto-created config set should have been deleted now. No collection is referencing it.\", cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"121de2b1a2f90238d017b11597526f7441dd0792":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["121de2b1a2f90238d017b11597526f7441dd0792"]},"commit2Childs":{"121de2b1a2f90238d017b11597526f7441dd0792":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["121de2b1a2f90238d017b11597526f7441dd0792"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}