{"path":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#getBooleanArg(NamedList,String).mjava","commits":[{"id":"b0a19f093878b8ef6d65992a55f7a565549f30ee","date":1370735567,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#getBooleanArg(NamedList,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Removes the first instance of the key from NamedList, returning the Boolean\n   * that key referred to, or null if the key is not specified.\n   * @exception SolrException invalid type or structure\n   */\n  public static Boolean getBooleanArg(final NamedList args, final String key) {\n    Boolean bool;\n    List values = args.getAll(key);\n    if (0 == values.size()) {\n      return null;\n    }\n    if (values.size() > 1) {\n      throw new SolrException(SERVER_ERROR, \"Only one '\" + key + \"' is allowed\");\n    }\n    Object o = args.remove(key);\n    if (o instanceof Boolean) {\n      bool = (Boolean)o;\n    } else if (o instanceof CharSequence) {\n      bool = Boolean.parseBoolean(o.toString());\n    } else {\n      throw new SolrException(SERVER_ERROR, \"'\" + key + \"' must have type 'bool' or 'str'; found \" + o.getClass());\n    }\n    return bool;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd","date":1380757525,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#getBooleanArg(NamedList,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#getBooleanArg(NamedList,String).mjava","sourceNew":"  /**\n   * Removes the first instance of the key from NamedList, returning the Boolean\n   * that key referred to, or null if the key is not specified.\n   * @exception SolrException invalid type or structure\n   */\n  public static Boolean getBooleanArg(final NamedList args, final String key) {\n    Boolean bool;\n    List values = args.getAll(key);\n    if (0 == values.size()) {\n      return null;\n    }\n    if (values.size() > 1) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Only one '\" + key + \"' is allowed\");\n    }\n    Object o = args.remove(key);\n    if (o instanceof Boolean) {\n      bool = (Boolean)o;\n    } else if (o instanceof CharSequence) {\n      bool = Boolean.parseBoolean(o.toString());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"'\" + key + \"' must have type 'bool' or 'str'; found \" + o.getClass());\n    }\n    return bool;\n  }\n\n","sourceOld":"  /**\n   * Removes the first instance of the key from NamedList, returning the Boolean\n   * that key referred to, or null if the key is not specified.\n   * @exception SolrException invalid type or structure\n   */\n  public static Boolean getBooleanArg(final NamedList args, final String key) {\n    Boolean bool;\n    List values = args.getAll(key);\n    if (0 == values.size()) {\n      return null;\n    }\n    if (values.size() > 1) {\n      throw new SolrException(SERVER_ERROR, \"Only one '\" + key + \"' is allowed\");\n    }\n    Object o = args.remove(key);\n    if (o instanceof Boolean) {\n      bool = (Boolean)o;\n    } else if (o instanceof CharSequence) {\n      bool = Boolean.parseBoolean(o.toString());\n    } else {\n      throw new SolrException(SERVER_ERROR, \"'\" + key + \"' must have type 'bool' or 'str'; found \" + o.getClass());\n    }\n    return bool;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daeabea0f98580c53abe9b70ec5b71caa9dd32","date":1380827550,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#getBooleanArg(NamedList,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#getBooleanArg(NamedList,String).mjava","sourceNew":"  /**\n   * Removes the first instance of the key from NamedList, returning the Boolean\n   * that key referred to, or null if the key is not specified.\n   * @exception SolrException invalid type or structure\n   * @deprecated Use {@link NamedList#removeBooleanArg} instead.  Will be\n   * removed in 5.0.\n   */\n  @Deprecated\n  public static Boolean getBooleanArg(final NamedList args, final String key) {\n    Boolean bool;\n    List values = args.getAll(key);\n    if (0 == values.size()) {\n      return null;\n    }\n    if (values.size() > 1) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Only one '\" + key + \"' is allowed\");\n    }\n    Object o = args.remove(key);\n    if (o instanceof Boolean) {\n      bool = (Boolean)o;\n    } else if (o instanceof CharSequence) {\n      bool = Boolean.parseBoolean(o.toString());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"'\" + key + \"' must have type 'bool' or 'str'; found \" + o.getClass());\n    }\n    return bool;\n  }\n\n","sourceOld":"  /**\n   * Removes the first instance of the key from NamedList, returning the Boolean\n   * that key referred to, or null if the key is not specified.\n   * @exception SolrException invalid type or structure\n   */\n  public static Boolean getBooleanArg(final NamedList args, final String key) {\n    Boolean bool;\n    List values = args.getAll(key);\n    if (0 == values.size()) {\n      return null;\n    }\n    if (values.size() > 1) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Only one '\" + key + \"' is allowed\");\n    }\n    Object o = args.remove(key);\n    if (o instanceof Boolean) {\n      bool = (Boolean)o;\n    } else if (o instanceof CharSequence) {\n      bool = Boolean.parseBoolean(o.toString());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"'\" + key + \"' must have type 'bool' or 'str'; found \" + o.getClass());\n    }\n    return bool;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a95d5fa4d7c6732abf0006ea0f73762488aa4e16","date":1380837282,"type":4,"author":"Shawn Heisey","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#getBooleanArg(NamedList,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Removes the first instance of the key from NamedList, returning the Boolean\n   * that key referred to, or null if the key is not specified.\n   * @exception SolrException invalid type or structure\n   * @deprecated Use {@link NamedList#removeBooleanArg} instead.  Will be\n   * removed in 5.0.\n   */\n  @Deprecated\n  public static Boolean getBooleanArg(final NamedList args, final String key) {\n    Boolean bool;\n    List values = args.getAll(key);\n    if (0 == values.size()) {\n      return null;\n    }\n    if (values.size() > 1) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Only one '\" + key + \"' is allowed\");\n    }\n    Object o = args.remove(key);\n    if (o instanceof Boolean) {\n      bool = (Boolean)o;\n    } else if (o instanceof CharSequence) {\n      bool = Boolean.parseBoolean(o.toString());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"'\" + key + \"' must have type 'bool' or 'str'; found \" + o.getClass());\n    }\n    return bool;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d8daeabea0f98580c53abe9b70ec5b71caa9dd32":["3ae0c36347d7586e501169851eb8fe2ad2b8f0dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b0a19f093878b8ef6d65992a55f7a565549f30ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a95d5fa4d7c6732abf0006ea0f73762488aa4e16":["d8daeabea0f98580c53abe9b70ec5b71caa9dd32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a95d5fa4d7c6732abf0006ea0f73762488aa4e16"],"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd":["b0a19f093878b8ef6d65992a55f7a565549f30ee"]},"commit2Childs":{"d8daeabea0f98580c53abe9b70ec5b71caa9dd32":["a95d5fa4d7c6732abf0006ea0f73762488aa4e16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b0a19f093878b8ef6d65992a55f7a565549f30ee"],"b0a19f093878b8ef6d65992a55f7a565549f30ee":["3ae0c36347d7586e501169851eb8fe2ad2b8f0dd"],"a95d5fa4d7c6732abf0006ea0f73762488aa4e16":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd":["d8daeabea0f98580c53abe9b70ec5b71caa9dd32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}