{"path":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorTest#classificationMonoClass_predictedClassFieldSet_shouldAssignClassInPredictedClassField().mjava","commits":[{"id":"9f1ec46dc24c2330c5e9dd0edefaede91c962926","date":1480027437,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorTest#classificationMonoClass_predictedClassFieldSet_shouldAssignClassInPredictedClassField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void classificationMonoClass_predictedClassFieldSet_shouldAssignClassInPredictedClassField() throws Exception {\n    UpdateRequestProcessor mockProcessor=mock(UpdateRequestProcessor.class);\n    prepareTrainedIndexMonoClass();\n\n    AddUpdateCommand update=new AddUpdateCommand(req());\n    SolrInputDocument unseenDocument1 = sdoc(ID, \"10\",\n        TITLE, \"word4 word4 word4\",\n        CONTENT, \"word2 word2 \",\n        AUTHOR, \"unseenAuthor\");\n    update.solrDoc=unseenDocument1;\n\n    ClassificationUpdateProcessorParams params = initParams(ClassificationUpdateProcessorFactory.Algorithm.KNN);\n    params.setPredictedClassField(PREDICTED_CLASS);\n\n    updateProcessorToTest=new ClassificationUpdateProcessor(params,mockProcessor,reader,req().getSchema());\n    updateProcessorToTest.processAdd(update);\n\n    assertThat(unseenDocument1.getFieldValue(PREDICTED_CLASS),is(\"class1\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75babd1dfc2521603bfeb0968042e921d8c6c652","date":1480042089,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorTest#classificationMonoClass_predictedClassFieldSet_shouldAssignClassInPredictedClassField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void classificationMonoClass_predictedClassFieldSet_shouldAssignClassInPredictedClassField() throws Exception {\n    UpdateRequestProcessor mockProcessor=mock(UpdateRequestProcessor.class);\n    prepareTrainedIndexMonoClass();\n\n    AddUpdateCommand update=new AddUpdateCommand(req());\n    SolrInputDocument unseenDocument1 = sdoc(ID, \"10\",\n        TITLE, \"word4 word4 word4\",\n        CONTENT, \"word2 word2 \",\n        AUTHOR, \"unseenAuthor\");\n    update.solrDoc=unseenDocument1;\n\n    ClassificationUpdateProcessorParams params = initParams(ClassificationUpdateProcessorFactory.Algorithm.KNN);\n    params.setPredictedClassField(PREDICTED_CLASS);\n\n    updateProcessorToTest=new ClassificationUpdateProcessor(params,mockProcessor,reader,req().getSchema());\n    updateProcessorToTest.processAdd(update);\n\n    assertThat(unseenDocument1.getFieldValue(PREDICTED_CLASS),is(\"class1\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorTest#classificationMonoClass_predictedClassFieldSet_shouldAssignClassInPredictedClassField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void classificationMonoClass_predictedClassFieldSet_shouldAssignClassInPredictedClassField() throws Exception {\n    UpdateRequestProcessor mockProcessor=mock(UpdateRequestProcessor.class);\n    prepareTrainedIndexMonoClass();\n\n    AddUpdateCommand update=new AddUpdateCommand(req());\n    SolrInputDocument unseenDocument1 = sdoc(ID, \"10\",\n        TITLE, \"word4 word4 word4\",\n        CONTENT, \"word2 word2 \",\n        AUTHOR, \"unseenAuthor\");\n    update.solrDoc=unseenDocument1;\n\n    ClassificationUpdateProcessorParams params = initParams(ClassificationUpdateProcessorFactory.Algorithm.KNN);\n    params.setPredictedClassField(PREDICTED_CLASS);\n\n    updateProcessorToTest=new ClassificationUpdateProcessor(params,mockProcessor,reader,req().getSchema());\n    updateProcessorToTest.processAdd(update);\n\n    assertThat(unseenDocument1.getFieldValue(PREDICTED_CLASS),is(\"class1\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44c90e60aa27302650e34a332e93821918fda004","date":1491983703,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorTest#classificationMonoClass_predictedClassFieldSet_shouldAssignClassInPredictedClassField().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorTest#classificationMonoClass_predictedClassFieldSet_shouldAssignClassInPredictedClassField().mjava","sourceNew":"  @Test\n  public void classificationMonoClass_predictedClassFieldSet_shouldAssignClassInPredictedClassField() throws Exception {\n    UpdateRequestProcessor mockProcessor=mock(UpdateRequestProcessor.class);\n    prepareTrainedIndexMonoClass();\n\n    AddUpdateCommand update=new AddUpdateCommand(req());\n    SolrInputDocument unseenDocument1 = sdoc(ID, \"10\",\n        TITLE, \"word4 word4 word4\",\n        CONTENT, \"word2 word2 \",\n        AUTHOR, \"unseenAuthor\");\n    update.solrDoc=unseenDocument1;\n\n    ClassificationUpdateProcessorParams params = initParams(ClassificationUpdateProcessorFactory.Algorithm.KNN);\n    params.setPredictedClassField(PREDICTED_CLASS);\n\n    updateProcessorToTest=new ClassificationUpdateProcessor(params,mockProcessor,reader,req().getSchema());\n    updateProcessorToTest.processAdd(update);\n\n    assertThat(unseenDocument1.getFieldValue(PREDICTED_CLASS),is(\"class2\"));\n  }\n\n","sourceOld":"  @Test\n  public void classificationMonoClass_predictedClassFieldSet_shouldAssignClassInPredictedClassField() throws Exception {\n    UpdateRequestProcessor mockProcessor=mock(UpdateRequestProcessor.class);\n    prepareTrainedIndexMonoClass();\n\n    AddUpdateCommand update=new AddUpdateCommand(req());\n    SolrInputDocument unseenDocument1 = sdoc(ID, \"10\",\n        TITLE, \"word4 word4 word4\",\n        CONTENT, \"word2 word2 \",\n        AUTHOR, \"unseenAuthor\");\n    update.solrDoc=unseenDocument1;\n\n    ClassificationUpdateProcessorParams params = initParams(ClassificationUpdateProcessorFactory.Algorithm.KNN);\n    params.setPredictedClassField(PREDICTED_CLASS);\n\n    updateProcessorToTest=new ClassificationUpdateProcessor(params,mockProcessor,reader,req().getSchema());\n    updateProcessorToTest.processAdd(update);\n\n    assertThat(unseenDocument1.getFieldValue(PREDICTED_CLASS),is(\"class1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorTest#classificationMonoClass_predictedClassFieldSet_shouldAssignClassInPredictedClassField().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorTest#classificationMonoClass_predictedClassFieldSet_shouldAssignClassInPredictedClassField().mjava","sourceNew":"  @Test\n  public void classificationMonoClass_predictedClassFieldSet_shouldAssignClassInPredictedClassField() throws Exception {\n    UpdateRequestProcessor mockProcessor=mock(UpdateRequestProcessor.class);\n    prepareTrainedIndexMonoClass();\n\n    AddUpdateCommand update=new AddUpdateCommand(req());\n    SolrInputDocument unseenDocument1 = sdoc(ID, \"10\",\n        TITLE, \"word4 word4 word4\",\n        CONTENT, \"word2 word2 \",\n        AUTHOR, \"unseenAuthor\");\n    update.solrDoc=unseenDocument1;\n\n    ClassificationUpdateProcessorParams params = initParams(ClassificationUpdateProcessorFactory.Algorithm.KNN);\n    params.setPredictedClassField(PREDICTED_CLASS);\n\n    updateProcessorToTest=new ClassificationUpdateProcessor(params,mockProcessor,reader,req().getSchema());\n    updateProcessorToTest.processAdd(update);\n\n    assertThat(unseenDocument1.getFieldValue(PREDICTED_CLASS),is(\"class2\"));\n  }\n\n","sourceOld":"  @Test\n  public void classificationMonoClass_predictedClassFieldSet_shouldAssignClassInPredictedClassField() throws Exception {\n    UpdateRequestProcessor mockProcessor=mock(UpdateRequestProcessor.class);\n    prepareTrainedIndexMonoClass();\n\n    AddUpdateCommand update=new AddUpdateCommand(req());\n    SolrInputDocument unseenDocument1 = sdoc(ID, \"10\",\n        TITLE, \"word4 word4 word4\",\n        CONTENT, \"word2 word2 \",\n        AUTHOR, \"unseenAuthor\");\n    update.solrDoc=unseenDocument1;\n\n    ClassificationUpdateProcessorParams params = initParams(ClassificationUpdateProcessorFactory.Algorithm.KNN);\n    params.setPredictedClassField(PREDICTED_CLASS);\n\n    updateProcessorToTest=new ClassificationUpdateProcessor(params,mockProcessor,reader,req().getSchema());\n    updateProcessorToTest.processAdd(update);\n\n    assertThat(unseenDocument1.getFieldValue(PREDICTED_CLASS),is(\"class1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f1ec46dc24c2330c5e9dd0edefaede91c962926":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","75babd1dfc2521603bfeb0968042e921d8c6c652"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9f1ec46dc24c2330c5e9dd0edefaede91c962926"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44c90e60aa27302650e34a332e93821918fda004":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44c90e60aa27302650e34a332e93821918fda004"]},"commit2Childs":{"9f1ec46dc24c2330c5e9dd0edefaede91c962926":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"727bb765ff2542275f6d31f67be18d7104bae148":[],"75babd1dfc2521603bfeb0968042e921d8c6c652":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","727bb765ff2542275f6d31f67be18d7104bae148","44c90e60aa27302650e34a332e93821918fda004"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9f1ec46dc24c2330c5e9dd0edefaede91c962926","727bb765ff2542275f6d31f67be18d7104bae148","75babd1dfc2521603bfeb0968042e921d8c6c652"],"44c90e60aa27302650e34a332e93821918fda004":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}