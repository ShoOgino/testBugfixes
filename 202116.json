{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#init(TupleStream,StreamEqualitor).mjava","commits":[{"id":"c1833f6d07cc5000544dfe89f26c81e2eb8afb4c","date":1446951913,"type":1,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#init(TupleStream,StreamEqualitor).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#init(TupleStream,StreamComparator).mjava","sourceNew":"  private void init(TupleStream stream, StreamEqualitor eq) throws IOException{\n    this.stream = new PushBackStream(stream);\n    this.eq = eq;\n    \n    if(!eq.isDerivedFrom(stream.getStreamSort())){\n      throw new IOException(\"Invalid ReducerStream - substream comparator (sort) must be a superset of this stream's comparator.\");\n    }\n  }\n\n","sourceOld":"  private void init(TupleStream stream, StreamComparator comp) throws IOException{\n    this.stream = new PushBackStream(stream);\n    this.comp = comp;\n    \n    if(!comp.isDerivedFrom(stream.getStreamSort())){\n      throw new IOException(\"Invalid ReducerStream - substream comparator (sort) must be a superset of this stream's comparator.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7","date":1449800905,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#init(TupleStream,StreamEqualitor,ReduceOperation).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#init(TupleStream,StreamEqualitor).mjava","sourceNew":"  private void init(TupleStream stream, StreamEqualitor eq, ReduceOperation op) throws IOException{\n    this.stream = new PushBackStream(stream);\n    this.eq = eq;\n    this.op = op;\n    \n    if(!eq.isDerivedFrom(stream.getStreamSort())){\n      throw new IOException(\"Invalid ReducerStream - substream comparator (sort) must be a superset of this stream's comparator.\");\n    }\n  }\n\n","sourceOld":"  private void init(TupleStream stream, StreamEqualitor eq) throws IOException{\n    this.stream = new PushBackStream(stream);\n    this.eq = eq;\n    \n    if(!eq.isDerivedFrom(stream.getStreamSort())){\n      throw new IOException(\"Invalid ReducerStream - substream comparator (sort) must be a superset of this stream's comparator.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1833f6d07cc5000544dfe89f26c81e2eb8afb4c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["c1833f6d07cc5000544dfe89f26c81e2eb8afb4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"]},"commit2Childs":{"c1833f6d07cc5000544dfe89f26c81e2eb8afb4c":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1833f6d07cc5000544dfe89f26c81e2eb8afb4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}