{"path":"backwards/src/java/org/apache/lucene/store/IndexInput#skipChars(int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/store/IndexInput#skipChars(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert\n   * \n   * Similar to {@link #readChars(char[], int, int)} but does not do any conversion operations on the bytes it is reading in.  It still\n   * has to invoke {@link #readByte()} just as {@link #readChars(char[], int, int)} does, but it does not need a buffer to store anything\n   * and it does not have to do any of the bitwise operations, since we don't actually care what is in the byte except to determine\n   * how many more bytes to read\n   * @param length The number of chars to read\n   * @deprecated this method operates on old \"modified utf8\" encoded\n   *             strings\n   */\n  public void skipChars(int length) throws IOException{\n    for (int i = 0; i < length; i++) {\n      byte b = readByte();\n      if ((b & 0x80) == 0){\n        //do nothing, we only need one byte\n      }\n      else if ((b & 0xE0) != 0xE0) {\n        readByte();//read an additional byte\n      } else{      \n        //read two additional bytes.\n        readByte();\n        readByte();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/store/IndexInput#skipChars(int).mjava","pathOld":"backwards/src/java/org/apache/lucene/store/IndexInput#skipChars(int).mjava","sourceNew":"  /**\n   * Expert\n   * \n   * Similar to {@link #readChars(char[], int, int)} but does not do any conversion operations on the bytes it is reading in.  It still\n   * has to invoke {@link #readByte()} just as {@link #readChars(char[], int, int)} does, but it does not need a buffer to store anything\n   * and it does not have to do any of the bitwise operations, since we don't actually care what is in the byte except to determine\n   * how many more bytes to read\n   * @param length The number of chars to read\n   * @deprecated this method operates on old \"modified utf8\" encoded\n   *             strings\n   */\n  public void skipChars(int length) throws IOException{\n    for (int i = 0; i < length; i++) {\n      byte b = readByte();\n      if ((b & 0x80) == 0){\n        //do nothing, we only need one byte\n      }\n      else if ((b & 0xE0) != 0xE0) {\n        readByte();//read an additional byte\n      } else{      \n        //read two additional bytes.\n        readByte();\n        readByte();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert\n   * \n   * Similar to {@link #readChars(char[], int, int)} but does not do any conversion operations on the bytes it is reading in.  It still\n   * has to invoke {@link #readByte()} just as {@link #readChars(char[], int, int)} does, but it does not need a buffer to store anything\n   * and it does not have to do any of the bitwise operations, since we don't actually care what is in the byte except to determine\n   * how many more bytes to read\n   * @param length The number of chars to read\n   * @deprecated this method operates on old \"modified utf8\" encoded\n   *             strings\n   */\n  public void skipChars(int length) throws IOException{\n    for (int i = 0; i < length; i++) {\n      byte b = readByte();\n      if ((b & 0x80) == 0){\n        //do nothing, we only need one byte\n      }\n      else if ((b & 0xE0) != 0xE0) {\n        readByte();//read an additional byte\n      } else{      \n        //read two additional bytes.\n        readByte();\n        readByte();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}