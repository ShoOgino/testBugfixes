{"path":"src/java/org/apache/solr/search/SolrIndexSearcher#cacheDocSet(Query,DocSet,boolean).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#cacheDocSet(Query,DocSet,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compute and cache the DocSet that matches a query.\n   * The normal usage is expected to be cacheDocSet(myQuery, null,false)\n   * meaning that Solr will determine if the Query warrants caching, and\n   * if so, will compute the DocSet that matches the Query and cache it.\n   * If the answer to the query is already cached, nothing further will be done.\n   * <p>\n   * If the optionalAnswer DocSet is provided, it should *not* be modified\n   * after this call.\n   *\n   * @param query           the lucene query that will act as the key\n   * @param optionalAnswer   the DocSet to be cached - if null, it will be computed.\n   * @param mustCache        if true, a best effort will be made to cache this entry.\n   *                         if false, heuristics may be used to determine if it should be cached.\n   */\n  public void cacheDocSet(Query query, DocSet optionalAnswer, boolean mustCache) throws IOException {\n    // Even if the cache is null, still compute the DocSet as it may serve to warm the Lucene\n    // or OS disk cache.\n    if (optionalAnswer != null) {\n      if (filterCache!=null) {\n        filterCache.put(query,optionalAnswer);\n      }\n      return;\n    }\n\n    // Throw away the result, relying on the fact that getDocSet\n    // will currently always cache what it found.  If getDocSet() starts\n    // using heuristics about what to cache, and mustCache==true, (or if we\n    // want this method to start using heuristics too) then\n    // this needs to change.\n    getDocSet(query);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#cacheDocSet(Query,DocSet,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#cacheDocSet(Query,DocSet,boolean).mjava","sourceNew":"  /**\n   * Compute and cache the DocSet that matches a query.\n   * The normal usage is expected to be cacheDocSet(myQuery, null,false)\n   * meaning that Solr will determine if the Query warrants caching, and\n   * if so, will compute the DocSet that matches the Query and cache it.\n   * If the answer to the query is already cached, nothing further will be done.\n   * <p>\n   * If the optionalAnswer DocSet is provided, it should *not* be modified\n   * after this call.\n   *\n   * @param query           the lucene query that will act as the key\n   * @param optionalAnswer   the DocSet to be cached - if null, it will be computed.\n   * @param mustCache        if true, a best effort will be made to cache this entry.\n   *                         if false, heuristics may be used to determine if it should be cached.\n   */\n  public void cacheDocSet(Query query, DocSet optionalAnswer, boolean mustCache) throws IOException {\n    // Even if the cache is null, still compute the DocSet as it may serve to warm the Lucene\n    // or OS disk cache.\n    if (optionalAnswer != null) {\n      if (filterCache!=null) {\n        filterCache.put(query,optionalAnswer);\n      }\n      return;\n    }\n\n    // Throw away the result, relying on the fact that getDocSet\n    // will currently always cache what it found.  If getDocSet() starts\n    // using heuristics about what to cache, and mustCache==true, (or if we\n    // want this method to start using heuristics too) then\n    // this needs to change.\n    getDocSet(query);\n  }\n\n","sourceOld":"  /**\n   * Compute and cache the DocSet that matches a query.\n   * The normal usage is expected to be cacheDocSet(myQuery, null,false)\n   * meaning that Solr will determine if the Query warrants caching, and\n   * if so, will compute the DocSet that matches the Query and cache it.\n   * If the answer to the query is already cached, nothing further will be done.\n   * <p>\n   * If the optionalAnswer DocSet is provided, it should *not* be modified\n   * after this call.\n   *\n   * @param query           the lucene query that will act as the key\n   * @param optionalAnswer   the DocSet to be cached - if null, it will be computed.\n   * @param mustCache        if true, a best effort will be made to cache this entry.\n   *                         if false, heuristics may be used to determine if it should be cached.\n   */\n  public void cacheDocSet(Query query, DocSet optionalAnswer, boolean mustCache) throws IOException {\n    // Even if the cache is null, still compute the DocSet as it may serve to warm the Lucene\n    // or OS disk cache.\n    if (optionalAnswer != null) {\n      if (filterCache!=null) {\n        filterCache.put(query,optionalAnswer);\n      }\n      return;\n    }\n\n    // Throw away the result, relying on the fact that getDocSet\n    // will currently always cache what it found.  If getDocSet() starts\n    // using heuristics about what to cache, and mustCache==true, (or if we\n    // want this method to start using heuristics too) then\n    // this needs to change.\n    getDocSet(query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}