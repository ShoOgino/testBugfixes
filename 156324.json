{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testQueryReset().mjava","commits":[{"id":"116545389190ea5d0d9a35977d09ef0fe49716ac","date":1272959441,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testQueryReset().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/CommonGramsFilterTest#testQueryReset().mjava","sourceNew":"  public void testQueryReset() throws Exception {\n    final String input = \"How the s a brown s cow d like A B thing?\";\n    WhitespaceTokenizer wt = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    CommonGramsFilter cgf = new CommonGramsFilter(wt, commonWords);\n    CommonGramsQueryFilter nsf = new CommonGramsQueryFilter(cgf);\n    \n    CharTermAttribute term = wt.addAttribute(CharTermAttribute.class);\n    assertTrue(nsf.incrementToken());\n    assertEquals(\"How_the\", term.toString());\n    assertTrue(nsf.incrementToken());\n    assertEquals(\"the_s\", term.toString());\n    \n    wt.reset(new StringReader(input));\n    nsf.reset();\n    assertTrue(nsf.incrementToken());\n    assertEquals(\"How_the\", term.toString());\n  }\n\n","sourceOld":"  public void testQueryReset() throws Exception {\n    final String input = \"How the s a brown s cow d like A B thing?\";\n    WhitespaceTokenizer wt = new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(input));\n    CommonGramsFilter cgf = new CommonGramsFilter(wt, commonWords);\n    CommonGramsQueryFilter nsf = new CommonGramsQueryFilter(cgf);\n    \n    CharTermAttribute term = wt.addAttribute(CharTermAttribute.class);\n    assertTrue(nsf.incrementToken());\n    assertEquals(\"How_the\", term.toString());\n    assertTrue(nsf.incrementToken());\n    assertEquals(\"the_s\", term.toString());\n    \n    wt.reset(new StringReader(input));\n    nsf.reset();\n    assertTrue(nsf.incrementToken());\n    assertEquals(\"How_the\", term.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testQueryReset().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testQueryReset().mjava","sourceNew":"  public void testQueryReset() throws Exception {\n    final String input = \"How the s a brown s cow d like A B thing?\";\n    WhitespaceTokenizer wt = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    CommonGramsFilter cgf = new CommonGramsFilter(wt, commonWords);\n    CommonGramsQueryFilter nsf = new CommonGramsQueryFilter(cgf);\n    \n    CharTermAttribute term = wt.addAttribute(CharTermAttribute.class);\n    assertTrue(nsf.incrementToken());\n    assertEquals(\"How_the\", term.toString());\n    assertTrue(nsf.incrementToken());\n    assertEquals(\"the_s\", term.toString());\n    \n    wt.reset(new StringReader(input));\n    nsf.reset();\n    assertTrue(nsf.incrementToken());\n    assertEquals(\"How_the\", term.toString());\n  }\n\n","sourceOld":"  public void testQueryReset() throws Exception {\n    final String input = \"How the s a brown s cow d like A B thing?\";\n    WhitespaceTokenizer wt = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    CommonGramsFilter cgf = new CommonGramsFilter(wt, commonWords);\n    CommonGramsQueryFilter nsf = new CommonGramsQueryFilter(cgf);\n    \n    CharTermAttribute term = wt.addAttribute(CharTermAttribute.class);\n    assertTrue(nsf.incrementToken());\n    assertEquals(\"How_the\", term.toString());\n    assertTrue(nsf.incrementToken());\n    assertEquals(\"the_s\", term.toString());\n    \n    wt.reset(new StringReader(input));\n    nsf.reset();\n    assertTrue(nsf.incrementToken());\n    assertEquals(\"How_the\", term.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"116545389190ea5d0d9a35977d09ef0fe49716ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["116545389190ea5d0d9a35977d09ef0fe49716ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["116545389190ea5d0d9a35977d09ef0fe49716ac"],"116545389190ea5d0d9a35977d09ef0fe49716ac":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}