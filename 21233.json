{"path":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#beforeClass().mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    defaults.put(\"int_id\", new Integer(0));\n    defaults.put(\"long_ld\", new Long(0));\n    defaults.put(\"float_fd\", new Float(0));\n    defaults.put(\"double_dd\", new Double(0));\n    defaults.put(\"date_dtd\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string_sd\", \"str0\");\n    \n    intTestStart = new ArrayList<Integer>(); \n    longTestStart = new ArrayList<Long>(); \n    floatTestStart = new ArrayList<Float>(); \n    doubleTestStart = new ArrayList<Double>(); \n    dateTestStart = new ArrayList<String>(); \n    stringTestStart = new ArrayList<String>(); \n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<String>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n      \n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n      \n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n      \n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n      \n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n      \n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n      \n      fields.add(\"int_i\"); fields.add(\"\" + i);\n      fields.add(\"long_l\"); fields.add(\"\" + l);\n      fields.add(\"float_f\"); fields.add(\"\" + f);\n      fields.add(\"double_d\"); fields.add(\"\" + d);\n      \n      assertU(adoc(fields.toArray(new String[0])));\n      \n      \n      if (usually()) {\n        assertU(commit());  // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Sort ascending tests\n    response = h.query(request(fileToStringArr(fileName)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2408d2a60b59b9f5d910383ce065127078892c04","date":1385328825,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    defaults.put(\"int_id\", new Integer(0));\n    defaults.put(\"long_ld\", new Long(0));\n    defaults.put(\"float_fd\", new Float(0));\n    defaults.put(\"double_dd\", new Double(0));\n    defaults.put(\"date_dtd\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string_sd\", \"str0\");\n    \n    intTestStart = new ArrayList<Integer>(); \n    longTestStart = new ArrayList<Long>(); \n    floatTestStart = new ArrayList<Float>(); \n    doubleTestStart = new ArrayList<Double>(); \n    dateTestStart = new ArrayList<String>(); \n    stringTestStart = new ArrayList<String>(); \n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<String>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n      \n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n      \n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n      \n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n      \n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n      \n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n      \n      fields.add(\"int_i\"); fields.add(\"\" + i);\n      fields.add(\"long_l\"); fields.add(\"\" + l);\n      fields.add(\"float_f\"); fields.add(\"\" + f);\n      fields.add(\"double_d\"); fields.add(\"\" + d);\n      \n      assertU(adoc(fields.toArray(new String[0])));\n      \n      \n      if (usually()) {\n        assertU(commit());  // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Sort ascending tests\n    setResponse(h.query(request(fileToStringArr(fileName))));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    defaults.put(\"int_id\", new Integer(0));\n    defaults.put(\"long_ld\", new Long(0));\n    defaults.put(\"float_fd\", new Float(0));\n    defaults.put(\"double_dd\", new Double(0));\n    defaults.put(\"date_dtd\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string_sd\", \"str0\");\n    \n    intTestStart = new ArrayList<Integer>(); \n    longTestStart = new ArrayList<Long>(); \n    floatTestStart = new ArrayList<Float>(); \n    doubleTestStart = new ArrayList<Double>(); \n    dateTestStart = new ArrayList<String>(); \n    stringTestStart = new ArrayList<String>(); \n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<String>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n      \n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n      \n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n      \n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n      \n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n      \n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n      \n      fields.add(\"int_i\"); fields.add(\"\" + i);\n      fields.add(\"long_l\"); fields.add(\"\" + l);\n      fields.add(\"float_f\"); fields.add(\"\" + f);\n      fields.add(\"double_d\"); fields.add(\"\" + d);\n      \n      assertU(adoc(fields.toArray(new String[0])));\n      \n      \n      if (usually()) {\n        assertU(commit());  // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Sort ascending tests\n    response = h.query(request(fileToStringArr(fileName)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    defaults.put(\"int_id\", new Integer(0));\n    defaults.put(\"long_ld\", new Long(0));\n    defaults.put(\"float_fd\", new Float(0));\n    defaults.put(\"double_dd\", new Double(0));\n    defaults.put(\"date_dtd\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string_sd\", \"str0\");\n    \n    intTestStart = new ArrayList<Integer>(); \n    longTestStart = new ArrayList<Long>(); \n    floatTestStart = new ArrayList<Float>(); \n    doubleTestStart = new ArrayList<Double>(); \n    dateTestStart = new ArrayList<String>(); \n    stringTestStart = new ArrayList<String>(); \n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<String>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n      \n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n      \n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n      \n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n      \n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n      \n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n      \n      fields.add(\"int_i\"); fields.add(\"\" + i);\n      fields.add(\"long_l\"); fields.add(\"\" + l);\n      fields.add(\"float_f\"); fields.add(\"\" + f);\n      fields.add(\"double_d\"); fields.add(\"\" + d);\n      \n      assertU(adoc(fields.toArray(new String[0])));\n      \n      \n      if (usually()) {\n        assertU(commit());  // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Sort ascending tests\n    setResponse(h.query(request(fileToStringArr(fileName))));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a475a1c165e02515bff766b3b7be0c42edf1870c","date":1393099333,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    defaults.put(\"int_id\", new Integer(0));\n    defaults.put(\"long_ld\", new Long(0));\n    defaults.put(\"float_fd\", new Float(0));\n    defaults.put(\"double_dd\", new Double(0));\n    defaults.put(\"date_dtd\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string_sd\", \"str0\");\n    \n    intTestStart = new ArrayList<Integer>(); \n    longTestStart = new ArrayList<Long>(); \n    floatTestStart = new ArrayList<Float>(); \n    doubleTestStart = new ArrayList<Double>(); \n    dateTestStart = new ArrayList<String>(); \n    stringTestStart = new ArrayList<String>(); \n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<String>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n      \n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n      \n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n      \n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n      \n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n      \n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n      \n      fields.add(\"int_i\"); fields.add(\"\" + i);\n      fields.add(\"long_l\"); fields.add(\"\" + l);\n      fields.add(\"float_f\"); fields.add(\"\" + f);\n      fields.add(\"double_d\"); fields.add(\"\" + d);\n      \n      assertU(adoc(fields.toArray(new String[0])));\n      \n      \n      if (usually()) {\n        assertU(commit());  // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Sort ascending tests\n    setResponse(h.query(request(fileToStringArr(NoFacetTest.class, fileName))));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    defaults.put(\"int_id\", new Integer(0));\n    defaults.put(\"long_ld\", new Long(0));\n    defaults.put(\"float_fd\", new Float(0));\n    defaults.put(\"double_dd\", new Double(0));\n    defaults.put(\"date_dtd\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string_sd\", \"str0\");\n    \n    intTestStart = new ArrayList<Integer>(); \n    longTestStart = new ArrayList<Long>(); \n    floatTestStart = new ArrayList<Float>(); \n    doubleTestStart = new ArrayList<Double>(); \n    dateTestStart = new ArrayList<String>(); \n    stringTestStart = new ArrayList<String>(); \n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<String>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n      \n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n      \n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n      \n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n      \n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n      \n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n      \n      fields.add(\"int_i\"); fields.add(\"\" + i);\n      fields.add(\"long_l\"); fields.add(\"\" + l);\n      fields.add(\"float_f\"); fields.add(\"\" + f);\n      fields.add(\"double_d\"); fields.add(\"\" + d);\n      \n      assertU(adoc(fields.toArray(new String[0])));\n      \n      \n      if (usually()) {\n        assertU(commit());  // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Sort ascending tests\n    setResponse(h.query(request(fileToStringArr(fileName))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    defaults.put(\"int_id\", new Integer(0));\n    defaults.put(\"long_ld\", new Long(0));\n    defaults.put(\"float_fd\", new Float(0));\n    defaults.put(\"double_dd\", new Double(0));\n    defaults.put(\"date_dtd\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string_sd\", \"str0\");\n    \n    intTestStart = new ArrayList<>();\n    longTestStart = new ArrayList<>();\n    floatTestStart = new ArrayList<>();\n    doubleTestStart = new ArrayList<>();\n    dateTestStart = new ArrayList<>();\n    stringTestStart = new ArrayList<>();\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n      \n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n      \n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n      \n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n      \n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n      \n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n      \n      fields.add(\"int_i\"); fields.add(\"\" + i);\n      fields.add(\"long_l\"); fields.add(\"\" + l);\n      fields.add(\"float_f\"); fields.add(\"\" + f);\n      fields.add(\"double_d\"); fields.add(\"\" + d);\n      \n      assertU(adoc(fields.toArray(new String[0])));\n      \n      \n      if (usually()) {\n        assertU(commit());  // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Sort ascending tests\n    setResponse(h.query(request(fileToStringArr(NoFacetTest.class, fileName))));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    defaults.put(\"int_id\", new Integer(0));\n    defaults.put(\"long_ld\", new Long(0));\n    defaults.put(\"float_fd\", new Float(0));\n    defaults.put(\"double_dd\", new Double(0));\n    defaults.put(\"date_dtd\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string_sd\", \"str0\");\n    \n    intTestStart = new ArrayList<Integer>(); \n    longTestStart = new ArrayList<Long>(); \n    floatTestStart = new ArrayList<Float>(); \n    doubleTestStart = new ArrayList<Double>(); \n    dateTestStart = new ArrayList<String>(); \n    stringTestStart = new ArrayList<String>(); \n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<String>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n      \n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n      \n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n      \n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n      \n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n      \n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n      \n      fields.add(\"int_i\"); fields.add(\"\" + i);\n      fields.add(\"long_l\"); fields.add(\"\" + l);\n      fields.add(\"float_f\"); fields.add(\"\" + f);\n      fields.add(\"double_d\"); fields.add(\"\" + d);\n      \n      assertU(adoc(fields.toArray(new String[0])));\n      \n      \n      if (usually()) {\n        assertU(commit());  // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Sort ascending tests\n    setResponse(h.query(request(fileToStringArr(NoFacetTest.class, fileName))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    defaults.put(\"int_id\", new Integer(0));\n    defaults.put(\"long_ld\", new Long(0));\n    defaults.put(\"float_fd\", new Float(0));\n    defaults.put(\"double_dd\", new Double(0));\n    defaults.put(\"date_dtd\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string_sd\", \"str0\");\n    \n    intTestStart = new ArrayList<>();\n    longTestStart = new ArrayList<>();\n    floatTestStart = new ArrayList<>();\n    doubleTestStart = new ArrayList<>();\n    dateTestStart = new ArrayList<>();\n    stringTestStart = new ArrayList<>();\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n      \n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n      \n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n      \n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n      \n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n      \n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n      \n      fields.add(\"int_i\"); fields.add(\"\" + i);\n      fields.add(\"long_l\"); fields.add(\"\" + l);\n      fields.add(\"float_f\"); fields.add(\"\" + f);\n      fields.add(\"double_d\"); fields.add(\"\" + d);\n      \n      assertU(adoc(fields.toArray(new String[0])));\n      \n      \n      if (usually()) {\n        assertU(commit());  // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Sort ascending tests\n    setResponse(h.query(request(fileToStringArr(NoFacetTest.class, fileName))));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    defaults.put(\"int_id\", new Integer(0));\n    defaults.put(\"long_ld\", new Long(0));\n    defaults.put(\"float_fd\", new Float(0));\n    defaults.put(\"double_dd\", new Double(0));\n    defaults.put(\"date_dtd\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string_sd\", \"str0\");\n    \n    intTestStart = new ArrayList<>();\n    longTestStart = new ArrayList<>();\n    floatTestStart = new ArrayList<>();\n    doubleTestStart = new ArrayList<>();\n    dateTestStart = new ArrayList<>();\n    stringTestStart = new ArrayList<>();\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n      \n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n      \n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n      \n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n      \n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n      \n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n      \n      fields.add(\"int_i\"); fields.add(\"\" + i);\n      fields.add(\"long_l\"); fields.add(\"\" + l);\n      fields.add(\"float_f\"); fields.add(\"\" + f);\n      fields.add(\"double_d\"); fields.add(\"\" + d);\n      \n      assertU(adoc(fields.toArray(new String[0])));\n      \n      \n      if (usually()) {\n        assertU(commit());  // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Sort ascending tests\n    setResponse(h.query(request(fileToStringArr(NoFacetTest.class, fileName))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a475a1c165e02515bff766b3b7be0c42edf1870c"],"a475a1c165e02515bff766b3b7be0c42edf1870c":["2408d2a60b59b9f5d910383ce065127078892c04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2408d2a60b59b9f5d910383ce065127078892c04"],"2408d2a60b59b9f5d910383ce065127078892c04":["ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"a475a1c165e02515bff766b3b7be0c42edf1870c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"2408d2a60b59b9f5d910383ce065127078892c04":["a475a1c165e02515bff766b3b7be0c42edf1870c","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"ff403346522eaa9de75403763e297e83a3ea585c":["2408d2a60b59b9f5d910383ce065127078892c04"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}