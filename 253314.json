{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","sourceNew":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT, new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(), builder.toString().toLowerCase()});\n  }\n\n","sourceOld":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT, new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(), builder.toString().toLowerCase()});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68f4ad0129ad3f60268f3df42c238366082da936","date":1341666620,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","sourceNew":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT, new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(Locale.ROOT), builder.toString().toLowerCase(Locale.ROOT)});\n  }\n\n","sourceOld":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT, new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(), builder.toString().toLowerCase()});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","sourceNew":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT, new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(Locale.ROOT), builder.toString().toLowerCase(Locale.ROOT)});\n  }\n\n","sourceOld":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT, new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(), builder.toString().toLowerCase()});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","sourceNew":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT, new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(Locale.ROOT), builder.toString().toLowerCase(Locale.ROOT)});\n  }\n\n","sourceOld":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT, new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(), builder.toString().toLowerCase()});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","sourceNew":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT, new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(Locale.ROOT), builder.toString().toLowerCase(Locale.ROOT)});\n  }\n\n","sourceOld":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT, new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(), builder.toString().toLowerCase()});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","sourceNew":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT);\n    tokenizer.setReader(new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(Locale.ROOT), builder.toString().toLowerCase(Locale.ROOT)});\n  }\n\n","sourceOld":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT, new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(Locale.ROOT), builder.toString().toLowerCase(Locale.ROOT)});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75","date":1399205975,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","sourceNew":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT, newAttributeFactory());\n    tokenizer.setReader(new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(Locale.ROOT), builder.toString().toLowerCase(Locale.ROOT)});\n  }\n\n","sourceOld":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT);\n    tokenizer.setReader(new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(Locale.ROOT), builder.toString().toLowerCase(Locale.ROOT)});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","sourceNew":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(newAttributeFactory());\n    tokenizer.setReader(new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(Locale.ROOT), builder.toString().toLowerCase(Locale.ROOT)});\n  }\n\n","sourceOld":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT, newAttributeFactory());\n    tokenizer.setReader(new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(Locale.ROOT), builder.toString().toLowerCase(Locale.ROOT)});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","sourceNew":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT, newAttributeFactory());\n    tokenizer.setReader(new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(Locale.ROOT), builder.toString().toLowerCase(Locale.ROOT)});\n  }\n\n","sourceOld":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(newAttributeFactory());\n    tokenizer.setReader(new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(Locale.ROOT), builder.toString().toLowerCase(Locale.ROOT)});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","sourceNew":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(newAttributeFactory());\n    tokenizer.setReader(new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(Locale.ROOT), builder.toString().toLowerCase(Locale.ROOT)});\n  }\n\n","sourceOld":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT, newAttributeFactory());\n    tokenizer.setReader(new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(Locale.ROOT), builder.toString().toLowerCase(Locale.ROOT)});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3780f02dd8e07e1feb00e1a4f522c4dedb85d9c0","date":1537441025,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testMaxWordLength().mjava","sourceNew":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LetterTokenizer(newAttributeFactory());\n    tokenizer.setReader(new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(new LowerCaseFilter(tokenizer), new String[] {builder.toString().toLowerCase(Locale.ROOT), builder.toString().toLowerCase(Locale.ROOT)});\n  }\n\n","sourceOld":"  /*\n   * tests the max word length of 255 - tokenizer will split at the 255 char no matter what happens\n   */\n  public void testMaxWordLength() throws IOException {\n    StringBuilder builder = new StringBuilder();\n\n    for (int i = 0; i < 255; i++) {\n      builder.append(\"A\");\n    }\n    Tokenizer tokenizer = new LowerCaseTokenizer(newAttributeFactory());\n    tokenizer.setReader(new StringReader(builder.toString() + builder.toString()));\n    assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase(Locale.ROOT), builder.toString().toLowerCase(Locale.ROOT)});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["2acf500f78aa12b92e371fd89c719291986b6b90"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"68f4ad0129ad3f60268f3df42c238366082da936":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","68f4ad0129ad3f60268f3df42c238366082da936"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"3780f02dd8e07e1feb00e1a4f522c4dedb85d9c0":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3780f02dd8e07e1feb00e1a4f522c4dedb85d9c0"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"68f4ad0129ad3f60268f3df42c238366082da936":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"3780f02dd8e07e1feb00e1a4f522c4dedb85d9c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["68f4ad0129ad3f60268f3df42c238366082da936","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"379db3ad24c4f0214f30a122265a6d6be003a99d":["3780f02dd8e07e1feb00e1a4f522c4dedb85d9c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}