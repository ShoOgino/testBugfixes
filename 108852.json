{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory#createFeatureLogger(String).mjava","commits":[{"id":"8fa1f8f009c5147b03311c7e6e6469fa7b677186","date":1482164570,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory#createFeatureLogger(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * returns a FeatureLogger that logs the features\n   * 'featureFormat' param: 'dense' will write features in dense format,\n   * 'sparse' will write the features in sparse format, null or empty will\n   * default to 'sparse'\n   *\n   *\n   * @return a feature logger for the format specified.\n   */\n  private FeatureLogger createFeatureLogger(String featureFormat) {\n    final FeatureLogger.FeatureFormat f;\n    if (featureFormat == null || featureFormat.isEmpty() ||\n        featureFormat.equals(\"sparse\")) {\n      f = FeatureLogger.FeatureFormat.SPARSE;\n    }\n    else if (featureFormat.equals(\"dense\")) {\n      f = FeatureLogger.FeatureFormat.DENSE;\n    }\n    else {\n      f = FeatureLogger.FeatureFormat.SPARSE;\n      log.warn(\"unknown feature logger feature format {}\", featureFormat);\n    }\n    if (fvCacheName == null) {\n      throw new IllegalArgumentException(\"a fvCacheName must be configured\");\n    }\n    return new CSVFeatureLogger(fvCacheName, f, csvKeyValueDelimiter, csvFeatureSeparator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory#createFeatureLogger(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * returns a FeatureLogger that logs the features\n   * 'featureFormat' param: 'dense' will write features in dense format,\n   * 'sparse' will write the features in sparse format, null or empty will\n   * default to 'sparse'\n   *\n   *\n   * @return a feature logger for the format specified.\n   */\n  private FeatureLogger createFeatureLogger(String featureFormat) {\n    final FeatureLogger.FeatureFormat f;\n    if (featureFormat == null || featureFormat.isEmpty() ||\n        featureFormat.equals(\"sparse\")) {\n      f = FeatureLogger.FeatureFormat.SPARSE;\n    }\n    else if (featureFormat.equals(\"dense\")) {\n      f = FeatureLogger.FeatureFormat.DENSE;\n    }\n    else {\n      f = FeatureLogger.FeatureFormat.SPARSE;\n      log.warn(\"unknown feature logger feature format {}\", featureFormat);\n    }\n    if (fvCacheName == null) {\n      throw new IllegalArgumentException(\"a fvCacheName must be configured\");\n    }\n    return new CSVFeatureLogger(fvCacheName, f, csvKeyValueDelimiter, csvFeatureSeparator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97843b36f201934938da5d3392d87b90624dfe6b","date":1482500716,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory#createFeatureLogger(String).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory#createFeatureLogger(String).mjava","sourceNew":"  /**\n   * returns a FeatureLogger that logs the features\n   * 'featureFormat' param: 'dense' will write features in dense format,\n   * 'sparse' will write the features in sparse format, null or empty will\n   * default to 'sparse'\n   *\n   *\n   * @return a feature logger for the format specified.\n   */\n  private FeatureLogger createFeatureLogger(String formatStr) {\n    final FeatureLogger.FeatureFormat format;\n    if (formatStr != null) {\n      format = FeatureLogger.FeatureFormat.valueOf(formatStr.toUpperCase(Locale.ROOT));\n    } else {\n      format = this.defaultFormat;\n    }\n    if (fvCacheName == null) {\n      throw new IllegalArgumentException(\"a fvCacheName must be configured\");\n    }\n    return new CSVFeatureLogger(fvCacheName, format, csvKeyValueDelimiter, csvFeatureSeparator);\n  }\n\n","sourceOld":"  /**\n   * returns a FeatureLogger that logs the features\n   * 'featureFormat' param: 'dense' will write features in dense format,\n   * 'sparse' will write the features in sparse format, null or empty will\n   * default to 'sparse'\n   *\n   *\n   * @return a feature logger for the format specified.\n   */\n  private FeatureLogger createFeatureLogger(String featureFormat) {\n    final FeatureLogger.FeatureFormat f;\n    if (featureFormat == null || featureFormat.isEmpty() ||\n        featureFormat.equals(\"sparse\")) {\n      f = FeatureLogger.FeatureFormat.SPARSE;\n    }\n    else if (featureFormat.equals(\"dense\")) {\n      f = FeatureLogger.FeatureFormat.DENSE;\n    }\n    else {\n      f = FeatureLogger.FeatureFormat.SPARSE;\n      log.warn(\"unknown feature logger feature format {}\", featureFormat);\n    }\n    if (fvCacheName == null) {\n      throw new IllegalArgumentException(\"a fvCacheName must be configured\");\n    }\n    return new CSVFeatureLogger(fvCacheName, f, csvKeyValueDelimiter, csvFeatureSeparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory#createFeatureLogger(String).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory#createFeatureLogger(String).mjava","sourceNew":"  /**\n   * returns a FeatureLogger that logs the features\n   * 'featureFormat' param: 'dense' will write features in dense format,\n   * 'sparse' will write the features in sparse format, null or empty will\n   * default to 'sparse'\n   *\n   *\n   * @return a feature logger for the format specified.\n   */\n  private FeatureLogger createFeatureLogger(String formatStr) {\n    final FeatureLogger.FeatureFormat format;\n    if (formatStr != null) {\n      format = FeatureLogger.FeatureFormat.valueOf(formatStr.toUpperCase(Locale.ROOT));\n    } else {\n      format = this.defaultFormat;\n    }\n    if (fvCacheName == null) {\n      throw new IllegalArgumentException(\"a fvCacheName must be configured\");\n    }\n    return new CSVFeatureLogger(fvCacheName, format, csvKeyValueDelimiter, csvFeatureSeparator);\n  }\n\n","sourceOld":"  /**\n   * returns a FeatureLogger that logs the features\n   * 'featureFormat' param: 'dense' will write features in dense format,\n   * 'sparse' will write the features in sparse format, null or empty will\n   * default to 'sparse'\n   *\n   *\n   * @return a feature logger for the format specified.\n   */\n  private FeatureLogger createFeatureLogger(String featureFormat) {\n    final FeatureLogger.FeatureFormat f;\n    if (featureFormat == null || featureFormat.isEmpty() ||\n        featureFormat.equals(\"sparse\")) {\n      f = FeatureLogger.FeatureFormat.SPARSE;\n    }\n    else if (featureFormat.equals(\"dense\")) {\n      f = FeatureLogger.FeatureFormat.DENSE;\n    }\n    else {\n      f = FeatureLogger.FeatureFormat.SPARSE;\n      log.warn(\"unknown feature logger feature format {}\", featureFormat);\n    }\n    if (fvCacheName == null) {\n      throw new IllegalArgumentException(\"a fvCacheName must be configured\");\n    }\n    return new CSVFeatureLogger(fvCacheName, f, csvKeyValueDelimiter, csvFeatureSeparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97843b36f201934938da5d3392d87b90624dfe6b":["8fa1f8f009c5147b03311c7e6e6469fa7b677186"],"8fa1f8f009c5147b03311c7e6e6469fa7b677186":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8fa1f8f009c5147b03311c7e6e6469fa7b677186"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97843b36f201934938da5d3392d87b90624dfe6b"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","97843b36f201934938da5d3392d87b90624dfe6b"]},"commit2Childs":{"97843b36f201934938da5d3392d87b90624dfe6b":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"8fa1f8f009c5147b03311c7e6e6469fa7b677186":["97843b36f201934938da5d3392d87b90624dfe6b","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fa1f8f009c5147b03311c7e6e6469fa7b677186","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}