{"path":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String,String).mjava","commits":[{"id":"9cf81bc8c6e4078e236f0e38b3a2d0271854f207","date":1364832963,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Given a solrconfig.xml file name, a schema file name, a solr home directory, \n     * and an expected errString, asserts that initializing a core with these \n     * files causes an error matching the specified errString ot be thrown.\n     */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile,\n                                     final String solrHome,\n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      if (null == solrHome) {\n        initCore( solrconfigFile, schemaFile );\n      } else {\n        initCore( solrconfigFile, schemaFile, solrHome );\n      }\n    } catch (Exception e) {\n      // short circuit out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n      // Test the cause too in case the expected error is wrapped by the TestHarness\n      // (NOTE: we don't go all the way down. Either errString should be changed,\n      // or some error wrapping should use a better message or both)\n      if (null != e.getCause() &&\n          null != e.getCause().getMessage() &&\n          -1 != e.getCause().getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String,String).mjava","sourceNew":"    /**\n     * Given a solrconfig.xml file name, a schema file name, a solr home directory, \n     * and an expected errString, asserts that initializing a core with these \n     * files causes an error matching the specified errString ot be thrown.\n     */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile,\n                                     final String solrHome,\n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      if (null == solrHome) {\n        initCore( solrconfigFile, schemaFile );\n      } else {\n        initCore( solrconfigFile, schemaFile, solrHome );\n      }\n    } catch (Exception e) {\n      for (Throwable t = e; t != null; t = t.getCause()) {\n        // short circuit out if we found what we expected\n        if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString)) return;\n      }\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","sourceOld":"    /**\n     * Given a solrconfig.xml file name, a schema file name, a solr home directory, \n     * and an expected errString, asserts that initializing a core with these \n     * files causes an error matching the specified errString ot be thrown.\n     */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile,\n                                     final String solrHome,\n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      if (null == solrHome) {\n        initCore( solrconfigFile, schemaFile );\n      } else {\n        initCore( solrconfigFile, schemaFile, solrHome );\n      }\n    } catch (Exception e) {\n      // short circuit out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n      // Test the cause too in case the expected error is wrapped by the TestHarness\n      // (NOTE: we don't go all the way down. Either errString should be changed,\n      // or some error wrapping should use a better message or both)\n      if (null != e.getCause() &&\n          null != e.getCause().getMessage() &&\n          -1 != e.getCause().getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String,String).mjava","sourceNew":"    /**\n     * Given a solrconfig.xml file name, a schema file name, a solr home directory, \n     * and an expected errString, asserts that initializing a core with these \n     * files causes an error matching the specified errString ot be thrown.\n     */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile,\n                                     final String solrHome,\n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n\n      if (null == solrHome) {\n        initCore( solrconfigFile, schemaFile );\n      } else {\n        initCore( solrconfigFile, schemaFile, solrHome );\n      }\n\n      CoreContainer cc = h.getCoreContainer();\n      for (Map.Entry<String, Exception> entry : cc.getCoreInitFailures().entrySet()) {\n        if (matches(entry.getValue(), errString))\n          return;\n      }\n    }\n    catch (Exception e) {\n      if (matches(e, errString))\n        return;\n      throw e;\n    }\n    finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","sourceOld":"    /**\n     * Given a solrconfig.xml file name, a schema file name, a solr home directory, \n     * and an expected errString, asserts that initializing a core with these \n     * files causes an error matching the specified errString ot be thrown.\n     */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile,\n                                     final String solrHome,\n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      if (null == solrHome) {\n        initCore( solrconfigFile, schemaFile );\n      } else {\n        initCore( solrconfigFile, schemaFile, solrHome );\n      }\n    } catch (Exception e) {\n      for (Throwable t = e; t != null; t = t.getCause()) {\n        // short circuit out if we found what we expected\n        if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString)) return;\n      }\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String,String).mjava","sourceNew":"    /**\n     * Given a solrconfig.xml file name, a schema file name, a solr home directory, \n     * and an expected errString, asserts that initializing a core with these \n     * files causes an error matching the specified errString ot be thrown.\n     */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile,\n                                     final String solrHome,\n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      if (null == solrHome) {\n        initCore( solrconfigFile, schemaFile );\n      } else {\n        initCore( solrconfigFile, schemaFile, solrHome );\n      }\n    } catch (Exception e) {\n      for (Throwable t = e; t != null; t = t.getCause()) {\n        // short circuit out if we found what we expected\n        if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString)) return;\n      }\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","sourceOld":"    /**\n     * Given a solrconfig.xml file name, a schema file name, a solr home directory, \n     * and an expected errString, asserts that initializing a core with these \n     * files causes an error matching the specified errString ot be thrown.\n     */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile,\n                                     final String solrHome,\n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n\n      if (null == solrHome) {\n        initCore( solrconfigFile, schemaFile );\n      } else {\n        initCore( solrconfigFile, schemaFile, solrHome );\n      }\n\n      CoreContainer cc = h.getCoreContainer();\n      for (Map.Entry<String, Exception> entry : cc.getCoreInitFailures().entrySet()) {\n        if (matches(entry.getValue(), errString))\n          return;\n      }\n    }\n    catch (Exception e) {\n      if (matches(e, errString))\n        return;\n      throw e;\n    }\n    finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String,String).mjava","sourceNew":"    /**\n     * Given a solrconfig.xml file name, a schema file name, a solr home directory, \n     * and an expected errString, asserts that initializing a core with these \n     * files causes an error matching the specified errString ot be thrown.\n     */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile,\n                                     final String solrHome,\n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n\n      if (null == solrHome) {\n        initCore( solrconfigFile, schemaFile );\n      } else {\n        initCore( solrconfigFile, schemaFile, solrHome );\n      }\n\n      CoreContainer cc = h.getCoreContainer();\n      for (Map.Entry<String, Exception> entry : cc.getCoreInitFailures().entrySet()) {\n        if (matches(entry.getValue(), errString))\n          return;\n      }\n    }\n    catch (Exception e) {\n      if (matches(e, errString))\n        return;\n      throw e;\n    }\n    finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","sourceOld":"    /**\n     * Given a solrconfig.xml file name, a schema file name, a solr home directory, \n     * and an expected errString, asserts that initializing a core with these \n     * files causes an error matching the specified errString ot be thrown.\n     */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile,\n                                     final String solrHome,\n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      if (null == solrHome) {\n        initCore( solrconfigFile, schemaFile );\n      } else {\n        initCore( solrconfigFile, schemaFile, solrHome );\n      }\n    } catch (Exception e) {\n      for (Throwable t = e; t != null; t = t.getCause()) {\n        // short circuit out if we found what we expected\n        if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString)) return;\n      }\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String,String).mjava","sourceNew":"    /**\n     * Given a solrconfig.xml file name, a schema file name, a solr home directory, \n     * and an expected errString, asserts that initializing a core with these \n     * files causes an error matching the specified errString ot be thrown.\n     */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile,\n                                     final String solrHome,\n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n\n      if (null == solrHome) {\n        initCore( solrconfigFile, schemaFile );\n      } else {\n        initCore( solrconfigFile, schemaFile, solrHome );\n      }\n\n      CoreContainer cc = h.getCoreContainer();\n      for (Map.Entry<String, Exception> entry : cc.getCoreInitFailures().entrySet()) {\n        if (matches(entry.getValue(), errString))\n          return;\n      }\n    }\n    catch (Exception e) {\n      if (matches(e, errString))\n        return;\n      throw e;\n    }\n    finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","sourceOld":"    /**\n     * Given a solrconfig.xml file name, a schema file name, a solr home directory, \n     * and an expected errString, asserts that initializing a core with these \n     * files causes an error matching the specified errString ot be thrown.\n     */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile,\n                                     final String solrHome,\n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      if (null == solrHome) {\n        initCore( solrconfigFile, schemaFile );\n      } else {\n        initCore( solrconfigFile, schemaFile, solrHome );\n      }\n    } catch (Exception e) {\n      for (Throwable t = e; t != null; t = t.getCause()) {\n        // short circuit out if we found what we expected\n        if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString)) return;\n      }\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be34977edad162456de4a4583804025803591c45","date":1381910671,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String,String).mjava","sourceNew":"    /**\n     * Given a solrconfig.xml file name, a schema file name, a solr home directory, \n     * and an expected errString, asserts that initializing a core with these \n     * files causes an error matching the specified errString ot be thrown.\n     */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile,\n                                     final String solrHome,\n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n\n      if (null == solrHome) {\n        initCore( solrconfigFile, schemaFile );\n      } else {\n        initCore( solrconfigFile, schemaFile, solrHome );\n      }\n\n      CoreContainer cc = h.getCoreContainer();\n      for (Map.Entry<String, Exception> entry : cc.getCoreInitFailures().entrySet()) {\n        if (matches(entry.getValue(), errString))\n          return;\n      }\n    }\n    catch (Exception e) {\n      if (matches(e, errString))\n        return;\n      throw e;\n    }\n    finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","sourceOld":"    /**\n     * Given a solrconfig.xml file name, a schema file name, a solr home directory, \n     * and an expected errString, asserts that initializing a core with these \n     * files causes an error matching the specified errString ot be thrown.\n     */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile,\n                                     final String solrHome,\n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n\n      if (null == solrHome) {\n        initCore( solrconfigFile, schemaFile );\n      } else {\n        initCore( solrconfigFile, schemaFile, solrHome );\n      }\n\n      CoreContainer cc = h.getCoreContainer();\n      for (Map.Entry<String, Exception> entry : cc.getCoreInitFailures().entrySet()) {\n        if (matches(entry.getValue(), errString))\n          return;\n      }\n    }\n    catch (Exception e) {\n      if (matches(e, errString))\n        return;\n      throw e;\n    }\n    finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be34977edad162456de4a4583804025803591c45":["7116474e2e390259937401cf928323e0cbc75e60"],"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd","7116474e2e390259937401cf928323e0cbc75e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"],"d264f386d864b5751209060e8886ca9845f70469":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["be34977edad162456de4a4583804025803591c45"]},"commit2Childs":{"be34977edad162456de4a4583804025803591c45":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7116474e2e390259937401cf928323e0cbc75e60":["be34977edad162456de4a4583804025803591c45","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d264f386d864b5751209060e8886ca9845f70469"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}