{"path":"src/java/org/apache/solr/common/util/ConcurrentLRUCache#ConcurrentLRUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V]).mjava","commits":[{"id":"eaa3b356f379bef56d6457517e0158dac118e99e","date":1227476542,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/ConcurrentLRUCache#ConcurrentLRUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V]).mjava","pathOld":"src/java/org/apache/solr/common/util/ConcurrentLRUCache#ConcurrentLRUCache(int,int,int,int,boolean,boolean,int).mjava","sourceNew":"  public ConcurrentLRUCache(int upperWaterMark, final int lowerWaterMark, int acceptableWatermark,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K,V> evictionListener) {\n    if (upperWaterMark < 1) throw new IllegalArgumentException(\"upperWaterMark must be > 0\");\n    if (lowerWaterMark >= upperWaterMark)\n      throw new IllegalArgumentException(\"lowerWaterMark must be  < upperWaterMark\");\n    map = new ConcurrentHashMap<Object, CacheEntry>(initialSize);\n    newThreadForCleanup = runNewThreadForCleanup;\n    this.upperWaterMark = upperWaterMark;\n    this.lowerWaterMark = lowerWaterMark;\n    this.acceptableWaterMark = acceptableWatermark;\n    this.evictionListener = evictionListener;\n    if (runCleanupThread) {\n      cleanupThread = new CleanupThread(this);\n      cleanupThread.start();\n    }\n  }\n\n","sourceOld":"  public ConcurrentLRUCache(int upperWaterMark, final int lowerWaterMark, int acceptableWatermark, int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup, final int delay) {\n    if (upperWaterMark < 1) throw new IllegalArgumentException(\"upperWaterMark must be > 0\");\n    if (lowerWaterMark >= upperWaterMark)\n      throw new IllegalArgumentException(\"lowerWaterMark must be  < upperWaterMark\");\n    map = new ConcurrentHashMap<Object, CacheEntry>(initialSize);\n    newThreadForCleanup = runNewThreadForCleanup;\n    this.upperWaterMark = upperWaterMark;\n    this.lowerWaterMark = lowerWaterMark;\n    this.acceptableWaterMark = acceptableWatermark;\n    if (runCleanupThread) {\n      new Thread() {\n        public void run() {\n          while (true) {\n            if (stop) break;\n            try {\n              Thread.sleep(delay * 1000);\n            } catch (InterruptedException e) {/*no op*/ }\n            markAndSweep();\n          }\n        }\n      }.start();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/ConcurrentLRUCache#ConcurrentLRUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V]).mjava","pathOld":"src/java/org/apache/solr/common/util/ConcurrentLRUCache#ConcurrentLRUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V]).mjava","sourceNew":"  public ConcurrentLRUCache(int upperWaterMark, final int lowerWaterMark, int acceptableWatermark,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K,V> evictionListener) {\n    if (upperWaterMark < 1) throw new IllegalArgumentException(\"upperWaterMark must be > 0\");\n    if (lowerWaterMark >= upperWaterMark)\n      throw new IllegalArgumentException(\"lowerWaterMark must be  < upperWaterMark\");\n    map = new ConcurrentHashMap<Object, CacheEntry>(initialSize);\n    newThreadForCleanup = runNewThreadForCleanup;\n    this.upperWaterMark = upperWaterMark;\n    this.lowerWaterMark = lowerWaterMark;\n    this.acceptableWaterMark = acceptableWatermark;\n    this.evictionListener = evictionListener;\n    if (runCleanupThread) {\n      cleanupThread = new CleanupThread(this);\n      cleanupThread.start();\n    }\n  }\n\n","sourceOld":"  public ConcurrentLRUCache(int upperWaterMark, final int lowerWaterMark, int acceptableWatermark,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K,V> evictionListener) {\n    if (upperWaterMark < 1) throw new IllegalArgumentException(\"upperWaterMark must be > 0\");\n    if (lowerWaterMark >= upperWaterMark)\n      throw new IllegalArgumentException(\"lowerWaterMark must be  < upperWaterMark\");\n    map = new ConcurrentHashMap<Object, CacheEntry>(initialSize);\n    newThreadForCleanup = runNewThreadForCleanup;\n    this.upperWaterMark = upperWaterMark;\n    this.lowerWaterMark = lowerWaterMark;\n    this.acceptableWaterMark = acceptableWatermark;\n    this.evictionListener = evictionListener;\n    if (runCleanupThread) {\n      cleanupThread = new CleanupThread(this);\n      cleanupThread.start();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["eaa3b356f379bef56d6457517e0158dac118e99e"],"eaa3b356f379bef56d6457517e0158dac118e99e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"eaa3b356f379bef56d6457517e0158dac118e99e":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["eaa3b356f379bef56d6457517e0158dac118e99e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}