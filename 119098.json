{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer#addBinaryField(FieldInfo,DocValuesProducer).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer#addBinaryField(FieldInfo,DocValuesProducer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    meta.writeInt(field.number);\n    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n\n    BinaryDocValues values = valuesProducer.getBinary(field);\n    long start = data.getFilePointer();\n    meta.writeLong(start); // dataOffset\n    int numDocsWithField = 0;\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = 0;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithField++;\n      BytesRef v = values.binaryValue();\n      int length = v.length;\n      data.writeBytes(v.bytes, v.offset, v.length);\n      minLength = Math.min(length, minLength);\n      maxLength = Math.max(length, maxLength);\n    }\n    assert numDocsWithField <= maxDoc;\n    meta.writeLong(data.getFilePointer() - start); // dataLength\n\n    if (numDocsWithField == 0) {\n      meta.writeLong(-2); // docsWithFieldOffset\n      meta.writeLong(0L); // docsWithFieldLength\n      meta.writeShort((short) -1); // jumpTableEntryCount\n      meta.writeByte((byte) -1);   // denseRankPower\n    } else if (numDocsWithField == maxDoc) {\n      meta.writeLong(-1); // docsWithFieldOffset\n      meta.writeLong(0L); // docsWithFieldLength\n      meta.writeShort((short) -1); // jumpTableEntryCount\n      meta.writeByte((byte) -1);   // denseRankPower\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset); // docsWithFieldOffset\n      values = valuesProducer.getBinary(field);\n      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n      meta.writeShort(jumpTableEntryCount);\n      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n    }\n\n    meta.writeInt(numDocsWithField);\n    meta.writeInt(minLength);\n    meta.writeInt(maxLength);\n    if (maxLength > minLength) {\n      start = data.getFilePointer();\n      meta.writeLong(start);\n      meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n      final DirectMonotonicWriter writer = DirectMonotonicWriter.getInstance(meta, data, numDocsWithField + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n      long addr = 0;\n      writer.add(addr);\n      values = valuesProducer.getBinary(field);\n      for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n        addr += values.binaryValue().length;\n        writer.add(addr);\n      }\n      writer.finish();\n      meta.writeLong(data.getFilePointer() - start);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer#addBinaryField(FieldInfo,DocValuesProducer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    meta.writeInt(field.number);\n    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n\n    BinaryDocValues values = valuesProducer.getBinary(field);\n    long start = data.getFilePointer();\n    meta.writeLong(start); // dataOffset\n    int numDocsWithField = 0;\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = 0;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithField++;\n      BytesRef v = values.binaryValue();\n      int length = v.length;\n      data.writeBytes(v.bytes, v.offset, v.length);\n      minLength = Math.min(length, minLength);\n      maxLength = Math.max(length, maxLength);\n    }\n    assert numDocsWithField <= maxDoc;\n    meta.writeLong(data.getFilePointer() - start); // dataLength\n\n    if (numDocsWithField == 0) {\n      meta.writeLong(-2); // docsWithFieldOffset\n      meta.writeLong(0L); // docsWithFieldLength\n      meta.writeShort((short) -1); // jumpTableEntryCount\n      meta.writeByte((byte) -1);   // denseRankPower\n    } else if (numDocsWithField == maxDoc) {\n      meta.writeLong(-1); // docsWithFieldOffset\n      meta.writeLong(0L); // docsWithFieldLength\n      meta.writeShort((short) -1); // jumpTableEntryCount\n      meta.writeByte((byte) -1);   // denseRankPower\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset); // docsWithFieldOffset\n      values = valuesProducer.getBinary(field);\n      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n      meta.writeShort(jumpTableEntryCount);\n      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n    }\n\n    meta.writeInt(numDocsWithField);\n    meta.writeInt(minLength);\n    meta.writeInt(maxLength);\n    if (maxLength > minLength) {\n      start = data.getFilePointer();\n      meta.writeLong(start);\n      meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n      final DirectMonotonicWriter writer = DirectMonotonicWriter.getInstance(meta, data, numDocsWithField + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n      long addr = 0;\n      writer.add(addr);\n      values = valuesProducer.getBinary(field);\n      for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n        addr += values.binaryValue().length;\n        writer.add(addr);\n      }\n      writer.finish();\n      meta.writeLong(data.getFilePointer() - start);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fcfc028fca127dc2779630e53a9c2ec208ee7a0","date":1582034562,"type":3,"author":"markharwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer#addBinaryField(FieldInfo,DocValuesProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer#addBinaryField(FieldInfo,DocValuesProducer).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    meta.writeInt(field.number);\n    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n\n    try (CompressedBinaryBlockWriter blockWriter = new CompressedBinaryBlockWriter()){\n      BinaryDocValues values = valuesProducer.getBinary(field);\n      long start = data.getFilePointer();\n      meta.writeLong(start); // dataOffset\n      int numDocsWithField = 0;\n      int minLength = Integer.MAX_VALUE;\n      int maxLength = 0;\n      for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n        numDocsWithField++;\n        BytesRef v = values.binaryValue();      \n        blockWriter.addDoc(doc, v);      \n        int length = v.length;      \n        minLength = Math.min(length, minLength);\n        maxLength = Math.max(length, maxLength);\n      }\n      blockWriter.flushData();\n\n      assert numDocsWithField <= maxDoc;\n      meta.writeLong(data.getFilePointer() - start); // dataLength\n\n      if (numDocsWithField == 0) {\n        meta.writeLong(-2); // docsWithFieldOffset\n        meta.writeLong(0L); // docsWithFieldLength\n        meta.writeShort((short) -1); // jumpTableEntryCount\n        meta.writeByte((byte) -1);   // denseRankPower\n      } else if (numDocsWithField == maxDoc) {\n        meta.writeLong(-1); // docsWithFieldOffset\n        meta.writeLong(0L); // docsWithFieldLength\n        meta.writeShort((short) -1); // jumpTableEntryCount\n        meta.writeByte((byte) -1);   // denseRankPower\n      } else {\n        long offset = data.getFilePointer();\n        meta.writeLong(offset); // docsWithFieldOffset\n        values = valuesProducer.getBinary(field);\n        final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n        meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n        meta.writeShort(jumpTableEntryCount);\n        meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n      }\n\n      meta.writeInt(numDocsWithField);\n      meta.writeInt(minLength);\n      meta.writeInt(maxLength);    \n      \n      blockWriter.writeMetaData();\n      \n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    meta.writeInt(field.number);\n    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n\n    BinaryDocValues values = valuesProducer.getBinary(field);\n    long start = data.getFilePointer();\n    meta.writeLong(start); // dataOffset\n    int numDocsWithField = 0;\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = 0;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithField++;\n      BytesRef v = values.binaryValue();\n      int length = v.length;\n      data.writeBytes(v.bytes, v.offset, v.length);\n      minLength = Math.min(length, minLength);\n      maxLength = Math.max(length, maxLength);\n    }\n    assert numDocsWithField <= maxDoc;\n    meta.writeLong(data.getFilePointer() - start); // dataLength\n\n    if (numDocsWithField == 0) {\n      meta.writeLong(-2); // docsWithFieldOffset\n      meta.writeLong(0L); // docsWithFieldLength\n      meta.writeShort((short) -1); // jumpTableEntryCount\n      meta.writeByte((byte) -1);   // denseRankPower\n    } else if (numDocsWithField == maxDoc) {\n      meta.writeLong(-1); // docsWithFieldOffset\n      meta.writeLong(0L); // docsWithFieldLength\n      meta.writeShort((short) -1); // jumpTableEntryCount\n      meta.writeByte((byte) -1);   // denseRankPower\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset); // docsWithFieldOffset\n      values = valuesProducer.getBinary(field);\n      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n      meta.writeShort(jumpTableEntryCount);\n      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n    }\n\n    meta.writeInt(numDocsWithField);\n    meta.writeInt(minLength);\n    meta.writeInt(maxLength);\n    if (maxLength > minLength) {\n      start = data.getFilePointer();\n      meta.writeLong(start);\n      meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n      final DirectMonotonicWriter writer = DirectMonotonicWriter.getInstance(meta, data, numDocsWithField + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n      long addr = 0;\n      writer.add(addr);\n      values = valuesProducer.getBinary(field);\n      for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n        addr += values.binaryValue().length;\n        writer.add(addr);\n      }\n      writer.finish();\n      meta.writeLong(data.getFilePointer() - start);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5fcfc028fca127dc2779630e53a9c2ec208ee7a0":["03e17b020972a0d6e8d6823f545571a66646a167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5fcfc028fca127dc2779630e53a9c2ec208ee7a0"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","5fcfc028fca127dc2779630e53a9c2ec208ee7a0"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"5fcfc028fca127dc2779630e53a9c2ec208ee7a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}