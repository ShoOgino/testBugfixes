{"path":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      return new ConstantScoreWeight(this) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(context.docBase ^ seed);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              matchValues.add(docValues.get((int) idSource.get(docID)));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(context.docBase ^ seed);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              matchValues.add(docValues.get((int) idSource.get(docID)));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      return new ConstantScoreWeight(this) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(context.docBase ^ seed);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              matchValues.add(docValues.get((int) idSource.get(docID)));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      return new ConstantScoreWeight(this) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(context.docBase ^ seed);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              matchValues.add(docValues.get((int) idSource.get(docID)));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d52e48927ca4ef3655a261f2230b968b6fdf3608":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d52e48927ca4ef3655a261f2230b968b6fdf3608","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"d52e48927ca4ef3655a261f2230b968b6fdf3608":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}