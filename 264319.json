{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingPostFilter#needsScores(SolrParams).mjava","commits":[{"id":"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d","date":1382570352,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingPostFilter#needsScores(SolrParams).mjava","pathOld":"/dev/null","sourceNew":"    private boolean needsScores(SolrParams params) {\n\n      String sortSpec = params.get(\"sort\");\n      if(sortSpec != null) {\n        String[] sorts = sortSpec.split(\",\");\n        for(String s: sorts) {\n          String parts[] = s.split(\" \");\n          if(parts[0].equals(\"score\")) {\n            return true;\n          }\n        }\n      } else {\n        //No sort specified so it defaults to score.\n        return true;\n      }\n\n      String fl = params.get(\"fl\");\n      if(fl != null) {\n        String[] fls = fl.split(\",\");\n        for(String f : fls) {\n          if(f.trim().equals(\"score\")) {\n            return true;\n          }\n        }\n      }\n\n      if(this.context.containsKey(QueryElevationComponent.BOOSTED)) {\n        return true;\n      }\n\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ceae51e37bbff02dcdeaa12303fec10d3eaaa004"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ceae51e37bbff02dcdeaa12303fec10d3eaaa004","date":1387382773,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingPostFilter#needsScores(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingPostFilter#needsScores(SolrParams).mjava","sourceNew":"    private boolean needsScores(SolrParams params) {\n\n      String sortSpec = params.get(\"sort\");\n      if(sortSpec != null && sortSpec.length()!=0) {\n        String[] sorts = sortSpec.split(\",\");\n        for(String s: sorts) {\n          String parts[] = s.split(\" \");\n          if(parts[0].equals(\"score\")) {\n            return true;\n          }\n        }\n      } else {\n        //No sort specified so it defaults to score.\n        return true;\n      }\n\n      String fl = params.get(\"fl\");\n      if(fl != null) {\n        String[] fls = fl.split(\",\");\n        for(String f : fls) {\n          if(f.trim().equals(\"score\")) {\n            return true;\n          }\n        }\n      }\n\n      if(this.context.containsKey(QueryElevationComponent.BOOSTED)) {\n        return true;\n      }\n\n      return false;\n    }\n\n","sourceOld":"    private boolean needsScores(SolrParams params) {\n\n      String sortSpec = params.get(\"sort\");\n      if(sortSpec != null) {\n        String[] sorts = sortSpec.split(\",\");\n        for(String s: sorts) {\n          String parts[] = s.split(\" \");\n          if(parts[0].equals(\"score\")) {\n            return true;\n          }\n        }\n      } else {\n        //No sort specified so it defaults to score.\n        return true;\n      }\n\n      String fl = params.get(\"fl\");\n      if(fl != null) {\n        String[] fls = fl.split(\",\");\n        for(String f : fls) {\n          if(f.trim().equals(\"score\")) {\n            return true;\n          }\n        }\n      }\n\n      if(this.context.containsKey(QueryElevationComponent.BOOSTED)) {\n        return true;\n      }\n\n      return false;\n    }\n\n","bugFix":["c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingPostFilter#needsScores(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingPostFilter#needsScores(SolrParams).mjava","sourceNew":"    private boolean needsScores(SolrParams params) {\n\n      String sortSpec = params.get(\"sort\");\n      if(sortSpec != null && sortSpec.length()!=0) {\n        String[] sorts = sortSpec.split(\",\");\n        for(String s: sorts) {\n          String parts[] = s.split(\" \");\n          if(parts[0].equals(\"score\")) {\n            return true;\n          }\n        }\n      } else {\n        //No sort specified so it defaults to score.\n        return true;\n      }\n\n      String fl = params.get(\"fl\");\n      if(fl != null) {\n        String[] fls = fl.split(\",\");\n        for(String f : fls) {\n          if(f.trim().equals(\"score\")) {\n            return true;\n          }\n        }\n      }\n\n      if(this.context.containsKey(QueryElevationComponent.BOOSTED)) {\n        return true;\n      }\n\n      return false;\n    }\n\n","sourceOld":"    private boolean needsScores(SolrParams params) {\n\n      String sortSpec = params.get(\"sort\");\n      if(sortSpec != null) {\n        String[] sorts = sortSpec.split(\",\");\n        for(String s: sorts) {\n          String parts[] = s.split(\" \");\n          if(parts[0].equals(\"score\")) {\n            return true;\n          }\n        }\n      } else {\n        //No sort specified so it defaults to score.\n        return true;\n      }\n\n      String fl = params.get(\"fl\");\n      if(fl != null) {\n        String[] fls = fl.split(\",\");\n        for(String f : fls) {\n          if(f.trim().equals(\"score\")) {\n            return true;\n          }\n        }\n      }\n\n      if(this.context.containsKey(QueryElevationComponent.BOOSTED)) {\n        return true;\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f9eac2f0b568b3694682edb863185a273fbbc6f","date":1391883217,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingPostFilter#needsScores(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingPostFilter#needsScores(SolrParams).mjava","sourceNew":"    private boolean needsScores(SolrParams params) {\n\n      String sortSpec = params.get(\"sort\");\n      if(sortSpec != null && sortSpec.length()!=0) {\n        String[] sorts = sortSpec.split(\",\");\n        for(String s: sorts) {\n          String parts[] = s.split(\" \");\n          if(parts[0].equals(\"score\")) {\n            return true;\n          }\n        }\n      } else {\n        //No sort specified so it defaults to score.\n        return true;\n      }\n\n      String fl = params.get(\"fl\");\n      if(fl != null) {\n        String[] fls = fl.split(\",\");\n        for(String f : fls) {\n          if(f.trim().equals(\"score\")) {\n            return true;\n          }\n        }\n      }\n\n      if(this.boosted != null) {\n        return true;\n      }\n\n      return false;\n    }\n\n","sourceOld":"    private boolean needsScores(SolrParams params) {\n\n      String sortSpec = params.get(\"sort\");\n      if(sortSpec != null && sortSpec.length()!=0) {\n        String[] sorts = sortSpec.split(\",\");\n        for(String s: sorts) {\n          String parts[] = s.split(\" \");\n          if(parts[0].equals(\"score\")) {\n            return true;\n          }\n        }\n      } else {\n        //No sort specified so it defaults to score.\n        return true;\n      }\n\n      String fl = params.get(\"fl\");\n      if(fl != null) {\n        String[] fls = fl.split(\",\");\n        for(String f : fls) {\n          if(f.trim().equals(\"score\")) {\n            return true;\n          }\n        }\n      }\n\n      if(this.context.containsKey(QueryElevationComponent.BOOSTED)) {\n        return true;\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0325de99180d346d61d36938843a5c8451fe26ae","date":1447368726,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingPostFilter#needsScores(SolrParams).mjava","sourceNew":null,"sourceOld":"    private boolean needsScores(SolrParams params) {\n\n      String sortSpec = params.get(\"sort\");\n      if(sortSpec != null && sortSpec.length()!=0) {\n        String[] sorts = sortSpec.split(\",\");\n        for(String s: sorts) {\n          String parts[] = s.split(\" \");\n          if(parts[0].equals(\"score\")) {\n            return true;\n          }\n        }\n      } else {\n        //No sort specified so it defaults to score.\n        return true;\n      }\n\n      String fl = params.get(\"fl\");\n      if(fl != null) {\n        String[] fls = fl.split(\",\");\n        for(String f : fls) {\n          if(f.trim().equals(\"score\")) {\n            return true;\n          }\n        }\n      }\n\n      if(this.boosted != null) {\n        return true;\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d","ceae51e37bbff02dcdeaa12303fec10d3eaaa004"],"6f9eac2f0b568b3694682edb863185a273fbbc6f":["ceae51e37bbff02dcdeaa12303fec10d3eaaa004"],"0325de99180d346d61d36938843a5c8451fe26ae":["6f9eac2f0b568b3694682edb863185a273fbbc6f"],"ceae51e37bbff02dcdeaa12303fec10d3eaaa004":["c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0325de99180d346d61d36938843a5c8451fe26ae"]},"commit2Childs":{"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ceae51e37bbff02dcdeaa12303fec10d3eaaa004"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"6f9eac2f0b568b3694682edb863185a273fbbc6f":["0325de99180d346d61d36938843a5c8451fe26ae"],"ceae51e37bbff02dcdeaa12303fec10d3eaaa004":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","6f9eac2f0b568b3694682edb863185a273fbbc6f"],"0325de99180d346d61d36938843a5c8451fe26ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}