{"path":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#assertResponseValues(int,Callable[NavigableObject],Map).mjava","commits":[{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#assertResponseValues(int,Callable[NavigableObject],Map).mjava","pathOld":"/dev/null","sourceNew":"  public static NavigableObject assertResponseValues(int repeats,  Callable<NavigableObject> callable,Map vals) throws Exception {\n    NavigableObject rsp = null;\n\n    for (int i = 0; i < repeats; i++) {\n      if (i > 0) {\n        Thread.sleep(100);\n      }\n      try {\n        rsp = callable.call();\n      } catch (Exception e) {\n        if (i >= repeats - 1) throw e;\n        continue;\n      }\n      for (Object e : vals.entrySet()) {\n        Map.Entry entry = (Map.Entry) e;\n        String k = (String) entry.getKey();\n        List<String> key = StrUtils.split(k, '/');\n\n        Object val = entry.getValue();\n        Predicate p = val instanceof Predicate ? (Predicate) val : o -> {\n          String v = o == null ? null : String.valueOf(o);\n          return Objects.equals(val, o);\n        };\n        boolean isPass = p.test(rsp._get(key, null));\n        if (isPass) return rsp;\n        else if (i >= repeats - 1) {\n          fail(\"req: \" + callable.toString() +\" . attempt: \" + i + \" Mismatch for value : '\" + key + \"' in response , \" + Utils.toJSONString(rsp));\n        }\n\n      }\n\n    }\n    return rsp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#assertResponseValues(int,Callable[NavigableObject],Map).mjava","pathOld":"/dev/null","sourceNew":"  public static NavigableObject assertResponseValues(int repeats,  Callable<NavigableObject> callable,Map vals) throws Exception {\n    NavigableObject rsp = null;\n\n    for (int i = 0; i < repeats; i++) {\n      if (i > 0) {\n        Thread.sleep(100);\n      }\n      try {\n        rsp = callable.call();\n      } catch (Exception e) {\n        if (i >= repeats - 1) throw e;\n        continue;\n      }\n      for (Object e : vals.entrySet()) {\n        Map.Entry entry = (Map.Entry) e;\n        String k = (String) entry.getKey();\n        List<String> key = StrUtils.split(k, '/');\n\n        Object val = entry.getValue();\n        Predicate p = val instanceof Predicate ? (Predicate) val : o -> {\n          String v = o == null ? null : String.valueOf(o);\n          return Objects.equals(val, o);\n        };\n        boolean isPass = p.test(rsp._get(key, null));\n        if (isPass) return rsp;\n        else if (i >= repeats - 1) {\n          fail(\"req: \" + callable.toString() +\" . attempt: \" + i + \" Mismatch for value : '\" + key + \"' in response , \" + Utils.toJSONString(rsp));\n        }\n\n      }\n\n    }\n    return rsp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#assertResponseValues(int,Callable[NavigableObject],Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#assertResponseValues(int,Callable[NavigableObject],Map).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public static NavigableObject assertResponseValues(int repeats,  Callable<NavigableObject> callable,\n                                                     @SuppressWarnings({\"rawtypes\"})Map vals) throws Exception {\n    NavigableObject rsp = null;\n\n    for (int i = 0; i < repeats; i++) {\n      if (i > 0) {\n        Thread.sleep(100);\n      }\n      try {\n        rsp = callable.call();\n      } catch (Exception e) {\n        if (i >= repeats - 1) throw e;\n        continue;\n      }\n      for (Object e : vals.entrySet()) {\n        @SuppressWarnings({\"rawtypes\"})\n        Map.Entry entry = (Map.Entry) e;\n        String k = (String) entry.getKey();\n        List<String> key = StrUtils.split(k, '/');\n\n        Object val = entry.getValue();\n        @SuppressWarnings({\"rawtypes\"})\n        Predicate p = val instanceof Predicate ? (Predicate) val : o -> {\n          String v = o == null ? null : String.valueOf(o);\n          return Objects.equals(val, o);\n        };\n        boolean isPass = p.test(rsp._get(key, null));\n        if (isPass) return rsp;\n        else if (i >= repeats - 1) {\n          fail(\"req: \" + callable.toString() +\" . attempt: \" + i + \" Mismatch for value : '\" + key + \"' in response , \" + Utils.toJSONString(rsp));\n        }\n\n      }\n\n    }\n    return rsp;\n  }\n\n","sourceOld":"  public static NavigableObject assertResponseValues(int repeats,  Callable<NavigableObject> callable,Map vals) throws Exception {\n    NavigableObject rsp = null;\n\n    for (int i = 0; i < repeats; i++) {\n      if (i > 0) {\n        Thread.sleep(100);\n      }\n      try {\n        rsp = callable.call();\n      } catch (Exception e) {\n        if (i >= repeats - 1) throw e;\n        continue;\n      }\n      for (Object e : vals.entrySet()) {\n        Map.Entry entry = (Map.Entry) e;\n        String k = (String) entry.getKey();\n        List<String> key = StrUtils.split(k, '/');\n\n        Object val = entry.getValue();\n        Predicate p = val instanceof Predicate ? (Predicate) val : o -> {\n          String v = o == null ? null : String.valueOf(o);\n          return Objects.equals(val, o);\n        };\n        boolean isPass = p.test(rsp._get(key, null));\n        if (isPass) return rsp;\n        else if (i >= repeats - 1) {\n          fail(\"req: \" + callable.toString() +\" . attempt: \" + i + \" Mismatch for value : '\" + key + \"' in response , \" + Utils.toJSONString(rsp));\n        }\n\n      }\n\n    }\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8476949555f799dff381770c01cfad051a264487":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["8476949555f799dff381770c01cfad051a264487"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8476949555f799dff381770c01cfad051a264487"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8476949555f799dff381770c01cfad051a264487","b0b597c65628ca9e73913a07e81691f8229bae35"],"8476949555f799dff381770c01cfad051a264487":["e98520789adb1d5ad05afb4956eca0944a929688","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}