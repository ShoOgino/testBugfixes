{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testBoostedPhraseHighlightTest().mjava","commits":[{"id":"94221e4190ec47a1ec4f0bd8f99b3648af295a06","date":1389175887,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testBoostedPhraseHighlightTest().mjava","pathOld":"/dev/null","sourceNew":"  public void testBoostedPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter( dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer( random() ) ) );\n    Document doc = new Document();\n    FieldType type = new FieldType( TextField.TYPE_STORED  );\n    type.setStoreTermVectorOffsets( true );\n    type.setStoreTermVectorPositions( true );\n    type.setStoreTermVectors( true );\n    type.freeze();\n    StringBuilder text = new StringBuilder();\n    text.append(\"words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    text.append(\"highlight words together \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    doc.add( new Field( \"text\", text.toString().trim(), type ) );\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n\n    // This mimics what some query parsers do to <highlight words together>\n    BooleanQuery terms = new BooleanQuery();\n    terms.add( clause( \"text\", \"highlight\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"words\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"together\" ), Occur.MUST );\n    // This mimics what some query parsers do to <\"highlight words together\">\n    BooleanQuery phrase = new BooleanQuery();\n    phrase.add( clause( \"text\", \"highlight\", \"words\", \"together\" ), Occur.MUST );\n    phrase.setBoost( 100 );\n    // Now combine those results in a boolean query which should pull the phrases to the front of the list of fragments \n    BooleanQuery query = new BooleanQuery();\n    query.add( phrase, Occur.MUST );\n    query.add( phrase, Occur.SHOULD );\n    FieldQuery fieldQuery = new FieldQuery( query, reader, true, false );\n    String fragment = highlighter.getBestFragment( fieldQuery, reader, 0, \"text\", 100 );\n    assertEquals( \"junk junk junk junk junk junk junk junk <b>highlight words together</b> junk junk junk junk junk junk junk junk\", fragment );\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testBoostedPhraseHighlightTest().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testBoostedPhraseHighlightTest().mjava","sourceNew":"  public void testBoostedPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter( dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer( random() ) ) );\n    Document doc = new Document();\n    FieldType type = new FieldType( TextField.TYPE_STORED  );\n    type.setStoreTermVectorOffsets( true );\n    type.setStoreTermVectorPositions( true );\n    type.setStoreTermVectors( true );\n    type.freeze();\n    StringBuilder text = new StringBuilder();\n    text.append(\"words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    text.append(\"highlight words together \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    doc.add( new Field( \"text\", text.toString().trim(), type ) );\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n\n    // This mimics what some query parsers do to <highlight words together>\n    BooleanQuery terms = new BooleanQuery();\n    terms.add( clause( \"text\", \"highlight\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"words\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"together\" ), Occur.MUST );\n    // This mimics what some query parsers do to <\"highlight words together\">\n    BooleanQuery phrase = new BooleanQuery();\n    phrase.add( clause( \"text\", \"highlight\", \"words\", \"together\" ), Occur.MUST );\n    phrase.setBoost( 100 );\n    // Now combine those results in a boolean query which should pull the phrases to the front of the list of fragments \n    BooleanQuery query = new BooleanQuery();\n    query.add( phrase, Occur.MUST );\n    query.add( phrase, Occur.SHOULD );\n    FieldQuery fieldQuery = new FieldQuery( query, reader, true, false );\n    String fragment = highlighter.getBestFragment( fieldQuery, reader, 0, \"text\", 100 );\n    assertEquals( \"junk junk junk junk junk junk junk junk <b>highlight words together</b> junk junk junk junk junk junk junk junk\", fragment );\n\n    reader.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoostedPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter( dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer( random() ) ) );\n    Document doc = new Document();\n    FieldType type = new FieldType( TextField.TYPE_STORED  );\n    type.setStoreTermVectorOffsets( true );\n    type.setStoreTermVectorPositions( true );\n    type.setStoreTermVectors( true );\n    type.freeze();\n    StringBuilder text = new StringBuilder();\n    text.append(\"words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    text.append(\"highlight words together \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    doc.add( new Field( \"text\", text.toString().trim(), type ) );\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n\n    // This mimics what some query parsers do to <highlight words together>\n    BooleanQuery terms = new BooleanQuery();\n    terms.add( clause( \"text\", \"highlight\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"words\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"together\" ), Occur.MUST );\n    // This mimics what some query parsers do to <\"highlight words together\">\n    BooleanQuery phrase = new BooleanQuery();\n    phrase.add( clause( \"text\", \"highlight\", \"words\", \"together\" ), Occur.MUST );\n    phrase.setBoost( 100 );\n    // Now combine those results in a boolean query which should pull the phrases to the front of the list of fragments \n    BooleanQuery query = new BooleanQuery();\n    query.add( phrase, Occur.MUST );\n    query.add( phrase, Occur.SHOULD );\n    FieldQuery fieldQuery = new FieldQuery( query, reader, true, false );\n    String fragment = highlighter.getBestFragment( fieldQuery, reader, 0, \"text\", 100 );\n    assertEquals( \"junk junk junk junk junk junk junk junk <b>highlight words together</b> junk junk junk junk junk junk junk junk\", fragment );\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testBoostedPhraseHighlightTest().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testBoostedPhraseHighlightTest().mjava","sourceNew":"  public void testBoostedPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter( dir, newIndexWriterConfig(new MockAnalyzer( random() ) ) );\n    Document doc = new Document();\n    FieldType type = new FieldType( TextField.TYPE_STORED  );\n    type.setStoreTermVectorOffsets( true );\n    type.setStoreTermVectorPositions( true );\n    type.setStoreTermVectors( true );\n    type.freeze();\n    StringBuilder text = new StringBuilder();\n    text.append(\"words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    text.append(\"highlight words together \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    doc.add( new Field( \"text\", text.toString().trim(), type ) );\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n\n    // This mimics what some query parsers do to <highlight words together>\n    BooleanQuery terms = new BooleanQuery();\n    terms.add( clause( \"text\", \"highlight\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"words\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"together\" ), Occur.MUST );\n    // This mimics what some query parsers do to <\"highlight words together\">\n    BooleanQuery phrase = new BooleanQuery();\n    phrase.add( clause( \"text\", \"highlight\", \"words\", \"together\" ), Occur.MUST );\n    phrase.setBoost( 100 );\n    // Now combine those results in a boolean query which should pull the phrases to the front of the list of fragments \n    BooleanQuery query = new BooleanQuery();\n    query.add( phrase, Occur.MUST );\n    query.add( phrase, Occur.SHOULD );\n    FieldQuery fieldQuery = new FieldQuery( query, reader, true, false );\n    String fragment = highlighter.getBestFragment( fieldQuery, reader, 0, \"text\", 100 );\n    assertEquals( \"junk junk junk junk junk junk junk junk <b>highlight words together</b> junk junk junk junk junk junk junk junk\", fragment );\n\n    reader.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoostedPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter( dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer( random() ) ) );\n    Document doc = new Document();\n    FieldType type = new FieldType( TextField.TYPE_STORED  );\n    type.setStoreTermVectorOffsets( true );\n    type.setStoreTermVectorPositions( true );\n    type.setStoreTermVectors( true );\n    type.freeze();\n    StringBuilder text = new StringBuilder();\n    text.append(\"words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    text.append(\"highlight words together \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    doc.add( new Field( \"text\", text.toString().trim(), type ) );\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n\n    // This mimics what some query parsers do to <highlight words together>\n    BooleanQuery terms = new BooleanQuery();\n    terms.add( clause( \"text\", \"highlight\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"words\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"together\" ), Occur.MUST );\n    // This mimics what some query parsers do to <\"highlight words together\">\n    BooleanQuery phrase = new BooleanQuery();\n    phrase.add( clause( \"text\", \"highlight\", \"words\", \"together\" ), Occur.MUST );\n    phrase.setBoost( 100 );\n    // Now combine those results in a boolean query which should pull the phrases to the front of the list of fragments \n    BooleanQuery query = new BooleanQuery();\n    query.add( phrase, Occur.MUST );\n    query.add( phrase, Occur.SHOULD );\n    FieldQuery fieldQuery = new FieldQuery( query, reader, true, false );\n    String fragment = highlighter.getBestFragment( fieldQuery, reader, 0, \"text\", 100 );\n    assertEquals( \"junk junk junk junk junk junk junk junk <b>highlight words together</b> junk junk junk junk junk junk junk junk\", fragment );\n\n    reader.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testBoostedPhraseHighlightTest().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testBoostedPhraseHighlightTest().mjava","sourceNew":"  public void testBoostedPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter( dir, newIndexWriterConfig(new MockAnalyzer( random() ) ) );\n    Document doc = new Document();\n    FieldType type = new FieldType( TextField.TYPE_STORED  );\n    type.setStoreTermVectorOffsets( true );\n    type.setStoreTermVectorPositions( true );\n    type.setStoreTermVectors( true );\n    type.freeze();\n    StringBuilder text = new StringBuilder();\n    text.append(\"words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    text.append(\"highlight words together \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    doc.add( new Field( \"text\", text.toString().trim(), type ) );\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n\n    // This mimics what some query parsers do to <highlight words together>\n    BooleanQuery terms = new BooleanQuery();\n    terms.add( clause( \"text\", \"highlight\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"words\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"together\" ), Occur.MUST );\n    // This mimics what some query parsers do to <\"highlight words together\">\n    BooleanQuery phrase = new BooleanQuery();\n    phrase.add( clause( \"text\", \"highlight\", \"words\", \"together\" ), Occur.MUST );\n    phrase.setBoost( 100 );\n    // Now combine those results in a boolean query which should pull the phrases to the front of the list of fragments \n    BooleanQuery query = new BooleanQuery();\n    query.add( phrase, Occur.MUST );\n    query.add( phrase, Occur.SHOULD );\n    FieldQuery fieldQuery = new FieldQuery( query, reader, true, false );\n    String fragment = highlighter.getBestFragment( fieldQuery, reader, 0, \"text\", 100 );\n    assertEquals( \"junk junk junk junk junk junk junk junk <b>highlight words together</b> junk junk junk junk junk junk junk junk\", fragment );\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoostedPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter( dir, newIndexWriterConfig(new MockAnalyzer( random() ) ) );\n    Document doc = new Document();\n    FieldType type = new FieldType( TextField.TYPE_STORED  );\n    type.setStoreTermVectorOffsets( true );\n    type.setStoreTermVectorPositions( true );\n    type.setStoreTermVectors( true );\n    type.freeze();\n    StringBuilder text = new StringBuilder();\n    text.append(\"words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    text.append(\"highlight words together \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    doc.add( new Field( \"text\", text.toString().trim(), type ) );\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n\n    // This mimics what some query parsers do to <highlight words together>\n    BooleanQuery terms = new BooleanQuery();\n    terms.add( clause( \"text\", \"highlight\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"words\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"together\" ), Occur.MUST );\n    // This mimics what some query parsers do to <\"highlight words together\">\n    BooleanQuery phrase = new BooleanQuery();\n    phrase.add( clause( \"text\", \"highlight\", \"words\", \"together\" ), Occur.MUST );\n    phrase.setBoost( 100 );\n    // Now combine those results in a boolean query which should pull the phrases to the front of the list of fragments \n    BooleanQuery query = new BooleanQuery();\n    query.add( phrase, Occur.MUST );\n    query.add( phrase, Occur.SHOULD );\n    FieldQuery fieldQuery = new FieldQuery( query, reader, true, false );\n    String fragment = highlighter.getBestFragment( fieldQuery, reader, 0, \"text\", 100 );\n    assertEquals( \"junk junk junk junk junk junk junk junk <b>highlight words together</b> junk junk junk junk junk junk junk junk\", fragment );\n\n    reader.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testBoostedPhraseHighlightTest().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testBoostedPhraseHighlightTest().mjava","sourceNew":"  public void testBoostedPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter( dir, newIndexWriterConfig(new MockAnalyzer( random() ) ) );\n    Document doc = new Document();\n    FieldType type = new FieldType( TextField.TYPE_STORED  );\n    type.setStoreTermVectorOffsets( true );\n    type.setStoreTermVectorPositions( true );\n    type.setStoreTermVectors( true );\n    type.freeze();\n    StringBuilder text = new StringBuilder();\n    text.append(\"words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    text.append(\"highlight words together \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    doc.add( new Field( \"text\", text.toString().trim(), type ) );\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n\n    // This mimics what some query parsers do to <highlight words together>\n    BooleanQuery.Builder terms = new BooleanQuery.Builder();\n    terms.add( clause( \"text\", \"highlight\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"words\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"together\" ), Occur.MUST );\n    // This mimics what some query parsers do to <\"highlight words together\">\n    BooleanQuery.Builder phraseB = new BooleanQuery.Builder();\n    phraseB.add( clause( \"text\", \"highlight\", \"words\", \"together\" ), Occur.MUST );\n    Query phrase = phraseB.build();\n    phrase.setBoost( 100 );\n    // Now combine those results in a boolean query which should pull the phrases to the front of the list of fragments \n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add( phrase, Occur.MUST );\n    query.add( phrase, Occur.SHOULD );\n    FieldQuery fieldQuery = new FieldQuery( query.build(), reader, true, false );\n    String fragment = highlighter.getBestFragment( fieldQuery, reader, 0, \"text\", 100 );\n    assertEquals( \"junk junk junk junk junk junk junk junk <b>highlight words together</b> junk junk junk junk junk junk junk junk\", fragment );\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoostedPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter( dir, newIndexWriterConfig(new MockAnalyzer( random() ) ) );\n    Document doc = new Document();\n    FieldType type = new FieldType( TextField.TYPE_STORED  );\n    type.setStoreTermVectorOffsets( true );\n    type.setStoreTermVectorPositions( true );\n    type.setStoreTermVectors( true );\n    type.freeze();\n    StringBuilder text = new StringBuilder();\n    text.append(\"words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    text.append(\"highlight words together \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    doc.add( new Field( \"text\", text.toString().trim(), type ) );\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n\n    // This mimics what some query parsers do to <highlight words together>\n    BooleanQuery terms = new BooleanQuery();\n    terms.add( clause( \"text\", \"highlight\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"words\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"together\" ), Occur.MUST );\n    // This mimics what some query parsers do to <\"highlight words together\">\n    BooleanQuery phrase = new BooleanQuery();\n    phrase.add( clause( \"text\", \"highlight\", \"words\", \"together\" ), Occur.MUST );\n    phrase.setBoost( 100 );\n    // Now combine those results in a boolean query which should pull the phrases to the front of the list of fragments \n    BooleanQuery query = new BooleanQuery();\n    query.add( phrase, Occur.MUST );\n    query.add( phrase, Occur.SHOULD );\n    FieldQuery fieldQuery = new FieldQuery( query, reader, true, false );\n    String fragment = highlighter.getBestFragment( fieldQuery, reader, 0, \"text\", 100 );\n    assertEquals( \"junk junk junk junk junk junk junk junk <b>highlight words together</b> junk junk junk junk junk junk junk junk\", fragment );\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testBoostedPhraseHighlightTest().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testBoostedPhraseHighlightTest().mjava","sourceNew":"  public void testBoostedPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter( dir, newIndexWriterConfig(new MockAnalyzer( random() ) ) );\n    Document doc = new Document();\n    FieldType type = new FieldType( TextField.TYPE_STORED  );\n    type.setStoreTermVectorOffsets( true );\n    type.setStoreTermVectorPositions( true );\n    type.setStoreTermVectors( true );\n    type.freeze();\n    StringBuilder text = new StringBuilder();\n    text.append(\"words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    text.append(\"highlight words together \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    doc.add( new Field( \"text\", text.toString().trim(), type ) );\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n\n    // This mimics what some query parsers do to <highlight words together>\n    BooleanQuery.Builder terms = new BooleanQuery.Builder();\n    terms.add( clause( \"text\", \"highlight\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"words\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"together\" ), Occur.MUST );\n    // This mimics what some query parsers do to <\"highlight words together\">\n    BooleanQuery.Builder phraseB = new BooleanQuery.Builder();\n    phraseB.add( clause( \"text\", \"highlight\", \"words\", \"together\" ), Occur.MUST );\n    Query phrase = phraseB.build();\n    phrase = new BoostQuery(phrase, 100f);\n    // Now combine those results in a boolean query which should pull the phrases to the front of the list of fragments \n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add( phrase, Occur.MUST );\n    query.add( phrase, Occur.SHOULD );\n    FieldQuery fieldQuery = new FieldQuery( query.build(), reader, true, false );\n    String fragment = highlighter.getBestFragment( fieldQuery, reader, 0, \"text\", 100 );\n    assertEquals( \"junk junk junk junk junk junk junk junk <b>highlight words together</b> junk junk junk junk junk junk junk junk\", fragment );\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoostedPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter( dir, newIndexWriterConfig(new MockAnalyzer( random() ) ) );\n    Document doc = new Document();\n    FieldType type = new FieldType( TextField.TYPE_STORED  );\n    type.setStoreTermVectorOffsets( true );\n    type.setStoreTermVectorPositions( true );\n    type.setStoreTermVectors( true );\n    type.freeze();\n    StringBuilder text = new StringBuilder();\n    text.append(\"words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    text.append(\"highlight words together \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    doc.add( new Field( \"text\", text.toString().trim(), type ) );\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n\n    // This mimics what some query parsers do to <highlight words together>\n    BooleanQuery.Builder terms = new BooleanQuery.Builder();\n    terms.add( clause( \"text\", \"highlight\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"words\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"together\" ), Occur.MUST );\n    // This mimics what some query parsers do to <\"highlight words together\">\n    BooleanQuery.Builder phraseB = new BooleanQuery.Builder();\n    phraseB.add( clause( \"text\", \"highlight\", \"words\", \"together\" ), Occur.MUST );\n    Query phrase = phraseB.build();\n    phrase.setBoost( 100 );\n    // Now combine those results in a boolean query which should pull the phrases to the front of the list of fragments \n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add( phrase, Occur.MUST );\n    query.add( phrase, Occur.SHOULD );\n    FieldQuery fieldQuery = new FieldQuery( query.build(), reader, true, false );\n    String fragment = highlighter.getBestFragment( fieldQuery, reader, 0, \"text\", 100 );\n    assertEquals( \"junk junk junk junk junk junk junk junk <b>highlight words together</b> junk junk junk junk junk junk junk junk\", fragment );\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testBoostedPhraseHighlightTest().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testBoostedPhraseHighlightTest().mjava","sourceNew":"  public void testBoostedPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter( dir, newIndexWriterConfig(new MockAnalyzer( random() ) ) );\n    Document doc = new Document();\n    FieldType type = new FieldType( TextField.TYPE_STORED  );\n    type.setStoreTermVectorOffsets( true );\n    type.setStoreTermVectorPositions( true );\n    type.setStoreTermVectors( true );\n    type.freeze();\n    StringBuilder text = new StringBuilder();\n    text.append(\"words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    text.append(\"highlight words together \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    doc.add( new Field( \"text\", text.toString().trim(), type ) );\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer);\n\n    // This mimics what some query parsers do to <highlight words together>\n    BooleanQuery.Builder terms = new BooleanQuery.Builder();\n    terms.add( clause( \"text\", \"highlight\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"words\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"together\" ), Occur.MUST );\n    // This mimics what some query parsers do to <\"highlight words together\">\n    BooleanQuery.Builder phraseB = new BooleanQuery.Builder();\n    phraseB.add( clause( \"text\", \"highlight\", \"words\", \"together\" ), Occur.MUST );\n    Query phrase = phraseB.build();\n    phrase = new BoostQuery(phrase, 100f);\n    // Now combine those results in a boolean query which should pull the phrases to the front of the list of fragments \n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add( phrase, Occur.MUST );\n    query.add( phrase, Occur.SHOULD );\n    FieldQuery fieldQuery = new FieldQuery( query.build(), reader, true, false );\n    String fragment = highlighter.getBestFragment( fieldQuery, reader, 0, \"text\", 100 );\n    assertEquals( \"junk junk junk junk junk junk junk junk <b>highlight words together</b> junk junk junk junk junk junk junk junk\", fragment );\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoostedPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter( dir, newIndexWriterConfig(new MockAnalyzer( random() ) ) );\n    Document doc = new Document();\n    FieldType type = new FieldType( TextField.TYPE_STORED  );\n    type.setStoreTermVectorOffsets( true );\n    type.setStoreTermVectorPositions( true );\n    type.setStoreTermVectors( true );\n    type.freeze();\n    StringBuilder text = new StringBuilder();\n    text.append(\"words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    text.append(\"highlight words together \");\n    for ( int i = 0; i<10; i++ ) {\n      text.append(\"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk \");\n    }\n    doc.add( new Field( \"text\", text.toString().trim(), type ) );\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n\n    // This mimics what some query parsers do to <highlight words together>\n    BooleanQuery.Builder terms = new BooleanQuery.Builder();\n    terms.add( clause( \"text\", \"highlight\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"words\" ), Occur.MUST );\n    terms.add( clause( \"text\", \"together\" ), Occur.MUST );\n    // This mimics what some query parsers do to <\"highlight words together\">\n    BooleanQuery.Builder phraseB = new BooleanQuery.Builder();\n    phraseB.add( clause( \"text\", \"highlight\", \"words\", \"together\" ), Occur.MUST );\n    Query phrase = phraseB.build();\n    phrase = new BoostQuery(phrase, 100f);\n    // Now combine those results in a boolean query which should pull the phrases to the front of the list of fragments \n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add( phrase, Occur.MUST );\n    query.add( phrase, Occur.SHOULD );\n    FieldQuery fieldQuery = new FieldQuery( query.build(), reader, true, false );\n    String fragment = highlighter.getBestFragment( fieldQuery, reader, 0, \"text\", 100 );\n    assertEquals( \"junk junk junk junk junk junk junk junk <b>highlight words together</b> junk junk junk junk junk junk junk junk\", fragment );\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"2a1862266772deb28cdcb7d996b64d2177022687":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["94221e4190ec47a1ec4f0bd8f99b3648af295a06"],"94221e4190ec47a1ec4f0bd8f99b3648af295a06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a1862266772deb28cdcb7d996b64d2177022687"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"2a1862266772deb28cdcb7d996b64d2177022687":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["94221e4190ec47a1ec4f0bd8f99b3648af295a06"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["2a1862266772deb28cdcb7d996b64d2177022687"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"94221e4190ec47a1ec4f0bd8f99b3648af295a06":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}