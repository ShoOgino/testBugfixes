{"path":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String,FacetRangeMethod).mjava","commits":[{"id":"e135e47842b3fd6a4797b7e4787241b06817efa2","date":1429817254,"type":1,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String,FacetRangeMethod).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String).mjava","sourceNew":"  private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName, final FacetRangeMethod method) {\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    String start = \"0.0\";\n    String gap = (new Double( (double)Float.MAX_VALUE )).toString();\n    String end = (new Double( ((double)Float.MAX_VALUE) * 3D )).toString();\n    String mid = (new Double( ((double)Float.MAX_VALUE) * 2D )).toString();\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"id:[30 TO 60]\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", start\n                ,\"facet.range.end\",   end\n                ,\"facet.range.gap\",   gap\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='\"+start+\"'][.='6'  ]\"\n            ,pre+\"/int[@name='\"+mid+\"'][.='0'  ]\"\n            //\n            ,meta+\"/double[@name='end' ][.='\"+end+\"']\"\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n  }\n\n","sourceOld":"  private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName) {\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    String start = \"0.0\";\n    String gap = (new Double( (double)Float.MAX_VALUE )).toString();\n    String end = (new Double( ((double)Float.MAX_VALUE) * 3D )).toString();\n    String mid = (new Double( ((double)Float.MAX_VALUE) * 2D )).toString();\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"id:[30 TO 60]\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", start\n                ,\"facet.range.end\",   end\n                ,\"facet.range.gap\",   gap\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='\"+start+\"'][.='6'  ]\"\n            ,pre+\"/int[@name='\"+mid+\"'][.='0'  ]\"\n            //\n            ,meta+\"/double[@name='end' ][.='\"+end+\"']\"\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String,FacetRangeMethod).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String,FacetRangeMethod).mjava","sourceNew":"  private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName, final FacetRangeMethod method) {\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    String start = \"0.0\";\n    String gap = (new Double( (double)Float.MAX_VALUE )).toString();\n    String end = (new Double( ((double)Float.MAX_VALUE) * 3D )).toString();\n    String mid = (new Double( ((double)Float.MAX_VALUE) * 2D )).toString();\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"id_i1:[30 TO 60]\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", start\n                ,\"facet.range.end\",   end\n                ,\"facet.range.gap\",   gap\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='\"+start+\"'][.='6'  ]\"\n            ,pre+\"/int[@name='\"+mid+\"'][.='0'  ]\"\n            //\n            ,meta+\"/double[@name='end' ][.='\"+end+\"']\"\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n  }\n\n","sourceOld":"  private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName, final FacetRangeMethod method) {\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    String start = \"0.0\";\n    String gap = (new Double( (double)Float.MAX_VALUE )).toString();\n    String end = (new Double( ((double)Float.MAX_VALUE) * 3D )).toString();\n    String mid = (new Double( ((double)Float.MAX_VALUE) * 2D )).toString();\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"id:[30 TO 60]\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", start\n                ,\"facet.range.end\",   end\n                ,\"facet.range.gap\",   gap\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='\"+start+\"'][.='6'  ]\"\n            ,pre+\"/int[@name='\"+mid+\"'][.='0'  ]\"\n            //\n            ,meta+\"/double[@name='end' ][.='\"+end+\"']\"\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String,FacetRangeMethod).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String,FacetRangeMethod).mjava","sourceNew":"  private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName, final FacetRangeMethod method) {\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    String start = \"0.0\";\n    String gap = (new Double( (double)Float.MAX_VALUE )).toString();\n    String end = (new Double( ((double)Float.MAX_VALUE) * 3D )).toString();\n    String mid = (new Double( ((double)Float.MAX_VALUE) * 2D )).toString();\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"id_i1:[30 TO 60]\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", start\n                ,\"facet.range.end\",   end\n                ,\"facet.range.gap\",   gap\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='\"+start+\"'][.='6'  ]\"\n            ,pre+\"/int[@name='\"+mid+\"'][.='0'  ]\"\n            //\n            ,meta+\"/double[@name='end' ][.='\"+end+\"']\"\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n  }\n\n","sourceOld":"  private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName, final FacetRangeMethod method) {\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    String start = \"0.0\";\n    String gap = (new Double( (double)Float.MAX_VALUE )).toString();\n    String end = (new Double( ((double)Float.MAX_VALUE) * 3D )).toString();\n    String mid = (new Double( ((double)Float.MAX_VALUE) * 2D )).toString();\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"id:[30 TO 60]\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", start\n                ,\"facet.range.end\",   end\n                ,\"facet.range.gap\",   gap\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='\"+start+\"'][.='6'  ]\"\n            ,pre+\"/int[@name='\"+mid+\"'][.='0'  ]\"\n            //\n            ,meta+\"/double[@name='end' ][.='\"+end+\"']\"\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String,FacetRangeMethod).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String,FacetRangeMethod).mjava","sourceNew":"  private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName, final FacetRangeMethod method) {\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    String start = \"0.0\";\n    String gap = (new Double( (double)Float.MAX_VALUE )).toString();\n    String end = (new Double( ((double)Float.MAX_VALUE) * 3D )).toString();\n    String mid = (new Double( ((double)Float.MAX_VALUE) * 2D )).toString();\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"id_i1:[30 TO 60]\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", start\n                ,\"facet.range.end\",   end\n                ,\"facet.range.gap\",   gap\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='\"+start+\"'][.='6'  ]\"\n            ,pre+\"/int[@name='\"+mid+\"'][.='0'  ]\"\n            //\n            ,meta+\"/double[@name='end' ][.='\"+end+\"']\"\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n  }\n\n","sourceOld":"  private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName, final FacetRangeMethod method) {\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    String start = \"0.0\";\n    String gap = (new Double( (double)Float.MAX_VALUE )).toString();\n    String end = (new Double( ((double)Float.MAX_VALUE) * 3D )).toString();\n    String mid = (new Double( ((double)Float.MAX_VALUE) * 2D )).toString();\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"id:[30 TO 60]\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", start\n                ,\"facet.range.end\",   end\n                ,\"facet.range.gap\",   gap\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='\"+start+\"'][.='6'  ]\"\n            ,pre+\"/int[@name='\"+mid+\"'][.='0'  ]\"\n            //\n            ,meta+\"/double[@name='end' ][.='\"+end+\"']\"\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String,FacetRangeMethod).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String,FacetRangeMethod).mjava","sourceNew":"  private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName, final FacetRangeMethod method) {\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    String start = \"0.0\";\n    String gap = Double.toString(Float.MAX_VALUE );\n    String end = Double.toString(((double) Float.MAX_VALUE) * 3D);\n    String mid = Double.toString(((double) Float.MAX_VALUE) * 2D);\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"id_i1:[30 TO 60]\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", start\n                ,\"facet.range.end\",   end\n                ,\"facet.range.gap\",   gap\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='\"+start+\"'][.='6'  ]\"\n            ,pre+\"/int[@name='\"+mid+\"'][.='0'  ]\"\n            //\n            ,meta+\"/double[@name='end' ][.='\"+end+\"']\"\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n  }\n\n","sourceOld":"  private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName, final FacetRangeMethod method) {\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    String start = \"0.0\";\n    String gap = (new Double( (double)Float.MAX_VALUE )).toString();\n    String end = (new Double( ((double)Float.MAX_VALUE) * 3D )).toString();\n    String mid = (new Double( ((double)Float.MAX_VALUE) * 2D )).toString();\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"id_i1:[30 TO 60]\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", start\n                ,\"facet.range.end\",   end\n                ,\"facet.range.gap\",   gap\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='\"+start+\"'][.='6'  ]\"\n            ,pre+\"/int[@name='\"+mid+\"'][.='0'  ]\"\n            //\n            ,meta+\"/double[@name='end' ][.='\"+end+\"']\"\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String,FacetRangeMethod).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String,FacetRangeMethod).mjava","sourceNew":"  private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName, final FacetRangeMethod method) {\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    String start = \"0.0\";\n    String gap = Double.toString(Float.MAX_VALUE );\n    String end = Double.toString(((double) Float.MAX_VALUE) * 3D);\n    String mid = Double.toString(((double) Float.MAX_VALUE) * 2D);\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"id_i1:[30 TO 60]\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", start\n                ,\"facet.range.end\",   end\n                ,\"facet.range.gap\",   gap\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='\"+start+\"'][.='6'  ]\"\n            ,pre+\"/int[@name='\"+mid+\"'][.='0'  ]\"\n            //\n            ,meta+\"/double[@name='end' ][.='\"+end+\"']\"\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n  }\n\n","sourceOld":"  private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName, final FacetRangeMethod method) {\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    String start = \"0.0\";\n    String gap = (new Double( (double)Float.MAX_VALUE )).toString();\n    String end = (new Double( ((double)Float.MAX_VALUE) * 3D )).toString();\n    String mid = (new Double( ((double)Float.MAX_VALUE) * 2D )).toString();\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"id_i1:[30 TO 60]\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", start\n                ,\"facet.range.end\",   end\n                ,\"facet.range.gap\",   gap\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='\"+start+\"'][.='6'  ]\"\n            ,pre+\"/int[@name='\"+mid+\"'][.='0'  ]\"\n            //\n            ,meta+\"/double[@name='end' ][.='\"+end+\"']\"\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String,FacetRangeMethod).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestNumericRangeFacetsDoubleOverflow(String,FacetRangeMethod).mjava","sourceNew":"  private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName, final FacetRangeMethod method) {\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    String start = \"0.0\";\n    String gap = Double.toString(Float.MAX_VALUE );\n    String end = Double.toString(((double) Float.MAX_VALUE) * 3D);\n    String mid = Double.toString(((double) Float.MAX_VALUE) * 2D);\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"id_i1:[30 TO 60]\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", start\n                ,\"facet.range.end\",   end\n                ,\"facet.range.gap\",   gap\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='\"+start+\"'][.='6'  ]\"\n            ,pre+\"/int[@name='\"+mid+\"'][.='0'  ]\"\n            //\n            ,meta+\"/double[@name='end' ][.='\"+end+\"']\"\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n  }\n\n","sourceOld":"  private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName, final FacetRangeMethod method) {\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    String start = \"0.0\";\n    String gap = (new Double( (double)Float.MAX_VALUE )).toString();\n    String end = (new Double( ((double)Float.MAX_VALUE) * 3D )).toString();\n    String mid = (new Double( ((double)Float.MAX_VALUE) * 2D )).toString();\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"id_i1:[30 TO 60]\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", start\n                ,\"facet.range.end\",   end\n                ,\"facet.range.gap\",   gap\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='\"+start+\"'][.='6'  ]\"\n            ,pre+\"/int[@name='\"+mid+\"'][.='0'  ]\"\n            //\n            ,meta+\"/double[@name='end' ][.='\"+end+\"']\"\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e135e47842b3fd6a4797b7e4787241b06817efa2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["28288370235ed02234a64753cdbf0c6ec096304a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["28288370235ed02234a64753cdbf0c6ec096304a","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["e135e47842b3fd6a4797b7e4787241b06817efa2"],"28288370235ed02234a64753cdbf0c6ec096304a":["e135e47842b3fd6a4797b7e4787241b06817efa2","a71f63026529f3c1f03cfdd664910873ab2369ae"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["28288370235ed02234a64753cdbf0c6ec096304a","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e135e47842b3fd6a4797b7e4787241b06817efa2","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"e135e47842b3fd6a4797b7e4787241b06817efa2":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e135e47842b3fd6a4797b7e4787241b06817efa2"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}