{"path":"lucene/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type).mjava","commits":[{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,boolean,boolean,IndexOptions,ValueType).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean isIndexed, int number, boolean storeTermVector, \n            boolean storePositionWithTermVector,  boolean storeOffsetWithTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues) {\n    this.name = name;\n    this.isIndexed = isIndexed;\n    this.number = number;\n    this.docValues = docValues;\n    if (isIndexed) {\n      this.storeTermVector = storeTermVector;\n      this.storeOffsetWithTermVector = storeOffsetWithTermVector;\n      this.storePositionWithTermVector = storePositionWithTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storeOffsetWithTermVector = false;\n      this.storePositionWithTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    }\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !storePayloads;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean isIndexed, int number, boolean storeTermVector, \n            boolean storePositionWithTermVector,  boolean storeOffsetWithTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, ValueType docValues) {\n    this.name = name;\n    this.isIndexed = isIndexed;\n    this.number = number;\n    this.docValues = docValues;\n    if (isIndexed) {\n      this.storeTermVector = storeTermVector;\n      this.storeOffsetWithTermVector = storeOffsetWithTermVector;\n      this.storePositionWithTermVector = storePositionWithTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storeOffsetWithTermVector = false;\n      this.storePositionWithTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    }\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !storePayloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,boolean,boolean,IndexOptions,ValueType).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean isIndexed, int number, boolean storeTermVector, \n            boolean storePositionWithTermVector,  boolean storeOffsetWithTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues) {\n    this.name = name;\n    this.isIndexed = isIndexed;\n    this.number = number;\n    this.docValues = docValues;\n    if (isIndexed) {\n      this.storeTermVector = storeTermVector;\n      this.storeOffsetWithTermVector = storeOffsetWithTermVector;\n      this.storePositionWithTermVector = storePositionWithTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storeOffsetWithTermVector = false;\n      this.storePositionWithTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    }\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !storePayloads;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean isIndexed, int number, boolean storeTermVector, \n            boolean storePositionWithTermVector,  boolean storeOffsetWithTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, ValueType docValues) {\n    this.name = name;\n    this.isIndexed = isIndexed;\n    this.number = number;\n    this.docValues = docValues;\n    if (isIndexed) {\n      this.storeTermVector = storeTermVector;\n      this.storeOffsetWithTermVector = storeOffsetWithTermVector;\n      this.storePositionWithTermVector = storePositionWithTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storeOffsetWithTermVector = false;\n      this.storePositionWithTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    }\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !storePayloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean isIndexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues) {\n    this.name = name;\n    this.isIndexed = isIndexed;\n    this.number = number;\n    this.docValues = docValues;\n    if (isIndexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    }\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !storePayloads;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean isIndexed, int number, boolean storeTermVector, \n            boolean storePositionWithTermVector,  boolean storeOffsetWithTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues) {\n    this.name = name;\n    this.isIndexed = isIndexed;\n    this.number = number;\n    this.docValues = docValues;\n    if (isIndexed) {\n      this.storeTermVector = storeTermVector;\n      this.storeOffsetWithTermVector = storeOffsetWithTermVector;\n      this.storePositionWithTermVector = storePositionWithTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storeOffsetWithTermVector = false;\n      this.storePositionWithTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    }\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !storePayloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}