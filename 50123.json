{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#getOrdinal(FacetLabel).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#getOrdinal(FacetLabel).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#getOrdinal(CategoryPath).mjava","sourceNew":"  @Override\n  public int getOrdinal(FacetLabel label) {\n    if (label == null) {\n      return LabelToOrdinal.INVALID_ORDINAL;\n    }\n\n    int hash = CompactLabelToOrdinal.stringHashCode(label);\n    for (int i = 0; i < this.hashArrays.length; i++) {\n      int ord = getOrdinal(this.hashArrays[i], label, hash);\n      if (ord != COLLISION) {\n        return ord;\n      }\n    }\n\n    return this.collisionMap.get(label, hash);\n  }\n\n","sourceOld":"  @Override\n  public int getOrdinal(CategoryPath label) {\n    if (label == null) {\n      return LabelToOrdinal.INVALID_ORDINAL;\n    }\n\n    int hash = CompactLabelToOrdinal.stringHashCode(label);\n    for (int i = 0; i < this.hashArrays.length; i++) {\n      int ord = getOrdinal(this.hashArrays[i], label, hash);\n      if (ord != COLLISION) {\n        return ord;\n      }\n    }\n\n    return this.collisionMap.get(label, hash);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cad50ed6659649a0edef71b8cf56280b0bdadd7","date":1385496862,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/CompactLabelToOrdinal#getOrdinal(FacetLabel).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#getOrdinal(FacetLabel).mjava","sourceNew":"  @Override\n  public int getOrdinal(FacetLabel label) {\n    if (label == null) {\n      return LabelToOrdinal.INVALID_ORDINAL;\n    }\n\n    int hash = CompactLabelToOrdinal.stringHashCode(label);\n    for (int i = 0; i < this.hashArrays.length; i++) {\n      int ord = getOrdinal(this.hashArrays[i], label, hash);\n      if (ord != COLLISION) {\n        return ord;\n      }\n    }\n\n    return this.collisionMap.get(label, hash);\n  }\n\n","sourceOld":"  @Override\n  public int getOrdinal(FacetLabel label) {\n    if (label == null) {\n      return LabelToOrdinal.INVALID_ORDINAL;\n    }\n\n    int hash = CompactLabelToOrdinal.stringHashCode(label);\n    for (int i = 0; i < this.hashArrays.length; i++) {\n      int ord = getOrdinal(this.hashArrays[i], label, hash);\n      if (ord != COLLISION) {\n        return ord;\n      }\n    }\n\n    return this.collisionMap.get(label, hash);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["5cad50ed6659649a0edef71b8cf56280b0bdadd7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5cad50ed6659649a0edef71b8cf56280b0bdadd7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}