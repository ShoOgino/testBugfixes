{"path":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocsSkipping(int,DocsEnum,DocsEnum).mjava","commits":[{"id":"0445bcd8433e331f296f5502fc089b336cbac3a6","date":1322630375,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocsSkipping(int,DocsEnum,DocsEnum).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * checks advancing docs\n   */\n  public void assertDocsSkipping(int docFreq, DocsEnum leftDocs, DocsEnum rightDocs) throws Exception {\n    int docid = -1;\n    int averageGap = leftReader.maxDoc() / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random.nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(info, docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random.nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(info, docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      assertEquals(info, leftDocs.freq(), rightDocs.freq());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocsSkipping(int,DocsEnum,DocsEnum,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocsSkipping(int,DocsEnum,DocsEnum).mjava","sourceNew":"  /**\n   * checks advancing docs\n   */\n  public void assertDocsSkipping(int docFreq, DocsEnum leftDocs, DocsEnum rightDocs, boolean hasFreqs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    int docid = -1;\n    int averageGap = leftReader.maxDoc() / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random.nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(info, docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random.nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(info, docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      if (hasFreqs) {\n        assertEquals(info, leftDocs.freq(), rightDocs.freq());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks advancing docs\n   */\n  public void assertDocsSkipping(int docFreq, DocsEnum leftDocs, DocsEnum rightDocs) throws Exception {\n    int docid = -1;\n    int averageGap = leftReader.maxDoc() / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random.nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(info, docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random.nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(info, docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      assertEquals(info, leftDocs.freq(), rightDocs.freq());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocsSkipping(int,DocsEnum,DocsEnum,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocsSkipping(int,DocsEnum,DocsEnum).mjava","sourceNew":"  /**\n   * checks advancing docs\n   */\n  public void assertDocsSkipping(int docFreq, DocsEnum leftDocs, DocsEnum rightDocs, boolean hasFreqs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    int docid = -1;\n    int averageGap = leftReader.maxDoc() / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random.nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(info, docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random.nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(info, docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      if (hasFreqs) {\n        assertEquals(info, leftDocs.freq(), rightDocs.freq());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks advancing docs\n   */\n  public void assertDocsSkipping(int docFreq, DocsEnum leftDocs, DocsEnum rightDocs) throws Exception {\n    int docid = -1;\n    int averageGap = leftReader.maxDoc() / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random.nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(info, docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random.nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(info, docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      assertEquals(info, leftDocs.freq(), rightDocs.freq());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0445bcd8433e331f296f5502fc089b336cbac3a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["0445bcd8433e331f296f5502fc089b336cbac3a6","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["872cff1d3a554e0cd64014cd97f88d3002b0f491"]},"commit2Childs":{"0445bcd8433e331f296f5502fc089b336cbac3a6":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}