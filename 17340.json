{"path":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#ConcurrentLFUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V],boolean).mjava","commits":[{"id":"3a2591037a85ef083e6588e0b846a5a34ff9b5a3","date":1326403130,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#ConcurrentLFUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V],boolean).mjava","pathOld":"/dev/null","sourceNew":"  public ConcurrentLFUCache(int upperWaterMark, final int lowerWaterMark, int acceptableSize,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K, V> evictionListener, boolean timeDecay) {\n    if (upperWaterMark < 1) throw new IllegalArgumentException(\"upperWaterMark must be > 0\");\n    if (lowerWaterMark >= upperWaterMark)\n      throw new IllegalArgumentException(\"lowerWaterMark must be  < upperWaterMark\");\n    map = new ConcurrentHashMap<Object, CacheEntry<K, V>>(initialSize);\n    newThreadForCleanup = runNewThreadForCleanup;\n    this.upperWaterMark = upperWaterMark;\n    this.lowerWaterMark = lowerWaterMark;\n    this.acceptableWaterMark = acceptableSize;\n    this.evictionListener = evictionListener;\n    this.timeDecay = timeDecay;\n    if (runCleanupThread) {\n      cleanupThread = new CleanupThread(this);\n      cleanupThread.start();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#ConcurrentLFUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#ConcurrentLFUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V],boolean).mjava","sourceNew":"  public ConcurrentLFUCache(int upperWaterMark, final int lowerWaterMark, int acceptableSize,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K, V> evictionListener, boolean timeDecay) {\n    if (upperWaterMark < 1) throw new IllegalArgumentException(\"upperWaterMark must be > 0\");\n    if (lowerWaterMark >= upperWaterMark)\n      throw new IllegalArgumentException(\"lowerWaterMark must be  < upperWaterMark\");\n    map = new ConcurrentHashMap<>(initialSize);\n    newThreadForCleanup = runNewThreadForCleanup;\n    this.upperWaterMark = upperWaterMark;\n    this.lowerWaterMark = lowerWaterMark;\n    this.acceptableWaterMark = acceptableSize;\n    this.evictionListener = evictionListener;\n    this.timeDecay = timeDecay;\n    if (runCleanupThread) {\n      cleanupThread = new CleanupThread(this);\n      cleanupThread.start();\n    }\n  }\n\n","sourceOld":"  public ConcurrentLFUCache(int upperWaterMark, final int lowerWaterMark, int acceptableSize,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K, V> evictionListener, boolean timeDecay) {\n    if (upperWaterMark < 1) throw new IllegalArgumentException(\"upperWaterMark must be > 0\");\n    if (lowerWaterMark >= upperWaterMark)\n      throw new IllegalArgumentException(\"lowerWaterMark must be  < upperWaterMark\");\n    map = new ConcurrentHashMap<Object, CacheEntry<K, V>>(initialSize);\n    newThreadForCleanup = runNewThreadForCleanup;\n    this.upperWaterMark = upperWaterMark;\n    this.lowerWaterMark = lowerWaterMark;\n    this.acceptableWaterMark = acceptableSize;\n    this.evictionListener = evictionListener;\n    this.timeDecay = timeDecay;\n    if (runCleanupThread) {\n      cleanupThread = new CleanupThread(this);\n      cleanupThread.start();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce13e934d6cfdcc82d51e85de460cf9790e97566","date":1563877281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#ConcurrentLFUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#ConcurrentLFUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V],boolean).mjava","sourceNew":"  public ConcurrentLFUCache(int upperWaterMark, final int lowerWaterMark, int acceptableSize,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K, V> evictionListener, boolean timeDecay) {\n    setUpperWaterMark(upperWaterMark);\n    setLowerWaterMark(lowerWaterMark);\n    setAcceptableWaterMark(acceptableSize);\n    map = new ConcurrentHashMap<>(initialSize);\n    this.evictionListener = evictionListener;\n    setNewThreadForCleanup(runNewThreadForCleanup);\n    setTimeDecay(timeDecay);\n    setRunCleanupThread(runCleanupThread);\n  }\n\n","sourceOld":"  public ConcurrentLFUCache(int upperWaterMark, final int lowerWaterMark, int acceptableSize,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K, V> evictionListener, boolean timeDecay) {\n    if (upperWaterMark < 1) throw new IllegalArgumentException(\"upperWaterMark must be > 0\");\n    if (lowerWaterMark >= upperWaterMark)\n      throw new IllegalArgumentException(\"lowerWaterMark must be  < upperWaterMark\");\n    map = new ConcurrentHashMap<>(initialSize);\n    newThreadForCleanup = runNewThreadForCleanup;\n    this.upperWaterMark = upperWaterMark;\n    this.lowerWaterMark = lowerWaterMark;\n    this.acceptableWaterMark = acceptableSize;\n    this.evictionListener = evictionListener;\n    this.timeDecay = timeDecay;\n    if (runCleanupThread) {\n      cleanupThread = new CleanupThread(this);\n      cleanupThread.start();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83","date":1568645407,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#ConcurrentLFUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#ConcurrentLFUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V],boolean).mjava","sourceNew":"  public ConcurrentLFUCache(int upperWaterMark, final int lowerWaterMark, int acceptableSize,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K, V> evictionListener, boolean timeDecay) {\n    this(upperWaterMark, lowerWaterMark, acceptableSize, initialSize, runCleanupThread,\n        runNewThreadForCleanup, evictionListener, timeDecay, -1);\n  }\n\n","sourceOld":"  public ConcurrentLFUCache(int upperWaterMark, final int lowerWaterMark, int acceptableSize,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K, V> evictionListener, boolean timeDecay) {\n    setUpperWaterMark(upperWaterMark);\n    setLowerWaterMark(lowerWaterMark);\n    setAcceptableWaterMark(acceptableSize);\n    map = new ConcurrentHashMap<>(initialSize);\n    this.evictionListener = evictionListener;\n    setNewThreadForCleanup(runNewThreadForCleanup);\n    setTimeDecay(timeDecay);\n    setRunCleanupThread(runCleanupThread);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#ConcurrentLFUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V],boolean).mjava","sourceNew":null,"sourceOld":"  public ConcurrentLFUCache(int upperWaterMark, final int lowerWaterMark, int acceptableSize,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K, V> evictionListener, boolean timeDecay) {\n    this(upperWaterMark, lowerWaterMark, acceptableSize, initialSize, runCleanupThread,\n        runNewThreadForCleanup, evictionListener, timeDecay, -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a2591037a85ef083e6588e0b846a5a34ff9b5a3"],"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["ce13e934d6cfdcc82d51e85de460cf9790e97566"],"4d7d3943904804560937e6239effeebda0f920e4":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ce13e934d6cfdcc82d51e85de460cf9790e97566":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a2591037a85ef083e6588e0b846a5a34ff9b5a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ce13e934d6cfdcc82d51e85de460cf9790e97566"],"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["4d7d3943904804560937e6239effeebda0f920e4"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a2591037a85ef083e6588e0b846a5a34ff9b5a3"],"ce13e934d6cfdcc82d51e85de460cf9790e97566":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"3a2591037a85ef083e6588e0b846a5a34ff9b5a3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}