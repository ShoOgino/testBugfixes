{"path":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter.PriorityQueue#downHeap().mjava","commits":[{"id":"901b27c7f633ab98e138aafb0b9c3ba22aac6b28","date":1408052893,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter.PriorityQueue#downHeap().mjava","pathOld":"/dev/null","sourceNew":"    private final void downHeap() {\n      int i = 1;\n      T node = heap[i];          // save top node\n      int j = i << 1;            // find smaller child\n      int k = j + 1;\n      if (k <= size && lessThan(heap[k], heap[j])) {\n        j = k;\n      }\n      while (j <= size && lessThan(heap[j], node)) {\n        heap[i] = heap[j];       // shift up child\n        i = j;\n        j = i << 1;\n        k = j + 1;\n        if (k <= size && lessThan(heap[k], heap[j])) {\n          j = k;\n        }\n      }\n      heap[i] = node;            // install saved node\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50f05d6b69cfaabd51b5d26cba4e3122f51fff83","date":1478603228,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SortingResponseWriter[ExportWriter].PriorityQueue#downHeap().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter.PriorityQueue#downHeap().mjava","sourceNew":"    private final void downHeap() {\n      int i = 1;\n      T node = heap[i];          // save top node\n      int j = i << 1;            // find smaller child\n      int k = j + 1;\n      if (k <= size && lessThan(heap[k], heap[j])) {\n        j = k;\n      }\n      while (j <= size && lessThan(heap[j], node)) {\n        heap[i] = heap[j];       // shift up child\n        i = j;\n        j = i << 1;\n        k = j + 1;\n        if (k <= size && lessThan(heap[k], heap[j])) {\n          j = k;\n        }\n      }\n      heap[i] = node;            // install saved node\n    }\n\n","sourceOld":"    private final void downHeap() {\n      int i = 1;\n      T node = heap[i];          // save top node\n      int j = i << 1;            // find smaller child\n      int k = j + 1;\n      if (k <= size && lessThan(heap[k], heap[j])) {\n        j = k;\n      }\n      while (j <= size && lessThan(heap[j], node)) {\n        heap[i] = heap[j];       // shift up child\n        i = j;\n        j = i << 1;\n        k = j + 1;\n        if (k <= size && lessThan(heap[k], heap[j])) {\n          j = k;\n        }\n      }\n      heap[i] = node;            // install saved node\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter.PriorityQueue#downHeap().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter.PriorityQueue#downHeap().mjava","sourceNew":"    private final void downHeap() {\n      int i = 1;\n      T node = heap[i];          // save top node\n      int j = i << 1;            // find smaller child\n      int k = j + 1;\n      if (k <= size && lessThan(heap[k], heap[j])) {\n        j = k;\n      }\n      while (j <= size && lessThan(heap[j], node)) {\n        heap[i] = heap[j];       // shift up child\n        i = j;\n        j = i << 1;\n        k = j + 1;\n        if (k <= size && lessThan(heap[k], heap[j])) {\n          j = k;\n        }\n      }\n      heap[i] = node;            // install saved node\n    }\n\n","sourceOld":"    private final void downHeap() {\n      int i = 1;\n      T node = heap[i];          // save top node\n      int j = i << 1;            // find smaller child\n      int k = j + 1;\n      if (k <= size && lessThan(heap[k], heap[j])) {\n        j = k;\n      }\n      while (j <= size && lessThan(heap[j], node)) {\n        heap[i] = heap[j];       // shift up child\n        i = j;\n        j = i << 1;\n        k = j + 1;\n        if (k <= size && lessThan(heap[k], heap[j])) {\n          j = k;\n        }\n      }\n      heap[i] = node;            // install saved node\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"50f05d6b69cfaabd51b5d26cba4e3122f51fff83":["901b27c7f633ab98e138aafb0b9c3ba22aac6b28"],"901b27c7f633ab98e138aafb0b9c3ba22aac6b28":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["901b27c7f633ab98e138aafb0b9c3ba22aac6b28","50f05d6b69cfaabd51b5d26cba4e3122f51fff83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83"]},"commit2Childs":{"50f05d6b69cfaabd51b5d26cba4e3122f51fff83":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"901b27c7f633ab98e138aafb0b9c3ba22aac6b28":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["901b27c7f633ab98e138aafb0b9c3ba22aac6b28"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}