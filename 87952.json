{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testComplexPolygonDegeneratedVector().mjava","commits":[{"id":"fe50ba7fa06b0e65ac399b16155e3f841fe89b3d","date":1522935235,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testComplexPolygonDegeneratedVector().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore\n  @Test\n  public void testComplexPolygonDegeneratedVector() {\n    List<GeoPoint> points = new ArrayList<>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.5, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.5, 0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.5, 0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE,0.5, -0.5));\n    final GeoPolygon polygon = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //Large polygon with test point in (0,0)\n    final GeoPolygon largePolygon = new GeoComplexPolygon(PlanetModel.SPHERE, Collections.singletonList(points), new GeoPoint(PlanetModel.SPHERE, 0.0, 0), true);\n    //Chooses Plane Z and succeed\n    final GeoPoint point1 = new GeoPoint(PlanetModel.SPHERE, 0, 1e-5);\n    assertTrue(polygon.isWithin(point1) == largePolygon.isWithin(point1));\n    //Numerically identical\n    final GeoPoint point2 = new GeoPoint(PlanetModel.SPHERE, 0, 1e-13);\n    assertTrue(polygon.isWithin(point2) == largePolygon.isWithin(point2));\n    //Fails here, chooses plane X\n    final GeoPoint point3 = new GeoPoint(PlanetModel.SPHERE, 0, 1e-6);\n    assertTrue(polygon.isWithin(point3) == largePolygon.isWithin(point3));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b69c4d16cfa7d88d9a2ae23fdd1790a8d412a1b6","date":1522950981,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testComplexPolygonDegeneratedVector().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testComplexPolygonDegeneratedVector().mjava","sourceNew":"  @Test\n  public void testComplexPolygonDegeneratedVector() {\n    List<GeoPoint> points = new ArrayList<>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.5, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.5, 0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.5, 0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE,0.5, -0.5));\n    final GeoPolygon polygon = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //Large polygon with test point in (0,0)\n    final GeoPolygon largePolygon = new GeoComplexPolygon(PlanetModel.SPHERE, Collections.singletonList(points), new GeoPoint(PlanetModel.SPHERE, 0.0, 0), true);\n    //Chooses Plane Z and succeed\n    final GeoPoint point1 = new GeoPoint(PlanetModel.SPHERE, 0, 1e-5);\n    assertTrue(polygon.isWithin(point1) == largePolygon.isWithin(point1));\n    //Numerically identical\n    final GeoPoint point2 = new GeoPoint(PlanetModel.SPHERE, 0, 1e-13);\n    assertTrue(polygon.isWithin(point2) == largePolygon.isWithin(point2));\n    //Fails here, chooses plane X\n    final GeoPoint point3 = new GeoPoint(PlanetModel.SPHERE, 0, 1e-6);\n    assertTrue(polygon.isWithin(point3) == largePolygon.isWithin(point3));\n  }\n\n","sourceOld":"  @Ignore\n  @Test\n  public void testComplexPolygonDegeneratedVector() {\n    List<GeoPoint> points = new ArrayList<>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.5, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.5, 0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.5, 0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE,0.5, -0.5));\n    final GeoPolygon polygon = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //Large polygon with test point in (0,0)\n    final GeoPolygon largePolygon = new GeoComplexPolygon(PlanetModel.SPHERE, Collections.singletonList(points), new GeoPoint(PlanetModel.SPHERE, 0.0, 0), true);\n    //Chooses Plane Z and succeed\n    final GeoPoint point1 = new GeoPoint(PlanetModel.SPHERE, 0, 1e-5);\n    assertTrue(polygon.isWithin(point1) == largePolygon.isWithin(point1));\n    //Numerically identical\n    final GeoPoint point2 = new GeoPoint(PlanetModel.SPHERE, 0, 1e-13);\n    assertTrue(polygon.isWithin(point2) == largePolygon.isWithin(point2));\n    //Fails here, chooses plane X\n    final GeoPoint point3 = new GeoPoint(PlanetModel.SPHERE, 0, 1e-6);\n    assertTrue(polygon.isWithin(point3) == largePolygon.isWithin(point3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b69c4d16cfa7d88d9a2ae23fdd1790a8d412a1b6":["fe50ba7fa06b0e65ac399b16155e3f841fe89b3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe50ba7fa06b0e65ac399b16155e3f841fe89b3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b69c4d16cfa7d88d9a2ae23fdd1790a8d412a1b6"]},"commit2Childs":{"b69c4d16cfa7d88d9a2ae23fdd1790a8d412a1b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe50ba7fa06b0e65ac399b16155e3f841fe89b3d"],"fe50ba7fa06b0e65ac399b16155e3f841fe89b3d":["b69c4d16cfa7d88d9a2ae23fdd1790a8d412a1b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}