{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue#peekTopN(int,Set[String],long).mjava","commits":[{"id":"2a282020d6c9a4ea32a359539e283e4771a2fda8","date":1440047542,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue#peekTopN(int,Set[String],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekTopN(int,Set[String],Long).mjava","sourceNew":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    TimerContext time = null;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (String headNode : getChildren(waitMillis)) {\n        if (topN.size() < n) {\n          try {\n            String id = dir + \"/\" + headNode;\n            if (excludeSet.contains(id)) continue;\n            QueueEvent queueEvent = new QueueEvent(id,\n                zookeeper.getData(dir + \"/\" + headNode, null, null, true), null);\n            topN.add(queueEvent);\n          } catch (KeeperException.NoNodeException e) {\n            // Another client removed the node first, try next\n          }\n        } else {\n          if (topN.size() >= 1) {\n            printQueueEventsListElementIds(topN);\n            return topN;\n          }\n        }\n      }\n\n      if (topN.size() > 0 ) {\n        printQueueEventsListElementIds(topN);\n        return topN;\n      }\n      return null;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, Long wait)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: \" + excludeSet.toString());\n    TimerContext time = null;\n    if (wait == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + wait);\n\n    try {\n      Map<Long, String> orderedChildren = getChildren(wait);\n      for (String headNode : orderedChildren.values()) {\n        if (headNode != null && topN.size() < n) {\n          try {\n            String id = dir + \"/\" + headNode;\n            if (excludeSet != null && excludeSet.contains(id)) continue;\n            QueueEvent queueEvent = new QueueEvent(id,\n                zookeeper.getData(dir + \"/\" + headNode, null, null, true), null);\n            topN.add(queueEvent);\n          } catch (KeeperException.NoNodeException e) {\n            // Another client removed the node first, try next\n          }\n        } else {\n          if (topN.size() >= 1) {\n            printQueueEventsListElementIds(topN);\n            return topN;\n          }\n        }\n      }\n\n      if (topN.size() > 0 ) {\n        printQueueEventsListElementIds(topN);\n        return topN;\n      }\n      return null;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#peekTopN(int,Set[String],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue#peekTopN(int,Set[String],long).mjava","sourceNew":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    TimerContext time = null;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (String headNode : getChildren(waitMillis)) {\n        if (topN.size() < n) {\n          try {\n            String id = dir + \"/\" + headNode;\n            if (excludeSet.contains(id)) continue;\n            QueueEvent queueEvent = new QueueEvent(id,\n                zookeeper.getData(dir + \"/\" + headNode, null, null, true), null);\n            topN.add(queueEvent);\n          } catch (KeeperException.NoNodeException e) {\n            // Another client removed the node first, try next\n          }\n        } else {\n          if (topN.size() >= 1) {\n            printQueueEventsListElementIds(topN);\n            return topN;\n          }\n        }\n      }\n\n      if (topN.size() > 0 ) {\n        printQueueEventsListElementIds(topN);\n        return topN;\n      }\n      return null;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    TimerContext time = null;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (String headNode : getChildren(waitMillis)) {\n        if (topN.size() < n) {\n          try {\n            String id = dir + \"/\" + headNode;\n            if (excludeSet.contains(id)) continue;\n            QueueEvent queueEvent = new QueueEvent(id,\n                zookeeper.getData(dir + \"/\" + headNode, null, null, true), null);\n            topN.add(queueEvent);\n          } catch (KeeperException.NoNodeException e) {\n            // Another client removed the node first, try next\n          }\n        } else {\n          if (topN.size() >= 1) {\n            printQueueEventsListElementIds(topN);\n            return topN;\n          }\n        }\n      }\n\n      if (topN.size() > 0 ) {\n        printQueueEventsListElementIds(topN);\n        return topN;\n      }\n      return null;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2209af2c265d2258ec4b29c8cc78622d36994a15"]},"commit2Childs":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}