{"path":"solr/core/src/java/org/apache/solr/util/ReflectMapWriter#writeMap(EntryWriter).mjava","commits":[{"id":"8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8","date":1570799519,"type":0,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ReflectMapWriter#writeMap(EntryWriter).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  default void writeMap(EntryWriter ew) throws IOException {\n    for (Field field : this.getClass().getDeclaredFields()) {\n      JsonProperty prop = field.getAnnotation(JsonProperty.class);\n      if (prop == null) continue;\n      int modifiers = field.getModifiers();\n      if (Modifier.isPublic(modifiers) && !Modifier.isStatic(modifiers)) {\n        String fname = prop.value().isEmpty() ? field.getName() : prop.value();\n        try {\n          if (field.getType() == int.class) {\n            ew.put(fname, field.getInt(this));\n          } else if (field.getType() == float.class) {\n            ew.put(fname, field.getFloat(this));\n          } else if (field.getType() == double.class) {\n            ew.put(fname, field.getDouble(this));\n          } else if (field.getType() == boolean.class) {\n            ew.put(fname, field.getBoolean(this));\n          } else if (field.getType() == long.class) {\n            ew.put(fname, field.getLong(this));\n          } else {\n            ew.putIfNotNull(fname, field.get(this));\n          }\n        } catch (IllegalAccessException e) {\n          //it should not happen\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38d63171317f90b25910c2374de2e33c55c243f5","date":1570800220,"type":4,"author":"noble","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/ReflectMapWriter#writeMap(EntryWriter).mjava","sourceNew":null,"sourceOld":"  @Override\n  default void writeMap(EntryWriter ew) throws IOException {\n    for (Field field : this.getClass().getDeclaredFields()) {\n      JsonProperty prop = field.getAnnotation(JsonProperty.class);\n      if (prop == null) continue;\n      int modifiers = field.getModifiers();\n      if (Modifier.isPublic(modifiers) && !Modifier.isStatic(modifiers)) {\n        String fname = prop.value().isEmpty() ? field.getName() : prop.value();\n        try {\n          if (field.getType() == int.class) {\n            ew.put(fname, field.getInt(this));\n          } else if (field.getType() == float.class) {\n            ew.put(fname, field.getFloat(this));\n          } else if (field.getType() == double.class) {\n            ew.put(fname, field.getDouble(this));\n          } else if (field.getType() == boolean.class) {\n            ew.put(fname, field.getBoolean(this));\n          } else if (field.getType() == long.class) {\n            ew.put(fname, field.getLong(this));\n          } else {\n            ew.putIfNotNull(fname, field.get(this));\n          }\n        } catch (IllegalAccessException e) {\n          //it should not happen\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4505d603fb135c5279b5c6b1fc375feeeff582f1","date":1570801145,"type":0,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ReflectMapWriter#writeMap(EntryWriter).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  default void writeMap(EntryWriter ew) throws IOException {\n    for (Field field : this.getClass().getDeclaredFields()) {\n      JsonProperty prop = field.getAnnotation(JsonProperty.class);\n      if (prop == null) continue;\n      int modifiers = field.getModifiers();\n      if (Modifier.isPublic(modifiers) && !Modifier.isStatic(modifiers)) {\n        String fname = prop.value().isEmpty() ? field.getName() : prop.value();\n        try {\n          if (field.getType() == int.class) {\n            ew.put(fname, field.getInt(this));\n          } else if (field.getType() == float.class) {\n            ew.put(fname, field.getFloat(this));\n          } else if (field.getType() == double.class) {\n            ew.put(fname, field.getDouble(this));\n          } else if (field.getType() == boolean.class) {\n            ew.put(fname, field.getBoolean(this));\n          } else if (field.getType() == long.class) {\n            ew.put(fname, field.getLong(this));\n          } else {\n            ew.putIfNotNull(fname, field.get(this));\n          }\n        } catch (IllegalAccessException e) {\n          //it should not happen\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/ReflectMapWriter#writeMap(EntryWriter).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  default void writeMap(EntryWriter ew) throws IOException {\n    for (Field field : this.getClass().getDeclaredFields()) {\n      JsonProperty prop = field.getAnnotation(JsonProperty.class);\n      if (prop == null) continue;\n      int modifiers = field.getModifiers();\n      if (Modifier.isPublic(modifiers) && !Modifier.isStatic(modifiers)) {\n        String fname = prop.value().isEmpty() ? field.getName() : prop.value();\n        try {\n          if (field.getType() == int.class) {\n            ew.put(fname, field.getInt(this));\n          } else if (field.getType() == float.class) {\n            ew.put(fname, field.getFloat(this));\n          } else if (field.getType() == double.class) {\n            ew.put(fname, field.getDouble(this));\n          } else if (field.getType() == boolean.class) {\n            ew.put(fname, field.getBoolean(this));\n          } else if (field.getType() == long.class) {\n            ew.put(fname, field.getLong(this));\n          } else {\n            ew.putIfNotNull(fname, field.get(this));\n          }\n        } catch (IllegalAccessException e) {\n          //it should not happen\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2cb4e022420f72c54eae1717b36b6778fccd3c8a","date":1571526013,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ReflectMapWriter#writeMap(EntryWriter).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ReflectMapWriter#writeMap(EntryWriter).mjava","sourceNew":"  @Override\n  default void writeMap(EntryWriter ew) throws IOException {\n    for (Field field : this.getClass().getDeclaredFields()) {\n      JsonProperty prop = field.getAnnotation(JsonProperty.class);\n      if (prop == null) continue;\n      int modifiers = field.getModifiers();\n      if (Modifier.isPublic(modifiers) && !Modifier.isStatic(modifiers)) {\n        String fname = prop.value().isEmpty() ? field.getName() : prop.value();\n        try {\n          if (field.getType() == int.class) {\n            ew.put(fname, field.getInt(this));\n          } else if (field.getType() == float.class) {\n            ew.put(fname, field.getFloat(this));\n          } else if (field.getType() == double.class) {\n            ew.put(fname, field.getDouble(this));\n          } else if (field.getType() == boolean.class) {\n            ew.put(fname, field.getBoolean(this));\n          } else if (field.getType() == long.class) {\n            ew.put(fname, field.getLong(this));\n          } else {\n            ew.putIfNotNull(fname, field.get(this));\n          }\n        } catch (IllegalAccessException e) {\n          //it should not happen\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  default void writeMap(EntryWriter ew) throws IOException {\n    for (Field field : this.getClass().getDeclaredFields()) {\n      JsonProperty prop = field.getAnnotation(JsonProperty.class);\n      if (prop == null) continue;\n      int modifiers = field.getModifiers();\n      if (Modifier.isPublic(modifiers) && !Modifier.isStatic(modifiers)) {\n        String fname = prop.value().isEmpty() ? field.getName() : prop.value();\n        try {\n          if (field.getType() == int.class) {\n            ew.put(fname, field.getInt(this));\n          } else if (field.getType() == float.class) {\n            ew.put(fname, field.getFloat(this));\n          } else if (field.getType() == double.class) {\n            ew.put(fname, field.getDouble(this));\n          } else if (field.getType() == boolean.class) {\n            ew.put(fname, field.getBoolean(this));\n          } else if (field.getType() == long.class) {\n            ew.put(fname, field.getLong(this));\n          } else {\n            ew.putIfNotNull(fname, field.get(this));\n          }\n        } catch (IllegalAccessException e) {\n          //it should not happen\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38d63171317f90b25910c2374de2e33c55c243f5":["8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8"],"8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2cb4e022420f72c54eae1717b36b6778fccd3c8a":["4505d603fb135c5279b5c6b1fc375feeeff582f1"],"4505d603fb135c5279b5c6b1fc375feeeff582f1":["38d63171317f90b25910c2374de2e33c55c243f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2cb4e022420f72c54eae1717b36b6778fccd3c8a"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4505d603fb135c5279b5c6b1fc375feeeff582f1"]},"commit2Childs":{"38d63171317f90b25910c2374de2e33c55c243f5":["4505d603fb135c5279b5c6b1fc375feeeff582f1"],"8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8":["38d63171317f90b25910c2374de2e33c55c243f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8","b0b597c65628ca9e73913a07e81691f8229bae35"],"2cb4e022420f72c54eae1717b36b6778fccd3c8a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4505d603fb135c5279b5c6b1fc375feeeff582f1":["2cb4e022420f72c54eae1717b36b6778fccd3c8a","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}