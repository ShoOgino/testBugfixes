{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","sourceNew":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method \n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    // Ensure any running addIndexes finishes.\n    acquireRead();\n    releaseRead();\n\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n  }\n\n","sourceOld":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method \n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    // Ensure any running addIndexes finishes.\n    acquireRead();\n    releaseRead();\n\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","sourceNew":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method \n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n  }\n\n","sourceOld":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method \n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    // Ensure any running addIndexes finishes.\n    acquireRead();\n    releaseRead();\n\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","sourceNew":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method\n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n  }\n\n","sourceOld":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method \n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc0b63f7d001f66535877ec20cc8896ec2197143","date":1295888218,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","sourceNew":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method \n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    if (infoStream != null) {\n      message(\"waitForMerges\");\n    }\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    if (infoStream != null) {\n      message(\"waitForMerges done\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method \n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","sourceNew":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method\n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    if (infoStream != null) {\n      message(\"waitForMerges\");\n    }\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    if (infoStream != null) {\n      message(\"waitForMerges done\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method\n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","sourceNew":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method \n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    if (infoStream != null) {\n      message(\"waitForMerges\");\n    }\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    if (infoStream != null) {\n      message(\"waitForMerges done\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method \n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","sourceNew":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method\n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    if (infoStream != null) {\n      message(\"waitForMerges\");\n    }\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    if (infoStream != null) {\n      message(\"waitForMerges done\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method \n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    if (infoStream != null) {\n      message(\"waitForMerges\");\n    }\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    if (infoStream != null) {\n      message(\"waitForMerges done\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","sourceNew":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method\n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    if (infoStream != null) {\n      message(\"waitForMerges\");\n    }\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    if (infoStream != null) {\n      message(\"waitForMerges done\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method \n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    if (infoStream != null) {\n      message(\"waitForMerges\");\n    }\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    if (infoStream != null) {\n      message(\"waitForMerges done\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","sourceNew":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method\n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    if (infoStream != null) {\n      message(\"waitForMerges\");\n    }\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    if (infoStream != null) {\n      message(\"waitForMerges done\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method \n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    if (infoStream != null) {\n      message(\"waitForMerges\");\n    }\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    if (infoStream != null) {\n      message(\"waitForMerges done\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","date":1316619234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","sourceNew":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method\n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    ensureOpen(false);\n    if (infoStream != null) {\n      message(\"waitForMerges\");\n    }\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    if (infoStream != null) {\n      message(\"waitForMerges done\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method\n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    if (infoStream != null) {\n      message(\"waitForMerges\");\n    }\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    if (infoStream != null) {\n      message(\"waitForMerges done\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","sourceNew":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method\n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    ensureOpen(false);\n    if (infoStream != null) {\n      infoStream.message(\"IW\", \"waitForMerges\");\n    }\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    if (infoStream != null) {\n      infoStream.message(\"IW\", \"waitForMerges done\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method\n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    ensureOpen(false);\n    if (infoStream != null) {\n      message(\"waitForMerges\");\n    }\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    if (infoStream != null) {\n      message(\"waitForMerges done\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","sourceNew":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method\n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    ensureOpen(false);\n    infoStream.message(\"IW\", \"waitForMerges\");\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    infoStream.message(\"IW\", \"waitForMerges done\");\n  }\n\n","sourceOld":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method\n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    ensureOpen(false);\n    if (infoStream != null) {\n      infoStream.message(\"IW\", \"waitForMerges\");\n    }\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    if (infoStream != null) {\n      infoStream.message(\"IW\", \"waitForMerges done\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5df35ab57c223ea11aec64b53bf611904f3dced","date":1323640545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","sourceNew":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method\n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    ensureOpen(false);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"waitForMerges\");\n    }\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"waitForMerges done\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method\n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    ensureOpen(false);\n    infoStream.message(\"IW\", \"waitForMerges\");\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    infoStream.message(\"IW\", \"waitForMerges done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","sourceNew":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method\n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    ensureOpen(false);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"waitForMerges\");\n    }\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"waitForMerges done\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method\n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    ensureOpen(false);\n    infoStream.message(\"IW\", \"waitForMerges\");\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    infoStream.message(\"IW\", \"waitForMerges done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#waitForMerges().mjava","sourceNew":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method\n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    ensureOpen(false);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"waitForMerges\");\n    }\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"waitForMerges done\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Wait for any currently outstanding merges to finish.\n   *\n   * <p>It is guaranteed that any merges started prior to calling this method\n   *    will have completed once this method completes.</p>\n   */\n  public synchronized void waitForMerges() {\n    ensureOpen(false);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"waitForMerges\");\n    }\n    while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n      doWait();\n    }\n\n    // sanity check\n    assert 0 == mergingSegments.size();\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"waitForMerges done\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c5df35ab57c223ea11aec64b53bf611904f3dced"],"06584e6e98d592b34e1329b384182f368d2025e8":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["58c6bbc222f074c844e736e6fb23647e3db9cfe3","c5df35ab57c223ea11aec64b53bf611904f3dced"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["fc0b63f7d001f66535877ec20cc8896ec2197143","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fc0b63f7d001f66535877ec20cc8896ec2197143"],"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["fc0b63f7d001f66535877ec20cc8896ec2197143","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","fc0b63f7d001f66535877ec20cc8896ec2197143"],"fc0b63f7d001f66535877ec20cc8896ec2197143":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["c5df35ab57c223ea11aec64b53bf611904f3dced","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","a3776dccca01c11e7046323cfad46a3b4a471233"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d","fc0b63f7d001f66535877ec20cc8896ec2197143"],"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["06584e6e98d592b34e1329b384182f368d2025e8"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"fc0b63f7d001f66535877ec20cc8896ec2197143":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","bb9b72f7c3d7827c64dd4ec580ded81778da361d","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}