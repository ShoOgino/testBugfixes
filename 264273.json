{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","commits":[{"id":"330e80d31a51e837b9cc906035e114377c0501dc","date":1429994103,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","pathOld":"/dev/null","sourceNew":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d81baa64023bbb9b43f6d929ee168b105940d30","date":1486492702,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","sourceNew":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1794a0eb180b7d4e51424fbb32694cbb787ebc93","date":1496796881,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","sourceNew":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    if (fcontext.facetInfo != null) {\n      return refineFacets();\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f344bb33ca91f48e99c061980115b46fa84fc8f5","date":1496903283,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","sourceNew":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    if (fcontext.facetInfo != null) {\n      return refineFacets();\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0138536655ed6adafa2e07c09cd3c9572112922f","date":1497930179,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","sourceNew":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    if (fcontext.facetInfo != null) {\n      return refineFacets();\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    if (fcontext.facetInfo != null) {\n      return refineFacets();\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","sourceNew":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    if (fcontext.facetInfo != null) {\n      return refineFacets();\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","sourceNew":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    if (fcontext.facetInfo != null) {\n      return refineFacets();\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6409f24cc7d96b04fb1c932845092b0e307fb5d4","date":1515972624,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","sourceNew":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else if (ft instanceof CurrencyFieldType) {\n      calc = new CurrencyCalc(sf);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    if (fcontext.facetInfo != null) {\n      return refineFacets();\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    if (fcontext.facetInfo != null) {\n      return refineFacets();\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","sourceNew":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else if (ft instanceof CurrencyFieldType) {\n      calc = new CurrencyCalc(sf);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    if (fcontext.facetInfo != null) {\n      return refineFacets();\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    if (fcontext.facetInfo != null) {\n      return refineFacets();\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c05b634713ca09b2267477408773904d4c69dd9d","date":1530894845,"type":5,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getCalcForField(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","sourceNew":"  /**\n   * Helper method used in processor constructor\n   * @return a <code>Calc</code> instance with {@link Calc#bitsToValue} and {@link Calc#bitsToSortableBits} methods suitable for the specified field.\n   */\n  private static Calc getCalcForField(SchemaField sf) {\n    final FieldType ft = sf.getType();\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          return new FloatCalc(sf);\n        case DOUBLE:\n          return new DoubleCalc(sf);\n        case INTEGER:\n          return new IntCalc(sf);\n        case LONG:\n          return new LongCalc(sf);\n        case DATE:\n          return new DateCalc(sf, null);\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on numeric field of unexpected type:\" + sf.getName());\n      }\n    } else if (ft instanceof CurrencyFieldType) {\n      return new CurrencyCalc(sf);\n    }\n\n    // if we made it this far, we have no idea what it is...\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                            \"Unable to range facet on field:\" + sf.getName());\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else if (ft instanceof CurrencyFieldType) {\n      calc = new CurrencyCalc(sf);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    if (fcontext.facetInfo != null) {\n      return refineFacets();\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","sourceNew":null,"sourceOld":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else if (ft instanceof CurrencyFieldType) {\n      calc = new CurrencyCalc(sf);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    if (fcontext.facetInfo != null) {\n      return refineFacets();\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","sourceNew":null,"sourceOld":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else if (ft instanceof CurrencyFieldType) {\n      calc = new CurrencyCalc(sf);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    if (fcontext.facetInfo != null) {\n      return refineFacets();\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["28288370235ed02234a64753cdbf0c6ec096304a","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"1794a0eb180b7d4e51424fbb32694cbb787ebc93":["3d81baa64023bbb9b43f6d929ee168b105940d30"],"0138536655ed6adafa2e07c09cd3c9572112922f":["f344bb33ca91f48e99c061980115b46fa84fc8f5"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["3d81baa64023bbb9b43f6d929ee168b105940d30","1794a0eb180b7d4e51424fbb32694cbb787ebc93"],"c05b634713ca09b2267477408773904d4c69dd9d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"28288370235ed02234a64753cdbf0c6ec096304a":["3d81baa64023bbb9b43f6d929ee168b105940d30","0138536655ed6adafa2e07c09cd3c9572112922f"],"330e80d31a51e837b9cc906035e114377c0501dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","c05b634713ca09b2267477408773904d4c69dd9d"],"3d81baa64023bbb9b43f6d929ee168b105940d30":["330e80d31a51e837b9cc906035e114377c0501dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["28288370235ed02234a64753cdbf0c6ec096304a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["3d81baa64023bbb9b43f6d929ee168b105940d30","0138536655ed6adafa2e07c09cd3c9572112922f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c05b634713ca09b2267477408773904d4c69dd9d"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b94236357aaa22b76c10629851fe4e376e0cea82","c05b634713ca09b2267477408773904d4c69dd9d"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["c05b634713ca09b2267477408773904d4c69dd9d","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1794a0eb180b7d4e51424fbb32694cbb787ebc93":["f344bb33ca91f48e99c061980115b46fa84fc8f5"],"0138536655ed6adafa2e07c09cd3c9572112922f":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["0138536655ed6adafa2e07c09cd3c9572112922f"],"28288370235ed02234a64753cdbf0c6ec096304a":["b94236357aaa22b76c10629851fe4e376e0cea82","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"c05b634713ca09b2267477408773904d4c69dd9d":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"330e80d31a51e837b9cc906035e114377c0501dc":["3d81baa64023bbb9b43f6d929ee168b105940d30"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3d81baa64023bbb9b43f6d929ee168b105940d30":["1794a0eb180b7d4e51424fbb32694cbb787ebc93","f344bb33ca91f48e99c061980115b46fa84fc8f5","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["330e80d31a51e837b9cc906035e114377c0501dc"],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}