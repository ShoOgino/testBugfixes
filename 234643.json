{"path":"solr/core/src/test/org/apache/solr/search/TestLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    LRUCache<Object, Object> lruCache = new LRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = lruCache.init(params, null, cr);\n    lruCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      lruCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    LRUCache<Object, Object> lruCacheNew = new LRUCache<Object, Object>();\n    lruCacheNew.init(params, o, cr);\n    lruCacheNew.warm(null, lruCache);\n    lruCacheNew.setState(SolrCache.State.LIVE);\n    lruCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), lruCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, lruCacheNew.get(miss));\n    }\n    lruCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    LRUCache<Object, Object> lruCache = new LRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = lruCache.init(params, null, cr);\n    lruCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      lruCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    LRUCache<Object, Object> lruCacheNew = new LRUCache<Object, Object>();\n    lruCacheNew.init(params, o, cr);\n    lruCacheNew.warm(null, lruCache);\n    lruCacheNew.setState(SolrCache.State.LIVE);\n    lruCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), lruCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, lruCacheNew.get(miss));\n    }\n    lruCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    LRUCache<Object, Object> lruCache = new LRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = lruCache.init(params, null, cr);\n    lruCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      lruCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    LRUCache<Object, Object> lruCacheNew = new LRUCache<Object, Object>();\n    lruCacheNew.init(params, o, cr);\n    lruCacheNew.warm(null, lruCache);\n    lruCacheNew.setState(SolrCache.State.LIVE);\n    lruCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), lruCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, lruCacheNew.get(miss));\n    }\n    lruCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    LRUCache<Object, Object> lruCache = new LRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = lruCache.init(params, null, cr);\n    lruCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      lruCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    LRUCache<Object, Object> lruCacheNew = new LRUCache<Object, Object>();\n    lruCacheNew.init(params, o, cr);\n    lruCacheNew.warm(null, lruCache);\n    lruCacheNew.setState(SolrCache.State.LIVE);\n    lruCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), lruCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, lruCacheNew.get(miss));\n    }\n    lruCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    LRUCache<Object, Object> lruCache = new LRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = lruCache.init(params, null, cr);\n    lruCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      lruCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    LRUCache<Object, Object> lruCacheNew = new LRUCache<Object, Object>();\n    lruCacheNew.init(params, o, cr);\n    lruCacheNew.warm(null, lruCache);\n    lruCacheNew.setState(SolrCache.State.LIVE);\n    lruCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), lruCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, lruCacheNew.get(miss));\n    }\n    lruCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    LRUCache<Object, Object> lruCache = new LRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = lruCache.init(params, null, cr);\n    lruCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      lruCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    LRUCache<Object, Object> lruCacheNew = new LRUCache<Object, Object>();\n    lruCacheNew.init(params, o, cr);\n    lruCacheNew.warm(null, lruCache);\n    lruCacheNew.setState(SolrCache.State.LIVE);\n    lruCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), lruCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, lruCacheNew.get(miss));\n    }\n    lruCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    LRUCache<Object, Object> lruCache = new LRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = lruCache.init(params, null, cr);\n    lruCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      lruCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    LRUCache<Object, Object> lruCacheNew = new LRUCache<Object, Object>();\n    lruCacheNew.init(params, o, cr);\n    lruCacheNew.warm(null, lruCache);\n    lruCacheNew.setState(SolrCache.State.LIVE);\n    lruCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), lruCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, lruCacheNew.get(miss));\n    }\n    lruCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    LRUCache<Object, Object> lruCache = new LRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = lruCache.init(params, null, cr);\n    lruCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      lruCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    LRUCache<Object, Object> lruCacheNew = new LRUCache<Object, Object>();\n    lruCacheNew.init(params, o, cr);\n    lruCacheNew.warm(null, lruCache);\n    lruCacheNew.setState(SolrCache.State.LIVE);\n    lruCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), lruCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, lruCacheNew.get(miss));\n    }\n    lruCacheNew.close();\n  }\n\n","bugFix":["b870d11eae2250e41b4ed48d248bc043cbbd7711"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    LRUCache<Object, Object> lruCache = new LRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = lruCache.init(params, null, cr);\n    lruCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      lruCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    LRUCache<Object, Object> lruCacheNew = new LRUCache<Object, Object>();\n    lruCacheNew.init(params, o, cr);\n    lruCacheNew.warm(null, lruCache);\n    lruCacheNew.setState(SolrCache.State.LIVE);\n    lruCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), lruCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, lruCacheNew.get(miss));\n    }\n    lruCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    LRUCache<Object, Object> lruCache = new LRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = lruCache.init(params, null, cr);\n    lruCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      lruCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    LRUCache<Object, Object> lruCacheNew = new LRUCache<Object, Object>();\n    lruCacheNew.init(params, o, cr);\n    lruCacheNew.warm(null, lruCache);\n    lruCacheNew.setState(SolrCache.State.LIVE);\n    lruCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), lruCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, lruCacheNew.get(miss));\n    }\n    lruCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b5eb85061a04532d079d1ca2e6cfae6be263073","date":1377213475,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    LRUCache<Object, Object> lruCache = new LRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = lruCache.init(params, null, cr);\n    lruCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      lruCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    LRUCache<Object, Object> lruCacheNew = new LRUCache<Object, Object>();\n    lruCacheNew.init(params, o, cr);\n    lruCacheNew.warm(null, lruCache);\n    lruCacheNew.setState(SolrCache.State.LIVE);\n    lruCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), lruCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, lruCacheNew.get(miss));\n    }\n    lruCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    LRUCache<Object, Object> lruCache = new LRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = lruCache.init(params, null, cr);\n    lruCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      lruCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    LRUCache<Object, Object> lruCacheNew = new LRUCache<Object, Object>();\n    lruCacheNew.init(params, o, cr);\n    lruCacheNew.warm(null, lruCache);\n    lruCacheNew.setState(SolrCache.State.LIVE);\n    lruCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), lruCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, lruCacheNew.get(miss));\n    }\n    lruCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    LRUCache<Object, Object> lruCache = new LRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = lruCache.init(params, null, cr);\n    lruCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      lruCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    LRUCache<Object, Object> lruCacheNew = new LRUCache<Object, Object>();\n    lruCacheNew.init(params, o, cr);\n    lruCacheNew.warm(null, lruCache);\n    lruCacheNew.setState(SolrCache.State.LIVE);\n    lruCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), lruCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, lruCacheNew.get(miss));\n    }\n    lruCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    LRUCache<Object, Object> lruCache = new LRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = lruCache.init(params, null, cr);\n    lruCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      lruCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    LRUCache<Object, Object> lruCacheNew = new LRUCache<Object, Object>();\n    lruCacheNew.init(params, o, cr);\n    lruCacheNew.warm(null, lruCache);\n    lruCacheNew.setState(SolrCache.State.LIVE);\n    lruCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), lruCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, lruCacheNew.get(miss));\n    }\n    lruCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    LRUCache<Object, Object> lruCache = new LRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = lruCache.init(params, null, cr);\n    lruCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      lruCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    LRUCache<Object, Object> lruCacheNew = new LRUCache<>();\n    lruCacheNew.init(params, o, cr);\n    lruCacheNew.warm(null, lruCache);\n    lruCacheNew.setState(SolrCache.State.LIVE);\n    lruCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), lruCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, lruCacheNew.get(miss));\n    }\n    lruCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    LRUCache<Object, Object> lruCache = new LRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = lruCache.init(params, null, cr);\n    lruCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      lruCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    LRUCache<Object, Object> lruCacheNew = new LRUCache<Object, Object>();\n    lruCacheNew.init(params, o, cr);\n    lruCacheNew.warm(null, lruCache);\n    lruCacheNew.setState(SolrCache.State.LIVE);\n    lruCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), lruCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, lruCacheNew.get(miss));\n    }\n    lruCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws Exception {\n    LRUCache<Object, Object> lruCache = new LRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = lruCache.init(params, null, cr);\n    lruCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      lruCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    LRUCache<Object, Object> lruCacheNew = new LRUCache<>();\n    lruCacheNew.init(params, o, cr);\n    lruCacheNew.warm(null, lruCache);\n    lruCacheNew.setState(SolrCache.State.LIVE);\n    lruCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), lruCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, lruCacheNew.get(miss));\n    }\n    lruCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    LRUCache<Object, Object> lruCache = new LRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = lruCache.init(params, null, cr);\n    lruCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      lruCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    LRUCache<Object, Object> lruCacheNew = new LRUCache<>();\n    lruCacheNew.init(params, o, cr);\n    lruCacheNew.warm(null, lruCache);\n    lruCacheNew.setState(SolrCache.State.LIVE);\n    lruCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), lruCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, lruCacheNew.get(miss));\n    }\n    lruCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":null,"sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws Exception {\n    LRUCache<Object, Object> lruCache = new LRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = lruCache.init(params, null, cr);\n    lruCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      lruCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    LRUCache<Object, Object> lruCacheNew = new LRUCache<>();\n    lruCacheNew.init(params, o, cr);\n    lruCacheNew.warm(null, lruCache);\n    lruCacheNew.setState(SolrCache.State.LIVE);\n    lruCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), lruCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, lruCacheNew.get(miss));\n    }\n    lruCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1b5eb85061a04532d079d1ca2e6cfae6be263073"],"1b5eb85061a04532d079d1ca2e6cfae6be263073":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","1b5eb85061a04532d079d1ca2e6cfae6be263073"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d7d3943904804560937e6239effeebda0f920e4":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"1b5eb85061a04532d079d1ca2e6cfae6be263073":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["4d7d3943904804560937e6239effeebda0f920e4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["1b5eb85061a04532d079d1ca2e6cfae6be263073","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}