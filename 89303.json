{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#generateNodeName(String,String,String).mjava","commits":[{"id":"042891089d57d0e6af18ea6cec15f9e9a7da7d25","date":1355271969,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#generateNodeName(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the nodeName that should be used based on the specified properties.\n   *\n   * @param hostName - must not be the empty string\n   * @param hostPort - must consist only of digits, must not be the empty string\n   * @param hostContext - should not begin or end with a slash, may be the empty string to denote the root context\n   * @lucene.experimental\n   * @see SolrZkClient#getBaseUrlForNodeName\n   */\n  static String generateNodeName(final String hostName,\n                                 final String hostPort,\n                                 final String hostContext) {\n    try {\n      return hostName + ':' + hostPort + '_' + \n        URLEncoder.encode(hostContext, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["227c5621583c5b934878e3c051aae9c4649ae700"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"227c5621583c5b934878e3c051aae9c4649ae700","date":1356045968,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#generateNodeName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#generateNodeName(String,String,String).mjava","sourceNew":"  /**\n   * Returns the nodeName that should be used based on the specified properties.\n   *\n   * @param hostName - must not be null or the empty string\n   * @param hostPort - must consist only of digits, must not be null or the empty string\n   * @param hostContext - should not begin or end with a slash (leading/trailin slashes will be ignored), must not be null, may be the empty string to denote the root context\n   * @lucene.experimental\n   * @see SolrZkClient#getBaseUrlForNodeName\n   */\n  static String generateNodeName(final String hostName,\n                                 final String hostPort,\n                                 final String hostContext) {\n    try {\n      return hostName + ':' + hostPort + '_' + \n        URLEncoder.encode(trimLeadingAndTrailingSlashes(hostContext), \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the nodeName that should be used based on the specified properties.\n   *\n   * @param hostName - must not be the empty string\n   * @param hostPort - must consist only of digits, must not be the empty string\n   * @param hostContext - should not begin or end with a slash, may be the empty string to denote the root context\n   * @lucene.experimental\n   * @see SolrZkClient#getBaseUrlForNodeName\n   */\n  static String generateNodeName(final String hostName,\n                                 final String hostPort,\n                                 final String hostContext) {\n    try {\n      return hostName + ':' + hostPort + '_' + \n        URLEncoder.encode(hostContext, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":["042891089d57d0e6af18ea6cec15f9e9a7da7d25"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#generateNodeName(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the nodeName that should be used based on the specified properties.\n   *\n   * @param hostName - must not be null or the empty string\n   * @param hostPort - must consist only of digits, must not be null or the empty string\n   * @param hostContext - should not begin or end with a slash (leading/trailin slashes will be ignored), must not be null, may be the empty string to denote the root context\n   * @lucene.experimental\n   * @see SolrZkClient#getBaseUrlForNodeName\n   */\n  static String generateNodeName(final String hostName,\n                                 final String hostPort,\n                                 final String hostContext) {\n    try {\n      return hostName + ':' + hostPort + '_' + \n        URLEncoder.encode(trimLeadingAndTrailingSlashes(hostContext), \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#generateNodeName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#generateNodeName(String,String,String).mjava","sourceNew":"  /**\n   * Returns the nodeName that should be used based on the specified properties.\n   *\n   * @param hostName - must not be null or the empty string\n   * @param hostPort - must consist only of digits, must not be null or the empty string\n   * @param hostContext - should not begin or end with a slash (leading/trailin slashes will be ignored), must not be null, may be the empty string to denote the root context\n   * @lucene.experimental\n   * @see ZkStateReader#getBaseUrlForNodeName\n   */\n  static String generateNodeName(final String hostName,\n                                 final String hostPort,\n                                 final String hostContext) {\n    try {\n      return hostName + ':' + hostPort + '_' + \n        URLEncoder.encode(trimLeadingAndTrailingSlashes(hostContext), \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the nodeName that should be used based on the specified properties.\n   *\n   * @param hostName - must not be null or the empty string\n   * @param hostPort - must consist only of digits, must not be null or the empty string\n   * @param hostContext - should not begin or end with a slash (leading/trailin slashes will be ignored), must not be null, may be the empty string to denote the root context\n   * @lucene.experimental\n   * @see SolrZkClient#getBaseUrlForNodeName\n   */\n  static String generateNodeName(final String hostName,\n                                 final String hostPort,\n                                 final String hostContext) {\n    try {\n      return hostName + ':' + hostPort + '_' + \n        URLEncoder.encode(trimLeadingAndTrailingSlashes(hostContext), \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#generateNodeName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#generateNodeName(String,String,String).mjava","sourceNew":"  /**\n   * Returns the nodeName that should be used based on the specified properties.\n   *\n   * @param hostName - must not be null or the empty string\n   * @param hostPort - must consist only of digits, must not be null or the empty string\n   * @param hostContext - should not begin or end with a slash (leading/trailin slashes will be ignored), must not be null, may be the empty string to denote the root context\n   * @lucene.experimental\n   * @see ZkStateReader#getBaseUrlForNodeName\n   */\n  static String generateNodeName(final String hostName,\n                                 final String hostPort,\n                                 final String hostContext) {\n    try {\n      return hostName + ':' + hostPort + '_' + \n        URLEncoder.encode(trimLeadingAndTrailingSlashes(hostContext), \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new Error(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the nodeName that should be used based on the specified properties.\n   *\n   * @param hostName - must not be null or the empty string\n   * @param hostPort - must consist only of digits, must not be null or the empty string\n   * @param hostContext - should not begin or end with a slash (leading/trailin slashes will be ignored), must not be null, may be the empty string to denote the root context\n   * @lucene.experimental\n   * @see ZkStateReader#getBaseUrlForNodeName\n   */\n  static String generateNodeName(final String hostName,\n                                 final String hostPort,\n                                 final String hostContext) {\n    try {\n      return hostName + ':' + hostPort + '_' + \n        URLEncoder.encode(trimLeadingAndTrailingSlashes(hostContext), \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#generateNodeName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#generateNodeName(String,String,String).mjava","sourceNew":"  /**\n   * Returns the nodeName that should be used based on the specified properties.\n   *\n   * @param hostName - must not be null or the empty string\n   * @param hostPort - must consist only of digits, must not be null or the empty string\n   * @param hostContext - should not begin or end with a slash (leading/trailin slashes will be ignored), must not be null, may be the empty string to denote the root context\n   * @lucene.experimental\n   * @see ZkStateReader#getBaseUrlForNodeName\n   */\n  static String generateNodeName(final String hostName,\n                                 final String hostPort,\n                                 final String hostContext) {\n    try {\n      return hostName + ':' + hostPort + '_' + \n        URLEncoder.encode(trimLeadingAndTrailingSlashes(hostContext), \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new Error(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the nodeName that should be used based on the specified properties.\n   *\n   * @param hostName - must not be null or the empty string\n   * @param hostPort - must consist only of digits, must not be null or the empty string\n   * @param hostContext - should not begin or end with a slash (leading/trailin slashes will be ignored), must not be null, may be the empty string to denote the root context\n   * @lucene.experimental\n   * @see ZkStateReader#getBaseUrlForNodeName\n   */\n  static String generateNodeName(final String hostName,\n                                 final String hostPort,\n                                 final String hostContext) {\n    try {\n      return hostName + ':' + hostPort + '_' + \n        URLEncoder.encode(trimLeadingAndTrailingSlashes(hostContext), \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#generateNodeName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#generateNodeName(String,String,String).mjava","sourceNew":"  /**\n   * Returns the nodeName that should be used based on the specified properties.\n   *\n   * @param hostName    - must not be null or the empty string\n   * @param hostPort    - must consist only of digits, must not be null or the empty string\n   * @param hostContext - should not begin or end with a slash (leading/trailin slashes will be ignored), must not be null, may be the empty string to denote the root context\n   * @lucene.experimental\n   * @see ZkStateReader#getBaseUrlForNodeName\n   */\n  static String generateNodeName(final String hostName,\n                                 final String hostPort,\n                                 final String hostContext) {\n    try {\n      return hostName + ':' + hostPort + '_' +\n          URLEncoder.encode(trimLeadingAndTrailingSlashes(hostContext), \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new Error(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the nodeName that should be used based on the specified properties.\n   *\n   * @param hostName - must not be null or the empty string\n   * @param hostPort - must consist only of digits, must not be null or the empty string\n   * @param hostContext - should not begin or end with a slash (leading/trailin slashes will be ignored), must not be null, may be the empty string to denote the root context\n   * @lucene.experimental\n   * @see ZkStateReader#getBaseUrlForNodeName\n   */\n  static String generateNodeName(final String hostName,\n                                 final String hostPort,\n                                 final String hostContext) {\n    try {\n      return hostName + ':' + hostPort + '_' + \n        URLEncoder.encode(trimLeadingAndTrailingSlashes(hostContext), \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new Error(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#generateNodeName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#generateNodeName(String,String,String).mjava","sourceNew":"  /**\n   * Returns the nodeName that should be used based on the specified properties.\n   *\n   * @param hostName    - must not be null or the empty string\n   * @param hostPort    - must consist only of digits, must not be null or the empty string\n   * @param hostContext - should not begin or end with a slash (leading/trailin slashes will be ignored), must not be null, may be the empty string to denote the root context\n   * @lucene.experimental\n   * @see ZkStateReader#getBaseUrlForNodeName\n   */\n  static String generateNodeName(final String hostName,\n                                 final String hostPort,\n                                 final String hostContext) {\n    try {\n      return hostName + ':' + hostPort + '_' +\n          URLEncoder.encode(trimLeadingAndTrailingSlashes(hostContext), \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new Error(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the nodeName that should be used based on the specified properties.\n   *\n   * @param hostName - must not be null or the empty string\n   * @param hostPort - must consist only of digits, must not be null or the empty string\n   * @param hostContext - should not begin or end with a slash (leading/trailin slashes will be ignored), must not be null, may be the empty string to denote the root context\n   * @lucene.experimental\n   * @see ZkStateReader#getBaseUrlForNodeName\n   */\n  static String generateNodeName(final String hostName,\n                                 final String hostPort,\n                                 final String hostContext) {\n    try {\n      return hostName + ':' + hostPort + '_' + \n        URLEncoder.encode(trimLeadingAndTrailingSlashes(hostContext), \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new Error(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","9d3d365762604952e436b51980101dfc84cc1b3e"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","227c5621583c5b934878e3c051aae9c4649ae700"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["9d3d365762604952e436b51980101dfc84cc1b3e","fbcfc050b9f253136eaa5950b57248b2109eac11"],"042891089d57d0e6af18ea6cec15f9e9a7da7d25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"227c5621583c5b934878e3c051aae9c4649ae700":["042891089d57d0e6af18ea6cec15f9e9a7da7d25"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["227c5621583c5b934878e3c051aae9c4649ae700"],"9d3d365762604952e436b51980101dfc84cc1b3e":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["9d3d365762604952e436b51980101dfc84cc1b3e"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"042891089d57d0e6af18ea6cec15f9e9a7da7d25":["227c5621583c5b934878e3c051aae9c4649ae700"],"227c5621583c5b934878e3c051aae9c4649ae700":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbcfc050b9f253136eaa5950b57248b2109eac11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","042891089d57d0e6af18ea6cec15f9e9a7da7d25"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}