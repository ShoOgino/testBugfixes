{"path":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexableField#boost().mjava","sourceNew":"  /** Field boost (you must pre-multiply in any doc boost). */\n  public float boost();\n\n","sourceOld":"  /** Field boost (you must pre-multiply in any doc boost). */\n  public float boost();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19721aa3bad7ccd93aa898c543e98a67fff7958","date":1346108798,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","sourceNew":"  /** \n   * Returns the field's index-time boost.\n   * <p>\n   * Only fields can have an index-time boost, if you want to simulate\n   * a \"document boost\", then you must pre-multiply it across all the\n   * relevant fields yourself. \n   * <p>The boost is used to compute the norm factor for the field.  By\n   * default, in the {@link Similarity#computeNorm(FieldInvertState, Norm)} method, \n   * the boost value is multiplied by the length normalization factor and then\n   * rounded by {@link DefaultSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   * <p>\n   * It is illegal to return a boost other than 1.0f for a field that is not\n   * indexed ({@link IndexableFieldType#indexed()} is false) or omits normalization values\n   * ({@link IndexableFieldType#omitNorms()} returns true).\n   *\n   * @see Similarity#computeNorm(FieldInvertState, Norm)\n   * @see DefaultSimilarity#encodeNormValue(float)\n   */\n  public float boost();\n\n","sourceOld":"  /** Field boost (you must pre-multiply in any doc boost). */\n  public float boost();\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","sourceNew":"  /** \n   * Returns the field's index-time boost.\n   * <p>\n   * Only fields can have an index-time boost, if you want to simulate\n   * a \"document boost\", then you must pre-multiply it across all the\n   * relevant fields yourself. \n   * <p>The boost is used to compute the norm factor for the field.  By\n   * default, in the {@link Similarity#computeNorm(FieldInvertState, Norm)} method, \n   * the boost value is multiplied by the length normalization factor and then\n   * rounded by {@link DefaultSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   * <p>\n   * It is illegal to return a boost other than 1.0f for a field that is not\n   * indexed ({@link IndexableFieldType#indexed()} is false) or omits normalization values\n   * ({@link IndexableFieldType#omitNorms()} returns true).\n   *\n   * @see Similarity#computeNorm(FieldInvertState, Norm)\n   * @see DefaultSimilarity#encodeNormValue(float)\n   */\n  public float boost();\n\n","sourceOld":"  /** Field boost (you must pre-multiply in any doc boost). */\n  public float boost();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","sourceNew":"  /** \n   * Returns the field's index-time boost.\n   * <p>\n   * Only fields can have an index-time boost, if you want to simulate\n   * a \"document boost\", then you must pre-multiply it across all the\n   * relevant fields yourself. \n   * <p>The boost is used to compute the norm factor for the field.  By\n   * default, in the {@link Similarity#computeNorm(FieldInvertState)} method, \n   * the boost value is multiplied by the length normalization factor and then\n   * rounded by {@link DefaultSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   * <p>\n   * It is illegal to return a boost other than 1.0f for a field that is not\n   * indexed ({@link IndexableFieldType#indexed()} is false) or omits normalization values\n   * ({@link IndexableFieldType#omitNorms()} returns true).\n   *\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see DefaultSimilarity#encodeNormValue(float)\n   */\n  public float boost();\n\n","sourceOld":"  /** \n   * Returns the field's index-time boost.\n   * <p>\n   * Only fields can have an index-time boost, if you want to simulate\n   * a \"document boost\", then you must pre-multiply it across all the\n   * relevant fields yourself. \n   * <p>The boost is used to compute the norm factor for the field.  By\n   * default, in the {@link Similarity#computeNorm(FieldInvertState, Norm)} method, \n   * the boost value is multiplied by the length normalization factor and then\n   * rounded by {@link DefaultSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   * <p>\n   * It is illegal to return a boost other than 1.0f for a field that is not\n   * indexed ({@link IndexableFieldType#indexed()} is false) or omits normalization values\n   * ({@link IndexableFieldType#omitNorms()} returns true).\n   *\n   * @see Similarity#computeNorm(FieldInvertState, Norm)\n   * @see DefaultSimilarity#encodeNormValue(float)\n   */\n  public float boost();\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","sourceNew":"  /** \n   * Returns the field's index-time boost.\n   * <p>\n   * Only fields can have an index-time boost, if you want to simulate\n   * a \"document boost\", then you must pre-multiply it across all the\n   * relevant fields yourself. \n   * <p>The boost is used to compute the norm factor for the field.  By\n   * default, in the {@link Similarity#computeNorm(FieldInvertState)} method, \n   * the boost value is multiplied by the length normalization factor and then\n   * rounded by {@link DefaultSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   * <p>\n   * It is illegal to return a boost other than 1.0f for a field that is not\n   * indexed ({@link IndexableFieldType#indexed()} is false) or omits normalization values\n   * ({@link IndexableFieldType#omitNorms()} returns true).\n   *\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see DefaultSimilarity#encodeNormValue(float)\n   */\n  public float boost();\n\n","sourceOld":"  /** \n   * Returns the field's index-time boost.\n   * <p>\n   * Only fields can have an index-time boost, if you want to simulate\n   * a \"document boost\", then you must pre-multiply it across all the\n   * relevant fields yourself. \n   * <p>The boost is used to compute the norm factor for the field.  By\n   * default, in the {@link Similarity#computeNorm(FieldInvertState, Norm)} method, \n   * the boost value is multiplied by the length normalization factor and then\n   * rounded by {@link DefaultSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   * <p>\n   * It is illegal to return a boost other than 1.0f for a field that is not\n   * indexed ({@link IndexableFieldType#indexed()} is false) or omits normalization values\n   * ({@link IndexableFieldType#omitNorms()} returns true).\n   *\n   * @see Similarity#computeNorm(FieldInvertState, Norm)\n   * @see DefaultSimilarity#encodeNormValue(float)\n   */\n  public float boost();\n\n","bugFix":["c19721aa3bad7ccd93aa898c543e98a67fff7958"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","sourceNew":"  /** \n   * Returns the field's index-time boost.\n   * <p>\n   * Only fields can have an index-time boost, if you want to simulate\n   * a \"document boost\", then you must pre-multiply it across all the\n   * relevant fields yourself. \n   * <p>The boost is used to compute the norm factor for the field.  By\n   * default, in the {@link Similarity#computeNorm(FieldInvertState)} method, \n   * the boost value is multiplied by the length normalization factor and then\n   * rounded by {@link DefaultSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   * <p>\n   * It is illegal to return a boost other than 1.0f for a field that is not\n   * indexed ({@link IndexableFieldType#indexOptions()} is null) or omits normalization values\n   * ({@link IndexableFieldType#omitNorms()} returns true).\n   *\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see DefaultSimilarity#encodeNormValue(float)\n   */\n  public float boost();\n\n","sourceOld":"  /** \n   * Returns the field's index-time boost.\n   * <p>\n   * Only fields can have an index-time boost, if you want to simulate\n   * a \"document boost\", then you must pre-multiply it across all the\n   * relevant fields yourself. \n   * <p>The boost is used to compute the norm factor for the field.  By\n   * default, in the {@link Similarity#computeNorm(FieldInvertState)} method, \n   * the boost value is multiplied by the length normalization factor and then\n   * rounded by {@link DefaultSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   * <p>\n   * It is illegal to return a boost other than 1.0f for a field that is not\n   * indexed ({@link IndexableFieldType#indexed()} is false) or omits normalization values\n   * ({@link IndexableFieldType#omitNorms()} returns true).\n   *\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see DefaultSimilarity#encodeNormValue(float)\n   */\n  public float boost();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","sourceNew":"  /** \n   * Returns the field's index-time boost.\n   * <p>\n   * Only fields can have an index-time boost, if you want to simulate\n   * a \"document boost\", then you must pre-multiply it across all the\n   * relevant fields yourself. \n   * <p>The boost is used to compute the norm factor for the field.  By\n   * default, in the {@link Similarity#computeNorm(FieldInvertState)} method, \n   * the boost value is multiplied by the length normalization factor and then\n   * rounded by {@link DefaultSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   * <p>\n   * It is illegal to return a boost other than 1.0f for a field that is not\n   * indexed ({@link IndexableFieldType#indexOptions()} is null) or omits normalization values\n   * ({@link IndexableFieldType#omitNorms()} returns true).\n   *\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see DefaultSimilarity#encodeNormValue(float)\n   */\n  public float boost();\n\n","sourceOld":"  /** \n   * Returns the field's index-time boost.\n   * <p>\n   * Only fields can have an index-time boost, if you want to simulate\n   * a \"document boost\", then you must pre-multiply it across all the\n   * relevant fields yourself. \n   * <p>The boost is used to compute the norm factor for the field.  By\n   * default, in the {@link Similarity#computeNorm(FieldInvertState)} method, \n   * the boost value is multiplied by the length normalization factor and then\n   * rounded by {@link DefaultSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   * <p>\n   * It is illegal to return a boost other than 1.0f for a field that is not\n   * indexed ({@link IndexableFieldType#indexed()} is false) or omits normalization values\n   * ({@link IndexableFieldType#omitNorms()} returns true).\n   *\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see DefaultSimilarity#encodeNormValue(float)\n   */\n  public float boost();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","sourceNew":"  /** \n   * Returns the field's index-time boost.\n   * <p>\n   * Only fields can have an index-time boost, if you want to simulate\n   * a \"document boost\", then you must pre-multiply it across all the\n   * relevant fields yourself. \n   * <p>The boost is used to compute the norm factor for the field.  By\n   * default, in the {@link Similarity#computeNorm(FieldInvertState)} method, \n   * the boost value is multiplied by the length normalization factor and then\n   * rounded by {@link DefaultSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   * <p>\n   * It is illegal to return a boost other than 1.0f for a field that is not\n   * indexed ({@link IndexableFieldType#indexOptions()} is IndexOptions.NO) or\n   * omits normalization values ({@link IndexableFieldType#omitNorms()} returns true).\n   *\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see DefaultSimilarity#encodeNormValue(float)\n   */\n  public float boost();\n\n","sourceOld":"  /** \n   * Returns the field's index-time boost.\n   * <p>\n   * Only fields can have an index-time boost, if you want to simulate\n   * a \"document boost\", then you must pre-multiply it across all the\n   * relevant fields yourself. \n   * <p>The boost is used to compute the norm factor for the field.  By\n   * default, in the {@link Similarity#computeNorm(FieldInvertState)} method, \n   * the boost value is multiplied by the length normalization factor and then\n   * rounded by {@link DefaultSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   * <p>\n   * It is illegal to return a boost other than 1.0f for a field that is not\n   * indexed ({@link IndexableFieldType#indexOptions()} is null) or omits normalization values\n   * ({@link IndexableFieldType#omitNorms()} returns true).\n   *\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see DefaultSimilarity#encodeNormValue(float)\n   */\n  public float boost();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","sourceNew":"  /** \n   * Returns the field's index-time boost.\n   * <p>\n   * Only fields can have an index-time boost, if you want to simulate\n   * a \"document boost\", then you must pre-multiply it across all the\n   * relevant fields yourself. \n   * <p>The boost is used to compute the norm factor for the field.  By\n   * default, in the {@link Similarity#computeNorm(FieldInvertState)} method, \n   * the boost value is multiplied by the length normalization factor and then\n   * rounded by {@link DefaultSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   * <p>\n   * It is illegal to return a boost other than 1.0f for a field that is not\n   * indexed ({@link IndexableFieldType#indexOptions()} is IndexOptions.NONE) or\n   * omits normalization values ({@link IndexableFieldType#omitNorms()} returns true).\n   *\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see DefaultSimilarity#encodeNormValue(float)\n   */\n  public float boost();\n\n","sourceOld":"  /** \n   * Returns the field's index-time boost.\n   * <p>\n   * Only fields can have an index-time boost, if you want to simulate\n   * a \"document boost\", then you must pre-multiply it across all the\n   * relevant fields yourself. \n   * <p>The boost is used to compute the norm factor for the field.  By\n   * default, in the {@link Similarity#computeNorm(FieldInvertState)} method, \n   * the boost value is multiplied by the length normalization factor and then\n   * rounded by {@link DefaultSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   * <p>\n   * It is illegal to return a boost other than 1.0f for a field that is not\n   * indexed ({@link IndexableFieldType#indexOptions()} is IndexOptions.NO) or\n   * omits normalization values ({@link IndexableFieldType#omitNorms()} returns true).\n   *\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see DefaultSimilarity#encodeNormValue(float)\n   */\n  public float boost();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","sourceNew":"  /** \n   * Returns the field's index-time boost.\n   * <p>\n   * Only fields can have an index-time boost, if you want to simulate\n   * a \"document boost\", then you must pre-multiply it across all the\n   * relevant fields yourself. \n   * <p>The boost is used to compute the norm factor for the field.  By\n   * default, in the {@link Similarity#computeNorm(FieldInvertState)} method, \n   * the boost value is multiplied by the length normalization factor and then\n   * rounded by {@link ClassicSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   * <p>\n   * It is illegal to return a boost other than 1.0f for a field that is not\n   * indexed ({@link IndexableFieldType#indexOptions()} is IndexOptions.NONE) or\n   * omits normalization values ({@link IndexableFieldType#omitNorms()} returns true).\n   *\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see ClassicSimilarity#encodeNormValue(float)\n   */\n  public float boost();\n\n","sourceOld":"  /** \n   * Returns the field's index-time boost.\n   * <p>\n   * Only fields can have an index-time boost, if you want to simulate\n   * a \"document boost\", then you must pre-multiply it across all the\n   * relevant fields yourself. \n   * <p>The boost is used to compute the norm factor for the field.  By\n   * default, in the {@link Similarity#computeNorm(FieldInvertState)} method, \n   * the boost value is multiplied by the length normalization factor and then\n   * rounded by {@link DefaultSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   * <p>\n   * It is illegal to return a boost other than 1.0f for a field that is not\n   * indexed ({@link IndexableFieldType#indexOptions()} is IndexOptions.NONE) or\n   * omits normalization values ({@link IndexableFieldType#omitNorms()} returns true).\n   *\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see DefaultSimilarity#encodeNormValue(float)\n   */\n  public float boost();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexableField#boost().mjava","sourceNew":null,"sourceOld":"  /** \n   * Returns the field's index-time boost.\n   * <p>\n   * Only fields can have an index-time boost, if you want to simulate\n   * a \"document boost\", then you must pre-multiply it across all the\n   * relevant fields yourself. \n   * <p>The boost is used to compute the norm factor for the field.  By\n   * default, in the {@link Similarity#computeNorm(FieldInvertState)} method, \n   * the boost value is multiplied by the length normalization factor and then\n   * rounded by {@link ClassicSimilarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   * <p>\n   * It is illegal to return a boost other than 1.0f for a field that is not\n   * indexed ({@link IndexableFieldType#indexOptions()} is IndexOptions.NONE) or\n   * omits normalization values ({@link IndexableFieldType#omitNorms()} returns true).\n   *\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see ClassicSimilarity#encodeNormValue(float)\n   */\n  public float boost();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","c19721aa3bad7ccd93aa898c543e98a67fff7958"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"c19721aa3bad7ccd93aa898c543e98a67fff7958":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["d4d69c535930b5cce125cff868d40f6373dc27d4","3184874f7f3aca850248483485b4995343066875"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["c19721aa3bad7ccd93aa898c543e98a67fff7958","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["c19721aa3bad7ccd93aa898c543e98a67fff7958"],"acd9883560fd89e6448b2b447302fe543040cd4f":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["05a14b2611ead08655a2b2bdc61632eb31316e57","c19721aa3bad7ccd93aa898c543e98a67fff7958"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["acd9883560fd89e6448b2b447302fe543040cd4f"],"3184874f7f3aca850248483485b4995343066875":["2bb2842e561df4e8e9ad89010605fc86ac265465","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"c19721aa3bad7ccd93aa898c543e98a67fff7958":["05a14b2611ead08655a2b2bdc61632eb31316e57","d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3184874f7f3aca850248483485b4995343066875","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}