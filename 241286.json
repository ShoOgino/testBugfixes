{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCaseRunner#LuceneTestCaseRunner(Class[#]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCaseRunner#LuceneTestCaseRunner(Class[#]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCaseRunner#LuceneTestCaseRunner(Class[#]).mjava","sourceNew":"  public LuceneTestCaseRunner(Class<?> clazz) throws InitializationError {\n    super(clazz);\n    \n    // This TestRunner can handle only LuceneTestCase subclasses\n    if (!LuceneTestCase.class.isAssignableFrom(clazz)) {\n      throw new UnsupportedOperationException(\"LuceneTestCaseRunner can only be used with LuceneTestCase.\");\n    }\n    \n    final boolean useNoMemoryExpensiveCodec = LuceneTestCase.useNoMemoryExpensiveCodec =\n      clazz.isAnnotationPresent(UseNoMemoryExpensiveCodec.class);\n    if (useNoMemoryExpensiveCodec) {\n      System.err.println(\"NOTE: Using no memory expensive codecs (Memory, SimpleText) for \" +\n        clazz.getSimpleName() + \".\");\n    }\n    \n    // evil we cannot init our random here, because super() calls computeTestMethods!!!!;\n    Filter f = new Filter() {\n      \n      @Override\n      public String describe() { return \"filters according to TEST_METHOD\"; }\n      \n      @Override\n      public boolean shouldRun(Description d) {\n        return TEST_METHOD == null || d.getMethodName().equals(TEST_METHOD);\n      }\n    };\n    \n    try {\n      f.apply(this);\n    } catch (NoTestsRemainException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public LuceneTestCaseRunner(Class<?> clazz) throws InitializationError {\n    super(clazz);\n    \n    // This TestRunner can handle only LuceneTestCase subclasses\n    if (!LuceneTestCase.class.isAssignableFrom(clazz)) {\n      throw new UnsupportedOperationException(\"LuceneTestCaseRunner can only be used with LuceneTestCase.\");\n    }\n    \n    final boolean useNoMemoryExpensiveCodec = LuceneTestCase.useNoMemoryExpensiveCodec =\n      clazz.isAnnotationPresent(UseNoMemoryExpensiveCodec.class);\n    if (useNoMemoryExpensiveCodec) {\n      System.err.println(\"NOTE: Using no memory expensive codecs (Memory, SimpleText) for \" +\n        clazz.getSimpleName() + \".\");\n    }\n    \n    // evil we cannot init our random here, because super() calls computeTestMethods!!!!;\n    Filter f = new Filter() {\n      \n      @Override\n      public String describe() { return \"filters according to TEST_METHOD\"; }\n      \n      @Override\n      public boolean shouldRun(Description d) {\n        return TEST_METHOD == null || d.getMethodName().equals(TEST_METHOD);\n      }\n    };\n    \n    try {\n      f.apply(this);\n    } catch (NoTestsRemainException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCaseRunner#LuceneTestCaseRunner(Class[#]).mjava","sourceNew":null,"sourceOld":"  public LuceneTestCaseRunner(Class<?> clazz) throws InitializationError {\n    super(clazz);\n    \n    // This TestRunner can handle only LuceneTestCase subclasses\n    if (!LuceneTestCase.class.isAssignableFrom(clazz)) {\n      throw new UnsupportedOperationException(\"LuceneTestCaseRunner can only be used with LuceneTestCase.\");\n    }\n    \n    final boolean useNoMemoryExpensiveCodec = LuceneTestCase.useNoMemoryExpensiveCodec =\n      clazz.isAnnotationPresent(UseNoMemoryExpensiveCodec.class);\n    if (useNoMemoryExpensiveCodec) {\n      System.err.println(\"NOTE: Using no memory expensive codecs (Memory, SimpleText) for \" +\n        clazz.getSimpleName() + \".\");\n    }\n    \n    // evil we cannot init our random here, because super() calls computeTestMethods!!!!;\n    Filter f = new Filter() {\n      \n      @Override\n      public String describe() { return \"filters according to TEST_METHOD\"; }\n      \n      @Override\n      public boolean shouldRun(Description d) {\n        return TEST_METHOD == null || d.getMethodName().equals(TEST_METHOD);\n      }\n    };\n    \n    try {\n      f.apply(this);\n    } catch (NoTestsRemainException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}