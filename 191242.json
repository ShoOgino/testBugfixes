{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#testDuelMemoryIndexCoreDirectoryWithArrayField().mjava","commits":[{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#testDuelMemoryIndexCoreDirectoryWithArrayField().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuelMemoryIndexCoreDirectoryWithArrayField().mjava","sourceNew":"  public void testDuelMemoryIndexCoreDirectoryWithArrayField() throws Exception {\n\n    final String field_name = \"text\";\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    if (random().nextBoolean()) {\n      mockAnalyzer.setOffsetGap(random().nextInt(100));\n    }\n    //index into a random directory\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPayloads(false);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n\n    Document doc = new Document();\n    doc.add(new Field(field_name, \"la la\", type));\n    doc.add(new Field(field_name, \"foo bar foo bar foo\", type));\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n    writer.updateDocument(new Term(\"id\", \"1\"), doc);\n    writer.commit();\n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    //Index document in Memory index\n    MemoryIndex memIndex = new MemoryIndex(true);\n    memIndex.addField(field_name, \"la la\", mockAnalyzer);\n    memIndex.addField(field_name, \"foo bar foo bar foo\", mockAnalyzer);\n\n    //compare term vectors\n    Terms ramTv = reader.getTermVector(0, field_name);\n    IndexReader memIndexReader = memIndex.createSearcher().getIndexReader();\n    TestUtil.checkReader(memIndexReader);\n    Terms memTv = memIndexReader.getTermVector(0, field_name);\n\n    compareTermVectors(ramTv, memTv, field_name);\n    memIndexReader.close();\n    reader.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  public void testDuelMemoryIndexCoreDirectoryWithArrayField() throws Exception {\n\n    final String field_name = \"text\";\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    if (random().nextBoolean()) {\n      mockAnalyzer.setOffsetGap(random().nextInt(100));\n    }\n    //index into a random directory\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPayloads(false);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n\n    Document doc = new Document();\n    doc.add(new Field(field_name, \"la la\", type));\n    doc.add(new Field(field_name, \"foo bar foo bar foo\", type));\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n    writer.updateDocument(new Term(\"id\", \"1\"), doc);\n    writer.commit();\n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    //Index document in Memory index\n    MemoryIndex memIndex = new MemoryIndex(true);\n    memIndex.addField(field_name, \"la la\", mockAnalyzer);\n    memIndex.addField(field_name, \"foo bar foo bar foo\", mockAnalyzer);\n\n    //compare term vectors\n    Terms ramTv = reader.getTermVector(0, field_name);\n    IndexReader memIndexReader = memIndex.createSearcher().getIndexReader();\n    TestUtil.checkReader(memIndexReader);\n    Terms memTv = memIndexReader.getTermVector(0, field_name);\n\n    compareTermVectors(ramTv, memTv, field_name);\n    memIndexReader.close();\n    reader.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d77dafd89756a5161d244985903e3487ca109182"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}