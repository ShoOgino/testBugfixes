{"path":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","commits":[{"id":"27785308abb8944af28e85eeacd67a8db055dd76","date":1421424050,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],String,long).mjava","sourceNew":"  public static Map testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrClient cloudSolrServer,List<String> jsonPath,\n                                            Object expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(MessageFormat.format(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(m)), success);\n    return m;\n  }\n\n","sourceOld":"  public static Map testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrClient cloudSolrServer,List<String> jsonPath,\n                                            String expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(MessageFormat.format(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(m)), success);\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1","date":1423220905,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","sourceNew":"  public static Map testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrClient cloudSolrServer,List<String> jsonPath,\n                                            Object expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(MessageFormat.format(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2}\", expected, StrUtils.join(jsonPath, '/'), getAsString(m)), success);\n    return m;\n  }\n\n","sourceOld":"  public static Map testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrClient cloudSolrServer,List<String> jsonPath,\n                                            Object expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(MessageFormat.format(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(m)), success);\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bdb19206b4aeab66b9fb393c53969f44bdd48be","date":1426629125,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","sourceNew":"  public static Map testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrClient cloudSolrServer,List<String> jsonPath,\n                                            Object expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(StrUtils.formatString(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2}\", expected, StrUtils.join(jsonPath, '/'), getAsString(m)), success);\n    return m;\n  }\n\n","sourceOld":"  public static Map testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrClient cloudSolrServer,List<String> jsonPath,\n                                            Object expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(MessageFormat.format(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2}\", expected, StrUtils.join(jsonPath, '/'), getAsString(m)), success);\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","sourceNew":"  public static Map testForResponseElement(RestTestHarness harness,\n                                           String testServerBaseUrl,\n                                           String uri,\n                                           CloudSolrClient cloudSolrServer, List<String> jsonPath,\n                                           Object expected,\n                                           long maxTimeoutSeconds) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl == null ? getRespMap(uri, harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer);\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if (Objects.equals(expected, ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(StrUtils.formatString(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2}\", expected, StrUtils.join(jsonPath, '/'), getAsString(m)), success);\n    return m;\n  }\n\n","sourceOld":"  public static Map testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrClient cloudSolrServer,List<String> jsonPath,\n                                            Object expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(StrUtils.formatString(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2}\", expected, StrUtils.join(jsonPath, '/'), getAsString(m)), success);\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","sourceNew":"  public static Map testForResponseElement(RestTestHarness harness,\n                                           String testServerBaseUrl,\n                                           String uri,\n                                           CloudSolrClient cloudSolrServer, List<String> jsonPath,\n                                           Object expected,\n                                           long maxTimeoutSeconds) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl == null ? getRespMap(uri, harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer);\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if (Objects.equals(expected, ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(StrUtils.formatString(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2}\", expected, StrUtils.join(jsonPath, '/'), getAsString(m)), success);\n    return m;\n  }\n\n","sourceOld":"  public static Map testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrClient cloudSolrServer,List<String> jsonPath,\n                                            Object expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(MessageFormat.format(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2}\", expected, StrUtils.join(jsonPath, '/'), getAsString(m)), success);\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","sourceNew":"  public static Map testForResponseElement(RestTestHarness harness,\n                                           String testServerBaseUrl,\n                                           String uri,\n                                           CloudSolrClient cloudSolrClient, List<String> jsonPath,\n                                           Object expected,\n                                           long maxTimeoutSeconds) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl == null ? getRespMap(uri, harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if (Objects.equals(expected, ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(StrUtils.formatString(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2}\", expected, StrUtils.join(jsonPath, '/'), getAsString(m)), success);\n    return m;\n  }\n\n","sourceOld":"  public static Map testForResponseElement(RestTestHarness harness,\n                                           String testServerBaseUrl,\n                                           String uri,\n                                           CloudSolrClient cloudSolrServer, List<String> jsonPath,\n                                           Object expected,\n                                           long maxTimeoutSeconds) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl == null ? getRespMap(uri, harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer);\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if (Objects.equals(expected, ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(StrUtils.formatString(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2}\", expected, StrUtils.join(jsonPath, '/'), getAsString(m)), success);\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","sourceNew":"  public static Map testForResponseElement(RestTestHarness harness,\n                                           String testServerBaseUrl,\n                                           String uri,\n                                           CloudSolrClient cloudSolrClient, List<String> jsonPath,\n                                           Object expected,\n                                           long maxTimeoutSeconds) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl == null ? getRespMap(uri, harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if (Objects.equals(expected, Utils.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(StrUtils.formatString(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2}\", expected, StrUtils.join(jsonPath, '/'), getAsString(m)), success);\n    return m;\n  }\n\n","sourceOld":"  public static Map testForResponseElement(RestTestHarness harness,\n                                           String testServerBaseUrl,\n                                           String uri,\n                                           CloudSolrClient cloudSolrClient, List<String> jsonPath,\n                                           Object expected,\n                                           long maxTimeoutSeconds) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl == null ? getRespMap(uri, harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if (Objects.equals(expected, ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(StrUtils.formatString(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2}\", expected, StrUtils.join(jsonPath, '/'), getAsString(m)), success);\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"619ceb4446a666324607291c6fc5a1a0621874d8","date":1460988847,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","sourceNew":"  public static Map testForResponseElement(RestTestHarness harness,\n                                           String testServerBaseUrl,\n                                           String uri,\n                                           CloudSolrClient cloudSolrClient, List<String> jsonPath,\n                                           Object expected,\n                                           long maxTimeoutSeconds) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl == null ? getRespMap(uri, harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if (Objects.equals(expected, Utils.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(StrUtils.formatString(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2},  from server:  {3}\", expected, StrUtils.join(jsonPath, '/'), getAsString(m), testServerBaseUrl), success);\n\n    return m;\n  }\n\n","sourceOld":"  public static Map testForResponseElement(RestTestHarness harness,\n                                           String testServerBaseUrl,\n                                           String uri,\n                                           CloudSolrClient cloudSolrClient, List<String> jsonPath,\n                                           Object expected,\n                                           long maxTimeoutSeconds) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl == null ? getRespMap(uri, harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if (Objects.equals(expected, Utils.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(StrUtils.formatString(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2}\", expected, StrUtils.join(jsonPath, '/'), getAsString(m)), success);\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","sourceNew":"  public static Map testForResponseElement(RestTestHarness harness,\n                                           String testServerBaseUrl,\n                                           String uri,\n                                           CloudSolrClient cloudSolrClient, List<String> jsonPath,\n                                           Object expected,\n                                           long maxTimeoutSeconds) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl == null ? getRespMap(uri, harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if (Objects.equals(expected, Utils.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(StrUtils.formatString(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2},  from server:  {3}\", expected, StrUtils.join(jsonPath, '/'), getAsString(m), testServerBaseUrl), success);\n\n    return m;\n  }\n\n","sourceOld":"  public static Map testForResponseElement(RestTestHarness harness,\n                                           String testServerBaseUrl,\n                                           String uri,\n                                           CloudSolrClient cloudSolrClient, List<String> jsonPath,\n                                           Object expected,\n                                           long maxTimeoutSeconds) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl == null ? getRespMap(uri, harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if (Objects.equals(expected, Utils.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(StrUtils.formatString(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2}\", expected, StrUtils.join(jsonPath, '/'), getAsString(m)), success);\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","sourceNew":"  public static Map testForResponseElement(RestTestHarness harness,\n                                           String testServerBaseUrl,\n                                           String uri,\n                                           CloudSolrClient cloudSolrClient, List<String> jsonPath,\n                                           Object expected,\n                                           long maxTimeoutSeconds) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl == null ? getRespMap(uri, harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      Object actual = Utils.getObjectByPath(m, false, jsonPath);\n\n      if (expected instanceof ValidatingJsonMap.PredicateWithErrMsg) {\n        ValidatingJsonMap.PredicateWithErrMsg predicate = (ValidatingJsonMap.PredicateWithErrMsg) expected;\n        if (predicate.test(actual) == null) {\n          success = true;\n          break;\n        }\n\n      } else {\n        if (Objects.equals(expected, actual)) {\n          success = true;\n          break;\n        }\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(StrUtils.formatString(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2},  from server:  {3}\", expected, StrUtils.join(jsonPath, '/'), getAsString(m), testServerBaseUrl), success);\n\n    return m;\n  }\n\n","sourceOld":"  public static Map testForResponseElement(RestTestHarness harness,\n                                           String testServerBaseUrl,\n                                           String uri,\n                                           CloudSolrClient cloudSolrClient, List<String> jsonPath,\n                                           Object expected,\n                                           long maxTimeoutSeconds) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl == null ? getRespMap(uri, harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if (Objects.equals(expected, Utils.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(StrUtils.formatString(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2},  from server:  {3}\", expected, StrUtils.join(jsonPath, '/'), getAsString(m), testServerBaseUrl), success);\n\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","sourceNew":"  public static Map testForResponseElement(RestTestHarness harness,\n                                           String testServerBaseUrl,\n                                           String uri,\n                                           CloudSolrClient cloudSolrClient, List<String> jsonPath,\n                                           Object expected,\n                                           long maxTimeoutSeconds) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl == null ? getRespMap(uri, harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      Object actual = Utils.getObjectByPath(m, false, jsonPath);\n\n      if (expected instanceof ValidatingJsonMap.PredicateWithErrMsg) {\n        ValidatingJsonMap.PredicateWithErrMsg predicate = (ValidatingJsonMap.PredicateWithErrMsg) expected;\n        if (predicate.test(actual) == null) {\n          success = true;\n          break;\n        }\n\n      } else {\n        if (Objects.equals(expected, actual)) {\n          success = true;\n          break;\n        }\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(StrUtils.formatString(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2},  from server:  {3}\", expected, StrUtils.join(jsonPath, '/'), getAsString(m), testServerBaseUrl), success);\n\n    return m;\n  }\n\n","sourceOld":"  public static Map testForResponseElement(RestTestHarness harness,\n                                           String testServerBaseUrl,\n                                           String uri,\n                                           CloudSolrClient cloudSolrClient, List<String> jsonPath,\n                                           Object expected,\n                                           long maxTimeoutSeconds) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl == null ? getRespMap(uri, harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if (Objects.equals(expected, Utils.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(StrUtils.formatString(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2},  from server:  {3}\", expected, StrUtils.join(jsonPath, '/'), getAsString(m), testServerBaseUrl), success);\n\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c9780b447ddf847479e7fa9978cb7809a15a0bf","date":1538692320,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","sourceNew":"  public static LinkedHashMapWriter testForResponseElement(RestTestHarness harness,\n                                           String testServerBaseUrl,\n                                           String uri,\n                                           CloudSolrClient cloudSolrClient, List<String> jsonPath,\n                                           Object expected,\n                                           long maxTimeoutSeconds) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    LinkedHashMapWriter m = null;\n\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl == null ? getRespMap(uri, harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      Object actual = Utils.getObjectByPath(m, false, jsonPath);\n\n      if (expected instanceof ValidatingJsonMap.PredicateWithErrMsg) {\n        ValidatingJsonMap.PredicateWithErrMsg predicate = (ValidatingJsonMap.PredicateWithErrMsg) expected;\n        if (predicate.test(actual) == null) {\n          success = true;\n          break;\n        }\n\n      } else {\n        if (Objects.equals(expected, actual)) {\n          success = true;\n          break;\n        }\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(StrUtils.formatString(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2},  from server:  {3}\", expected, StrUtils.join(jsonPath, '/'), m.toString(), testServerBaseUrl), success);\n\n    return m;\n  }\n\n","sourceOld":"  public static Map testForResponseElement(RestTestHarness harness,\n                                           String testServerBaseUrl,\n                                           String uri,\n                                           CloudSolrClient cloudSolrClient, List<String> jsonPath,\n                                           Object expected,\n                                           long maxTimeoutSeconds) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl == null ? getRespMap(uri, harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      Object actual = Utils.getObjectByPath(m, false, jsonPath);\n\n      if (expected instanceof ValidatingJsonMap.PredicateWithErrMsg) {\n        ValidatingJsonMap.PredicateWithErrMsg predicate = (ValidatingJsonMap.PredicateWithErrMsg) expected;\n        if (predicate.test(actual) == null) {\n          success = true;\n          break;\n        }\n\n      } else {\n        if (Objects.equals(expected, actual)) {\n          success = true;\n          break;\n        }\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(StrUtils.formatString(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2},  from server:  {3}\", expected, StrUtils.join(jsonPath, '/'), getAsString(m), testServerBaseUrl), success);\n\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static LinkedHashMapWriter testForResponseElement(RestTestHarness harness,\n                                           String testServerBaseUrl,\n                                           String uri,\n                                           CloudSolrClient cloudSolrClient, List<String> jsonPath,\n                                           Object expected,\n                                           long maxTimeoutSeconds) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    LinkedHashMapWriter m = null;\n\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl == null ? getRespMap(uri, harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      Object actual = Utils.getObjectByPath(m, false, jsonPath);\n\n      if (expected instanceof ValidatingJsonMap.PredicateWithErrMsg) {\n        ValidatingJsonMap.PredicateWithErrMsg predicate = (ValidatingJsonMap.PredicateWithErrMsg) expected;\n        if (predicate.test(actual) == null) {\n          success = true;\n          break;\n        }\n\n      } else {\n        if (Objects.equals(expected, actual)) {\n          success = true;\n          break;\n        }\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(StrUtils.formatString(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2},  from server:  {3}\", expected, StrUtils.join(jsonPath, '/'), m.toString(), testServerBaseUrl), success);\n\n    return m;\n  }\n\n","sourceOld":"  public static LinkedHashMapWriter testForResponseElement(RestTestHarness harness,\n                                           String testServerBaseUrl,\n                                           String uri,\n                                           CloudSolrClient cloudSolrClient, List<String> jsonPath,\n                                           Object expected,\n                                           long maxTimeoutSeconds) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    LinkedHashMapWriter m = null;\n\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl == null ? getRespMap(uri, harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      Object actual = Utils.getObjectByPath(m, false, jsonPath);\n\n      if (expected instanceof ValidatingJsonMap.PredicateWithErrMsg) {\n        ValidatingJsonMap.PredicateWithErrMsg predicate = (ValidatingJsonMap.PredicateWithErrMsg) expected;\n        if (predicate.test(actual) == null) {\n          success = true;\n          break;\n        }\n\n      } else {\n        if (Objects.equals(expected, actual)) {\n          success = true;\n          break;\n        }\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(StrUtils.formatString(\"Could not get expected value  ''{0}'' for path ''{1}'' full output: {2},  from server:  {3}\", expected, StrUtils.join(jsonPath, '/'), m.toString(), testServerBaseUrl), success);\n\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"619ceb4446a666324607291c6fc5a1a0621874d8":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["713122036535651642e6d4fe57ce12b449e18473"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["713122036535651642e6d4fe57ce12b449e18473","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"27785308abb8944af28e85eeacd67a8db055dd76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"e98520789adb1d5ad05afb4956eca0944a929688":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"713122036535651642e6d4fe57ce12b449e18473":["b693a83132c9e45afcd564fd65a25b60ed80388b","619ceb4446a666324607291c6fc5a1a0621874d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1":["27785308abb8944af28e85eeacd67a8db055dd76"],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"]},"commit2Childs":{"619ceb4446a666324607291c6fc5a1a0621874d8":["713122036535651642e6d4fe57ce12b449e18473"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"27785308abb8944af28e85eeacd67a8db055dd76":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["619ceb4446a666324607291c6fc5a1a0621874d8","713122036535651642e6d4fe57ce12b449e18473"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["e98520789adb1d5ad05afb4956eca0944a929688"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["86290366cefc1b9d4eced13b430858c4a4c0421d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"713122036535651642e6d4fe57ce12b449e18473":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27785308abb8944af28e85eeacd67a8db055dd76"],"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}