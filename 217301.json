{"path":"src/java/org/apache/solr/util/AbstractSolrTestCase#assertQ(String,SolrQueryRequest,String...).mjava","commits":[{"id":"f66f1826f07774581d2ec661444fc987bdd1a85d","date":1144730206,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/AbstractSolrTestCase#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"/dev/null","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n      String results = h.validateXPath(response, tests);\n      if (null != results) {\n        fail(m + \"query failed XPath: \" + results +\n             \" xml response was: \" + response);\n      }\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c","date":1249333745,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/AbstractSolrTestCase#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"src/java/org/apache/solr/util/AbstractSolrTestCase#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n      String results = h.validateXPath(response, tests);\n      if (null != results) {\n        fail(m + \"query failed XPath: \" + results +\n             \"\\n xml response was: \" + response +\n             \"\\n request was: \" + req.getParamString());\n      }\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n      String results = h.validateXPath(response, tests);\n      if (null != results) {\n        fail(m + \"query failed XPath: \" + results +\n             \" xml response was: \" + response);\n      }\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/AbstractSolrTestCase#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"src/java/org/apache/solr/util/AbstractSolrTestCase#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n      String results = h.validateXPath(response, tests);\n      if (null != results) {\n        fail(m + \"query failed XPath: \" + results +\n             \"\\n xml response was: \" + response +\n             \"\\n request was: \" + req.getParamString());\n      }\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n      String results = h.validateXPath(response, tests);\n      if (null != results) {\n        fail(m + \"query failed XPath: \" + results +\n             \"\\n xml response was: \" + response +\n             \"\\n request was: \" + req.getParamString());\n      }\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["f66f1826f07774581d2ec661444fc987bdd1a85d"],"ad94625fb8d088209f46650c8097196fec67f00c":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"f66f1826f07774581d2ec661444fc987bdd1a85d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f66f1826f07774581d2ec661444fc987bdd1a85d"],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"f66f1826f07774581d2ec661444fc987bdd1a85d":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}