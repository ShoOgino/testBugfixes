{"path":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","commits":[{"id":"46855a2e3c096d06b604f73733ed9fefa822ba45","date":1305654486,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"/dev/null","sourceNew":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.closeSafely(in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f592e183306e8e4efabf3e7e08d3e709c9b97dbb","66ad5d52334c6be735b490059924589a69b97bd6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"/dev/null","sourceNew":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.closeSafely(in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"/dev/null","sourceNew":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.closeSafely(in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","sourceNew":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.closeSafely(false, in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.closeSafely(in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","sourceNew":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.closeSafely(false, in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.closeSafely(in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","sourceNew":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.closeSafely(false, in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.closeSafely(in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","sourceNew":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    IOContext context = IOContext.DEFAULT;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName, context);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.closeSafely(false, in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.closeSafely(false, in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f592e183306e8e4efabf3e7e08d3e709c9b97dbb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","sourceNew":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    IOContext context = IOContext.DEFAULT;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName, context);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.closeSafely(false, in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.closeSafely(false, in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","sourceNew":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    IOContext context = IOContext.DEFAULT;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName, context);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.closeSafely(false, in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.closeSafely(false, in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","sourceNew":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    IOContext context = IOContext.DEFAULT;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName, context);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    IOContext context = IOContext.DEFAULT;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName, context);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.closeSafely(false, in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f592e183306e8e4efabf3e7e08d3e709c9b97dbb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","sourceNew":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    IOContext context = IOContext.DEFAULT;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName, context);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    IOContext context = IOContext.DEFAULT;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName, context);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["24230fe54121f9be9d85f2c2067536296785e421"],"efb7a19703a037c29e30440260d393500febc1f4":["46855a2e3c096d06b604f73733ed9fefa822ba45"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["efb7a19703a037c29e30440260d393500febc1f4"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46855a2e3c096d06b604f73733ed9fefa822ba45"],"46855a2e3c096d06b604f73733ed9fefa822ba45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","efb7a19703a037c29e30440260d393500febc1f4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46855a2e3c096d06b604f73733ed9fefa822ba45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["efb7a19703a037c29e30440260d393500febc1f4","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["c3a8a449466c1ff7ce2274fe73dab487256964b4","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"efb7a19703a037c29e30440260d393500febc1f4":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"46855a2e3c096d06b604f73733ed9fefa822ba45":["efb7a19703a037c29e30440260d393500febc1f4","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3a8a449466c1ff7ce2274fe73dab487256964b4","46855a2e3c096d06b604f73733ed9fefa822ba45","a3776dccca01c11e7046323cfad46a3b4a471233"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["24230fe54121f9be9d85f2c2067536296785e421","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}