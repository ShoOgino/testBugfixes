{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestLucene80DocValuesFormat#assertDVAdvance(Directory,int).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestLucene80DocValuesFormat#assertDVAdvance(Directory,int).mjava","pathOld":"/dev/null","sourceNew":"  // Tests that advanceExact does not change the outcome\n  private void assertDVAdvance(Directory dir, int jumpStep) throws IOException {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n\n\n      for (int jump = jumpStep; jump < r.maxDoc(); jump += jumpStep) {\n        // Create a new instance each time to ensure jumps from the beginning\n        NumericDocValues docValues = DocValues.getNumeric(r, \"dv\");\n        for (int docID = 0; docID < r.maxDoc(); docID += jump) {\n          String base = \"document #\" + docID + \"/\" + r.maxDoc() + \", jumping \" + jump + \" from #\" + (docID-jump);\n          String storedValue = r.document(docID).get(\"stored\");\n          if (storedValue == null) {\n            assertFalse(\"There should be no DocValue for \" + base,\n                docValues.advanceExact(docID));\n          } else {\n            assertTrue(\"There should be a DocValue for \" + base,\n                docValues.advanceExact(docID));\n            assertEquals(\"The doc value should be correct for \" + base,\n                Long.parseLong(storedValue), docValues.longValue());\n          }\n        }\n      }\n    }\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestLucene80DocValuesFormat#assertDVAdvance(Directory,int).mjava","pathOld":"/dev/null","sourceNew":"  // Tests that advanceExact does not change the outcome\n  private void assertDVAdvance(Directory dir, int jumpStep) throws IOException {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n\n\n      for (int jump = jumpStep; jump < r.maxDoc(); jump += jumpStep) {\n        // Create a new instance each time to ensure jumps from the beginning\n        NumericDocValues docValues = DocValues.getNumeric(r, \"dv\");\n        for (int docID = 0; docID < r.maxDoc(); docID += jump) {\n          String base = \"document #\" + docID + \"/\" + r.maxDoc() + \", jumping \" + jump + \" from #\" + (docID-jump);\n          String storedValue = r.document(docID).get(\"stored\");\n          if (storedValue == null) {\n            assertFalse(\"There should be no DocValue for \" + base,\n                docValues.advanceExact(docID));\n          } else {\n            assertTrue(\"There should be a DocValue for \" + base,\n                docValues.advanceExact(docID));\n            assertEquals(\"The doc value should be correct for \" + base,\n                Long.parseLong(storedValue), docValues.longValue());\n          }\n        }\n      }\n    }\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}