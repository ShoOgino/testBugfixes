{"path":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,Path,boolean,boolean).mjava","commits":[{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,Path,boolean,boolean).mjava","pathOld":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","sourceNew":"  private static void assertTrie(Trie trie, Path file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(Files.newBufferedReader(file, StandardCharsets.UTF_8));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase(Locale.ROOT);\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n    \n    in.close();\n  }\n\n","sourceOld":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase(Locale.ROOT);\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n    \n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}