{"path":"src/test/org/apache/lucene/search/TestRangeQuery#testInclusiveLowerNull().mjava","commits":[{"id":"b2fb505771490554b1a5e69d387ea0fe25796299","date":1226570890,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRangeQuery#testInclusiveLowerNull().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-38\n  public void testInclusiveLowerNull() throws Exception {\n    //http://issues.apache.org/jira/browse/LUCENE-38\n    Analyzer analyzer = new SingleCharAnalyzer();\n    Query query = new RangeQuery(null,\n                                 new Term(\"content\", \"C\"),\n                                 true);\n    initializeIndex(new String[]{\"A\", \"B\", \"\",\"C\", \"D\"}, analyzer);\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(query);\n    // When Lucene-38 is fixed, use the assert on the next line:\n    assertEquals(\"A,B,<empty string>,C,D => A,B,<empty string>,C in range\", 4, hits.length());\n    // until Lucene-38 is fixed, use this assert\n    //assertEquals(\"A,B,<empty string>,C,D => A,B,<empty string>,C in range\", 3, hits.length());\n    searcher.close();\n    initializeIndex(new String[]{\"A\", \"B\", \"\", \"D\"}, analyzer);\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query);\n    // When Lucene-38 is fixed, use the assert on the next line:\n    assertEquals(\"A,B,<empty string>,D - A, B and <empty string> in range\", 3, hits.length());\n    // until Lucene-38 is fixed, use this assert\n    //assertEquals(\"A,B,<empty string>,D => A, B and <empty string> in range\", 2, hits.length());\n    searcher.close();\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query);\n    // When Lucene-38 is fixed, use the assert on the next line:\n    assertEquals(\"C added => A,B,<empty string>,C in range\", 4, hits.length());\n    // until Lucene-38 is fixed, use this assert\n    //assertEquals(\"C added => A,B,<empty string>,C in range\", 3, hits.length());\n     searcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusiveLowerNull().mjava","pathOld":"src/test/org/apache/lucene/search/TestRangeQuery#testInclusiveLowerNull().mjava","sourceNew":"  // LUCENE-38\n  public void testInclusiveLowerNull() throws Exception {\n    //http://issues.apache.org/jira/browse/LUCENE-38\n    Analyzer analyzer = new SingleCharAnalyzer();\n    Query query = new TermRangeQuery(\"content\", null, \"C\", true, true);\n    initializeIndex(new String[]{\"A\", \"B\", \"\",\"C\", \"D\"}, analyzer);\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(query);\n    // When Lucene-38 is fixed, use the assert on the next line:\n    assertEquals(\"A,B,<empty string>,C,D => A,B,<empty string>,C in range\", 4, hits.length());\n    // until Lucene-38 is fixed, use this assert\n    //assertEquals(\"A,B,<empty string>,C,D => A,B,<empty string>,C in range\", 3, hits.length());\n    searcher.close();\n    initializeIndex(new String[]{\"A\", \"B\", \"\", \"D\"}, analyzer);\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query);\n    // When Lucene-38 is fixed, use the assert on the next line:\n    assertEquals(\"A,B,<empty string>,D - A, B and <empty string> in range\", 3, hits.length());\n    // until Lucene-38 is fixed, use this assert\n    //assertEquals(\"A,B,<empty string>,D => A, B and <empty string> in range\", 2, hits.length());\n    searcher.close();\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query);\n    // When Lucene-38 is fixed, use the assert on the next line:\n    assertEquals(\"C added => A,B,<empty string>,C in range\", 4, hits.length());\n    // until Lucene-38 is fixed, use this assert\n    //assertEquals(\"C added => A,B,<empty string>,C in range\", 3, hits.length());\n     searcher.close();\n  }\n\n","sourceOld":"  // LUCENE-38\n  public void testInclusiveLowerNull() throws Exception {\n    //http://issues.apache.org/jira/browse/LUCENE-38\n    Analyzer analyzer = new SingleCharAnalyzer();\n    Query query = new RangeQuery(null,\n                                 new Term(\"content\", \"C\"),\n                                 true);\n    initializeIndex(new String[]{\"A\", \"B\", \"\",\"C\", \"D\"}, analyzer);\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(query);\n    // When Lucene-38 is fixed, use the assert on the next line:\n    assertEquals(\"A,B,<empty string>,C,D => A,B,<empty string>,C in range\", 4, hits.length());\n    // until Lucene-38 is fixed, use this assert\n    //assertEquals(\"A,B,<empty string>,C,D => A,B,<empty string>,C in range\", 3, hits.length());\n    searcher.close();\n    initializeIndex(new String[]{\"A\", \"B\", \"\", \"D\"}, analyzer);\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query);\n    // When Lucene-38 is fixed, use the assert on the next line:\n    assertEquals(\"A,B,<empty string>,D - A, B and <empty string> in range\", 3, hits.length());\n    // until Lucene-38 is fixed, use this assert\n    //assertEquals(\"A,B,<empty string>,D => A, B and <empty string> in range\", 2, hits.length());\n    searcher.close();\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query);\n    // When Lucene-38 is fixed, use the assert on the next line:\n    assertEquals(\"C added => A,B,<empty string>,C in range\", 4, hits.length());\n    // until Lucene-38 is fixed, use this assert\n    //assertEquals(\"C added => A,B,<empty string>,C in range\", 3, hits.length());\n     searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b2fb505771490554b1a5e69d387ea0fe25796299":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["b2fb505771490554b1a5e69d387ea0fe25796299"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f612096ab5275c4821d05f126bf45a89f4782b8"]},"commit2Childs":{"b2fb505771490554b1a5e69d387ea0fe25796299":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2fb505771490554b1a5e69d387ea0fe25796299"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}