{"path":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoBean.Category,String,Map[String,Counter]).mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoBean.Category,String,Map[String,Counter]).mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoMBean.Category,String,Map[String,Counter]).mjava","sourceNew":"  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoBean.Category category, String scope, Map<String, Counter> metrics) {\n    return new SolrMetricProducer() {\n      @Override\n      public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n        if (category == null) {\n          throw new IllegalArgumentException(\"null category\");\n        }\n        if (metrics == null || metrics.isEmpty()) {\n          return;\n        }\n        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n          manager.counter(null, registry, entry.getKey(), category.toString(), scope);\n        }\n      }\n\n      @Override\n      public String toString() {\n        return \"SolrMetricProducer.of{\" +\n            \"\\ncategory=\" + category +\n            \"\\nscope=\" + scope +\n            \"\\nmetrics=\" + metrics +\n            \"\\n}\";\n      }\n    };\n  }\n\n","sourceOld":"  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoMBean.Category category, String scope, Map<String, Counter> metrics) {\n    return new SolrMetricProducer() {\n      @Override\n      public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n        if (category == null) {\n          throw new IllegalArgumentException(\"null category\");\n        }\n        if (metrics == null || metrics.isEmpty()) {\n          return;\n        }\n        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n          manager.counter(registry, entry.getKey(), category.toString(), scope);\n        }\n      }\n\n      @Override\n      public String toString() {\n        return \"SolrMetricProducer.of{\" +\n            \"\\ncategory=\" + category +\n            \"\\nscope=\" + scope +\n            \"\\nmetrics=\" + metrics +\n            \"\\n}\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoBean.Category,String,Map[String,Counter]).mjava","pathOld":"/dev/null","sourceNew":"  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoBean.Category category, String scope, Map<String, Counter> metrics) {\n    return new SolrMetricProducer() {\n      @Override\n      public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n        if (category == null) {\n          throw new IllegalArgumentException(\"null category\");\n        }\n        if (metrics == null || metrics.isEmpty()) {\n          return;\n        }\n        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n          manager.counter(null, registry, entry.getKey(), category.toString(), scope);\n        }\n      }\n\n      @Override\n      public String toString() {\n        return \"SolrMetricProducer.of{\" +\n            \"\\ncategory=\" + category +\n            \"\\nscope=\" + scope +\n            \"\\nmetrics=\" + metrics +\n            \"\\n}\";\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoBean.Category,String,Map[String,Counter]).mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoBean.Category,String,Map[String,Counter]).mjava","sourceNew":"  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoBean.Category category, String scope, Map<String, Counter> metrics) {\n    return new SolrMetricProducer() {\n      @Override\n      public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n        if (category == null) {\n          throw new IllegalArgumentException(\"null category\");\n        }\n        if (metrics == null || metrics.isEmpty()) {\n          return;\n        }\n        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n          manager.counter(null, registry, entry.getKey(), category.toString(), scope);\n        }\n      }\n\n      @Override\n      public String toString() {\n        return \"SolrMetricProducer.of{\" +\n            \"\\ncategory=\" + category +\n            \"\\nscope=\" + scope +\n            \"\\nmetrics=\" + metrics +\n            \"\\n}\";\n      }\n    };\n  }\n\n","sourceOld":"  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoBean.Category category, String scope, Map<String, Counter> metrics) {\n    return new SolrMetricProducer() {\n      @Override\n      public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n        if (category == null) {\n          throw new IllegalArgumentException(\"null category\");\n        }\n        if (metrics == null || metrics.isEmpty()) {\n          return;\n        }\n        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n          manager.counter(null, registry, entry.getKey(), category.toString(), scope);\n        }\n      }\n\n      @Override\n      public String toString() {\n        return \"SolrMetricProducer.of{\" +\n            \"\\ncategory=\" + category +\n            \"\\nscope=\" + scope +\n            \"\\nmetrics=\" + metrics +\n            \"\\n}\";\n      }\n    };\n  }\n\n","bugFix":["d646b44d1d17a867bcd0e7a07b11c4837b169366"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoBean.Category,String,Map[String,Counter]).mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoBean.Category,String,Map[String,Counter]).mjava","sourceNew":"  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoBean.Category category, String scope, Map<String, Counter> metrics) {\n    return new SolrMetricProducer() {\n      @Override\n      public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n        if (category == null) {\n          throw new IllegalArgumentException(\"null category\");\n        }\n        if (metrics == null || metrics.isEmpty()) {\n          return;\n        }\n        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n          manager.counter(null, registry, entry.getKey(), category.toString(), scope);\n        }\n      }\n\n      @Override\n      public String toString() {\n        return \"SolrMetricProducer.of{\" +\n            \"\\ncategory=\" + category +\n            \"\\nscope=\" + scope +\n            \"\\nmetrics=\" + metrics +\n            \"\\n}\";\n      }\n    };\n  }\n\n","sourceOld":"  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoBean.Category category, String scope, Map<String, Counter> metrics) {\n    return new SolrMetricProducer() {\n      @Override\n      public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n        if (category == null) {\n          throw new IllegalArgumentException(\"null category\");\n        }\n        if (metrics == null || metrics.isEmpty()) {\n          return;\n        }\n        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n          manager.counter(null, registry, entry.getKey(), category.toString(), scope);\n        }\n      }\n\n      @Override\n      public String toString() {\n        return \"SolrMetricProducer.of{\" +\n            \"\\ncategory=\" + category +\n            \"\\nscope=\" + scope +\n            \"\\nmetrics=\" + metrics +\n            \"\\n}\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoBean.Category,String,Map[String,Counter]).mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoBean.Category,String,Map[String,Counter]).mjava","sourceNew":"  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoBean.Category category, String scope, Map<String, Counter> metrics) {\n    return new SolrMetricProducer() {\n      @Override\n      public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n        if (category == null) {\n          throw new IllegalArgumentException(\"null category\");\n        }\n        if (metrics == null || metrics.isEmpty()) {\n          return;\n        }\n        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n          parentContext.counter(null, entry.getKey(), category.toString(), scope);\n        }\n      }\n\n      @Override\n      public String toString() {\n        return \"SolrMetricProducer.of{\" +\n            \"\\ncategory=\" + category +\n            \"\\nscope=\" + scope +\n            \"\\nmetrics=\" + metrics +\n            \"\\n}\";\n      }\n    };\n  }\n\n","sourceOld":"  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoBean.Category category, String scope, Map<String, Counter> metrics) {\n    return new SolrMetricProducer() {\n      @Override\n      public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n        if (category == null) {\n          throw new IllegalArgumentException(\"null category\");\n        }\n        if (metrics == null || metrics.isEmpty()) {\n          return;\n        }\n        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n          manager.counter(null, registry, entry.getKey(), category.toString(), scope);\n        }\n      }\n\n      @Override\n      public String toString() {\n        return \"SolrMetricProducer.of{\" +\n            \"\\ncategory=\" + category +\n            \"\\nscope=\" + scope +\n            \"\\nmetrics=\" + metrics +\n            \"\\n}\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c2af5a711bd6e2d33e0221ced0f47ac596ed275","date":1572877903,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoBean.Category,String,Map[String,Counter]).mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoBean.Category,String,Map[String,Counter]).mjava","sourceNew":"  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoBean.Category category, String scope, Map<String, Counter> metrics) {\n    return new SolrMetricProducer() {\n      SolrMetricsContext solrMetricsContext;\n      @Override\n      public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n        this.solrMetricsContext = parentContext.getChildContext(this);\n        if (category == null) {\n          throw new IllegalArgumentException(\"null category\");\n        }\n        if (metrics == null || metrics.isEmpty()) {\n          return;\n        }\n        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n          solrMetricsContext.counter(entry.getKey(), category.toString(), scope);\n        }\n      }\n\n      @Override\n      public SolrMetricsContext getSolrMetricsContext() {\n        return solrMetricsContext;\n      }\n\n      @Override\n      public String toString() {\n        return \"SolrMetricProducer.of{\" +\n            \"\\ncategory=\" + category +\n            \"\\nscope=\" + scope +\n            \"\\nmetrics=\" + metrics +\n            \"\\n}\";\n      }\n    };\n  }\n\n","sourceOld":"  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoBean.Category category, String scope, Map<String, Counter> metrics) {\n    return new SolrMetricProducer() {\n      @Override\n      public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n        if (category == null) {\n          throw new IllegalArgumentException(\"null category\");\n        }\n        if (metrics == null || metrics.isEmpty()) {\n          return;\n        }\n        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n          parentContext.counter(null, entry.getKey(), category.toString(), scope);\n        }\n      }\n\n      @Override\n      public String toString() {\n        return \"SolrMetricProducer.of{\" +\n            \"\\ncategory=\" + category +\n            \"\\nscope=\" + scope +\n            \"\\nmetrics=\" + metrics +\n            \"\\n}\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bfc52860e6d13d034226a760813c59d984c6817a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"43564cbb30b064675027cfb569564e8531096e97":["816521ebaad5add9cb96bb88c577394e2938c40b","bfc52860e6d13d034226a760813c59d984c6817a"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["43564cbb30b064675027cfb569564e8531096e97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43564cbb30b064675027cfb569564e8531096e97":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}