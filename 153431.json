{"path":"solr/contrib/solr-morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getIndexSchema().mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getIndexSchema().mjava","pathOld":"/dev/null","sourceNew":"  public IndexSchema getIndexSchema() {\n    if (context instanceof SolrMorphlineContext) {    \n      IndexSchema schema = ((SolrMorphlineContext)context).getIndexSchema();\n      if (schema != null) {\n        validateSchema(schema);\n        return schema;\n      }\n    }\n    \n    // If solrHomeDir isn't defined and zkHost and collectionName are defined \n    // then download schema.xml and solrconfig.xml, etc from zk and use that as solrHomeDir\n    String oldSolrHomeDir = null;\n    String mySolrHomeDir = solrHomeDir;\n    if (solrHomeDir == null || solrHomeDir.length() == 0) {\n      if (zkHost == null || zkHost.length() == 0) {\n        // TODO: implement download from solrUrl if specified\n        throw new MorphlineCompilationException(\n            \"Downloading a Solr schema requires either parameter 'solrHomeDir' or parameters 'zkHost' and 'collection'\",\n            config);\n      }\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\n            \"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      ZooKeeperDownloader zki = new ZooKeeperDownloader();\n      SolrZkClient zkClient = zki.getZkClient(zkHost);\n      try {\n        String configName = zki.readConfigName(zkClient, collectionName);\n        File downloadedSolrHomeDir = zki.downloadConfigDir(zkClient, configName);\n        mySolrHomeDir = downloadedSolrHomeDir.getAbsolutePath();\n      } catch (KeeperException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } catch (InterruptedException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } catch (IOException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } finally {\n        zkClient.close();\n      }\n    }\n    \n    oldSolrHomeDir = System.setProperty(SOLR_HOME_PROPERTY_NAME, mySolrHomeDir);\n    try {\n      SolrConfig solrConfig = new SolrConfig(); // TODO use SolrResourceLoader ala TikaMapper?\n      // SolrConfig solrConfig = new SolrConfig(\"solrconfig.xml\");\n      // SolrConfig solrConfig = new\n      // SolrConfig(\"/cloud/apache-solr-4.0.0-BETA/example/solr/collection1\",\n      // \"solrconfig.xml\", null);\n      // SolrConfig solrConfig = new\n      // SolrConfig(\"/cloud/apache-solr-4.0.0-BETA/example/solr/collection1/conf/solrconfig.xml\");\n      SolrResourceLoader loader = solrConfig.getResourceLoader();\n      \n      InputSource is = new InputSource(loader.openSchema(\"schema.xml\"));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(\"schema.xml\"));\n        \n      IndexSchema schema = new IndexSchema(solrConfig, \"schema.xml\", is);\n      validateSchema(schema);\n      return schema;\n    } catch (ParserConfigurationException e) {\n      throw new MorphlineRuntimeException(e);\n    } catch (IOException e) {\n      throw new MorphlineRuntimeException(e);\n    } catch (SAXException e) {\n      throw new MorphlineRuntimeException(e);\n    } finally { // restore old global state\n      if (solrHomeDir != null) {\n        if (oldSolrHomeDir == null) {\n          System.clearProperty(SOLR_HOME_PROPERTY_NAME);\n        } else {\n          System.setProperty(SOLR_HOME_PROPERTY_NAME, oldSolrHomeDir);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getIndexSchema().mjava","pathOld":"solr/contrib/solr-morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getIndexSchema().mjava","sourceNew":"  public IndexSchema getIndexSchema() {\n    if (context instanceof SolrMorphlineContext) {    \n      IndexSchema schema = ((SolrMorphlineContext)context).getIndexSchema();\n      if (schema != null) {\n        validateSchema(schema);\n        return schema;\n      }\n    }\n    \n    // If solrHomeDir isn't defined and zkHost and collectionName are defined \n    // then download schema.xml and solrconfig.xml, etc from zk and use that as solrHomeDir\n    String oldSolrHomeDir = null;\n    String mySolrHomeDir = solrHomeDir;\n    if (solrHomeDir == null || solrHomeDir.length() == 0) {\n      if (zkHost == null || zkHost.length() == 0) {\n        // TODO: implement download from solrUrl if specified\n        throw new MorphlineCompilationException(\n            \"Downloading a Solr schema requires either parameter 'solrHomeDir' or parameters 'zkHost' and 'collection'\",\n            config);\n      }\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\n            \"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      ZooKeeperDownloader zki = new ZooKeeperDownloader();\n      SolrZkClient zkClient = zki.getZkClient(zkHost);\n      try {\n        String configName = zki.readConfigName(zkClient, collectionName);\n        File downloadedSolrHomeDir = zki.downloadConfigDir(zkClient, configName);\n        mySolrHomeDir = downloadedSolrHomeDir.getAbsolutePath();\n      } catch (KeeperException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } catch (InterruptedException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } catch (IOException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } finally {\n        zkClient.close();\n      }\n    }\n    \n    oldSolrHomeDir = System.setProperty(SOLR_HOME_PROPERTY_NAME, mySolrHomeDir);\n    try {\n      SolrConfig solrConfig = new SolrConfig(); // TODO use SolrResourceLoader ala TikaMapper?\n      // SolrConfig solrConfig = new SolrConfig(\"solrconfig.xml\");\n      // SolrConfig solrConfig = new\n      // SolrConfig(\"/cloud/apache-solr-4.0.0-BETA/example/solr/collection1\",\n      // \"solrconfig.xml\", null);\n      // SolrConfig solrConfig = new\n      // SolrConfig(\"/cloud/apache-solr-4.0.0-BETA/example/solr/collection1/conf/solrconfig.xml\");\n      SolrResourceLoader loader = solrConfig.getResourceLoader();\n      \n      InputSource is = new InputSource(loader.openSchema(\"schema.xml\"));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(\"schema.xml\"));\n        \n      IndexSchema schema = new IndexSchema(solrConfig, \"schema.xml\", is);\n      validateSchema(schema);\n      return schema;\n    } catch (ParserConfigurationException e) {\n      throw new MorphlineRuntimeException(e);\n    } catch (IOException e) {\n      throw new MorphlineRuntimeException(e);\n    } catch (SAXException e) {\n      throw new MorphlineRuntimeException(e);\n    } finally { // restore old global state\n      if (solrHomeDir != null) {\n        if (oldSolrHomeDir == null) {\n          System.clearProperty(SOLR_HOME_PROPERTY_NAME);\n        } else {\n          System.setProperty(SOLR_HOME_PROPERTY_NAME, oldSolrHomeDir);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public IndexSchema getIndexSchema() {\n    if (context instanceof SolrMorphlineContext) {    \n      IndexSchema schema = ((SolrMorphlineContext)context).getIndexSchema();\n      if (schema != null) {\n        validateSchema(schema);\n        return schema;\n      }\n    }\n    \n    // If solrHomeDir isn't defined and zkHost and collectionName are defined \n    // then download schema.xml and solrconfig.xml, etc from zk and use that as solrHomeDir\n    String oldSolrHomeDir = null;\n    String mySolrHomeDir = solrHomeDir;\n    if (solrHomeDir == null || solrHomeDir.length() == 0) {\n      if (zkHost == null || zkHost.length() == 0) {\n        // TODO: implement download from solrUrl if specified\n        throw new MorphlineCompilationException(\n            \"Downloading a Solr schema requires either parameter 'solrHomeDir' or parameters 'zkHost' and 'collection'\",\n            config);\n      }\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\n            \"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      ZooKeeperDownloader zki = new ZooKeeperDownloader();\n      SolrZkClient zkClient = zki.getZkClient(zkHost);\n      try {\n        String configName = zki.readConfigName(zkClient, collectionName);\n        File downloadedSolrHomeDir = zki.downloadConfigDir(zkClient, configName);\n        mySolrHomeDir = downloadedSolrHomeDir.getAbsolutePath();\n      } catch (KeeperException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } catch (InterruptedException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } catch (IOException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } finally {\n        zkClient.close();\n      }\n    }\n    \n    oldSolrHomeDir = System.setProperty(SOLR_HOME_PROPERTY_NAME, mySolrHomeDir);\n    try {\n      SolrConfig solrConfig = new SolrConfig(); // TODO use SolrResourceLoader ala TikaMapper?\n      // SolrConfig solrConfig = new SolrConfig(\"solrconfig.xml\");\n      // SolrConfig solrConfig = new\n      // SolrConfig(\"/cloud/apache-solr-4.0.0-BETA/example/solr/collection1\",\n      // \"solrconfig.xml\", null);\n      // SolrConfig solrConfig = new\n      // SolrConfig(\"/cloud/apache-solr-4.0.0-BETA/example/solr/collection1/conf/solrconfig.xml\");\n      SolrResourceLoader loader = solrConfig.getResourceLoader();\n      \n      InputSource is = new InputSource(loader.openSchema(\"schema.xml\"));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(\"schema.xml\"));\n        \n      IndexSchema schema = new IndexSchema(solrConfig, \"schema.xml\", is);\n      validateSchema(schema);\n      return schema;\n    } catch (ParserConfigurationException e) {\n      throw new MorphlineRuntimeException(e);\n    } catch (IOException e) {\n      throw new MorphlineRuntimeException(e);\n    } catch (SAXException e) {\n      throw new MorphlineRuntimeException(e);\n    } finally { // restore old global state\n      if (solrHomeDir != null) {\n        if (oldSolrHomeDir == null) {\n          System.clearProperty(SOLR_HOME_PROPERTY_NAME);\n        } else {\n          System.setProperty(SOLR_HOME_PROPERTY_NAME, oldSolrHomeDir);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}