{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#getLevelForDistance(double).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#getLevelForDistance(double).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#getLevelForDistance(double).mjava","sourceNew":"  @Override\n  public int getLevelForDistance(double dist) {\n    for (int i = 1; i < maxLevels; i++) {\n      //note: level[i] is actually a lookup for level i+1\n      if(dist > levelW[i] || dist > levelH[i]) {\n        return i;\n      }\n    }\n    return maxLevels;\n  }\n\n","sourceOld":"  @Override\n  public int getLevelForDistance(double dist) {\n    for (int i = 1; i < maxLevels; i++) {\n      //note: level[i] is actually a lookup for level i+1\n      if(dist > levelW[i] || dist > levelH[i]) {\n        return i;\n      }\n    }\n    return maxLevels;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85ac3534293008a0b7704f8ba54592d51fd29fa5","date":1346435585,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#getLevelForDistance(double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#getLevelForDistance(double).mjava","sourceNew":"  @Override\n  public int getLevelForDistance(double dist) {\n    for (int i = 0; i < maxLevels-1; i++) {\n      //note: level[i] is actually a lookup for level i+1\n      if(dist > levelW[i] && dist > levelH[i]) {\n        return i+1;\n      }\n    }\n    return maxLevels;\n  }\n\n","sourceOld":"  @Override\n  public int getLevelForDistance(double dist) {\n    for (int i = 1; i < maxLevels; i++) {\n      //note: level[i] is actually a lookup for level i+1\n      if(dist > levelW[i] || dist > levelH[i]) {\n        return i;\n      }\n    }\n    return maxLevels;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#getLevelForDistance(double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#getLevelForDistance(double).mjava","sourceNew":"  @Override\n  public int getLevelForDistance(double dist) {\n    for (int i = 0; i < maxLevels-1; i++) {\n      //note: level[i] is actually a lookup for level i+1\n      if(dist > levelW[i] && dist > levelH[i]) {\n        return i+1;\n      }\n    }\n    return maxLevels;\n  }\n\n","sourceOld":"  @Override\n  public int getLevelForDistance(double dist) {\n    for (int i = 1; i < maxLevels; i++) {\n      //note: level[i] is actually a lookup for level i+1\n      if(dist > levelW[i] || dist > levelH[i]) {\n        return i;\n      }\n    }\n    return maxLevels;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2410e27320f6aaba450cbf500d7822baf642f8","date":1347075066,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#getLevelForDistance(double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#getLevelForDistance(double).mjava","sourceNew":"  @Override\n  public int getLevelForDistance(double dist) {\n    if (dist == 0)//short circuit\n      return maxLevels;\n    for (int i = 0; i < maxLevels-1; i++) {\n      //note: level[i] is actually a lookup for level i+1\n      if(dist > levelW[i] && dist > levelH[i]) {\n        return i+1;\n      }\n    }\n    return maxLevels;\n  }\n\n","sourceOld":"  @Override\n  public int getLevelForDistance(double dist) {\n    for (int i = 0; i < maxLevels-1; i++) {\n      //note: level[i] is actually a lookup for level i+1\n      if(dist > levelW[i] && dist > levelH[i]) {\n        return i+1;\n      }\n    }\n    return maxLevels;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#getLevelForDistance(double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#getLevelForDistance(double).mjava","sourceNew":"  @Override\n  public int getLevelForDistance(double dist) {\n    if (dist == 0)//short circuit\n      return maxLevels;\n    for (int i = 0; i < maxLevels-1; i++) {\n      //note: level[i] is actually a lookup for level i+1\n      if(dist > levelW[i] && dist > levelH[i]) {\n        return i+1;\n      }\n    }\n    return maxLevels;\n  }\n\n","sourceOld":"  @Override\n  public int getLevelForDistance(double dist) {\n    if (dist == 0)//short circuit\n      return maxLevels;\n    for (int i = 0; i < maxLevels-1; i++) {\n      //note: level[i] is actually a lookup for level i+1\n      if(dist > levelW[i] && dist > levelH[i]) {\n        return i+1;\n      }\n    }\n    return maxLevels;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#getLevelForDistance(double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#getLevelForDistance(double).mjava","sourceNew":"  @Override\n  public int getLevelForDistance(double dist) {\n    if (dist == 0)//short circuit\n      return maxLevels;\n    for (int i = 0; i < maxLevels-1; i++) {\n      //note: level[i] is actually a lookup for level i+1\n      if(dist > levelW[i] && dist > levelH[i]) {\n        return i+1;\n      }\n    }\n    return maxLevels;\n  }\n\n","sourceOld":"  @Override\n  public int getLevelForDistance(double dist) {\n    if (dist == 0)//short circuit\n      return maxLevels;\n    for (int i = 0; i < maxLevels-1; i++) {\n      //note: level[i] is actually a lookup for level i+1\n      if(dist > levelW[i] && dist > levelH[i]) {\n        return i+1;\n      }\n    }\n    return maxLevels;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6e2410e27320f6aaba450cbf500d7822baf642f8":["85ac3534293008a0b7704f8ba54592d51fd29fa5"],"af2638813028b254a88b418ebeafb541afb49653":["6e2410e27320f6aaba450cbf500d7822baf642f8","112d77ac8d3e10a362516ad834c9a11d35c94234"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["b89678825b68eccaf09e6ab71675fc0b0af1e099","85ac3534293008a0b7704f8ba54592d51fd29fa5"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85ac3534293008a0b7704f8ba54592d51fd29fa5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["6e2410e27320f6aaba450cbf500d7822baf642f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"6e2410e27320f6aaba450cbf500d7822baf642f8":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d0d1f90e969803cc84174589b5e4a39b7935fecd","85ac3534293008a0b7704f8ba54592d51fd29fa5"],"85ac3534293008a0b7704f8ba54592d51fd29fa5":["6e2410e27320f6aaba450cbf500d7822baf642f8","d0d1f90e969803cc84174589b5e4a39b7935fecd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d0d1f90e969803cc84174589b5e4a39b7935fecd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}