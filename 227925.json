{"path":"src/java/org/apache/solr/search/DisMaxQParser#getParser(Map[String,Float],String,SolrParams,float).mjava","commits":[{"id":"50de217601652b8d4bff9f8ac567455920c85891","date":1243497655,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/DisMaxQParser#getParser(Map[String,Float],String,SolrParams,float).mjava","pathOld":"/dev/null","sourceNew":"  protected SolrPluginUtils.DisjunctionMaxQueryParser getParser(Map<String, Float> fields, String paramName,\n                                                                SolrParams solrParams, float tiebreaker) {\n    int slop = solrParams.getInt(paramName, 0);\n    SolrPluginUtils.DisjunctionMaxQueryParser parser = new SolrPluginUtils.DisjunctionMaxQueryParser(req.getSchema(),\n            IMPOSSIBLE_FIELD_NAME);\n    parser.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n    parser.setPhraseSlop(slop);\n    return parser;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbca8d36fa6e78e5f32059dc9c80da83e66470de","date":1249752043,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/DisMaxQParser#getParser(Map[String,Float],String,SolrParams,float).mjava","pathOld":"src/java/org/apache/solr/search/DisMaxQParser#getParser(Map[String,Float],String,SolrParams,float).mjava","sourceNew":"  protected SolrPluginUtils.DisjunctionMaxQueryParser getParser(Map<String, Float> fields, String paramName,\n                                                                SolrParams solrParams, float tiebreaker) {\n    int slop = solrParams.getInt(paramName, 0);\n    SolrPluginUtils.DisjunctionMaxQueryParser parser = new SolrPluginUtils.DisjunctionMaxQueryParser(this,\n            IMPOSSIBLE_FIELD_NAME);\n    parser.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n    parser.setPhraseSlop(slop);\n    return parser;\n  }\n\n","sourceOld":"  protected SolrPluginUtils.DisjunctionMaxQueryParser getParser(Map<String, Float> fields, String paramName,\n                                                                SolrParams solrParams, float tiebreaker) {\n    int slop = solrParams.getInt(paramName, 0);\n    SolrPluginUtils.DisjunctionMaxQueryParser parser = new SolrPluginUtils.DisjunctionMaxQueryParser(req.getSchema(),\n            IMPOSSIBLE_FIELD_NAME);\n    parser.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n    parser.setPhraseSlop(slop);\n    return parser;\n  }\n\n","bugFix":["50de217601652b8d4bff9f8ac567455920c85891"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/DisMaxQParser#getParser(Map[String,Float],String,SolrParams,float).mjava","pathOld":"src/java/org/apache/solr/search/DisMaxQParser#getParser(Map[String,Float],String,SolrParams,float).mjava","sourceNew":"  protected SolrPluginUtils.DisjunctionMaxQueryParser getParser(Map<String, Float> fields, String paramName,\n                                                                SolrParams solrParams, float tiebreaker) {\n    int slop = solrParams.getInt(paramName, 0);\n    SolrPluginUtils.DisjunctionMaxQueryParser parser = new SolrPluginUtils.DisjunctionMaxQueryParser(this,\n            IMPOSSIBLE_FIELD_NAME);\n    parser.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n    parser.setPhraseSlop(slop);\n    return parser;\n  }\n\n","sourceOld":"  protected SolrPluginUtils.DisjunctionMaxQueryParser getParser(Map<String, Float> fields, String paramName,\n                                                                SolrParams solrParams, float tiebreaker) {\n    int slop = solrParams.getInt(paramName, 0);\n    SolrPluginUtils.DisjunctionMaxQueryParser parser = new SolrPluginUtils.DisjunctionMaxQueryParser(this,\n            IMPOSSIBLE_FIELD_NAME);\n    parser.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n    parser.setPhraseSlop(slop);\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cbca8d36fa6e78e5f32059dc9c80da83e66470de":["50de217601652b8d4bff9f8ac567455920c85891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"50de217601652b8d4bff9f8ac567455920c85891":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"cbca8d36fa6e78e5f32059dc9c80da83e66470de":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["50de217601652b8d4bff9f8ac567455920c85891"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"50de217601652b8d4bff9f8ac567455920c85891":["cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}