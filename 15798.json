{"path":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter#encodeSnippets(String[],String[],Map[String,String[]]).mjava","commits":[{"id":"8868b7c4fbf215c41e7b4ea2cfc40d1970672910","date":1480034167,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter#encodeSnippets(String[],String[],Map[String,String[]]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Encodes the resulting snippets into a namedlist\n     *\n     * @param keys       the document unique keys\n     * @param fieldNames field names to highlight in the order\n     * @param snippets   map from field name to snippet array for the docs\n     * @return encoded namedlist of summaries\n     */\n    protected NamedList<Object> encodeSnippets(String[] keys, String[] fieldNames, Map<String, String[]> snippets) {\n        NamedList<Object> list = new SimpleOrderedMap<>();\n        for (int i = 0; i < keys.length; i++) {\n            NamedList<Object> summary = new SimpleOrderedMap<>();\n            for (String field : fieldNames) {\n                String snippet = snippets.get(field)[i];\n                if (snippet == null) {\n                    //TODO reuse logic of DefaultSolrHighlighter.alternateField\n                    summary.add(field, ZERO_LEN_STR_ARRAY);\n                } else {\n                    // we used a special snippet separator char and we can now split on it.\n                    summary.add(field, snippet.split(SNIPPET_SEPARATOR));\n                }\n            }\n            list.add(keys[i], summary);\n        }\n        return list;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75babd1dfc2521603bfeb0968042e921d8c6c652","date":1480042089,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter#encodeSnippets(String[],String[],Map[String,String[]]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Encodes the resulting snippets into a namedlist\n     *\n     * @param keys       the document unique keys\n     * @param fieldNames field names to highlight in the order\n     * @param snippets   map from field name to snippet array for the docs\n     * @return encoded namedlist of summaries\n     */\n    protected NamedList<Object> encodeSnippets(String[] keys, String[] fieldNames, Map<String, String[]> snippets) {\n        NamedList<Object> list = new SimpleOrderedMap<>();\n        for (int i = 0; i < keys.length; i++) {\n            NamedList<Object> summary = new SimpleOrderedMap<>();\n            for (String field : fieldNames) {\n                String snippet = snippets.get(field)[i];\n                if (snippet == null) {\n                    //TODO reuse logic of DefaultSolrHighlighter.alternateField\n                    summary.add(field, ZERO_LEN_STR_ARRAY);\n                } else {\n                    // we used a special snippet separator char and we can now split on it.\n                    summary.add(field, snippet.split(SNIPPET_SEPARATOR));\n                }\n            }\n            list.add(keys[i], summary);\n        }\n        return list;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter#encodeSnippets(String[],String[],Map[String,String[]]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Encodes the resulting snippets into a namedlist\n     *\n     * @param keys       the document unique keys\n     * @param fieldNames field names to highlight in the order\n     * @param snippets   map from field name to snippet array for the docs\n     * @return encoded namedlist of summaries\n     */\n    protected NamedList<Object> encodeSnippets(String[] keys, String[] fieldNames, Map<String, String[]> snippets) {\n        NamedList<Object> list = new SimpleOrderedMap<>();\n        for (int i = 0; i < keys.length; i++) {\n            NamedList<Object> summary = new SimpleOrderedMap<>();\n            for (String field : fieldNames) {\n                String snippet = snippets.get(field)[i];\n                if (snippet == null) {\n                    //TODO reuse logic of DefaultSolrHighlighter.alternateField\n                    summary.add(field, ZERO_LEN_STR_ARRAY);\n                } else {\n                    // we used a special snippet separator char and we can now split on it.\n                    summary.add(field, snippet.split(SNIPPET_SEPARATOR));\n                }\n            }\n            list.add(keys[i], summary);\n        }\n        return list;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fee424905e7d55c01f551853e7da496662f8722f","date":1482870873,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter#encodeSnippets(String[],String[],Map[String,String[]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter#encodeSnippets(String[],String[],Map[String,String[]]).mjava","sourceNew":"  /**\n   * Encodes the resulting snippets into a namedlist\n   *\n   * @param keys       the document unique keys\n   * @param fieldNames field names to highlight in the order\n   * @param snippets   map from field name to snippet array for the docs\n   * @return encoded namedlist of summaries\n   */\n  protected NamedList<Object> encodeSnippets(String[] keys, String[] fieldNames, Map<String, String[]> snippets) {\n    NamedList<Object> list = new SimpleOrderedMap<>();\n    for (int i = 0; i < keys.length; i++) {\n      NamedList<Object> summary = new SimpleOrderedMap<>();\n      for (String field : fieldNames) {\n        String snippet = snippets.get(field)[i];\n        if (snippet == null) {\n          //TODO reuse logic of DefaultSolrHighlighter.alternateField\n          summary.add(field, ZERO_LEN_STR_ARRAY);\n        } else {\n          // we used a special snippet separator char and we can now split on it.\n          summary.add(field, snippet.split(SNIPPET_SEPARATOR));\n        }\n      }\n      list.add(keys[i], summary);\n    }\n    return list;\n  }\n\n","sourceOld":"    /**\n     * Encodes the resulting snippets into a namedlist\n     *\n     * @param keys       the document unique keys\n     * @param fieldNames field names to highlight in the order\n     * @param snippets   map from field name to snippet array for the docs\n     * @return encoded namedlist of summaries\n     */\n    protected NamedList<Object> encodeSnippets(String[] keys, String[] fieldNames, Map<String, String[]> snippets) {\n        NamedList<Object> list = new SimpleOrderedMap<>();\n        for (int i = 0; i < keys.length; i++) {\n            NamedList<Object> summary = new SimpleOrderedMap<>();\n            for (String field : fieldNames) {\n                String snippet = snippets.get(field)[i];\n                if (snippet == null) {\n                    //TODO reuse logic of DefaultSolrHighlighter.alternateField\n                    summary.add(field, ZERO_LEN_STR_ARRAY);\n                } else {\n                    // we used a special snippet separator char and we can now split on it.\n                    summary.add(field, snippet.split(SNIPPET_SEPARATOR));\n                }\n            }\n            list.add(keys[i], summary);\n        }\n        return list;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter#encodeSnippets(String[],String[],Map[String,String[]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter#encodeSnippets(String[],String[],Map[String,String[]]).mjava","sourceNew":"  /**\n   * Encodes the resulting snippets into a namedlist\n   *\n   * @param keys       the document unique keys\n   * @param fieldNames field names to highlight in the order\n   * @param snippets   map from field name to snippet array for the docs\n   * @return encoded namedlist of summaries\n   */\n  protected NamedList<Object> encodeSnippets(String[] keys, String[] fieldNames, Map<String, String[]> snippets) {\n    NamedList<Object> list = new SimpleOrderedMap<>();\n    for (int i = 0; i < keys.length; i++) {\n      NamedList<Object> summary = new SimpleOrderedMap<>();\n      for (String field : fieldNames) {\n        String snippet = snippets.get(field)[i];\n        if (snippet == null) {\n          //TODO reuse logic of DefaultSolrHighlighter.alternateField\n          summary.add(field, ZERO_LEN_STR_ARRAY);\n        } else {\n          // we used a special snippet separator char and we can now split on it.\n          summary.add(field, snippet.split(SNIPPET_SEPARATOR));\n        }\n      }\n      list.add(keys[i], summary);\n    }\n    return list;\n  }\n\n","sourceOld":"    /**\n     * Encodes the resulting snippets into a namedlist\n     *\n     * @param keys       the document unique keys\n     * @param fieldNames field names to highlight in the order\n     * @param snippets   map from field name to snippet array for the docs\n     * @return encoded namedlist of summaries\n     */\n    protected NamedList<Object> encodeSnippets(String[] keys, String[] fieldNames, Map<String, String[]> snippets) {\n        NamedList<Object> list = new SimpleOrderedMap<>();\n        for (int i = 0; i < keys.length; i++) {\n            NamedList<Object> summary = new SimpleOrderedMap<>();\n            for (String field : fieldNames) {\n                String snippet = snippets.get(field)[i];\n                if (snippet == null) {\n                    //TODO reuse logic of DefaultSolrHighlighter.alternateField\n                    summary.add(field, ZERO_LEN_STR_ARRAY);\n                } else {\n                    // we used a special snippet separator char and we can now split on it.\n                    summary.add(field, snippet.split(SNIPPET_SEPARATOR));\n                }\n            }\n            list.add(keys[i], summary);\n        }\n        return list;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fee424905e7d55c01f551853e7da496662f8722f":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","75babd1dfc2521603bfeb0968042e921d8c6c652"],"8868b7c4fbf215c41e7b4ea2cfc40d1970672910":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8868b7c4fbf215c41e7b4ea2cfc40d1970672910"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fee424905e7d55c01f551853e7da496662f8722f"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["727bb765ff2542275f6d31f67be18d7104bae148","fee424905e7d55c01f551853e7da496662f8722f"]},"commit2Childs":{"fee424905e7d55c01f551853e7da496662f8722f":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"727bb765ff2542275f6d31f67be18d7104bae148":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"8868b7c4fbf215c41e7b4ea2cfc40d1970672910":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["fee424905e7d55c01f551853e7da496662f8722f","727bb765ff2542275f6d31f67be18d7104bae148"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["727bb765ff2542275f6d31f67be18d7104bae148","8868b7c4fbf215c41e7b4ea2cfc40d1970672910","75babd1dfc2521603bfeb0968042e921d8c6c652"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}