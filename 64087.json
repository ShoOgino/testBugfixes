{"path":"src/java/org/apache/lucene/store/MMapDirectory#cleanMapping(ByteBuffer).mjava","commits":[{"id":"416d032f85b7ea8efc272f86ba46bc460589aff7","date":1243881250,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/MMapDirectory#cleanMapping(ByteBuffer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Try to unmap the buffer, this method silently fails if no support\n   * for that in the JVM. On Windows, this leads to the fact,\n   * that mmapped files cannot be modified or deleted.\n   */\n  final void cleanMapping(final ByteBuffer buffer) throws IOException {\n    if (useUnmapHack) {\n      try {\n        AccessController.doPrivileged(new PrivilegedExceptionAction() {\n          public Object run() throws Exception {\n            final Method getCleanerMethod = buffer.getClass()\n              .getMethod(\"cleaner\", NO_PARAM_TYPES);\n            getCleanerMethod.setAccessible(true);\n            final Object cleaner = getCleanerMethod.invoke(buffer, NO_PARAMS);\n            if (cleaner != null) {\n              cleaner.getClass().getMethod(\"clean\", NO_PARAM_TYPES)\n                .invoke(cleaner, NO_PARAMS);\n            }\n            return null;\n          }\n        });\n      } catch (PrivilegedActionException e) {\n        final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n        ioe.initCause(e.getCause());\n        throw ioe;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/MMapDirectory#cleanMapping(ByteBuffer).mjava","pathOld":"src/java/org/apache/lucene/store/MMapDirectory#cleanMapping(ByteBuffer).mjava","sourceNew":"  /**\n   * Try to unmap the buffer, this method silently fails if no support\n   * for that in the JVM. On Windows, this leads to the fact,\n   * that mmapped files cannot be modified or deleted.\n   */\n  final void cleanMapping(final ByteBuffer buffer) throws IOException {\n    if (useUnmapHack) {\n      try {\n        AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n          public Object run() throws Exception {\n            final Method getCleanerMethod = buffer.getClass()\n              .getMethod(\"cleaner\", NO_PARAM_TYPES);\n            getCleanerMethod.setAccessible(true);\n            final Object cleaner = getCleanerMethod.invoke(buffer, NO_PARAMS);\n            if (cleaner != null) {\n              cleaner.getClass().getMethod(\"clean\", NO_PARAM_TYPES)\n                .invoke(cleaner, NO_PARAMS);\n            }\n            return null;\n          }\n        });\n      } catch (PrivilegedActionException e) {\n        final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n        ioe.initCause(e.getCause());\n        throw ioe;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Try to unmap the buffer, this method silently fails if no support\n   * for that in the JVM. On Windows, this leads to the fact,\n   * that mmapped files cannot be modified or deleted.\n   */\n  final void cleanMapping(final ByteBuffer buffer) throws IOException {\n    if (useUnmapHack) {\n      try {\n        AccessController.doPrivileged(new PrivilegedExceptionAction() {\n          public Object run() throws Exception {\n            final Method getCleanerMethod = buffer.getClass()\n              .getMethod(\"cleaner\", NO_PARAM_TYPES);\n            getCleanerMethod.setAccessible(true);\n            final Object cleaner = getCleanerMethod.invoke(buffer, NO_PARAMS);\n            if (cleaner != null) {\n              cleaner.getClass().getMethod(\"clean\", NO_PARAM_TYPES)\n                .invoke(cleaner, NO_PARAMS);\n            }\n            return null;\n          }\n        });\n      } catch (PrivilegedActionException e) {\n        final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n        ioe.initCause(e.getCause());\n        throw ioe;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"277b20588f94e26ec21ffdfc360528133991372e","date":1256467913,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/MMapDirectory#cleanMapping(ByteBuffer).mjava","pathOld":"src/java/org/apache/lucene/store/MMapDirectory#cleanMapping(ByteBuffer).mjava","sourceNew":"  /**\n   * Try to unmap the buffer, this method silently fails if no support\n   * for that in the JVM. On Windows, this leads to the fact,\n   * that mmapped files cannot be modified or deleted.\n   */\n  final void cleanMapping(final ByteBuffer buffer) throws IOException {\n    if (useUnmapHack) {\n      try {\n        AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n          public Object run() throws Exception {\n            final Method getCleanerMethod = buffer.getClass()\n              .getMethod(\"cleaner\");\n            getCleanerMethod.setAccessible(true);\n            final Object cleaner = getCleanerMethod.invoke(buffer);\n            if (cleaner != null) {\n              cleaner.getClass().getMethod(\"clean\")\n                .invoke(cleaner);\n            }\n            return null;\n          }\n        });\n      } catch (PrivilegedActionException e) {\n        final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n        ioe.initCause(e.getCause());\n        throw ioe;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Try to unmap the buffer, this method silently fails if no support\n   * for that in the JVM. On Windows, this leads to the fact,\n   * that mmapped files cannot be modified or deleted.\n   */\n  final void cleanMapping(final ByteBuffer buffer) throws IOException {\n    if (useUnmapHack) {\n      try {\n        AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n          public Object run() throws Exception {\n            final Method getCleanerMethod = buffer.getClass()\n              .getMethod(\"cleaner\", NO_PARAM_TYPES);\n            getCleanerMethod.setAccessible(true);\n            final Object cleaner = getCleanerMethod.invoke(buffer, NO_PARAMS);\n            if (cleaner != null) {\n              cleaner.getClass().getMethod(\"clean\", NO_PARAM_TYPES)\n                .invoke(cleaner, NO_PARAMS);\n            }\n            return null;\n          }\n        });\n      } catch (PrivilegedActionException e) {\n        final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n        ioe.initCause(e.getCause());\n        throw ioe;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory#cleanMapping(ByteBuffer).mjava","pathOld":"src/java/org/apache/lucene/store/MMapDirectory#cleanMapping(ByteBuffer).mjava","sourceNew":"  /**\n   * Try to unmap the buffer, this method silently fails if no support\n   * for that in the JVM. On Windows, this leads to the fact,\n   * that mmapped files cannot be modified or deleted.\n   */\n  final void cleanMapping(final ByteBuffer buffer) throws IOException {\n    if (useUnmapHack) {\n      try {\n        AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n          public Object run() throws Exception {\n            final Method getCleanerMethod = buffer.getClass()\n              .getMethod(\"cleaner\");\n            getCleanerMethod.setAccessible(true);\n            final Object cleaner = getCleanerMethod.invoke(buffer);\n            if (cleaner != null) {\n              cleaner.getClass().getMethod(\"clean\")\n                .invoke(cleaner);\n            }\n            return null;\n          }\n        });\n      } catch (PrivilegedActionException e) {\n        final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n        ioe.initCause(e.getCause());\n        throw ioe;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Try to unmap the buffer, this method silently fails if no support\n   * for that in the JVM. On Windows, this leads to the fact,\n   * that mmapped files cannot be modified or deleted.\n   */\n  final void cleanMapping(final ByteBuffer buffer) throws IOException {\n    if (useUnmapHack) {\n      try {\n        AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n          public Object run() throws Exception {\n            final Method getCleanerMethod = buffer.getClass()\n              .getMethod(\"cleaner\");\n            getCleanerMethod.setAccessible(true);\n            final Object cleaner = getCleanerMethod.invoke(buffer);\n            if (cleaner != null) {\n              cleaner.getClass().getMethod(\"clean\")\n                .invoke(cleaner);\n            }\n            return null;\n          }\n        });\n      } catch (PrivilegedActionException e) {\n        final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n        ioe.initCause(e.getCause());\n        throw ioe;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef82ff03e4016c705811b2658e81471a645c0e49":["416d032f85b7ea8efc272f86ba46bc460589aff7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"277b20588f94e26ec21ffdfc360528133991372e":["ef82ff03e4016c705811b2658e81471a645c0e49"],"416d032f85b7ea8efc272f86ba46bc460589aff7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["277b20588f94e26ec21ffdfc360528133991372e"]},"commit2Childs":{"ef82ff03e4016c705811b2658e81471a645c0e49":["277b20588f94e26ec21ffdfc360528133991372e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["416d032f85b7ea8efc272f86ba46bc460589aff7"],"277b20588f94e26ec21ffdfc360528133991372e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"416d032f85b7ea8efc272f86ba46bc460589aff7":["ef82ff03e4016c705811b2658e81471a645c0e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}