{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","commits":[{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    Slice slice = clusterState.getSlice(collectionName, shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(Slice.STATE, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      DocCollection collection = updateSlice(collectionName,\n          clusterState.getCollection(collectionName), new Slice(shardId, replicas, sliceProps));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","date":1427866967,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    Slice slice = clusterState.getSlice(collectionName, shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      DocCollection collection = updateSlice(collectionName,\n          clusterState.getCollection(collectionName), new Slice(shardId, replicas, sliceProps));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","sourceOld":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    Slice slice = clusterState.getSlice(collectionName, shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(Slice.STATE, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      DocCollection collection = updateSlice(collectionName,\n          clusterState.getCollection(collectionName), new Slice(shardId, replicas, sliceProps));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    Slice slice = clusterState.getSlice(collectionName, shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      DocCollection collection = updateSlice(collectionName,\n          clusterState.getCollection(collectionName), new Slice(shardId, replicas, sliceProps));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","sourceOld":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    Slice slice = clusterState.getSlice(collectionName, shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(Slice.STATE, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      DocCollection collection = updateSlice(collectionName,\n          clusterState.getCollection(collectionName), new Slice(shardId, replicas, sliceProps));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      collection = updateSlice(collectionName, collection, new Slice(shardId, replicas, sliceProps));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","sourceOld":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    Slice slice = clusterState.getSlice(collectionName, shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      DocCollection collection = updateSlice(collectionName,\n          clusterState.getCollection(collectionName), new Slice(shardId, replicas, sliceProps));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      collection = updateSlice(collectionName, collection, new Slice(shardId, replicas, sliceProps));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","sourceOld":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    Slice slice = clusterState.getSlice(collectionName, shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      DocCollection collection = updateSlice(collectionName,\n          clusterState.getCollection(collectionName), new Slice(shardId, replicas, sliceProps));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a23ab64d81a448ad6ec571cbfc9599cc09b4e4b","date":1473679846,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      String shardParentZkSession = message.getStr(\"shard_parent_zk_session\");\n      String shardParentNode = message.getStr(\"shard_parent_node\");\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      if (shardParentZkSession != null) {\n        sliceProps.put(\"shard_parent_zk_session\", shardParentZkSession);\n      }\n      if (shardParentNode != null)  {\n        sliceProps.put(\"shard_parent_node\", shardParentNode);\n      }\n      collection = updateSlice(collectionName, collection, new Slice(shardId, replicas, sliceProps));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","sourceOld":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      collection = updateSlice(collectionName, collection, new Slice(shardId, replicas, sliceProps));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      String shardParentZkSession = message.getStr(\"shard_parent_zk_session\");\n      String shardParentNode = message.getStr(\"shard_parent_node\");\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      if (shardParentZkSession != null) {\n        sliceProps.put(\"shard_parent_zk_session\", shardParentZkSession);\n      }\n      if (shardParentNode != null)  {\n        sliceProps.put(\"shard_parent_node\", shardParentNode);\n      }\n      collection = updateSlice(collectionName, collection, new Slice(shardId, replicas, sliceProps));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","sourceOld":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      collection = updateSlice(collectionName, collection, new Slice(shardId, replicas, sliceProps));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      String shardParentZkSession = message.getStr(\"shard_parent_zk_session\");\n      String shardParentNode = message.getStr(\"shard_parent_node\");\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      if (shardParentZkSession != null) {\n        sliceProps.put(\"shard_parent_zk_session\", shardParentZkSession);\n      }\n      if (shardParentNode != null)  {\n        sliceProps.put(\"shard_parent_node\", shardParentNode);\n      }\n      collection = updateSlice(collectionName, collection, new Slice(shardId, replicas, sliceProps));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","sourceOld":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      collection = updateSlice(collectionName, collection, new Slice(shardId, replicas, sliceProps));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      String shardParentZkSession = message.getStr(\"shard_parent_zk_session\");\n      String shardParentNode = message.getStr(\"shard_parent_node\");\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      if (shardParentZkSession != null) {\n        sliceProps.put(\"shard_parent_zk_session\", shardParentZkSession);\n      }\n      if (shardParentNode != null)  {\n        sliceProps.put(\"shard_parent_node\", shardParentNode);\n      }\n      collection = updateSlice(collectionName, collection, new Slice(shardId, replicas, sliceProps));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","sourceOld":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      collection = updateSlice(collectionName, collection, new Slice(shardId, replicas, sliceProps));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      String shardParentZkSession = message.getStr(\"shard_parent_zk_session\");\n      String shardParentNode = message.getStr(\"shard_parent_node\");\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      if (shardParentZkSession != null) {\n        sliceProps.put(\"shard_parent_zk_session\", shardParentZkSession);\n      }\n      if (shardParentNode != null)  {\n        sliceProps.put(\"shard_parent_node\", shardParentNode);\n      }\n      collection = updateSlice(collectionName, collection, new Slice(shardId, replicas, sliceProps, collectionName));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","sourceOld":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      String shardParentZkSession = message.getStr(\"shard_parent_zk_session\");\n      String shardParentNode = message.getStr(\"shard_parent_node\");\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      if (shardParentZkSession != null) {\n        sliceProps.put(\"shard_parent_zk_session\", shardParentZkSession);\n      }\n      if (shardParentNode != null)  {\n        sliceProps.put(\"shard_parent_node\", shardParentNode);\n      }\n      collection = updateSlice(collectionName, collection, new Slice(shardId, replicas, sliceProps));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      String shardParentZkSession = message.getStr(\"shard_parent_zk_session\");\n      String shardParentNode = message.getStr(\"shard_parent_node\");\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      if (shardParentZkSession != null) {\n        sliceProps.put(\"shard_parent_zk_session\", shardParentZkSession);\n      }\n      if (shardParentNode != null)  {\n        sliceProps.put(\"shard_parent_node\", shardParentNode);\n      }\n      collection = updateSlice(collectionName, collection, new Slice(shardId, replicas, sliceProps, collectionName));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","sourceOld":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      String shardParentZkSession = message.getStr(\"shard_parent_zk_session\");\n      String shardParentNode = message.getStr(\"shard_parent_node\");\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      if (shardParentZkSession != null) {\n        sliceProps.put(\"shard_parent_zk_session\", shardParentZkSession);\n      }\n      if (shardParentNode != null)  {\n        sliceProps.put(\"shard_parent_node\", shardParentNode);\n      }\n      collection = updateSlice(collectionName, collection, new Slice(shardId, replicas, sliceProps));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      String shardParentZkSession = message.getStr(\"shard_parent_zk_session\");\n      String shardParentNode = message.getStr(\"shard_parent_node\");\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      if (shardParentZkSession != null) {\n        sliceProps.put(\"shard_parent_zk_session\", shardParentZkSession);\n      }\n      if (shardParentNode != null)  {\n        sliceProps.put(\"shard_parent_node\", shardParentNode);\n      }\n      collection = updateSlice(collectionName, collection, new Slice(shardId, replicas, sliceProps, collectionName));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: {} because it already exists in collection: {}\", shardId, collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","sourceOld":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      String shardParentZkSession = message.getStr(\"shard_parent_zk_session\");\n      String shardParentNode = message.getStr(\"shard_parent_node\");\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      if (shardParentZkSession != null) {\n        sliceProps.put(\"shard_parent_zk_session\", shardParentZkSession);\n      }\n      if (shardParentNode != null)  {\n        sliceProps.put(\"shard_parent_node\", shardParentNode);\n      }\n      collection = updateSlice(collectionName, collection, new Slice(shardId, replicas, sliceProps, collectionName));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#createShard(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shardId);\n    if (slice == null) {\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      String shardParentZkSession = message.getStr(\"shard_parent_zk_session\");\n      String shardParentNode = message.getStr(\"shard_parent_node\");\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      if (shardParentZkSession != null) {\n        sliceProps.put(\"shard_parent_zk_session\", shardParentZkSession);\n      }\n      if (shardParentNode != null)  {\n        sliceProps.put(\"shard_parent_node\", shardParentNode);\n      }\n      collection = updateSlice(collectionName, collection, new Slice(shardId, replicas, sliceProps, collectionName));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: {} because it already exists in collection: {}\", shardId, collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","sourceOld":"  public ZkWriteCommand createShard(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shardId);\n    if (slice == null) {\n      Map<String, Replica> replicas = Collections.EMPTY_MAP;\n      Map<String, Object> sliceProps = new HashMap<>();\n      String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n      String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n      String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n      String shardParentZkSession = message.getStr(\"shard_parent_zk_session\");\n      String shardParentNode = message.getStr(\"shard_parent_node\");\n      sliceProps.put(Slice.RANGE, shardRange);\n      sliceProps.put(ZkStateReader.STATE_PROP, shardState);\n      if (shardParent != null) {\n        sliceProps.put(Slice.PARENT, shardParent);\n      }\n      if (shardParentZkSession != null) {\n        sliceProps.put(\"shard_parent_zk_session\", shardParentZkSession);\n      }\n      if (shardParentNode != null)  {\n        sliceProps.put(\"shard_parent_node\", shardParentNode);\n      }\n      collection = updateSlice(collectionName, collection, new Slice(shardId, replicas, sliceProps, collectionName));\n      return new ZkWriteCommand(collectionName, collection);\n    } else {\n      log.error(\"Unable to create Shard: {} because it already exists in collection: {}\", shardId, collectionName);\n      return ZkStateWriter.NO_OP;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6681d02f2302c363be938426e68f8dfd090cc1bf"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"6a23ab64d81a448ad6ec571cbfc9599cc09b4e4b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","6a23ab64d81a448ad6ec571cbfc9599cc09b4e4b"],"0c924d4069ef5a5bc479a493befe0121aada6896":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a","d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"4abf821a41a2fdca2a1dea148999931d22e20529":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","89424def13674ea17829b41c5883c54ecc31a132"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["4abf821a41a2fdca2a1dea148999931d22e20529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd","0c924d4069ef5a5bc479a493befe0121aada6896"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["6a23ab64d81a448ad6ec571cbfc9599cc09b4e4b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6a23ab64d81a448ad6ec571cbfc9599cc09b4e4b":["89424def13674ea17829b41c5883c54ecc31a132"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","4abf821a41a2fdca2a1dea148999931d22e20529"],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0c924d4069ef5a5bc479a493befe0121aada6896":[],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","0c924d4069ef5a5bc479a493befe0121aada6896"],"4abf821a41a2fdca2a1dea148999931d22e20529":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d3aa683bba99315838c968fefedf3d74f44aa993","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6681d02f2302c363be938426e68f8dfd090cc1bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0c924d4069ef5a5bc479a493befe0121aada6896","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}