{"path":"lucene/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","commits":[{"id":"669ab70ac675a9fdd757b28a1a6ca63f667c7188","date":1305744699,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   * \n   * @param acceptDocsOutOfOrder\n   *          whether documents are allowed to be collected out-of-order\n   */\n  public static CachingCollector create(final boolean acceptDocsOutOfOrder, boolean cacheScores, double maxRAMMB) {\n    Collector other = new Collector() {\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return acceptDocsOutOfOrder;\n      }\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {}\n\n      @Override\n      public void collect(int doc) throws IOException {}\n\n      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   * \n   * @param acceptDocsOutOfOrder\n   *          whether documents are allowed to be collected out-of-order\n   */\n  public static CachingCollector create(final boolean acceptDocsOutOfOrder, boolean cacheScores, double maxRAMMB) {\n    Collector other = new Collector() {\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return acceptDocsOutOfOrder;\n      }\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {}\n\n      @Override\n      public void collect(int doc) throws IOException {}\n\n      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   * \n   * @param acceptDocsOutOfOrder\n   *          whether documents are allowed to be collected out-of-order\n   */\n  public static CachingCollector create(final boolean acceptDocsOutOfOrder, boolean cacheScores, double maxRAMMB) {\n    Collector other = new Collector() {\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return acceptDocsOutOfOrder;\n      }\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {}\n\n      @Override\n      public void collect(int doc) throws IOException {}\n\n      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","sourceNew":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   * \n   * @param acceptDocsOutOfOrder\n   *          whether documents are allowed to be collected out-of-order\n   */\n  public static CachingCollector create(final boolean acceptDocsOutOfOrder, boolean cacheScores, double maxRAMMB) {\n    Collector other = new Collector() {\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return acceptDocsOutOfOrder;\n      }\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {}\n\n      @Override\n      public void collect(int doc) throws IOException {}\n\n      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   * \n   * @param acceptDocsOutOfOrder\n   *          whether documents are allowed to be collected out-of-order\n   */\n  public static CachingCollector create(final boolean acceptDocsOutOfOrder, boolean cacheScores, double maxRAMMB) {\n    Collector other = new Collector() {\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return acceptDocsOutOfOrder;\n      }\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {}\n\n      @Override\n      public void collect(int doc) throws IOException {}\n\n      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","669ab70ac675a9fdd757b28a1a6ca63f667c7188"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["669ab70ac675a9fdd757b28a1a6ca63f667c7188"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","669ab70ac675a9fdd757b28a1a6ca63f667c7188"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"669ab70ac675a9fdd757b28a1a6ca63f667c7188":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","a3776dccca01c11e7046323cfad46a3b4a471233","669ab70ac675a9fdd757b28a1a6ca63f667c7188"],"669ab70ac675a9fdd757b28a1a6ca63f667c7188":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}