{"path":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#equals(Object).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DimensionalRangeQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    if (super.equals(other)) {\n      final PointRangeQuery q = (PointRangeQuery) other;\n      return q.numDims == numDims &&\n        q.bytesPerDim == bytesPerDim &&\n        Arrays.equals(lowerPoint, q.lowerPoint) &&\n        Arrays.equals(lowerInclusive, q.lowerInclusive) &&\n        Arrays.equals(upperPoint, q.upperPoint) &&\n        Arrays.equals(upperInclusive, q.upperInclusive);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object other) {\n    if (super.equals(other)) {\n      final DimensionalRangeQuery q = (DimensionalRangeQuery) other;\n      return q.numDims == numDims &&\n        q.bytesPerDim == bytesPerDim &&\n        Arrays.equals(lowerPoint, q.lowerPoint) &&\n        Arrays.equals(lowerInclusive, q.lowerInclusive) &&\n        Arrays.equals(upperPoint, q.upperPoint) &&\n        Arrays.equals(upperInclusive, q.upperInclusive);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    if (super.equals(other)) {\n      final PointRangeQuery q = (PointRangeQuery) other;\n      return q.numDims == numDims &&\n        q.bytesPerDim == bytesPerDim &&\n        Arrays.equals(lowerPoint, q.lowerPoint) &&\n        Arrays.equals(upperPoint, q.upperPoint);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object other) {\n    if (super.equals(other)) {\n      final PointRangeQuery q = (PointRangeQuery) other;\n      return q.numDims == numDims &&\n        q.bytesPerDim == bytesPerDim &&\n        Arrays.equals(lowerPoint, q.lowerPoint) &&\n        Arrays.equals(lowerInclusive, q.lowerInclusive) &&\n        Arrays.equals(upperPoint, q.upperPoint) &&\n        Arrays.equals(upperInclusive, q.upperInclusive);\n    }\n\n    return false;\n  }\n\n","bugFix":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"bugIntro":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    if (super.equals(other)) {\n      final PointRangeQuery q = (PointRangeQuery) other;\n      return q.numDims == numDims &&\n        q.bytesPerDim == bytesPerDim &&\n        Arrays.equals(lowerPoint, q.lowerPoint) &&\n        Arrays.equals(upperPoint, q.upperPoint);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object other) {\n    if (super.equals(other)) {\n      final PointRangeQuery q = (PointRangeQuery) other;\n      return q.numDims == numDims &&\n        q.bytesPerDim == bytesPerDim &&\n        Arrays.equals(lowerPoint, q.lowerPoint) &&\n        Arrays.equals(lowerInclusive, q.lowerInclusive) &&\n        Arrays.equals(upperPoint, q.upperPoint) &&\n        Arrays.equals(upperInclusive, q.upperInclusive);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    if (super.equals(other)) {\n      final PointRangeQuery q = (PointRangeQuery) other;\n      return q.numDims == numDims &&\n        q.bytesPerDim == bytesPerDim &&\n        Arrays.equals(lowerPoint, q.lowerPoint) &&\n        Arrays.equals(upperPoint, q.upperPoint);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object other) {\n    if (super.equals(other)) {\n      final PointRangeQuery q = (PointRangeQuery) other;\n      return q.numDims == numDims &&\n        q.bytesPerDim == bytesPerDim &&\n        Arrays.equals(lowerPoint, q.lowerPoint) &&\n        Arrays.equals(lowerInclusive, q.lowerInclusive) &&\n        Arrays.equals(upperPoint, q.upperPoint) &&\n        Arrays.equals(upperInclusive, q.upperInclusive);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5839bca64b33c24668e37476ee168d00dc0bb96d","date":1457536035,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#equals(Object).mjava","sourceNew":"  @Override\n  public final boolean equals(Object other) {\n    if (super.equals(other) == false) {\n      return false;\n    }\n\n    final PointRangeQuery q = (PointRangeQuery) other;\n    if (q.numDims != numDims) {\n      return false;\n    }\n\n    if (q.bytesPerDim != bytesPerDim) {\n      return false;\n    }\n\n    // Cannot use Arrays.equals here, because it in turn uses byte[].equals\n    // to compare each value, which only uses \"==\"\n    for(int dim=0;dim<numDims;dim++) {\n      if (Arrays.equals(lowerPoint[dim], q.lowerPoint[dim]) == false) {\n        return false;\n      }\n      if (Arrays.equals(upperPoint[dim], q.upperPoint[dim]) == false) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object other) {\n    if (super.equals(other)) {\n      final PointRangeQuery q = (PointRangeQuery) other;\n      return q.numDims == numDims &&\n        q.bytesPerDim == bytesPerDim &&\n        Arrays.equals(lowerPoint, q.lowerPoint) &&\n        Arrays.equals(upperPoint, q.upperPoint);\n    }\n\n    return false;\n  }\n\n","bugFix":["1800b996d8677670482a071dcb7a48b08c423ace","1904709ea0185dc04e3d77ea01c79e909caf2796","cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"bugIntro":["606ea169579957651185909e7264798e99e714f9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"606ea169579957651185909e7264798e99e714f9","date":1458504317,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#equals(Object).mjava","sourceNew":"  @Override\n  public final boolean equals(Object other) {\n    if (super.equals(other) == false) {\n      return false;\n    }\n\n    final PointRangeQuery q = (PointRangeQuery) other;\n    if (q.numDims != numDims) {\n      return false;\n    }\n\n    if (q.bytesPerDim != bytesPerDim) {\n      return false;\n    }\n\n    if (!Arrays.equals(lowerPoint, q.lowerPoint)) {\n      return false;\n    }\n    \n    if (!Arrays.equals(upperPoint, q.upperPoint)) {\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public final boolean equals(Object other) {\n    if (super.equals(other) == false) {\n      return false;\n    }\n\n    final PointRangeQuery q = (PointRangeQuery) other;\n    if (q.numDims != numDims) {\n      return false;\n    }\n\n    if (q.bytesPerDim != bytesPerDim) {\n      return false;\n    }\n\n    // Cannot use Arrays.equals here, because it in turn uses byte[].equals\n    // to compare each value, which only uses \"==\"\n    for(int dim=0;dim<numDims;dim++) {\n      if (Arrays.equals(lowerPoint[dim], q.lowerPoint[dim]) == false) {\n        return false;\n      }\n      if (Arrays.equals(upperPoint[dim], q.upperPoint[dim]) == false) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"bugIntro":["d2270976e274799939e1b5339eb6c16c7601dfda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2270976e274799939e1b5339eb6c16c7601dfda","date":1458767534,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#equals(Object).mjava","sourceNew":"  @Override\n  public final boolean equals(Object other) {\n    if (super.equals(other) == false) {\n      return false;\n    }\n\n    final PointRangeQuery q = (PointRangeQuery) other;\n    if (field.equals(q.field) == false) {\n      return false;\n    }\n\n    if (q.numDims != numDims) {\n      return false;\n    }\n\n    if (q.bytesPerDim != bytesPerDim) {\n      return false;\n    }\n\n    if (Arrays.equals(lowerPoint, q.lowerPoint) == false) {\n      return false;\n    }\n    \n    if (Arrays.equals(upperPoint, q.upperPoint) == false) {\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public final boolean equals(Object other) {\n    if (super.equals(other) == false) {\n      return false;\n    }\n\n    final PointRangeQuery q = (PointRangeQuery) other;\n    if (q.numDims != numDims) {\n      return false;\n    }\n\n    if (q.bytesPerDim != bytesPerDim) {\n      return false;\n    }\n\n    if (!Arrays.equals(lowerPoint, q.lowerPoint)) {\n      return false;\n    }\n    \n    if (!Arrays.equals(upperPoint, q.upperPoint)) {\n      return false;\n    }\n\n    return true;\n  }\n\n","bugFix":["606ea169579957651185909e7264798e99e714f9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#equals(Object).mjava","sourceNew":"  @Override\n  public final boolean equals(Object o) {\n    return sameClassAs(o) &&\n           equalsTo(getClass().cast(o));\n  }\n\n","sourceOld":"  @Override\n  public final boolean equals(Object other) {\n    if (super.equals(other) == false) {\n      return false;\n    }\n\n    final PointRangeQuery q = (PointRangeQuery) other;\n    if (field.equals(q.field) == false) {\n      return false;\n    }\n\n    if (q.numDims != numDims) {\n      return false;\n    }\n\n    if (q.bytesPerDim != bytesPerDim) {\n      return false;\n    }\n\n    if (Arrays.equals(lowerPoint, q.lowerPoint) == false) {\n      return false;\n    }\n    \n    if (Arrays.equals(upperPoint, q.upperPoint) == false) {\n      return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#equals(Object).mjava","sourceNew":"  @Override\n  public final boolean equals(Object o) {\n    return sameClassAs(o) &&\n           equalsTo(getClass().cast(o));\n  }\n\n","sourceOld":"  @Override\n  public final boolean equals(Object other) {\n    if (super.equals(other) == false) {\n      return false;\n    }\n\n    final PointRangeQuery q = (PointRangeQuery) other;\n    if (field.equals(q.field) == false) {\n      return false;\n    }\n\n    if (q.numDims != numDims) {\n      return false;\n    }\n\n    if (q.bytesPerDim != bytesPerDim) {\n      return false;\n    }\n\n    if (Arrays.equals(lowerPoint, q.lowerPoint) == false) {\n      return false;\n    }\n    \n    if (Arrays.equals(upperPoint, q.upperPoint) == false) {\n      return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2270976e274799939e1b5339eb6c16c7601dfda":["606ea169579957651185909e7264798e99e714f9"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5839bca64b33c24668e37476ee168d00dc0bb96d":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["d2270976e274799939e1b5339eb6c16c7601dfda"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","c422e924212367b334b4938f1fd3e44438e88c40"],"606ea169579957651185909e7264798e99e714f9":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"c422e924212367b334b4938f1fd3e44438e88c40":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d2270976e274799939e1b5339eb6c16c7601dfda","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"d2270976e274799939e1b5339eb6c16c7601dfda":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"5839bca64b33c24668e37476ee168d00dc0bb96d":["606ea169579957651185909e7264798e99e714f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"606ea169579957651185909e7264798e99e714f9":["d2270976e274799939e1b5339eb6c16c7601dfda"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}