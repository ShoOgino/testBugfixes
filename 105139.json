{"path":"solr/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","commits":[{"id":"c194d5d82aa52be285a8de7cbfb68645e01c4f0e","date":1268884955,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","pathOld":"/dev/null","sourceNew":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RAMDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory() {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RAMDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RAMDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e22ffe8cc51a892ae103df018822d7873e901c2a","e22ffe8cc51a892ae103df018822d7873e901c2a","e22ffe8cc51a892ae103df018822d7873e901c2a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d6a7bde407a8c57099e269492b3d2fa0ce839e4","date":1269101017,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","sourceNew":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory() {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n  }\n\n","sourceOld":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RAMDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory() {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RAMDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RAMDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n  }\n\n","bugFix":null,"bugIntro":["e22ffe8cc51a892ae103df018822d7873e901c2a","e22ffe8cc51a892ae103df018822d7873e901c2a","e22ffe8cc51a892ae103df018822d7873e901c2a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2cf65de5ffe215f49df0b92ef7ff4eadc7a6878c","date":1294924594,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","sourceNew":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory() {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n  }\n\n","bugFix":null,"bugIntro":["e22ffe8cc51a892ae103df018822d7873e901c2a","e22ffe8cc51a892ae103df018822d7873e901c2a","e22ffe8cc51a892ae103df018822d7873e901c2a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","sourceNew":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory() {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","sourceNew":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory() {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","sourceNew":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","sourceNew":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","sourceNew":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c194d5d82aa52be285a8de7cbfb68645e01c4f0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2cf65de5ffe215f49df0b92ef7ff4eadc7a6878c"],"c26f00b574427b55127e869b935845554afde1fa":["2cf65de5ffe215f49df0b92ef7ff4eadc7a6878c","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3d6a7bde407a8c57099e269492b3d2fa0ce839e4","2cf65de5ffe215f49df0b92ef7ff4eadc7a6878c"],"2cf65de5ffe215f49df0b92ef7ff4eadc7a6878c":["3d6a7bde407a8c57099e269492b3d2fa0ce839e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["2cf65de5ffe215f49df0b92ef7ff4eadc7a6878c"],"3d6a7bde407a8c57099e269492b3d2fa0ce839e4":["c194d5d82aa52be285a8de7cbfb68645e01c4f0e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["3d6a7bde407a8c57099e269492b3d2fa0ce839e4","2cf65de5ffe215f49df0b92ef7ff4eadc7a6878c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c194d5d82aa52be285a8de7cbfb68645e01c4f0e":["3d6a7bde407a8c57099e269492b3d2fa0ce839e4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c194d5d82aa52be285a8de7cbfb68645e01c4f0e"],"2cf65de5ffe215f49df0b92ef7ff4eadc7a6878c":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"3d6a7bde407a8c57099e269492b3d2fa0ce839e4":["29ef99d61cda9641b6250bf9567329a6e65f901d","2cf65de5ffe215f49df0b92ef7ff4eadc7a6878c","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}