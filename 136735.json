{"path":"lucene/misc/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","commits":[{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","sourceNew":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static Query newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"InetAddress must not be null\");\n    }\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      int m = 1 << (7 - (i & 7));\n      lower[i >> 3] &= ~m;\n      upper[i >> 3] |= m;\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), InetAddress.getByAddress(upper));\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","sourceOld":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static Query newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"InetAddress must not be null\");\n    }\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      int m = 1 << (7 - (i & 7));\n      lower[i >> 3] &= ~m;\n      upper[i >> 3] |= m;\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), InetAddress.getByAddress(upper));\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a52b01a73cacbd2d360240e72d64c0ba353618f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a52b01a73cacbd2d360240e72d64c0ba353618f"]},"commit2Childs":{"4a52b01a73cacbd2d360240e72d64c0ba353618f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}