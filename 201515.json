{"path":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,Searcher,Query,Sort,String).mjava","commits":[{"id":"ff1421d1974cfd5072e195bbb63592657da2f66e","date":1285733489,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,Searcher,Query,Sort,String).mjava","pathOld":"/dev/null","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, Searcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, expectedResult.length(), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["259055feeba9afa10e21ab63032f3778bb1802f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"259055feeba9afa10e21ab63032f3778bb1802f1","date":1291199138,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,Searcher,Query,Sort,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,Searcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, Searcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, Searcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, expectedResult.length(), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (msg, expectedResult, buff.toString());\n  }\n\n","bugFix":["ff1421d1974cfd5072e195bbb63592657da2f66e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,Searcher,Query,Sort,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,Searcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, Searcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, Searcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, expectedResult.length(), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (msg, expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,Searcher,Query,Sort,String).mjava","pathOld":"/dev/null","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, Searcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,Searcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, Searcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (msg, expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,Searcher,Query,Sort,String).mjava","sourceNew":null,"sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, Searcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (msg, expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,Searcher,Query,Sort,String).mjava","sourceNew":null,"sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, Searcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (msg, expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["3bb13258feba31ab676502787ab2e1779f129b7a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["259055feeba9afa10e21ab63032f3778bb1802f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"259055feeba9afa10e21ab63032f3778bb1802f1":["ff1421d1974cfd5072e195bbb63592657da2f66e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","259055feeba9afa10e21ab63032f3778bb1802f1"],"ff1421d1974cfd5072e195bbb63592657da2f66e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ff1421d1974cfd5072e195bbb63592657da2f66e","259055feeba9afa10e21ab63032f3778bb1802f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ff1421d1974cfd5072e195bbb63592657da2f66e"],"259055feeba9afa10e21ab63032f3778bb1802f1":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"ff1421d1974cfd5072e195bbb63592657da2f66e":["259055feeba9afa10e21ab63032f3778bb1802f1","3bb13258feba31ab676502787ab2e1779f129b7a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["70ad682703b8585f5d0a637efec044d57ec05efb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}