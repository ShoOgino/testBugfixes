{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest2(int,String,SolrInputDocument).mjava","commits":[{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest2(int,String,SolrInputDocument).mjava","pathOld":"/dev/null","sourceNew":"  // trying to incrementally get things to pass\n  private List<Node> setupRequest2(int hash, String id, SolrInputDocument doc) {\n    List<Node> nodes = null;\n\n    // if we are in zk mode...\n    if (zkEnabled) {\n\n//////\n      ClusterState cstate = zkController.getClusterState();\n      numNodes = cstate.getLiveNodes().size();\n      DocCollection coll = cstate.getCollection(collection);\n      Slice slice = coll.getRouter().getTargetShard(id, doc, req.getParams(), coll);\n\n      Replica leader = slice.getLeader();\n\n\n\n//////\n\n      // set num nodes\n      numNodes = cstate.getLiveNodes().size();\n\n      String shardId = getShard(hash, collection, zkController.getClusterState()); // get the right shard based on the hash...\n\nif (shardId != slice.getName()) {\n  System.out.println(\"######################## shardId=\"+shardId + \"  slice=\"+slice + \" cstate=\" + cstate);\n}\n\n      try {\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(zkController.getZkStateReader().getLeaderProps(\n            collection, shardId));\n\n        String leaderNodeName = leaderProps.getCoreNodeName();\n        String coreName = req.getCore().getName();\n        String coreNodeName = zkController.getNodeName() + \"_\" + coreName;\n        isLeader = coreNodeName.equals(leaderNodeName);\n\n        DistribPhase phase =\n            DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n        doDefensiveChecks(shardId, phase);\n\n\n        if (DistribPhase.FROMLEADER == phase) {\n          // we are coming from the leader, just go local - add no urls\n          forwardToLeader = false;\n        } else if (isLeader) {\n          // that means I want to forward onto my replicas...\n          // so get the replicas...\n          forwardToLeader = false;\n          List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n              .getReplicaProps(collection, shardId, zkController.getNodeName(),\n                  coreName, null, ZkStateReader.DOWN);\n          if (replicaProps != null) {\n            nodes = new ArrayList<Node>(replicaProps.size());\n            // check for test param that lets us miss replicas\n            String[] skipList = req.getParams().getParams(\"test.distrib.skip.servers\");\n            Set<String> skipListSet = null;\n            if (skipList != null) {\n              skipListSet = new HashSet<String>(skipList.length);\n              skipListSet.addAll(Arrays.asList(skipList));\n            }\n\n            for (ZkCoreNodeProps props : replicaProps) {\n              if (skipList != null) {\n                if (!skipListSet.contains(props.getCoreUrl())) {\n                  nodes.add(new StdNode(props));\n                }\n              } else {\n                nodes.add(new StdNode(props));\n              }\n            }\n          }\n\n        } else {\n          // I need to forward onto the leader...\n          nodes = new ArrayList<Node>(1);\n          nodes.add(new RetryNode(leaderProps, zkController.getZkStateReader(), collection, shardId));\n          forwardToLeader = true;\n        }\n\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n\n    return nodes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89f828d954597b98a28942874636f35c719b8a5d","date":1354471211,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest2(int,String,SolrInputDocument).mjava","sourceNew":null,"sourceOld":"  // trying to incrementally get things to pass\n  private List<Node> setupRequest2(int hash, String id, SolrInputDocument doc) {\n    List<Node> nodes = null;\n\n    // if we are in zk mode...\n    if (zkEnabled) {\n\n//////\n      ClusterState cstate = zkController.getClusterState();\n      numNodes = cstate.getLiveNodes().size();\n      DocCollection coll = cstate.getCollection(collection);\n      Slice slice = coll.getRouter().getTargetShard(id, doc, req.getParams(), coll);\n\n      Replica leader = slice.getLeader();\n\n\n\n//////\n\n      // set num nodes\n      numNodes = cstate.getLiveNodes().size();\n\n      String shardId = getShard(hash, collection, zkController.getClusterState()); // get the right shard based on the hash...\n\nif (shardId != slice.getName()) {\n  System.out.println(\"######################## shardId=\"+shardId + \"  slice=\"+slice + \" cstate=\" + cstate);\n}\n\n      try {\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(zkController.getZkStateReader().getLeaderProps(\n            collection, shardId));\n\n        String leaderNodeName = leaderProps.getCoreNodeName();\n        String coreName = req.getCore().getName();\n        String coreNodeName = zkController.getNodeName() + \"_\" + coreName;\n        isLeader = coreNodeName.equals(leaderNodeName);\n\n        DistribPhase phase =\n            DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n        doDefensiveChecks(shardId, phase);\n\n\n        if (DistribPhase.FROMLEADER == phase) {\n          // we are coming from the leader, just go local - add no urls\n          forwardToLeader = false;\n        } else if (isLeader) {\n          // that means I want to forward onto my replicas...\n          // so get the replicas...\n          forwardToLeader = false;\n          List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n              .getReplicaProps(collection, shardId, zkController.getNodeName(),\n                  coreName, null, ZkStateReader.DOWN);\n          if (replicaProps != null) {\n            nodes = new ArrayList<Node>(replicaProps.size());\n            // check for test param that lets us miss replicas\n            String[] skipList = req.getParams().getParams(\"test.distrib.skip.servers\");\n            Set<String> skipListSet = null;\n            if (skipList != null) {\n              skipListSet = new HashSet<String>(skipList.length);\n              skipListSet.addAll(Arrays.asList(skipList));\n            }\n\n            for (ZkCoreNodeProps props : replicaProps) {\n              if (skipList != null) {\n                if (!skipListSet.contains(props.getCoreUrl())) {\n                  nodes.add(new StdNode(props));\n                }\n              } else {\n                nodes.add(new StdNode(props));\n              }\n            }\n          }\n\n        } else {\n          // I need to forward onto the leader...\n          nodes = new ArrayList<Node>(1);\n          nodes.add(new RetryNode(leaderProps, zkController.getZkStateReader(), collection, shardId));\n          forwardToLeader = true;\n        }\n\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89f828d954597b98a28942874636f35c719b8a5d":["c5a558d54519c651068ddb202f03befefb1514a7"],"c5a558d54519c651068ddb202f03befefb1514a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89f828d954597b98a28942874636f35c719b8a5d"]},"commit2Childs":{"89f828d954597b98a28942874636f35c719b8a5d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c5a558d54519c651068ddb202f03befefb1514a7":["89f828d954597b98a28942874636f35c719b8a5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5a558d54519c651068ddb202f03befefb1514a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}