{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(FieldInfo,AtomicReader,SortedDocValues).mjava","commits":[{"id":"e99275efa2c9c9ae3bdba986218af82f2bf3dc30","date":1354658499,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(FieldInfo,AtomicReader,SortedDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(FieldInfo,SegmentReader,SortedDocValues).mjava","sourceNew":"  private static void checkSortedDocValues(FieldInfo fi, AtomicReader reader, SortedDocValues dv) {\n    // nocommit remove this:\n    if (dv == null) {\n      return;\n    }\n    checkBinaryDocValues(fi, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fi.name + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fi.name + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fi.name + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","sourceOld":"  private void checkSortedDocValues(FieldInfo fi, SegmentReader reader, SortedDocValues dv) {\n    checkBinaryDocValues(fi, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fi.name + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fi.name + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fi.name + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50599bdf4e0c26952f76b740a4280d058cab3539","date":1355180801,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(FieldInfo,AtomicReader,SortedDocValues).mjava","sourceNew":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv) {\n    // nocommit remove this:\n    if (dv == null) {\n      return;\n    }\n    checkBinaryDocValues(fieldName, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedDocValues(FieldInfo fi, AtomicReader reader, SortedDocValues dv) {\n    // nocommit remove this:\n    if (dv == null) {\n      return;\n    }\n    checkBinaryDocValues(fi, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fi.name + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fi.name + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fi.name + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"50599bdf4e0c26952f76b740a4280d058cab3539":["e99275efa2c9c9ae3bdba986218af82f2bf3dc30"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e99275efa2c9c9ae3bdba986218af82f2bf3dc30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"50599bdf4e0c26952f76b740a4280d058cab3539":[],"e99275efa2c9c9ae3bdba986218af82f2bf3dc30":["50599bdf4e0c26952f76b740a4280d058cab3539"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e99275efa2c9c9ae3bdba986218af82f2bf3dc30","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["50599bdf4e0c26952f76b740a4280d058cab3539","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}