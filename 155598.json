{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","commits":[{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c32a8448145a74a8902798f2e63e322827757ff2","date":1496834422,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"664ff2b928393480d9655010aa700656b0fcade0","date":1496842764,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2480cf60350a342e5e57439f3e71092fabc364a2","date":1499215962,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0d9c88546c1a130d50b56981790d87a308daffd","date":1499234617,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1","date":1503489512,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9ccfe45460d496c5e5e1b70396521dac842d966","date":1516798975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEFRS',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEFRS',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0215c504dd86fecb28c636f37ebcfb2906a839ec","date":1522393878,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/RestoreTriggerStateTest#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEFRS',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS)) {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEFRS',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/RestoreTriggerStateTest#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEFRS',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS)) {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEFRS',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2480cf60350a342e5e57439f3e71092fabc364a2":["664ff2b928393480d9655010aa700656b0fcade0"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["e0d9c88546c1a130d50b56981790d87a308daffd"],"0215c504dd86fecb28c636f37ebcfb2906a839ec":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["560c18d71dad43d675158783c3840f8c80d6d39c","d9ccfe45460d496c5e5e1b70396521dac842d966"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","464244264804e3f981bf1fb4b732516d8d62dbc2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"464244264804e3f981bf1fb4b732516d8d62dbc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c32a8448145a74a8902798f2e63e322827757ff2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"e0d9c88546c1a130d50b56981790d87a308daffd":["664ff2b928393480d9655010aa700656b0fcade0","2480cf60350a342e5e57439f3e71092fabc364a2"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","0215c504dd86fecb28c636f37ebcfb2906a839ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"664ff2b928393480d9655010aa700656b0fcade0":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","c32a8448145a74a8902798f2e63e322827757ff2"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["560c18d71dad43d675158783c3840f8c80d6d39c"]},"commit2Childs":{"2480cf60350a342e5e57439f3e71092fabc364a2":["e0d9c88546c1a130d50b56981790d87a308daffd"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"0215c504dd86fecb28c636f37ebcfb2906a839ec":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["0215c504dd86fecb28c636f37ebcfb2906a839ec","acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["c32a8448145a74a8902798f2e63e322827757ff2","664ff2b928393480d9655010aa700656b0fcade0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","5531f16a602ef350b6c9adfb08ebaa13a60fe3db","464244264804e3f981bf1fb4b732516d8d62dbc2","560c18d71dad43d675158783c3840f8c80d6d39c"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"c32a8448145a74a8902798f2e63e322827757ff2":["664ff2b928393480d9655010aa700656b0fcade0"],"e0d9c88546c1a130d50b56981790d87a308daffd":["cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"560c18d71dad43d675158783c3840f8c80d6d39c":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","d9ccfe45460d496c5e5e1b70396521dac842d966"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"664ff2b928393480d9655010aa700656b0fcade0":["2480cf60350a342e5e57439f3e71092fabc364a2","e0d9c88546c1a130d50b56981790d87a308daffd"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}