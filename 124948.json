{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(NumericEntry).mjava","commits":[{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    switch (entry.format) {\n      case CONST_COMPRESSED: {\n        final long constant = entry.minValue;\n        final Bits live = getLiveBits(entry.missingOffset, (int)entry.count);\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return live.get((int)index) ? constant : 0;\n          }\n        };\n      }\n      case DELTA_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long delta = entry.minValue;\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return delta + values.get(id);\n          }\n        };\n      }\n      case GCD_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final LongValues quotientReader = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      }\n      case TABLE_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long table[] = entry.table;\n        final LongValues ords = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get(id)];\n          }\n        };\n      }\n      case SPARSE_COMPRESSED:\n        final SparseNumericDocValues values = getSparseNumericDocValues(entry);\n        final long missingValue;\n        switch (entry.numberType) {\n          case ORDINAL:\n            missingValue = -1L;\n            break;\n          case VALUE:\n            missingValue = 0L;\n            break;\n          default:\n            throw new AssertionError();\n        }\n        return new SparseNumericDocValuesRandomAccessWrapper(values, missingValue);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    switch (entry.format) {\n      case CONST_COMPRESSED: {\n        final long constant = entry.minValue;\n        final Bits live = getLiveBits(entry.missingOffset, (int)entry.count);\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return live.get((int)index) ? constant : 0;\n          }\n        };\n      }\n      case DELTA_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long delta = entry.minValue;\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return delta + values.get(id);\n          }\n        };\n      }\n      case GCD_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final LongValues quotientReader = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      }\n      case TABLE_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long table[] = entry.table;\n        final LongValues ords = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get(id)];\n          }\n        };\n      }\n      case SPARSE_COMPRESSED:\n        final SparseNumericDocValues values = getSparseNumericDocValues(entry);\n        final long missingValue;\n        switch (entry.numberType) {\n          case ORDINAL:\n            missingValue = -1L;\n            break;\n          case VALUE:\n            missingValue = 0L;\n            break;\n          default:\n            throw new AssertionError();\n        }\n        return new SparseNumericDocValuesRandomAccessWrapper(values, missingValue);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"/dev/null","sourceNew":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    switch (entry.format) {\n      case CONST_COMPRESSED: {\n        final long constant = entry.minValue;\n        final Bits live = getLiveBits(entry.missingOffset, (int)entry.count);\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return live.get((int)index) ? constant : 0;\n          }\n        };\n      }\n      case DELTA_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long delta = entry.minValue;\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return delta + values.get(id);\n          }\n        };\n      }\n      case GCD_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final LongValues quotientReader = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      }\n      case TABLE_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long table[] = entry.table;\n        final LongValues ords = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get(id)];\n          }\n        };\n      }\n      case SPARSE_COMPRESSED:\n        final SparseNumericDocValues values = getSparseNumericDocValues(entry);\n        final long missingValue;\n        switch (entry.numberType) {\n          case ORDINAL:\n            missingValue = -1L;\n            break;\n          case VALUE:\n            missingValue = 0L;\n            break;\n          default:\n            throw new AssertionError();\n        }\n        return new SparseNumericDocValuesRandomAccessWrapper(values, missingValue);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85b9829d27224bda451a373a47f081afb1c664b8","date":1498846708,"type":4,"author":"Anshum Gupta","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":null,"sourceOld":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    switch (entry.format) {\n      case CONST_COMPRESSED: {\n        final long constant = entry.minValue;\n        final Bits live = getLiveBits(entry.missingOffset, (int)entry.count);\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return live.get((int)index) ? constant : 0;\n          }\n        };\n      }\n      case DELTA_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long delta = entry.minValue;\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return delta + values.get(id);\n          }\n        };\n      }\n      case GCD_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final LongValues quotientReader = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      }\n      case TABLE_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long table[] = entry.table;\n        final LongValues ords = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get(id)];\n          }\n        };\n      }\n      case SPARSE_COMPRESSED:\n        final SparseNumericDocValues values = getSparseNumericDocValues(entry);\n        final long missingValue;\n        switch (entry.numberType) {\n          case ORDINAL:\n            missingValue = -1L;\n            break;\n          case VALUE:\n            missingValue = 0L;\n            break;\n          default:\n            throw new AssertionError();\n        }\n        return new SparseNumericDocValuesRandomAccessWrapper(values, missingValue);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":4,"author":"Anshum Gupta","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":null,"sourceOld":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    switch (entry.format) {\n      case CONST_COMPRESSED: {\n        final long constant = entry.minValue;\n        final Bits live = getLiveBits(entry.missingOffset, (int)entry.count);\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return live.get((int)index) ? constant : 0;\n          }\n        };\n      }\n      case DELTA_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long delta = entry.minValue;\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return delta + values.get(id);\n          }\n        };\n      }\n      case GCD_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final LongValues quotientReader = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      }\n      case TABLE_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long table[] = entry.table;\n        final LongValues ords = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get(id)];\n          }\n        };\n      }\n      case SPARSE_COMPRESSED:\n        final SparseNumericDocValues values = getSparseNumericDocValues(entry);\n        final long missingValue;\n        switch (entry.numberType) {\n          case ORDINAL:\n            missingValue = -1L;\n            break;\n          case VALUE:\n            missingValue = 0L;\n            break;\n          default:\n            throw new AssertionError();\n        }\n        return new SparseNumericDocValuesRandomAccessWrapper(values, missingValue);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":null,"sourceOld":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    switch (entry.format) {\n      case CONST_COMPRESSED: {\n        final long constant = entry.minValue;\n        final Bits live = getLiveBits(entry.missingOffset, (int)entry.count);\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return live.get((int)index) ? constant : 0;\n          }\n        };\n      }\n      case DELTA_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long delta = entry.minValue;\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return delta + values.get(id);\n          }\n        };\n      }\n      case GCD_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final LongValues quotientReader = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      }\n      case TABLE_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long table[] = entry.table;\n        final LongValues ords = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get(id)];\n          }\n        };\n      }\n      case SPARSE_COMPRESSED:\n        final SparseNumericDocValues values = getSparseNumericDocValues(entry);\n        final long missingValue;\n        switch (entry.numberType) {\n          case ORDINAL:\n            missingValue = -1L;\n            break;\n          case VALUE:\n            missingValue = 0L;\n            break;\n          default:\n            throw new AssertionError();\n        }\n        return new SparseNumericDocValuesRandomAccessWrapper(values, missingValue);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc018b79379c67835b40b1259cd3dc931df60944":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","85b9829d27224bda451a373a47f081afb1c664b8"],"30c8e5574b55d57947e989443dfde611646530ee":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","cc018b79379c67835b40b1259cd3dc931df60944"],"85b9829d27224bda451a373a47f081afb1c664b8":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc018b79379c67835b40b1259cd3dc931df60944"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["cc018b79379c67835b40b1259cd3dc931df60944","30c8e5574b55d57947e989443dfde611646530ee","85b9829d27224bda451a373a47f081afb1c664b8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cc018b79379c67835b40b1259cd3dc931df60944":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30c8e5574b55d57947e989443dfde611646530ee":[],"85b9829d27224bda451a373a47f081afb1c664b8":["cc018b79379c67835b40b1259cd3dc931df60944"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}