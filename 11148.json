{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/SegmentingTokenizerBase#read(Reader,char[],int,int).mjava","commits":[{"id":"ca700981d999d4025d8f401b1fc3f9b6f4e25ccf","date":1395362033,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/SegmentingTokenizerBase#read(Reader,char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: refactor to a shared readFully somewhere\n  // (NGramTokenizer does this too):\n  /** commons-io's readFully, but without bugs if offset != 0 */\n  private static int read(Reader input, char[] buffer, int offset, int length) throws IOException {\n    assert length >= 0 : \"length must not be negative: \" + length;\n \n    int remaining = length;\n    while (remaining > 0) {\n      int location = length - remaining;\n      int count = input.read(buffer, offset + location, remaining);\n      if (-1 == count) { // EOF\n        break;\n      }\n      remaining -= count;\n    }\n    return length - remaining;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ca700981d999d4025d8f401b1fc3f9b6f4e25ccf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ca700981d999d4025d8f401b1fc3f9b6f4e25ccf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca700981d999d4025d8f401b1fc3f9b6f4e25ccf"],"ca700981d999d4025d8f401b1fc3f9b6f4e25ccf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}