{"path":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#refreshReader(IndexReader).mjava","commits":[{"id":"cbf497fc92342be81ff184a144dfa7c96264116b","date":1275079529,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#refreshReader(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private static IndexReader refreshReader(IndexReader reader) throws IOException {\n    IndexReader oldReader = reader;\n    reader = reader.reopen();\n    if (reader != oldReader) {\n      oldReader.close();\n    }\n    return reader;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#refreshReader(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#refreshReader(IndexReader).mjava","sourceNew":"  private static IndexReader refreshReader(IndexReader reader) throws IOException {\n    IndexReader oldReader = reader;\n    reader = IndexReader.openIfChanged(reader);\n    if (reader != null) {\n      oldReader.close();\n      return reader;\n    } else {\n      return oldReader;\n    }\n  }\n\n","sourceOld":"  private static IndexReader refreshReader(IndexReader reader) throws IOException {\n    IndexReader oldReader = reader;\n    reader = reader.reopen();\n    if (reader != oldReader) {\n      oldReader.close();\n    }\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2ec9a9068164200de82395f0e8537a9d9302f3f","date":1327856476,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#refreshReader(DirectoryReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#refreshReader(IndexReader).mjava","sourceNew":"  private static DirectoryReader refreshReader(DirectoryReader reader) throws IOException {\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader);\n    if (reader != null) {\n      oldReader.close();\n      return reader;\n    } else {\n      return oldReader;\n    }\n  }\n\n","sourceOld":"  private static IndexReader refreshReader(IndexReader reader) throws IOException {\n    IndexReader oldReader = reader;\n    reader = IndexReader.openIfChanged(reader);\n    if (reader != null) {\n      oldReader.close();\n      return reader;\n    } else {\n      return oldReader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#refreshReader(DirectoryReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#refreshReader(IndexReader).mjava","sourceNew":"  private static DirectoryReader refreshReader(DirectoryReader reader) throws IOException {\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader);\n    if (reader != null) {\n      oldReader.close();\n      return reader;\n    } else {\n      return oldReader;\n    }\n  }\n\n","sourceOld":"  private static IndexReader refreshReader(IndexReader reader) throws IOException {\n    IndexReader oldReader = reader;\n    reader = IndexReader.openIfChanged(reader);\n    if (reader != null) {\n      oldReader.close();\n      return reader;\n    } else {\n      return oldReader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["cbf497fc92342be81ff184a144dfa7c96264116b"],"a2ec9a9068164200de82395f0e8537a9d9302f3f":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["8a8259c922a83abc544609227a60d48e5ee93e7e","a2ec9a9068164200de82395f0e8537a9d9302f3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cbf497fc92342be81ff184a144dfa7c96264116b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["a2ec9a9068164200de82395f0e8537a9d9302f3f","5cab9a86bd67202d20b6adc463008c8e982b070a"],"a2ec9a9068164200de82395f0e8537a9d9302f3f":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cbf497fc92342be81ff184a144dfa7c96264116b"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cbf497fc92342be81ff184a144dfa7c96264116b":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}