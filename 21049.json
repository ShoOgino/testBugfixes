{"path":"src/java/org/apache/lucene/index/DirectoryIndexReader#doCommit(String).mjava","commits":[{"id":"f664ea05e4a031c766b6bff0cefcd6f3833fbb81","date":1235737223,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryIndexReader#doCommit(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or\n   * setNorm operations\n   *\n   * If an exception is hit, then either no changes or all\n   * changes will have been committed to the index\n   * (transactional semantics).\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void doCommit(String commitUserData) throws IOException {\n    if (hasChanges) {\n      if (segmentInfos != null) {\n        segmentInfos.setUserData(commitUserData);\n        // Default deleter (for backwards compatibility) is\n        // KeepOnlyLastCommitDeleter:\n        IndexFileDeleter deleter =  new IndexFileDeleter(directory,\n                                                         deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                         segmentInfos, null, null);\n\n        // Checkpoint the state we are about to change, in\n        // case we have to roll back:\n        startCommit();\n\n        boolean success = false;\n        try {\n          commitChanges();\n\n          // Sync all files we just wrote\n          Iterator it = segmentInfos.files(directory, false).iterator();\n          while(it.hasNext()) {\n            final String fileName = (String) it.next();\n            if (!synced.contains(fileName)) {\n              assert directory.fileExists(fileName);\n              directory.sync(fileName);\n              synced.add(fileName);\n            }\n          }\n\n          segmentInfos.commit(directory);\n          success = true;\n        } finally {\n\n          if (!success) {\n\n            // Rollback changes that were made to\n            // SegmentInfos but failed to get [fully]\n            // committed.  This way this reader instance\n            // remains consistent (matched to what's\n            // actually in the index):\n            rollbackCommit();\n\n            // Recompute deletable files & remove them (so\n            // partially written .del files, etc, are\n            // removed):\n            deleter.refresh();\n          }\n        }\n\n        // Have the deleter remove any now unreferenced\n        // files due to this commit:\n        deleter.checkpoint(segmentInfos, true);\n        deleter.close();\n\n        if (writeLock != null) {\n          writeLock.release();  // release write lock\n          writeLock = null;\n        }\n      }\n      else\n        commitChanges();\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3ab91f3bb602daf6393fa7f78b11afd3400d669","date":1243282044,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryIndexReader#doCommit(Map).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryIndexReader#doCommit(String).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or\n   * setNorm operations\n   *\n   * If an exception is hit, then either no changes or all\n   * changes will have been committed to the index\n   * (transactional semantics).\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void doCommit(Map commitUserData) throws IOException {\n    if (hasChanges) {\n      if (segmentInfos != null) {\n        segmentInfos.setUserData(commitUserData);\n        // Default deleter (for backwards compatibility) is\n        // KeepOnlyLastCommitDeleter:\n        IndexFileDeleter deleter =  new IndexFileDeleter(directory,\n                                                         deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                         segmentInfos, null, null);\n\n        // Checkpoint the state we are about to change, in\n        // case we have to roll back:\n        startCommit();\n\n        boolean success = false;\n        try {\n          commitChanges();\n\n          // Sync all files we just wrote\n          Iterator it = segmentInfos.files(directory, false).iterator();\n          while(it.hasNext()) {\n            final String fileName = (String) it.next();\n            if (!synced.contains(fileName)) {\n              assert directory.fileExists(fileName);\n              directory.sync(fileName);\n              synced.add(fileName);\n            }\n          }\n\n          segmentInfos.commit(directory);\n          success = true;\n        } finally {\n\n          if (!success) {\n\n            // Rollback changes that were made to\n            // SegmentInfos but failed to get [fully]\n            // committed.  This way this reader instance\n            // remains consistent (matched to what's\n            // actually in the index):\n            rollbackCommit();\n\n            // Recompute deletable files & remove them (so\n            // partially written .del files, etc, are\n            // removed):\n            deleter.refresh();\n          }\n        }\n\n        // Have the deleter remove any now unreferenced\n        // files due to this commit:\n        deleter.checkpoint(segmentInfos, true);\n        deleter.close();\n\n        if (writeLock != null) {\n          writeLock.release();  // release write lock\n          writeLock = null;\n        }\n      }\n      else\n        commitChanges();\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or\n   * setNorm operations\n   *\n   * If an exception is hit, then either no changes or all\n   * changes will have been committed to the index\n   * (transactional semantics).\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void doCommit(String commitUserData) throws IOException {\n    if (hasChanges) {\n      if (segmentInfos != null) {\n        segmentInfos.setUserData(commitUserData);\n        // Default deleter (for backwards compatibility) is\n        // KeepOnlyLastCommitDeleter:\n        IndexFileDeleter deleter =  new IndexFileDeleter(directory,\n                                                         deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                         segmentInfos, null, null);\n\n        // Checkpoint the state we are about to change, in\n        // case we have to roll back:\n        startCommit();\n\n        boolean success = false;\n        try {\n          commitChanges();\n\n          // Sync all files we just wrote\n          Iterator it = segmentInfos.files(directory, false).iterator();\n          while(it.hasNext()) {\n            final String fileName = (String) it.next();\n            if (!synced.contains(fileName)) {\n              assert directory.fileExists(fileName);\n              directory.sync(fileName);\n              synced.add(fileName);\n            }\n          }\n\n          segmentInfos.commit(directory);\n          success = true;\n        } finally {\n\n          if (!success) {\n\n            // Rollback changes that were made to\n            // SegmentInfos but failed to get [fully]\n            // committed.  This way this reader instance\n            // remains consistent (matched to what's\n            // actually in the index):\n            rollbackCommit();\n\n            // Recompute deletable files & remove them (so\n            // partially written .del files, etc, are\n            // removed):\n            deleter.refresh();\n          }\n        }\n\n        // Have the deleter remove any now unreferenced\n        // files due to this commit:\n        deleter.checkpoint(segmentInfos, true);\n        deleter.close();\n\n        if (writeLock != null) {\n          writeLock.release();  // release write lock\n          writeLock = null;\n        }\n      }\n      else\n        commitChanges();\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f664ea05e4a031c766b6bff0cefcd6f3833fbb81":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["f664ea05e4a031c766b6bff0cefcd6f3833fbb81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"]},"commit2Childs":{"f664ea05e4a031c766b6bff0cefcd6f3833fbb81":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f664ea05e4a031c766b6bff0cefcd6f3833fbb81"],"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}