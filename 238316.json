{"path":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#createSharedManager(int,FieldDoc,int,int).mjava","commits":[{"id":"807314aa41c10866aec273a0e54fd0d24d8971de","date":1570435832,"type":1,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#createSharedManager(int,FieldDoc,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#createSharedManager(int,FieldDoc,int).mjava","sourceNew":"  /**\n   * Create a CollectorManager which uses a shared hit counter to maintain number of hits\n   * and a shared {@link MaxScoreAccumulator} to propagate the minimum score accross segments\n   */\n  public static CollectorManager<TopScoreDocCollector, TopDocs> createSharedManager(int numHits, FieldDoc after,\n                                                                                      int totalHitsThreshold, int maxDocs) {\n    return new CollectorManager<>() {\n\n      private final HitsThresholdChecker hitsThresholdChecker = HitsThresholdChecker.createShared(totalHitsThreshold);\n      private final MaxScoreAccumulator minScoreAcc = new MaxScoreAccumulator();\n\n      @Override\n      public TopScoreDocCollector newCollector() throws IOException {\n        return TopScoreDocCollector.create(numHits, after, hitsThresholdChecker, minScoreAcc);\n      }\n\n      @Override\n      public TopDocs reduce(Collection<TopScoreDocCollector> collectors) throws IOException {\n        final TopDocs[] topDocs = new TopDocs[collectors.size()];\n        int i = 0;\n        for (TopScoreDocCollector collector : collectors) {\n          topDocs[i++] = collector.topDocs();\n        }\n        return TopDocs.merge(0, numHits, topDocs);\n      }\n\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a CollectorManager which uses a shared hit counter to maintain number of hits\n   */\n  public static CollectorManager<TopScoreDocCollector, TopDocs> createSharedManager(int numHits, FieldDoc after,\n                                                                                      int totalHitsThreshold) {\n    return new CollectorManager<>() {\n\n      private final HitsThresholdChecker hitsThresholdChecker = HitsThresholdChecker.createShared(totalHitsThreshold);\n      private final BottomValueChecker bottomValueChecker = BottomValueChecker.createMaxBottomScoreChecker();\n\n      @Override\n      public TopScoreDocCollector newCollector() throws IOException {\n        return TopScoreDocCollector.create(numHits, after, hitsThresholdChecker, bottomValueChecker);\n      }\n\n      @Override\n      public TopDocs reduce(Collection<TopScoreDocCollector> collectors) throws IOException {\n        final TopDocs[] topDocs = new TopDocs[collectors.size()];\n        int i = 0;\n        for (TopScoreDocCollector collector : collectors) {\n          topDocs[i++] = collector.topDocs();\n        }\n        return TopDocs.merge(0, numHits, topDocs);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd320327ef03681a94238b48abfe570f0fdd7387","date":1571660290,"type":5,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#createSharedManager(int,FieldDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#createSharedManager(int,FieldDoc,int,int).mjava","sourceNew":"  /**\n   * Create a CollectorManager which uses a shared hit counter to maintain number of hits\n   * and a shared {@link MaxScoreAccumulator} to propagate the minimum score accross segments\n   */\n  public static CollectorManager<TopScoreDocCollector, TopDocs> createSharedManager(int numHits, FieldDoc after,\n                                                                                      int totalHitsThreshold) {\n    return new CollectorManager<>() {\n\n      private final HitsThresholdChecker hitsThresholdChecker = HitsThresholdChecker.createShared(totalHitsThreshold);\n      private final MaxScoreAccumulator minScoreAcc = new MaxScoreAccumulator();\n\n      @Override\n      public TopScoreDocCollector newCollector() throws IOException {\n        return TopScoreDocCollector.create(numHits, after, hitsThresholdChecker, minScoreAcc);\n      }\n\n      @Override\n      public TopDocs reduce(Collection<TopScoreDocCollector> collectors) throws IOException {\n        final TopDocs[] topDocs = new TopDocs[collectors.size()];\n        int i = 0;\n        for (TopScoreDocCollector collector : collectors) {\n          topDocs[i++] = collector.topDocs();\n        }\n        return TopDocs.merge(0, numHits, topDocs);\n      }\n\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a CollectorManager which uses a shared hit counter to maintain number of hits\n   * and a shared {@link MaxScoreAccumulator} to propagate the minimum score accross segments\n   */\n  public static CollectorManager<TopScoreDocCollector, TopDocs> createSharedManager(int numHits, FieldDoc after,\n                                                                                      int totalHitsThreshold, int maxDocs) {\n    return new CollectorManager<>() {\n\n      private final HitsThresholdChecker hitsThresholdChecker = HitsThresholdChecker.createShared(totalHitsThreshold);\n      private final MaxScoreAccumulator minScoreAcc = new MaxScoreAccumulator();\n\n      @Override\n      public TopScoreDocCollector newCollector() throws IOException {\n        return TopScoreDocCollector.create(numHits, after, hitsThresholdChecker, minScoreAcc);\n      }\n\n      @Override\n      public TopDocs reduce(Collection<TopScoreDocCollector> collectors) throws IOException {\n        final TopDocs[] topDocs = new TopDocs[collectors.size()];\n        int i = 0;\n        for (TopScoreDocCollector collector : collectors) {\n          topDocs[i++] = collector.topDocs();\n        }\n        return TopDocs.merge(0, numHits, topDocs);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"807314aa41c10866aec273a0e54fd0d24d8971de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd320327ef03681a94238b48abfe570f0fdd7387":["807314aa41c10866aec273a0e54fd0d24d8971de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"807314aa41c10866aec273a0e54fd0d24d8971de":["cd320327ef03681a94238b48abfe570f0fdd7387"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["807314aa41c10866aec273a0e54fd0d24d8971de","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd320327ef03681a94238b48abfe570f0fdd7387":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd320327ef03681a94238b48abfe570f0fdd7387","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}