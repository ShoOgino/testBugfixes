{"path":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    Collection<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }\n\n","sourceOld":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    Collection<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir) throws IOException {\n    return listCommits(dir, CodecProvider.getDefault());\n  }\n\n","sourceOld":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    Collection<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9","date":1289510544,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    return listCommits(dir, CodecProvider.getDefault());\n  }\n\n","sourceOld":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir) throws IOException {\n    return listCommits(dir, CodecProvider.getDefault());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    return listCommits(dir, CodecProvider.getDefault());\n  }\n\n","sourceOld":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir) throws IOException {\n    return listCommits(dir, CodecProvider.getDefault());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    return listCommits(dir, CodecProvider.getDefault());\n  }\n\n","sourceOld":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir) throws IOException {\n    return listCommits(dir, CodecProvider.getDefault());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }  \n\n","sourceOld":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    return listCommits(dir, CodecProvider.getDefault());\n  }\n\n","bugFix":null,"bugIntro":["d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fad1351342e15571fed2a68feaed0a8a3a18e5da","date":1327959908,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }  \n\n","sourceOld":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }  \n\n","sourceOld":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3","date":1328092914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new StandardDirectoryReader.ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new StandardDirectoryReader.ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new StandardDirectoryReader.ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9"],"188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9"],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["7b91922b55d15444d554721b352861d028eb8278"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["7b91922b55d15444d554721b352861d028eb8278","fad1351342e15571fed2a68feaed0a8a3a18e5da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["fad1351342e15571fed2a68feaed0a8a3a18e5da","5cab9a86bd67202d20b6adc463008c8e982b070a"],"188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9":["7b91922b55d15444d554721b352861d028eb8278","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85a883878c0af761245ab048babc63d099f835f3":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}