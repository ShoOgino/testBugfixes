{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n    filterFactory = new FilterBuilderFactory();\n    filterFactory.addBuilder(\"RangeFilter\", new RangeFilterBuilder());\n    filterFactory.addBuilder(\"NumericRangeFilter\", new NumericRangeFilterBuilder());\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"NumericRangeQuery\", new NumericRangeQueryBuilder());\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"FilteredQuery\", new FilteredQueryBuilder(filterFactory, queryFactory));\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(filterFactory));\n\n    filterFactory.addBuilder(\"CachedFilter\", new CachedFilterBuilder(queryFactory,\n        filterFactory, maxNumCachedFilters));\n\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n    filterFactory = new FilterBuilderFactory();\n    filterFactory.addBuilder(\"RangeFilter\", new RangeFilterBuilder());\n    filterFactory.addBuilder(\"NumericRangeFilter\", new NumericRangeFilterBuilder());\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"NumericRangeQuery\", new NumericRangeQueryBuilder());\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"FilteredQuery\", new FilteredQueryBuilder(filterFactory, queryFactory));\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(filterFactory));\n\n    filterFactory.addBuilder(\"CachedFilter\", new CachedFilterBuilder(queryFactory,\n        filterFactory, maxNumCachedFilters));\n\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9a925cfa7a240a81c26ef70871aa91f828eeffb","date":1335130095,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n    filterFactory = new FilterBuilderFactory();\n    filterFactory.addBuilder(\"RangeFilter\", new RangeFilterBuilder());\n    filterFactory.addBuilder(\"NumericRangeFilter\", new NumericRangeFilterBuilder());\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"NumericRangeQuery\", new NumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"FilteredQuery\", new FilteredQueryBuilder(filterFactory, queryFactory));\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(filterFactory));\n\n    filterFactory.addBuilder(\"CachedFilter\", new CachedFilterBuilder(queryFactory,\n        filterFactory, maxNumCachedFilters));\n\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n    filterFactory = new FilterBuilderFactory();\n    filterFactory.addBuilder(\"RangeFilter\", new RangeFilterBuilder());\n    filterFactory.addBuilder(\"NumericRangeFilter\", new NumericRangeFilterBuilder());\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"NumericRangeQuery\", new NumericRangeQueryBuilder());\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"FilteredQuery\", new FilteredQueryBuilder(filterFactory, queryFactory));\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(filterFactory));\n\n    filterFactory.addBuilder(\"CachedFilter\", new CachedFilterBuilder(queryFactory,\n        filterFactory, maxNumCachedFilters));\n\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n    filterFactory = new FilterBuilderFactory();\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"NumericRangeQuery\", new NumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"FilteredQuery\", new FilteredQueryBuilder(filterFactory, queryFactory));\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    filterFactory.addBuilder(\"CachedFilter\", new CachedFilterBuilder(queryFactory,\n        filterFactory, maxNumCachedFilters));\n\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n    filterFactory = new FilterBuilderFactory();\n    filterFactory.addBuilder(\"RangeFilter\", new RangeFilterBuilder());\n    filterFactory.addBuilder(\"NumericRangeFilter\", new NumericRangeFilterBuilder());\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"NumericRangeQuery\", new NumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"FilteredQuery\", new FilteredQueryBuilder(filterFactory, queryFactory));\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(filterFactory));\n\n    filterFactory.addBuilder(\"CachedFilter\", new CachedFilterBuilder(queryFactory,\n        filterFactory, maxNumCachedFilters));\n\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n    filterFactory = new FilterBuilderFactory();\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"NumericRangeQuery\", new NumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"FilteredQuery\", new FilteredQueryBuilder(filterFactory, queryFactory));\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    filterFactory.addBuilder(\"CachedFilter\", new CachedFilterBuilder(queryFactory,\n        filterFactory, maxNumCachedFilters));\n\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n    filterFactory = new FilterBuilderFactory();\n    filterFactory.addBuilder(\"RangeFilter\", new RangeFilterBuilder());\n    filterFactory.addBuilder(\"NumericRangeFilter\", new NumericRangeFilterBuilder());\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"NumericRangeQuery\", new NumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"FilteredQuery\", new FilteredQueryBuilder(filterFactory, queryFactory));\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(filterFactory));\n\n    filterFactory.addBuilder(\"CachedFilter\", new CachedFilterBuilder(queryFactory,\n        filterFactory, maxNumCachedFilters));\n\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"NumericRangeQuery\", new NumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"CachedQuery\", new CachedQueryBuilder(queryFactory, maxNumCachedQueries));\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n    filterFactory = new FilterBuilderFactory();\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"NumericRangeQuery\", new NumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"FilteredQuery\", new FilteredQueryBuilder(filterFactory, queryFactory));\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    filterFactory.addBuilder(\"CachedFilter\", new CachedFilterBuilder(queryFactory,\n        filterFactory, maxNumCachedFilters));\n\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cfc8e07724f6bd95be343b1c03ae917c9de69cc","date":1446026743,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"NumericRangeQuery\", new NumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"NumericRangeQuery\", new NumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"CachedQuery\", new CachedQueryBuilder(queryFactory, maxNumCachedQueries));\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"LegacyNumericRangeQuery\", new LegacyNumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"NumericRangeQuery\", new NumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","bugFix":null,"bugIntro":["50b8410419cbbe9d8e1a96c918a951976bffe680"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3057b45cc5245d8fd8999a4bbe04da2c59511b75","date":1457536053,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"LegacyNumericRangeQuery\", new LegacyNumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"PointRangeQuery\", new PointRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"LegacyNumericRangeQuery\", new LegacyNumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"699cbd3d2e44ab773038f71b6606c6952e952ed9","date":1462266302,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    spanFactory = new SpanQueryBuilderFactory();\n\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"LegacyNumericRangeQuery\", new LegacyNumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"PointRangeQuery\", new PointRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanNearBuilder snb = new SpanNearBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    spanFactory.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    spanFactory.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    spanFactory.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"LegacyNumericRangeQuery\", new LegacyNumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"PointRangeQuery\", new PointRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6548a35b9da836a0b749064ee61085bd7cd80ffb","date":1462272361,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    spanFactory = new SpanQueryBuilderFactory();\n\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"LegacyNumericRangeQuery\", new LegacyNumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"PointRangeQuery\", new PointRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanNearBuilder snb = new SpanNearBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    spanFactory.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    spanFactory.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    spanFactory.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"LegacyNumericRangeQuery\", new LegacyNumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"PointRangeQuery\", new PointRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    spanFactory = new SpanQueryBuilderFactory();\n\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"LegacyNumericRangeQuery\", new LegacyNumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"PointRangeQuery\", new PointRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanNearBuilder snb = new SpanNearBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    spanFactory.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    spanFactory.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    spanFactory.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"LegacyNumericRangeQuery\", new LegacyNumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"PointRangeQuery\", new PointRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9bbcd4e77bfac3e11246aef0bc527c46201faa18","date":1468853101,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.defaultField = defaultField;\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    spanFactory = new SpanQueryBuilderFactory();\n\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"LegacyNumericRangeQuery\", new LegacyNumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"PointRangeQuery\", new PointRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanNearBuilder snb = new SpanNearBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    spanFactory.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    spanFactory.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    spanFactory.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    spanFactory = new SpanQueryBuilderFactory();\n\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"LegacyNumericRangeQuery\", new LegacyNumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"PointRangeQuery\", new PointRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanNearBuilder snb = new SpanNearBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    spanFactory.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    spanFactory.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    spanFactory.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"50b8410419cbbe9d8e1a96c918a951976bffe680","date":1471869553,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.defaultField = defaultField;\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    spanFactory = new SpanQueryBuilderFactory();\n\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"PointRangeQuery\", new PointRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanNearBuilder snb = new SpanNearBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    spanFactory.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    spanFactory.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    spanFactory.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.defaultField = defaultField;\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    spanFactory = new SpanQueryBuilderFactory();\n\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"LegacyNumericRangeQuery\", new LegacyNumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"PointRangeQuery\", new PointRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanNearBuilder snb = new SpanNearBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    spanFactory.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    spanFactory.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    spanFactory.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","bugFix":["770342641f7b505eaa8dccdc666158bff2419109"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c82557b0a8c9d4012f208e5de912ae7500ea351","date":1471888093,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.defaultField = defaultField;\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    spanFactory = new SpanQueryBuilderFactory();\n\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"PointRangeQuery\", new PointRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanNearBuilder snb = new SpanNearBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    spanFactory.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    spanFactory.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    spanFactory.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.defaultField = defaultField;\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    spanFactory = new SpanQueryBuilderFactory();\n\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"LegacyNumericRangeQuery\", new LegacyNumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"PointRangeQuery\", new PointRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanNearBuilder snb = new SpanNearBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    spanFactory.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    spanFactory.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    spanFactory.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.defaultField = defaultField;\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    spanFactory = new SpanQueryBuilderFactory();\n\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"PointRangeQuery\", new PointRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanNearBuilder snb = new SpanNearBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    spanFactory.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    spanFactory.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    spanFactory.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.defaultField = defaultField;\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    spanFactory = new SpanQueryBuilderFactory();\n\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"LegacyNumericRangeQuery\", new LegacyNumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"PointRangeQuery\", new PointRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanNearBuilder snb = new SpanNearBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    spanFactory.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    spanFactory.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    spanFactory.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.defaultField = defaultField;\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    spanFactory = new SpanQueryBuilderFactory();\n\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"PointRangeQuery\", new PointRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanNearBuilder snb = new SpanNearBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    spanFactory.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    spanFactory.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    spanFactory.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    spanFactory = new SpanQueryBuilderFactory();\n\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"LegacyNumericRangeQuery\", new LegacyNumericRangeQueryBuilder());\n    queryFactory.addBuilder(\"PointRangeQuery\", new PointRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanNearBuilder snb = new SpanNearBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    spanFactory.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    spanFactory.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    spanFactory.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d6966a2e12c828c3cd02826f893c41df67d6434","date":1565795987,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.defaultField = defaultField;\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    spanFactory = new SpanQueryBuilderFactory();\n\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"PointRangeQuery\", new PointRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanNearBuilder snb = new SpanNearBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    spanFactory.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    spanFactory.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    spanFactory.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanPositionRangeBuilder sprt = new SpanPositionRangeBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanPositionRange\", sprt);\n    queryFactory.addBuilder(\"SpanPositionRange\", sprt);\n\n    SpanNotBuilder snot = new SpanNotBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.defaultField = defaultField;\n    this.analyzer = analyzer;\n    this.parser = parser;\n\n    queryFactory = new QueryBuilderFactory();\n    spanFactory = new SpanQueryBuilderFactory();\n\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"PointRangeQuery\", new PointRangeQueryBuilder());\n    queryFactory.addBuilder(\"RangeQuery\", new RangeQueryBuilder());\n    queryFactory.addBuilder(\"DisjunctionMaxQuery\", new DisjunctionMaxQueryBuilder(queryFactory));\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(queryFactory));\n\n    SpanNearBuilder snb = new SpanNearBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    spanFactory.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    spanFactory.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    spanFactory.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(spanFactory);\n    spanFactory.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c82557b0a8c9d4012f208e5de912ae7500ea351":["9bbcd4e77bfac3e11246aef0bc527c46201faa18","50b8410419cbbe9d8e1a96c918a951976bffe680"],"50b8410419cbbe9d8e1a96c918a951976bffe680":["9bbcd4e77bfac3e11246aef0bc527c46201faa18"],"2713584a660051cd646423be682771e3bbd99985":["e9a925cfa7a240a81c26ef70871aa91f828eeffb"],"3057b45cc5245d8fd8999a4bbe04da2c59511b75":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["4cfc8e07724f6bd95be343b1c03ae917c9de69cc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"e9a925cfa7a240a81c26ef70871aa91f828eeffb":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["3057b45cc5245d8fd8999a4bbe04da2c59511b75","6548a35b9da836a0b749064ee61085bd7cd80ffb"],"9bbcd4e77bfac3e11246aef0bc527c46201faa18":["6548a35b9da836a0b749064ee61085bd7cd80ffb"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e9a925cfa7a240a81c26ef70871aa91f828eeffb","2713584a660051cd646423be682771e3bbd99985"],"1db68e96dd908fcd79ef809095822736aa601d08":["2713584a660051cd646423be682771e3bbd99985"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cfc8e07724f6bd95be343b1c03ae917c9de69cc":["1db68e96dd908fcd79ef809095822736aa601d08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6548a35b9da836a0b749064ee61085bd7cd80ffb":["3057b45cc5245d8fd8999a4bbe04da2c59511b75","699cbd3d2e44ab773038f71b6606c6952e952ed9"],"699cbd3d2e44ab773038f71b6606c6952e952ed9":["3057b45cc5245d8fd8999a4bbe04da2c59511b75"],"2d6966a2e12c828c3cd02826f893c41df67d6434":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["9bbcd4e77bfac3e11246aef0bc527c46201faa18","0c82557b0a8c9d4012f208e5de912ae7500ea351"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d6966a2e12c828c3cd02826f893c41df67d6434"]},"commit2Childs":{"0c82557b0a8c9d4012f208e5de912ae7500ea351":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"50b8410419cbbe9d8e1a96c918a951976bffe680":["0c82557b0a8c9d4012f208e5de912ae7500ea351"],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1db68e96dd908fcd79ef809095822736aa601d08"],"3057b45cc5245d8fd8999a4bbe04da2c59511b75":["55b50463286869f584cf849d1587a0fcd54d1dfa","6548a35b9da836a0b749064ee61085bd7cd80ffb","699cbd3d2e44ab773038f71b6606c6952e952ed9"],"770342641f7b505eaa8dccdc666158bff2419109":["3057b45cc5245d8fd8999a4bbe04da2c59511b75"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9a925cfa7a240a81c26ef70871aa91f828eeffb":["2713584a660051cd646423be682771e3bbd99985","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9bbcd4e77bfac3e11246aef0bc527c46201faa18":["0c82557b0a8c9d4012f208e5de912ae7500ea351","50b8410419cbbe9d8e1a96c918a951976bffe680","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e9a925cfa7a240a81c26ef70871aa91f828eeffb"],"1db68e96dd908fcd79ef809095822736aa601d08":["4cfc8e07724f6bd95be343b1c03ae917c9de69cc"],"4cfc8e07724f6bd95be343b1c03ae917c9de69cc":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6548a35b9da836a0b749064ee61085bd7cd80ffb":["55b50463286869f584cf849d1587a0fcd54d1dfa","9bbcd4e77bfac3e11246aef0bc527c46201faa18"],"699cbd3d2e44ab773038f71b6606c6952e952ed9":["6548a35b9da836a0b749064ee61085bd7cd80ffb"],"2d6966a2e12c828c3cd02826f893c41df67d6434":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2d6966a2e12c828c3cd02826f893c41df67d6434"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}