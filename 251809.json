{"path":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testReversedTokens().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testReversedTokens().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testReversedTokens().mjava","sourceNew":"  @Test\n  public void testReversedTokens() throws IOException {\n    String text = \"simple text\";\n    args.put(\"withOriginal\", \"true\");\n    factory.init(args);\n    TokenStream input = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(text)));\n    assertTokenStreamContents(input, \n        new String[] { \"\\u0001elpmis\", \"simple\", \"\\u0001txet\", \"text\" },\n        new int[] { 1, 0, 1, 0 });\n\n    // now without original tokens\n    args.put(\"withOriginal\", \"false\");\n    factory.init(args);\n    input = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(text)));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001elpmis\", \"\\u0001txet\" },\n        new int[] { 1, 1 });\n  }\n\n","sourceOld":"  @Test\n  public void testReversedTokens() throws IOException {\n    String text = \"simple text\";\n    args.put(\"withOriginal\", \"true\");\n    factory.init(args);\n    TokenStream input = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(text)));\n    assertTokenStreamContents(input, \n        new String[] { \"\\u0001elpmis\", \"simple\", \"\\u0001txet\", \"text\" },\n        new int[] { 1, 0, 1, 0 });\n\n    // now without original tokens\n    args.put(\"withOriginal\", \"false\");\n    factory.init(args);\n    input = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(text)));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001elpmis\", \"\\u0001txet\" },\n        new int[] { 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testReversedTokens().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testReversedTokens().mjava","sourceNew":"  @Test\n  public void testReversedTokens() throws IOException {\n    String text = \"simple text\";\n    args.put(\"withOriginal\", \"true\");\n    factory.init(args);\n    TokenStream input = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(text)));\n    assertTokenStreamContents(input, \n        new String[] { \"\\u0001elpmis\", \"simple\", \"\\u0001txet\", \"text\" },\n        new int[] { 1, 0, 1, 0 });\n\n    // now without original tokens\n    args.put(\"withOriginal\", \"false\");\n    factory.init(args);\n    input = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(text)));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001elpmis\", \"\\u0001txet\" },\n        new int[] { 1, 1 });\n  }\n\n","sourceOld":"  @Test\n  public void testReversedTokens() throws IOException {\n    String text = \"simple text\";\n    args.put(\"withOriginal\", \"true\");\n    factory.init(args);\n    TokenStream input = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(text)));\n    assertTokenStreamContents(input, \n        new String[] { \"\\u0001elpmis\", \"simple\", \"\\u0001txet\", \"text\" },\n        new int[] { 1, 0, 1, 0 });\n\n    // now without original tokens\n    args.put(\"withOriginal\", \"false\");\n    factory.init(args);\n    input = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(text)));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001elpmis\", \"\\u0001txet\" },\n        new int[] { 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testReversedTokens().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testReversedTokens().mjava","sourceNew":"  @Test\n  public void testReversedTokens() throws IOException {\n    String text = \"simple text\";\n    args.put(\"withOriginal\", \"true\");\n    factory.init(args);\n    TokenStream input = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(text)));\n    assertTokenStreamContents(input, \n        new String[] { \"\\u0001elpmis\", \"simple\", \"\\u0001txet\", \"text\" },\n        new int[] { 1, 0, 1, 0 });\n\n    // now without original tokens\n    args.put(\"withOriginal\", \"false\");\n    factory.init(args);\n    input = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(text)));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001elpmis\", \"\\u0001txet\" },\n        new int[] { 1, 1 });\n  }\n\n","sourceOld":"  @Test\n  public void testReversedTokens() throws IOException {\n    String text = \"simple text\";\n    args.put(\"withOriginal\", \"true\");\n    factory.init(args);\n    TokenStream input = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(text)));\n    assertTokenStreamContents(input, \n        new String[] { \"\\u0001elpmis\", \"simple\", \"\\u0001txet\", \"text\" },\n        new int[] { 1, 0, 1, 0 });\n\n    // now without original tokens\n    args.put(\"withOriginal\", \"false\");\n    factory.init(args);\n    input = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(text)));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001elpmis\", \"\\u0001txet\" },\n        new int[] { 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2639ce99440b7a55fa879228f7e66c337443e77a","date":1317007442,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testReversedTokens().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testReversedTokens().mjava","sourceNew":"  @Test\n  public void testReversedTokens() throws IOException {\n    String text = \"simple text\";\n    args.put(\"withOriginal\", \"true\");\n    factory.init(args);\n    TokenStream input = factory.create(new MockTokenizer(new StringReader(text), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(input, \n        new String[] { \"\\u0001elpmis\", \"simple\", \"\\u0001txet\", \"text\" },\n        new int[] { 1, 0, 1, 0 });\n\n    // now without original tokens\n    args.put(\"withOriginal\", \"false\");\n    factory.init(args);\n    input = factory.create(new MockTokenizer(new StringReader(text), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001elpmis\", \"\\u0001txet\" },\n        new int[] { 1, 1 });\n  }\n\n","sourceOld":"  @Test\n  public void testReversedTokens() throws IOException {\n    String text = \"simple text\";\n    args.put(\"withOriginal\", \"true\");\n    factory.init(args);\n    TokenStream input = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(text)));\n    assertTokenStreamContents(input, \n        new String[] { \"\\u0001elpmis\", \"simple\", \"\\u0001txet\", \"text\" },\n        new int[] { 1, 0, 1, 0 });\n\n    // now without original tokens\n    args.put(\"withOriginal\", \"false\");\n    factory.init(args);\n    input = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(text)));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001elpmis\", \"\\u0001txet\" },\n        new int[] { 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testReversedTokens().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testReversedTokens().mjava","sourceNew":"  @Test\n  public void testReversedTokens() throws IOException {\n    String text = \"simple text\";\n    args.put(\"withOriginal\", \"true\");\n    ReversedWildcardFilterFactory factory = new ReversedWildcardFilterFactory(args);\n    TokenStream input = factory.create(new MockTokenizer(new StringReader(text), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(input, \n        new String[] { \"\\u0001elpmis\", \"simple\", \"\\u0001txet\", \"text\" },\n        new int[] { 1, 0, 1, 0 });\n\n    // now without original tokens\n    args.put(\"withOriginal\", \"false\");\n    factory = new ReversedWildcardFilterFactory(args);\n    input = factory.create(new MockTokenizer(new StringReader(text), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001elpmis\", \"\\u0001txet\" },\n        new int[] { 1, 1 });\n  }\n\n","sourceOld":"  @Test\n  public void testReversedTokens() throws IOException {\n    String text = \"simple text\";\n    args.put(\"withOriginal\", \"true\");\n    factory.init(args);\n    TokenStream input = factory.create(new MockTokenizer(new StringReader(text), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(input, \n        new String[] { \"\\u0001elpmis\", \"simple\", \"\\u0001txet\", \"text\" },\n        new int[] { 1, 0, 1, 0 });\n\n    // now without original tokens\n    args.put(\"withOriginal\", \"false\");\n    factory.init(args);\n    input = factory.create(new MockTokenizer(new StringReader(text), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001elpmis\", \"\\u0001txet\" },\n        new int[] { 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testReversedTokens().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testReversedTokens().mjava","sourceNew":"  @Test\n  public void testReversedTokens() throws IOException {\n    String text = \"simple text\";\n    args.put(\"withOriginal\", \"true\");\n    ReversedWildcardFilterFactory factory = new ReversedWildcardFilterFactory(args);\n    TokenStream input = factory.create(whitespaceMockTokenizer(text));\n    assertTokenStreamContents(input, \n        new String[] { \"\\u0001elpmis\", \"simple\", \"\\u0001txet\", \"text\" },\n        new int[] { 1, 0, 1, 0 });\n\n    // now without original tokens\n    args.put(\"withOriginal\", \"false\");\n    factory = new ReversedWildcardFilterFactory(args);\n    input = factory.create(whitespaceMockTokenizer(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001elpmis\", \"\\u0001txet\" },\n        new int[] { 1, 1 });\n  }\n\n","sourceOld":"  @Test\n  public void testReversedTokens() throws IOException {\n    String text = \"simple text\";\n    args.put(\"withOriginal\", \"true\");\n    ReversedWildcardFilterFactory factory = new ReversedWildcardFilterFactory(args);\n    TokenStream input = factory.create(new MockTokenizer(new StringReader(text), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(input, \n        new String[] { \"\\u0001elpmis\", \"simple\", \"\\u0001txet\", \"text\" },\n        new int[] { 1, 0, 1, 0 });\n\n    // now without original tokens\n    args.put(\"withOriginal\", \"false\");\n    factory = new ReversedWildcardFilterFactory(args);\n    input = factory.create(new MockTokenizer(new StringReader(text), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001elpmis\", \"\\u0001txet\" },\n        new int[] { 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2639ce99440b7a55fa879228f7e66c337443e77a":["c26f00b574427b55127e869b935845554afde1fa"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["2639ce99440b7a55fa879228f7e66c337443e77a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"]},"commit2Childs":{"2639ce99440b7a55fa879228f7e66c337443e77a":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["2639ce99440b7a55fa879228f7e66c337443e77a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}