{"path":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#run(boolean).mjava","commits":[{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#run(boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void run(boolean solrFormat) throws InterruptedException, IOException {\n    log.info(\"STARTING ZK TEST SERVER\");\n    try {\n      if (zooThread != null) {\n        throw new IllegalStateException(\"ZK TEST SERVER IS ALREADY RUNNING\");\n      }\n      // we don't call super.distribSetUp\n      zooThread = new Thread(\"ZkTestServer Run Thread\") {\n\n        @Override\n        public void run() {\n          ServerConfig config = new ServerConfig() {\n\n            {\n              setClientPort(ZkTestServer.this.clientPort);\n              this.dataDir = zkDir;\n              this.dataLogDir = zkDir;\n              this.tickTime = theTickTime;\n              this.maxSessionTimeout = ZkTestServer.this.maxSessionTimeout;\n              this.minSessionTimeout = ZkTestServer.this.minSessionTimeout;\n            }\n\n            public void setClientPort(int clientPort) {\n              if (clientPortAddress != null) {\n                try {\n                  this.clientPortAddress = new InetSocketAddress(\n                      InetAddress.getByName(clientPortAddress.getHostName()), clientPort);\n                } catch (UnknownHostException e) {\n                  throw new RuntimeException(e);\n                }\n              } else {\n                this.clientPortAddress = new InetSocketAddress(clientPort);\n              }\n              log.info(\"client port:\" + this.clientPortAddress);\n            }\n          };\n          try {\n            zkServer.runFromConfig(config);\n          } catch (Throwable t) {\n            log.error(\"zkServer error\", t);\n          }\n        }\n      };\n\n      ObjectReleaseTracker.track(zooThread);\n      zooThread.start();\n\n      int cnt = 0;\n      int port = -1;\n      try {\n        port = getPort();\n      } catch (IllegalStateException e) {\n\n      }\n      while (port < 1) {\n        Thread.sleep(100);\n        try {\n          port = getPort();\n        } catch (IllegalStateException e) {\n\n        }\n        if (cnt == 500) {\n          throw new RuntimeException(\"Could not get the port for ZooKeeper server\");\n        }\n        cnt++;\n      }\n      log.info(\"start zk server on port:\" + port);\n\n      waitForServerUp(getZkHost(), 30000);\n\n      init(solrFormat);\n    } catch (Exception e) {\n      log.error(\"Error trying to run ZK Test Server\", e);\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#run(boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#run(boolean).mjava","sourceNew":"  public void run(boolean solrFormat) throws InterruptedException, IOException {\n    log.info(\"STARTING ZK TEST SERVER\");\n    try {\n      if (zooThread != null) {\n        throw new IllegalStateException(\"ZK TEST SERVER IS ALREADY RUNNING\");\n      }\n      // we don't call super.distribSetUp\n      zooThread = new Thread(\"ZkTestServer Run Thread\") {\n\n        @Override\n        public void run() {\n          ServerConfig config = new ServerConfig() {\n\n            {\n              setClientPort(ZkTestServer.this.clientPort);\n              this.dataDir = zkDir.toFile();\n              this.dataLogDir = zkDir.toFile();\n              this.tickTime = theTickTime;\n              this.maxSessionTimeout = ZkTestServer.this.maxSessionTimeout;\n              this.minSessionTimeout = ZkTestServer.this.minSessionTimeout;\n            }\n\n            public void setClientPort(int clientPort) {\n              if (clientPortAddress != null) {\n                try {\n                  this.clientPortAddress = new InetSocketAddress(\n                      InetAddress.getByName(clientPortAddress.getHostName()), clientPort);\n                } catch (UnknownHostException e) {\n                  throw new RuntimeException(e);\n                }\n              } else {\n                this.clientPortAddress = new InetSocketAddress(clientPort);\n              }\n              log.info(\"client port:\" + this.clientPortAddress);\n            }\n          };\n          try {\n            zkServer.runFromConfig(config);\n          } catch (Throwable t) {\n            log.error(\"zkServer error\", t);\n          }\n        }\n      };\n\n      ObjectReleaseTracker.track(zooThread);\n      zooThread.start();\n\n      int cnt = 0;\n      int port = -1;\n      try {\n        port = getPort();\n      } catch (IllegalStateException e) {\n\n      }\n      while (port < 1) {\n        Thread.sleep(100);\n        try {\n          port = getPort();\n        } catch (IllegalStateException e) {\n\n        }\n        if (cnt == 500) {\n          throw new RuntimeException(\"Could not get the port for ZooKeeper server\");\n        }\n        cnt++;\n      }\n      log.info(\"start zk server on port:\" + port);\n\n      waitForServerUp(getZkHost(), 30000);\n\n      init(solrFormat);\n    } catch (Exception e) {\n      log.error(\"Error trying to run ZK Test Server\", e);\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public void run(boolean solrFormat) throws InterruptedException, IOException {\n    log.info(\"STARTING ZK TEST SERVER\");\n    try {\n      if (zooThread != null) {\n        throw new IllegalStateException(\"ZK TEST SERVER IS ALREADY RUNNING\");\n      }\n      // we don't call super.distribSetUp\n      zooThread = new Thread(\"ZkTestServer Run Thread\") {\n\n        @Override\n        public void run() {\n          ServerConfig config = new ServerConfig() {\n\n            {\n              setClientPort(ZkTestServer.this.clientPort);\n              this.dataDir = zkDir;\n              this.dataLogDir = zkDir;\n              this.tickTime = theTickTime;\n              this.maxSessionTimeout = ZkTestServer.this.maxSessionTimeout;\n              this.minSessionTimeout = ZkTestServer.this.minSessionTimeout;\n            }\n\n            public void setClientPort(int clientPort) {\n              if (clientPortAddress != null) {\n                try {\n                  this.clientPortAddress = new InetSocketAddress(\n                      InetAddress.getByName(clientPortAddress.getHostName()), clientPort);\n                } catch (UnknownHostException e) {\n                  throw new RuntimeException(e);\n                }\n              } else {\n                this.clientPortAddress = new InetSocketAddress(clientPort);\n              }\n              log.info(\"client port:\" + this.clientPortAddress);\n            }\n          };\n          try {\n            zkServer.runFromConfig(config);\n          } catch (Throwable t) {\n            log.error(\"zkServer error\", t);\n          }\n        }\n      };\n\n      ObjectReleaseTracker.track(zooThread);\n      zooThread.start();\n\n      int cnt = 0;\n      int port = -1;\n      try {\n        port = getPort();\n      } catch (IllegalStateException e) {\n\n      }\n      while (port < 1) {\n        Thread.sleep(100);\n        try {\n          port = getPort();\n        } catch (IllegalStateException e) {\n\n        }\n        if (cnt == 500) {\n          throw new RuntimeException(\"Could not get the port for ZooKeeper server\");\n        }\n        cnt++;\n      }\n      log.info(\"start zk server on port:\" + port);\n\n      waitForServerUp(getZkHost(), 30000);\n\n      init(solrFormat);\n    } catch (Exception e) {\n      log.error(\"Error trying to run ZK Test Server\", e);\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#run(boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#run(boolean).mjava","sourceNew":"  public void run(boolean solrFormat) throws InterruptedException, IOException {\n    log.info(\"STARTING ZK TEST SERVER\");\n    try {\n      if (zooThread != null) {\n        throw new IllegalStateException(\"ZK TEST SERVER IS ALREADY RUNNING\");\n      }\n      // we don't call super.distribSetUp\n      zooThread = new Thread(\"ZkTestServer Run Thread\") {\n\n        @Override\n        public void run() {\n          ServerConfig config = new ServerConfig() {\n\n            {\n              setClientPort(ZkTestServer.this.clientPort);\n              this.dataDir = zkDir.toFile();\n              this.dataLogDir = zkDir.toFile();\n              this.tickTime = theTickTime;\n              this.maxSessionTimeout = ZkTestServer.this.maxSessionTimeout;\n              this.minSessionTimeout = ZkTestServer.this.minSessionTimeout;\n            }\n\n            public void setClientPort(int clientPort) {\n              if (clientPortAddress != null) {\n                try {\n                  this.clientPortAddress = new InetSocketAddress(\n                      InetAddress.getByName(clientPortAddress.getHostName()), clientPort);\n                } catch (UnknownHostException e) {\n                  throw new RuntimeException(e);\n                }\n              } else {\n                this.clientPortAddress = new InetSocketAddress(clientPort);\n              }\n              log.info(\"client port: {}\", this.clientPortAddress);\n            }\n          };\n          try {\n            zkServer.runFromConfig(config);\n          } catch (Throwable t) {\n            log.error(\"zkServer error\", t);\n          }\n        }\n      };\n\n      ObjectReleaseTracker.track(zooThread);\n      zooThread.start();\n\n      int cnt = 0;\n      int port = -1;\n      try {\n        port = getPort();\n      } catch (IllegalStateException e) {\n\n      }\n      while (port < 1) {\n        Thread.sleep(100);\n        try {\n          port = getPort();\n        } catch (IllegalStateException e) {\n\n        }\n        if (cnt == 500) {\n          throw new RuntimeException(\"Could not get the port for ZooKeeper server\");\n        }\n        cnt++;\n      }\n      log.info(\"start zk server on port: {}\", port);\n\n      waitForServerUp(getZkHost(), 30000);\n\n      init(solrFormat);\n    } catch (Exception e) {\n      log.error(\"Error trying to run ZK Test Server\", e);\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public void run(boolean solrFormat) throws InterruptedException, IOException {\n    log.info(\"STARTING ZK TEST SERVER\");\n    try {\n      if (zooThread != null) {\n        throw new IllegalStateException(\"ZK TEST SERVER IS ALREADY RUNNING\");\n      }\n      // we don't call super.distribSetUp\n      zooThread = new Thread(\"ZkTestServer Run Thread\") {\n\n        @Override\n        public void run() {\n          ServerConfig config = new ServerConfig() {\n\n            {\n              setClientPort(ZkTestServer.this.clientPort);\n              this.dataDir = zkDir.toFile();\n              this.dataLogDir = zkDir.toFile();\n              this.tickTime = theTickTime;\n              this.maxSessionTimeout = ZkTestServer.this.maxSessionTimeout;\n              this.minSessionTimeout = ZkTestServer.this.minSessionTimeout;\n            }\n\n            public void setClientPort(int clientPort) {\n              if (clientPortAddress != null) {\n                try {\n                  this.clientPortAddress = new InetSocketAddress(\n                      InetAddress.getByName(clientPortAddress.getHostName()), clientPort);\n                } catch (UnknownHostException e) {\n                  throw new RuntimeException(e);\n                }\n              } else {\n                this.clientPortAddress = new InetSocketAddress(clientPort);\n              }\n              log.info(\"client port:\" + this.clientPortAddress);\n            }\n          };\n          try {\n            zkServer.runFromConfig(config);\n          } catch (Throwable t) {\n            log.error(\"zkServer error\", t);\n          }\n        }\n      };\n\n      ObjectReleaseTracker.track(zooThread);\n      zooThread.start();\n\n      int cnt = 0;\n      int port = -1;\n      try {\n        port = getPort();\n      } catch (IllegalStateException e) {\n\n      }\n      while (port < 1) {\n        Thread.sleep(100);\n        try {\n          port = getPort();\n        } catch (IllegalStateException e) {\n\n        }\n        if (cnt == 500) {\n          throw new RuntimeException(\"Could not get the port for ZooKeeper server\");\n        }\n        cnt++;\n      }\n      log.info(\"start zk server on port:\" + port);\n\n      waitForServerUp(getZkHost(), 30000);\n\n      init(solrFormat);\n    } catch (Exception e) {\n      log.error(\"Error trying to run ZK Test Server\", e);\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}