{"path":"lucene/core/src/test/org/apache/lucene/search/TestNRTManager#testListenerCalled().mjava","commits":[{"id":"a333953f2d3ad264dca2d3f4c5b46ad3077b0838","date":1354369573,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNRTManager#testListenerCalled().mjava","pathOld":"/dev/null","sourceNew":"  public void testListenerCalled() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));\n    final AtomicBoolean afterRefreshCalled = new AtomicBoolean(false);\n    NRTManager sm = new NRTManager(new NRTManager.TrackingIndexWriter(iw),new SearcherFactory());\n    sm.addListener(new ReferenceManager.RefreshListener() {\n      @Override\n      public void afterRefresh() {\n        afterRefreshCalled.set(true);\n      }\n    });\n    iw.addDocument(new Document());\n    iw.commit();\n    assertFalse(afterRefreshCalled.get());\n    sm.maybeRefreshBlocking();\n    assertTrue(afterRefreshCalled.get());\n    sm.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNRTManager#testListenerCalled().mjava","pathOld":"/dev/null","sourceNew":"  public void testListenerCalled() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));\n    final AtomicBoolean afterRefreshCalled = new AtomicBoolean(false);\n    NRTManager sm = new NRTManager(new NRTManager.TrackingIndexWriter(iw),new SearcherFactory());\n    sm.addListener(new ReferenceManager.RefreshListener() {\n      @Override\n      public void afterRefresh() {\n        afterRefreshCalled.set(true);\n      }\n    });\n    iw.addDocument(new Document());\n    iw.commit();\n    assertFalse(afterRefreshCalled.get());\n    sm.maybeRefreshBlocking();\n    assertTrue(afterRefreshCalled.get());\n    sm.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa09157b213a620622ccae0ef62a1da45a683222","date":1359149228,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNRTManager#testListenerCalled().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNRTManager#testListenerCalled().mjava","sourceNew":"  public void testListenerCalled() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));\n    final AtomicBoolean afterRefreshCalled = new AtomicBoolean(false);\n    NRTManager sm = new NRTManager(new NRTManager.TrackingIndexWriter(iw),new SearcherFactory());\n    sm.addListener(new ReferenceManager.RefreshListener() {\n      @Override\n      public void beforeRefresh() {\n      }\n      @Override\n      public void afterRefresh(boolean didRefresh) {\n        if (didRefresh) {\n          afterRefreshCalled.set(true);\n        }\n      }\n    });\n    iw.addDocument(new Document());\n    iw.commit();\n    assertFalse(afterRefreshCalled.get());\n    sm.maybeRefreshBlocking();\n    assertTrue(afterRefreshCalled.get());\n    sm.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testListenerCalled() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));\n    final AtomicBoolean afterRefreshCalled = new AtomicBoolean(false);\n    NRTManager sm = new NRTManager(new NRTManager.TrackingIndexWriter(iw),new SearcherFactory());\n    sm.addListener(new ReferenceManager.RefreshListener() {\n      @Override\n      public void afterRefresh() {\n        afterRefreshCalled.set(true);\n      }\n    });\n    iw.addDocument(new Document());\n    iw.commit();\n    assertFalse(afterRefreshCalled.get());\n    sm.maybeRefreshBlocking();\n    assertTrue(afterRefreshCalled.get());\n    sm.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNRTManager#testListenerCalled().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNRTManager#testListenerCalled().mjava","sourceNew":"  public void testListenerCalled() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));\n    final AtomicBoolean afterRefreshCalled = new AtomicBoolean(false);\n    NRTManager sm = new NRTManager(new NRTManager.TrackingIndexWriter(iw),new SearcherFactory());\n    sm.addListener(new ReferenceManager.RefreshListener() {\n      @Override\n      public void beforeRefresh() {\n      }\n      @Override\n      public void afterRefresh(boolean didRefresh) {\n        if (didRefresh) {\n          afterRefreshCalled.set(true);\n        }\n      }\n    });\n    iw.addDocument(new Document());\n    iw.commit();\n    assertFalse(afterRefreshCalled.get());\n    sm.maybeRefreshBlocking();\n    assertTrue(afterRefreshCalled.get());\n    sm.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testListenerCalled() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));\n    final AtomicBoolean afterRefreshCalled = new AtomicBoolean(false);\n    NRTManager sm = new NRTManager(new NRTManager.TrackingIndexWriter(iw),new SearcherFactory());\n    sm.addListener(new ReferenceManager.RefreshListener() {\n      @Override\n      public void afterRefresh() {\n        afterRefreshCalled.set(true);\n      }\n    });\n    iw.addDocument(new Document());\n    iw.commit();\n    assertFalse(afterRefreshCalled.get());\n    sm.maybeRefreshBlocking();\n    assertTrue(afterRefreshCalled.get());\n    sm.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2045b132a2396bb23dff28d2d9f349a6907d36e","date":1367513076,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testListenerCalled().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNRTManager#testListenerCalled().mjava","sourceNew":"  public void testListenerCalled() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));\n    final AtomicBoolean afterRefreshCalled = new AtomicBoolean(false);\n    SearcherManager sm = new SearcherManager(iw, true, new SearcherFactory());\n    sm.addListener(new ReferenceManager.RefreshListener() {\n      @Override\n      public void beforeRefresh() {\n      }\n      @Override\n      public void afterRefresh(boolean didRefresh) {\n        if (didRefresh) {\n          afterRefreshCalled.set(true);\n        }\n      }\n    });\n    iw.addDocument(new Document());\n    iw.commit();\n    assertFalse(afterRefreshCalled.get());\n    sm.maybeRefreshBlocking();\n    assertTrue(afterRefreshCalled.get());\n    sm.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testListenerCalled() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));\n    final AtomicBoolean afterRefreshCalled = new AtomicBoolean(false);\n    NRTManager sm = new NRTManager(new NRTManager.TrackingIndexWriter(iw),new SearcherFactory());\n    sm.addListener(new ReferenceManager.RefreshListener() {\n      @Override\n      public void beforeRefresh() {\n      }\n      @Override\n      public void afterRefresh(boolean didRefresh) {\n        if (didRefresh) {\n          afterRefreshCalled.set(true);\n        }\n      }\n    });\n    iw.addDocument(new Document());\n    iw.commit();\n    assertFalse(afterRefreshCalled.get());\n    sm.maybeRefreshBlocking();\n    assertTrue(afterRefreshCalled.get());\n    sm.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a333953f2d3ad264dca2d3f4c5b46ad3077b0838":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c2045b132a2396bb23dff28d2d9f349a6907d36e":["aa09157b213a620622ccae0ef62a1da45a683222"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a333953f2d3ad264dca2d3f4c5b46ad3077b0838"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["407687e67faf6e1f02a211ca078d8e3eed631027","aa09157b213a620622ccae0ef62a1da45a683222"],"aa09157b213a620622ccae0ef62a1da45a683222":["a333953f2d3ad264dca2d3f4c5b46ad3077b0838"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2045b132a2396bb23dff28d2d9f349a6907d36e"]},"commit2Childs":{"a333953f2d3ad264dca2d3f4c5b46ad3077b0838":["407687e67faf6e1f02a211ca078d8e3eed631027","aa09157b213a620622ccae0ef62a1da45a683222"],"c2045b132a2396bb23dff28d2d9f349a6907d36e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a333953f2d3ad264dca2d3f4c5b46ad3077b0838","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":["dd45d4a2ee01a1932d33eec42f5272c2402da679"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"aa09157b213a620622ccae0ef62a1da45a683222":["c2045b132a2396bb23dff28d2d9f349a6907d36e","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}