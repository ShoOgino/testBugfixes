{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","sourceNew":"  @Override\n  public boolean exists(int doc) {\n    try {\n      if (doc < lastDocRequested) {\n        if (noMatches) return false;\n        scorer = weight.scorer(readerContext, true, false, acceptDocs);\n        scorerDoc = -1;\n        if (scorer==null) {\n          noMatches = true;\n          return false;\n        }\n      }\n      lastDocRequested = doc;\n\n      if (scorerDoc < doc) {\n        scorerDoc = scorer.advance(doc);\n      }\n\n      if (scorerDoc > doc) {\n        // query doesn't match this document... either because we hit the\n        // end, or because the next doc is after this doc.\n        return false;\n      }\n\n      // a match!\n      return true;\n    } catch (IOException e) {\n      throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean exists(int doc) {\n    try {\n      if (doc < lastDocRequested) {\n        if (noMatches) return false;\n        scorer = weight.scorer(readerContext, true, false, acceptDocs);\n        scorerDoc = -1;\n        if (scorer==null) {\n          noMatches = true;\n          return false;\n        }\n      }\n      lastDocRequested = doc;\n\n      if (scorerDoc < doc) {\n        scorerDoc = scorer.advance(doc);\n      }\n\n      if (scorerDoc > doc) {\n        // query doesn't match this document... either because we hit the\n        // end, or because the next doc is after this doc.\n        return false;\n      }\n\n      // a match!\n      return true;\n    } catch (IOException e) {\n      throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","sourceNew":"  @Override\n  public boolean exists(int doc) {\n    try {\n      if (doc < lastDocRequested) {\n        if (noMatches) return false;\n        scorer = weight.scorer(readerContext, true, false, acceptDocs);\n        scorerDoc = -1;\n        if (scorer==null) {\n          noMatches = true;\n          return false;\n        }\n      }\n      lastDocRequested = doc;\n\n      if (scorerDoc < doc) {\n        scorerDoc = scorer.advance(doc);\n      }\n\n      if (scorerDoc > doc) {\n        // query doesn't match this document... either because we hit the\n        // end, or because the next doc is after this doc.\n        return false;\n      }\n\n      // a match!\n      return true;\n    } catch (IOException e) {\n      throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean exists(int doc) {\n    try {\n      if (doc < lastDocRequested) {\n        if (noMatches) return false;\n        scorer = weight.scorer(readerContext, true, false, acceptDocs);\n        scorerDoc = -1;\n        if (scorer==null) {\n          noMatches = true;\n          return false;\n        }\n      }\n      lastDocRequested = doc;\n\n      if (scorerDoc < doc) {\n        scorerDoc = scorer.advance(doc);\n      }\n\n      if (scorerDoc > doc) {\n        // query doesn't match this document... either because we hit the\n        // end, or because the next doc is after this doc.\n        return false;\n      }\n\n      // a match!\n      return true;\n    } catch (IOException e) {\n      throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","sourceNew":"  @Override\n  public boolean exists(int doc) {\n    try {\n      if (doc < lastDocRequested) {\n        if (noMatches) return false;\n        scorer = weight.scorer(readerContext, true, false, acceptDocs);\n        scorerDoc = -1;\n        if (scorer==null) {\n          noMatches = true;\n          return false;\n        }\n      }\n      lastDocRequested = doc;\n\n      if (scorerDoc < doc) {\n        scorerDoc = scorer.advance(doc);\n      }\n\n      if (scorerDoc > doc) {\n        // query doesn't match this document... either because we hit the\n        // end, or because the next doc is after this doc.\n        return false;\n      }\n\n      // a match!\n      return true;\n    } catch (IOException e) {\n      throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean exists(int doc) {\n    try {\n      if (doc < lastDocRequested) {\n        if (noMatches) return false;\n        scorer = weight.scorer(readerContext, true, false, acceptDocs);\n        scorerDoc = -1;\n        if (scorer==null) {\n          noMatches = true;\n          return false;\n        }\n      }\n      lastDocRequested = doc;\n\n      if (scorerDoc < doc) {\n        scorerDoc = scorer.advance(doc);\n      }\n\n      if (scorerDoc > doc) {\n        // query doesn't match this document... either because we hit the\n        // end, or because the next doc is after this doc.\n        return false;\n      }\n\n      // a match!\n      return true;\n    } catch (IOException e) {\n      throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","sourceNew":"  @Override\n  public boolean exists(int doc) {\n    try {\n      if (doc < lastDocRequested) {\n        if (noMatches) return false;\n        scorer = weight.scorer(readerContext, acceptDocs);\n        scorerDoc = -1;\n        if (scorer==null) {\n          noMatches = true;\n          return false;\n        }\n      }\n      lastDocRequested = doc;\n\n      if (scorerDoc < doc) {\n        scorerDoc = scorer.advance(doc);\n      }\n\n      if (scorerDoc > doc) {\n        // query doesn't match this document... either because we hit the\n        // end, or because the next doc is after this doc.\n        return false;\n      }\n\n      // a match!\n      return true;\n    } catch (IOException e) {\n      throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean exists(int doc) {\n    try {\n      if (doc < lastDocRequested) {\n        if (noMatches) return false;\n        scorer = weight.scorer(readerContext, true, false, acceptDocs);\n        scorerDoc = -1;\n        if (scorer==null) {\n          noMatches = true;\n          return false;\n        }\n      }\n      lastDocRequested = doc;\n\n      if (scorerDoc < doc) {\n        scorerDoc = scorer.advance(doc);\n      }\n\n      if (scorerDoc > doc) {\n        // query doesn't match this document... either because we hit the\n        // end, or because the next doc is after this doc.\n        return false;\n      }\n\n      // a match!\n      return true;\n    } catch (IOException e) {\n      throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","sourceNew":"  @Override\n  public boolean exists(int doc) {\n    try {\n      if (doc < lastDocRequested) {\n        if (noMatches) return false;\n        scorer = weight.scorer(readerContext, acceptDocs);\n        scorerDoc = -1;\n        if (scorer==null) {\n          noMatches = true;\n          return false;\n        }\n      }\n      lastDocRequested = doc;\n\n      if (scorerDoc < doc) {\n        scorerDoc = scorer.advance(doc);\n      }\n\n      if (scorerDoc > doc) {\n        // query doesn't match this document... either because we hit the\n        // end, or because the next doc is after this doc.\n        return false;\n      }\n\n      // a match!\n      return true;\n    } catch (IOException e) {\n      throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean exists(int doc) {\n    try {\n      if (doc < lastDocRequested) {\n        if (noMatches) return false;\n        scorer = weight.scorer(readerContext, true, false, acceptDocs);\n        scorerDoc = -1;\n        if (scorer==null) {\n          noMatches = true;\n          return false;\n        }\n      }\n      lastDocRequested = doc;\n\n      if (scorerDoc < doc) {\n        scorerDoc = scorer.advance(doc);\n      }\n\n      if (scorerDoc > doc) {\n        // query doesn't match this document... either because we hit the\n        // end, or because the next doc is after this doc.\n        return false;\n      }\n\n      // a match!\n      return true;\n    } catch (IOException e) {\n      throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","sourceNew":"  @Override\n  public boolean exists(int doc) {\n    try {\n      if (doc < lastDocRequested) {\n        if (noMatches) return false;\n        scorer = weight.scorer(readerContext, acceptDocs, true);\n        scorerDoc = -1;\n        if (scorer==null) {\n          noMatches = true;\n          return false;\n        }\n      }\n      lastDocRequested = doc;\n\n      if (scorerDoc < doc) {\n        scorerDoc = scorer.advance(doc);\n      }\n\n      if (scorerDoc > doc) {\n        // query doesn't match this document... either because we hit the\n        // end, or because the next doc is after this doc.\n        return false;\n      }\n\n      // a match!\n      return true;\n    } catch (IOException e) {\n      throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean exists(int doc) {\n    try {\n      if (doc < lastDocRequested) {\n        if (noMatches) return false;\n        scorer = weight.scorer(readerContext, acceptDocs);\n        scorerDoc = -1;\n        if (scorer==null) {\n          noMatches = true;\n          return false;\n        }\n      }\n      lastDocRequested = doc;\n\n      if (scorerDoc < doc) {\n        scorerDoc = scorer.advance(doc);\n      }\n\n      if (scorerDoc > doc) {\n        // query doesn't match this document... either because we hit the\n        // end, or because the next doc is after this doc.\n        return false;\n      }\n\n      // a match!\n      return true;\n    } catch (IOException e) {\n      throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n    }\n  }\n\n","bugFix":["2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","sourceNew":"  @Override\n  public boolean exists(int doc) {\n    try {\n      if (doc < lastDocRequested) {\n        if (noMatches) return false;\n        scorer = weight.scorer(readerContext, acceptDocs);\n        scorerDoc = -1;\n        if (scorer==null) {\n          noMatches = true;\n          return false;\n        }\n      }\n      lastDocRequested = doc;\n\n      if (scorerDoc < doc) {\n        scorerDoc = scorer.advance(doc);\n      }\n\n      if (scorerDoc > doc) {\n        // query doesn't match this document... either because we hit the\n        // end, or because the next doc is after this doc.\n        return false;\n      }\n\n      // a match!\n      return true;\n    } catch (IOException e) {\n      throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean exists(int doc) {\n    try {\n      if (doc < lastDocRequested) {\n        if (noMatches) return false;\n        scorer = weight.scorer(readerContext, acceptDocs, true);\n        scorerDoc = -1;\n        if (scorer==null) {\n          noMatches = true;\n          return false;\n        }\n      }\n      lastDocRequested = doc;\n\n      if (scorerDoc < doc) {\n        scorerDoc = scorer.advance(doc);\n      }\n\n      if (scorerDoc > doc) {\n        // query doesn't match this document... either because we hit the\n        // end, or because the next doc is after this doc.\n        return false;\n      }\n\n      // a match!\n      return true;\n    } catch (IOException e) {\n      throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","sourceNew":"  @Override\n  public boolean exists(int doc) {\n    try {\n      if (doc < lastDocRequested) {\n        if (noMatches) return false;\n        scorer = weight.scorer(readerContext);\n        scorerDoc = -1;\n        if (scorer==null) {\n          noMatches = true;\n          return false;\n        }\n      }\n      lastDocRequested = doc;\n\n      if (scorerDoc < doc) {\n        scorerDoc = scorer.advance(doc);\n      }\n\n      if (scorerDoc > doc) {\n        // query doesn't match this document... either because we hit the\n        // end, or because the next doc is after this doc.\n        return false;\n      }\n\n      // a match!\n      return true;\n    } catch (IOException e) {\n      throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean exists(int doc) {\n    try {\n      if (doc < lastDocRequested) {\n        if (noMatches) return false;\n        scorer = weight.scorer(readerContext, acceptDocs);\n        scorerDoc = -1;\n        if (scorer==null) {\n          noMatches = true;\n          return false;\n        }\n      }\n      lastDocRequested = doc;\n\n      if (scorerDoc < doc) {\n        scorerDoc = scorer.advance(doc);\n      }\n\n      if (scorerDoc > doc) {\n        // query doesn't match this document... either because we hit the\n        // end, or because the next doc is after this doc.\n        return false;\n      }\n\n      // a match!\n      return true;\n    } catch (IOException e) {\n      throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","sourceNew":"  @Override\n  public boolean exists(int doc) {\n    try {\n      if (doc < lastDocRequested) {\n        if (noMatches) return false;\n        scorer = weight.scorer(readerContext);\n        scorerDoc = -1;\n        if (scorer==null) {\n          noMatches = true;\n          return false;\n        }\n        it = scorer.iterator();\n      }\n      lastDocRequested = doc;\n\n      if (scorerDoc < doc) {\n        scorerDoc = it.advance(doc);\n      }\n\n      if (scorerDoc > doc) {\n        // query doesn't match this document... either because we hit the\n        // end, or because the next doc is after this doc.\n        return false;\n      }\n\n      // a match!\n      return true;\n    } catch (IOException e) {\n      throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean exists(int doc) {\n    try {\n      if (doc < lastDocRequested) {\n        if (noMatches) return false;\n        scorer = weight.scorer(readerContext);\n        scorerDoc = -1;\n        if (scorer==null) {\n          noMatches = true;\n          return false;\n        }\n      }\n      lastDocRequested = doc;\n\n      if (scorerDoc < doc) {\n        scorerDoc = scorer.advance(doc);\n      }\n\n      if (scorerDoc > doc) {\n        // query doesn't match this document... either because we hit the\n        // end, or because the next doc is after this doc.\n        return false;\n      }\n\n      // a match!\n      return true;\n    } catch (IOException e) {\n      throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ec20178021a8555c9e59c580e877af139a162aa","date":1584287445,"type":3,"author":"Michele Palmia","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#exists(int).mjava","sourceNew":"  @Override\n  public boolean exists(int doc) {\n    if (doc < lastDocRequested) {\n      throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocRequested + \" vs docID=\" + doc);\n    }\n    lastDocRequested = doc;\n\n    try {\n      if (disi == null) {\n        scorer = weight.scorer(readerContext);\n        if (scorer == null) {\n          disi = DocIdSetIterator.empty();\n        } else {\n          tpi = scorer.twoPhaseIterator();\n          disi = tpi == null ? scorer.iterator() : tpi.approximation();\n        }\n        thisDocMatches = null;\n      }\n\n      if (disi.docID() < doc) {\n        disi.advance(doc);\n        thisDocMatches = null;\n      }\n      if (disi.docID() == doc) {\n        if (thisDocMatches == null) {\n          thisDocMatches = tpi == null || tpi.matches();\n        }\n        return thisDocMatches;\n      } else return false;\n    } catch (IOException e) {\n      throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean exists(int doc) {\n    try {\n      if (doc < lastDocRequested) {\n        if (noMatches) return false;\n        scorer = weight.scorer(readerContext);\n        scorerDoc = -1;\n        if (scorer==null) {\n          noMatches = true;\n          return false;\n        }\n        it = scorer.iterator();\n      }\n      lastDocRequested = doc;\n\n      if (scorerDoc < doc) {\n        scorerDoc = it.advance(doc);\n      }\n\n      if (scorerDoc > doc) {\n        // query doesn't match this document... either because we hit the\n        // end, or because the next doc is after this doc.\n        return false;\n      }\n\n      // a match!\n      return true;\n    } catch (IOException e) {\n      throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["fb17639909a369c1e64866842e5c213440acc17e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"2ec20178021a8555c9e59c580e877af139a162aa":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["19275ba31e621f6da1b83bf13af75233876fd3d4","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ec20178021a8555c9e59c580e877af139a162aa"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"fb17639909a369c1e64866842e5c213440acc17e":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2ec20178021a8555c9e59c580e877af139a162aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["2ec20178021a8555c9e59c580e877af139a162aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}