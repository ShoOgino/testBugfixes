{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegeneratePoint#intersects(Plane,GeoPoint[],Membership...).mjava","commits":[{"id":"7aca5c321bc9760dbfc9cefcc9d648e946b4615e","date":1429714020,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegeneratePoint#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegeneratePoint#intersects(Plane,Membership...).mjava","sourceNew":"    /** Assess whether a plane, within the provided bounds, intersects\n     * with the shape.\n     *@param plane is the plane to assess for intersection with the shape's edges or\n     *  bounding curves.\n     *@param bounds are a set of bounds that define an area that an\n     *  intersection must be within in order to qualify (provided by a GeoArea).\n     *@return true if there's such an intersection, false if not.\n     */\n    @Override\n    public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n        if (plane.evaluate(this) == 0.0)\n            return false;\n        \n        for (Membership m : bounds) {\n            if (!m.isWithin(this))\n                return false;\n        }\n        return true;\n    }\n\n","sourceOld":"    /** Assess whether a plane, within the provided bounds, intersects\n     * with the shape.\n     *@param plane is the plane to assess for intersection with the shape's edges or\n     *  bounding curves.\n     *@param bounds are a set of bounds that define an area that an\n     *  intersection must be within in order to qualify (provided by a GeoArea).\n     *@return true if there's such an intersection, false if not.\n     */\n    @Override\n    public boolean intersects(final Plane plane, final Membership... bounds) {\n        if (plane.evaluate(this) == 0.0)\n            return false;\n        \n        for (Membership m : bounds) {\n            if (!m.isWithin(this))\n                return false;\n        }\n        return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegeneratePoint#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegeneratePoint#intersects(Plane,GeoPoint[],Membership...).mjava","sourceNew":"  /**\n   * Assess whether a plane, within the provided bounds, intersects\n   * with the shape.\n   *\n   * @param plane  is the plane to assess for intersection with the shape's edges or\n   *               bounding curves.\n   * @param bounds are a set of bounds that define an area that an\n   *               intersection must be within in order to qualify (provided by a GeoArea).\n   * @return true if there's such an intersection, false if not.\n   */\n  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    if (plane.evaluate(this) == 0.0)\n      return false;\n\n    for (Membership m : bounds) {\n      if (!m.isWithin(this))\n        return false;\n    }\n    return true;\n  }\n\n","sourceOld":"    /** Assess whether a plane, within the provided bounds, intersects\n     * with the shape.\n     *@param plane is the plane to assess for intersection with the shape's edges or\n     *  bounding curves.\n     *@param bounds are a set of bounds that define an area that an\n     *  intersection must be within in order to qualify (provided by a GeoArea).\n     *@return true if there's such an intersection, false if not.\n     */\n    @Override\n    public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n        if (plane.evaluate(this) == 0.0)\n            return false;\n        \n        for (Membership m : bounds) {\n            if (!m.isWithin(this))\n                return false;\n        }\n        return true;\n    }\n\n","bugFix":null,"bugIntro":["9908748d960ccb7706a20e81289a656237780b6c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c8ba5fe73a7ca70f6d54a333cc3a57d4e01eedb7","date":1430770405,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegeneratePoint#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegeneratePoint#intersects(Plane,GeoPoint[],Membership...).mjava","sourceNew":"  /**\n   * Assess whether a plane, within the provided bounds, intersects\n   * with the shape.\n   *\n   * @param plane  is the plane to assess for intersection with the shape's edges or\n   *               bounding curves.\n   * @param bounds are a set of bounds that define an area that an\n   *               intersection must be within in order to qualify (provided by a GeoArea).\n   * @return true if there's such an intersection, false if not.\n   */\n  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // If not on the plane, no intersection\n    if (!plane.evaluateIsZero(this))\n      return false;\n\n    for (Membership m : bounds) {\n      if (!m.isWithin(this))\n        return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Assess whether a plane, within the provided bounds, intersects\n   * with the shape.\n   *\n   * @param plane  is the plane to assess for intersection with the shape's edges or\n   *               bounding curves.\n   * @param bounds are a set of bounds that define an area that an\n   *               intersection must be within in order to qualify (provided by a GeoArea).\n   * @return true if there's such an intersection, false if not.\n   */\n  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    if (plane.evaluate(this) == 0.0)\n      return false;\n\n    for (Membership m : bounds) {\n      if (!m.isWithin(this))\n        return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegeneratePoint#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Assess whether a plane, within the provided bounds, intersects\n   * with the shape.\n   *\n   * @param plane  is the plane to assess for intersection with the shape's edges or\n   *               bounding curves.\n   * @param bounds are a set of bounds that define an area that an\n   *               intersection must be within in order to qualify (provided by a GeoArea).\n   * @return true if there's such an intersection, false if not.\n   */\n  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // If not on the plane, no intersection\n    if (!plane.evaluateIsZero(this))\n      return false;\n\n    for (Membership m : bounds) {\n      if (!m.isWithin(this))\n        return false;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9908748d960ccb7706a20e81289a656237780b6c","date":1435716223,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegeneratePoint#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegeneratePoint#intersects(Plane,GeoPoint[],Membership...).mjava","sourceNew":"  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // If not on the plane, no intersection\n    if (!plane.evaluateIsZero(this))\n      return false;\n\n    for (Membership m : bounds) {\n      if (!m.isWithin(this))\n        return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Assess whether a plane, within the provided bounds, intersects\n   * with the shape.\n   *\n   * @param plane  is the plane to assess for intersection with the shape's edges or\n   *               bounding curves.\n   * @param bounds are a set of bounds that define an area that an\n   *               intersection must be within in order to qualify (provided by a GeoArea).\n   * @return true if there's such an intersection, false if not.\n   */\n  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // If not on the plane, no intersection\n    if (!plane.evaluateIsZero(this))\n      return false;\n\n    for (Membership m : bounds) {\n      if (!m.isWithin(this))\n        return false;\n    }\n    return true;\n  }\n\n","bugFix":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoDegeneratePoint#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegeneratePoint#intersects(Plane,GeoPoint[],Membership...).mjava","sourceNew":"  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // If not on the plane, no intersection\n    if (!plane.evaluateIsZero(this))\n      return false;\n\n    for (Membership m : bounds) {\n      if (!m.isWithin(this))\n        return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // If not on the plane, no intersection\n    if (!plane.evaluateIsZero(this))\n      return false;\n\n    for (Membership m : bounds) {\n      if (!m.isWithin(this))\n        return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8ba5fe73a7ca70f6d54a333cc3a57d4e01eedb7":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["9908748d960ccb7706a20e81289a656237780b6c"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["7aca5c321bc9760dbfc9cefcc9d648e946b4615e"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8ba5fe73a7ca70f6d54a333cc3a57d4e01eedb7"],"7aca5c321bc9760dbfc9cefcc9d648e946b4615e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9908748d960ccb7706a20e81289a656237780b6c":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","7aca5c321bc9760dbfc9cefcc9d648e946b4615e"],"c8ba5fe73a7ca70f6d54a333cc3a57d4e01eedb7":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c8ba5fe73a7ca70f6d54a333cc3a57d4e01eedb7"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["9908748d960ccb7706a20e81289a656237780b6c"],"7aca5c321bc9760dbfc9cefcc9d648e946b4615e":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"9908748d960ccb7706a20e81289a656237780b6c":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}