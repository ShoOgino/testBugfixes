{"path":"src/java/org/apache/lucene/analysis/PorterStemmer#stem(char[],int,int).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/PorterStemmer#stem(char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Stem a word contained in a portion of a char[] array.  Returns\n   * true if the stemming process resulted in a word different from\n   * the input.  You can retrieve the result with\n   * getResultLength()/getResultBuffer() or toString().  \n   */\n  public boolean stem(char[] wordBuffer, int offset, int wordLen) {\n    reset();\n    if (b.length < wordLen) {\n      char[] new_b = new char[wordLen + EXTRA];\n      b = new_b;\n    }\n    for (int j=0; j<wordLen; j++) \n      b[j] = wordBuffer[offset+j];\n    i = wordLen;\n    return stem(0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"550e5928a06fd85cb8c02ada3deabeb57181aa69","date":1071423332,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/PorterStemmer#stem(char[],int,int).mjava","pathOld":"src/java/org/apache/lucene/analysis/PorterStemmer#stem(char[],int,int).mjava","sourceNew":"  /** Stem a word contained in a portion of a char[] array.  Returns\n   * true if the stemming process resulted in a word different from\n   * the input.  You can retrieve the result with\n   * getResultLength()/getResultBuffer() or toString().\n   */\n  public boolean stem(char[] wordBuffer, int offset, int wordLen) {\n    reset();\n    if (b.length < wordLen) {\n      char[] new_b = new char[wordLen + EXTRA];\n      b = new_b;\n    }\n    for (int j=0; j<wordLen; j++)\n      b[j] = wordBuffer[offset+j];\n    i = wordLen;\n    return stem(0);\n  }\n\n","sourceOld":"  /** Stem a word contained in a portion of a char[] array.  Returns\n   * true if the stemming process resulted in a word different from\n   * the input.  You can retrieve the result with\n   * getResultLength()/getResultBuffer() or toString().  \n   */\n  public boolean stem(char[] wordBuffer, int offset, int wordLen) {\n    reset();\n    if (b.length < wordLen) {\n      char[] new_b = new char[wordLen + EXTRA];\n      b = new_b;\n    }\n    for (int j=0; j<wordLen; j++) \n      b[j] = wordBuffer[offset+j];\n    i = wordLen;\n    return stem(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b97548d27406e9f33187836e1de98d473a63f5d","date":1196088721,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/PorterStemmer#stem(char[],int,int).mjava","pathOld":"src/java/org/apache/lucene/analysis/PorterStemmer#stem(char[],int,int).mjava","sourceNew":"  /** Stem a word contained in a portion of a char[] array.  Returns\n   * true if the stemming process resulted in a word different from\n   * the input.  You can retrieve the result with\n   * getResultLength()/getResultBuffer() or toString().\n   */\n  public boolean stem(char[] wordBuffer, int offset, int wordLen) {\n    reset();\n    if (b.length < wordLen) {\n      char[] new_b = new char[wordLen + EXTRA];\n      b = new_b;\n    }\n    System.arraycopy(wordBuffer, offset, b, 0, wordLen);\n    i = wordLen;\n    return stem(0);\n  }\n\n","sourceOld":"  /** Stem a word contained in a portion of a char[] array.  Returns\n   * true if the stemming process resulted in a word different from\n   * the input.  You can retrieve the result with\n   * getResultLength()/getResultBuffer() or toString().\n   */\n  public boolean stem(char[] wordBuffer, int offset, int wordLen) {\n    reset();\n    if (b.length < wordLen) {\n      char[] new_b = new char[wordLen + EXTRA];\n      b = new_b;\n    }\n    for (int j=0; j<wordLen; j++)\n      b[j] = wordBuffer[offset+j];\n    i = wordLen;\n    return stem(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a43a81875fea76763cb9f1ff5a41f2c5b79a6585","date":1264678816,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/PorterStemmer#stem(char[],int,int).mjava","pathOld":"src/java/org/apache/lucene/analysis/PorterStemmer#stem(char[],int,int).mjava","sourceNew":"  /** Stem a word contained in a portion of a char[] array.  Returns\n   * true if the stemming process resulted in a word different from\n   * the input.  You can retrieve the result with\n   * getResultLength()/getResultBuffer() or toString().\n   */\n  public boolean stem(char[] wordBuffer, int offset, int wordLen) {\n    reset();\n    if (b.length < wordLen) {\n      b = new char[ArrayUtil.oversize(wordLen, NUM_BYTES_CHAR)];\n    }\n    System.arraycopy(wordBuffer, offset, b, 0, wordLen);\n    i = wordLen;\n    return stem(0);\n  }\n\n","sourceOld":"  /** Stem a word contained in a portion of a char[] array.  Returns\n   * true if the stemming process resulted in a word different from\n   * the input.  You can retrieve the result with\n   * getResultLength()/getResultBuffer() or toString().\n   */\n  public boolean stem(char[] wordBuffer, int offset, int wordLen) {\n    reset();\n    if (b.length < wordLen) {\n      char[] new_b = new char[wordLen + EXTRA];\n      b = new_b;\n    }\n    System.arraycopy(wordBuffer, offset, b, 0, wordLen);\n    i = wordLen;\n    return stem(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/PorterStemmer#stem(char[],int,int).mjava","pathOld":"src/java/org/apache/lucene/analysis/PorterStemmer#stem(char[],int,int).mjava","sourceNew":"  /** Stem a word contained in a portion of a char[] array.  Returns\n   * true if the stemming process resulted in a word different from\n   * the input.  You can retrieve the result with\n   * getResultLength()/getResultBuffer() or toString().\n   */\n  public boolean stem(char[] wordBuffer, int offset, int wordLen) {\n    reset();\n    if (b.length < wordLen) {\n      b = new char[ArrayUtil.oversize(wordLen, NUM_BYTES_CHAR)];\n    }\n    System.arraycopy(wordBuffer, offset, b, 0, wordLen);\n    i = wordLen;\n    return stem(0);\n  }\n\n","sourceOld":"  /** Stem a word contained in a portion of a char[] array.  Returns\n   * true if the stemming process resulted in a word different from\n   * the input.  You can retrieve the result with\n   * getResultLength()/getResultBuffer() or toString().\n   */\n  public boolean stem(char[] wordBuffer, int offset, int wordLen) {\n    reset();\n    if (b.length < wordLen) {\n      b = new char[ArrayUtil.oversize(wordLen, NUM_BYTES_CHAR)];\n    }\n    System.arraycopy(wordBuffer, offset, b, 0, wordLen);\n    i = wordLen;\n    return stem(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"550e5928a06fd85cb8c02ada3deabeb57181aa69":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"8b97548d27406e9f33187836e1de98d473a63f5d":["550e5928a06fd85cb8c02ada3deabeb57181aa69"],"a43a81875fea76763cb9f1ff5a41f2c5b79a6585":["8b97548d27406e9f33187836e1de98d473a63f5d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a43a81875fea76763cb9f1ff5a41f2c5b79a6585"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["550e5928a06fd85cb8c02ada3deabeb57181aa69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"550e5928a06fd85cb8c02ada3deabeb57181aa69":["8b97548d27406e9f33187836e1de98d473a63f5d"],"8b97548d27406e9f33187836e1de98d473a63f5d":["a43a81875fea76763cb9f1ff5a41f2c5b79a6585"],"a43a81875fea76763cb9f1ff5a41f2c5b79a6585":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}