{"path":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(docList, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","sourceNew":null,"sourceOld":"  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(docList, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","sourceNew":"  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(docList, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(docList, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(docList, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5684446f7742dfb07c42296decc5e4d6515a0fe","date":1292978807,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","sourceNew":"  @Deprecated\n  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    SolrDocumentList solrDocList;\n    try {\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, getFieldsToLoad(sreq), docIds );\n      return cluster(query, solrDocList, docIds, sreq);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(docList, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc5ecd93bcd50b2199757091d526fc1bcbce0db1","date":1293154244,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","sourceNew":"  @Deprecated\n  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    SolrDocumentList solrDocList;\n    try {\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, getFieldsToLoad(sreq), docIds );\n      return cluster(query, solrDocList, docIds, sreq);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(docList, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","sourceNew":"  @Deprecated\n  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    SolrDocumentList solrDocList;\n    try {\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, getFieldsToLoad(sreq), docIds );\n      return cluster(query, solrDocList, docIds, sreq);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(docList, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","sourceNew":"  @Override\n  @Deprecated\n  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    SolrDocumentList solrDocList;\n    try {\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, getFieldsToLoad(sreq), docIds );\n      return cluster(query, solrDocList, docIds, sreq);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Deprecated\n  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    SolrDocumentList solrDocList;\n    try {\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, getFieldsToLoad(sreq), docIds );\n      return cluster(query, solrDocList, docIds, sreq);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","sourceNew":"  @Override\n  @Deprecated\n  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    SolrDocumentList solrDocList;\n    try {\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, getFieldsToLoad(sreq), docIds );\n      return cluster(query, solrDocList, docIds, sreq);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Deprecated\n  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    SolrDocumentList solrDocList;\n    try {\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, getFieldsToLoad(sreq), docIds );\n      return cluster(query, solrDocList, docIds, sreq);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","sourceNew":"  @Override\n  @Deprecated\n  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    SolrDocumentList solrDocList;\n    try {\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, getFieldsToLoad(sreq), docIds );\n      return cluster(query, solrDocList, docIds, sreq);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Deprecated\n  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    SolrDocumentList solrDocList;\n    try {\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, getFieldsToLoad(sreq), docIds );\n      return cluster(query, solrDocList, docIds, sreq);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","sourceNew":"  @Override\n  @Deprecated\n  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    SolrDocumentList solrDocList;\n    try {\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, getFieldsToLoad(sreq), docIds );\n      return cluster(query, solrDocList, docIds, sreq);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  @Deprecated\n  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    SolrDocumentList solrDocList;\n    try {\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, getFieldsToLoad(sreq), docIds );\n      return cluster(query, solrDocList, docIds, sreq);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,DocList,SolrQueryRequest).mjava","sourceNew":"  @Override\n  @Deprecated\n  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    SolrDocumentList solrDocList;\n    try {\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, getFieldsToLoad(sreq), docIds );\n      return cluster(query, solrDocList, docIds, sreq);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  @Deprecated\n  public Object cluster(Query query, DocList docList, SolrQueryRequest sreq) {\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    SolrDocumentList solrDocList;\n    try {\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, getFieldsToLoad(sreq), docIds );\n      return cluster(query, solrDocList, docIds, sreq);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["a5684446f7742dfb07c42296decc5e4d6515a0fe"],"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","a5684446f7742dfb07c42296decc5e4d6515a0fe"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a5684446f7742dfb07c42296decc5e4d6515a0fe":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["1da8d55113b689b06716246649de6f62430f15c0","a5684446f7742dfb07c42296decc5e4d6515a0fe"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["dc5ecd93bcd50b2199757091d526fc1bcbce0db1","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a5684446f7742dfb07c42296decc5e4d6515a0fe":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1"],"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","a5684446f7742dfb07c42296decc5e4d6515a0fe","dc5ecd93bcd50b2199757091d526fc1bcbce0db1"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}