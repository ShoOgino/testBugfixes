{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","commits":[{"id":"d289450fa5030c34b5e378c04bcb03a026aad9f4","date":1400178141,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void seekExact(BytesRef target, TermState otherState) {\n      // if (DEBUG) {\n      //   System.out.println(\"BTTR.seekExact termState seg=\" + segment + \" target=\" + target.utf8ToString() + \" \" + target + \" state=\" + otherState);\n      // }\n      assert clearEOF();\n      if (target.compareTo(term) != 0 || !termExists) {\n        assert otherState != null && otherState instanceof BlockTermState;\n        currentFrame = staticFrame;\n        currentFrame.state.copyFrom(otherState);\n        term.copyBytes(target);\n        currentFrame.metaDataUpto = currentFrame.getTermBlockOrd();\n        assert currentFrame.metaDataUpto > 0;\n        validIndexPrefix = 0;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  skip seek: already on target state=\" + currentFrame.state);\n        // }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e50f0da93c6dcee20d8792637b1786e2c34975e9","date":1400182475,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void seekExact(BytesRef target, TermState otherState) {\n      // if (DEBUG) {\n      //   System.out.println(\"BTTR.seekExact termState seg=\" + segment + \" target=\" + target.utf8ToString() + \" \" + target + \" state=\" + otherState);\n      // }\n      assert clearEOF();\n      if (target.compareTo(term) != 0 || !termExists) {\n        assert otherState != null && otherState instanceof BlockTermState;\n        currentFrame = staticFrame;\n        currentFrame.state.copyFrom(otherState);\n        term.copyBytes(target);\n        currentFrame.metaDataUpto = currentFrame.getTermBlockOrd();\n        assert currentFrame.metaDataUpto > 0;\n        validIndexPrefix = 0;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  skip seek: already on target state=\" + currentFrame.state);\n        // }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e50f0da93c6dcee20d8792637b1786e2c34975e9":["d289450fa5030c34b5e378c04bcb03a026aad9f4"],"d289450fa5030c34b5e378c04bcb03a026aad9f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e50f0da93c6dcee20d8792637b1786e2c34975e9":[],"d289450fa5030c34b5e378c04bcb03a026aad9f4":["e50f0da93c6dcee20d8792637b1786e2c34975e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d289450fa5030c34b5e378c04bcb03a026aad9f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e50f0da93c6dcee20d8792637b1786e2c34975e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}