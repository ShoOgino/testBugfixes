{"path":"src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","commits":[{"id":"20349324eb18d1565d301e59be543989f38743d3","date":1258494398,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","pathOld":"/dev/null","sourceNew":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \"trait_ss\", \"Obnoxious\",\n            \"subject\", \"Defeated the pacifists op the Gandhi nebula\"));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\", \"stopwords\",\"false\",\n           \"q\",\"the big\"), oner\n    );\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["576a4c26b3d237aa2626e691ea3b4fa016037fe3","576a4c26b3d237aa2626e691ea3b4fa016037fe3","576a4c26b3d237aa2626e691ea3b4fa016037fe3","b53e1fdeb877dfb9c1aba24b343170ae7ffe7108","b53e1fdeb877dfb9c1aba24b343170ae7ffe7108","b53e1fdeb877dfb9c1aba24b343170ae7ffe7108","81c86ba78280d33631b3536414395ad80a19a8af"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b63aae1b4446787889e3e4acf66a8a1190caf9fc","date":1266980445,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","pathOld":"src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","sourceNew":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \"trait_ss\", \"Obnoxious\",\n            \"subject\", \"Defeated the pacifists op the Gandhi nebula\"));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\", \"stopwords\",\"false\",\n           \"q\",\"the big\"), oner\n    );\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","sourceOld":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \"trait_ss\", \"Obnoxious\",\n            \"subject\", \"Defeated the pacifists op the Gandhi nebula\"));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\", \"stopwords\",\"false\",\n           \"q\",\"the big\"), oner\n    );\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","pathOld":"src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","sourceNew":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \"trait_ss\", \"Obnoxious\",\n            \"subject\", \"Defeated the pacifists op the Gandhi nebula\"));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\", \"stopwords\",\"false\",\n           \"q\",\"the big\"), oner\n    );\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","sourceOld":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \"trait_ss\", \"Obnoxious\",\n            \"subject\", \"Defeated the pacifists op the Gandhi nebula\"));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\", \"stopwords\",\"false\",\n           \"q\",\"the big\"), oner\n    );\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b63aae1b4446787889e3e4acf66a8a1190caf9fc":["20349324eb18d1565d301e59be543989f38743d3"],"20349324eb18d1565d301e59be543989f38743d3":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["b63aae1b4446787889e3e4acf66a8a1190caf9fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b63aae1b4446787889e3e4acf66a8a1190caf9fc":["ad94625fb8d088209f46650c8097196fec67f00c"],"20349324eb18d1565d301e59be543989f38743d3":["b63aae1b4446787889e3e4acf66a8a1190caf9fc"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["20349324eb18d1565d301e59be543989f38743d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}