{"path":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new TermSpans(reader.termPositions(term), term);\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new TermSpans(reader.termPositions(term), term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    // NOTE: debateably, the caller should never pass in a\n    // multi reader...\n    final BytesRef textBytes = new BytesRef(term.text());\n    final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(reader,\n                                                                           MultiFields.getDeletedDocs(reader),\n                                                                           term.field(),\n                                                                           textBytes);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (MultiFields.getTermDocsEnum(reader, MultiFields.getDeletedDocs(reader), term.field(), textBytes) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new TermSpans(reader.termPositions(term), term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    // NOTE: debateably, the caller should never pass in a\n    // multi reader...\n    final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(reader,\n                                                                           MultiFields.getDeletedDocs(reader),\n                                                                           term.field(),\n                                                                           term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (MultiFields.getTermDocsEnum(reader, MultiFields.getDeletedDocs(reader), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    // NOTE: debateably, the caller should never pass in a\n    // multi reader...\n    final BytesRef textBytes = new BytesRef(term.text());\n    final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(reader,\n                                                                           MultiFields.getDeletedDocs(reader),\n                                                                           term.field(),\n                                                                           textBytes);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (MultiFields.getTermDocsEnum(reader, MultiFields.getDeletedDocs(reader), term.field(), textBytes) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    // NOTE: debateably, the caller should never pass in a\n    // multi reader...\n    final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(reader,\n                                                                           MultiFields.getDeletedDocs(reader),\n                                                                           term.field(),\n                                                                           term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (MultiFields.getTermDocsEnum(reader, MultiFields.getDeletedDocs(reader), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    // NOTE: debateably, the caller should never pass in a\n    // multi reader...\n    final BytesRef textBytes = new BytesRef(term.text());\n    final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(reader,\n                                                                           MultiFields.getDeletedDocs(reader),\n                                                                           term.field(),\n                                                                           textBytes);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (MultiFields.getTermDocsEnum(reader, MultiFields.getDeletedDocs(reader), term.field(), textBytes) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d302ba328993a5b449c2e0b3b5e15ae53e45879","date":1281609097,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    // NOTE: debateably, the caller should never pass in a\n    // multi reader...\n    final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(reader,\n                                                                           MultiFields.getDeletedDocs(reader),\n                                                                           term.field(),\n                                                                           term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (MultiFields.getTermDocsEnum(reader, MultiFields.getDeletedDocs(reader), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    // NOTE: debateably, the caller should never pass in a\n    // multi reader...\n    final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(reader,\n                                                                           MultiFields.getDeletedDocs(reader),\n                                                                           term.field(),\n                                                                           term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (MultiFields.getTermDocsEnum(reader, MultiFields.getDeletedDocs(reader), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"c8323d210478d76a02372693d254b69aac614689":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["0d302ba328993a5b449c2e0b3b5e15ae53e45879","c8323d210478d76a02372693d254b69aac614689"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8323d210478d76a02372693d254b69aac614689"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c8323d210478d76a02372693d254b69aac614689"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["0d302ba328993a5b449c2e0b3b5e15ae53e45879","5f4e87790277826a2aea119328600dfb07761f32"],"c8323d210478d76a02372693d254b69aac614689":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["c8323d210478d76a02372693d254b69aac614689","29ef99d61cda9641b6250bf9567329a6e65f901d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}