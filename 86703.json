{"path":"solr/core/src/test/org/apache/solr/util/hll/SparseHLLTest#largeRangeSmokeTest().mjava","commits":[{"id":"6faa211c4af605e3cf078a76d200c1dc348973f5","date":1437043657,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/SparseHLLTest#largeRangeSmokeTest().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Smoke test for {@link HLL#cardinality()} and the proper use of the large\n     * range correction.\n     */\n    @Test\n    public void largeRangeSmokeTest() {\n        final int log2m = 11;\n        final int m = (1 << log2m);\n        final int regwidth = 5;\n        // regwidth = 5, so hash space is\n        // log2m + (2^5 - 1 - 1), so L = log2m + 30\n        final int l = log2m + 30;\n\n        // all registers at large value\n        {\n            final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, m/*sparseThreshold*/, HLLType.SPARSE);\n\n            final int registerValue = 31/*chosen to ensure large correction kicks in*/;\n            for(int i=0; i<m; i++) {\n                hll.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, i, registerValue));\n            }\n\n            final long cardinality = hll.cardinality();\n\n\n            // Simplified estimator when all registers take same value: alpha / (m/2^val)\n            final double estimator = HLLUtil.alphaMSquared(m)/((double)m/Math.pow(2, registerValue));\n\n            // Assert conditions for large range\n            assertTrue(estimator > Math.pow(2, l)/30);\n\n            // Large range correction: -2^32 * log(1 - E/2^32)\n            final long expected = (long)Math.ceil(-1.0 * Math.pow(2, l) * Math.log(1.0 - estimator/Math.pow(2, l)));\n            assertEquals(cardinality, expected);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/SparseHLLTest#largeRangeSmokeTest().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Smoke test for {@link HLL#cardinality()} and the proper use of the large\n     * range correction.\n     */\n    @Test\n    public void largeRangeSmokeTest() {\n        final int log2m = 11;\n        final int m = (1 << log2m);\n        final int regwidth = 5;\n        // regwidth = 5, so hash space is\n        // log2m + (2^5 - 1 - 1), so L = log2m + 30\n        final int l = log2m + 30;\n\n        // all registers at large value\n        {\n            final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, m/*sparseThreshold*/, HLLType.SPARSE);\n\n            final int registerValue = 31/*chosen to ensure large correction kicks in*/;\n            for(int i=0; i<m; i++) {\n                hll.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, i, registerValue));\n            }\n\n            final long cardinality = hll.cardinality();\n\n\n            // Simplified estimator when all registers take same value: alpha / (m/2^val)\n            final double estimator = HLLUtil.alphaMSquared(m)/((double)m/Math.pow(2, registerValue));\n\n            // Assert conditions for large range\n            assertTrue(estimator > Math.pow(2, l)/30);\n\n            // Large range correction: -2^32 * log(1 - E/2^32)\n            final long expected = (long)Math.ceil(-1.0 * Math.pow(2, l) * Math.log(1.0 - estimator/Math.pow(2, l)));\n            assertEquals(cardinality, expected);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6faa211c4af605e3cf078a76d200c1dc348973f5"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6faa211c4af605e3cf078a76d200c1dc348973f5"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}