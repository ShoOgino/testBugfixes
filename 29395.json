{"path":"src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","commits":[{"id":"d1b4f9f023bf5098df34505adf1ed91daa67c239","date":1157655314,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see SolrParams#FACET_QUERY\n   */\n  public NamedList getFacetQueryCounts() throws IOException,ParseException {\n    \n    NamedList res = new NamedList();\n\n    /* Ignore SolrParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    SolrQueryParser qp = new SolrQueryParser(searcher.getSchema(),null);\n    \n    String[] facetQs = params.getParams(SolrParams.FACET_QUERY);\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        res.add(q, searcher.numDocs(qp.parse(q), docs));\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9727734a64d33a1345c9251f53eb375f04c583e","date":1158874656,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see SolrParams#FACET_QUERY\n   */\n  public NamedList getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList res = new NamedList();\n\n    /* Ignore SolrParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    SolrQueryParser qp = new SolrQueryParser(searcher.getSchema(),null);\n\n    String[] facetQs = params.getParams(SolrParams.FACET_QUERY);\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        res.add(q, searcher.numDocs(qp.parse(q), docs));\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see SolrParams#FACET_QUERY\n   */\n  public NamedList getFacetQueryCounts() throws IOException,ParseException {\n    \n    NamedList res = new NamedList();\n\n    /* Ignore SolrParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    SolrQueryParser qp = new SolrQueryParser(searcher.getSchema(),null);\n    \n    String[] facetQs = params.getParams(SolrParams.FACET_QUERY);\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        res.add(q, searcher.numDocs(qp.parse(q), docs));\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4145b7b13874de95211223a6edb648da8794a688","date":1170182192,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see SolrParams#FACET_QUERY\n   */\n  public NamedList getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList res = new SimpleOrderedMap();\n\n    /* Ignore SolrParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    SolrQueryParser qp = new SolrQueryParser(searcher.getSchema(),null);\n\n    String[] facetQs = params.getParams(SolrParams.FACET_QUERY);\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        res.add(q, searcher.numDocs(qp.parse(q), docs));\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see SolrParams#FACET_QUERY\n   */\n  public NamedList getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList res = new NamedList();\n\n    /* Ignore SolrParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    SolrQueryParser qp = new SolrQueryParser(searcher.getSchema(),null);\n\n    String[] facetQs = params.getParams(SolrParams.FACET_QUERY);\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        res.add(q, searcher.numDocs(qp.parse(q), docs));\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d1d1f748be6299a4bb58280fa1697824edc82c6","date":1172182682,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see SolrParams#FACET_QUERY\n   */\n  public NamedList getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList res = new SimpleOrderedMap();\n\n    /* Ignore SolrParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(SolrParams.FACET_QUERY);\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        res.add(q, searcher.numDocs(qp.parse(q), docs));\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see SolrParams#FACET_QUERY\n   */\n  public NamedList getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList res = new SimpleOrderedMap();\n\n    /* Ignore SolrParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    SolrQueryParser qp = new SolrQueryParser(searcher.getSchema(),null);\n\n    String[] facetQs = params.getParams(SolrParams.FACET_QUERY);\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        res.add(q, searcher.numDocs(qp.parse(q), docs));\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","date":1185993405,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see SolrParams#FACET_QUERY\n   */\n  public NamedList getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList res = new SimpleOrderedMap();\n\n    /* Ignore SolrParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        res.add(q, searcher.numDocs(qp.parse(q), docs));\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see SolrParams#FACET_QUERY\n   */\n  public NamedList getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList res = new SimpleOrderedMap();\n\n    /* Ignore SolrParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(SolrParams.FACET_QUERY);\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        res.add(q, searcher.numDocs(qp.parse(q), docs));\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1","aa62c79a7afa4d7f22e1f71b883659f3213d7db1","aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b6124b1a8da43c086b34ee5005d89e20f4f0764","date":1189219182,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList res = new SimpleOrderedMap();\n\n    /* Ignore SolrParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        res.add(q, searcher.numDocs(qp.parse(q), docs));\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see SolrParams#FACET_QUERY\n   */\n  public NamedList getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList res = new SimpleOrderedMap();\n\n    /* Ignore SolrParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        res.add(q, searcher.numDocs(qp.parse(q), docs));\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList res = new SimpleOrderedMap();\n\n    /* Ignore SolrParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n        res.add(q, searcher.numDocs(qobj, docs));\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList res = new SimpleOrderedMap();\n\n    /* Ignore SolrParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        res.add(q, searcher.numDocs(qp.parse(q), docs));\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["ef02613bb5b67b98ca5caf41e8d6e016a0158923"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9cb179b2fab2183d2f6041e450ff8022c592ecf0","date":1229553695,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList res = new SimpleOrderedMap();\n\n    /* Ignore SolrParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n        res.add(key, searcher.numDocs(qobj, base));\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList res = new SimpleOrderedMap();\n\n    /* Ignore SolrParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n        res.add(q, searcher.numDocs(qobj, docs));\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["ef02613bb5b67b98ca5caf41e8d6e016a0158923"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9bdbfe23bdb5dd83a2c8340e50b1ea0ed513f609","date":1252730139,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList res = new SimpleOrderedMap();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n        res.add(key, searcher.numDocs(qobj, base));\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList res = new SimpleOrderedMap();\n\n    /* Ignore SolrParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n        res.add(key, searcher.numDocs(qobj, base));\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList res = new SimpleOrderedMap();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n        res.add(key, searcher.numDocs(qobj, base));\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList res = new SimpleOrderedMap();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n        res.add(key, searcher.numDocs(qobj, base));\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d1b4f9f023bf5098df34505adf1ed91daa67c239":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"9bdbfe23bdb5dd83a2c8340e50b1ea0ed513f609":["9cb179b2fab2183d2f6041e450ff8022c592ecf0"],"9cb179b2fab2183d2f6041e450ff8022c592ecf0":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"c9727734a64d33a1345c9251f53eb375f04c583e":["d1b4f9f023bf5098df34505adf1ed91daa67c239"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["4b6124b1a8da43c086b34ee5005d89e20f4f0764"],"4b6124b1a8da43c086b34ee5005d89e20f4f0764":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["4d1d1f748be6299a4bb58280fa1697824edc82c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["9bdbfe23bdb5dd83a2c8340e50b1ea0ed513f609"],"4145b7b13874de95211223a6edb648da8794a688":["c9727734a64d33a1345c9251f53eb375f04c583e"],"4d1d1f748be6299a4bb58280fa1697824edc82c6":["4145b7b13874de95211223a6edb648da8794a688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d1b4f9f023bf5098df34505adf1ed91daa67c239":["c9727734a64d33a1345c9251f53eb375f04c583e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d1b4f9f023bf5098df34505adf1ed91daa67c239"],"9bdbfe23bdb5dd83a2c8340e50b1ea0ed513f609":["ad94625fb8d088209f46650c8097196fec67f00c"],"9cb179b2fab2183d2f6041e450ff8022c592ecf0":["9bdbfe23bdb5dd83a2c8340e50b1ea0ed513f609"],"c9727734a64d33a1345c9251f53eb375f04c583e":["4145b7b13874de95211223a6edb648da8794a688"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["9cb179b2fab2183d2f6041e450ff8022c592ecf0"],"4b6124b1a8da43c086b34ee5005d89e20f4f0764":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["4b6124b1a8da43c086b34ee5005d89e20f4f0764"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"4145b7b13874de95211223a6edb648da8794a688":["4d1d1f748be6299a4bb58280fa1697824edc82c6"],"4d1d1f748be6299a4bb58280fa1697824edc82c6":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}