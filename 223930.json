{"path":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#needsSolrIndexSearcher().mjava","commits":[{"id":"3237bc9583fd899fcf68bae4cc834095f5c911bf","date":1470710919,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#needsSolrIndexSearcher().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns false -- this transformer does use an IndexSearcher, but it does not (neccessarily) need \n   * the searcher from the ResultContext of the document being returned.  Instead we use the current \n   * \"live\" searcher for the specified core.\n   */\n  @Override\n  public boolean needsSolrIndexSearcher() { return false; }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#needsSolrIndexSearcher().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns false -- this transformer does use an IndexSearcher, but it does not (neccessarily) need \n   * the searcher from the ResultContext of the document being returned.  Instead we use the current \n   * \"live\" searcher for the specified core.\n   */\n  @Override\n  public boolean needsSolrIndexSearcher() { return false; }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#needsSolrIndexSearcher().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns false -- this transformer does use an IndexSearcher, but it does not (neccessarily) need \n   * the searcher from the ResultContext of the document being returned.  Instead we use the current \n   * \"live\" searcher for the specified core.\n   */\n  @Override\n  public boolean needsSolrIndexSearcher() { return false; }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#needsSolrIndexSearcher().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns false -- this transformer does use an IndexSearcher, but it does not (neccessarily) need \n   * the searcher from the ResultContext of the document being returned.  Instead we use the current \n   * \"live\" searcher for the specified core.\n   */\n  @Override\n  public boolean needsSolrIndexSearcher() { return false; }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43aca5e91629e42c7521ce4e8043f7df37c47e6c","date":1584973666,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#needsSolrIndexSearcher().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#needsSolrIndexSearcher().mjava","sourceNew":"  /**\n   * Returns false -- this transformer does use an IndexSearcher, but it does not (necessarily) need\n   * the searcher from the ResultContext of the document being returned.  Instead we use the current \n   * \"live\" searcher for the specified core.\n   */\n  @Override\n  public boolean needsSolrIndexSearcher() { return false; }\n\n","sourceOld":"  /**\n   * Returns false -- this transformer does use an IndexSearcher, but it does not (neccessarily) need \n   * the searcher from the ResultContext of the document being returned.  Instead we use the current \n   * \"live\" searcher for the specified core.\n   */\n  @Override\n  public boolean needsSolrIndexSearcher() { return false; }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3237bc9583fd899fcf68bae4cc834095f5c911bf"],"43aca5e91629e42c7521ce4e8043f7df37c47e6c":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43aca5e91629e42c7521ce4e8043f7df37c47e6c"],"3237bc9583fd899fcf68bae4cc834095f5c911bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["43aca5e91629e42c7521ce4e8043f7df37c47e6c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"43aca5e91629e42c7521ce4e8043f7df37c47e6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","3237bc9583fd899fcf68bae4cc834095f5c911bf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"3237bc9583fd899fcf68bae4cc834095f5c911bf":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}