{"path":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#recoveryTest().mjava","commits":[{"id":"be320990bdc77e643388fa801e75017f19289c42","date":1489477067,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#recoveryTest().mjava","pathOld":"/dev/null","sourceNew":"  public void recoveryTest() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .commit(cloudClient, COLLECTION);\n    // Replica recovery\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"5\"))\n        .process(cloudClient, COLLECTION);\n    JettySolrRunner solrRunner = getSolrRunner(false).get(0);\n    ChaosMonkey.stop(solrRunner);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"6\"))\n        .process(cloudClient, COLLECTION);\n    ChaosMonkey.start(solrRunner);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    // We skip peerSync, so replica will always trigger commit on leader\n    checkShardConsistency(4, 20);\n\n    // LTR can be kicked off, so waiting for replicas recovery\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"7\"))\n        .commit(cloudClient, COLLECTION);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    checkShardConsistency(5, 20);\n\n    // More Replica recovery testing\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"8\"))\n        .process(cloudClient, COLLECTION);\n    checkRTG(3,8, cluster.getJettySolrRunners());\n    DirectUpdateHandler2.commitOnClose = false;\n    ChaosMonkey.stop(solrRunner);\n    DirectUpdateHandler2.commitOnClose = true;\n    ChaosMonkey.start(solrRunner);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    checkRTG(3,8, cluster.getJettySolrRunners());\n    checkShardConsistency(6, 20);\n\n    // Test replica recovery apply buffer updates\n    Semaphore waitingForBufferUpdates = new Semaphore(0);\n    Semaphore waitingForReplay = new Semaphore(0);\n    RecoveryStrategy.testing_beforeReplayBufferingUpdates = () -> {\n      try {\n        waitingForReplay.release();\n        waitingForBufferUpdates.acquire();\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n    };\n    ChaosMonkey.stop(solrRunner);\n    ChaosMonkey.start(solrRunner);\n    waitingForReplay.acquire();\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"9\"))\n        .add(sdoc(\"id\", \"10\"))\n        .process(cloudClient, COLLECTION);\n    waitingForBufferUpdates.release();\n    RecoveryStrategy.testing_beforeReplayBufferingUpdates = null;\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    checkRTG(3,10, cluster.getJettySolrRunners());\n    checkShardConsistency(6, 20);\n    for (SolrCore solrCore : getSolrCore(false)) {\n      RefCounted<IndexWriter> iwRef = solrCore.getUpdateHandler().getSolrCoreState().getIndexWriter(null);\n      assertFalse(\"IndexWriter at replicas must not see updates \", iwRef.get().hasUncommittedChanges());\n      iwRef.decref();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f996f8177b9204bdc92f7164460c6cefad9ac99a","date":1489482690,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#recoveryTest().mjava","pathOld":"/dev/null","sourceNew":"  public void recoveryTest() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .commit(cloudClient, COLLECTION);\n    // Replica recovery\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"5\"))\n        .process(cloudClient, COLLECTION);\n    JettySolrRunner solrRunner = getSolrRunner(false).get(0);\n    ChaosMonkey.stop(solrRunner);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"6\"))\n        .process(cloudClient, COLLECTION);\n    ChaosMonkey.start(solrRunner);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    // We skip peerSync, so replica will always trigger commit on leader\n    checkShardConsistency(4, 20);\n\n    // LTR can be kicked off, so waiting for replicas recovery\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"7\"))\n        .commit(cloudClient, COLLECTION);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    checkShardConsistency(5, 20);\n\n    // More Replica recovery testing\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"8\"))\n        .process(cloudClient, COLLECTION);\n    checkRTG(3,8, cluster.getJettySolrRunners());\n    DirectUpdateHandler2.commitOnClose = false;\n    ChaosMonkey.stop(solrRunner);\n    DirectUpdateHandler2.commitOnClose = true;\n    ChaosMonkey.start(solrRunner);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    checkRTG(3,8, cluster.getJettySolrRunners());\n    checkShardConsistency(6, 20);\n\n    // Test replica recovery apply buffer updates\n    Semaphore waitingForBufferUpdates = new Semaphore(0);\n    Semaphore waitingForReplay = new Semaphore(0);\n    RecoveryStrategy.testing_beforeReplayBufferingUpdates = () -> {\n      try {\n        waitingForReplay.release();\n        waitingForBufferUpdates.acquire();\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n    };\n    ChaosMonkey.stop(solrRunner);\n    ChaosMonkey.start(solrRunner);\n    waitingForReplay.acquire();\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"9\"))\n        .add(sdoc(\"id\", \"10\"))\n        .process(cloudClient, COLLECTION);\n    waitingForBufferUpdates.release();\n    RecoveryStrategy.testing_beforeReplayBufferingUpdates = null;\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    checkRTG(3,10, cluster.getJettySolrRunners());\n    checkShardConsistency(6, 20);\n    for (SolrCore solrCore : getSolrCore(false)) {\n      RefCounted<IndexWriter> iwRef = solrCore.getUpdateHandler().getSolrCoreState().getIndexWriter(null);\n      assertFalse(\"IndexWriter at replicas must not see updates \", iwRef.get().hasUncommittedChanges());\n      iwRef.decref();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#recoveryTest().mjava","pathOld":"/dev/null","sourceNew":"  public void recoveryTest() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .commit(cloudClient, COLLECTION);\n    // Replica recovery\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"5\"))\n        .process(cloudClient, COLLECTION);\n    JettySolrRunner solrRunner = getSolrRunner(false).get(0);\n    ChaosMonkey.stop(solrRunner);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"6\"))\n        .process(cloudClient, COLLECTION);\n    ChaosMonkey.start(solrRunner);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    // We skip peerSync, so replica will always trigger commit on leader\n    checkShardConsistency(4, 20);\n\n    // LTR can be kicked off, so waiting for replicas recovery\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"7\"))\n        .commit(cloudClient, COLLECTION);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    checkShardConsistency(5, 20);\n\n    // More Replica recovery testing\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"8\"))\n        .process(cloudClient, COLLECTION);\n    checkRTG(3,8, cluster.getJettySolrRunners());\n    DirectUpdateHandler2.commitOnClose = false;\n    ChaosMonkey.stop(solrRunner);\n    DirectUpdateHandler2.commitOnClose = true;\n    ChaosMonkey.start(solrRunner);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    checkRTG(3,8, cluster.getJettySolrRunners());\n    checkShardConsistency(6, 20);\n\n    // Test replica recovery apply buffer updates\n    Semaphore waitingForBufferUpdates = new Semaphore(0);\n    Semaphore waitingForReplay = new Semaphore(0);\n    RecoveryStrategy.testing_beforeReplayBufferingUpdates = () -> {\n      try {\n        waitingForReplay.release();\n        waitingForBufferUpdates.acquire();\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n    };\n    ChaosMonkey.stop(solrRunner);\n    ChaosMonkey.start(solrRunner);\n    waitingForReplay.acquire();\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"9\"))\n        .add(sdoc(\"id\", \"10\"))\n        .process(cloudClient, COLLECTION);\n    waitingForBufferUpdates.release();\n    RecoveryStrategy.testing_beforeReplayBufferingUpdates = null;\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    checkRTG(3,10, cluster.getJettySolrRunners());\n    checkShardConsistency(6, 20);\n    for (SolrCore solrCore : getSolrCore(false)) {\n      RefCounted<IndexWriter> iwRef = solrCore.getUpdateHandler().getSolrCoreState().getIndexWriter(null);\n      assertFalse(\"IndexWriter at replicas must not see updates \", iwRef.get().hasUncommittedChanges());\n      iwRef.decref();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testRecovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#recoveryTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testRecovery() throws Exception {\n    boolean useKill = random().nextBoolean();\n    createAndWaitForCollection(1, 0, 2, 0);\n    \n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .commit(cloudClient, collectionName);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"5\"))\n        .process(cloudClient, collectionName);\n    JettySolrRunner solrRunner = getSolrRunner(false).get(0);\n    if (useKill) { \n      ChaosMonkey.kill(solrRunner);\n    } else {\n      ChaosMonkey.stop(solrRunner);\n    }\n    waitForState(\"Replica still up\", collectionName, activeReplicaCount(0,1,0));\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"6\"))\n        .process(cloudClient, collectionName);\n    ChaosMonkey.start(solrRunner);\n    waitForState(\"Replica didn't recover\", collectionName, activeReplicaCount(0,2,0));\n    // We skip peerSync, so replica will always trigger commit on leader\n    // We query only the non-leader replicas, since we haven't opened a new searcher on the leader yet\n    waitForNumDocsInAllReplicas(4, getNonLeaderReplias(collectionName), 0);// Should be immediate\n    \n    // If I add the doc immediately, the leader fails to communicate with the follower with broken pipe.\n    // Options are, wait or retry...\n    for (int i = 0; i < 3; i++) {\n      UpdateRequest ureq = new UpdateRequest().add(sdoc(\"id\", \"7\"));\n      ureq.setParam(\"collection\", collectionName);\n      ureq.setParam(UpdateRequest.MIN_REPFACT, \"2\");\n      NamedList<Object> response = cloudClient.request(ureq);\n      if ((Integer)((NamedList<Object>)response.get(\"responseHeader\")).get(UpdateRequest.REPFACT) >= 2) {\n        break;\n      }\n      LOG.info(\"Min RF not achieved yet. retrying\");\n    }\n    checkRTG(3,7, cluster.getJettySolrRunners());\n    DirectUpdateHandler2.commitOnClose = false;\n    ChaosMonkey.stop(solrRunner);\n    waitForState(\"Replica still up\", collectionName, activeReplicaCount(0,1,0));\n    DirectUpdateHandler2.commitOnClose = true;\n    ChaosMonkey.start(solrRunner);\n    waitForState(\"Replica didn't recover\", collectionName, activeReplicaCount(0,2,0));\n    checkRTG(3,7, cluster.getJettySolrRunners());\n    waitForNumDocsInAllReplicas(5, getNonLeaderReplias(collectionName), 0);// Should be immediate\n    cluster.getSolrClient().commit(collectionName);\n\n    // Test replica recovery apply buffer updates\n    Semaphore waitingForBufferUpdates = new Semaphore(0);\n    Semaphore waitingForReplay = new Semaphore(0);\n    RecoveryStrategy.testing_beforeReplayBufferingUpdates = () -> {\n      try {\n        waitingForReplay.release();\n        waitingForBufferUpdates.acquire();\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n        fail(\"Test interrupted: \" + e.getMessage());\n      }\n    };\n    if (useKill) { \n      ChaosMonkey.kill(solrRunner);\n    } else {\n      ChaosMonkey.stop(solrRunner);\n    }\n    ChaosMonkey.start(solrRunner);\n    waitingForReplay.acquire();\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"8\"))\n        .add(sdoc(\"id\", \"9\"))\n        .process(cloudClient, collectionName);\n    waitingForBufferUpdates.release();\n    RecoveryStrategy.testing_beforeReplayBufferingUpdates = null;\n    waitForState(\"Replica didn't recover\", collectionName, activeReplicaCount(0,2,0));\n    checkRTG(3,9, cluster.getJettySolrRunners());\n    for (SolrCore solrCore : getSolrCore(false)) {\n      RefCounted<IndexWriter> iwRef = solrCore.getUpdateHandler().getSolrCoreState().getIndexWriter(null);\n      assertFalse(\"IndexWriter at replicas must not see updates \", iwRef.get().hasUncommittedChanges());\n      iwRef.decref();\n    }\n  }\n\n","sourceOld":"  public void recoveryTest() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .commit(cloudClient, COLLECTION);\n    // Replica recovery\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"5\"))\n        .process(cloudClient, COLLECTION);\n    JettySolrRunner solrRunner = getSolrRunner(false).get(0);\n    ChaosMonkey.stop(solrRunner);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"6\"))\n        .process(cloudClient, COLLECTION);\n    ChaosMonkey.start(solrRunner);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    // We skip peerSync, so replica will always trigger commit on leader\n    checkShardConsistency(4, 20);\n\n    // LTR can be kicked off, so waiting for replicas recovery\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"7\"))\n        .commit(cloudClient, COLLECTION);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    checkShardConsistency(5, 20);\n\n    // More Replica recovery testing\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"8\"))\n        .process(cloudClient, COLLECTION);\n    checkRTG(3,8, cluster.getJettySolrRunners());\n    DirectUpdateHandler2.commitOnClose = false;\n    ChaosMonkey.stop(solrRunner);\n    DirectUpdateHandler2.commitOnClose = true;\n    ChaosMonkey.start(solrRunner);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    checkRTG(3,8, cluster.getJettySolrRunners());\n    checkShardConsistency(6, 20);\n\n    // Test replica recovery apply buffer updates\n    Semaphore waitingForBufferUpdates = new Semaphore(0);\n    Semaphore waitingForReplay = new Semaphore(0);\n    RecoveryStrategy.testing_beforeReplayBufferingUpdates = () -> {\n      try {\n        waitingForReplay.release();\n        waitingForBufferUpdates.acquire();\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n    };\n    ChaosMonkey.stop(solrRunner);\n    ChaosMonkey.start(solrRunner);\n    waitingForReplay.acquire();\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"9\"))\n        .add(sdoc(\"id\", \"10\"))\n        .process(cloudClient, COLLECTION);\n    waitingForBufferUpdates.release();\n    RecoveryStrategy.testing_beforeReplayBufferingUpdates = null;\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    checkRTG(3,10, cluster.getJettySolrRunners());\n    checkShardConsistency(6, 20);\n    for (SolrCore solrCore : getSolrCore(false)) {\n      RefCounted<IndexWriter> iwRef = solrCore.getUpdateHandler().getSolrCoreState().getIndexWriter(null);\n      assertFalse(\"IndexWriter at replicas must not see updates \", iwRef.get().hasUncommittedChanges());\n      iwRef.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":["04ecf884544ff74add5faa452748f160c4af904b","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#recoveryTest().mjava","sourceNew":null,"sourceOld":"  public void recoveryTest() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .commit(cloudClient, COLLECTION);\n    // Replica recovery\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"5\"))\n        .process(cloudClient, COLLECTION);\n    JettySolrRunner solrRunner = getSolrRunner(false).get(0);\n    ChaosMonkey.stop(solrRunner);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"6\"))\n        .process(cloudClient, COLLECTION);\n    ChaosMonkey.start(solrRunner);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    // We skip peerSync, so replica will always trigger commit on leader\n    checkShardConsistency(4, 20);\n\n    // LTR can be kicked off, so waiting for replicas recovery\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"7\"))\n        .commit(cloudClient, COLLECTION);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    checkShardConsistency(5, 20);\n\n    // More Replica recovery testing\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"8\"))\n        .process(cloudClient, COLLECTION);\n    checkRTG(3,8, cluster.getJettySolrRunners());\n    DirectUpdateHandler2.commitOnClose = false;\n    ChaosMonkey.stop(solrRunner);\n    DirectUpdateHandler2.commitOnClose = true;\n    ChaosMonkey.start(solrRunner);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    checkRTG(3,8, cluster.getJettySolrRunners());\n    checkShardConsistency(6, 20);\n\n    // Test replica recovery apply buffer updates\n    Semaphore waitingForBufferUpdates = new Semaphore(0);\n    Semaphore waitingForReplay = new Semaphore(0);\n    RecoveryStrategy.testing_beforeReplayBufferingUpdates = () -> {\n      try {\n        waitingForReplay.release();\n        waitingForBufferUpdates.acquire();\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n    };\n    ChaosMonkey.stop(solrRunner);\n    ChaosMonkey.start(solrRunner);\n    waitingForReplay.acquire();\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"9\"))\n        .add(sdoc(\"id\", \"10\"))\n        .process(cloudClient, COLLECTION);\n    waitingForBufferUpdates.release();\n    RecoveryStrategy.testing_beforeReplayBufferingUpdates = null;\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    checkRTG(3,10, cluster.getJettySolrRunners());\n    checkShardConsistency(6, 20);\n    for (SolrCore solrCore : getSolrCore(false)) {\n      RefCounted<IndexWriter> iwRef = solrCore.getUpdateHandler().getSolrCoreState().getIndexWriter(null);\n      assertFalse(\"IndexWriter at replicas must not see updates \", iwRef.get().hasUncommittedChanges());\n      iwRef.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["ab68488225b6a6c357dda72ed11dedca9914a192","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["be320990bdc77e643388fa801e75017f19289c42"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be320990bdc77e643388fa801e75017f19289c42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab68488225b6a6c357dda72ed11dedca9914a192":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61c45e99cf6676da48f19d7511c73712ad39402b"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f996f8177b9204bdc92f7164460c6cefad9ac99a","be320990bdc77e643388fa801e75017f19289c42","ab68488225b6a6c357dda72ed11dedca9914a192"],"ab68488225b6a6c357dda72ed11dedca9914a192":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"be320990bdc77e643388fa801e75017f19289c42":["61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}