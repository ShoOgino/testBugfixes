{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#advance(int).mjava","commits":[{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n\n      // nocommit 2 is heuristic guess!!\n      // nocommit put cheating back!  does it help?\n      // nocommit use skipper!!!  it has next last doc id!!\n      //if (docFreq > blockSize && target - (blockSize - docBufferUpto) - 2*blockSize > accum) {\n      if (docFreq > blockSize && target - accum > blockSize) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockPackedSkipReader((IndexInput) docIn.clone(),\n                                        BlockPackedPostingsWriter.maxSkipLevels,\n                                        blockSize,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target); \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n\n          assert newDocUpto % blockSize == (blockSize-1): \"got \" + newDocUpto;\n          docUpto = newDocUpto+1;\n\n          // Force block read next:\n          docBufferUpto = blockSize;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n        }\n      }\n\n      // Now scan:\n      while (nextDoc() != NO_MORE_DOCS) {\n        if (doc >= target) {\n          if (DEBUG) {\n            System.out.println(\"  advance return doc=\" + doc);\n          }\n          return doc;\n        }\n      }\n\n      if (DEBUG) {\n        System.out.println(\"  advance return doc=END\");\n      }\n\n      return NO_MORE_DOCS;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n\n      // nocommit use skipper!!!  it has next last doc id!!\n\n      if (docFreq > BLOCK_SIZE && target - accum > BLOCK_SIZE) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockPackedSkipReader((IndexInput) docIn.clone(),\n                                        BlockPackedPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target); \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n          assert newDocUpto % BLOCK_SIZE == (BLOCK_SIZE - 1): \"got \" + newDocUpto;\n          docUpto = newDocUpto+1;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        // nocommit: in theory we should not hit this?  ie\n        // skipper should already have moved us to the block\n        // containing the doc?  yet assert false trips ... i\n        // think because if you advance w/o having done a\n        // nextDoc yet()... can we assert/remove this?\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        if (DEBUG) {\n          System.out.println(\"  return doc=\" + accum);\n        }\n        freq = (int) freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"  now do nextDoc()\");\n        }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n\n      // nocommit 2 is heuristic guess!!\n      // nocommit put cheating back!  does it help?\n      // nocommit use skipper!!!  it has next last doc id!!\n      //if (docFreq > blockSize && target - (blockSize - docBufferUpto) - 2*blockSize > accum) {\n      if (docFreq > blockSize && target - accum > blockSize) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockPackedSkipReader((IndexInput) docIn.clone(),\n                                        BlockPackedPostingsWriter.maxSkipLevels,\n                                        blockSize,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target); \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n\n          assert newDocUpto % blockSize == (blockSize-1): \"got \" + newDocUpto;\n          docUpto = newDocUpto+1;\n\n          // Force block read next:\n          docBufferUpto = blockSize;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n        }\n      }\n\n      // Now scan:\n      while (nextDoc() != NO_MORE_DOCS) {\n        if (doc >= target) {\n          if (DEBUG) {\n            System.out.println(\"  advance return doc=\" + doc);\n          }\n          return doc;\n        }\n      }\n\n      if (DEBUG) {\n        System.out.println(\"  advance return doc=END\");\n      }\n\n      return NO_MORE_DOCS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97b1b5806a1f8e249985ae7c486ef449726fd236","date":1344446896,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n      if (DEBUG) {\n        System.out.println(\"  FPR.advance target=\" + target);\n      }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockPackedSkipReader((IndexInput) docIn.clone(),\n                                        BlockPackedPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target); \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n          assert newDocUpto % BLOCK_SIZE == (BLOCK_SIZE - 1): \"got \" + newDocUpto;\n          docUpto = newDocUpto+1;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        // nocommit: in theory we should not hit this?  ie\n        // skipper should already have moved us to the block\n        // containing the doc?  yet assert false trips ... i\n        // think because if you advance w/o having done a\n        // nextDoc yet()... can we assert/remove this?\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        if (DEBUG) {\n          System.out.println(\"  return doc=\" + accum);\n        }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"  now do nextDoc()\");\n        }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n\n      // nocommit use skipper!!!  it has next last doc id!!\n\n      if (docFreq > BLOCK_SIZE && target - accum > BLOCK_SIZE) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockPackedSkipReader((IndexInput) docIn.clone(),\n                                        BlockPackedPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target); \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n          assert newDocUpto % BLOCK_SIZE == (BLOCK_SIZE - 1): \"got \" + newDocUpto;\n          docUpto = newDocUpto+1;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        // nocommit: in theory we should not hit this?  ie\n        // skipper should already have moved us to the block\n        // containing the doc?  yet assert false trips ... i\n        // think because if you advance w/o having done a\n        // nextDoc yet()... can we assert/remove this?\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        if (DEBUG) {\n          System.out.println(\"  return doc=\" + accum);\n        }\n        freq = (int) freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"  now do nextDoc()\");\n        }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51996d1f0f4ccfbb7a0cbfe84bf6d3227b2b3c75","date":1344503769,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n      if (DEBUG) {\n        System.out.println(\"  FPR.advance target=\" + target);\n      }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockPackedSkipReader((IndexInput) docIn.clone(),\n                                        BlockPackedPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        if (DEBUG) {\n          System.out.println(\"  return doc=\" + accum);\n        }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"  now do nextDoc()\");\n        }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n      if (DEBUG) {\n        System.out.println(\"  FPR.advance target=\" + target);\n      }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockPackedSkipReader((IndexInput) docIn.clone(),\n                                        BlockPackedPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target); \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n          assert newDocUpto % BLOCK_SIZE == (BLOCK_SIZE - 1): \"got \" + newDocUpto;\n          docUpto = newDocUpto+1;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        // nocommit: in theory we should not hit this?  ie\n        // skipper should already have moved us to the block\n        // containing the doc?  yet assert false trips ... i\n        // think because if you advance w/o having done a\n        // nextDoc yet()... can we assert/remove this?\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        if (DEBUG) {\n          System.out.println(\"  return doc=\" + accum);\n        }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"  now do nextDoc()\");\n        }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n      if (DEBUG) {\n        System.out.println(\"  FPR.advance target=\" + target);\n      }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockPackedSkipReader((IndexInput) docIn.clone(),\n                                        BlockPackedPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        if (DEBUG) {\n          System.out.println(\"  return doc=\" + accum);\n        }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"  now do nextDoc()\");\n        }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"97b1b5806a1f8e249985ae7c486ef449726fd236":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"51996d1f0f4ccfbb7a0cbfe84bf6d3227b2b3c75":["97b1b5806a1f8e249985ae7c486ef449726fd236"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["51996d1f0f4ccfbb7a0cbfe84bf6d3227b2b3c75"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["97b1b5806a1f8e249985ae7c486ef449726fd236"],"97b1b5806a1f8e249985ae7c486ef449726fd236":["51996d1f0f4ccfbb7a0cbfe84bf6d3227b2b3c75"],"51996d1f0f4ccfbb7a0cbfe84bf6d3227b2b3c75":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}