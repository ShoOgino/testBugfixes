{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#persist(Map[String,Object]).mjava","commits":[{"id":"b4804614e0358954d5d9f51128fcf3cd79e6e25b","date":1352831451,"type":1,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#persist(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#persist(Properties).mjava","sourceNew":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    OutputStream propOutput = null;    \n    Properties existingProps = mapToProperties(readIndexerProperties());    \n    Properties newProps = mapToProperties(propObjs);\n    try {\n      existingProps.putAll(newProps);\n      String filePath = configDir;\n      if (configDir != null && !configDir.endsWith(File.separator)) {\n        filePath += File.separator;\n      }\n      filePath += filename;\n      propOutput = new FileOutputStream(filePath);\n      existingProps.store(propOutput, null);\n      log.info(\"Wrote last indexed time to \" + filename);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          \"Unable to persist Index Start Time\", e);\n    } finally {\n      try {\n        if (propOutput != null) propOutput.close();\n      } catch (IOException e) {\n        propOutput = null;\n      }\n    }\n  }\n\n","sourceOld":"    @Override\n  public void persist(Properties p) {\n    OutputStream propOutput = null;\n\n    Properties props = readIndexerProperties();\n\n    try {\n      props.putAll(p);\n      String filePath = configDir;\n      if (configDir != null && !configDir.endsWith(File.separator))\n        filePath += File.separator;\n      filePath += persistFilename;\n      propOutput = new FileOutputStream(filePath);\n      props.store(propOutput, null);\n      log.info(\"Wrote last indexed time to \" + persistFilename);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Unable to persist Index Start Time\", e);\n    } finally {\n      try {\n        if (propOutput != null)\n          propOutput.close();\n      } catch (IOException e) {\n        propOutput = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#persist(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    OutputStream propOutput = null;    \n    Properties existingProps = mapToProperties(readIndexerProperties());    \n    Properties newProps = mapToProperties(propObjs);\n    try {\n      existingProps.putAll(newProps);\n      String filePath = configDir;\n      if (configDir != null && !configDir.endsWith(File.separator)) {\n        filePath += File.separator;\n      }\n      filePath += filename;\n      propOutput = new FileOutputStream(filePath);\n      existingProps.store(propOutput, null);\n      log.info(\"Wrote last indexed time to \" + filename);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          \"Unable to persist Index Start Time\", e);\n    } finally {\n      try {\n        if (propOutput != null) propOutput.close();\n      } catch (IOException e) {\n        propOutput = null;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fd8fc50365ae7bb9c0d47256bc40182559b70d1","date":1373649022,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#persist(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#persist(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Writer propOutput = null;    \n    Properties existingProps = mapToProperties(readIndexerProperties());    \n    Properties newProps = mapToProperties(propObjs);\n    try {\n      existingProps.putAll(newProps);\n      String filePath = configDir;\n      if (configDir != null && !configDir.endsWith(File.separator)) {\n        filePath += File.separator;\n      }\n      filePath += filename;\n      propOutput = new OutputStreamWriter(new FileOutputStream(filePath), IOUtils.CHARSET_UTF_8);\n      existingProps.store(propOutput, null);\n      log.info(\"Wrote last indexed time to \" + filename);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          \"Unable to persist Index Start Time\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(propOutput);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    OutputStream propOutput = null;    \n    Properties existingProps = mapToProperties(readIndexerProperties());    \n    Properties newProps = mapToProperties(propObjs);\n    try {\n      existingProps.putAll(newProps);\n      String filePath = configDir;\n      if (configDir != null && !configDir.endsWith(File.separator)) {\n        filePath += File.separator;\n      }\n      filePath += filename;\n      propOutput = new FileOutputStream(filePath);\n      existingProps.store(propOutput, null);\n      log.info(\"Wrote last indexed time to \" + filename);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          \"Unable to persist Index Start Time\", e);\n    } finally {\n      try {\n        if (propOutput != null) propOutput.close();\n      } catch (IOException e) {\n        propOutput = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#persist(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#persist(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Writer propOutput = null;    \n    Properties existingProps = mapToProperties(readIndexerProperties());    \n    Properties newProps = mapToProperties(propObjs);\n    try {\n      existingProps.putAll(newProps);\n      String filePath = configDir;\n      if (configDir != null && !configDir.endsWith(File.separator)) {\n        filePath += File.separator;\n      }\n      filePath += filename;\n      propOutput = new OutputStreamWriter(new FileOutputStream(filePath), IOUtils.CHARSET_UTF_8);\n      existingProps.store(propOutput, null);\n      log.info(\"Wrote last indexed time to \" + filename);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          \"Unable to persist Index Start Time\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(propOutput);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    OutputStream propOutput = null;    \n    Properties existingProps = mapToProperties(readIndexerProperties());    \n    Properties newProps = mapToProperties(propObjs);\n    try {\n      existingProps.putAll(newProps);\n      String filePath = configDir;\n      if (configDir != null && !configDir.endsWith(File.separator)) {\n        filePath += File.separator;\n      }\n      filePath += filename;\n      propOutput = new FileOutputStream(filePath);\n      existingProps.store(propOutput, null);\n      log.info(\"Wrote last indexed time to \" + filename);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          \"Unable to persist Index Start Time\", e);\n    } finally {\n      try {\n        if (propOutput != null) propOutput.close();\n      } catch (IOException e) {\n        propOutput = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#persist(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#persist(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Writer propOutput = null;    \n    Properties existingProps = mapToProperties(readIndexerProperties());    \n    Properties newProps = mapToProperties(propObjs);\n    try {\n      existingProps.putAll(newProps);\n      String filePath = configDir;\n      if (configDir != null && !configDir.endsWith(File.separator)) {\n        filePath += File.separator;\n      }\n      filePath += filename;\n      propOutput = new OutputStreamWriter(new FileOutputStream(filePath), StandardCharsets.UTF_8);\n      existingProps.store(propOutput, null);\n      log.info(\"Wrote last indexed time to \" + filename);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          \"Unable to persist Index Start Time\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(propOutput);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Writer propOutput = null;    \n    Properties existingProps = mapToProperties(readIndexerProperties());    \n    Properties newProps = mapToProperties(propObjs);\n    try {\n      existingProps.putAll(newProps);\n      String filePath = configDir;\n      if (configDir != null && !configDir.endsWith(File.separator)) {\n        filePath += File.separator;\n      }\n      filePath += filename;\n      propOutput = new OutputStreamWriter(new FileOutputStream(filePath), IOUtils.CHARSET_UTF_8);\n      existingProps.store(propOutput, null);\n      log.info(\"Wrote last indexed time to \" + filename);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          \"Unable to persist Index Start Time\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(propOutput);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#persist(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#persist(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Writer propOutput = null;    \n    Properties existingProps = mapToProperties(readIndexerProperties());    \n    Properties newProps = mapToProperties(propObjs);\n    try {\n      existingProps.putAll(newProps);\n      String filePath = configDir;\n      if (configDir != null && !configDir.endsWith(File.separator)) {\n        filePath += File.separator;\n      }\n      filePath += filename;\n      propOutput = new OutputStreamWriter(new FileOutputStream(filePath), StandardCharsets.UTF_8);\n      existingProps.store(propOutput, null);\n      log.info(\"Wrote last indexed time to \" + filename);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          \"Unable to persist Index Start Time\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(propOutput);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Writer propOutput = null;    \n    Properties existingProps = mapToProperties(readIndexerProperties());    \n    Properties newProps = mapToProperties(propObjs);\n    try {\n      existingProps.putAll(newProps);\n      String filePath = configDir;\n      if (configDir != null && !configDir.endsWith(File.separator)) {\n        filePath += File.separator;\n      }\n      filePath += filename;\n      propOutput = new OutputStreamWriter(new FileOutputStream(filePath), IOUtils.CHARSET_UTF_8);\n      existingProps.store(propOutput, null);\n      log.info(\"Wrote last indexed time to \" + filename);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          \"Unable to persist Index Start Time\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(propOutput);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19","date":1400739326,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#persist(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#persist(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Writer propOutput = null;    \n    Properties existingProps = mapToProperties(readIndexerProperties());    \n    Properties newProps = mapToProperties(propObjs);\n    try {\n      existingProps.putAll(newProps);\n      propOutput = new OutputStreamWriter(new FileOutputStream(getPersistFile()), StandardCharsets.UTF_8);\n      existingProps.store(propOutput, null);\n      log.info(\"Wrote last indexed time to \" + filename);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          \"Unable to persist Index Start Time\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(propOutput);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Writer propOutput = null;    \n    Properties existingProps = mapToProperties(readIndexerProperties());    \n    Properties newProps = mapToProperties(propObjs);\n    try {\n      existingProps.putAll(newProps);\n      String filePath = configDir;\n      if (configDir != null && !configDir.endsWith(File.separator)) {\n        filePath += File.separator;\n      }\n      filePath += filename;\n      propOutput = new OutputStreamWriter(new FileOutputStream(filePath), StandardCharsets.UTF_8);\n      existingProps.store(propOutput, null);\n      log.info(\"Wrote last indexed time to \" + filename);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          \"Unable to persist Index Start Time\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(propOutput);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#persist(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#persist(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Writer propOutput = null;    \n    Properties existingProps = mapToProperties(readIndexerProperties());    \n    Properties newProps = mapToProperties(propObjs);\n    try {\n      existingProps.putAll(newProps);\n      propOutput = new OutputStreamWriter(new FileOutputStream(getPersistFile()), StandardCharsets.UTF_8);\n      existingProps.store(propOutput, null);\n      log.info(\"Wrote last indexed time to \" + filename);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          \"Unable to persist Index Start Time\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(propOutput);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Writer propOutput = null;    \n    Properties existingProps = mapToProperties(readIndexerProperties());    \n    Properties newProps = mapToProperties(propObjs);\n    try {\n      existingProps.putAll(newProps);\n      String filePath = configDir;\n      if (configDir != null && !configDir.endsWith(File.separator)) {\n        filePath += File.separator;\n      }\n      filePath += filename;\n      propOutput = new OutputStreamWriter(new FileOutputStream(filePath), StandardCharsets.UTF_8);\n      existingProps.store(propOutput, null);\n      log.info(\"Wrote last indexed time to \" + filename);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          \"Unable to persist Index Start Time\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(propOutput);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#persist(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#persist(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Writer propOutput = null;    \n    Properties existingProps = mapToProperties(readIndexerProperties());    \n    Properties newProps = mapToProperties(propObjs);\n    try {\n      existingProps.putAll(newProps);\n      propOutput = new OutputStreamWriter(new FileOutputStream(getPersistFile()), StandardCharsets.UTF_8);\n      existingProps.store(propOutput, null);\n      log.info(\"Wrote last indexed time to {}\", filename);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          \"Unable to persist Index Start Time\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(propOutput);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Writer propOutput = null;    \n    Properties existingProps = mapToProperties(readIndexerProperties());    \n    Properties newProps = mapToProperties(propObjs);\n    try {\n      existingProps.putAll(newProps);\n      propOutput = new OutputStreamWriter(new FileOutputStream(getPersistFile()), StandardCharsets.UTF_8);\n      existingProps.store(propOutput, null);\n      log.info(\"Wrote last indexed time to \" + filename);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          \"Unable to persist Index Start Time\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(propOutput);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#persist(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Writer propOutput = null;    \n    Properties existingProps = mapToProperties(readIndexerProperties());    \n    Properties newProps = mapToProperties(propObjs);\n    try {\n      existingProps.putAll(newProps);\n      propOutput = new OutputStreamWriter(new FileOutputStream(getPersistFile()), StandardCharsets.UTF_8);\n      existingProps.store(propOutput, null);\n      log.info(\"Wrote last indexed time to {}\", filename);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          \"Unable to persist Index Start Time\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(propOutput);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["1fd8fc50365ae7bb9c0d47256bc40182559b70d1","7d89d7e4e5101347833eea558851bf4209218619"],"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b4804614e0358954d5d9f51128fcf3cd79e6e25b","1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"b7605579001505896d48b07160075a5c8b8e128e":["7d89d7e4e5101347833eea558851bf4209218619","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"7d89d7e4e5101347833eea558851bf4209218619":["1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"1fd8fc50365ae7bb9c0d47256bc40182559b70d1":["b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["7d89d7e4e5101347833eea558851bf4209218619"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["37a0f60745e53927c4c876cfe5b5a58170f0646c","407687e67faf6e1f02a211ca078d8e3eed631027","1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4804614e0358954d5d9f51128fcf3cd79e6e25b","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"b7605579001505896d48b07160075a5c8b8e128e":[],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","b7605579001505896d48b07160075a5c8b8e128e","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"1fd8fc50365ae7bb9c0d47256bc40182559b70d1":["5eb2511ababf862ea11e10761c70ee560cd84510","37a0f60745e53927c4c876cfe5b5a58170f0646c","7d89d7e4e5101347833eea558851bf4209218619"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["b7605579001505896d48b07160075a5c8b8e128e","a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","37a0f60745e53927c4c876cfe5b5a58170f0646c","407687e67faf6e1f02a211ca078d8e3eed631027","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}