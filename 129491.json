{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles2().mjava","commits":[{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnusedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // otherwise the delete of old commit might not actually succeed temporarily.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles2().mjava","sourceNew":"  public void testDeleteUnusedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // otherwise the delete of old commit might not actually succeed temporarily.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles2().mjava","sourceNew":"  public void testDeleteUnusedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // otherwise the delete of old commit might not actually succeed temporarily.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles2().mjava","sourceNew":"  public void testDeleteUnusedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // otherwise the delete of old commit might not actually succeed temporarily.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles2().mjava","sourceNew":"  public void testDeleteUnusedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // otherwise the delete of old commit might not actually succeed temporarily.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe39f1a106531207c028defebbc9eb5bb489ac50","date":1592513789,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles2().mjava","sourceNew":"  public void testDeleteUnusedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1182fe36fb5df768dc2da53f6d5338cbc07268ae","date":1592861749,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles2().mjava","sourceNew":"  public void testDeleteUnusedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2a23476693f2bd9a4b44cc3187c429a2e21dac2","date":1593289545,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles2().mjava","sourceNew":"  public void testDeleteUnusedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["1182fe36fb5df768dc2da53f6d5338cbc07268ae"],"5a207d19eac354d649c3f0e2cce070017c78125e":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"1182fe36fb5df768dc2da53f6d5338cbc07268ae":["fe39f1a106531207c028defebbc9eb5bb489ac50"],"fe39f1a106531207c028defebbc9eb5bb489ac50":["5a207d19eac354d649c3f0e2cce070017c78125e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"]},"commit2Childs":{"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a207d19eac354d649c3f0e2cce070017c78125e":["fe39f1a106531207c028defebbc9eb5bb489ac50"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"1182fe36fb5df768dc2da53f6d5338cbc07268ae":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"],"fe39f1a106531207c028defebbc9eb5bb489ac50":["1182fe36fb5df768dc2da53f6d5338cbc07268ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}