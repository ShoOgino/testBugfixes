{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/Points#reportSumByPrefixRound(String).mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/Points#reportSumByPrefixRound(String).mjava","pathOld":"/dev/null","sourceNew":"  public Report reportSumByPrefixRound(String prefix) {\r\n    // aggregate by task name and by round\r\n    int reported = 0;\r\n    LinkedHashMap p2 = new LinkedHashMap();\r\n    for (Iterator it = points.iterator(); it.hasNext();) {\r\n      TaskStats stat1 = (TaskStats) it.next();\r\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\r\n        reported++;\r\n        String name = stat1.getTask().getName();\r\n        String rname = stat1.getRound()+\".\"+name; // group by round\r\n        TaskStats stat2 = (TaskStats) p2.get(rname);\r\n        if (stat2 == null) {\r\n          try {\r\n            stat2 = (TaskStats) stat1.clone();\r\n          } catch (CloneNotSupportedException e) {\r\n            throw new RuntimeException(e);\r\n          }\r\n          p2.put(rname,stat2);\r\n        } else {\r\n          stat2.add(stat1);\r\n        }\r\n      }\r\n    }\r\n    // now generate report from secondary list p2    \r\n    return genReportFromList(reported, p2);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0","date":1174485154,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefRoundTask#reportSumByPrefixRound(List).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/Points#reportSumByPrefixRound(String).mjava","sourceNew":"  protected Report reportSumByPrefixRound(List taskStats) {\n    // aggregate by task name and by round\n    int reported = 0;\n    LinkedHashMap p2 = new LinkedHashMap();\n    for (Iterator it = taskStats.iterator(); it.hasNext();) {\n      TaskStats stat1 = (TaskStats) it.next();\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        String name = stat1.getTask().getName();\n        String rname = stat1.getRound()+\".\"+name; // group by round\n        TaskStats stat2 = (TaskStats) p2.get(rname);\n        if (stat2 == null) {\n          try {\n            stat2 = (TaskStats) stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(rname,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","sourceOld":"  public Report reportSumByPrefixRound(String prefix) {\r\n    // aggregate by task name and by round\r\n    int reported = 0;\r\n    LinkedHashMap p2 = new LinkedHashMap();\r\n    for (Iterator it = points.iterator(); it.hasNext();) {\r\n      TaskStats stat1 = (TaskStats) it.next();\r\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\r\n        reported++;\r\n        String name = stat1.getTask().getName();\r\n        String rname = stat1.getRound()+\".\"+name; // group by round\r\n        TaskStats stat2 = (TaskStats) p2.get(rname);\r\n        if (stat2 == null) {\r\n          try {\r\n            stat2 = (TaskStats) stat1.clone();\r\n          } catch (CloneNotSupportedException e) {\r\n            throw new RuntimeException(e);\r\n          }\r\n          p2.put(rname,stat2);\r\n        } else {\r\n          stat2.add(stat1);\r\n        }\r\n      }\r\n    }\r\n    // now generate report from secondary list p2    \r\n    return genReportFromList(reported, p2);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0"]},"commit2Childs":{"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}