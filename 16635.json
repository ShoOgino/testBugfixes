{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilter#LengthFilter(Version,TokenStream,int,int).mjava","commits":[{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilter#LengthFilter(Version,TokenStream,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new {@link LengthFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link CharTermAttribute#length()}\n   * &lt; min) or too long ({@link CharTermAttribute#length()} &gt; max).\n   * @param version the Lucene match version\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public LengthFilter(Version version, TokenStream in, int min, int max) {\n    super(version, in);\n    this.min = min;\n    this.max = max;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43acd3a99a12a5bec9c72097de0e294c80cb6daa","date":1396327381,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilter#LengthFilter(Version,TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilter#LengthFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Create a new {@link LengthFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link CharTermAttribute#length()}\n   * &lt; min) or too long ({@link CharTermAttribute#length()} &gt; max).\n   * @param version the Lucene match version\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public LengthFilter(Version version, TokenStream in, int min, int max) {\n    super(version, in);\n    if (min < 0) {\n      throw new IllegalArgumentException(\"minimum length must be greater than or equal to zero\");\n    }\n    if (min > max) {\n      throw new IllegalArgumentException(\"maximum length must not be greater than minimum length\");\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link LengthFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link CharTermAttribute#length()}\n   * &lt; min) or too long ({@link CharTermAttribute#length()} &gt; max).\n   * @param version the Lucene match version\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public LengthFilter(Version version, TokenStream in, int min, int max) {\n    super(version, in);\n    this.min = min;\n    this.max = max;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilter#LengthFilter(Version,TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilter#LengthFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Create a new {@link LengthFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link CharTermAttribute#length()}\n   * &lt; min) or too long ({@link CharTermAttribute#length()} &gt; max).\n   * @param version the Lucene match version\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public LengthFilter(Version version, TokenStream in, int min, int max) {\n    super(version, in);\n    if (min < 0) {\n      throw new IllegalArgumentException(\"minimum length must be greater than or equal to zero\");\n    }\n    if (min > max) {\n      throw new IllegalArgumentException(\"maximum length must not be greater than minimum length\");\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link LengthFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link CharTermAttribute#length()}\n   * &lt; min) or too long ({@link CharTermAttribute#length()} &gt; max).\n   * @param version the Lucene match version\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public LengthFilter(Version version, TokenStream in, int min, int max) {\n    super(version, in);\n    this.min = min;\n    this.max = max;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilter#LengthFilter(TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilter#LengthFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Create a new {@link LengthFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link CharTermAttribute#length()}\n   * &lt; min) or too long ({@link CharTermAttribute#length()} &gt; max).\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public LengthFilter(TokenStream in, int min, int max) {\n    super(in);\n    if (min < 0) {\n      throw new IllegalArgumentException(\"minimum length must be greater than or equal to zero\");\n    }\n    if (min > max) {\n      throw new IllegalArgumentException(\"maximum length must not be greater than minimum length\");\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link LengthFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link CharTermAttribute#length()}\n   * &lt; min) or too long ({@link CharTermAttribute#length()} &gt; max).\n   * @param version the Lucene match version\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public LengthFilter(Version version, TokenStream in, int min, int max) {\n    super(version, in);\n    if (min < 0) {\n      throw new IllegalArgumentException(\"minimum length must be greater than or equal to zero\");\n    }\n    if (min > max) {\n      throw new IllegalArgumentException(\"maximum length must not be greater than minimum length\");\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilter#LengthFilter(Version,TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilter#LengthFilter(TokenStream,int,int).mjava","sourceNew":"  /**\n   * Create a new {@link LengthFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link CharTermAttribute#length()}\n   * &lt; min) or too long ({@link CharTermAttribute#length()} &gt; max).\n   * @param version the Lucene match version\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public LengthFilter(Version version, TokenStream in, int min, int max) {\n    super(version, in);\n    if (min < 0) {\n      throw new IllegalArgumentException(\"minimum length must be greater than or equal to zero\");\n    }\n    if (min > max) {\n      throw new IllegalArgumentException(\"maximum length must not be greater than minimum length\");\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link LengthFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link CharTermAttribute#length()}\n   * &lt; min) or too long ({@link CharTermAttribute#length()} &gt; max).\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public LengthFilter(TokenStream in, int min, int max) {\n    super(in);\n    if (min < 0) {\n      throw new IllegalArgumentException(\"minimum length must be greater than or equal to zero\");\n    }\n    if (min > max) {\n      throw new IllegalArgumentException(\"maximum length must not be greater than minimum length\");\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilter#LengthFilter(TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilter#LengthFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Create a new {@link LengthFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link CharTermAttribute#length()}\n   * &lt; min) or too long ({@link CharTermAttribute#length()} &gt; max).\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public LengthFilter(TokenStream in, int min, int max) {\n    super(in);\n    if (min < 0) {\n      throw new IllegalArgumentException(\"minimum length must be greater than or equal to zero\");\n    }\n    if (min > max) {\n      throw new IllegalArgumentException(\"maximum length must not be greater than minimum length\");\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link LengthFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link CharTermAttribute#length()}\n   * &lt; min) or too long ({@link CharTermAttribute#length()} &gt; max).\n   * @param version the Lucene match version\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public LengthFilter(Version version, TokenStream in, int min, int max) {\n    super(version, in);\n    if (min < 0) {\n      throw new IllegalArgumentException(\"minimum length must be greater than or equal to zero\");\n    }\n    if (min > max) {\n      throw new IllegalArgumentException(\"maximum length must not be greater than minimum length\");\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["eafa8c5eabc3dacd34680054e6a33bda024080ac","43acd3a99a12a5bec9c72097de0e294c80cb6daa"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["43acd3a99a12a5bec9c72097de0e294c80cb6daa"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"43acd3a99a12a5bec9c72097de0e294c80cb6daa":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["5eb2511ababf862ea11e10761c70ee560cd84510","43acd3a99a12a5bec9c72097de0e294c80cb6daa"],"43acd3a99a12a5bec9c72097de0e294c80cb6daa":["5eb2511ababf862ea11e10761c70ee560cd84510","ff4227bb146f97aabae888091c19e48c88dbb0db"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}