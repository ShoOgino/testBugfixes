{"path":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#getLeafCollector(AtomicReaderContext).mjava","commits":[{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#getLeafCollector(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n    this.docBase = context.docBase;\n    if (Long.MIN_VALUE == t0) {\n      setBaseline();\n    }\n    return new FilterLeafCollector(collector.getLeafCollector(context)) {\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        final long time = clock.get();\n        if (timeout < time) {\n          if (greedy) {\n            //System.out.println(this+\"  greedy: before failing, collecting doc: \"+(docBase + doc)+\"  \"+(time-t0));\n            in.collect(doc);\n          }\n          //System.out.println(this+\"  failing on:  \"+(docBase + doc)+\"  \"+(time-t0));\n          throw new TimeExceededException( timeout-t0, time-t0, docBase + doc );\n        }\n        //System.out.println(this+\"  collecting: \"+(docBase + doc)+\"  \"+(time-t0));\n        in.collect(doc);\n      }\n      \n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#getLeafCollector(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n    this.docBase = context.docBase;\n    if (Long.MIN_VALUE == t0) {\n      setBaseline();\n    }\n    return new FilterLeafCollector(collector.getLeafCollector(context)) {\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        final long time = clock.get();\n        if (timeout < time) {\n          if (greedy) {\n            //System.out.println(this+\"  greedy: before failing, collecting doc: \"+(docBase + doc)+\"  \"+(time-t0));\n            in.collect(doc);\n          }\n          //System.out.println(this+\"  failing on:  \"+(docBase + doc)+\"  \"+(time-t0));\n          throw new TimeExceededException( timeout-t0, time-t0, docBase + doc );\n        }\n        //System.out.println(this+\"  collecting: \"+(docBase + doc)+\"  \"+(time-t0));\n        in.collect(doc);\n      }\n      \n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#getLeafCollector(AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n    this.docBase = context.docBase;\n    if (Long.MIN_VALUE == t0) {\n      setBaseline();\n    }\n    return new FilterLeafCollector(collector.getLeafCollector(context)) {\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        final long time = clock.get();\n        if (timeout < time) {\n          if (greedy) {\n            //System.out.println(this+\"  greedy: before failing, collecting doc: \"+(docBase + doc)+\"  \"+(time-t0));\n            in.collect(doc);\n          }\n          //System.out.println(this+\"  failing on:  \"+(docBase + doc)+\"  \"+(time-t0));\n          throw new TimeExceededException( timeout-t0, time-t0, docBase + doc );\n        }\n        //System.out.println(this+\"  collecting: \"+(docBase + doc)+\"  \"+(time-t0));\n        in.collect(doc);\n      }\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}