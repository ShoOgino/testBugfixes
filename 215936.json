{"path":"src/java/org/apache/lucene/search/FuzzyTermEnum#FuzzyTermEnum(IndexReader,Term,float,int).mjava","commits":[{"id":"b51d06e615dc831227c94b4b16cdd5763692d2d4","date":1095169515,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyTermEnum#FuzzyTermEnum(IndexReader,Term,float,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public FuzzyTermEnum(IndexReader reader, Term term, float minSimilarity, int prefixLength) throws IOException {\n        super();\n        minimumSimilarity = minSimilarity;\n        scale_factor = 1.0f / (1.0f - minimumSimilarity);\n        searchTerm = term;\n        field = searchTerm.field();\n        text = searchTerm.text();\n        textlen = text.length();\n        if(prefixLength > 0 && prefixLength < textlen){\n            this.prefixLength = prefixLength;\n            prefix = text.substring(0, prefixLength);\n            text = text.substring(prefixLength);\n            textlen = text.length();\n        }\n        setEnum(reader.terms(new Term(searchTerm.field(), prefix)));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2b17f10a0d622e1a8082a94957764dad150530","date":1097079592,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyTermEnum#FuzzyTermEnum(IndexReader,Term,float,int).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyTermEnum#FuzzyTermEnum(IndexReader,Term,float,int).mjava","sourceNew":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public FuzzyTermEnum(IndexReader reader, Term term, float minSimilarity, int prefixLength) throws IOException {\n        super();\n        \n        if (minimumSimilarity >= 1.0f)\n          throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n        else if (minimumSimilarity < 0.0f)\n          throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n        \n        minimumSimilarity = minSimilarity;\n        scale_factor = 1.0f / (1.0f - minimumSimilarity);\n        searchTerm = term;\n        field = searchTerm.field();\n        text = searchTerm.text();\n        textlen = text.length();\n        \n        if(prefixLength < 0)\n          throw new IllegalArgumentException(\"prefixLength < 0\");\n        \n        if(prefixLength > textlen)\n          prefixLength = textlen;\n        \n        this.prefixLength = prefixLength;\n        prefix = text.substring(0, prefixLength);\n        text = text.substring(prefixLength);\n        textlen = text.length();\n        \n        setEnum(reader.terms(new Term(searchTerm.field(), prefix)));\n    }\n\n","sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public FuzzyTermEnum(IndexReader reader, Term term, float minSimilarity, int prefixLength) throws IOException {\n        super();\n        minimumSimilarity = minSimilarity;\n        scale_factor = 1.0f / (1.0f - minimumSimilarity);\n        searchTerm = term;\n        field = searchTerm.field();\n        text = searchTerm.text();\n        textlen = text.length();\n        if(prefixLength > 0 && prefixLength < textlen){\n            this.prefixLength = prefixLength;\n            prefix = text.substring(0, prefixLength);\n            text = text.substring(prefixLength);\n            textlen = text.length();\n        }\n        setEnum(reader.terms(new Term(searchTerm.field(), prefix)));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3af9908203648fa4313aca6c4913cb4864014bb","date":1099870044,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyTermEnum#FuzzyTermEnum(IndexReader,Term,float,int).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyTermEnum#FuzzyTermEnum(IndexReader,Term,float,int).mjava","sourceNew":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public FuzzyTermEnum(IndexReader reader, Term term, final float minSimilarity, final int prefixLength) throws IOException {\n        super();\n        \n        if (minSimilarity >= 1.0f)\n          throw new IllegalArgumentException(\"minimumSimilarity cannot be greater than or equal to 1\");\n        else if (minSimilarity < 0.0f)\n          throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n        if(prefixLength < 0)\n          throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n\n        this.minimumSimilarity = minSimilarity;\n        this.scale_factor = 1.0f / (1.0f - minimumSimilarity);\n        this.searchTerm = term;\n        this.field = searchTerm.field();\n\n        //The prefix could be longer than the word.\n        //It's kind of silly though.  It means we must match the entire word.\n        final int fullSearchTermLength = searchTerm.text().length();\n        final int realPrefixLength = prefixLength > fullSearchTermLength ? fullSearchTermLength : prefixLength;\n\n        this.text = searchTerm.text().substring(realPrefixLength);\n        this.prefix = searchTerm.text().substring(0, realPrefixLength);\n\n        initializeMaxDistances();\n        this.d = initDistanceArray();\n\n        setEnum(reader.terms(new Term(searchTerm.field(), prefix)));\n    }\n\n","sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public FuzzyTermEnum(IndexReader reader, Term term, float minSimilarity, int prefixLength) throws IOException {\n        super();\n        \n        if (minimumSimilarity >= 1.0f)\n          throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n        else if (minimumSimilarity < 0.0f)\n          throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n        \n        minimumSimilarity = minSimilarity;\n        scale_factor = 1.0f / (1.0f - minimumSimilarity);\n        searchTerm = term;\n        field = searchTerm.field();\n        text = searchTerm.text();\n        textlen = text.length();\n        \n        if(prefixLength < 0)\n          throw new IllegalArgumentException(\"prefixLength < 0\");\n        \n        if(prefixLength > textlen)\n          prefixLength = textlen;\n        \n        this.prefixLength = prefixLength;\n        prefix = text.substring(0, prefixLength);\n        text = text.substring(prefixLength);\n        textlen = text.length();\n        \n        setEnum(reader.terms(new Term(searchTerm.field(), prefix)));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49a070f32444fce25dc4bd4cd63d856282e1498e","date":1099870910,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyTermEnum#FuzzyTermEnum(IndexReader,Term,float,int).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyTermEnum#FuzzyTermEnum(IndexReader,Term,float,int).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermEnum(IndexReader reader, Term term, final float minSimilarity, final int prefixLength) throws IOException {\n    super();\n    \n    if (minSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be greater than or equal to 1\");\n    else if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n\n    this.minimumSimilarity = minSimilarity;\n    this.scale_factor = 1.0f / (1.0f - minimumSimilarity);\n    this.searchTerm = term;\n    this.field = searchTerm.field();\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    final int fullSearchTermLength = searchTerm.text().length();\n    final int realPrefixLength = prefixLength > fullSearchTermLength ? fullSearchTermLength : prefixLength;\n\n    this.text = searchTerm.text().substring(realPrefixLength);\n    this.prefix = searchTerm.text().substring(0, realPrefixLength);\n\n    initializeMaxDistances();\n    this.d = initDistanceArray();\n\n    setEnum(reader.terms(new Term(searchTerm.field(), prefix)));\n  }\n\n","sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public FuzzyTermEnum(IndexReader reader, Term term, final float minSimilarity, final int prefixLength) throws IOException {\n        super();\n        \n        if (minSimilarity >= 1.0f)\n          throw new IllegalArgumentException(\"minimumSimilarity cannot be greater than or equal to 1\");\n        else if (minSimilarity < 0.0f)\n          throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n        if(prefixLength < 0)\n          throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n\n        this.minimumSimilarity = minSimilarity;\n        this.scale_factor = 1.0f / (1.0f - minimumSimilarity);\n        this.searchTerm = term;\n        this.field = searchTerm.field();\n\n        //The prefix could be longer than the word.\n        //It's kind of silly though.  It means we must match the entire word.\n        final int fullSearchTermLength = searchTerm.text().length();\n        final int realPrefixLength = prefixLength > fullSearchTermLength ? fullSearchTermLength : prefixLength;\n\n        this.text = searchTerm.text().substring(realPrefixLength);\n        this.prefix = searchTerm.text().substring(0, realPrefixLength);\n\n        initializeMaxDistances();\n        this.d = initDistanceArray();\n\n        setEnum(reader.terms(new Term(searchTerm.field(), prefix)));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b24692af739249f4a81d97bececd979938b963f","date":1101237744,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyTermEnum#FuzzyTermEnum(IndexReader,Term,float,int).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyTermEnum#FuzzyTermEnum(IndexReader,Term,float,int).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermEnum(IndexReader reader, Term term, final float minSimilarity, final int prefixLength) throws IOException {\n    super();\n    \n    if (minSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be greater than or equal to 1\");\n    else if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n\n    this.minimumSimilarity = minSimilarity;\n    this.scale_factor = 1.0f / (1.0f - minimumSimilarity);\n    this.searchTerm = term;\n    this.field = searchTerm.field();\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    final int fullSearchTermLength = searchTerm.text().length();\n    final int realPrefixLength = prefixLength > fullSearchTermLength ? fullSearchTermLength : prefixLength;\n\n    this.text = searchTerm.text().substring(realPrefixLength);\n    this.prefix = searchTerm.text().substring(0, realPrefixLength);\n\n    initializeMaxDistances();\n    this.d = initDistanceArray();\n\n    setEnum(reader.terms(new Term(searchTerm.field(), prefix)));\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermEnum(IndexReader reader, Term term, final float minSimilarity, final int prefixLength) throws IOException {\n    super();\n    \n    if (minSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be greater than or equal to 1\");\n    else if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n\n    this.minimumSimilarity = minSimilarity;\n    this.scale_factor = 1.0f / (1.0f - minimumSimilarity);\n    this.searchTerm = term;\n    this.field = searchTerm.field();\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    final int fullSearchTermLength = searchTerm.text().length();\n    final int realPrefixLength = prefixLength > fullSearchTermLength ? fullSearchTermLength : prefixLength;\n\n    this.text = searchTerm.text().substring(realPrefixLength);\n    this.prefix = searchTerm.text().substring(0, realPrefixLength);\n\n    initializeMaxDistances();\n    this.d = initDistanceArray();\n\n    setEnum(reader.terms(new Term(searchTerm.field(), prefix)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea62f19ad1b43de1b0fc5b86e9ec196e5e504092","date":1256073772,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyTermEnum#FuzzyTermEnum(IndexReader,Term,float,int).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyTermEnum#FuzzyTermEnum(IndexReader,Term,float,int).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermEnum(IndexReader reader, Term term, final float minSimilarity, final int prefixLength) throws IOException {\n    super();\n    \n    if (minSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be greater than or equal to 1\");\n    else if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n\n    this.minimumSimilarity = minSimilarity;\n    this.scale_factor = 1.0f / (1.0f - minimumSimilarity);\n    this.searchTerm = term;\n    this.field = searchTerm.field();\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    final int fullSearchTermLength = searchTerm.text().length();\n    final int realPrefixLength = prefixLength > fullSearchTermLength ? fullSearchTermLength : prefixLength;\n\n    this.text = searchTerm.text().substring(realPrefixLength);\n    this.prefix = searchTerm.text().substring(0, realPrefixLength);\n\n    this.p = new int[this.text.length()+1];\n    this.d = new int[this.text.length()+1];\n\n    setEnum(reader.terms(new Term(searchTerm.field(), prefix)));\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermEnum(IndexReader reader, Term term, final float minSimilarity, final int prefixLength) throws IOException {\n    super();\n    \n    if (minSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be greater than or equal to 1\");\n    else if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n\n    this.minimumSimilarity = minSimilarity;\n    this.scale_factor = 1.0f / (1.0f - minimumSimilarity);\n    this.searchTerm = term;\n    this.field = searchTerm.field();\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    final int fullSearchTermLength = searchTerm.text().length();\n    final int realPrefixLength = prefixLength > fullSearchTermLength ? fullSearchTermLength : prefixLength;\n\n    this.text = searchTerm.text().substring(realPrefixLength);\n    this.prefix = searchTerm.text().substring(0, realPrefixLength);\n\n    initializeMaxDistances();\n    this.d = initDistanceArray();\n\n    setEnum(reader.terms(new Term(searchTerm.field(), prefix)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermEnum#FuzzyTermEnum(IndexReader,Term,float,int).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyTermEnum#FuzzyTermEnum(IndexReader,Term,float,int).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermEnum(IndexReader reader, Term term, final float minSimilarity, final int prefixLength) throws IOException {\n    super();\n    \n    if (minSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be greater than or equal to 1\");\n    else if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n\n    this.minimumSimilarity = minSimilarity;\n    this.scale_factor = 1.0f / (1.0f - minimumSimilarity);\n    this.searchTerm = term;\n    this.field = searchTerm.field();\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    final int fullSearchTermLength = searchTerm.text().length();\n    final int realPrefixLength = prefixLength > fullSearchTermLength ? fullSearchTermLength : prefixLength;\n\n    this.text = searchTerm.text().substring(realPrefixLength);\n    this.prefix = searchTerm.text().substring(0, realPrefixLength);\n\n    this.p = new int[this.text.length()+1];\n    this.d = new int[this.text.length()+1];\n\n    setEnum(reader.terms(new Term(searchTerm.field(), prefix)));\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermEnum(IndexReader reader, Term term, final float minSimilarity, final int prefixLength) throws IOException {\n    super();\n    \n    if (minSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be greater than or equal to 1\");\n    else if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n\n    this.minimumSimilarity = minSimilarity;\n    this.scale_factor = 1.0f / (1.0f - minimumSimilarity);\n    this.searchTerm = term;\n    this.field = searchTerm.field();\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    final int fullSearchTermLength = searchTerm.text().length();\n    final int realPrefixLength = prefixLength > fullSearchTermLength ? fullSearchTermLength : prefixLength;\n\n    this.text = searchTerm.text().substring(realPrefixLength);\n    this.prefix = searchTerm.text().substring(0, realPrefixLength);\n\n    this.p = new int[this.text.length()+1];\n    this.d = new int[this.text.length()+1];\n\n    setEnum(reader.terms(new Term(searchTerm.field(), prefix)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d2b17f10a0d622e1a8082a94957764dad150530":["b51d06e615dc831227c94b4b16cdd5763692d2d4"],"2b24692af739249f4a81d97bececd979938b963f":["49a070f32444fce25dc4bd4cd63d856282e1498e"],"ea62f19ad1b43de1b0fc5b86e9ec196e5e504092":["2b24692af739249f4a81d97bececd979938b963f"],"49a070f32444fce25dc4bd4cd63d856282e1498e":["b3af9908203648fa4313aca6c4913cb4864014bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b51d06e615dc831227c94b4b16cdd5763692d2d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3af9908203648fa4313aca6c4913cb4864014bb":["6d2b17f10a0d622e1a8082a94957764dad150530"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ea62f19ad1b43de1b0fc5b86e9ec196e5e504092"]},"commit2Childs":{"6d2b17f10a0d622e1a8082a94957764dad150530":["b3af9908203648fa4313aca6c4913cb4864014bb"],"2b24692af739249f4a81d97bececd979938b963f":["ea62f19ad1b43de1b0fc5b86e9ec196e5e504092"],"49a070f32444fce25dc4bd4cd63d856282e1498e":["2b24692af739249f4a81d97bececd979938b963f"],"ea62f19ad1b43de1b0fc5b86e9ec196e5e504092":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b51d06e615dc831227c94b4b16cdd5763692d2d4"],"b51d06e615dc831227c94b4b16cdd5763692d2d4":["6d2b17f10a0d622e1a8082a94957764dad150530"],"b3af9908203648fa4313aca6c4913cb4864014bb":["49a070f32444fce25dc4bd4cd63d856282e1498e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}