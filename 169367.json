{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","pathOld":"lucene/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","sourceNew":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n\n    TermFreqVector tfv = reader.getTermFreqVector( docId, fieldName );\n    if( tfv == null ) return; // just return to make null snippets\n    TermPositionVector tpv = null;\n    try{\n      tpv = (TermPositionVector)tfv;\n    }\n    catch( ClassCastException e ){\n      return; // just return to make null snippets\n    }\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n    \n    for( String term : tpv.getTerms() ){\n      if( !termSet.contains( term ) ) continue;\n      int index = tpv.indexOf( term );\n      TermVectorOffsetInfo[] tvois = tpv.getOffsets( index );\n      if( tvois == null ) return; // just return to make null snippets\n      int[] poss = tpv.getTermPositions( index );\n      if( poss == null ) return; // just return to make null snippets\n      for( int i = 0; i < tvois.length; i++ )\n        termList.add( new TermInfo( term, tvois[i].getStartOffset(), tvois[i].getEndOffset(), poss[i] ) );\n    }\n    \n    // sort by position\n    Collections.sort( termList );\n  }\n\n","sourceOld":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n\n    TermFreqVector tfv = reader.getTermFreqVector( docId, fieldName );\n    if( tfv == null ) return; // just return to make null snippets\n    TermPositionVector tpv = null;\n    try{\n      tpv = (TermPositionVector)tfv;\n    }\n    catch( ClassCastException e ){\n      return; // just return to make null snippets\n    }\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n    \n    for( String term : tpv.getTerms() ){\n      if( !termSet.contains( term ) ) continue;\n      int index = tpv.indexOf( term );\n      TermVectorOffsetInfo[] tvois = tpv.getOffsets( index );\n      if( tvois == null ) return; // just return to make null snippets\n      int[] poss = tpv.getTermPositions( index );\n      if( poss == null ) return; // just return to make null snippets\n      for( int i = 0; i < tvois.length; i++ )\n        termList.add( new TermInfo( term, tvois[i].getStartOffset(), tvois[i].getEndOffset(), poss[i] ) );\n    }\n    \n    // sort by position\n    Collections.sort( termList );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","sourceNew":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n\n    TermFreqVector tfv = reader.getTermFreqVector( docId, fieldName );\n    if( tfv == null ) return; // just return to make null snippets\n    TermPositionVector tpv = null;\n    try{\n      tpv = (TermPositionVector)tfv;\n    }\n    catch( ClassCastException e ){\n      return; // just return to make null snippets\n    }\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n    \n    for( BytesRef term : tpv.getTerms() ){\n      if( !termSet.contains( term.utf8ToString() ) ) continue;\n      int index = tpv.indexOf( term );\n      TermVectorOffsetInfo[] tvois = tpv.getOffsets( index );\n      if( tvois == null ) return; // just return to make null snippets\n      int[] poss = tpv.getTermPositions( index );\n      if( poss == null ) return; // just return to make null snippets\n      for( int i = 0; i < tvois.length; i++ )\n        termList.add( new TermInfo( term.utf8ToString(), tvois[i].getStartOffset(), tvois[i].getEndOffset(), poss[i] ) );\n    }\n    \n    // sort by position\n    Collections.sort( termList );\n  }\n\n","sourceOld":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n\n    TermFreqVector tfv = reader.getTermFreqVector( docId, fieldName );\n    if( tfv == null ) return; // just return to make null snippets\n    TermPositionVector tpv = null;\n    try{\n      tpv = (TermPositionVector)tfv;\n    }\n    catch( ClassCastException e ){\n      return; // just return to make null snippets\n    }\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n    \n    for( String term : tpv.getTerms() ){\n      if( !termSet.contains( term ) ) continue;\n      int index = tpv.indexOf( term );\n      TermVectorOffsetInfo[] tvois = tpv.getOffsets( index );\n      if( tvois == null ) return; // just return to make null snippets\n      int[] poss = tpv.getTermPositions( index );\n      if( poss == null ) return; // just return to make null snippets\n      for( int i = 0; i < tvois.length; i++ )\n        termList.add( new TermInfo( term, tvois[i].getStartOffset(), tvois[i].getEndOffset(), poss[i] ) );\n    }\n    \n    // sort by position\n    Collections.sort( termList );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","sourceNew":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n\n    TermFreqVector tfv = reader.getTermFreqVector( docId, fieldName );\n    if( tfv == null ) return; // just return to make null snippets\n    TermPositionVector tpv = null;\n    try{\n      tpv = (TermPositionVector)tfv;\n    }\n    catch( ClassCastException e ){\n      return; // just return to make null snippets\n    }\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n    \n    for( BytesRef term : tpv.getTerms() ){\n      if( !termSet.contains( term.utf8ToString() ) ) continue;\n      int index = tpv.indexOf( term );\n      TermVectorOffsetInfo[] tvois = tpv.getOffsets( index );\n      if( tvois == null ) return; // just return to make null snippets\n      int[] poss = tpv.getTermPositions( index );\n      if( poss == null ) return; // just return to make null snippets\n      for( int i = 0; i < tvois.length; i++ )\n        termList.add( new TermInfo( term.utf8ToString(), tvois[i].getStartOffset(), tvois[i].getEndOffset(), poss[i] ) );\n    }\n    \n    // sort by position\n    Collections.sort( termList );\n  }\n\n","sourceOld":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n\n    TermFreqVector tfv = reader.getTermFreqVector( docId, fieldName );\n    if( tfv == null ) return; // just return to make null snippets\n    TermPositionVector tpv = null;\n    try{\n      tpv = (TermPositionVector)tfv;\n    }\n    catch( ClassCastException e ){\n      return; // just return to make null snippets\n    }\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n    \n    for( String term : tpv.getTerms() ){\n      if( !termSet.contains( term ) ) continue;\n      int index = tpv.indexOf( term );\n      TermVectorOffsetInfo[] tvois = tpv.getOffsets( index );\n      if( tvois == null ) return; // just return to make null snippets\n      int[] poss = tpv.getTermPositions( index );\n      if( poss == null ) return; // just return to make null snippets\n      for( int i = 0; i < tvois.length; i++ )\n        termList.add( new TermInfo( term, tvois[i].getStartOffset(), tvois[i].getEndOffset(), poss[i] ) );\n    }\n    \n    // sort by position\n    Collections.sort( termList );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b3a24d5d9b47345473ff564f5cc127a7b526b4","date":1306277076,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","sourceNew":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n\n    TermFreqVector tfv = reader.getTermFreqVector( docId, fieldName );\n    if( tfv == null ) return; // just return to make null snippets\n    TermPositionVector tpv = null;\n    try{\n      tpv = (TermPositionVector)tfv;\n    }\n    catch( ClassCastException e ){\n      return; // just return to make null snippets\n    }\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n    final CharsRef spare = new CharsRef();\n    for( BytesRef term : tpv.getTerms() ){\n      if( !termSet.contains( term.utf8ToChars(spare).toString() ) ) continue;\n      int index = tpv.indexOf( term );\n      TermVectorOffsetInfo[] tvois = tpv.getOffsets( index );\n      if( tvois == null ) return; // just return to make null snippets\n      int[] poss = tpv.getTermPositions( index );\n      if( poss == null ) return; // just return to make null snippets\n      for( int i = 0; i < tvois.length; i++ )\n        termList.add( new TermInfo( term.utf8ToChars(spare).toString(), tvois[i].getStartOffset(), tvois[i].getEndOffset(), poss[i] ) );\n    }\n    \n    // sort by position\n    Collections.sort( termList );\n  }\n\n","sourceOld":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n\n    TermFreqVector tfv = reader.getTermFreqVector( docId, fieldName );\n    if( tfv == null ) return; // just return to make null snippets\n    TermPositionVector tpv = null;\n    try{\n      tpv = (TermPositionVector)tfv;\n    }\n    catch( ClassCastException e ){\n      return; // just return to make null snippets\n    }\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n    \n    for( BytesRef term : tpv.getTerms() ){\n      if( !termSet.contains( term.utf8ToString() ) ) continue;\n      int index = tpv.indexOf( term );\n      TermVectorOffsetInfo[] tvois = tpv.getOffsets( index );\n      if( tvois == null ) return; // just return to make null snippets\n      int[] poss = tpv.getTermPositions( index );\n      if( poss == null ) return; // just return to make null snippets\n      for( int i = 0; i < tvois.length; i++ )\n        termList.add( new TermInfo( term.utf8ToString(), tvois[i].getStartOffset(), tvois[i].getEndOffset(), poss[i] ) );\n    }\n    \n    // sort by position\n    Collections.sort( termList );\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","sourceNew":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n\n    TermFreqVector tfv = reader.getTermFreqVector( docId, fieldName );\n    if( tfv == null ) return; // just return to make null snippets\n    TermPositionVector tpv = null;\n    try{\n      tpv = (TermPositionVector)tfv;\n    }\n    catch( ClassCastException e ){\n      return; // just return to make null snippets\n    }\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n    final CharsRef spare = new CharsRef();\n    for( BytesRef term : tpv.getTerms() ){\n      if( !termSet.contains( term.utf8ToChars(spare).toString() ) ) continue;\n      int index = tpv.indexOf( term );\n      TermVectorOffsetInfo[] tvois = tpv.getOffsets( index );\n      if( tvois == null ) return; // just return to make null snippets\n      int[] poss = tpv.getTermPositions( index );\n      if( poss == null ) return; // just return to make null snippets\n      for( int i = 0; i < tvois.length; i++ )\n        termList.add( new TermInfo( term.utf8ToChars(spare).toString(), tvois[i].getStartOffset(), tvois[i].getEndOffset(), poss[i] ) );\n    }\n    \n    // sort by position\n    Collections.sort( termList );\n  }\n\n","sourceOld":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n\n    TermFreqVector tfv = reader.getTermFreqVector( docId, fieldName );\n    if( tfv == null ) return; // just return to make null snippets\n    TermPositionVector tpv = null;\n    try{\n      tpv = (TermPositionVector)tfv;\n    }\n    catch( ClassCastException e ){\n      return; // just return to make null snippets\n    }\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n    \n    for( BytesRef term : tpv.getTerms() ){\n      if( !termSet.contains( term.utf8ToString() ) ) continue;\n      int index = tpv.indexOf( term );\n      TermVectorOffsetInfo[] tvois = tpv.getOffsets( index );\n      if( tvois == null ) return; // just return to make null snippets\n      int[] poss = tpv.getTermPositions( index );\n      if( poss == null ) return; // just return to make null snippets\n      for( int i = 0; i < tvois.length; i++ )\n        termList.add( new TermInfo( term.utf8ToString(), tvois[i].getStartOffset(), tvois[i].getEndOffset(), poss[i] ) );\n    }\n    \n    // sort by position\n    Collections.sort( termList );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","sourceNew":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n\n    TermFreqVector tfv = reader.getTermFreqVector( docId, fieldName );\n    if( tfv == null ) return; // just return to make null snippets\n    TermPositionVector tpv = null;\n    try{\n      tpv = (TermPositionVector)tfv;\n    }\n    catch( ClassCastException e ){\n      return; // just return to make null snippets\n    }\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n    final CharsRef spare = new CharsRef();\n    for( BytesRef term : tpv.getTerms() ){\n      if( !termSet.contains( term.utf8ToChars(spare).toString() ) ) continue;\n      int index = tpv.indexOf( term );\n      TermVectorOffsetInfo[] tvois = tpv.getOffsets( index );\n      if( tvois == null ) return; // just return to make null snippets\n      int[] poss = tpv.getTermPositions( index );\n      if( poss == null ) return; // just return to make null snippets\n      for( int i = 0; i < tvois.length; i++ )\n        termList.add( new TermInfo( term.utf8ToChars(spare).toString(), tvois[i].getStartOffset(), tvois[i].getEndOffset(), poss[i] ) );\n    }\n    \n    // sort by position\n    Collections.sort( termList );\n  }\n\n","sourceOld":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n\n    TermFreqVector tfv = reader.getTermFreqVector( docId, fieldName );\n    if( tfv == null ) return; // just return to make null snippets\n    TermPositionVector tpv = null;\n    try{\n      tpv = (TermPositionVector)tfv;\n    }\n    catch( ClassCastException e ){\n      return; // just return to make null snippets\n    }\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n    \n    for( BytesRef term : tpv.getTerms() ){\n      if( !termSet.contains( term.utf8ToString() ) ) continue;\n      int index = tpv.indexOf( term );\n      TermVectorOffsetInfo[] tvois = tpv.getOffsets( index );\n      if( tvois == null ) return; // just return to make null snippets\n      int[] poss = tpv.getTermPositions( index );\n      if( poss == null ) return; // just return to make null snippets\n      for( int i = 0; i < tvois.length; i++ )\n        termList.add( new TermInfo( term.utf8ToString(), tvois[i].getStartOffset(), tvois[i].getEndOffset(), poss[i] ) );\n    }\n    \n    // sort by position\n    Collections.sort( termList );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","sourceNew":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n    \n    TermFreqVector tfv = reader.getTermFreqVector( docId, fieldName );\n    if( tfv == null ) return; // just return to make null snippets\n    TermPositionVector tpv = null;\n    try{\n      tpv = (TermPositionVector)tfv;\n    }\n    catch( ClassCastException e ){\n      return; // just return to make null snippets\n    }\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n    final CharsRef spare = new CharsRef();\n    for( BytesRef term : tpv.getTerms() ){\n      if( !termSet.contains( term.utf8ToChars(spare).toString() ) ) continue;\n      int index = tpv.indexOf( term );\n      TermVectorOffsetInfo[] tvois = tpv.getOffsets( index );\n      if( tvois == null ) return; // just return to make null snippets\n      int[] poss = tpv.getTermPositions( index );\n      if( poss == null ) return; // just return to make null snippets\n      for( int i = 0; i < tvois.length; i++ )\n        termList.add( new TermInfo( term.utf8ToChars(spare).toString(), tvois[i].getStartOffset(), tvois[i].getEndOffset(), poss[i] ) );\n    }\n    \n    // sort by position\n    Collections.sort( termList );\n  }\n\n","sourceOld":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n\n    TermFreqVector tfv = reader.getTermFreqVector( docId, fieldName );\n    if( tfv == null ) return; // just return to make null snippets\n    TermPositionVector tpv = null;\n    try{\n      tpv = (TermPositionVector)tfv;\n    }\n    catch( ClassCastException e ){\n      return; // just return to make null snippets\n    }\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n    final CharsRef spare = new CharsRef();\n    for( BytesRef term : tpv.getTerms() ){\n      if( !termSet.contains( term.utf8ToChars(spare).toString() ) ) continue;\n      int index = tpv.indexOf( term );\n      TermVectorOffsetInfo[] tvois = tpv.getOffsets( index );\n      if( tvois == null ) return; // just return to make null snippets\n      int[] poss = tpv.getTermPositions( index );\n      if( poss == null ) return; // just return to make null snippets\n      for( int i = 0; i < tvois.length; i++ )\n        termList.add( new TermInfo( term.utf8ToChars(spare).toString(), tvois[i].getStartOffset(), tvois[i].getEndOffset(), poss[i] ) );\n    }\n    \n    // sort by position\n    Collections.sort( termList );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b77dee084743b07be452cf7c07c992a225b11146","date":1315532213,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","sourceNew":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n\n    TermFreqVector tfv = reader.getTermFreqVector( docId, fieldName );\n    if( tfv == null ) return; // just return to make null snippets\n    TermPositionVector tpv = null;\n    try{\n      tpv = (TermPositionVector)tfv;\n    }\n    catch( ClassCastException e ){\n      return; // just return to make null snippets\n    }\n    \n    final CharsRef spare = new CharsRef();\n    for( BytesRef term : tpv.getTerms() ){\n      if( !termSet.contains( term.utf8ToChars(spare).toString() ) ) continue;\n      int index = tpv.indexOf( term );\n      TermVectorOffsetInfo[] tvois = tpv.getOffsets( index );\n      if( tvois == null ) return; // just return to make null snippets\n      int[] poss = tpv.getTermPositions( index );\n      if( poss == null ) return; // just return to make null snippets\n      for( int i = 0; i < tvois.length; i++ )\n        termList.add( new TermInfo( term.utf8ToChars(spare).toString(), tvois[i].getStartOffset(), tvois[i].getEndOffset(), poss[i] ) );\n    }\n    \n    // sort by position\n    Collections.sort( termList );\n  }\n\n","sourceOld":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n    \n    TermFreqVector tfv = reader.getTermFreqVector( docId, fieldName );\n    if( tfv == null ) return; // just return to make null snippets\n    TermPositionVector tpv = null;\n    try{\n      tpv = (TermPositionVector)tfv;\n    }\n    catch( ClassCastException e ){\n      return; // just return to make null snippets\n    }\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n    final CharsRef spare = new CharsRef();\n    for( BytesRef term : tpv.getTerms() ){\n      if( !termSet.contains( term.utf8ToChars(spare).toString() ) ) continue;\n      int index = tpv.indexOf( term );\n      TermVectorOffsetInfo[] tvois = tpv.getOffsets( index );\n      if( tvois == null ) return; // just return to make null snippets\n      int[] poss = tpv.getTermPositions( index );\n      if( poss == null ) return; // just return to make null snippets\n      for( int i = 0; i < tvois.length; i++ )\n        termList.add( new TermInfo( term.utf8ToChars(spare).toString(), tvois[i].getStartOffset(), tvois[i].getEndOffset(), poss[i] ) );\n    }\n    \n    // sort by position\n    Collections.sort( termList );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","sourceNew":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n\n    final Fields vectors = reader.getTermVectors(docId);\n    if (vectors == null) {\n      // null snippet\n      return;\n    }\n\n    final Terms vector = vectors.terms(fieldName);\n    if (vector == null) {\n      // null snippet\n      return;\n    }\n\n    final CharsRef spare = new CharsRef();\n    final TermsEnum termsEnum = vector.iterator(null);\n    DocsAndPositionsEnum dpEnum = null;\n    BytesRef text;\n    while ((text = termsEnum.next()) != null) {\n      final String term = text.utf8ToChars(spare).toString();\n      if (!termSet.contains(term)) {\n        continue;\n      }\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      if (dpEnum == null) {\n        // null snippet\n        return;\n      }\n\n      if (!dpEnum.attributes().hasAttribute(OffsetAttribute.class)) {\n        // null snippet\n        return;\n      }\n      dpEnum.nextDoc();\n\n      final OffsetAttribute offsetAtt = dpEnum.attributes().getAttribute(OffsetAttribute.class);\n\n      final int freq = dpEnum.freq();\n      \n      for(int i = 0;i < freq;i++) {\n        final int pos = dpEnum.nextPosition();\n        if (pos == -1) {\n          // null snippet\n          return;\n        }\n        termList.add(new TermInfo(term, offsetAtt.startOffset(), offsetAtt.endOffset(), pos));\n      }\n    }\n    \n    // sort by position\n    Collections.sort(termList);\n  }\n\n","sourceOld":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n\n    TermFreqVector tfv = reader.getTermFreqVector( docId, fieldName );\n    if( tfv == null ) return; // just return to make null snippets\n    TermPositionVector tpv = null;\n    try{\n      tpv = (TermPositionVector)tfv;\n    }\n    catch( ClassCastException e ){\n      return; // just return to make null snippets\n    }\n    \n    final CharsRef spare = new CharsRef();\n    for( BytesRef term : tpv.getTerms() ){\n      if( !termSet.contains( term.utf8ToChars(spare).toString() ) ) continue;\n      int index = tpv.indexOf( term );\n      TermVectorOffsetInfo[] tvois = tpv.getOffsets( index );\n      if( tvois == null ) return; // just return to make null snippets\n      int[] poss = tpv.getTermPositions( index );\n      if( poss == null ) return; // just return to make null snippets\n      for( int i = 0; i < tvois.length; i++ )\n        termList.add( new TermInfo( term.utf8ToChars(spare).toString(), tvois[i].getStartOffset(), tvois[i].getEndOffset(), poss[i] ) );\n    }\n    \n    // sort by position\n    Collections.sort( termList );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0","date":1322229341,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","sourceNew":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n\n    final Fields vectors = reader.getTermVectors(docId);\n    if (vectors == null) {\n      // null snippet\n      return;\n    }\n\n    final Terms vector = vectors.terms(fieldName);\n    if (vector == null) {\n      // null snippet\n      return;\n    }\n\n    final CharsRef spare = new CharsRef();\n    final TermsEnum termsEnum = vector.iterator(null);\n    DocsAndPositionsEnum dpEnum = null;\n    BytesRef text;\n    while ((text = termsEnum.next()) != null) {\n      UnicodeUtil.UTF8toUTF16(text, spare);\n      final String term = spare.toString();\n      if (!termSet.contains(term)) {\n        continue;\n      }\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      if (dpEnum == null) {\n        // null snippet\n        return;\n      }\n\n      if (!dpEnum.attributes().hasAttribute(OffsetAttribute.class)) {\n        // null snippet\n        return;\n      }\n      dpEnum.nextDoc();\n\n      final OffsetAttribute offsetAtt = dpEnum.attributes().getAttribute(OffsetAttribute.class);\n\n      final int freq = dpEnum.freq();\n      \n      for(int i = 0;i < freq;i++) {\n        final int pos = dpEnum.nextPosition();\n        if (pos == -1) {\n          // null snippet\n          return;\n        }\n        termList.add(new TermInfo(term, offsetAtt.startOffset(), offsetAtt.endOffset(), pos));\n      }\n    }\n    \n    // sort by position\n    Collections.sort(termList);\n  }\n\n","sourceOld":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n\n    final Fields vectors = reader.getTermVectors(docId);\n    if (vectors == null) {\n      // null snippet\n      return;\n    }\n\n    final Terms vector = vectors.terms(fieldName);\n    if (vector == null) {\n      // null snippet\n      return;\n    }\n\n    final CharsRef spare = new CharsRef();\n    final TermsEnum termsEnum = vector.iterator(null);\n    DocsAndPositionsEnum dpEnum = null;\n    BytesRef text;\n    while ((text = termsEnum.next()) != null) {\n      final String term = text.utf8ToChars(spare).toString();\n      if (!termSet.contains(term)) {\n        continue;\n      }\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      if (dpEnum == null) {\n        // null snippet\n        return;\n      }\n\n      if (!dpEnum.attributes().hasAttribute(OffsetAttribute.class)) {\n        // null snippet\n        return;\n      }\n      dpEnum.nextDoc();\n\n      final OffsetAttribute offsetAtt = dpEnum.attributes().getAttribute(OffsetAttribute.class);\n\n      final int freq = dpEnum.freq();\n      \n      for(int i = 0;i < freq;i++) {\n        final int pos = dpEnum.nextPosition();\n        if (pos == -1) {\n          // null snippet\n          return;\n        }\n        termList.add(new TermInfo(term, offsetAtt.startOffset(), offsetAtt.endOffset(), pos));\n      }\n    }\n    \n    // sort by position\n    Collections.sort(termList);\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","sourceNew":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n\n    final Fields vectors = reader.getTermVectors(docId);\n    if (vectors == null) {\n      // null snippet\n      return;\n    }\n\n    final Terms vector = vectors.terms(fieldName);\n    if (vector == null) {\n      // null snippet\n      return;\n    }\n\n    final CharsRef spare = new CharsRef();\n    final TermsEnum termsEnum = vector.iterator(null);\n    DocsAndPositionsEnum dpEnum = null;\n    BytesRef text;\n    while ((text = termsEnum.next()) != null) {\n      UnicodeUtil.UTF8toUTF16(text, spare);\n      final String term = spare.toString();\n      if (!termSet.contains(term)) {\n        continue;\n      }\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n      if (dpEnum == null) {\n        // null snippet\n        return;\n      }\n\n      dpEnum.nextDoc();\n\n      final int freq = dpEnum.freq();\n      \n      for(int i = 0;i < freq;i++) {\n        int pos = dpEnum.nextPosition();\n        termList.add(new TermInfo(term, dpEnum.startOffset(), dpEnum.endOffset(), pos));\n      }\n    }\n    \n    // sort by position\n    Collections.sort(termList);\n  }\n\n","sourceOld":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n\n    final Fields vectors = reader.getTermVectors(docId);\n    if (vectors == null) {\n      // null snippet\n      return;\n    }\n\n    final Terms vector = vectors.terms(fieldName);\n    if (vector == null) {\n      // null snippet\n      return;\n    }\n\n    final CharsRef spare = new CharsRef();\n    final TermsEnum termsEnum = vector.iterator(null);\n    DocsAndPositionsEnum dpEnum = null;\n    BytesRef text;\n    while ((text = termsEnum.next()) != null) {\n      UnicodeUtil.UTF8toUTF16(text, spare);\n      final String term = spare.toString();\n      if (!termSet.contains(term)) {\n        continue;\n      }\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      if (dpEnum == null) {\n        // null snippet\n        return;\n      }\n\n      if (!dpEnum.attributes().hasAttribute(OffsetAttribute.class)) {\n        // null snippet\n        return;\n      }\n      dpEnum.nextDoc();\n\n      final OffsetAttribute offsetAtt = dpEnum.attributes().getAttribute(OffsetAttribute.class);\n\n      final int freq = dpEnum.freq();\n      \n      for(int i = 0;i < freq;i++) {\n        final int pos = dpEnum.nextPosition();\n        if (pos == -1) {\n          // null snippet\n          return;\n        }\n        termList.add(new TermInfo(term, offsetAtt.startOffset(), offsetAtt.endOffset(), pos));\n      }\n    }\n    \n    // sort by position\n    Collections.sort(termList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","sourceNew":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n\n    final InvertedFields vectors = reader.getTermVectors(docId);\n    if (vectors == null) {\n      // null snippet\n      return;\n    }\n\n    final Terms vector = vectors.terms(fieldName);\n    if (vector == null) {\n      // null snippet\n      return;\n    }\n\n    final CharsRef spare = new CharsRef();\n    final TermsEnum termsEnum = vector.iterator(null);\n    DocsAndPositionsEnum dpEnum = null;\n    BytesRef text;\n    while ((text = termsEnum.next()) != null) {\n      UnicodeUtil.UTF8toUTF16(text, spare);\n      final String term = spare.toString();\n      if (!termSet.contains(term)) {\n        continue;\n      }\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n      if (dpEnum == null) {\n        // null snippet\n        return;\n      }\n\n      dpEnum.nextDoc();\n\n      final int freq = dpEnum.freq();\n      \n      for(int i = 0;i < freq;i++) {\n        int pos = dpEnum.nextPosition();\n        termList.add(new TermInfo(term, dpEnum.startOffset(), dpEnum.endOffset(), pos));\n      }\n    }\n    \n    // sort by position\n    Collections.sort(termList);\n  }\n\n","sourceOld":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n\n    final Fields vectors = reader.getTermVectors(docId);\n    if (vectors == null) {\n      // null snippet\n      return;\n    }\n\n    final Terms vector = vectors.terms(fieldName);\n    if (vector == null) {\n      // null snippet\n      return;\n    }\n\n    final CharsRef spare = new CharsRef();\n    final TermsEnum termsEnum = vector.iterator(null);\n    DocsAndPositionsEnum dpEnum = null;\n    BytesRef text;\n    while ((text = termsEnum.next()) != null) {\n      UnicodeUtil.UTF8toUTF16(text, spare);\n      final String term = spare.toString();\n      if (!termSet.contains(term)) {\n        continue;\n      }\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n      if (dpEnum == null) {\n        // null snippet\n        return;\n      }\n\n      dpEnum.nextDoc();\n\n      final int freq = dpEnum.freq();\n      \n      for(int i = 0;i < freq;i++) {\n        int pos = dpEnum.nextPosition();\n        termList.add(new TermInfo(term, dpEnum.startOffset(), dpEnum.endOffset(), pos));\n      }\n    }\n    \n    // sort by position\n    Collections.sort(termList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","sourceNew":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n\n    final Fields vectors = reader.getTermVectors(docId);\n    if (vectors == null) {\n      // null snippet\n      return;\n    }\n\n    final Terms vector = vectors.terms(fieldName);\n    if (vector == null) {\n      // null snippet\n      return;\n    }\n\n    final CharsRef spare = new CharsRef();\n    final TermsEnum termsEnum = vector.iterator(null);\n    DocsAndPositionsEnum dpEnum = null;\n    BytesRef text;\n    while ((text = termsEnum.next()) != null) {\n      UnicodeUtil.UTF8toUTF16(text, spare);\n      final String term = spare.toString();\n      if (!termSet.contains(term)) {\n        continue;\n      }\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n      if (dpEnum == null) {\n        // null snippet\n        return;\n      }\n\n      dpEnum.nextDoc();\n\n      final int freq = dpEnum.freq();\n      \n      for(int i = 0;i < freq;i++) {\n        int pos = dpEnum.nextPosition();\n        termList.add(new TermInfo(term, dpEnum.startOffset(), dpEnum.endOffset(), pos));\n      }\n    }\n    \n    // sort by position\n    Collections.sort(termList);\n  }\n\n","sourceOld":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n\n    final InvertedFields vectors = reader.getTermVectors(docId);\n    if (vectors == null) {\n      // null snippet\n      return;\n    }\n\n    final Terms vector = vectors.terms(fieldName);\n    if (vector == null) {\n      // null snippet\n      return;\n    }\n\n    final CharsRef spare = new CharsRef();\n    final TermsEnum termsEnum = vector.iterator(null);\n    DocsAndPositionsEnum dpEnum = null;\n    BytesRef text;\n    while ((text = termsEnum.next()) != null) {\n      UnicodeUtil.UTF8toUTF16(text, spare);\n      final String term = spare.toString();\n      if (!termSet.contains(term)) {\n        continue;\n      }\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n      if (dpEnum == null) {\n        // null snippet\n        return;\n      }\n\n      dpEnum.nextDoc();\n\n      final int freq = dpEnum.freq();\n      \n      for(int i = 0;i < freq;i++) {\n        int pos = dpEnum.nextPosition();\n        termList.add(new TermInfo(term, dpEnum.startOffset(), dpEnum.endOffset(), pos));\n      }\n    }\n    \n    // sort by position\n    Collections.sort(termList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","sourceNew":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n\n    final Fields vectors = reader.getTermVectors(docId);\n    if (vectors == null) {\n      // null snippet\n      return;\n    }\n\n    final Terms vector = vectors.terms(fieldName);\n    if (vector == null) {\n      // null snippet\n      return;\n    }\n\n    final CharsRef spare = new CharsRef();\n    final TermsEnum termsEnum = vector.iterator(null);\n    DocsAndPositionsEnum dpEnum = null;\n    BytesRef text;\n    while ((text = termsEnum.next()) != null) {\n      UnicodeUtil.UTF8toUTF16(text, spare);\n      final String term = spare.toString();\n      if (!termSet.contains(term)) {\n        continue;\n      }\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n      if (dpEnum == null) {\n        // null snippet\n        return;\n      }\n\n      dpEnum.nextDoc();\n\n      final int freq = dpEnum.freq();\n      \n      for(int i = 0;i < freq;i++) {\n        int pos = dpEnum.nextPosition();\n        termList.add(new TermInfo(term, dpEnum.startOffset(), dpEnum.endOffset(), pos));\n      }\n    }\n    \n    // sort by position\n    Collections.sort(termList);\n  }\n\n","sourceOld":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n\n    final Fields vectors = reader.getTermVectors(docId);\n    if (vectors == null) {\n      // null snippet\n      return;\n    }\n\n    final Terms vector = vectors.terms(fieldName);\n    if (vector == null) {\n      // null snippet\n      return;\n    }\n\n    final CharsRef spare = new CharsRef();\n    final TermsEnum termsEnum = vector.iterator(null);\n    DocsAndPositionsEnum dpEnum = null;\n    BytesRef text;\n    while ((text = termsEnum.next()) != null) {\n      UnicodeUtil.UTF8toUTF16(text, spare);\n      final String term = spare.toString();\n      if (!termSet.contains(term)) {\n        continue;\n      }\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n      if (dpEnum == null) {\n        // null snippet\n        return;\n      }\n\n      dpEnum.nextDoc();\n\n      final int freq = dpEnum.freq();\n      \n      for(int i = 0;i < freq;i++) {\n        int pos = dpEnum.nextPosition();\n        termList.add(new TermInfo(term, dpEnum.startOffset(), dpEnum.endOffset(), pos));\n      }\n    }\n    \n    // sort by position\n    Collections.sort(termList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0":["3cc749c053615f5871f3b95715fe292f34e70a53"],"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc749c053615f5871f3b95715fe292f34e70a53":["b77dee084743b07be452cf7c07c992a225b11146"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"5f4e87790277826a2aea119328600dfb07761f32":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"b77dee084743b07be452cf7c07c992a225b11146":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["da6c07e76d701edbcc45c3e83ad8464a5e44a4c0"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"]},"commit2Childs":{"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["5f4e87790277826a2aea119328600dfb07761f32","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a1b3a24d5d9b47345473ff564f5cc127a7b526b4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"3cc749c053615f5871f3b95715fe292f34e70a53":["da6c07e76d701edbcc45c3e83ad8464a5e44a4c0"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"5f4e87790277826a2aea119328600dfb07761f32":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"b77dee084743b07be452cf7c07c992a225b11146":["3cc749c053615f5871f3b95715fe292f34e70a53"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","1509f151d7692d84fae414b2b799ac06ba60fcb4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["b77dee084743b07be452cf7c07c992a225b11146"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}