{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.FastStringTokenizer#incrementToken().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.FastStringTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.FastStringTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() {\n      clearAttributes();\n      // cache loop instance vars (performance)\n      String s = str;\n      int len = s.length();\n      int i = pos;\n      boolean letter = isLetter;\n      \n      int start = 0;\n      String text;\n      do {\n        // find beginning of token\n        text = null;\n        while (i < len && !isTokenChar(s.charAt(i), letter)) {\n          i++;\n        }\n        \n        if (i < len) { // found beginning; now find end of token\n          start = i;\n          while (i < len && isTokenChar(s.charAt(i), letter)) {\n            i++;\n          }\n          \n          text = s.substring(start, i);\n          if (toLowerCase) text = text.toLowerCase(locale);\n//          if (toLowerCase) {            \n////            use next line once JDK 1.5 String.toLowerCase() performance regression is fixed\n////            see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265809\n//            text = s.substring(start, i).toLowerCase(); \n////            char[] chars = new char[i-start];\n////            for (int j=start; j < i; j++) chars[j-start] = Character.toLowerCase(s.charAt(j));\n////            text = new String(chars);\n//          } else {\n//            text = s.substring(start, i);\n//          }\n        }\n      } while (text != null && isStopWord(text));\n      \n      pos = i;\n      if (text == null)\n      {\n        return false;\n      }\n      termAtt.setTermBuffer(text);\n      offsetAtt.setOffset(start, i);\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() {\n      clearAttributes();\n      // cache loop instance vars (performance)\n      String s = str;\n      int len = s.length();\n      int i = pos;\n      boolean letter = isLetter;\n      \n      int start = 0;\n      String text;\n      do {\n        // find beginning of token\n        text = null;\n        while (i < len && !isTokenChar(s.charAt(i), letter)) {\n          i++;\n        }\n        \n        if (i < len) { // found beginning; now find end of token\n          start = i;\n          while (i < len && isTokenChar(s.charAt(i), letter)) {\n            i++;\n          }\n          \n          text = s.substring(start, i);\n          if (toLowerCase) text = text.toLowerCase(locale);\n//          if (toLowerCase) {            \n////            use next line once JDK 1.5 String.toLowerCase() performance regression is fixed\n////            see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265809\n//            text = s.substring(start, i).toLowerCase(); \n////            char[] chars = new char[i-start];\n////            for (int j=start; j < i; j++) chars[j-start] = Character.toLowerCase(s.charAt(j));\n////            text = new String(chars);\n//          } else {\n//            text = s.substring(start, i);\n//          }\n        }\n      } while (text != null && isStopWord(text));\n      \n      pos = i;\n      if (text == null)\n      {\n        return false;\n      }\n      termAtt.setTermBuffer(text);\n      offsetAtt.setOffset(start, i);\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.FastStringTokenizer#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.FastStringTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() {\n      clearAttributes();\n      // cache loop instance vars (performance)\n      String s = str;\n      int len = s.length();\n      int i = pos;\n      boolean letter = isLetter;\n      \n      int start = 0;\n      String text;\n      do {\n        // find beginning of token\n        text = null;\n        while (i < len && !isTokenChar(s.charAt(i), letter)) {\n          i++;\n        }\n        \n        if (i < len) { // found beginning; now find end of token\n          start = i;\n          while (i < len && isTokenChar(s.charAt(i), letter)) {\n            i++;\n          }\n          \n          text = s.substring(start, i);\n          if (toLowerCase) text = text.toLowerCase(locale);\n//          if (toLowerCase) {            \n////            use next line once JDK 1.5 String.toLowerCase() performance regression is fixed\n////            see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265809\n//            text = s.substring(start, i).toLowerCase(); \n////            char[] chars = new char[i-start];\n////            for (int j=start; j < i; j++) chars[j-start] = Character.toLowerCase(s.charAt(j));\n////            text = new String(chars);\n//          } else {\n//            text = s.substring(start, i);\n//          }\n        }\n      } while (text != null && isStopWord(text));\n      \n      pos = i;\n      if (text == null)\n      {\n        return false;\n      }\n      termAtt.setTermBuffer(text);\n      offsetAtt.setOffset(start, i);\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() {\n      clearAttributes();\n      // cache loop instance vars (performance)\n      String s = str;\n      int len = s.length();\n      int i = pos;\n      boolean letter = isLetter;\n      \n      int start = 0;\n      String text;\n      do {\n        // find beginning of token\n        text = null;\n        while (i < len && !isTokenChar(s.charAt(i), letter)) {\n          i++;\n        }\n        \n        if (i < len) { // found beginning; now find end of token\n          start = i;\n          while (i < len && isTokenChar(s.charAt(i), letter)) {\n            i++;\n          }\n          \n          text = s.substring(start, i);\n          if (toLowerCase) text = text.toLowerCase(locale);\n//          if (toLowerCase) {            \n////            use next line once JDK 1.5 String.toLowerCase() performance regression is fixed\n////            see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265809\n//            text = s.substring(start, i).toLowerCase(); \n////            char[] chars = new char[i-start];\n////            for (int j=start; j < i; j++) chars[j-start] = Character.toLowerCase(s.charAt(j));\n////            text = new String(chars);\n//          } else {\n//            text = s.substring(start, i);\n//          }\n        }\n      } while (text != null && isStopWord(text));\n      \n      pos = i;\n      if (text == null)\n      {\n        return false;\n      }\n      termAtt.setTermBuffer(text);\n      offsetAtt.setOffset(start, i);\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}