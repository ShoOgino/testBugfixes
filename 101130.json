{"path":"lucene/src/test/org/apache/lucene/util/TestWeakIdentityHashMap#test().mjava","commits":[{"id":"cd8a5ae76e8111ea49a39aef28be5fbd3dab382b","date":1323874359,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestWeakIdentityHashMap#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() {\n    final WeakIdentityHashMap<String,String> map =\n      new WeakIdentityHashMap<String,String>();\n    // we keep strong references to the keys,\n    // so WeakIdentityHashMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    assertEquals(3, map.size());\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method:\n    for (int i = 0; !map.isEmpty(); i++) try {\n      if (i > 40)\n        fail(\"The garbage collector did not reclaim all keys after 2 seconds, failing test!\");\n      System.runFinalization();\n      System.gc();\n      Thread.currentThread().sleep(50L);\n    } catch (InterruptedException ie) {}\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7d9cdceb051035b069ec36719809d0cd837777b","date":1323905856,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/TestWeakIdentityHashMap#test().mjava","sourceNew":null,"sourceOld":"  public void test() {\n    final WeakIdentityHashMap<String,String> map =\n      new WeakIdentityHashMap<String,String>();\n    // we keep strong references to the keys,\n    // so WeakIdentityHashMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    assertEquals(3, map.size());\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method:\n    for (int i = 0; !map.isEmpty(); i++) try {\n      if (i > 40)\n        fail(\"The garbage collector did not reclaim all keys after 2 seconds, failing test!\");\n      System.runFinalization();\n      System.gc();\n      Thread.currentThread().sleep(50L);\n    } catch (InterruptedException ie) {}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd8a5ae76e8111ea49a39aef28be5fbd3dab382b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7d9cdceb051035b069ec36719809d0cd837777b":["cd8a5ae76e8111ea49a39aef28be5fbd3dab382b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b7d9cdceb051035b069ec36719809d0cd837777b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd8a5ae76e8111ea49a39aef28be5fbd3dab382b"],"cd8a5ae76e8111ea49a39aef28be5fbd3dab382b":["b7d9cdceb051035b069ec36719809d0cd837777b"],"b7d9cdceb051035b069ec36719809d0cd837777b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}