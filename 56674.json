{"path":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(PostingsEnum,int).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(PostingsEnum,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings( PostingsEnum reuse, final int flags) throws IOException {\n\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(inReuse, flags);\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, final int flags) throws IOException {\n\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(newToOld(liveDocs), inReuse, flags);\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(newToOld(liveDocs), inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(PostingsEnum,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings( PostingsEnum reuse, final int flags) throws IOException {\n\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(inReuse, flags);\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings( PostingsEnum reuse, final int flags) throws IOException {\n\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(inReuse, flags);\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(PostingsEnum,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings( PostingsEnum reuse, final int flags) throws IOException {\n\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(inReuse, flags);\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings( PostingsEnum reuse, final int flags) throws IOException {\n\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(inReuse, flags);\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(PostingsEnum,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings( PostingsEnum reuse, final int flags) throws IOException {\n\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(inReuse, flags);\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings( PostingsEnum reuse, final int flags) throws IOException {\n\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(inReuse, flags);\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(PostingsEnum,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings( PostingsEnum reuse, final int flags) throws IOException {\n\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(inReuse, flags);\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings( PostingsEnum reuse, final int flags) throws IOException {\n\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(inReuse, flags);\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(PostingsEnum,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings( PostingsEnum reuse, final int flags) throws IOException {\n\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(inReuse, flags);\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings( PostingsEnum reuse, final int flags) throws IOException {\n\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(inReuse, flags);\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["0f4464508ee83288c8c4585b533f9faaa93aa314","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0f4464508ee83288c8c4585b533f9faaa93aa314","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0f4464508ee83288c8c4585b533f9faaa93aa314","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["0f4464508ee83288c8c4585b533f9faaa93aa314","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}