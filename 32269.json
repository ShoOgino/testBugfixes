{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestDrillSideways#testEmptyIndex().mjava","commits":[{"id":"effc44093d40aab545a74b18efa490ba95cc12f5","date":1370781223,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestDrillSideways#testEmptyIndex().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEmptyIndex() throws Exception {\n    // LUCENE-5045: make sure DrillSideways works with an empty index\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    writer = new RandomIndexWriter(random(), dir);\n    taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n    IndexSearcher searcher = newSearcher(writer.getReader());\n    writer.close();\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    taxoWriter.close();\n\n    // Count \"Author\"\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n\n    DrillSideways ds = new DrillSideways(searcher, taxoReader);\n    DrillDownQuery ddq = new DrillDownQuery(fsp.indexingParams, new MatchAllDocsQuery());\n    ddq.add(new CategoryPath(\"Author\", \"Lisa\"));\n    \n    DrillSidewaysResult r = ds.search(null, ddq, 10, fsp); // this used to fail on IllegalArgEx\n    assertEquals(0, r.hits.totalHits);\n\n    r = ds.search(ddq, null, null, 10, new Sort(new SortField(\"foo\", Type.INT)), false, false, fsp); // this used to fail on IllegalArgEx\n    assertEquals(0, r.hits.totalHits);\n    \n    IOUtils.close(searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestDrillSideways#testEmptyIndex().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestDrillSideways#testEmptyIndex().mjava","sourceNew":"  @Test\n  public void testEmptyIndex() throws Exception {\n    // LUCENE-5045: make sure DrillSideways works with an empty index\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    writer = new RandomIndexWriter(random(), dir);\n    taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n    IndexSearcher searcher = newSearcher(writer.getReader());\n    writer.close();\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    taxoWriter.close();\n\n    // Count \"Author\"\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new FacetLabel(\"Author\"), 10));\n\n    DrillSideways ds = new DrillSideways(searcher, taxoReader);\n    DrillDownQuery ddq = new DrillDownQuery(fsp.indexingParams, new MatchAllDocsQuery());\n    ddq.add(new FacetLabel(\"Author\", \"Lisa\"));\n    \n    DrillSidewaysResult r = ds.search(null, ddq, 10, fsp); // this used to fail on IllegalArgEx\n    assertEquals(0, r.hits.totalHits);\n\n    r = ds.search(ddq, null, null, 10, new Sort(new SortField(\"foo\", Type.INT)), false, false, fsp); // this used to fail on IllegalArgEx\n    assertEquals(0, r.hits.totalHits);\n    \n    IOUtils.close(searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyIndex() throws Exception {\n    // LUCENE-5045: make sure DrillSideways works with an empty index\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    writer = new RandomIndexWriter(random(), dir);\n    taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n    IndexSearcher searcher = newSearcher(writer.getReader());\n    writer.close();\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    taxoWriter.close();\n\n    // Count \"Author\"\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n\n    DrillSideways ds = new DrillSideways(searcher, taxoReader);\n    DrillDownQuery ddq = new DrillDownQuery(fsp.indexingParams, new MatchAllDocsQuery());\n    ddq.add(new CategoryPath(\"Author\", \"Lisa\"));\n    \n    DrillSidewaysResult r = ds.search(null, ddq, 10, fsp); // this used to fail on IllegalArgEx\n    assertEquals(0, r.hits.totalHits);\n\n    r = ds.search(ddq, null, null, 10, new Sort(new SortField(\"foo\", Type.INT)), false, false, fsp); // this used to fail on IllegalArgEx\n    assertEquals(0, r.hits.totalHits);\n    \n    IOUtils.close(searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce7aff7772c162c15d520e31af46c555f60d5c3b","date":1385135519,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestDrillSideways#testEmptyIndex().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testEmptyIndex() throws Exception {\n    // LUCENE-5045: make sure DrillSideways works with an empty index\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    writer = new RandomIndexWriter(random(), dir);\n    taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n    IndexSearcher searcher = newSearcher(writer.getReader());\n    writer.close();\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    taxoWriter.close();\n\n    // Count \"Author\"\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new FacetLabel(\"Author\"), 10));\n\n    DrillSideways ds = new DrillSideways(searcher, taxoReader);\n    DrillDownQuery ddq = new DrillDownQuery(fsp.indexingParams, new MatchAllDocsQuery());\n    ddq.add(new FacetLabel(\"Author\", \"Lisa\"));\n    \n    DrillSidewaysResult r = ds.search(null, ddq, 10, fsp); // this used to fail on IllegalArgEx\n    assertEquals(0, r.hits.totalHits);\n\n    r = ds.search(ddq, null, null, 10, new Sort(new SortField(\"foo\", Type.INT)), false, false, fsp); // this used to fail on IllegalArgEx\n    assertEquals(0, r.hits.totalHits);\n    \n    IOUtils.close(searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestDrillSideways#testEmptyIndex().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testEmptyIndex() throws Exception {\n    // LUCENE-5045: make sure DrillSideways works with an empty index\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    writer = new RandomIndexWriter(random(), dir);\n    taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n    IndexSearcher searcher = newSearcher(writer.getReader());\n    writer.close();\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    taxoWriter.close();\n\n    // Count \"Author\"\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n\n    DrillSideways ds = new DrillSideways(searcher, taxoReader);\n    DrillDownQuery ddq = new DrillDownQuery(fsp.indexingParams, new MatchAllDocsQuery());\n    ddq.add(new CategoryPath(\"Author\", \"Lisa\"));\n    \n    DrillSidewaysResult r = ds.search(null, ddq, 10, fsp); // this used to fail on IllegalArgEx\n    assertEquals(0, r.hits.totalHits);\n\n    r = ds.search(ddq, null, null, 10, new Sort(new SortField(\"foo\", Type.INT)), false, false, fsp); // this used to fail on IllegalArgEx\n    assertEquals(0, r.hits.totalHits);\n    \n    IOUtils.close(searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ce7aff7772c162c15d520e31af46c555f60d5c3b":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["effc44093d40aab545a74b18efa490ba95cc12f5","ce7aff7772c162c15d520e31af46c555f60d5c3b"],"effc44093d40aab545a74b18efa490ba95cc12f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["effc44093d40aab545a74b18efa490ba95cc12f5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["effc44093d40aab545a74b18efa490ba95cc12f5"],"ce7aff7772c162c15d520e31af46c555f60d5c3b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"effc44093d40aab545a74b18efa490ba95cc12f5":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["ce7aff7772c162c15d520e31af46c555f60d5c3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}