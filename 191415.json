{"path":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMPerThreadHardLimitMB(int).mjava","commits":[{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMPerThreadHardLimitMB(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Sets the maximum memory consumption per thread triggering a forced\n   * flush if exceeded. A {@link DocumentsWriterPerThread} is forcefully flushed\n   * once it exceeds this limit even if the {@link #getRAMBufferSizeMB()} has\n   * not been exceeded. This is a safety limit to prevent a\n   * {@link DocumentsWriterPerThread} from address space exhaustion due to its\n   * internal 32 bit signed integer based memory addressing.\n   * The given value must be less that 2GB (2048MB)\n   * \n   * @see #DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB\n   */\n  public IndexWriterConfig setRAMPerThreadHardLimitMB(int perThreadHardLimitMB) {\n    if (perThreadHardLimitMB <= 0 || perThreadHardLimitMB >= 2048) {\n      throw new IllegalArgumentException(\"PerThreadHardLimit must be greater than 0 and less than 2048MB\");\n    }\n    this.perThreadHardLimitMB = perThreadHardLimitMB;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMPerThreadHardLimitMB(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Sets the maximum memory consumption per thread triggering a forced\n   * flush if exceeded. A {@link DocumentsWriterPerThread} is forcefully flushed\n   * once it exceeds this limit even if the {@link #getRAMBufferSizeMB()} has\n   * not been exceeded. This is a safety limit to prevent a\n   * {@link DocumentsWriterPerThread} from address space exhaustion due to its\n   * internal 32 bit signed integer based memory addressing.\n   * The given value must be less that 2GB (2048MB)\n   * \n   * @see #DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB\n   */\n  public IndexWriterConfig setRAMPerThreadHardLimitMB(int perThreadHardLimitMB) {\n    if (perThreadHardLimitMB <= 0 || perThreadHardLimitMB >= 2048) {\n      throw new IllegalArgumentException(\"PerThreadHardLimit must be greater than 0 and less than 2048MB\");\n    }\n    this.perThreadHardLimitMB = perThreadHardLimitMB;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMPerThreadHardLimitMB(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Sets the maximum memory consumption per thread triggering a forced\n   * flush if exceeded. A {@link DocumentsWriterPerThread} is forcefully flushed\n   * once it exceeds this limit even if the {@link #getRAMBufferSizeMB()} has\n   * not been exceeded. This is a safety limit to prevent a\n   * {@link DocumentsWriterPerThread} from address space exhaustion due to its\n   * internal 32 bit signed integer based memory addressing.\n   * The given value must be less that 2GB (2048MB)\n   * \n   * @see #DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB\n   */\n  public IndexWriterConfig setRAMPerThreadHardLimitMB(int perThreadHardLimitMB) {\n    if (perThreadHardLimitMB <= 0 || perThreadHardLimitMB >= 2048) {\n      throw new IllegalArgumentException(\"PerThreadHardLimit must be greater than 0 and less than 2048MB\");\n    }\n    this.perThreadHardLimitMB = perThreadHardLimitMB;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMPerThreadHardLimitMB(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Sets the maximum memory consumption per thread triggering a forced\n   * flush if exceeded. A {@link DocumentsWriterPerThread} is forcefully flushed\n   * once it exceeds this limit even if the {@link #getRAMBufferSizeMB()} has\n   * not been exceeded. This is a safety limit to prevent a\n   * {@link DocumentsWriterPerThread} from address space exhaustion due to its\n   * internal 32 bit signed integer based memory addressing.\n   * The given value must be less that 2GB (2048MB)\n   * \n   * @see #DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB\n   */\n  public IndexWriterConfig setRAMPerThreadHardLimitMB(int perThreadHardLimitMB) {\n    if (perThreadHardLimitMB <= 0 || perThreadHardLimitMB >= 2048) {\n      throw new IllegalArgumentException(\"PerThreadHardLimit must be greater than 0 and less than 2048MB\");\n    }\n    this.perThreadHardLimitMB = perThreadHardLimitMB;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMPerThreadHardLimitMB(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMPerThreadHardLimitMB(int).mjava","sourceNew":"  /**\n   * Expert: Sets the maximum memory consumption per thread triggering a forced\n   * flush if exceeded. A {@link DocumentsWriterPerThread} is forcefully flushed\n   * once it exceeds this limit even if the {@link #getRAMBufferSizeMB()} has\n   * not been exceeded. This is a safety limit to prevent a\n   * {@link DocumentsWriterPerThread} from address space exhaustion due to its\n   * internal 32 bit signed integer based memory addressing.\n   * The given value must be less that 2GB (2048MB)\n   * \n   * @see #DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB\n   */\n  public IndexWriterConfig setRAMPerThreadHardLimitMB(int perThreadHardLimitMB) {\n    if (perThreadHardLimitMB <= 0 || perThreadHardLimitMB >= 2048) {\n      throw new IllegalArgumentException(\"PerThreadHardLimit must be greater than 0 and less than 2048MB\");\n    }\n    this.perThreadHardLimitMB = perThreadHardLimitMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: Sets the maximum memory consumption per thread triggering a forced\n   * flush if exceeded. A {@link DocumentsWriterPerThread} is forcefully flushed\n   * once it exceeds this limit even if the {@link #getRAMBufferSizeMB()} has\n   * not been exceeded. This is a safety limit to prevent a\n   * {@link DocumentsWriterPerThread} from address space exhaustion due to its\n   * internal 32 bit signed integer based memory addressing.\n   * The given value must be less that 2GB (2048MB)\n   * \n   * @see #DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB\n   */\n  public IndexWriterConfig setRAMPerThreadHardLimitMB(int perThreadHardLimitMB) {\n    if (perThreadHardLimitMB <= 0 || perThreadHardLimitMB >= 2048) {\n      throw new IllegalArgumentException(\"PerThreadHardLimit must be greater than 0 and less than 2048MB\");\n    }\n    this.perThreadHardLimitMB = perThreadHardLimitMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}