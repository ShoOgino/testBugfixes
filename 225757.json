{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermsHashPerField#testAddAndUpdateTerm().mjava","commits":[{"id":"d3cc3fa1ecad75b99ec55169e44628808f9866ad","date":1592311545,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsHashPerField#testAddAndUpdateTerm().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddAndUpdateTerm() throws IOException {\n    AtomicInteger newCalled = new AtomicInteger(0);\n    AtomicInteger addCalled = new AtomicInteger(0);\n    TermsHashPerField hash = createNewHash(newCalled, addCalled);\n    hash.start(null, true);\n\n    hash.add(new BytesRef(\"start\"), 0); // tid = 0;\n    hash.add(new BytesRef(\"foo\"), 0); // tid = 1;\n    hash.add(new BytesRef(\"bar\"), 0); // tid = 2;\n    hash.finish();\n    hash.add(new BytesRef(\"bar\"), 1);\n    hash.add(new BytesRef(\"foobar\"), 1); // tid = 3;\n    hash.add(new BytesRef(\"bar\"), 1);\n    hash.add(new BytesRef(\"bar\"), 1);\n    hash.add(new BytesRef(\"foobar\"), 1);\n    hash.add(new BytesRef(\"verylongfoobarbaz\"), 1); // tid = 4;\n    hash.finish();\n    hash.add(new BytesRef(\"verylongfoobarbaz\"), 2);\n    hash.add(new BytesRef(\"boom\"), 2); // tid = 5;\n    hash.finish();\n    hash.add(new BytesRef(\"verylongfoobarbaz\"), 3);\n    hash.add(new BytesRef(\"end\"), 3); // tid = 6;\n    hash.finish();\n\n    assertEquals(7, newCalled.get());\n    assertEquals(6, addCalled.get());\n    final ByteSliceReader reader = new ByteSliceReader();\n    hash.initReader(reader, 0, 0);\n    assertTrue(assertDocAndFreq(reader, (FreqProxTermsWriterPerField.FreqProxPostingsArray) hash.postingsArray, 0, 0, 0, 1));\n    hash.initReader(reader, 1, 0);\n    assertTrue(assertDocAndFreq(reader, (FreqProxTermsWriterPerField.FreqProxPostingsArray) hash.postingsArray, 0, 1, 0, 1));\n    hash.initReader(reader, 2, 0);\n    assertFalse(assertDocAndFreq(reader, (FreqProxTermsWriterPerField.FreqProxPostingsArray) hash.postingsArray, 0, 2, 0, 1));\n    assertTrue(assertDocAndFreq(reader, (FreqProxTermsWriterPerField.FreqProxPostingsArray) hash.postingsArray, 2, 2, 1, 3));\n    hash.initReader(reader, 3, 0);\n    assertTrue(assertDocAndFreq(reader, (FreqProxTermsWriterPerField.FreqProxPostingsArray) hash.postingsArray, 0, 3, 1, 2));\n    hash.initReader(reader, 4, 0);\n    assertFalse(assertDocAndFreq(reader, (FreqProxTermsWriterPerField.FreqProxPostingsArray) hash.postingsArray, 0, 4, 1, 1));\n    assertFalse(assertDocAndFreq(reader, (FreqProxTermsWriterPerField.FreqProxPostingsArray) hash.postingsArray, 1, 4, 2, 1));\n    assertTrue(assertDocAndFreq(reader, (FreqProxTermsWriterPerField.FreqProxPostingsArray) hash.postingsArray, 2, 4, 3, 1));\n    hash.initReader(reader, 5, 0);\n    assertTrue(assertDocAndFreq(reader, (FreqProxTermsWriterPerField.FreqProxPostingsArray) hash.postingsArray, 0, 5, 2, 1));\n    hash.initReader(reader, 6, 0);\n    assertTrue(assertDocAndFreq(reader, (FreqProxTermsWriterPerField.FreqProxPostingsArray) hash.postingsArray, 0, 6, 3, 1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3cc3fa1ecad75b99ec55169e44628808f9866ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3cc3fa1ecad75b99ec55169e44628808f9866ad"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3cc3fa1ecad75b99ec55169e44628808f9866ad"],"d3cc3fa1ecad75b99ec55169e44628808f9866ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}