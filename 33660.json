{"path":"lucene/src/java/org/apache/lucene/index/values/Writer#create(ValueType,String,Directory,Comparator[BytesRef],AtomicLong,IOContext).mjava","commits":[{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#create(ValueType,String,Directory,Comparator[BytesRef],AtomicLong,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#create(ValueType,String,Directory,Comparator[BytesRef],AtomicLong).mjava","sourceNew":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link ValueType} enumeration.\n   * \n   * @param type\n   *          the {@link ValueType} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param comp\n   *          a {@link BytesRef} comparator used for {@link Bytes} variants. If\n   *          <code>null</code>\n   *          {@link BytesRef#getUTF8SortedAsUnicodeComparator()} is used as the\n   *          default.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link ValueType}\n   * @throws IOException\n   */\n  public static Writer create(ValueType type, String id, Directory directory,\n      Comparator<BytesRef> comp, AtomicLong bytesUsed, IOContext context) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case INTS:\n      return Ints.getWriter(directory, id, true, bytesUsed, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, 4, bytesUsed, context);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, 8, bytesUsed, context);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true,\n          bytesUsed, context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true,\n          bytesUsed, context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true,\n          bytesUsed, context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false,\n          bytesUsed, context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false,\n          bytesUsed, context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false,\n          bytesUsed, context);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link ValueType} enumeration.\n   * \n   * @param type\n   *          the {@link ValueType} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param comp\n   *          a {@link BytesRef} comparator used for {@link Bytes} variants. If\n   *          <code>null</code>\n   *          {@link BytesRef#getUTF8SortedAsUnicodeComparator()} is used as the\n   *          default.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link ValueType}\n   * @throws IOException\n   */\n  public static Writer create(ValueType type, String id, Directory directory,\n      Comparator<BytesRef> comp, AtomicLong bytesUsed) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case INTS:\n      return Ints.getWriter(directory, id, true, bytesUsed);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, 4, bytesUsed);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, 8, bytesUsed);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true,\n          bytesUsed);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true,\n          bytesUsed);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true,\n          bytesUsed);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false,\n          bytesUsed);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false,\n          bytesUsed);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false,\n          bytesUsed);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#create(ValueType,String,Directory,Comparator[BytesRef],AtomicLong,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#create(ValueType,String,Directory,Comparator[BytesRef],AtomicLong,IOContext).mjava","sourceNew":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link ValueType} enumeration.\n   * \n   * @param type\n   *          the {@link ValueType} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param comp\n   *          a {@link BytesRef} comparator used for {@link Bytes} variants. If\n   *          <code>null</code>\n   *          {@link BytesRef#getUTF8SortedAsUnicodeComparator()} is used as the\n   *          default.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link ValueType}\n   * @throws IOException\n   */\n  public static Writer create(ValueType type, String id, Directory directory,\n      Comparator<BytesRef> comp, AtomicLong bytesUsed, IOContext context) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, 4, bytesUsed, context);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, 8, bytesUsed, context);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true,\n          bytesUsed, context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true,\n          bytesUsed, context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true,\n          bytesUsed, context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false,\n          bytesUsed, context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false,\n          bytesUsed, context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false,\n          bytesUsed, context);\n\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link ValueType} enumeration.\n   * \n   * @param type\n   *          the {@link ValueType} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param comp\n   *          a {@link BytesRef} comparator used for {@link Bytes} variants. If\n   *          <code>null</code>\n   *          {@link BytesRef#getUTF8SortedAsUnicodeComparator()} is used as the\n   *          default.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link ValueType}\n   * @throws IOException\n   */\n  public static Writer create(ValueType type, String id, Directory directory,\n      Comparator<BytesRef> comp, AtomicLong bytesUsed, IOContext context) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case INTS:\n      return Ints.getWriter(directory, id, true, bytesUsed, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, 4, bytesUsed, context);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, 8, bytesUsed, context);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true,\n          bytesUsed, context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true,\n          bytesUsed, context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true,\n          bytesUsed, context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false,\n          bytesUsed, context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false,\n          bytesUsed, context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false,\n          bytesUsed, context);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#create(ValueType,String,Directory,Comparator[BytesRef],AtomicLong,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#create(ValueType,String,Directory,Comparator[BytesRef],AtomicLong).mjava","sourceNew":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link ValueType} enumeration.\n   * \n   * @param type\n   *          the {@link ValueType} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param comp\n   *          a {@link BytesRef} comparator used for {@link Bytes} variants. If\n   *          <code>null</code>\n   *          {@link BytesRef#getUTF8SortedAsUnicodeComparator()} is used as the\n   *          default.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link ValueType}\n   * @throws IOException\n   */\n  public static Writer create(ValueType type, String id, Directory directory,\n      Comparator<BytesRef> comp, AtomicLong bytesUsed, IOContext context) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, 4, bytesUsed, context);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, 8, bytesUsed, context);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true,\n          bytesUsed, context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true,\n          bytesUsed, context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true,\n          bytesUsed, context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false,\n          bytesUsed, context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false,\n          bytesUsed, context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false,\n          bytesUsed, context);\n\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link ValueType} enumeration.\n   * \n   * @param type\n   *          the {@link ValueType} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param comp\n   *          a {@link BytesRef} comparator used for {@link Bytes} variants. If\n   *          <code>null</code>\n   *          {@link BytesRef#getUTF8SortedAsUnicodeComparator()} is used as the\n   *          default.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link ValueType}\n   * @throws IOException\n   */\n  public static Writer create(ValueType type, String id, Directory directory,\n      Comparator<BytesRef> comp, AtomicLong bytesUsed) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, 4, bytesUsed);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, 8, bytesUsed);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true,\n          bytesUsed);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true,\n          bytesUsed);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true,\n          bytesUsed);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false,\n          bytesUsed);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false,\n          bytesUsed);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false,\n          bytesUsed);\n\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#create(ValueType,String,Directory,Comparator[BytesRef],AtomicLong,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#create(ValueType,String,Directory,Comparator[BytesRef],AtomicLong).mjava","sourceNew":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link ValueType} enumeration.\n   * \n   * @param type\n   *          the {@link ValueType} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param comp\n   *          a {@link BytesRef} comparator used for {@link Bytes} variants. If\n   *          <code>null</code>\n   *          {@link BytesRef#getUTF8SortedAsUnicodeComparator()} is used as the\n   *          default.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link ValueType}\n   * @throws IOException\n   */\n  public static Writer create(ValueType type, String id, Directory directory,\n      Comparator<BytesRef> comp, AtomicLong bytesUsed, IOContext context) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, 4, bytesUsed, context);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, 8, bytesUsed, context);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true,\n          bytesUsed, context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true,\n          bytesUsed, context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true,\n          bytesUsed, context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false,\n          bytesUsed, context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false,\n          bytesUsed, context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false,\n          bytesUsed, context);\n\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link ValueType} enumeration.\n   * \n   * @param type\n   *          the {@link ValueType} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param comp\n   *          a {@link BytesRef} comparator used for {@link Bytes} variants. If\n   *          <code>null</code>\n   *          {@link BytesRef#getUTF8SortedAsUnicodeComparator()} is used as the\n   *          default.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link ValueType}\n   * @throws IOException\n   */\n  public static Writer create(ValueType type, String id, Directory directory,\n      Comparator<BytesRef> comp, AtomicLong bytesUsed) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, 4, bytesUsed);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, 8, bytesUsed);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true,\n          bytesUsed);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true,\n          bytesUsed);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true,\n          bytesUsed);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false,\n          bytesUsed);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false,\n          bytesUsed);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false,\n          bytesUsed);\n\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17cc1e690c31c800f83860fbfd0423462962ef01","date":1314789725,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#create(ValueType,String,Directory,Comparator[BytesRef],Counter,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#create(ValueType,String,Directory,Comparator[BytesRef],AtomicLong,IOContext).mjava","sourceNew":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link ValueType} enumeration.\n   * \n   * @param type\n   *          the {@link ValueType} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param comp\n   *          a {@link BytesRef} comparator used for {@link Bytes} variants. If\n   *          <code>null</code>\n   *          {@link BytesRef#getUTF8SortedAsUnicodeComparator()} is used as the\n   *          default.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link ValueType}\n   * @throws IOException\n   */\n  public static Writer create(ValueType type, String id, Directory directory,\n      Comparator<BytesRef> comp, Counter bytesUsed, IOContext context) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, 4, bytesUsed, context);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, 8, bytesUsed, context);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true,\n          bytesUsed, context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true,\n          bytesUsed, context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true,\n          bytesUsed, context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false,\n          bytesUsed, context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false,\n          bytesUsed, context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false,\n          bytesUsed, context);\n\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link ValueType} enumeration.\n   * \n   * @param type\n   *          the {@link ValueType} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param comp\n   *          a {@link BytesRef} comparator used for {@link Bytes} variants. If\n   *          <code>null</code>\n   *          {@link BytesRef#getUTF8SortedAsUnicodeComparator()} is used as the\n   *          default.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link ValueType}\n   * @throws IOException\n   */\n  public static Writer create(ValueType type, String id, Directory directory,\n      Comparator<BytesRef> comp, AtomicLong bytesUsed, IOContext context) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, 4, bytesUsed, context);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, 8, bytesUsed, context);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true,\n          bytesUsed, context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true,\n          bytesUsed, context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true,\n          bytesUsed, context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false,\n          bytesUsed, context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false,\n          bytesUsed, context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false,\n          bytesUsed, context);\n\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"17cc1e690c31c800f83860fbfd0423462962ef01":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b6f9be74ca7baaef11857ad002cad40419979516","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17cc1e690c31c800f83860fbfd0423462962ef01"]},"commit2Childs":{"17cc1e690c31c800f83860fbfd0423462962ef01":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b6f9be74ca7baaef11857ad002cad40419979516","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"b6f9be74ca7baaef11857ad002cad40419979516":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["17cc1e690c31c800f83860fbfd0423462962ef01","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}