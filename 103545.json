{"path":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Bits).mjava","commits":[{"id":"cd8a5ae76e8111ea49a39aef28be5fbd3dab382b","date":1323874359,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Bits).mjava","pathOld":"/dev/null","sourceNew":"    public synchronized DocIdSet get(IndexReader reader, Bits acceptDocs) throws IOException {\n      final Object coreKey = reader.getCoreCacheKey();\n      WeakIdentityHashMap<Bits,SoftReference<DocIdSet>> innerCache = cache.get(coreKey);\n      if (innerCache == null) {\n        if (reader instanceof SegmentReader) {\n          ((SegmentReader) reader).addCoreClosedListener(this);\n        } else {\n          assert reader.getSequentialSubReaders() == null : \n            \"we only operate on AtomicContext, so all cached readers must be atomic\";\n          reader.addReaderClosedListener(this);\n        }\n        innerCache = new WeakIdentityHashMap<Bits,SoftReference<DocIdSet>>();\n        cache.put(coreKey, innerCache);\n      }\n\n      final SoftReference<DocIdSet> innerRef = innerCache.get(acceptDocs);\n      return innerRef == null ? null : innerRef.get();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"baeb12124a5526df4fa4ed10e2460fd957134167","date":1323883013,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Bits).mjava","sourceNew":"    public synchronized DocIdSet get(IndexReader reader, Bits acceptDocs) throws IOException {\n      final Object coreKey = reader.getCoreCacheKey();\n      WeakIdentityHashMap<Bits,SoftReference<DocIdSet>> innerCache = cache.get(coreKey);\n      if (innerCache == null) {\n        innerCache = new WeakIdentityHashMap<Bits,SoftReference<DocIdSet>>();\n        cache.put(coreKey, innerCache);\n      }\n\n      final SoftReference<DocIdSet> innerRef = innerCache.get(acceptDocs);\n      return innerRef == null ? null : innerRef.get();\n    }\n\n","sourceOld":"    public synchronized DocIdSet get(IndexReader reader, Bits acceptDocs) throws IOException {\n      final Object coreKey = reader.getCoreCacheKey();\n      WeakIdentityHashMap<Bits,SoftReference<DocIdSet>> innerCache = cache.get(coreKey);\n      if (innerCache == null) {\n        if (reader instanceof SegmentReader) {\n          ((SegmentReader) reader).addCoreClosedListener(this);\n        } else {\n          assert reader.getSequentialSubReaders() == null : \n            \"we only operate on AtomicContext, so all cached readers must be atomic\";\n          reader.addReaderClosedListener(this);\n        }\n        innerCache = new WeakIdentityHashMap<Bits,SoftReference<DocIdSet>>();\n        cache.put(coreKey, innerCache);\n      }\n\n      final SoftReference<DocIdSet> innerRef = innerCache.get(acceptDocs);\n      return innerRef == null ? null : innerRef.get();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7d9cdceb051035b069ec36719809d0cd837777b","date":1323905856,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Bits).mjava","sourceNew":null,"sourceOld":"    public synchronized DocIdSet get(IndexReader reader, Bits acceptDocs) throws IOException {\n      final Object coreKey = reader.getCoreCacheKey();\n      WeakIdentityHashMap<Bits,SoftReference<DocIdSet>> innerCache = cache.get(coreKey);\n      if (innerCache == null) {\n        innerCache = new WeakIdentityHashMap<Bits,SoftReference<DocIdSet>>();\n        cache.put(coreKey, innerCache);\n      }\n\n      final SoftReference<DocIdSet> innerRef = innerCache.get(acceptDocs);\n      return innerRef == null ? null : innerRef.get();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"baeb12124a5526df4fa4ed10e2460fd957134167":["cd8a5ae76e8111ea49a39aef28be5fbd3dab382b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd8a5ae76e8111ea49a39aef28be5fbd3dab382b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7d9cdceb051035b069ec36719809d0cd837777b":["baeb12124a5526df4fa4ed10e2460fd957134167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b7d9cdceb051035b069ec36719809d0cd837777b"]},"commit2Childs":{"baeb12124a5526df4fa4ed10e2460fd957134167":["b7d9cdceb051035b069ec36719809d0cd837777b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd8a5ae76e8111ea49a39aef28be5fbd3dab382b"],"cd8a5ae76e8111ea49a39aef28be5fbd3dab382b":["baeb12124a5526df4fa4ed10e2460fd957134167"],"b7d9cdceb051035b069ec36719809d0cd837777b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}