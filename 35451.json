{"path":"backwards/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"/dev/null","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"backwards/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}