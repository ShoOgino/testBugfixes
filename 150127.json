{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n    VariableResolverImpl resolver = (VariableResolverImpl) context\n            .getVariableResolver();\n    // Add current row to the copy of resolver map\n//    for (Map.Entry<String, Object> entry : row.entrySet())\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = getVars(expr);\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        row.put(column, resolver.resolve(variables.get(0)));\n      } else {\n        row.put(column, resolver.replaceTokens(expr));\n      }\n\n    }\n\n\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n    VariableResolverImpl resolver = (VariableResolverImpl) context\n            .getVariableResolver();\n    // Add current row to the copy of resolver map\n//    for (Map.Entry<String, Object> entry : row.entrySet())\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = getVars(expr);\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        row.put(column, resolver.resolve(variables.get(0)));\n      } else {\n        row.put(column, resolver.replaceTokens(expr));\n      }\n\n    }\n\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n    VariableResolverImpl resolver = (VariableResolverImpl) context\n            .getVariableResolver();\n    // Add current row to the copy of resolver map\n//    for (Map.Entry<String, Object> entry : row.entrySet())\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = getVars(expr);\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        row.put(column, resolver.resolve(variables.get(0)));\n      } else {\n        row.put(column, resolver.replaceTokens(expr));\n      }\n\n    }\n\n\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n    VariableResolverImpl resolver = (VariableResolverImpl) context\n            .getVariableResolver();\n    // Add current row to the copy of resolver map\n//    for (Map.Entry<String, Object> entry : row.entrySet())\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = getVars(expr);\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        row.put(column, resolver.resolve(variables.get(0)));\n      } else {\n        row.put(column, resolver.replaceTokens(expr));\n      }\n\n    }\n\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n    VariableResolver resolver = (VariableResolver) context\n            .getVariableResolver();\n    // Add current row to the copy of resolver map\n//    for (Map.Entry<String, Object> entry : row.entrySet())\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = this.templateVsVars.get(expr);\n      if(variables == null){\n        variables = resolver.getVariables(expr);\n        this.templateVsVars.put(expr, variables);\n      }\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        row.put(column, resolver.resolve(variables.get(0)));\n      } else {\n        row.put(column, resolver.replaceTokens(expr));\n      }\n\n    }\n\n\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n    VariableResolverImpl resolver = (VariableResolverImpl) context\n            .getVariableResolver();\n    // Add current row to the copy of resolver map\n//    for (Map.Entry<String, Object> entry : row.entrySet())\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = getVars(expr);\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        row.put(column, resolver.resolve(variables.get(0)));\n      } else {\n        row.put(column, resolver.replaceTokens(expr));\n      }\n\n    }\n\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n    VariableResolver resolver = (VariableResolver) context\n            .getVariableResolver();\n    // Add current row to the copy of resolver map\n//    for (Map.Entry<String, Object> entry : row.entrySet())\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = this.templateVsVars.get(expr);\n      if(variables == null){\n        variables = resolver.getVariables(expr);\n        this.templateVsVars.put(expr, variables);\n      }\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        row.put(column, resolver.resolve(variables.get(0)));\n      } else {\n        row.put(column, resolver.replaceTokens(expr));\n      }\n\n    }\n\n\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n    VariableResolverImpl resolver = (VariableResolverImpl) context\n            .getVariableResolver();\n    // Add current row to the copy of resolver map\n//    for (Map.Entry<String, Object> entry : row.entrySet())\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = getVars(expr);\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        row.put(column, resolver.resolve(variables.get(0)));\n      } else {\n        row.put(column, resolver.replaceTokens(expr));\n      }\n\n    }\n\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19eb0081c9f2dd6265a0f011506fe2af97493573","date":1474872644,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n\n    VariableResolver resolver = (VariableResolver) context\n            .getVariableResolver();\n    // Add current row to the copy of resolver map\n//    for (Map.Entry<String, Object> entry : row.entrySet())\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = this.templateVsVars.get(expr);\n      if(variables == null){\n        variables = resolver.getVariables(expr);\n        this.templateVsVars.put(expr, variables);\n      }\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        addToRow(column, row, resolver.resolve(variables.get(0)));\n      } else {\n        addToRow(column, row, resolver.replaceTokens(expr));\n      }\n    }\n\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n    VariableResolver resolver = (VariableResolver) context\n            .getVariableResolver();\n    // Add current row to the copy of resolver map\n//    for (Map.Entry<String, Object> entry : row.entrySet())\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = this.templateVsVars.get(expr);\n      if(variables == null){\n        variables = resolver.getVariables(expr);\n        this.templateVsVars.put(expr, variables);\n      }\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        row.put(column, resolver.resolve(variables.get(0)));\n      } else {\n        row.put(column, resolver.replaceTokens(expr));\n      }\n\n    }\n\n\n    return row;\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","35d702dc29b81705134f87dde620ab95a6f19cd7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n\n    VariableResolver resolver = (VariableResolver) context\n            .getVariableResolver();\n    // Add current row to the copy of resolver map\n//    for (Map.Entry<String, Object> entry : row.entrySet())\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = this.templateVsVars.get(expr);\n      if(variables == null){\n        variables = resolver.getVariables(expr);\n        this.templateVsVars.put(expr, variables);\n      }\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        addToRow(column, row, resolver.resolve(variables.get(0)));\n      } else {\n        addToRow(column, row, resolver.replaceTokens(expr));\n      }\n    }\n\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n    VariableResolver resolver = (VariableResolver) context\n            .getVariableResolver();\n    // Add current row to the copy of resolver map\n//    for (Map.Entry<String, Object> entry : row.entrySet())\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = this.templateVsVars.get(expr);\n      if(variables == null){\n        variables = resolver.getVariables(expr);\n        this.templateVsVars.put(expr, variables);\n      }\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        row.put(column, resolver.resolve(variables.get(0)));\n      } else {\n        row.put(column, resolver.replaceTokens(expr));\n      }\n\n    }\n\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89ae495191648c27a6ed94d2ace7e34b763a535c","date":1476855250,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n\n    VariableResolver resolver = context.getVariableResolver();\n    // Add current row to the copy of resolver map\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      map.entrySet();\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = this.templateVsVars.get(expr);\n      if(variables == null){\n        variables = resolver.getVariables(expr);\n        this.templateVsVars.put(expr, variables);\n      }\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        addToRow(column, row, resolver.resolve(variables.get(0)));\n      } else {\n        addToRow(column, row, resolver.replaceTokens(expr));\n      }\n    }\n\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n\n    VariableResolver resolver = (VariableResolver) context\n            .getVariableResolver();\n    // Add current row to the copy of resolver map\n//    for (Map.Entry<String, Object> entry : row.entrySet())\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = this.templateVsVars.get(expr);\n      if(variables == null){\n        variables = resolver.getVariables(expr);\n        this.templateVsVars.put(expr, variables);\n      }\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        addToRow(column, row, resolver.resolve(variables.get(0)));\n      } else {\n        addToRow(column, row, resolver.replaceTokens(expr));\n      }\n    }\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n\n    VariableResolver resolver = context.getVariableResolver();\n    // Add current row to the copy of resolver map\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      map.entrySet();\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = this.templateVsVars.get(expr);\n      if(variables == null){\n        variables = resolver.getVariables(expr);\n        this.templateVsVars.put(expr, variables);\n      }\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        addToRow(column, row, resolver.resolve(variables.get(0)));\n      } else {\n        addToRow(column, row, resolver.replaceTokens(expr));\n      }\n    }\n\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n    VariableResolver resolver = (VariableResolver) context\n            .getVariableResolver();\n    // Add current row to the copy of resolver map\n//    for (Map.Entry<String, Object> entry : row.entrySet())\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = this.templateVsVars.get(expr);\n      if(variables == null){\n        variables = resolver.getVariables(expr);\n        this.templateVsVars.put(expr, variables);\n      }\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        row.put(column, resolver.resolve(variables.get(0)));\n      } else {\n        row.put(column, resolver.replaceTokens(expr));\n      }\n\n    }\n\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n\n    VariableResolver resolver = context.getVariableResolver();\n    // Add current row to the copy of resolver map\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      map.entrySet();\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = this.templateVsVars.get(expr);\n      if(variables == null){\n        variables = resolver.getVariables(expr);\n        this.templateVsVars.put(expr, variables);\n      }\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          log.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        addToRow(column, row, resolver.resolve(variables.get(0)));\n      } else {\n        addToRow(column, row, resolver.replaceTokens(expr));\n      }\n    }\n\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n\n    VariableResolver resolver = context.getVariableResolver();\n    // Add current row to the copy of resolver map\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      map.entrySet();\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = this.templateVsVars.get(expr);\n      if(variables == null){\n        variables = resolver.getVariables(expr);\n        this.templateVsVars.put(expr, variables);\n      }\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        addToRow(column, row, resolver.resolve(variables.get(0)));\n      } else {\n        addToRow(column, row, resolver.replaceTokens(expr));\n      }\n    }\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n\n    VariableResolver resolver = context.getVariableResolver();\n    // Add current row to the copy of resolver map\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      map.entrySet();\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = this.templateVsVars.get(expr);\n      if(variables == null){\n        variables = resolver.getVariables(expr);\n        this.templateVsVars.put(expr, variables);\n      }\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          log.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        addToRow(column, row, resolver.resolve(variables.get(0)));\n      } else {\n        addToRow(column, row, resolver.replaceTokens(expr));\n      }\n    }\n\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n\n    VariableResolver resolver = context.getVariableResolver();\n    // Add current row to the copy of resolver map\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      map.entrySet();\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = this.templateVsVars.get(expr);\n      if(variables == null){\n        variables = resolver.getVariables(expr);\n        this.templateVsVars.put(expr, variables);\n      }\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          log.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        addToRow(column, row, resolver.resolve(variables.get(0)));\n      } else {\n        addToRow(column, row, resolver.replaceTokens(expr));\n      }\n    }\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n\n    VariableResolver resolver = context.getVariableResolver();\n    // Add current row to the copy of resolver map\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      map.entrySet();\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = this.templateVsVars.get(expr);\n      if(variables == null){\n        variables = resolver.getVariables(expr);\n        this.templateVsVars.put(expr, variables);\n      }\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          log.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        addToRow(column, row, resolver.resolve(variables.get(0)));\n      } else {\n        addToRow(column, row, resolver.replaceTokens(expr));\n      }\n    }\n\n    return row;\n  }\n\n","sourceOld":"  @Override\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n\n    VariableResolver resolver = context.getVariableResolver();\n    // Add current row to the copy of resolver map\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      map.entrySet();\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = this.templateVsVars.get(expr);\n      if(variables == null){\n        variables = resolver.getVariables(expr);\n        this.templateVsVars.put(expr, variables);\n      }\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          log.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        addToRow(column, row, resolver.resolve(variables.get(0)));\n      } else {\n        addToRow(column, row, resolver.replaceTokens(expr));\n      }\n    }\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n\n    VariableResolver resolver = context.getVariableResolver();\n    // Add current row to the copy of resolver map\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      map.entrySet();\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = this.templateVsVars.get(expr);\n      if(variables == null){\n        variables = resolver.getVariables(expr);\n        this.templateVsVars.put(expr, variables);\n      }\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          log.warn(\"Unable to resolve variable: {} while parsing expression: {}\"\n              ,v , expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        addToRow(column, row, resolver.resolve(variables.get(0)));\n      } else {\n        addToRow(column, row, resolver.replaceTokens(expr));\n      }\n    }\n\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n\n    VariableResolver resolver = context.getVariableResolver();\n    // Add current row to the copy of resolver map\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      map.entrySet();\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = this.templateVsVars.get(expr);\n      if(variables == null){\n        variables = resolver.getVariables(expr);\n        this.templateVsVars.put(expr, variables);\n      }\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          log.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        addToRow(column, row, resolver.resolve(variables.get(0)));\n      } else {\n        addToRow(column, row, resolver.replaceTokens(expr));\n      }\n    }\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n\n    VariableResolver resolver = context.getVariableResolver();\n    // Add current row to the copy of resolver map\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      map.entrySet();\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = this.templateVsVars.get(expr);\n      if(variables == null){\n        variables = resolver.getVariables(expr);\n        this.templateVsVars.put(expr, variables);\n      }\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          log.warn(\"Unable to resolve variable: {} while parsing expression: {}\"\n              ,v , expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        addToRow(column, row, resolver.resolve(variables.get(0)));\n      } else {\n        addToRow(column, row, resolver.replaceTokens(expr));\n      }\n    }\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","7c7b0ae5716b6c2044195a818e9ae58205175659"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c7b0ae5716b6c2044195a818e9ae58205175659","89ae495191648c27a6ed94d2ace7e34b763a535c"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7c7b0ae5716b6c2044195a818e9ae58205175659","19eb0081c9f2dd6265a0f011506fe2af97493573"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"89ae495191648c27a6ed94d2ace7e34b763a535c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"19eb0081c9f2dd6265a0f011506fe2af97493573":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["89ae495191648c27a6ed94d2ace7e34b763a535c"]},"commit2Childs":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["407687e67faf6e1f02a211ca078d8e3eed631027","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","19eb0081c9f2dd6265a0f011506fe2af97493573"],"c26f00b574427b55127e869b935845554afde1fa":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["89ae495191648c27a6ed94d2ace7e34b763a535c"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"89ae495191648c27a6ed94d2ace7e34b763a535c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"19eb0081c9f2dd6265a0f011506fe2af97493573":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}