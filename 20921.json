{"path":"src/test/org/apache/lucene/ThreadSafetyTest#main(String[]).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/test/org/apache/lucene/ThreadSafetyTest#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\"index\", ANALYZER, true);\n\n    Thread indexerThread = new IndexerThread(writer);\n    indexerThread.start();\n\n    Thread.sleep(1000);\n      \n    SearcherThread searcherThread1 = new SearcherThread(false);\n    searcherThread1.start();\n\n    SEARCHER = new IndexSearcher(\"index\");\n\n    SearcherThread searcherThread2 = new SearcherThread(true);\n    searcherThread2.start();\n\n    SearcherThread searcherThread3 = new SearcherThread(true);\n    searcherThread3.start();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a10198efba39d45c46f8714efe9a15616f9c79d","date":1001608022,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/ThreadSafetyTest#main(String[]).mjava","pathOld":"src/test/org/apache/lucene/ThreadSafetyTest#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n\n    boolean readOnly = false;\n    boolean add = false;\n\n    for (int i = 0; i < args.length; i++) {\n      if (\"-ro\".equals(args[i]))\n\treadOnly = true;\n      if (\"-add\".equals(args[i]))\n\tadd = true;\n    }\n\n    if (!readOnly) {\n      IndexWriter writer = new IndexWriter(\"index\", ANALYZER, !add);\n      \n      Thread indexerThread = new IndexerThread(writer);\n      indexerThread.start();\n      \n      Thread.sleep(1000);\n    }\n      \n    SearcherThread searcherThread1 = new SearcherThread(false);\n    searcherThread1.start();\n\n    SEARCHER = new IndexSearcher(\"index\");\n\n    SearcherThread searcherThread2 = new SearcherThread(true);\n    searcherThread2.start();\n\n    SearcherThread searcherThread3 = new SearcherThread(true);\n    searcherThread3.start();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\"index\", ANALYZER, true);\n\n    Thread indexerThread = new IndexerThread(writer);\n    indexerThread.start();\n\n    Thread.sleep(1000);\n      \n    SearcherThread searcherThread1 = new SearcherThread(false);\n    searcherThread1.start();\n\n    SEARCHER = new IndexSearcher(\"index\");\n\n    SearcherThread searcherThread2 = new SearcherThread(true);\n    searcherThread2.start();\n\n    SearcherThread searcherThread3 = new SearcherThread(true);\n    searcherThread3.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12ee37ea5a0061cfa8d91d87109b11dcf89142c4","date":1051818618,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/ThreadSafetyTest#main(String[]).mjava","pathOld":"src/test/org/apache/lucene/ThreadSafetyTest#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n\n    boolean readOnly = false;\n    boolean add = false;\n\n    for (int i = 0; i < args.length; i++) {\n      if (\"-ro\".equals(args[i]))\n\treadOnly = true;\n      if (\"-add\".equals(args[i]))\n\tadd = true;\n    }\n\n    IndexReader.unlock(FSDirectory.getDirectory(\"index\", false));\n\n    if (!readOnly) {\n      IndexWriter writer = new IndexWriter(\"index\", ANALYZER, !add);\n      \n      Thread indexerThread = new IndexerThread(writer);\n      indexerThread.start();\n      \n      Thread.sleep(1000);\n    }\n      \n    SearcherThread searcherThread1 = new SearcherThread(false);\n    searcherThread1.start();\n\n    SEARCHER = new IndexSearcher(\"index\");\n\n    SearcherThread searcherThread2 = new SearcherThread(true);\n    searcherThread2.start();\n\n    SearcherThread searcherThread3 = new SearcherThread(true);\n    searcherThread3.start();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n\n    boolean readOnly = false;\n    boolean add = false;\n\n    for (int i = 0; i < args.length; i++) {\n      if (\"-ro\".equals(args[i]))\n\treadOnly = true;\n      if (\"-add\".equals(args[i]))\n\tadd = true;\n    }\n\n    if (!readOnly) {\n      IndexWriter writer = new IndexWriter(\"index\", ANALYZER, !add);\n      \n      Thread indexerThread = new IndexerThread(writer);\n      indexerThread.start();\n      \n      Thread.sleep(1000);\n    }\n      \n    SearcherThread searcherThread1 = new SearcherThread(false);\n    searcherThread1.start();\n\n    SEARCHER = new IndexSearcher(\"index\");\n\n    SearcherThread searcherThread2 = new SearcherThread(true);\n    searcherThread2.start();\n\n    SearcherThread searcherThread3 = new SearcherThread(true);\n    searcherThread3.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":3,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/test/org/apache/lucene/ThreadSafetyTest#main(String[]).mjava","pathOld":"src/test/org/apache/lucene/ThreadSafetyTest#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n\n    boolean readOnly = false;\n    boolean add = false;\n\n    for (int i = 0; i < args.length; i++) {\n      if (\"-ro\".equals(args[i]))\n        readOnly = true;\n      if (\"-add\".equals(args[i]))\n        add = true;\n    }\n\n    File indexDir = new File(\"index\");\n    if (! indexDir.exists()) indexDir.mkdirs();\n    \n    IndexReader.unlock(FSDirectory.getDirectory(indexDir, false));\n\n    if (!readOnly) {\n      IndexWriter writer = new IndexWriter(indexDir, ANALYZER, !add);\n      \n      Thread indexerThread = new IndexerThread(writer);\n      indexerThread.start();\n      \n      Thread.sleep(1000);\n    }\n      \n    SearcherThread searcherThread1 = new SearcherThread(false);\n    searcherThread1.start();\n\n    SEARCHER = new IndexSearcher(indexDir.toString());\n\n    SearcherThread searcherThread2 = new SearcherThread(true);\n    searcherThread2.start();\n\n    SearcherThread searcherThread3 = new SearcherThread(true);\n    searcherThread3.start();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n\n    boolean readOnly = false;\n    boolean add = false;\n\n    for (int i = 0; i < args.length; i++) {\n      if (\"-ro\".equals(args[i]))\n\treadOnly = true;\n      if (\"-add\".equals(args[i]))\n\tadd = true;\n    }\n\n    IndexReader.unlock(FSDirectory.getDirectory(\"index\", false));\n\n    if (!readOnly) {\n      IndexWriter writer = new IndexWriter(\"index\", ANALYZER, !add);\n      \n      Thread indexerThread = new IndexerThread(writer);\n      indexerThread.start();\n      \n      Thread.sleep(1000);\n    }\n      \n    SearcherThread searcherThread1 = new SearcherThread(false);\n    searcherThread1.start();\n\n    SEARCHER = new IndexSearcher(\"index\");\n\n    SearcherThread searcherThread2 = new SearcherThread(true);\n    searcherThread2.start();\n\n    SearcherThread searcherThread3 = new SearcherThread(true);\n    searcherThread3.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/ThreadSafetyTest#main(String[]).mjava","pathOld":"src/test/org/apache/lucene/ThreadSafetyTest#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n\n    boolean readOnly = false;\n    boolean add = false;\n\n    for (int i = 0; i < args.length; i++) {\n      if (\"-ro\".equals(args[i]))\n        readOnly = true;\n      if (\"-add\".equals(args[i]))\n        add = true;\n    }\n\n    File indexDir = new File(\"index\");\n    if (! indexDir.exists()) indexDir.mkdirs();\n    \n    IndexReader.unlock(FSDirectory.getDirectory(indexDir));\n\n    if (!readOnly) {\n      IndexWriter writer = new IndexWriter(indexDir, ANALYZER, !add);\n      \n      Thread indexerThread = new IndexerThread(writer);\n      indexerThread.start();\n      \n      Thread.sleep(1000);\n    }\n      \n    SearcherThread searcherThread1 = new SearcherThread(false);\n    searcherThread1.start();\n\n    SEARCHER = new IndexSearcher(indexDir.toString());\n\n    SearcherThread searcherThread2 = new SearcherThread(true);\n    searcherThread2.start();\n\n    SearcherThread searcherThread3 = new SearcherThread(true);\n    searcherThread3.start();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n\n    boolean readOnly = false;\n    boolean add = false;\n\n    for (int i = 0; i < args.length; i++) {\n      if (\"-ro\".equals(args[i]))\n        readOnly = true;\n      if (\"-add\".equals(args[i]))\n        add = true;\n    }\n\n    File indexDir = new File(\"index\");\n    if (! indexDir.exists()) indexDir.mkdirs();\n    \n    IndexReader.unlock(FSDirectory.getDirectory(indexDir, false));\n\n    if (!readOnly) {\n      IndexWriter writer = new IndexWriter(indexDir, ANALYZER, !add);\n      \n      Thread indexerThread = new IndexerThread(writer);\n      indexerThread.start();\n      \n      Thread.sleep(1000);\n    }\n      \n    SearcherThread searcherThread1 = new SearcherThread(false);\n    searcherThread1.start();\n\n    SEARCHER = new IndexSearcher(indexDir.toString());\n\n    SearcherThread searcherThread2 = new SearcherThread(true);\n    searcherThread2.start();\n\n    SearcherThread searcherThread3 = new SearcherThread(true);\n    searcherThread3.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/ThreadSafetyTest#main(String[]).mjava","pathOld":"src/test/org/apache/lucene/ThreadSafetyTest#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n\n    boolean readOnly = false;\n    boolean add = false;\n\n    for (int i = 0; i < args.length; i++) {\n      if (\"-ro\".equals(args[i]))\n        readOnly = true;\n      if (\"-add\".equals(args[i]))\n        add = true;\n    }\n\n    File indexDir = new File(\"index\");\n    if (! indexDir.exists()) indexDir.mkdirs();\n    \n    IndexReader.unlock(FSDirectory.getDirectory(indexDir));\n\n    if (!readOnly) {\n      IndexWriter writer = new IndexWriter(indexDir, ANALYZER, !add, IndexWriter.MaxFieldLength.LIMITED);\n      \n      Thread indexerThread = new IndexerThread(writer);\n      indexerThread.start();\n      \n      Thread.sleep(1000);\n    }\n      \n    SearcherThread searcherThread1 = new SearcherThread(false);\n    searcherThread1.start();\n\n    SEARCHER = new IndexSearcher(indexDir.toString());\n\n    SearcherThread searcherThread2 = new SearcherThread(true);\n    searcherThread2.start();\n\n    SearcherThread searcherThread3 = new SearcherThread(true);\n    searcherThread3.start();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n\n    boolean readOnly = false;\n    boolean add = false;\n\n    for (int i = 0; i < args.length; i++) {\n      if (\"-ro\".equals(args[i]))\n        readOnly = true;\n      if (\"-add\".equals(args[i]))\n        add = true;\n    }\n\n    File indexDir = new File(\"index\");\n    if (! indexDir.exists()) indexDir.mkdirs();\n    \n    IndexReader.unlock(FSDirectory.getDirectory(indexDir));\n\n    if (!readOnly) {\n      IndexWriter writer = new IndexWriter(indexDir, ANALYZER, !add);\n      \n      Thread indexerThread = new IndexerThread(writer);\n      indexerThread.start();\n      \n      Thread.sleep(1000);\n    }\n      \n    SearcherThread searcherThread1 = new SearcherThread(false);\n    searcherThread1.start();\n\n    SEARCHER = new IndexSearcher(indexDir.toString());\n\n    SearcherThread searcherThread2 = new SearcherThread(true);\n    searcherThread2.start();\n\n    SearcherThread searcherThread3 = new SearcherThread(true);\n    searcherThread3.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"520d06488b13c8ef837dd0815b77a80fff8779e1","date":1240950232,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/ThreadSafetyTest#main(String[]).mjava","sourceNew":null,"sourceOld":"  public static void main(String[] args) throws Exception {\n\n    boolean readOnly = false;\n    boolean add = false;\n\n    for (int i = 0; i < args.length; i++) {\n      if (\"-ro\".equals(args[i]))\n        readOnly = true;\n      if (\"-add\".equals(args[i]))\n        add = true;\n    }\n\n    File indexDir = new File(\"index\");\n    if (! indexDir.exists()) indexDir.mkdirs();\n    \n    IndexReader.unlock(FSDirectory.getDirectory(indexDir));\n\n    if (!readOnly) {\n      IndexWriter writer = new IndexWriter(indexDir, ANALYZER, !add, IndexWriter.MaxFieldLength.LIMITED);\n      \n      Thread indexerThread = new IndexerThread(writer);\n      indexerThread.start();\n      \n      Thread.sleep(1000);\n    }\n      \n    SearcherThread searcherThread1 = new SearcherThread(false);\n    searcherThread1.start();\n\n    SEARCHER = new IndexSearcher(indexDir.toString());\n\n    SearcherThread searcherThread2 = new SearcherThread(true);\n    searcherThread2.start();\n\n    SearcherThread searcherThread3 = new SearcherThread(true);\n    searcherThread3.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a10198efba39d45c46f8714efe9a15616f9c79d":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"66b12ba4967665216eeb706b58d424c51fb3641a":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"520d06488b13c8ef837dd0815b77a80fff8779e1":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12ee37ea5a0061cfa8d91d87109b11dcf89142c4":["3a10198efba39d45c46f8714efe9a15616f9c79d"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["12ee37ea5a0061cfa8d91d87109b11dcf89142c4"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["66b12ba4967665216eeb706b58d424c51fb3641a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["520d06488b13c8ef837dd0815b77a80fff8779e1"]},"commit2Childs":{"3a10198efba39d45c46f8714efe9a15616f9c79d":["12ee37ea5a0061cfa8d91d87109b11dcf89142c4"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["3a10198efba39d45c46f8714efe9a15616f9c79d"],"66b12ba4967665216eeb706b58d424c51fb3641a":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"520d06488b13c8ef837dd0815b77a80fff8779e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"12ee37ea5a0061cfa8d91d87109b11dcf89142c4":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["66b12ba4967665216eeb706b58d424c51fb3641a"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["520d06488b13c8ef837dd0815b77a80fff8779e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}