{"path":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,boolean,SolrQueryRequest).mjava","commits":[{"id":"a91f19e3f7576973404e13b7ecfb8ae94f313921","date":1511358452,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,boolean,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Create a {@link QParser} to parse {@code qstr} using the {@code parserName} parser, while allowing a\n   * toggle for whether local-params may be parsed.\n   * The query parser may be overridden by local parameters in the query string itself\n   * (assuming {@code allowLocalParams}.\n   * For example if parserName=<code>dismax</code> and qstr=<code>foo</code>,\n   * then the dismax query parser will be used to parse and construct the query object.\n   * However if qstr=<code>{!prefix f=myfield}foo</code> then the prefix query parser will be used.\n   *\n   * @param allowLocalParams Whether this query parser should parse local-params syntax.\n   *                         Note that the \"lucene\" query parser natively parses local-params regardless.\n   * @lucene.internal\n   */\n  public static QParser getParser(String qstr, String parserName, boolean allowLocalParams, SolrQueryRequest req) throws SyntaxError {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    if (parserName == null) {\n      parserName = QParserPlugin.DEFAULT_QTYPE;//\"lucene\"\n    }\n    String stringIncludingLocalParams = qstr;\n    ModifiableSolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (allowLocalParams && qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      localParams = new ModifiableSolrParams();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localParams, globalParams);\n\n      String val = localParams.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n        //TODO if remainder of query string after '}' is non-empty, then what? Throw error? Fall back to lucene QParser?\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localParams.set(QueryParsing.V, val);\n      }\n\n      parserName = localParams.get(QueryParsing.TYPE,parserName);\n      qstr = localParams.get(\"v\");\n    }\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["73037b76a70b4cad490b616ea90220b3cc2a6fd8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4aee4980038a10791618ea04e79233ce5cbf6607","date":1511366888,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,boolean,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Create a {@link QParser} to parse {@code qstr} using the {@code parserName} parser, while allowing a\n   * toggle for whether local-params may be parsed.\n   * The query parser may be overridden by local parameters in the query string itself\n   * (assuming {@code allowLocalParams}.\n   * For example if parserName=<code>dismax</code> and qstr=<code>foo</code>,\n   * then the dismax query parser will be used to parse and construct the query object.\n   * However if qstr=<code>{!prefix f=myfield}foo</code> then the prefix query parser will be used.\n   *\n   * @param allowLocalParams Whether this query parser should parse local-params syntax.\n   *                         Note that the \"lucene\" query parser natively parses local-params regardless.\n   * @lucene.internal\n   */\n  public static QParser getParser(String qstr, String parserName, boolean allowLocalParams, SolrQueryRequest req) throws SyntaxError {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    if (parserName == null) {\n      parserName = QParserPlugin.DEFAULT_QTYPE;//\"lucene\"\n    }\n    String stringIncludingLocalParams = qstr;\n    ModifiableSolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (allowLocalParams && qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      localParams = new ModifiableSolrParams();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localParams, globalParams);\n\n      String val = localParams.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n        //TODO if remainder of query string after '}' is non-empty, then what? Throw error? Fall back to lucene QParser?\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localParams.set(QueryParsing.V, val);\n      }\n\n      parserName = localParams.get(QueryParsing.TYPE,parserName);\n      qstr = localParams.get(\"v\");\n    }\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73037b76a70b4cad490b616ea90220b3cc2a6fd8","date":1561396119,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,boolean,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,boolean,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Expert: Create a {@link QParser} to parse {@code qstr} using the {@code parserName} parser, while allowing a\n   * toggle for whether local-params may be parsed.\n   * The query parser may be overridden by local parameters in the query string itself\n   * (assuming {@code allowLocalParams}.\n   * For example if parserName=<code>dismax</code> and qstr=<code>foo</code>,\n   * then the dismax query parser will be used to parse and construct the query object.\n   * However if qstr=<code>{!prefix f=myfield}foo</code> then the prefix query parser will be used.\n   *\n   * @param allowLocalParams Whether this query parser should parse local-params syntax.\n   *                         Note that the \"lucene\" query parser natively parses local-params regardless.\n   * @lucene.internal\n   */\n  public static QParser getParser(String qstr, String parserName, boolean allowLocalParams, SolrQueryRequest req) throws SyntaxError {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    if (parserName == null) {\n      parserName = QParserPlugin.DEFAULT_QTYPE;//\"lucene\"\n    }\n    String stringIncludingLocalParams = qstr;\n    ModifiableSolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (allowLocalParams && qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      localParams = new ModifiableSolrParams();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localParams, globalParams);\n\n      String val = localParams.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n        //TODO if remainder of query string after '}' is non-empty, then what? Throw error? Fall back to lucene QParser?\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localParams.set(QueryParsing.V, val);\n      }\n\n      parserName = localParams.get(QueryParsing.TYPE,parserName);\n      qstr = localParams.get(QueryParsing.V);\n    }\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);\n    if (qplug == null) {\n      // there should a way to include parameter for which parsing failed\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"invalid query parser '\" + parserName + (stringIncludingLocalParams == null?\n              \"'\": \"' for query '\" + stringIncludingLocalParams + \"'\"));\n    }\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","sourceOld":"  /**\n   * Expert: Create a {@link QParser} to parse {@code qstr} using the {@code parserName} parser, while allowing a\n   * toggle for whether local-params may be parsed.\n   * The query parser may be overridden by local parameters in the query string itself\n   * (assuming {@code allowLocalParams}.\n   * For example if parserName=<code>dismax</code> and qstr=<code>foo</code>,\n   * then the dismax query parser will be used to parse and construct the query object.\n   * However if qstr=<code>{!prefix f=myfield}foo</code> then the prefix query parser will be used.\n   *\n   * @param allowLocalParams Whether this query parser should parse local-params syntax.\n   *                         Note that the \"lucene\" query parser natively parses local-params regardless.\n   * @lucene.internal\n   */\n  public static QParser getParser(String qstr, String parserName, boolean allowLocalParams, SolrQueryRequest req) throws SyntaxError {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    if (parserName == null) {\n      parserName = QParserPlugin.DEFAULT_QTYPE;//\"lucene\"\n    }\n    String stringIncludingLocalParams = qstr;\n    ModifiableSolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (allowLocalParams && qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      localParams = new ModifiableSolrParams();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localParams, globalParams);\n\n      String val = localParams.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n        //TODO if remainder of query string after '}' is non-empty, then what? Throw error? Fall back to lucene QParser?\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localParams.set(QueryParsing.V, val);\n      }\n\n      parserName = localParams.get(QueryParsing.TYPE,parserName);\n      qstr = localParams.get(\"v\");\n    }\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","bugFix":["a91f19e3f7576973404e13b7ecfb8ae94f313921"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4aee4980038a10791618ea04e79233ce5cbf6607":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a91f19e3f7576973404e13b7ecfb8ae94f313921"],"a91f19e3f7576973404e13b7ecfb8ae94f313921":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"73037b76a70b4cad490b616ea90220b3cc2a6fd8":["4aee4980038a10791618ea04e79233ce5cbf6607"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73037b76a70b4cad490b616ea90220b3cc2a6fd8"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4aee4980038a10791618ea04e79233ce5cbf6607","a91f19e3f7576973404e13b7ecfb8ae94f313921"],"4aee4980038a10791618ea04e79233ce5cbf6607":["73037b76a70b4cad490b616ea90220b3cc2a6fd8"],"a91f19e3f7576973404e13b7ecfb8ae94f313921":["4aee4980038a10791618ea04e79233ce5cbf6607"],"73037b76a70b4cad490b616ea90220b3cc2a6fd8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}