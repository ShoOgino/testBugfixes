{"path":"src/java/org/apache/lucene/util/AttributeSource#copyTo(AttributeSource).mjava","commits":[{"id":"43261d20e8ab524b9887c85d99a855fb4a25b4dc","date":1268557776,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/AttributeSource#copyTo(AttributeSource).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copies the contents of this {@code AttributeSource} to the given target {@code AttributeSource}.\n   * The given instance has to provide all {@link Attribute}s this instance contains. \n   * The actual attribute implementations must be identical in both {@code AttributeSource} instances;\n   * ideally both AttributeSource instances should use the same {@link AttributeFactory}.\n   * You can use this method as a replacement for {@link #restoreState}, if you use\n   * {@link #cloneAttributes} instead of {@link #captureState}.\n   */\n  public final void copyTo(AttributeSource target) {\n    if (hasAttributes()) {\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      for (State state = currentState; state != null; state = state.next) {\n        final AttributeImpl targetImpl = target.attributeImpls.get(state.attribute.getClass());\n        if (targetImpl == null) {\n          throw new IllegalArgumentException(\"This AttributeSource contains AttributeImpl of type \" +\n            state.attribute.getClass() + \" that is not in the target\");\n        }\n        state.attribute.copyTo(targetImpl);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9342cc9f4edc8898cca2a744cfbf9b64cbf51663","date":1268558020,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/AttributeSource#copyTo(AttributeSource).mjava","pathOld":"src/java/org/apache/lucene/util/AttributeSource#copyTo(AttributeSource).mjava","sourceNew":"  /**\n   * Copies the contents of this {@code AttributeSource} to the given target {@code AttributeSource}.\n   * The given instance has to provide all {@link Attribute}s this instance contains. \n   * The actual attribute implementations must be identical in both {@code AttributeSource} instances;\n   * ideally both AttributeSource instances should use the same {@link AttributeFactory}.\n   * You can use this method as a replacement for {@link #restoreState}, if you use\n   * {@link #cloneAttributes} instead of {@link #captureState}.\n   */\n  public final void copyTo(AttributeSource target) {\n    if (hasAttributes()) {\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      for (State state = currentState; state != null; state = state.next) {\n        final AttributeImpl targetImpl = target.attributeImpls.get(state.attribute.getClass());\n        if (targetImpl == null) {\n          throw new IllegalArgumentException(\"This AttributeSource contains AttributeImpl of type \" +\n            state.attribute.getClass().getName() + \" that is not in the target\");\n        }\n        state.attribute.copyTo(targetImpl);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Copies the contents of this {@code AttributeSource} to the given target {@code AttributeSource}.\n   * The given instance has to provide all {@link Attribute}s this instance contains. \n   * The actual attribute implementations must be identical in both {@code AttributeSource} instances;\n   * ideally both AttributeSource instances should use the same {@link AttributeFactory}.\n   * You can use this method as a replacement for {@link #restoreState}, if you use\n   * {@link #cloneAttributes} instead of {@link #captureState}.\n   */\n  public final void copyTo(AttributeSource target) {\n    if (hasAttributes()) {\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      for (State state = currentState; state != null; state = state.next) {\n        final AttributeImpl targetImpl = target.attributeImpls.get(state.attribute.getClass());\n        if (targetImpl == null) {\n          throw new IllegalArgumentException(\"This AttributeSource contains AttributeImpl of type \" +\n            state.attribute.getClass() + \" that is not in the target\");\n        }\n        state.attribute.copyTo(targetImpl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource#copyTo(AttributeSource).mjava","pathOld":"src/java/org/apache/lucene/util/AttributeSource#copyTo(AttributeSource).mjava","sourceNew":"  /**\n   * Copies the contents of this {@code AttributeSource} to the given target {@code AttributeSource}.\n   * The given instance has to provide all {@link Attribute}s this instance contains. \n   * The actual attribute implementations must be identical in both {@code AttributeSource} instances;\n   * ideally both AttributeSource instances should use the same {@link AttributeFactory}.\n   * You can use this method as a replacement for {@link #restoreState}, if you use\n   * {@link #cloneAttributes} instead of {@link #captureState}.\n   */\n  public final void copyTo(AttributeSource target) {\n    if (hasAttributes()) {\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      for (State state = currentState; state != null; state = state.next) {\n        final AttributeImpl targetImpl = target.attributeImpls.get(state.attribute.getClass());\n        if (targetImpl == null) {\n          throw new IllegalArgumentException(\"This AttributeSource contains AttributeImpl of type \" +\n            state.attribute.getClass().getName() + \" that is not in the target\");\n        }\n        state.attribute.copyTo(targetImpl);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Copies the contents of this {@code AttributeSource} to the given target {@code AttributeSource}.\n   * The given instance has to provide all {@link Attribute}s this instance contains. \n   * The actual attribute implementations must be identical in both {@code AttributeSource} instances;\n   * ideally both AttributeSource instances should use the same {@link AttributeFactory}.\n   * You can use this method as a replacement for {@link #restoreState}, if you use\n   * {@link #cloneAttributes} instead of {@link #captureState}.\n   */\n  public final void copyTo(AttributeSource target) {\n    if (hasAttributes()) {\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      for (State state = currentState; state != null; state = state.next) {\n        final AttributeImpl targetImpl = target.attributeImpls.get(state.attribute.getClass());\n        if (targetImpl == null) {\n          throw new IllegalArgumentException(\"This AttributeSource contains AttributeImpl of type \" +\n            state.attribute.getClass().getName() + \" that is not in the target\");\n        }\n        state.attribute.copyTo(targetImpl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9342cc9f4edc8898cca2a744cfbf9b64cbf51663":["43261d20e8ab524b9887c85d99a855fb4a25b4dc"],"43261d20e8ab524b9887c85d99a855fb4a25b4dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9342cc9f4edc8898cca2a744cfbf9b64cbf51663"]},"commit2Childs":{"9342cc9f4edc8898cca2a744cfbf9b64cbf51663":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"43261d20e8ab524b9887c85d99a855fb4a25b4dc":["9342cc9f4edc8898cca2a744cfbf9b64cbf51663"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43261d20e8ab524b9887c85d99a855fb4a25b4dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}