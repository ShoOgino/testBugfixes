{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState(boolean).mjava","commits":[{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState(boolean).mjava","pathOld":"/dev/null","sourceNew":"  // load and publish a new CollectionInfo\n  public void updateClusterState(boolean immediate) throws KeeperException, InterruptedException {\n    updateClusterState(immediate, false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState(boolean).mjava","pathOld":"/dev/null","sourceNew":"  // load and publish a new CollectionInfo\n  public void updateClusterState(boolean immediate) throws KeeperException, InterruptedException {\n    updateClusterState(immediate, false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState(boolean).mjava","pathOld":"/dev/null","sourceNew":"  // load and publish a new CollectionInfo\n  public void updateClusterState(boolean immediate) throws KeeperException, InterruptedException {\n    updateClusterState(immediate, false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState(boolean).mjava","sourceNew":"  // load and publish a new CollectionInfo\n  private void updateClusterState(boolean onlyLiveNodes) throws KeeperException, InterruptedException {\n    // build immutable CloudInfo\n    synchronized (getUpdateLock()) {\n      List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE, null, true);\n      Set<String> liveNodesSet = new HashSet<>(liveNodes);\n\n      if (!onlyLiveNodes) {\n        log.debug(\"Updating cloud state from ZooKeeper... \");\n        clusterState = constructState(liveNodesSet, null);\n      } else {\n        log.debug(\"Updating live nodes from ZooKeeper... ({})\", liveNodesSet.size());\n        clusterState = this.clusterState;\n        clusterState.setLiveNodes(liveNodesSet);\n      }\n    }\n  }\n\n","sourceOld":"  // load and publish a new CollectionInfo\n  public void updateClusterState(boolean immediate) throws KeeperException, InterruptedException {\n    updateClusterState(immediate, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState(boolean).mjava","sourceNew":null,"sourceOld":"  // load and publish a new CollectionInfo\n  private void updateClusterState(boolean onlyLiveNodes) throws KeeperException, InterruptedException {\n    // build immutable CloudInfo\n    synchronized (getUpdateLock()) {\n      List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE, null, true);\n      Set<String> liveNodesSet = new HashSet<>(liveNodes);\n\n      if (!onlyLiveNodes) {\n        log.debug(\"Updating cloud state from ZooKeeper... \");\n        clusterState = constructState(liveNodesSet, null);\n      } else {\n        log.debug(\"Updating live nodes from ZooKeeper... ({})\", liveNodesSet.size());\n        clusterState = this.clusterState;\n        clusterState.setLiveNodes(liveNodesSet);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["102da6baafc0f534a59f31729343dbab9d3b9e9a"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["102da6baafc0f534a59f31729343dbab9d3b9e9a","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}