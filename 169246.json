{"path":"lucene/queries/src/java/org/apache/lucene/queries/ChainedFilter#doChain(FixedBitSet,int,DocIdSet).mjava","commits":[{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/ChainedFilter#doChain(FixedBitSet,int,DocIdSet).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/ChainedFilter#doChain(OpenBitSetDISI,int,DocIdSet).mjava","sourceNew":"  private void doChain(FixedBitSet result, int logic, DocIdSet dis) throws IOException {\n    if (dis instanceof FixedBitSet) {\n      // optimized case for FixedBitSets\n      switch (logic) {\n        case OR:\n          result.or((FixedBitSet) dis);\n          break;\n        case AND:\n          result.and((FixedBitSet) dis);\n          break;\n        case ANDNOT:\n          result.andNot((FixedBitSet) dis);\n          break;\n        case XOR:\n          result.xor((FixedBitSet) dis);\n          break;\n        default:\n          doChain(result, DEFAULT, dis);\n          break;\n      }\n    } else {\n      DocIdSetIterator disi;\n      if (dis == null) {\n        disi = DocIdSetIterator.empty();\n      } else {\n        disi = dis.iterator();\n        if (disi == null) {\n          disi = DocIdSetIterator.empty();\n        }\n      }\n\n      switch (logic) {\n        case OR:\n          result.or(disi);\n          break;\n        case AND:\n          result.and(disi);\n          break;\n        case ANDNOT:\n          result.andNot(disi);\n          break;\n        case XOR:\n          result.xor(disi);\n          break;\n        default:\n          doChain(result, DEFAULT, dis);\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  private void doChain(OpenBitSetDISI result, int logic, DocIdSet dis)\n      throws IOException {\n\n    if (dis instanceof OpenBitSet) {\n      // optimized case for OpenBitSets\n      switch (logic) {\n        case OR:\n          result.or((OpenBitSet) dis);\n          break;\n        case AND:\n          result.and((OpenBitSet) dis);\n          break;\n        case ANDNOT:\n          result.andNot((OpenBitSet) dis);\n          break;\n        case XOR:\n          result.xor((OpenBitSet) dis);\n          break;\n        default:\n          doChain(result, DEFAULT, dis);\n          break;\n      }\n    } else {\n      DocIdSetIterator disi;\n      if (dis == null) {\n        disi = DocIdSetIterator.empty();\n      } else {\n        disi = dis.iterator();\n        if (disi == null) {\n          disi = DocIdSetIterator.empty();\n        }\n      }\n\n      switch (logic) {\n        case OR:\n          result.inPlaceOr(disi);\n          break;\n        case AND:\n          result.inPlaceAnd(disi);\n          break;\n        case ANDNOT:\n          result.inPlaceNot(disi);\n          break;\n        case XOR:\n          result.inPlaceXor(disi);\n          break;\n        default:\n          doChain(result, DEFAULT, dis);\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f78e5763f288fef7c1cc1ebd2530195ce46b5b28","date":1412245226,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/ChainedFilter#doChain(FixedBitSet,int,DocIdSet).mjava","sourceNew":null,"sourceOld":"  private void doChain(FixedBitSet result, int logic, DocIdSet dis) throws IOException {\n    if (dis instanceof FixedBitSet) {\n      // optimized case for FixedBitSets\n      switch (logic) {\n        case OR:\n          result.or((FixedBitSet) dis);\n          break;\n        case AND:\n          result.and((FixedBitSet) dis);\n          break;\n        case ANDNOT:\n          result.andNot((FixedBitSet) dis);\n          break;\n        case XOR:\n          result.xor((FixedBitSet) dis);\n          break;\n        default:\n          doChain(result, DEFAULT, dis);\n          break;\n      }\n    } else {\n      DocIdSetIterator disi;\n      if (dis == null) {\n        disi = DocIdSetIterator.empty();\n      } else {\n        disi = dis.iterator();\n        if (disi == null) {\n          disi = DocIdSetIterator.empty();\n        }\n      }\n\n      switch (logic) {\n        case OR:\n          result.or(disi);\n          break;\n        case AND:\n          result.and(disi);\n          break;\n        case ANDNOT:\n          result.andNot(disi);\n          break;\n        case XOR:\n          result.xor(disi);\n          break;\n        default:\n          doChain(result, DEFAULT, dis);\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/ChainedFilter#doChain(FixedBitSet,int,DocIdSet).mjava","sourceNew":null,"sourceOld":"  private void doChain(FixedBitSet result, int logic, DocIdSet dis) throws IOException {\n    if (dis instanceof FixedBitSet) {\n      // optimized case for FixedBitSets\n      switch (logic) {\n        case OR:\n          result.or((FixedBitSet) dis);\n          break;\n        case AND:\n          result.and((FixedBitSet) dis);\n          break;\n        case ANDNOT:\n          result.andNot((FixedBitSet) dis);\n          break;\n        case XOR:\n          result.xor((FixedBitSet) dis);\n          break;\n        default:\n          doChain(result, DEFAULT, dis);\n          break;\n      }\n    } else {\n      DocIdSetIterator disi;\n      if (dis == null) {\n        disi = DocIdSetIterator.empty();\n      } else {\n        disi = dis.iterator();\n        if (disi == null) {\n          disi = DocIdSetIterator.empty();\n        }\n      }\n\n      switch (logic) {\n        case OR:\n          result.or(disi);\n          break;\n        case AND:\n          result.and(disi);\n          break;\n        case ANDNOT:\n          result.andNot(disi);\n          break;\n        case XOR:\n          result.xor(disi);\n          break;\n        default:\n          doChain(result, DEFAULT, dis);\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["3995f83351082af8ae83bb017e63c56818fc1568","f78e5763f288fef7c1cc1ebd2530195ce46b5b28"],"f78e5763f288fef7c1cc1ebd2530195ce46b5b28":["3995f83351082af8ae83bb017e63c56818fc1568"],"3995f83351082af8ae83bb017e63c56818fc1568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f78e5763f288fef7c1cc1ebd2530195ce46b5b28"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3995f83351082af8ae83bb017e63c56818fc1568"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"f78e5763f288fef7c1cc1ebd2530195ce46b5b28":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3995f83351082af8ae83bb017e63c56818fc1568":["d9a47902d6207303f5ed3e7aaca62ca33433af66","f78e5763f288fef7c1cc1ebd2530195ce46b5b28"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}