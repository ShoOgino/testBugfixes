{"path":"lucene/sandbox/src/java/org/apache/lucene/payloads/PayloadSpanUtil#queryToSpanQuery(Query,Collection[byte[]]).mjava","commits":[{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/payloads/PayloadSpanUtil#queryToSpanQuery(Query,Collection[byte[]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#queryToSpanQuery(Query,Collection[byte[]]).mjava","sourceNew":"  private void queryToSpanQuery(Query query, Collection<byte[]> payloads)\n      throws IOException {\n    if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          queryToSpanQuery(clause.getQuery(), payloads);\n        }\n      }\n\n    } else if (query instanceof PhraseQuery) {\n      Term[] phraseQueryTerms = ((PhraseQuery) query).getTerms();\n      SpanQuery[] clauses = new SpanQuery[phraseQueryTerms.length];\n      for (int i = 0; i < phraseQueryTerms.length; i++) {\n        clauses[i] = new SpanTermQuery(phraseQueryTerms[i]);\n      }\n\n      int slop = ((PhraseQuery) query).getSlop();\n      boolean inorder = false;\n\n      if (slop == 0) {\n        inorder = true;\n      }\n\n      SpanNearQuery sp = new SpanNearQuery(clauses, slop, inorder);\n      getPayloads(payloads, sp);\n    } else if (query instanceof TermQuery) {\n      SpanTermQuery stq = new SpanTermQuery(((TermQuery) query).getTerm());\n      getPayloads(payloads, stq);\n    } else if (query instanceof SpanQuery) {\n      getPayloads(payloads, (SpanQuery) query);\n    } else if (query instanceof DisjunctionMaxQuery) {\n\n      for (Iterator<Query> iterator = ((DisjunctionMaxQuery) query).iterator(); iterator\n          .hasNext();) {\n        queryToSpanQuery(iterator.next(), payloads);\n      }\n\n    } else if (query instanceof MultiPhraseQuery) {\n      final MultiPhraseQuery mpq = (MultiPhraseQuery) query;\n      final List<Term[]> termArrays = mpq.getTermArrays();\n      final int[] positions = mpq.getPositions();\n      if (positions.length > 0) {\n\n        int maxPosition = positions[positions.length - 1];\n        for (int i = 0; i < positions.length - 1; ++i) {\n          if (positions[i] > maxPosition) {\n            maxPosition = positions[i];\n          }\n        }\n\n        @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final List<Query>[] disjunctLists =\n            new List[maxPosition + 1];\n        int distinctPositions = 0;\n\n        for (int i = 0; i < termArrays.size(); ++i) {\n          final Term[] termArray = termArrays.get(i);\n          List<Query> disjuncts = disjunctLists[positions[i]];\n          if (disjuncts == null) {\n            disjuncts = (disjunctLists[positions[i]] = new ArrayList<>(\n                termArray.length));\n            ++distinctPositions;\n          }\n          for (final Term term : termArray) {\n            disjuncts.add(new SpanTermQuery(term));\n          }\n        }\n\n        int positionGaps = 0;\n        int position = 0;\n        final SpanQuery[] clauses = new SpanQuery[distinctPositions];\n        for (int i = 0; i < disjunctLists.length; ++i) {\n          List<Query> disjuncts = disjunctLists[i];\n          if (disjuncts != null) {\n            clauses[position++] = new SpanOrQuery(disjuncts\n                .toArray(new SpanQuery[disjuncts.size()]));\n          } else {\n            ++positionGaps;\n          }\n        }\n\n        final int slop = mpq.getSlop();\n        final boolean inorder = (slop == 0);\n\n        SpanNearQuery sp = new SpanNearQuery(clauses, slop + positionGaps,\n                                                      inorder);\n        getPayloads(payloads, sp);\n      }\n    }\n  }\n\n","sourceOld":"  private void queryToSpanQuery(Query query, Collection<byte[]> payloads)\n      throws IOException {\n    if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          queryToSpanQuery(clause.getQuery(), payloads);\n        }\n      }\n\n    } else if (query instanceof PhraseQuery) {\n      Term[] phraseQueryTerms = ((PhraseQuery) query).getTerms();\n      SpanQuery[] clauses = new SpanQuery[phraseQueryTerms.length];\n      for (int i = 0; i < phraseQueryTerms.length; i++) {\n        clauses[i] = new SpanTermQuery(phraseQueryTerms[i]);\n      }\n\n      int slop = ((PhraseQuery) query).getSlop();\n      boolean inorder = false;\n\n      if (slop == 0) {\n        inorder = true;\n      }\n\n      SpanNearQuery sp = new SpanNearQuery(clauses, slop, inorder);\n      getPayloads(payloads, sp);\n    } else if (query instanceof TermQuery) {\n      SpanTermQuery stq = new SpanTermQuery(((TermQuery) query).getTerm());\n      getPayloads(payloads, stq);\n    } else if (query instanceof SpanQuery) {\n      getPayloads(payloads, (SpanQuery) query);\n    } else if (query instanceof DisjunctionMaxQuery) {\n\n      for (Iterator<Query> iterator = ((DisjunctionMaxQuery) query).iterator(); iterator\n          .hasNext();) {\n        queryToSpanQuery(iterator.next(), payloads);\n      }\n\n    } else if (query instanceof MultiPhraseQuery) {\n      final MultiPhraseQuery mpq = (MultiPhraseQuery) query;\n      final List<Term[]> termArrays = mpq.getTermArrays();\n      final int[] positions = mpq.getPositions();\n      if (positions.length > 0) {\n\n        int maxPosition = positions[positions.length - 1];\n        for (int i = 0; i < positions.length - 1; ++i) {\n          if (positions[i] > maxPosition) {\n            maxPosition = positions[i];\n          }\n        }\n\n        @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final List<Query>[] disjunctLists =\n            new List[maxPosition + 1];\n        int distinctPositions = 0;\n\n        for (int i = 0; i < termArrays.size(); ++i) {\n          final Term[] termArray = termArrays.get(i);\n          List<Query> disjuncts = disjunctLists[positions[i]];\n          if (disjuncts == null) {\n            disjuncts = (disjunctLists[positions[i]] = new ArrayList<>(\n                termArray.length));\n            ++distinctPositions;\n          }\n          for (final Term term : termArray) {\n            disjuncts.add(new SpanTermQuery(term));\n          }\n        }\n\n        int positionGaps = 0;\n        int position = 0;\n        final SpanQuery[] clauses = new SpanQuery[distinctPositions];\n        for (int i = 0; i < disjunctLists.length; ++i) {\n          List<Query> disjuncts = disjunctLists[i];\n          if (disjuncts != null) {\n            clauses[position++] = new SpanOrQuery(disjuncts\n                .toArray(new SpanQuery[disjuncts.size()]));\n          } else {\n            ++positionGaps;\n          }\n        }\n\n        final int slop = mpq.getSlop();\n        final boolean inorder = (slop == 0);\n\n        SpanNearQuery sp = new SpanNearQuery(clauses, slop + positionGaps,\n                                                      inorder);\n        getPayloads(payloads, sp);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b4a131f1796dd57cc6698aae3d589d32a29deb","date":1457087316,"type":3,"author":"Luc Vanlerberghe","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/payloads/PayloadSpanUtil#queryToSpanQuery(Query,Collection[byte[]]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/payloads/PayloadSpanUtil#queryToSpanQuery(Query,Collection[byte[]]).mjava","sourceNew":"  private void queryToSpanQuery(Query query, Collection<byte[]> payloads)\n      throws IOException {\n    if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          queryToSpanQuery(clause.getQuery(), payloads);\n        }\n      }\n\n    } else if (query instanceof PhraseQuery) {\n      Term[] phraseQueryTerms = ((PhraseQuery) query).getTerms();\n      SpanQuery[] clauses = new SpanQuery[phraseQueryTerms.length];\n      for (int i = 0; i < phraseQueryTerms.length; i++) {\n        clauses[i] = new SpanTermQuery(phraseQueryTerms[i]);\n      }\n\n      int slop = ((PhraseQuery) query).getSlop();\n      boolean inorder = false;\n\n      if (slop == 0) {\n        inorder = true;\n      }\n\n      SpanNearQuery sp = new SpanNearQuery(clauses, slop, inorder);\n      getPayloads(payloads, sp);\n    } else if (query instanceof TermQuery) {\n      SpanTermQuery stq = new SpanTermQuery(((TermQuery) query).getTerm());\n      getPayloads(payloads, stq);\n    } else if (query instanceof SpanQuery) {\n      getPayloads(payloads, (SpanQuery) query);\n    } else if (query instanceof DisjunctionMaxQuery) {\n\n      for (Iterator<Query> iterator = ((DisjunctionMaxQuery) query).iterator(); iterator\n          .hasNext();) {\n        queryToSpanQuery(iterator.next(), payloads);\n      }\n\n    } else if (query instanceof MultiPhraseQuery) {\n      final MultiPhraseQuery mpq = (MultiPhraseQuery) query;\n      final Term[][] termArrays = mpq.getTermArrays();\n      final int[] positions = mpq.getPositions();\n      if (positions.length > 0) {\n\n        int maxPosition = positions[positions.length - 1];\n        for (int i = 0; i < positions.length - 1; ++i) {\n          if (positions[i] > maxPosition) {\n            maxPosition = positions[i];\n          }\n        }\n\n        @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final List<Query>[] disjunctLists =\n            new List[maxPosition + 1];\n        int distinctPositions = 0;\n\n        for (int i = 0; i < termArrays.length; ++i) {\n          final Term[] termArray = termArrays[i];\n          List<Query> disjuncts = disjunctLists[positions[i]];\n          if (disjuncts == null) {\n            disjuncts = (disjunctLists[positions[i]] = new ArrayList<>(\n                termArray.length));\n            ++distinctPositions;\n          }\n          for (final Term term : termArray) {\n            disjuncts.add(new SpanTermQuery(term));\n          }\n        }\n\n        int positionGaps = 0;\n        int position = 0;\n        final SpanQuery[] clauses = new SpanQuery[distinctPositions];\n        for (int i = 0; i < disjunctLists.length; ++i) {\n          List<Query> disjuncts = disjunctLists[i];\n          if (disjuncts != null) {\n            clauses[position++] = new SpanOrQuery(disjuncts\n                .toArray(new SpanQuery[disjuncts.size()]));\n          } else {\n            ++positionGaps;\n          }\n        }\n\n        final int slop = mpq.getSlop();\n        final boolean inorder = (slop == 0);\n\n        SpanNearQuery sp = new SpanNearQuery(clauses, slop + positionGaps,\n                                                      inorder);\n        getPayloads(payloads, sp);\n      }\n    }\n  }\n\n","sourceOld":"  private void queryToSpanQuery(Query query, Collection<byte[]> payloads)\n      throws IOException {\n    if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          queryToSpanQuery(clause.getQuery(), payloads);\n        }\n      }\n\n    } else if (query instanceof PhraseQuery) {\n      Term[] phraseQueryTerms = ((PhraseQuery) query).getTerms();\n      SpanQuery[] clauses = new SpanQuery[phraseQueryTerms.length];\n      for (int i = 0; i < phraseQueryTerms.length; i++) {\n        clauses[i] = new SpanTermQuery(phraseQueryTerms[i]);\n      }\n\n      int slop = ((PhraseQuery) query).getSlop();\n      boolean inorder = false;\n\n      if (slop == 0) {\n        inorder = true;\n      }\n\n      SpanNearQuery sp = new SpanNearQuery(clauses, slop, inorder);\n      getPayloads(payloads, sp);\n    } else if (query instanceof TermQuery) {\n      SpanTermQuery stq = new SpanTermQuery(((TermQuery) query).getTerm());\n      getPayloads(payloads, stq);\n    } else if (query instanceof SpanQuery) {\n      getPayloads(payloads, (SpanQuery) query);\n    } else if (query instanceof DisjunctionMaxQuery) {\n\n      for (Iterator<Query> iterator = ((DisjunctionMaxQuery) query).iterator(); iterator\n          .hasNext();) {\n        queryToSpanQuery(iterator.next(), payloads);\n      }\n\n    } else if (query instanceof MultiPhraseQuery) {\n      final MultiPhraseQuery mpq = (MultiPhraseQuery) query;\n      final List<Term[]> termArrays = mpq.getTermArrays();\n      final int[] positions = mpq.getPositions();\n      if (positions.length > 0) {\n\n        int maxPosition = positions[positions.length - 1];\n        for (int i = 0; i < positions.length - 1; ++i) {\n          if (positions[i] > maxPosition) {\n            maxPosition = positions[i];\n          }\n        }\n\n        @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final List<Query>[] disjunctLists =\n            new List[maxPosition + 1];\n        int distinctPositions = 0;\n\n        for (int i = 0; i < termArrays.size(); ++i) {\n          final Term[] termArray = termArrays.get(i);\n          List<Query> disjuncts = disjunctLists[positions[i]];\n          if (disjuncts == null) {\n            disjuncts = (disjunctLists[positions[i]] = new ArrayList<>(\n                termArray.length));\n            ++distinctPositions;\n          }\n          for (final Term term : termArray) {\n            disjuncts.add(new SpanTermQuery(term));\n          }\n        }\n\n        int positionGaps = 0;\n        int position = 0;\n        final SpanQuery[] clauses = new SpanQuery[distinctPositions];\n        for (int i = 0; i < disjunctLists.length; ++i) {\n          List<Query> disjuncts = disjunctLists[i];\n          if (disjuncts != null) {\n            clauses[position++] = new SpanOrQuery(disjuncts\n                .toArray(new SpanQuery[disjuncts.size()]));\n          } else {\n            ++positionGaps;\n          }\n        }\n\n        final int slop = mpq.getSlop();\n        final boolean inorder = (slop == 0);\n\n        SpanNearQuery sp = new SpanNearQuery(clauses, slop + positionGaps,\n                                                      inorder);\n        getPayloads(payloads, sp);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/payloads/PayloadSpanUtil#queryToSpanQuery(Query,Collection[byte[]]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/payloads/PayloadSpanUtil#queryToSpanQuery(Query,Collection[byte[]]).mjava","sourceNew":"  private void queryToSpanQuery(Query query, Collection<byte[]> payloads)\n      throws IOException {\n    if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          queryToSpanQuery(clause.getQuery(), payloads);\n        }\n      }\n\n    } else if (query instanceof PhraseQuery) {\n      Term[] phraseQueryTerms = ((PhraseQuery) query).getTerms();\n      SpanQuery[] clauses = new SpanQuery[phraseQueryTerms.length];\n      for (int i = 0; i < phraseQueryTerms.length; i++) {\n        clauses[i] = new SpanTermQuery(phraseQueryTerms[i]);\n      }\n\n      int slop = ((PhraseQuery) query).getSlop();\n      boolean inorder = false;\n\n      if (slop == 0) {\n        inorder = true;\n      }\n\n      SpanNearQuery sp = new SpanNearQuery(clauses, slop, inorder);\n      getPayloads(payloads, sp);\n    } else if (query instanceof TermQuery) {\n      SpanTermQuery stq = new SpanTermQuery(((TermQuery) query).getTerm());\n      getPayloads(payloads, stq);\n    } else if (query instanceof SpanQuery) {\n      getPayloads(payloads, (SpanQuery) query);\n    } else if (query instanceof DisjunctionMaxQuery) {\n\n      for (Iterator<Query> iterator = ((DisjunctionMaxQuery) query).iterator(); iterator\n          .hasNext();) {\n        queryToSpanQuery(iterator.next(), payloads);\n      }\n\n    } else if (query instanceof MultiPhraseQuery) {\n      final MultiPhraseQuery mpq = (MultiPhraseQuery) query;\n      final Term[][] termArrays = mpq.getTermArrays();\n      final int[] positions = mpq.getPositions();\n      if (positions.length > 0) {\n\n        int maxPosition = positions[positions.length - 1];\n        for (int i = 0; i < positions.length - 1; ++i) {\n          if (positions[i] > maxPosition) {\n            maxPosition = positions[i];\n          }\n        }\n\n        @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final List<Query>[] disjunctLists =\n            new List[maxPosition + 1];\n        int distinctPositions = 0;\n\n        for (int i = 0; i < termArrays.length; ++i) {\n          final Term[] termArray = termArrays[i];\n          List<Query> disjuncts = disjunctLists[positions[i]];\n          if (disjuncts == null) {\n            disjuncts = (disjunctLists[positions[i]] = new ArrayList<>(\n                termArray.length));\n            ++distinctPositions;\n          }\n          for (final Term term : termArray) {\n            disjuncts.add(new SpanTermQuery(term));\n          }\n        }\n\n        int positionGaps = 0;\n        int position = 0;\n        final SpanQuery[] clauses = new SpanQuery[distinctPositions];\n        for (int i = 0; i < disjunctLists.length; ++i) {\n          List<Query> disjuncts = disjunctLists[i];\n          if (disjuncts != null) {\n            clauses[position++] = new SpanOrQuery(disjuncts\n                .toArray(new SpanQuery[disjuncts.size()]));\n          } else {\n            ++positionGaps;\n          }\n        }\n\n        final int slop = mpq.getSlop();\n        final boolean inorder = (slop == 0);\n\n        SpanNearQuery sp = new SpanNearQuery(clauses, slop + positionGaps,\n                                                      inorder);\n        getPayloads(payloads, sp);\n      }\n    }\n  }\n\n","sourceOld":"  private void queryToSpanQuery(Query query, Collection<byte[]> payloads)\n      throws IOException {\n    if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          queryToSpanQuery(clause.getQuery(), payloads);\n        }\n      }\n\n    } else if (query instanceof PhraseQuery) {\n      Term[] phraseQueryTerms = ((PhraseQuery) query).getTerms();\n      SpanQuery[] clauses = new SpanQuery[phraseQueryTerms.length];\n      for (int i = 0; i < phraseQueryTerms.length; i++) {\n        clauses[i] = new SpanTermQuery(phraseQueryTerms[i]);\n      }\n\n      int slop = ((PhraseQuery) query).getSlop();\n      boolean inorder = false;\n\n      if (slop == 0) {\n        inorder = true;\n      }\n\n      SpanNearQuery sp = new SpanNearQuery(clauses, slop, inorder);\n      getPayloads(payloads, sp);\n    } else if (query instanceof TermQuery) {\n      SpanTermQuery stq = new SpanTermQuery(((TermQuery) query).getTerm());\n      getPayloads(payloads, stq);\n    } else if (query instanceof SpanQuery) {\n      getPayloads(payloads, (SpanQuery) query);\n    } else if (query instanceof DisjunctionMaxQuery) {\n\n      for (Iterator<Query> iterator = ((DisjunctionMaxQuery) query).iterator(); iterator\n          .hasNext();) {\n        queryToSpanQuery(iterator.next(), payloads);\n      }\n\n    } else if (query instanceof MultiPhraseQuery) {\n      final MultiPhraseQuery mpq = (MultiPhraseQuery) query;\n      final List<Term[]> termArrays = mpq.getTermArrays();\n      final int[] positions = mpq.getPositions();\n      if (positions.length > 0) {\n\n        int maxPosition = positions[positions.length - 1];\n        for (int i = 0; i < positions.length - 1; ++i) {\n          if (positions[i] > maxPosition) {\n            maxPosition = positions[i];\n          }\n        }\n\n        @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final List<Query>[] disjunctLists =\n            new List[maxPosition + 1];\n        int distinctPositions = 0;\n\n        for (int i = 0; i < termArrays.size(); ++i) {\n          final Term[] termArray = termArrays.get(i);\n          List<Query> disjuncts = disjunctLists[positions[i]];\n          if (disjuncts == null) {\n            disjuncts = (disjunctLists[positions[i]] = new ArrayList<>(\n                termArray.length));\n            ++distinctPositions;\n          }\n          for (final Term term : termArray) {\n            disjuncts.add(new SpanTermQuery(term));\n          }\n        }\n\n        int positionGaps = 0;\n        int position = 0;\n        final SpanQuery[] clauses = new SpanQuery[distinctPositions];\n        for (int i = 0; i < disjunctLists.length; ++i) {\n          List<Query> disjuncts = disjunctLists[i];\n          if (disjuncts != null) {\n            clauses[position++] = new SpanOrQuery(disjuncts\n                .toArray(new SpanQuery[disjuncts.size()]));\n          } else {\n            ++positionGaps;\n          }\n        }\n\n        final int slop = mpq.getSlop();\n        final boolean inorder = (slop == 0);\n\n        SpanNearQuery sp = new SpanNearQuery(clauses, slop + positionGaps,\n                                                      inorder);\n        getPayloads(payloads, sp);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","92b4a131f1796dd57cc6698aae3d589d32a29deb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["92b4a131f1796dd57cc6698aae3d589d32a29deb","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}