{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedId(ClusterState,String,ZkNodeProps).mjava","commits":[{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedId(ClusterState,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#getAssignedId(CloudState,String,ZkNodeProps).mjava","sourceNew":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final ClusterState state, final String nodeName,\n          final ZkNodeProps coreState) {\n        final String key = coreState.get(ZkStateReader.NODE_NAME_PROP) + \"_\" +  coreState.get(ZkStateReader.CORE_NAME_PROP);\n        Map<String, Slice> slices = state.getSlices(coreState.get(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices.values()) {\n            if (slice.getShards().get(key) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","sourceOld":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final CloudState state, final String nodeName,\n          final ZkNodeProps coreState) {\n        final String key = coreState.get(ZkStateReader.NODE_NAME_PROP) + \"_\" +  coreState.get(ZkStateReader.CORE_NAME_PROP);\n        Map<String, Slice> slices = state.getSlices(coreState.get(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices.values()) {\n            if (slice.getShards().get(key) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedId(ClusterState,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#getAssignedId(CloudState,String,ZkNodeProps).mjava","sourceNew":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final ClusterState state, final String nodeName,\n          final ZkNodeProps coreState) {\n        final String key = coreState.get(ZkStateReader.NODE_NAME_PROP) + \"_\" +  coreState.get(ZkStateReader.CORE_NAME_PROP);\n        Map<String, Slice> slices = state.getSlices(coreState.get(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices.values()) {\n            if (slice.getShards().get(key) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","sourceOld":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final CloudState state, final String nodeName,\n          final ZkNodeProps coreState) {\n        final String key = coreState.get(ZkStateReader.NODE_NAME_PROP) + \"_\" +  coreState.get(ZkStateReader.CORE_NAME_PROP);\n        Map<String, Slice> slices = state.getSlices(coreState.get(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices.values()) {\n            if (slice.getShards().get(key) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedId(ClusterState,String,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final ClusterState state, final String nodeName,\n          final ZkNodeProps coreState) {\n        final String key = coreState.get(ZkStateReader.NODE_NAME_PROP) + \"_\" +  coreState.get(ZkStateReader.CORE_NAME_PROP);\n        Map<String, Slice> slices = state.getSlices(coreState.get(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices.values()) {\n            if (slice.getShards().get(key) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedId(ClusterState,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedId(ClusterState,String,ZkNodeProps).mjava","sourceNew":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final ClusterState state, final String nodeName,\n          final ZkNodeProps coreState) {\n        final String key = coreState.getStr(ZkStateReader.NODE_NAME_PROP) + \"_\" +  coreState.getStr(ZkStateReader.CORE_NAME_PROP);\n        Map<String, Slice> slices = state.getSlices(coreState.getStr(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices.values()) {\n            if (slice.getReplicasMap().get(key) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","sourceOld":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final ClusterState state, final String nodeName,\n          final ZkNodeProps coreState) {\n        final String key = coreState.get(ZkStateReader.NODE_NAME_PROP) + \"_\" +  coreState.get(ZkStateReader.CORE_NAME_PROP);\n        Map<String, Slice> slices = state.getSlices(coreState.get(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices.values()) {\n            if (slice.getShards().get(key) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedId(ClusterState,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedId(ClusterState,String,ZkNodeProps).mjava","sourceNew":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final ClusterState state, final String nodeName,\n          final ZkNodeProps coreState) {\n        final String key = coreState.getStr(ZkStateReader.NODE_NAME_PROP) + \"_\" +  coreState.getStr(ZkStateReader.CORE_NAME_PROP);\n        Collection<Slice> slices = state.getSlices(coreState.getStr(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices) {\n            if (slice.getReplicasMap().get(key) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","sourceOld":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final ClusterState state, final String nodeName,\n          final ZkNodeProps coreState) {\n        final String key = coreState.getStr(ZkStateReader.NODE_NAME_PROP) + \"_\" +  coreState.getStr(ZkStateReader.CORE_NAME_PROP);\n        Map<String, Slice> slices = state.getSlices(coreState.getStr(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices.values()) {\n            if (slice.getReplicasMap().get(key) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedId(ClusterState,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedId(ClusterState,String,ZkNodeProps).mjava","sourceNew":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final ClusterState state, final String nodeName,\n          final ZkNodeProps coreState) {\n        final String key = coreState.getStr(ZkStateReader.NODE_NAME_PROP) + \"_\" +  coreState.getStr(ZkStateReader.CORE_NAME_PROP);\n        Collection<Slice> slices = state.getSlices(coreState.getStr(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices) {\n            if (slice.getReplicasMap().get(key) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","sourceOld":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final ClusterState state, final String nodeName,\n          final ZkNodeProps coreState) {\n        final String key = coreState.getStr(ZkStateReader.NODE_NAME_PROP) + \"_\" +  coreState.getStr(ZkStateReader.CORE_NAME_PROP);\n        Map<String, Slice> slices = state.getSlices(coreState.getStr(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices.values()) {\n            if (slice.getReplicasMap().get(key) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedId(ClusterState,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedId(ClusterState,String,ZkNodeProps).mjava","sourceNew":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final ClusterState state, final String nodeName,\n          final ZkNodeProps coreState) {\n        Collection<Slice> slices = state.getSlices(coreState.getStr(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices) {\n            if (slice.getReplicasMap().get(nodeName) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","sourceOld":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final ClusterState state, final String nodeName,\n          final ZkNodeProps coreState) {\n        final String key = coreState.getStr(ZkStateReader.NODE_NAME_PROP) + \"_\" +  coreState.getStr(ZkStateReader.CORE_NAME_PROP);\n        Collection<Slice> slices = state.getSlices(coreState.getStr(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices) {\n            if (slice.getReplicasMap().get(key) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedId(ClusterState,String,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final ClusterState state, final String nodeName,\n          final ZkNodeProps coreState) {\n        Collection<Slice> slices = state.getSlices(coreState.getStr(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices) {\n            if (slice.getReplicasMap().get(nodeName) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"fa64435b5902ce266c23755a4a00691a3285dab8":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"c5a558d54519c651068ddb202f03befefb1514a7":["fa64435b5902ce266c23755a4a00691a3285dab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["fa64435b5902ce266c23755a4a00691a3285dab8","c5a558d54519c651068ddb202f03befefb1514a7"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["c5a558d54519c651068ddb202f03befefb1514a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["fa64435b5902ce266c23755a4a00691a3285dab8","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fa64435b5902ce266c23755a4a00691a3285dab8":["c5a558d54519c651068ddb202f03befefb1514a7","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"c5a558d54519c651068ddb202f03befefb1514a7":["407687e67faf6e1f02a211ca078d8e3eed631027","cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}