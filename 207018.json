{"path":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv#testBespokeStructures().mjava","commits":[{"id":"c5ec3c464e62e57df598ba20e010313bf6d5d7b4","date":1589998565,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv#testBespokeStructures().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Given a few explicit \"structures\" of requests, test many permutations of various params/options.\n   * This is more complex then {@link #testBespoke} but should still be easier to trace/debug then \n   * a pure random monstrosity.\n   */\n  public void testBespokeStructures() throws Exception {\n    // we don't need to test every field, just make sure we test enough fields to hit every suffix..\n    final int maxFacetFieldNum = Collections.max(Arrays.asList(MULTI_STR_FIELD_SUFFIXES.length,\n                                                               MULTI_INT_FIELD_SUFFIXES.length,\n                                                               SOLO_STR_FIELD_SUFFIXES.length,\n                                                               SOLO_INT_FIELD_SUFFIXES.length));\n    \n    for (int facetFieldNum = 0; facetFieldNum < maxFacetFieldNum; facetFieldNum++) {\n      for (String facetFieldName : Arrays.asList(soloStrField(facetFieldNum), multiStrField(facetFieldNum))) {\n        for (int limit : Arrays.asList(10, -1)) {\n          for (String sort : Arrays.asList(\"count desc\", \"skg desc\", \"index asc\")) {\n            for (Boolean refine : Arrays.asList(false, true)) {\n              { // 1 additional (non-SKG) stat\n                final TermFacet xxx = new TermFacet(facetFieldName, map(\"limit\", limit,\n                                                                        \"overrequest\", 0,\n                                                                        \"sort\", sort,\n                                                                        \"refine\", refine));\n                xxx.subFacets.put(\"sum\", new SumFacet(soloIntField(3)));\n                final Map<String,TermFacet> facets = new LinkedHashMap<>();\n                facets.put(\"xxx1\", xxx);\n                assertFacetSKGsAreConsistent(facets,\n                                             buildORQuery(multiStrField(11) + \":55\",\n                                                          multiStrField(0) + \":46\"),\n                                             multiStrField(5)+\":9\", \"*:*\");\n              }\n              { // multiple SKGs\n                final TermFacet xxx = new TermFacet(facetFieldName, map(\"limit\", limit,\n                                                                        \"overrequest\", 0,\n                                                                        \"sort\", sort,\n                                                                        \"refine\", refine));\n                xxx.subFacets.put(\"skg2\", new RelatednessFacet(multiStrField(2)+\":9\", \"*:*\"));\n                final Map<String,TermFacet> facets = new LinkedHashMap<>();\n                facets.put(\"xxx2\", xxx);\n                assertFacetSKGsAreConsistent(facets,\n                                             buildORQuery(multiStrField(11) + \":55\",\n                                                          multiStrField(0) + \":46\"),\n                                             multiStrField(5)+\":9\", \"*:*\");\n              }\n              { // multiple SKGs and a multiple non-SKG stats\n                final TermFacet xxx = new TermFacet(facetFieldName, map(\"limit\", limit,\n                                                                        \"overrequest\", 0,\n                                                                        \"sort\", sort,\n                                                                        \"refine\", refine));\n                xxx.subFacets.put(\"minAAA\", new SumFacet(soloIntField(3)));\n                xxx.subFacets.put(\"skg2\", new RelatednessFacet(multiStrField(2)+\":9\", \"*:*\"));\n                xxx.subFacets.put(\"minBBB\", new SumFacet(soloIntField(2)));\n                final Map<String,TermFacet> facets = new LinkedHashMap<>();\n                facets.put(\"xxx3\", xxx);\n                assertFacetSKGsAreConsistent(facets,\n                                             buildORQuery(multiStrField(11) + \":55\",\n                                                          multiStrField(0) + \":46\"),\n                                             multiStrField(5)+\":9\", \"*:*\");\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f9e4bd10604489b5817ee29e35ac96a3148cbec","date":1594345357,"type":3,"author":"Michael Gibney","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv#testBespokeStructures().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv#testBespokeStructures().mjava","sourceNew":"  /** \n   * Given a few explicit \"structures\" of requests, test many permutations of various params/options.\n   * This is more complex then {@link #testBespoke} but should still be easier to trace/debug then \n   * a pure random monstrosity.\n   */\n  public void testBespokeStructures() throws Exception {\n    // we don't need to test every field, just make sure we test enough fields to hit every suffix..\n    final int maxFacetFieldNum = Collections.max(Arrays.asList(MULTI_STR_FIELD_SUFFIXES.length,\n                                                               MULTI_INT_FIELD_SUFFIXES.length,\n                                                               SOLO_STR_FIELD_SUFFIXES.length,\n                                                               SOLO_INT_FIELD_SUFFIXES.length));\n    \n    for (int facetFieldNum = 0; facetFieldNum < maxFacetFieldNum; facetFieldNum++) {\n      for (String facetFieldName : Arrays.asList(soloStrField(facetFieldNum), multiStrField(facetFieldNum))) {\n        for (int limit : Arrays.asList(10, -1)) {\n          for (String sort : Arrays.asList(\"count desc\", \"skg desc\", \"index asc\")) {\n            for (Boolean refine : Arrays.asList(false, true)) {\n              { // 1 additional (non-SKG / non-sweeping) stat\n                final TermFacet xxx = new TermFacet(facetFieldName, map(\"limit\", limit,\n                                                                        \"overrequest\", 0,\n                                                                        \"sort\", sort,\n                                                                        \"refine\", refine));\n                xxx.subFacets.put(\"sum\", new SumFacet(soloIntField(3)));\n                final Map<String,TermFacet> facets = new LinkedHashMap<>();\n                facets.put(\"xxx1\", xxx);\n                assertFacetSKGsAreConsistent(facets,\n                                             buildORQuery(multiStrField(11) + \":55\",\n                                                          multiStrField(0) + \":46\"),\n                                             multiStrField(5)+\":9\", \"*:*\");\n              }\n              { // multiple SKGs\n                final TermFacet xxx = new TermFacet(facetFieldName, map(\"limit\", limit,\n                                                                        \"overrequest\", 0,\n                                                                        \"sort\", sort,\n                                                                        \"refine\", refine));\n                xxx.subFacets.put(\"skg2\", new RelatednessFacet(multiStrField(2)+\":9\", \"*:*\"));\n                final Map<String,TermFacet> facets = new LinkedHashMap<>();\n                facets.put(\"xxx2\", xxx);\n                assertFacetSKGsAreConsistent(facets,\n                                             buildORQuery(multiStrField(11) + \":55\",\n                                                          multiStrField(0) + \":46\"),\n                                             multiStrField(5)+\":9\", \"*:*\");\n              }\n              { // multiple SKGs and a multiple non-SKG / non-sweeping stats\n                final TermFacet xxx = new TermFacet(facetFieldName, map(\"limit\", limit,\n                                                                        \"overrequest\", 0,\n                                                                        \"sort\", sort,\n                                                                        \"refine\", refine));\n                xxx.subFacets.put(\"minAAA\", new SumFacet(soloIntField(3)));\n                xxx.subFacets.put(\"skg2\", new RelatednessFacet(multiStrField(2)+\":9\", \"*:*\"));\n                xxx.subFacets.put(\"minBBB\", new SumFacet(soloIntField(2)));\n                final Map<String,TermFacet> facets = new LinkedHashMap<>();\n                facets.put(\"xxx3\", xxx);\n                assertFacetSKGsAreConsistent(facets,\n                                             buildORQuery(multiStrField(11) + \":55\",\n                                                          multiStrField(0) + \":46\"),\n                                             multiStrField(5)+\":9\", \"*:*\");\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Given a few explicit \"structures\" of requests, test many permutations of various params/options.\n   * This is more complex then {@link #testBespoke} but should still be easier to trace/debug then \n   * a pure random monstrosity.\n   */\n  public void testBespokeStructures() throws Exception {\n    // we don't need to test every field, just make sure we test enough fields to hit every suffix..\n    final int maxFacetFieldNum = Collections.max(Arrays.asList(MULTI_STR_FIELD_SUFFIXES.length,\n                                                               MULTI_INT_FIELD_SUFFIXES.length,\n                                                               SOLO_STR_FIELD_SUFFIXES.length,\n                                                               SOLO_INT_FIELD_SUFFIXES.length));\n    \n    for (int facetFieldNum = 0; facetFieldNum < maxFacetFieldNum; facetFieldNum++) {\n      for (String facetFieldName : Arrays.asList(soloStrField(facetFieldNum), multiStrField(facetFieldNum))) {\n        for (int limit : Arrays.asList(10, -1)) {\n          for (String sort : Arrays.asList(\"count desc\", \"skg desc\", \"index asc\")) {\n            for (Boolean refine : Arrays.asList(false, true)) {\n              { // 1 additional (non-SKG) stat\n                final TermFacet xxx = new TermFacet(facetFieldName, map(\"limit\", limit,\n                                                                        \"overrequest\", 0,\n                                                                        \"sort\", sort,\n                                                                        \"refine\", refine));\n                xxx.subFacets.put(\"sum\", new SumFacet(soloIntField(3)));\n                final Map<String,TermFacet> facets = new LinkedHashMap<>();\n                facets.put(\"xxx1\", xxx);\n                assertFacetSKGsAreConsistent(facets,\n                                             buildORQuery(multiStrField(11) + \":55\",\n                                                          multiStrField(0) + \":46\"),\n                                             multiStrField(5)+\":9\", \"*:*\");\n              }\n              { // multiple SKGs\n                final TermFacet xxx = new TermFacet(facetFieldName, map(\"limit\", limit,\n                                                                        \"overrequest\", 0,\n                                                                        \"sort\", sort,\n                                                                        \"refine\", refine));\n                xxx.subFacets.put(\"skg2\", new RelatednessFacet(multiStrField(2)+\":9\", \"*:*\"));\n                final Map<String,TermFacet> facets = new LinkedHashMap<>();\n                facets.put(\"xxx2\", xxx);\n                assertFacetSKGsAreConsistent(facets,\n                                             buildORQuery(multiStrField(11) + \":55\",\n                                                          multiStrField(0) + \":46\"),\n                                             multiStrField(5)+\":9\", \"*:*\");\n              }\n              { // multiple SKGs and a multiple non-SKG stats\n                final TermFacet xxx = new TermFacet(facetFieldName, map(\"limit\", limit,\n                                                                        \"overrequest\", 0,\n                                                                        \"sort\", sort,\n                                                                        \"refine\", refine));\n                xxx.subFacets.put(\"minAAA\", new SumFacet(soloIntField(3)));\n                xxx.subFacets.put(\"skg2\", new RelatednessFacet(multiStrField(2)+\":9\", \"*:*\"));\n                xxx.subFacets.put(\"minBBB\", new SumFacet(soloIntField(2)));\n                final Map<String,TermFacet> facets = new LinkedHashMap<>();\n                facets.put(\"xxx3\", xxx);\n                assertFacetSKGsAreConsistent(facets,\n                                             buildORQuery(multiStrField(11) + \":55\",\n                                                          multiStrField(0) + \":46\"),\n                                             multiStrField(5)+\":9\", \"*:*\");\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5ec3c464e62e57df598ba20e010313bf6d5d7b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2f9e4bd10604489b5817ee29e35ac96a3148cbec":["c5ec3c464e62e57df598ba20e010313bf6d5d7b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f9e4bd10604489b5817ee29e35ac96a3148cbec"]},"commit2Childs":{"c5ec3c464e62e57df598ba20e010313bf6d5d7b4":["2f9e4bd10604489b5817ee29e35ac96a3148cbec"],"2f9e4bd10604489b5817ee29e35ac96a3148cbec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5ec3c464e62e57df598ba20e010313bf6d5d7b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}