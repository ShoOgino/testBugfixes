{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#verify(BKDConfig,Directory,PointWriter,long,long,long,int).mjava","commits":[{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#verify(BKDConfig,Directory,PointWriter,long,long,long,int).mjava","pathOld":"/dev/null","sourceNew":"  private void verify(BKDConfig config, Directory dir, PointWriter points, long start, long end, long middle, int sortedOnHeap) throws IOException{\n    BKDRadixSelector radixSelector = new BKDRadixSelector(config, sortedOnHeap, dir, \"test\");\n    int dataOnlyDims = config.numDims - config.numIndexDims;\n    // we only split by indexed dimension so we check for each only those dimension\n    for (int splitDim = 0; splitDim < config.numIndexDims; splitDim++) {\n      // We need to make a copy of the data as it is deleted in the process\n      BKDRadixSelector.PathSlice inputSlice = new BKDRadixSelector.PathSlice(copyPoints(config, dir, points), 0, points.count());\n      int commonPrefixLengthInput = getRandomCommonPrefix(config, inputSlice, splitDim);\n      BKDRadixSelector.PathSlice[] slices = new BKDRadixSelector.PathSlice[2];\n      byte[] partitionPoint = radixSelector.select(inputSlice, slices, start, end, middle, splitDim, commonPrefixLengthInput);\n      assertEquals(middle - start, slices[0].count);\n      assertEquals(end - middle, slices[1].count);\n      // check that left and right slices contain the correct points\n      byte[] max = getMax(config, slices[0], splitDim);\n      byte[] min = getMin(config, slices[1], splitDim);\n      int cmp = Arrays.compareUnsigned(max, 0, config.bytesPerDim, min, 0, config.bytesPerDim);\n      assertTrue(cmp <= 0);\n      if (cmp == 0) {\n        byte[] maxDataDim = getMaxDataDimension(config, slices[0], max, splitDim);\n        byte[] minDataDim = getMinDataDimension(config, slices[1], min, splitDim);\n        cmp = Arrays.compareUnsigned(maxDataDim, 0, dataOnlyDims * config.bytesPerDim, minDataDim, 0, dataOnlyDims * config.bytesPerDim);\n        assertTrue(cmp <= 0);\n        if (cmp == 0) {\n          int maxDocID = getMaxDocId(config, slices[0], splitDim, partitionPoint, maxDataDim);\n          int minDocId = getMinDocId(config, slices[1], splitDim, partitionPoint, minDataDim);\n          assertTrue(minDocId >= maxDocID);\n        }\n      }\n      assertTrue(Arrays.equals(partitionPoint, min));\n      slices[0].writer.destroy();\n      slices[1].writer.destroy();\n    }\n    points.destroy();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}