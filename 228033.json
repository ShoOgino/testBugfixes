{"path":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(mergeFactor);\n  \n      Iterator<String> iter = dict.getWordsIterator();\n      while (iter.hasNext()) {\n        String word = iter.next();\n  \n        int len = word.length();\n        if (len < 3) {\n          continue; // too short we bail but \"too long\" is fine...\n        }\n  \n        if (this.exist(word)) { // if the word already exist in the gramindex\n          continue;\n        }\n  \n        // ok index the word\n        Document doc = createDocument(word, getMin(len), getMax(len));\n        writer.addDocument(doc);\n      }\n      // close writer\n      writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(mergeFactor);\n  \n      Iterator<String> iter = dict.getWordsIterator();\n      while (iter.hasNext()) {\n        String word = iter.next();\n  \n        int len = word.length();\n        if (len < 3) {\n          continue; // too short we bail but \"too long\" is fine...\n        }\n  \n        if (this.exist(word)) { // if the word already exist in the gramindex\n          continue;\n        }\n  \n        // ok index the word\n        Document doc = createDocument(word, getMin(len), getMax(len));\n        writer.addDocument(doc);\n      }\n      // close writer\n      writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(mergeFactor);\n  \n      Iterator<String> iter = dict.getWordsIterator();\n      while (iter.hasNext()) {\n        String word = iter.next();\n  \n        int len = word.length();\n        if (len < 3) {\n          continue; // too short we bail but \"too long\" is fine...\n        }\n  \n        if (this.exist(word)) { // if the word already exist in the gramindex\n          continue;\n        }\n  \n        // ok index the word\n        Document doc = createDocument(word, getMin(len), getMax(len));\n        writer.addDocument(doc);\n      }\n      // close writer\n      writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(mergeFactor);\n  \n      Iterator<String> iter = dict.getWordsIterator();\n      while (iter.hasNext()) {\n        String word = iter.next();\n  \n        int len = word.length();\n        if (len < 3) {\n          continue; // too short we bail but \"too long\" is fine...\n        }\n  \n        if (this.exist(word)) { // if the word already exist in the gramindex\n          continue;\n        }\n  \n        // ok index the word\n        Document doc = createDocument(word, getMin(len), getMax(len));\n        writer.addDocument(doc);\n      }\n      // close writer\n      writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4646f166374b438da68ac06972ca143d0a54d59","date":1294197416,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict the dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    indexDictionary(dict, mergeFactor, ramMB, true);\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(mergeFactor);\n  \n      Iterator<String> iter = dict.getWordsIterator();\n      while (iter.hasNext()) {\n        String word = iter.next();\n  \n        int len = word.length();\n        if (len < 3) {\n          continue; // too short we bail but \"too long\" is fine...\n        }\n  \n        if (this.exist(word)) { // if the word already exist in the gramindex\n          continue;\n        }\n  \n        // ok index the word\n        Document doc = createDocument(word, getMin(len), getMax(len));\n        writer.addDocument(doc);\n      }\n      // close writer\n      writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict the dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    indexDictionary(dict, mergeFactor, ramMB, true);\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(mergeFactor);\n  \n      Iterator<String> iter = dict.getWordsIterator();\n      while (iter.hasNext()) {\n        String word = iter.next();\n  \n        int len = word.length();\n        if (len < 3) {\n          continue; // too short we bail but \"too long\" is fine...\n        }\n  \n        if (this.exist(word)) { // if the word already exist in the gramindex\n          continue;\n        }\n  \n        // ok index the word\n        Document doc = createDocument(word, getMin(len), getMax(len));\n        writer.addDocument(doc);\n      }\n      // close writer\n      writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict the dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    indexDictionary(dict, mergeFactor, ramMB, true);\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(mergeFactor);\n  \n      Iterator<String> iter = dict.getWordsIterator();\n      while (iter.hasNext()) {\n        String word = iter.next();\n  \n        int len = word.length();\n        if (len < 3) {\n          continue; // too short we bail but \"too long\" is fine...\n        }\n  \n        if (this.exist(word)) { // if the word already exist in the gramindex\n          continue;\n        }\n  \n        // ok index the word\n        Document doc = createDocument(word, getMin(len), getMax(len));\n        writer.addDocument(doc);\n      }\n      // close writer\n      writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict the dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    indexDictionary(dict, mergeFactor, ramMB, true);\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict the dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    indexDictionary(dict, mergeFactor, ramMB, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict the dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    indexDictionary(dict, mergeFactor, ramMB, true);\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict the dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    indexDictionary(dict, mergeFactor, ramMB, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict the dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    indexDictionary(dict, mergeFactor, ramMB, true);\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict the dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    indexDictionary(dict, mergeFactor, ramMB, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["7ab99e8c71442b92c320e218141dee04a9b91ce8","d4646f166374b438da68ac06972ca143d0a54d59"],"e230a61047bc041516c811baa08a7174d6f8322a":["d4646f166374b438da68ac06972ca143d0a54d59"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["d4646f166374b438da68ac06972ca143d0a54d59","e230a61047bc041516c811baa08a7174d6f8322a"],"d4646f166374b438da68ac06972ca143d0a54d59":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7ab99e8c71442b92c320e218141dee04a9b91ce8","d4646f166374b438da68ac06972ca143d0a54d59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e230a61047bc041516c811baa08a7174d6f8322a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["70ad682703b8585f5d0a637efec044d57ec05efb","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["70ad682703b8585f5d0a637efec044d57ec05efb","d4646f166374b438da68ac06972ca143d0a54d59","868da859b43505d9d2a023bfeae6dd0c795f5295"],"e230a61047bc041516c811baa08a7174d6f8322a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"d4646f166374b438da68ac06972ca143d0a54d59":["70ad682703b8585f5d0a637efec044d57ec05efb","e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}