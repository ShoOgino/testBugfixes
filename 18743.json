{"path":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a66bd69cd26cbc71647b0971089f240b2ea82edc","date":1312150123,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        Exception qParserException = null;\n\n        if (field == null || !Character.isWhitespace(sp.peekChar())) {\n          // let's try it as a function instead\n          field = null;\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (IOException ioe) {\n            throw ioe;\n          } catch (Exception e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":["99a0a11f7c74df84d85cdc7a8e0a62f2813e179a","0883328ff2cc09b5c999d05c04e16530d819c627"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6d3fca4763c45f22581927b942c808dbb2e2aec","date":1347304121,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= &lt;fieldname&gt; SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        Exception qParserException = null;\n\n        if (field == null || !Character.isWhitespace(sp.peekChar())) {\n          // let's try it as a function instead\n          field = null;\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (IOException ioe) {\n            throw ioe;\n          } catch (Exception e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        Exception qParserException = null;\n\n        if (field == null || !Character.isWhitespace(sp.peekChar())) {\n          // let's try it as a function instead\n          field = null;\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (IOException ioe) {\n            throw ioe;\n          } catch (Exception e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19a825d272deb49d9a48c75dd024c02d4e166512","date":1351763614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= &lt;fieldname&gt; SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        Exception qParserException = null;\n\n        if (field == null || !Character.isWhitespace(sp.peekChar())) {\n          // let's try it as a function instead\n          field = null;\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (Exception e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= &lt;fieldname&gt; SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        Exception qParserException = null;\n\n        if (field == null || !Character.isWhitespace(sp.peekChar())) {\n          // let's try it as a function instead\n          field = null;\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (IOException ioe) {\n            throw ioe;\n          } catch (Exception e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= &lt;fieldname&gt; SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        Exception qParserException = null;\n\n        if (field == null || !Character.isWhitespace(sp.peekChar())) {\n          // let's try it as a function instead\n          field = null;\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (Exception e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= &lt;fieldname&gt; SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        Exception qParserException = null;\n\n        if (field == null || !Character.isWhitespace(sp.peekChar())) {\n          // let's try it as a function instead\n          field = null;\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (Exception e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= &lt;fieldname&gt; SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        Exception qParserException = null;\n\n        if (field == null || !Character.isWhitespace(sp.peekChar())) {\n          // let's try it as a function instead\n          field = null;\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (Exception e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= &lt;fieldname&gt; SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        Exception qParserException = null;\n\n        if (field == null || !Character.isWhitespace(sp.peekChar())) {\n          // let's try it as a function instead\n          field = null;\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (Exception e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02453e8d9fe1bde22dc7676145ad809cb1dbfcad","date":1386084179,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /** \n   * Returns the Sort object represented by the string, or null if default sort \n   * by score descending should be used.\n   * @see #parseSortSpec\n   * @deprecated use {@link #parseSortSpec} \n   */\n  @Deprecated\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    return parseSortSpec(sortSpec, req).getSort();\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= &lt;fieldname&gt; SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        Exception qParserException = null;\n\n        if (field == null || !Character.isWhitespace(sp.peekChar())) {\n          // let's try it as a function instead\n          field = null;\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (Exception e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /** \n   * Returns the Sort object represented by the string, or null if default sort \n   * by score descending should be used.\n   * @see #parseSortSpec\n   * @deprecated use {@link #parseSortSpec} \n   */\n  @Deprecated\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    return parseSortSpec(sortSpec, req).getSort();\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= &lt;fieldname&gt; SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        Exception qParserException = null;\n\n        if (field == null || !Character.isWhitespace(sp.peekChar())) {\n          // let's try it as a function instead\n          field = null;\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (Exception e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fc9f4a33c8fefeb1260aea04273a36b0d32378e","date":1421852764,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":null,"sourceOld":"  /** \n   * Returns the Sort object represented by the string, or null if default sort \n   * by score descending should be used.\n   * @see #parseSortSpec\n   * @deprecated use {@link #parseSortSpec} \n   */\n  @Deprecated\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    return parseSortSpec(sortSpec, req).getSort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19a825d272deb49d9a48c75dd024c02d4e166512":["a6d3fca4763c45f22581927b942c808dbb2e2aec"],"3cdb67100dc016748799a77218aa409478372d79":["19a825d272deb49d9a48c75dd024c02d4e166512"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"407687e67faf6e1f02a211ca078d8e3eed631027":["19a825d272deb49d9a48c75dd024c02d4e166512","3cdb67100dc016748799a77218aa409478372d79"],"a6d3fca4763c45f22581927b942c808dbb2e2aec":["a66bd69cd26cbc71647b0971089f240b2ea82edc"],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["02453e8d9fe1bde22dc7676145ad809cb1dbfcad"],"a66bd69cd26cbc71647b0971089f240b2ea82edc":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"02453e8d9fe1bde22dc7676145ad809cb1dbfcad":["3cdb67100dc016748799a77218aa409478372d79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["3cdb67100dc016748799a77218aa409478372d79","02453e8d9fe1bde22dc7676145ad809cb1dbfcad"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"]},"commit2Childs":{"19a825d272deb49d9a48c75dd024c02d4e166512":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","02453e8d9fe1bde22dc7676145ad809cb1dbfcad","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"c26f00b574427b55127e869b935845554afde1fa":["a66bd69cd26cbc71647b0971089f240b2ea82edc"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"a6d3fca4763c45f22581927b942c808dbb2e2aec":["19a825d272deb49d9a48c75dd024c02d4e166512"],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a66bd69cd26cbc71647b0971089f240b2ea82edc":["a6d3fca4763c45f22581927b942c808dbb2e2aec"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"02453e8d9fe1bde22dc7676145ad809cb1dbfcad":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}