{"path":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(Random,CharacterRunAutomaton,boolean,CharacterRunAutomaton,boolean).mjava","commits":[{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(Random,CharacterRunAutomaton,boolean,CharacterRunAutomaton,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(CharacterRunAutomaton,boolean,CharacterRunAutomaton,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new MockAnalyzer.\n   * \n   * @param random Random for payloads behavior\n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   * @param filter DFA describing how terms should be filtered (set of stopwords, etc)\n   * @param enablePositionIncrements true if position increments should reflect filtered terms.\n   * @param payload if payloads should be added containing the positions (for testing)\n   */\n  public MockAnalyzer(Random random, CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements) {\n    this.random = random;\n    this.runAutomaton = runAutomaton;\n    this.lowerCase = lowerCase;\n    this.filter = filter;\n    this.enablePositionIncrements = enablePositionIncrements;\n  }\n\n","sourceOld":"  /**\n   * Creates a new MockAnalyzer.\n   * \n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   * @param filter DFA describing how terms should be filtered (set of stopwords, etc)\n   * @param enablePositionIncrements true if position increments should reflect filtered terms.\n   * @param payload if payloads should be added containing the positions (for testing)\n   */\n  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements, boolean payload) {\n    this.runAutomaton = runAutomaton;\n    this.lowerCase = lowerCase;\n    this.filter = filter;\n    this.enablePositionIncrements = enablePositionIncrements;\n    this.payload = payload;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fb3ed3dc28c2be2ead46d22c30295c7d1da6685","date":1302577285,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(Random,CharacterRunAutomaton,boolean,CharacterRunAutomaton,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(Random,CharacterRunAutomaton,boolean,CharacterRunAutomaton,boolean).mjava","sourceNew":"  /**\n   * Creates a new MockAnalyzer.\n   * \n   * @param random Random for payloads behavior\n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   * @param filter DFA describing how terms should be filtered (set of stopwords, etc)\n   * @param enablePositionIncrements true if position increments should reflect filtered terms.\n   */\n  public MockAnalyzer(Random random, CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements) {\n    this.random = random;\n    this.runAutomaton = runAutomaton;\n    this.lowerCase = lowerCase;\n    this.filter = filter;\n    this.enablePositionIncrements = enablePositionIncrements;\n  }\n\n","sourceOld":"  /**\n   * Creates a new MockAnalyzer.\n   * \n   * @param random Random for payloads behavior\n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   * @param filter DFA describing how terms should be filtered (set of stopwords, etc)\n   * @param enablePositionIncrements true if position increments should reflect filtered terms.\n   * @param payload if payloads should be added containing the positions (for testing)\n   */\n  public MockAnalyzer(Random random, CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements) {\n    this.random = random;\n    this.runAutomaton = runAutomaton;\n    this.lowerCase = lowerCase;\n    this.filter = filter;\n    this.enablePositionIncrements = enablePositionIncrements;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(Random,CharacterRunAutomaton,boolean,CharacterRunAutomaton,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(CharacterRunAutomaton,boolean,CharacterRunAutomaton,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new MockAnalyzer.\n   * \n   * @param random Random for payloads behavior\n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   * @param filter DFA describing how terms should be filtered (set of stopwords, etc)\n   * @param enablePositionIncrements true if position increments should reflect filtered terms.\n   */\n  public MockAnalyzer(Random random, CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements) {\n    this.random = random;\n    this.runAutomaton = runAutomaton;\n    this.lowerCase = lowerCase;\n    this.filter = filter;\n    this.enablePositionIncrements = enablePositionIncrements;\n  }\n\n","sourceOld":"  /**\n   * Creates a new MockAnalyzer.\n   * \n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   * @param filter DFA describing how terms should be filtered (set of stopwords, etc)\n   * @param enablePositionIncrements true if position increments should reflect filtered terms.\n   * @param payload if payloads should be added\n   */\n  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements, boolean payload) {\n    this.runAutomaton = runAutomaton;\n    this.lowerCase = lowerCase;\n    this.filter = filter;\n    this.enablePositionIncrements = enablePositionIncrements;\n    this.payload = payload;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(Random,CharacterRunAutomaton,boolean,CharacterRunAutomaton,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new MockAnalyzer.\n   * \n   * @param random Random for payloads behavior\n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   * @param filter DFA describing how terms should be filtered (set of stopwords, etc)\n   * @param enablePositionIncrements true if position increments should reflect filtered terms.\n   */\n  public MockAnalyzer(Random random, CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements) {\n    this.random = random;\n    this.runAutomaton = runAutomaton;\n    this.lowerCase = lowerCase;\n    this.filter = filter;\n    this.enablePositionIncrements = enablePositionIncrements;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(Random,CharacterRunAutomaton,boolean,CharacterRunAutomaton,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new MockAnalyzer.\n   * \n   * @param random Random for payloads behavior\n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   * @param filter DFA describing how terms should be filtered (set of stopwords, etc)\n   * @param enablePositionIncrements true if position increments should reflect filtered terms.\n   */\n  public MockAnalyzer(Random random, CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements) {\n    this.random = random;\n    this.runAutomaton = runAutomaton;\n    this.lowerCase = lowerCase;\n    this.filter = filter;\n    this.enablePositionIncrements = enablePositionIncrements;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53ae89cd75b0acbdfb8890710c6742f3fb80e65d","date":1315806626,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(Random,CharacterRunAutomaton,boolean,CharacterRunAutomaton,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(Random,CharacterRunAutomaton,boolean,CharacterRunAutomaton,boolean).mjava","sourceNew":"  /**\n   * Creates a new MockAnalyzer.\n   * \n   * @param random Random for payloads behavior\n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   * @param filter DFA describing how terms should be filtered (set of stopwords, etc)\n   * @param enablePositionIncrements true if position increments should reflect filtered terms.\n   */\n  public MockAnalyzer(Random random, CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements) {\n    super(new PerFieldReuseStrategy());\n    this.random = random;\n    this.runAutomaton = runAutomaton;\n    this.lowerCase = lowerCase;\n    this.filter = filter;\n    this.enablePositionIncrements = enablePositionIncrements;\n  }\n\n","sourceOld":"  /**\n   * Creates a new MockAnalyzer.\n   * \n   * @param random Random for payloads behavior\n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   * @param filter DFA describing how terms should be filtered (set of stopwords, etc)\n   * @param enablePositionIncrements true if position increments should reflect filtered terms.\n   */\n  public MockAnalyzer(Random random, CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements) {\n    this.random = random;\n    this.runAutomaton = runAutomaton;\n    this.lowerCase = lowerCase;\n    this.filter = filter;\n    this.enablePositionIncrements = enablePositionIncrements;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(Random,CharacterRunAutomaton,boolean,CharacterRunAutomaton,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(Random,CharacterRunAutomaton,boolean,CharacterRunAutomaton,boolean).mjava","sourceNew":"  /**\n   * Creates a new MockAnalyzer.\n   * \n   * @param random Random for payloads behavior\n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   * @param filter DFA describing how terms should be filtered (set of stopwords, etc)\n   * @param enablePositionIncrements true if position increments should reflect filtered terms.\n   */\n  public MockAnalyzer(Random random, CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements) {\n    super(new PerFieldReuseStrategy());\n    this.random = random;\n    this.runAutomaton = runAutomaton;\n    this.lowerCase = lowerCase;\n    this.filter = filter;\n    this.enablePositionIncrements = enablePositionIncrements;\n  }\n\n","sourceOld":"  /**\n   * Creates a new MockAnalyzer.\n   * \n   * @param random Random for payloads behavior\n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   * @param filter DFA describing how terms should be filtered (set of stopwords, etc)\n   * @param enablePositionIncrements true if position increments should reflect filtered terms.\n   */\n  public MockAnalyzer(Random random, CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements) {\n    super(new PerFieldReuseStrategy());\n    this.random = random;\n    this.runAutomaton = runAutomaton;\n    this.lowerCase = lowerCase;\n    this.filter = filter;\n    this.enablePositionIncrements = enablePositionIncrements;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7fb3ed3dc28c2be2ead46d22c30295c7d1da6685"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7fb3ed3dc28c2be2ead46d22c30295c7d1da6685"],"962d04139994fce5193143ef35615499a9a96d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7fb3ed3dc28c2be2ead46d22c30295c7d1da6685"],"7fb3ed3dc28c2be2ead46d22c30295c7d1da6685":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["7fb3ed3dc28c2be2ead46d22c30295c7d1da6685"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["7fb3ed3dc28c2be2ead46d22c30295c7d1da6685"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"7fb3ed3dc28c2be2ead46d22c30295c7d1da6685":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}