{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReaderIndex#getTerm(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReaderIndex#getTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReaderIndex#getTerm(int).mjava","sourceNew":"  /**\n   * Gets the term at the given position.  For testing.\n   * \n   * @param termIndex\n   *          the position to read the term from the index.\n   * @return the term.\n   * @throws IOException\n   */\n  Term getTerm(int termIndex) throws IOException {\n    PagedBytesDataInput input = (PagedBytesDataInput) dataInput.clone();\n    input.setPosition(indexToDataOffset.get(termIndex));\n\n    // read the term\n    int fieldId = input.readVInt();\n    Term field = fields[fieldId];\n    return new Term(field.field(), input.readString());\n  }\n\n","sourceOld":"  /**\n   * Gets the term at the given position.  For testing.\n   * \n   * @param termIndex\n   *          the position to read the term from the index.\n   * @return the term.\n   * @throws IOException\n   */\n  Term getTerm(int termIndex) throws IOException {\n    PagedBytesDataInput input = (PagedBytesDataInput) dataInput.clone();\n    input.setPosition(indexToDataOffset.get(termIndex));\n\n    // read the term\n    int fieldId = input.readVInt();\n    Term field = fields[fieldId];\n    return new Term(field.field(), input.readString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d5903979ca52514d2bc7e3a362e1c45885c94","date":1333042474,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReaderIndex#getTerm(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReaderIndex#getTerm(int).mjava","sourceNew":"  /**\n   * Gets the term at the given position.  For testing.\n   * \n   * @param termIndex\n   *          the position to read the term from the index.\n   * @return the term.\n   * @throws IOException\n   */\n  Term getTerm(int termIndex) throws IOException {\n    PagedBytesDataInput input = dataInput.clone();\n    input.setPosition(indexToDataOffset.get(termIndex));\n\n    // read the term\n    int fieldId = input.readVInt();\n    Term field = fields[fieldId];\n    return new Term(field.field(), input.readString());\n  }\n\n","sourceOld":"  /**\n   * Gets the term at the given position.  For testing.\n   * \n   * @param termIndex\n   *          the position to read the term from the index.\n   * @return the term.\n   * @throws IOException\n   */\n  Term getTerm(int termIndex) throws IOException {\n    PagedBytesDataInput input = (PagedBytesDataInput) dataInput.clone();\n    input.setPosition(indexToDataOffset.get(termIndex));\n\n    // read the term\n    int fieldId = input.readVInt();\n    Term field = fields[fieldId];\n    return new Term(field.field(), input.readString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReaderIndex#getTerm(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Gets the term at the given position.  For testing.\n   * \n   * @param termIndex\n   *          the position to read the term from the index.\n   * @return the term.\n   * @throws IOException\n   */\n  Term getTerm(int termIndex) throws IOException {\n    PagedBytesDataInput input = dataInput.clone();\n    input.setPosition(indexToDataOffset.get(termIndex));\n\n    // read the term\n    int fieldId = input.readVInt();\n    Term field = fields[fieldId];\n    return new Term(field.field(), input.readString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"399d5903979ca52514d2bc7e3a362e1c45885c94":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}