{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d207426bd26fa5c1014e26d21d87603aea68b7","date":1327944562,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ede171727c5c1ee9baddf5393d661bc2f7d88a2","date":1337961306,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    if (nDocs == 0) {\n      // SOLR-2923\n      return new DocSlice(0, 0, new int[0], null, 0, 0f);\n    }\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    if (nDocs == 0) {\n      // SOLR-2923\n      return new DocSlice(0, 0, new int[0], null, 0, 0f);\n    }\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    if (nDocs == 0) {\n      // SOLR-2923\n      return new DocSlice(0, 0, new int[0], null, 0, 0f);\n    }\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(QueryResult,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected void sortDocSet(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocSet set = qr.getDocListAndSet().docSet;\n    int nDocs = cmd.getSupersetMaxDoc();\n    if (nDocs == 0) {\n      // SOLR-2923\n      qr.getDocListAndSet().docList = new DocSlice(0, 0, new int[0], null, set.size(), 0f);\n      qr.setNextCursorMark(cmd.getCursorMark());\n      return;\n    }\n\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = buildTopDocsCollector(nDocs, cmd);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    qr.getDocListAndSet().docList = new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n    populateNextCursorMarkFromTopDocs(qr, cmd, topDocs);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    if (nDocs == 0) {\n      // SOLR-2923\n      return new DocSlice(0, 0, new int[0], null, 0, 0f);\n    }\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["4ede171727c5c1ee9baddf5393d661bc2f7d88a2"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4ede171727c5c1ee9baddf5393d661bc2f7d88a2":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96d207426bd26fa5c1014e26d21d87603aea68b7":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["c26f00b574427b55127e869b935845554afde1fa","96d207426bd26fa5c1014e26d21d87603aea68b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"]},"commit2Childs":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["96d207426bd26fa5c1014e26d21d87603aea68b7","5cab9a86bd67202d20b6adc463008c8e982b070a"],"4ede171727c5c1ee9baddf5393d661bc2f7d88a2":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["4ede171727c5c1ee9baddf5393d661bc2f7d88a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}