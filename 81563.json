{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n      for( Object v : field ) {\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        }else if (v instanceof byte[]) {\n          byte[] bytes = (byte[]) v;\n          v = Base64.byteArrayToBase64(bytes, 0,bytes.length);\n        } else if (v instanceof ByteBuffer) {\n          ByteBuffer bytes = (ByteBuffer) v;\n          v = Base64.byteArrayToBase64(bytes.array(), bytes.position(),bytes.limit() - bytes.position());\n        }\n\n        if( boost != 1.0f ) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n        } else if (v != null) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n      for( Object v : field ) {\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        }else if (v instanceof byte[]) {\n          byte[] bytes = (byte[]) v;\n          v = Base64.byteArrayToBase64(bytes, 0,bytes.length);\n        } else if (v instanceof ByteBuffer) {\n          ByteBuffer bytes = (ByteBuffer) v;\n          v = Base64.byteArrayToBase64(bytes.array(), bytes.position(),bytes.limit() - bytes.position());\n        }\n\n        if( boost != 1.0f ) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n        } else if (v != null) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n      for( Object v : field ) {\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        }else if (v instanceof byte[]) {\n          byte[] bytes = (byte[]) v;\n          v = Base64.byteArrayToBase64(bytes, 0,bytes.length);\n        } else if (v instanceof ByteBuffer) {\n          ByteBuffer bytes = (ByteBuffer) v;\n          v = Base64.byteArrayToBase64(bytes.array(), bytes.position(),bytes.limit() - bytes.position());\n        }\n\n        if( boost != 1.0f ) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n        } else if (v != null) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n      for( Object v : field ) {\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        }else if (v instanceof byte[]) {\n          byte[] bytes = (byte[]) v;\n          v = Base64.byteArrayToBase64(bytes, 0,bytes.length);\n        } else if (v instanceof ByteBuffer) {\n          ByteBuffer bytes = (ByteBuffer) v;\n          v = Base64.byteArrayToBase64(bytes.array(), bytes.position(),bytes.limit() - bytes.position());\n        }\n\n        if( boost != 1.0f ) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n        } else if (v != null) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n      for( Object v : field ) {\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        }else if (v instanceof byte[]) {\n          byte[] bytes = (byte[]) v;\n          v = Base64.byteArrayToBase64(bytes, 0,bytes.length);\n        } else if (v instanceof ByteBuffer) {\n          ByteBuffer bytes = (ByteBuffer) v;\n          v = Base64.byteArrayToBase64(bytes.array(), bytes.position(),bytes.limit() - bytes.position());\n        }\n\n        if( boost != 1.0f ) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n        } else if (v != null) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n      for( Object v : field ) {\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        }else if (v instanceof byte[]) {\n          byte[] bytes = (byte[]) v;\n          v = Base64.byteArrayToBase64(bytes, 0,bytes.length);\n        } else if (v instanceof ByteBuffer) {\n          ByteBuffer bytes = (ByteBuffer) v;\n          v = Base64.byteArrayToBase64(bytes.array(), bytes.position(),bytes.limit() - bytes.position());\n        }\n\n        if( boost != 1.0f ) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n        } else if (v != null) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bea3922196318026c4274f2013416acb60c691e","date":1336496433,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n\n      for( Object v : field ) {\n        String update = null;\n\n        if (v instanceof Map) {\n          // currently only supports a single value\n          for (Entry<Object,Object> entry : ((Map<Object,Object>)v).entrySet()) {\n            update = entry.getKey().toString();\n            Object fieldVal = entry.getValue();\n            v = fieldVal;\n          }\n        }\n\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        } else if (v instanceof byte[]) {\n          byte[] bytes = (byte[]) v;\n          v = Base64.byteArrayToBase64(bytes, 0,bytes.length);\n        } else if (v instanceof ByteBuffer) {\n          ByteBuffer bytes = (ByteBuffer) v;\n          v = Base64.byteArrayToBase64(bytes.array(), bytes.position(),bytes.limit() - bytes.position());\n        }\n\n        if (update == null) {\n          if( boost != 1.0f ) {\n            XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n          } else if (v != null) {\n            XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n          }\n        } else {\n          if( boost != 1.0f ) {\n            XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost, \"update\", update);\n          } else if (v != null) {\n            XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"update\", update);\n          }\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n      for( Object v : field ) {\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        }else if (v instanceof byte[]) {\n          byte[] bytes = (byte[]) v;\n          v = Base64.byteArrayToBase64(bytes, 0,bytes.length);\n        } else if (v instanceof ByteBuffer) {\n          ByteBuffer bytes = (ByteBuffer) v;\n          v = Base64.byteArrayToBase64(bytes.array(), bytes.position(),bytes.limit() - bytes.position());\n        }\n\n        if( boost != 1.0f ) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n        } else if (v != null) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42fa1b1a7816a1e1853b685183b07a976bc37560","date":1356094868,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n\n      for( Object v : field ) {\n        String update = null;\n\n        if (v instanceof Map) {\n          // currently only supports a single value\n          for (Entry<Object,Object> entry : ((Map<Object,Object>)v).entrySet()) {\n            update = entry.getKey().toString();\n            v = entry.getValue();\n            if (v instanceof Collection) {\n              Collection values = (Collection) v;\n              for (Object value : values) {\n                writeVal(writer, boost, name, value, update);\n                boost = 1.0f;\n              }\n            } else  {\n              writeVal(writer, boost, name, v, update);\n              boost = 1.0f;\n            }\n          }\n        } else  {\n          writeVal(writer, boost, name, v, update);\n          // only write the boost for the first multi-valued field\n          // otherwise, the used boost is the product of all the boost values\n          boost = 1.0f;\n        }\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n\n      for( Object v : field ) {\n        String update = null;\n\n        if (v instanceof Map) {\n          // currently only supports a single value\n          for (Entry<Object,Object> entry : ((Map<Object,Object>)v).entrySet()) {\n            update = entry.getKey().toString();\n            Object fieldVal = entry.getValue();\n            v = fieldVal;\n          }\n        }\n\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        } else if (v instanceof byte[]) {\n          byte[] bytes = (byte[]) v;\n          v = Base64.byteArrayToBase64(bytes, 0,bytes.length);\n        } else if (v instanceof ByteBuffer) {\n          ByteBuffer bytes = (ByteBuffer) v;\n          v = Base64.byteArrayToBase64(bytes.array(), bytes.position(),bytes.limit() - bytes.position());\n        }\n\n        if (update == null) {\n          if( boost != 1.0f ) {\n            XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n          } else if (v != null) {\n            XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n          }\n        } else {\n          if( boost != 1.0f ) {\n            XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost, \"update\", update);\n          } else if (v != null) {\n            XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"update\", update);\n          }\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n\n      for( Object v : field ) {\n        String update = null;\n\n        if (v instanceof Map) {\n          // currently only supports a single value\n          for (Entry<Object,Object> entry : ((Map<Object,Object>)v).entrySet()) {\n            update = entry.getKey().toString();\n            v = entry.getValue();\n            if (v instanceof Collection) {\n              Collection values = (Collection) v;\n              for (Object value : values) {\n                writeVal(writer, boost, name, value, update);\n                boost = 1.0f;\n              }\n            } else  {\n              writeVal(writer, boost, name, v, update);\n              boost = 1.0f;\n            }\n          }\n        } else  {\n          writeVal(writer, boost, name, v, update);\n          // only write the boost for the first multi-valued field\n          // otherwise, the used boost is the product of all the boost values\n          boost = 1.0f;\n        }\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n\n      for( Object v : field ) {\n        String update = null;\n\n        if (v instanceof Map) {\n          // currently only supports a single value\n          for (Entry<Object,Object> entry : ((Map<Object,Object>)v).entrySet()) {\n            update = entry.getKey().toString();\n            Object fieldVal = entry.getValue();\n            v = fieldVal;\n          }\n        }\n\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        } else if (v instanceof byte[]) {\n          byte[] bytes = (byte[]) v;\n          v = Base64.byteArrayToBase64(bytes, 0,bytes.length);\n        } else if (v instanceof ByteBuffer) {\n          ByteBuffer bytes = (ByteBuffer) v;\n          v = Base64.byteArrayToBase64(bytes.array(), bytes.position(),bytes.limit() - bytes.position());\n        }\n\n        if (update == null) {\n          if( boost != 1.0f ) {\n            XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n          } else if (v != null) {\n            XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n          }\n        } else {\n          if( boost != 1.0f ) {\n            XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost, \"update\", update);\n          } else if (v != null) {\n            XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"update\", update);\n          }\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"637a392e2e05d4e1179ac3c532cfeef0cde977ba","date":1376347977,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n\n      for( Object v : field ) {\n        String update = null;\n\n        if (v instanceof Map) {\n          // currently only supports a single value\n          for (Entry<Object,Object> entry : ((Map<Object,Object>)v).entrySet()) {\n            update = entry.getKey().toString();\n            v = entry.getValue();\n            if (v instanceof Collection) {\n              Collection values = (Collection) v;\n              for (Object value : values) {\n                writeVal(writer, boost, name, value, update);\n                boost = 1.0f;\n              }\n            } else  {\n              writeVal(writer, boost, name, v, update);\n              boost = 1.0f;\n            }\n          }\n        } else  {\n          writeVal(writer, boost, name, v, update);\n          // only write the boost for the first multi-valued field\n          // otherwise, the used boost is the product of all the boost values\n          boost = 1.0f;\n        }\n      }\n    }\n    \n    for (SolrInputDocument childDocument : doc.getChildDocuments()) {\n      writeXML(childDocument, writer);\n    }\n    \n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n\n      for( Object v : field ) {\n        String update = null;\n\n        if (v instanceof Map) {\n          // currently only supports a single value\n          for (Entry<Object,Object> entry : ((Map<Object,Object>)v).entrySet()) {\n            update = entry.getKey().toString();\n            v = entry.getValue();\n            if (v instanceof Collection) {\n              Collection values = (Collection) v;\n              for (Object value : values) {\n                writeVal(writer, boost, name, value, update);\n                boost = 1.0f;\n              }\n            } else  {\n              writeVal(writer, boost, name, v, update);\n              boost = 1.0f;\n            }\n          }\n        } else  {\n          writeVal(writer, boost, name, v, update);\n          // only write the boost for the first multi-valued field\n          // otherwise, the used boost is the product of all the boost values\n          boost = 1.0f;\n        }\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n\n      for( Object v : field ) {\n        String update = null;\n\n        if (v instanceof Map) {\n          // currently only supports a single value\n          for (Entry<Object,Object> entry : ((Map<Object,Object>)v).entrySet()) {\n            update = entry.getKey().toString();\n            v = entry.getValue();\n            if (v instanceof Collection) {\n              Collection values = (Collection) v;\n              for (Object value : values) {\n                writeVal(writer, boost, name, value, update);\n                boost = 1.0f;\n              }\n            } else  {\n              writeVal(writer, boost, name, v, update);\n              boost = 1.0f;\n            }\n          }\n        } else  {\n          writeVal(writer, boost, name, v, update);\n          // only write the boost for the first multi-valued field\n          // otherwise, the used boost is the product of all the boost values\n          boost = 1.0f;\n        }\n      }\n    }\n    \n    for (SolrInputDocument childDocument : doc.getChildDocuments()) {\n      writeXML(childDocument, writer);\n    }\n    \n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n\n      for( Object v : field ) {\n        String update = null;\n\n        if (v instanceof Map) {\n          // currently only supports a single value\n          for (Entry<Object,Object> entry : ((Map<Object,Object>)v).entrySet()) {\n            update = entry.getKey().toString();\n            v = entry.getValue();\n            if (v instanceof Collection) {\n              Collection values = (Collection) v;\n              for (Object value : values) {\n                writeVal(writer, boost, name, value, update);\n                boost = 1.0f;\n              }\n            } else  {\n              writeVal(writer, boost, name, v, update);\n              boost = 1.0f;\n            }\n          }\n        } else  {\n          writeVal(writer, boost, name, v, update);\n          // only write the boost for the first multi-valued field\n          // otherwise, the used boost is the product of all the boost values\n          boost = 1.0f;\n        }\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f38beb59576e91118ab20f7bf3bda40a9c7b040d","date":1379007849,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n\n      for( Object v : field ) {\n        String update = null;\n\n        if (v instanceof Map) {\n          // currently only supports a single value\n          for (Entry<Object,Object> entry : ((Map<Object,Object>)v).entrySet()) {\n            update = entry.getKey().toString();\n            v = entry.getValue();\n            if (v instanceof Collection) {\n              Collection values = (Collection) v;\n              for (Object value : values) {\n                writeVal(writer, boost, name, value, update);\n                boost = 1.0f;\n              }\n            } else  {\n              writeVal(writer, boost, name, v, update);\n              boost = 1.0f;\n            }\n          }\n        } else  {\n          writeVal(writer, boost, name, v, update);\n          // only write the boost for the first multi-valued field\n          // otherwise, the used boost is the product of all the boost values\n          boost = 1.0f;\n        }\n      }\n    }\n\n    if (doc.hasChildDocuments()) {\n      for (SolrInputDocument childDocument : doc.getChildDocuments()) {\n        writeXML(childDocument, writer);\n      }\n    }\n    \n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n\n      for( Object v : field ) {\n        String update = null;\n\n        if (v instanceof Map) {\n          // currently only supports a single value\n          for (Entry<Object,Object> entry : ((Map<Object,Object>)v).entrySet()) {\n            update = entry.getKey().toString();\n            v = entry.getValue();\n            if (v instanceof Collection) {\n              Collection values = (Collection) v;\n              for (Object value : values) {\n                writeVal(writer, boost, name, value, update);\n                boost = 1.0f;\n              }\n            } else  {\n              writeVal(writer, boost, name, v, update);\n              boost = 1.0f;\n            }\n          }\n        } else  {\n          writeVal(writer, boost, name, v, update);\n          // only write the boost for the first multi-valued field\n          // otherwise, the used boost is the product of all the boost values\n          boost = 1.0f;\n        }\n      }\n    }\n    \n    for (SolrInputDocument childDocument : doc.getChildDocuments()) {\n      writeXML(childDocument, writer);\n    }\n    \n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc>\");\n\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n\n      for( Object v : field ) {\n        String update = null;\n\n        if (v instanceof Map) {\n          // currently only supports a single value\n          for (Entry<Object,Object> entry : ((Map<Object,Object>)v).entrySet()) {\n            update = entry.getKey().toString();\n            v = entry.getValue();\n            if (v instanceof Collection) {\n              Collection values = (Collection) v;\n              for (Object value : values) {\n                writeVal(writer, name, value, update);\n              }\n            } else  {\n              writeVal(writer, name, v, update);\n            }\n          }\n        } else  {\n          writeVal(writer, name, v, update);\n        }\n      }\n    }\n\n    if (doc.hasChildDocuments()) {\n      for (SolrInputDocument childDocument : doc.getChildDocuments()) {\n        writeXML(childDocument, writer);\n      }\n    }\n    \n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n\n      for( Object v : field ) {\n        String update = null;\n\n        if (v instanceof Map) {\n          // currently only supports a single value\n          for (Entry<Object,Object> entry : ((Map<Object,Object>)v).entrySet()) {\n            update = entry.getKey().toString();\n            v = entry.getValue();\n            if (v instanceof Collection) {\n              Collection values = (Collection) v;\n              for (Object value : values) {\n                writeVal(writer, boost, name, value, update);\n                boost = 1.0f;\n              }\n            } else  {\n              writeVal(writer, boost, name, v, update);\n              boost = 1.0f;\n            }\n          }\n        } else  {\n          writeVal(writer, boost, name, v, update);\n          // only write the boost for the first multi-valued field\n          // otherwise, the used boost is the product of all the boost values\n          boost = 1.0f;\n        }\n      }\n    }\n\n    if (doc.hasChildDocuments()) {\n      for (SolrInputDocument childDocument : doc.getChildDocuments()) {\n        writeXML(childDocument, writer);\n      }\n    }\n    \n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05216852560771de14a5513cd4afd45c8655d1ee","date":1533664331,"type":3,"author":"Moshe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc>\");\n\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n\n      for( Object v : field ) {\n        String update = null;\n\n        if(v instanceof SolrInputDocument) {\n          writeVal(writer, name, v , null);\n        } else if (v instanceof Map) {\n          // currently only supports a single value\n          for (Entry<Object,Object> entry : ((Map<Object,Object>)v).entrySet()) {\n            update = entry.getKey().toString();\n            v = entry.getValue();\n            if (v instanceof Collection) {\n              Collection values = (Collection) v;\n              for (Object value : values) {\n                writeVal(writer, name, value, update);\n              }\n            } else  {\n              writeVal(writer, name, v, update);\n            }\n          }\n        } else  {\n          writeVal(writer, name, v, update);\n        }\n      }\n    }\n\n    if (doc.hasChildDocuments()) {\n      for (SolrInputDocument childDocument : doc.getChildDocuments()) {\n        writeXML(childDocument, writer);\n      }\n    }\n    \n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc>\");\n\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n\n      for( Object v : field ) {\n        String update = null;\n\n        if (v instanceof Map) {\n          // currently only supports a single value\n          for (Entry<Object,Object> entry : ((Map<Object,Object>)v).entrySet()) {\n            update = entry.getKey().toString();\n            v = entry.getValue();\n            if (v instanceof Collection) {\n              Collection values = (Collection) v;\n              for (Object value : values) {\n                writeVal(writer, name, value, update);\n              }\n            } else  {\n              writeVal(writer, name, v, update);\n            }\n          }\n        } else  {\n          writeVal(writer, name, v, update);\n        }\n      }\n    }\n\n    if (doc.hasChildDocuments()) {\n      for (SolrInputDocument childDocument : doc.getChildDocuments()) {\n        writeXML(childDocument, writer);\n      }\n    }\n    \n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc>\");\n\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n\n      for( Object v : field ) {\n        String update = null;\n\n        if(v instanceof SolrInputDocument) {\n          writeVal(writer, name, v , null);\n        } else if (v instanceof Map) {\n          // currently only supports a single value\n          for (Entry<Object,Object> entry : ((Map<Object,Object>)v).entrySet()) {\n            update = entry.getKey().toString();\n            v = entry.getValue();\n            if (v instanceof Collection) {\n              @SuppressWarnings({\"rawtypes\"})\n              Collection values = (Collection) v;\n              for (Object value : values) {\n                writeVal(writer, name, value, update);\n              }\n            } else  {\n              writeVal(writer, name, v, update);\n            }\n          }\n        } else  {\n          writeVal(writer, name, v, update);\n        }\n      }\n    }\n\n    if (doc.hasChildDocuments()) {\n      for (SolrInputDocument childDocument : doc.getChildDocuments()) {\n        writeXML(childDocument, writer);\n      }\n    }\n    \n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc>\");\n\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n\n      for( Object v : field ) {\n        String update = null;\n\n        if(v instanceof SolrInputDocument) {\n          writeVal(writer, name, v , null);\n        } else if (v instanceof Map) {\n          // currently only supports a single value\n          for (Entry<Object,Object> entry : ((Map<Object,Object>)v).entrySet()) {\n            update = entry.getKey().toString();\n            v = entry.getValue();\n            if (v instanceof Collection) {\n              Collection values = (Collection) v;\n              for (Object value : values) {\n                writeVal(writer, name, value, update);\n              }\n            } else  {\n              writeVal(writer, name, v, update);\n            }\n          }\n        } else  {\n          writeVal(writer, name, v, update);\n        }\n      }\n    }\n\n    if (doc.hasChildDocuments()) {\n      for (SolrInputDocument childDocument : doc.getChildDocuments()) {\n        writeXML(childDocument, writer);\n      }\n    }\n    \n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["1bea3922196318026c4274f2013416acb60c691e","42fa1b1a7816a1e1853b685183b07a976bc37560"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["42fa1b1a7816a1e1853b685183b07a976bc37560","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["42fa1b1a7816a1e1853b685183b07a976bc37560"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["05216852560771de14a5513cd4afd45c8655d1ee"],"1bea3922196318026c4274f2013416acb60c691e":["c26f00b574427b55127e869b935845554afde1fa"],"05216852560771de14a5513cd4afd45c8655d1ee":["acd9883560fd89e6448b2b447302fe543040cd4f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"42fa1b1a7816a1e1853b685183b07a976bc37560":["1bea3922196318026c4274f2013416acb60c691e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f38beb59576e91118ab20f7bf3bda40a9c7b040d":["637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"acd9883560fd89e6448b2b447302fe543040cd4f":["f38beb59576e91118ab20f7bf3bda40a9c7b040d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","f38beb59576e91118ab20f7bf3bda40a9c7b040d"],"c26f00b574427b55127e869b935845554afde1fa":["1bea3922196318026c4274f2013416acb60c691e"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1bea3922196318026c4274f2013416acb60c691e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","42fa1b1a7816a1e1853b685183b07a976bc37560"],"05216852560771de14a5513cd4afd45c8655d1ee":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"42fa1b1a7816a1e1853b685183b07a976bc37560":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f38beb59576e91118ab20f7bf3bda40a9c7b040d":["acd9883560fd89e6448b2b447302fe543040cd4f"],"acd9883560fd89e6448b2b447302fe543040cd4f":["05216852560771de14a5513cd4afd45c8655d1ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}