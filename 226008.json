{"path":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValues#newRAMInstance().mjava","commits":[{"id":"e05b279040cd7b938223b77c3772786678160cf6","date":1353297629,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValues#newRAMInstance().mjava","pathOld":"/dev/null","sourceNew":"  public BinaryDocValues newRAMInstance() {\n    // TODO: optimize this default impl with e.g. isFixedLength/maxLength and so on\n    // nocommit used packed ints/pagedbytes and so on\n    final int maxDoc = size();\n    final int maxLength = maxLength();\n    final boolean fixedLength = isFixedLength();\n    final byte[][] values = new byte[maxDoc][];\n    BytesRef scratch = new BytesRef();\n    for(int docID=0;docID<maxDoc;docID++) {\n      get(docID, scratch);\n      values[docID] = new byte[scratch.length];\n      System.arraycopy(scratch.bytes, scratch.offset, values[docID], 0, scratch.length);\n    }\n    \n    return new BinaryDocValues() {\n\n      @Override\n      public void get(int docID, BytesRef result) {\n        result.bytes = values[docID];\n        result.offset = 0;\n        result.length = result.bytes.length;\n      }\n\n      @Override\n      public int size() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean isFixedLength() {\n        return fixedLength;\n      }\n\n      @Override\n      public int maxLength() {\n        return maxLength;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"767bfba15cdbe84dd2e3b841e0429a1b4ef8feee","date":1353299109,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValues#newRAMInstance().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValues#newRAMInstance().mjava","sourceNew":"  // nocommit: rethink this api? alternative is boolean on atomicreader...?\n  // doc that the thing returned here must be thread safe...\n  public BinaryDocValues newRAMInstance() {\n    // TODO: optimize this default impl with e.g. isFixedLength/maxLength and so on\n    // nocommit used packed ints/pagedbytes and so on\n    final int maxDoc = size();\n    final int maxLength = maxLength();\n    final boolean fixedLength = isFixedLength();\n    final byte[][] values = new byte[maxDoc][];\n    BytesRef scratch = new BytesRef();\n    for(int docID=0;docID<maxDoc;docID++) {\n      get(docID, scratch);\n      values[docID] = new byte[scratch.length];\n      System.arraycopy(scratch.bytes, scratch.offset, values[docID], 0, scratch.length);\n    }\n    \n    return new BinaryDocValues() {\n\n      @Override\n      public void get(int docID, BytesRef result) {\n        result.bytes = values[docID];\n        result.offset = 0;\n        result.length = result.bytes.length;\n      }\n\n      @Override\n      public int size() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean isFixedLength() {\n        return fixedLength;\n      }\n\n      @Override\n      public int maxLength() {\n        return maxLength;\n      }\n\n      @Override\n      public BinaryDocValues newRAMInstance() {\n        // nocommit: ugly, maybe throw exception instead?\n        return this; \n      }\n    };\n  }\n\n","sourceOld":"  public BinaryDocValues newRAMInstance() {\n    // TODO: optimize this default impl with e.g. isFixedLength/maxLength and so on\n    // nocommit used packed ints/pagedbytes and so on\n    final int maxDoc = size();\n    final int maxLength = maxLength();\n    final boolean fixedLength = isFixedLength();\n    final byte[][] values = new byte[maxDoc][];\n    BytesRef scratch = new BytesRef();\n    for(int docID=0;docID<maxDoc;docID++) {\n      get(docID, scratch);\n      values[docID] = new byte[scratch.length];\n      System.arraycopy(scratch.bytes, scratch.offset, values[docID], 0, scratch.length);\n    }\n    \n    return new BinaryDocValues() {\n\n      @Override\n      public void get(int docID, BytesRef result) {\n        result.bytes = values[docID];\n        result.offset = 0;\n        result.length = result.bytes.length;\n      }\n\n      @Override\n      public int size() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean isFixedLength() {\n        return fixedLength;\n      }\n\n      @Override\n      public int maxLength() {\n        return maxLength;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bc9c79bf95b1262e0a6908ffbd895de19e33dc2","date":1354573582,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValues#newRAMInstance().mjava","sourceNew":null,"sourceOld":"  // nocommit: rethink this api? alternative is boolean on atomicreader...?\n  // doc that the thing returned here must be thread safe...\n  public BinaryDocValues newRAMInstance() {\n    // TODO: optimize this default impl with e.g. isFixedLength/maxLength and so on\n    // nocommit used packed ints/pagedbytes and so on\n    final int maxDoc = size();\n    final int maxLength = maxLength();\n    final boolean fixedLength = isFixedLength();\n    final byte[][] values = new byte[maxDoc][];\n    BytesRef scratch = new BytesRef();\n    for(int docID=0;docID<maxDoc;docID++) {\n      get(docID, scratch);\n      values[docID] = new byte[scratch.length];\n      System.arraycopy(scratch.bytes, scratch.offset, values[docID], 0, scratch.length);\n    }\n    \n    return new BinaryDocValues() {\n\n      @Override\n      public void get(int docID, BytesRef result) {\n        result.bytes = values[docID];\n        result.offset = 0;\n        result.length = result.bytes.length;\n      }\n\n      @Override\n      public int size() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean isFixedLength() {\n        return fixedLength;\n      }\n\n      @Override\n      public int maxLength() {\n        return maxLength;\n      }\n\n      @Override\n      public BinaryDocValues newRAMInstance() {\n        // nocommit: ugly, maybe throw exception instead?\n        return this; \n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"767bfba15cdbe84dd2e3b841e0429a1b4ef8feee":["e05b279040cd7b938223b77c3772786678160cf6"],"e05b279040cd7b938223b77c3772786678160cf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4bc9c79bf95b1262e0a6908ffbd895de19e33dc2":["767bfba15cdbe84dd2e3b841e0429a1b4ef8feee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"767bfba15cdbe84dd2e3b841e0429a1b4ef8feee":["4bc9c79bf95b1262e0a6908ffbd895de19e33dc2"],"e05b279040cd7b938223b77c3772786678160cf6":["767bfba15cdbe84dd2e3b841e0429a1b4ef8feee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e05b279040cd7b938223b77c3772786678160cf6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4bc9c79bf95b1262e0a6908ffbd895de19e33dc2":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4bc9c79bf95b1262e0a6908ffbd895de19e33dc2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}