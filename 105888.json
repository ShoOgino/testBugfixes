{"path":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointInSetQueryManyEqualValuesBigGap().mjava","commits":[{"id":"321ec990395a1d617f3097ce37d74fdfab56b34f","date":1456265570,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointInSetQueryManyEqualValuesBigGap().mjava","pathOld":"/dev/null","sourceNew":"  public void testPointInSetQueryManyEqualValuesBigGap() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    int zeroCount = 0;\n    for(int i=0;i<10000;i++) {\n      int x = 200 * random().nextInt(2);\n      if (x == 0) {\n        zeroCount++;\n      }\n      Document doc = new Document();\n      doc.add(new IntPoint(\"int\", x));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0, -7)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(IntPoint.newSetQuery(\"int\", 200)));\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 2)));\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ae115468a08fb03270562a0121761d73c2c8c1","date":1456307437,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointInSetQueryManyEqualValuesWithBigGap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointInSetQueryManyEqualValuesBigGap().mjava","sourceNew":"  public void testPointInSetQueryManyEqualValuesWithBigGap() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    int zeroCount = 0;\n    for(int i=0;i<10000;i++) {\n      int x = 200 * random().nextInt(2);\n      if (x == 0) {\n        zeroCount++;\n      }\n      Document doc = new Document();\n      doc.add(new IntPoint(\"int\", x));\n      doc.add(new LongPoint(\"long\", x));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0, -7)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(IntPoint.newSetQuery(\"int\", 200)));\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 2)));\n\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0, -7)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(LongPoint.newSetQuery(\"long\", 200)));\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 2)));\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPointInSetQueryManyEqualValuesBigGap() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    int zeroCount = 0;\n    for(int i=0;i<10000;i++) {\n      int x = 200 * random().nextInt(2);\n      if (x == 0) {\n        zeroCount++;\n      }\n      Document doc = new Document();\n      doc.add(new IntPoint(\"int\", x));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0, -7)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(IntPoint.newSetQuery(\"int\", 200)));\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 2)));\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96ae115468a08fb03270562a0121761d73c2c8c1":["321ec990395a1d617f3097ce37d74fdfab56b34f"],"321ec990395a1d617f3097ce37d74fdfab56b34f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["321ec990395a1d617f3097ce37d74fdfab56b34f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"96ae115468a08fb03270562a0121761d73c2c8c1":[],"321ec990395a1d617f3097ce37d74fdfab56b34f":["96ae115468a08fb03270562a0121761d73c2c8c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ae115468a08fb03270562a0121761d73c2c8c1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}