{"path":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeDate(String,Date).mjava","commits":[{"id":"434ff4225627b937a533128f8746eb1e9009fc95","date":1153247240,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeDate(String,Date).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: refactor this out to a DateUtils class or something...\r\n  public void writeDate(String name, Date val) throws IOException {\r\n    // using a stringBuilder for numbers can be nice since\r\n    // a temporary string isn't used (it's added directly to the\r\n    // builder's buffer.\r\n\r\n    StringBuilder sb = new StringBuilder();\r\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\r\n    cal.setTime(val);\r\n\r\n    int i = cal.get(Calendar.YEAR);\r\n    sb.append(i);\r\n    sb.append('-');\r\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\r\n    if (i<10) sb.append('0');\r\n    sb.append(i);\r\n    sb.append('-');\r\n    i=cal.get(Calendar.DAY_OF_MONTH);\r\n    if (i<10) sb.append('0');\r\n    sb.append(i);\r\n    sb.append('T');\r\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\r\n    if (i<10) sb.append('0');\r\n    sb.append(i);\r\n    sb.append(':');\r\n    i=cal.get(Calendar.MINUTE);\r\n    if (i<10) sb.append('0');\r\n    sb.append(i);\r\n    sb.append(':');\r\n    i=cal.get(Calendar.SECOND);\r\n    if (i<10) sb.append('0');\r\n    sb.append(i);\r\n    i=cal.get(Calendar.MILLISECOND);\r\n    if (i != 0) {\r\n      sb.append('.');\r\n      if (i<100) sb.append('0');\r\n      if (i<10) sb.append('0');\r\n      sb.append(i);\r\n\r\n      // handle canonical format specifying fractional\r\n      // seconds shall not end in '0'.  Given the slowness of\r\n      // integer div/mod, simply checking the last character\r\n      // is probably the fastest way to check.\r\n      int lastIdx = sb.length()-1;\r\n      if (sb.charAt(lastIdx)=='0') {\r\n        lastIdx--;\r\n        if (sb.charAt(lastIdx)=='0') {\r\n          lastIdx--;\r\n        }\r\n        sb.setLength(lastIdx+1);\r\n      }\r\n\r\n    }\r\n    sb.append('Z');\r\n    writeDate(name, sb.toString());\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c0e301b711811c6aaee90440cc1a7925fdd1a1e","date":1153259525,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeDate(String,Date).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeDate(String,Date).mjava","sourceNew":"  // TODO: refactor this out to a DateUtils class or something...\n  public void writeDate(String name, Date val) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n    cal.setTime(val);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n    writeDate(name, sb.toString());\n  }\n\n","sourceOld":"  // TODO: refactor this out to a DateUtils class or something...\r\n  public void writeDate(String name, Date val) throws IOException {\r\n    // using a stringBuilder for numbers can be nice since\r\n    // a temporary string isn't used (it's added directly to the\r\n    // builder's buffer.\r\n\r\n    StringBuilder sb = new StringBuilder();\r\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\r\n    cal.setTime(val);\r\n\r\n    int i = cal.get(Calendar.YEAR);\r\n    sb.append(i);\r\n    sb.append('-');\r\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\r\n    if (i<10) sb.append('0');\r\n    sb.append(i);\r\n    sb.append('-');\r\n    i=cal.get(Calendar.DAY_OF_MONTH);\r\n    if (i<10) sb.append('0');\r\n    sb.append(i);\r\n    sb.append('T');\r\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\r\n    if (i<10) sb.append('0');\r\n    sb.append(i);\r\n    sb.append(':');\r\n    i=cal.get(Calendar.MINUTE);\r\n    if (i<10) sb.append('0');\r\n    sb.append(i);\r\n    sb.append(':');\r\n    i=cal.get(Calendar.SECOND);\r\n    if (i<10) sb.append('0');\r\n    sb.append(i);\r\n    i=cal.get(Calendar.MILLISECOND);\r\n    if (i != 0) {\r\n      sb.append('.');\r\n      if (i<100) sb.append('0');\r\n      if (i<10) sb.append('0');\r\n      sb.append(i);\r\n\r\n      // handle canonical format specifying fractional\r\n      // seconds shall not end in '0'.  Given the slowness of\r\n      // integer div/mod, simply checking the last character\r\n      // is probably the fastest way to check.\r\n      int lastIdx = sb.length()-1;\r\n      if (sb.charAt(lastIdx)=='0') {\r\n        lastIdx--;\r\n        if (sb.charAt(lastIdx)=='0') {\r\n          lastIdx--;\r\n        }\r\n        sb.setLength(lastIdx+1);\r\n      }\r\n\r\n    }\r\n    sb.append('Z');\r\n    writeDate(name, sb.toString());\r\n  }\r\n\n","bugFix":null,"bugIntro":["08fd846faeaddb28f2b20f569afe4f79b394f62d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDate(String,Date).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeDate(String,Date).mjava","sourceNew":"  // TODO: refactor this out to a DateUtils class or something...\n  public void writeDate(String name, Date val) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n    cal.setTime(val);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n    writeDate(name, sb.toString());\n  }\n\n","sourceOld":"  // TODO: refactor this out to a DateUtils class or something...\n  public void writeDate(String name, Date val) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n    cal.setTime(val);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n    writeDate(name, sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0c0e301b711811c6aaee90440cc1a7925fdd1a1e":["434ff4225627b937a533128f8746eb1e9009fc95"],"434ff4225627b937a533128f8746eb1e9009fc95":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["0c0e301b711811c6aaee90440cc1a7925fdd1a1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c0e301b711811c6aaee90440cc1a7925fdd1a1e":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"434ff4225627b937a533128f8746eb1e9009fc95":["0c0e301b711811c6aaee90440cc1a7925fdd1a1e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["434ff4225627b937a533128f8746eb1e9009fc95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["10b17ff7ad534c3b34a34944d80a87d217011d9c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}