{"path":"src/test-deprecated/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","commits":[{"id":"5b5461affe637a07375542c763a4805300802be8","date":1102270918,"type":0,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test-deprecated/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new RAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames();\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.mergeFactor; i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.mergeFactor; i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames();\n        assertEquals(9, fieldNames.size());    // the following fields + an empty one (bug?!)\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n\n        // verify that only indexed fields were returned\n        Collection indexedFieldNames = reader.getFieldNames(true);\n        assertEquals(6, indexedFieldNames.size());\n        assertTrue(indexedFieldNames.contains(\"keyword\"));\n        assertTrue(indexedFieldNames.contains(\"text\"));\n        assertTrue(indexedFieldNames.contains(\"unstored\"));\n        assertTrue(indexedFieldNames.contains(\"keyword2\"));\n        assertTrue(indexedFieldNames.contains(\"text2\"));\n        assertTrue(indexedFieldNames.contains(\"unstored2\"));\n\n        // verify that only unindexed fields were returned\n        Collection unindexedFieldNames = reader.getFieldNames(false);\n        assertEquals(3, unindexedFieldNames.size());    // the following fields + an empty one\n        assertTrue(unindexedFieldNames.contains(\"unindexed\"));\n        assertTrue(unindexedFieldNames.contains(\"unindexed2\"));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f13143c3670b09988b0ef2b08d079b07a20aa10f","date":1103468373,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test-deprecated/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"src/test-deprecated/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new RAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames();\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.mergeFactor; i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.mergeFactor; i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames();\n        assertEquals(8, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n\n        // verify that only indexed fields were returned\n        Collection indexedFieldNames = reader.getFieldNames(true);\n        assertEquals(6, indexedFieldNames.size());\n        assertTrue(indexedFieldNames.contains(\"keyword\"));\n        assertTrue(indexedFieldNames.contains(\"text\"));\n        assertTrue(indexedFieldNames.contains(\"unstored\"));\n        assertTrue(indexedFieldNames.contains(\"keyword2\"));\n        assertTrue(indexedFieldNames.contains(\"text2\"));\n        assertTrue(indexedFieldNames.contains(\"unstored2\"));\n\n        // verify that only unindexed fields were returned\n        Collection unindexedFieldNames = reader.getFieldNames(false);\n        assertEquals(2, unindexedFieldNames.size());    // the following fields\n        assertTrue(unindexedFieldNames.contains(\"unindexed\"));\n        assertTrue(unindexedFieldNames.contains(\"unindexed2\"));\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new RAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames();\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.mergeFactor; i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.mergeFactor; i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames();\n        assertEquals(9, fieldNames.size());    // the following fields + an empty one (bug?!)\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n\n        // verify that only indexed fields were returned\n        Collection indexedFieldNames = reader.getFieldNames(true);\n        assertEquals(6, indexedFieldNames.size());\n        assertTrue(indexedFieldNames.contains(\"keyword\"));\n        assertTrue(indexedFieldNames.contains(\"text\"));\n        assertTrue(indexedFieldNames.contains(\"unstored\"));\n        assertTrue(indexedFieldNames.contains(\"keyword2\"));\n        assertTrue(indexedFieldNames.contains(\"text2\"));\n        assertTrue(indexedFieldNames.contains(\"unstored2\"));\n\n        // verify that only unindexed fields were returned\n        Collection unindexedFieldNames = reader.getFieldNames(false);\n        assertEquals(3, unindexedFieldNames.size());    // the following fields + an empty one\n        assertTrue(unindexedFieldNames.contains(\"unindexed\"));\n        assertTrue(unindexedFieldNames.contains(\"unindexed2\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test-deprecated/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":null,"sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new RAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames();\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.mergeFactor; i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.mergeFactor; i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames();\n        assertEquals(8, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n\n        // verify that only indexed fields were returned\n        Collection indexedFieldNames = reader.getFieldNames(true);\n        assertEquals(6, indexedFieldNames.size());\n        assertTrue(indexedFieldNames.contains(\"keyword\"));\n        assertTrue(indexedFieldNames.contains(\"text\"));\n        assertTrue(indexedFieldNames.contains(\"unstored\"));\n        assertTrue(indexedFieldNames.contains(\"keyword2\"));\n        assertTrue(indexedFieldNames.contains(\"text2\"));\n        assertTrue(indexedFieldNames.contains(\"unstored2\"));\n\n        // verify that only unindexed fields were returned\n        Collection unindexedFieldNames = reader.getFieldNames(false);\n        assertEquals(2, unindexedFieldNames.size());    // the following fields\n        assertTrue(unindexedFieldNames.contains(\"unindexed\"));\n        assertTrue(unindexedFieldNames.contains(\"unindexed2\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b5461affe637a07375542c763a4805300802be8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["f13143c3670b09988b0ef2b08d079b07a20aa10f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f13143c3670b09988b0ef2b08d079b07a20aa10f":["5b5461affe637a07375542c763a4805300802be8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"5b5461affe637a07375542c763a4805300802be8":["f13143c3670b09988b0ef2b08d079b07a20aa10f"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b5461affe637a07375542c763a4805300802be8"],"f13143c3670b09988b0ef2b08d079b07a20aa10f":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}