{"path":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","commits":[{"id":"95ae76773bf2b95987d5f9c8f566ab3738953fb4","date":1301758351,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Index.ANALYZED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(r, \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Index.ANALYZED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(r, \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Index.ANALYZED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(r, \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Index.ANALYZED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(r, \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Index.ANALYZED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(r, \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Index.ANALYZED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(r, \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Index.ANALYZED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(r, \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Index.ANALYZED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(r, \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Index.ANALYZED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(r, \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Index.ANALYZED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(r, \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(r, \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Index.ANALYZED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(r, \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59fc0e55b44c555c39d950def9414b5596c6ebe2","date":1327620010,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(new SlowMultiReaderWrapper(r), \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(r, \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(new SlowMultiReaderWrapper(r), \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(r, \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(new SlowMultiReaderWrapper(r), \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(r, \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"386d1b0dcb065f1bfc494b1407cb41c536b95485","date":1327848512,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(SlowCompositeReaderWrapper.wrap(r), \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(new SlowMultiReaderWrapper(r), \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(SlowCompositeReaderWrapper.wrap(r), \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(new SlowMultiReaderWrapper(r), \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(SlowCompositeReaderWrapper.wrap(r), \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(SlowCompositeReaderWrapper.wrap(r), \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":["1509f151d7692d84fae414b2b799ac06ba60fcb4","59fc0e55b44c555c39d950def9414b5596c6ebe2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["1509f151d7692d84fae414b2b799ac06ba60fcb4","59fc0e55b44c555c39d950def9414b5596c6ebe2"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["59fc0e55b44c555c39d950def9414b5596c6ebe2","386d1b0dcb065f1bfc494b1407cb41c536b95485"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59fc0e55b44c555c39d950def9414b5596c6ebe2":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"45669a651c970812a680841b97a77cce06af559f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["386d1b0dcb065f1bfc494b1407cb41c536b95485"],"962d04139994fce5193143ef35615499a9a96d78":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","95ae76773bf2b95987d5f9c8f566ab3738953fb4","45669a651c970812a680841b97a77cce06af559f"],"59fc0e55b44c555c39d950def9414b5596c6ebe2":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","59fc0e55b44c555c39d950def9414b5596c6ebe2"],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78a55f24d9b493c2a1cecf79f1d78279062b545b","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}