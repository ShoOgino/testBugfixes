{"path":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean).mjava","commits":[{"id":"97bd2b0da4beced82821b752b29576be986cf1ff","date":1387747012,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void registerInZk(final SolrCore core, boolean background) {\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n          try {\n            zkController.register(core.getName(), core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            SolrException.log(log, \"\", e);\n          } catch (Exception e) {\n            try {\n              zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n            } catch (InterruptedException e1) {\n              Thread.currentThread().interrupt();\n              log.error(\"\", e1);\n            } catch (Exception e1) {\n              log.error(\"\", e1);\n            }\n            SolrException.log(log, \"\", e);\n          }\n        }\n      \n    };\n    \n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(thread);\n      } else {\n        thread.run();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean).mjava","sourceNew":"  public void registerInZk(final SolrCore core, boolean background) {\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n          try {\n            zkController.register(core.getName(), core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            SolrException.log(log, \"\", e);\n          } catch (Exception e) {\n            try {\n              zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n            } catch (InterruptedException e1) {\n              Thread.currentThread().interrupt();\n              log.error(\"\", e1);\n            } catch (Exception e1) {\n              log.error(\"\", e1);\n            }\n            SolrException.log(log, \"\", e);\n          }\n        }\n      \n    };\n    \n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(thread);\n      } else {\n        thread.run();\n      }\n    }\n  }\n\n","sourceOld":"  public void registerInZk(final SolrCore core, boolean background) {\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n          try {\n            zkController.register(core.getName(), core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            SolrException.log(log, \"\", e);\n          } catch (Exception e) {\n            try {\n              zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n            } catch (InterruptedException e1) {\n              Thread.currentThread().interrupt();\n              log.error(\"\", e1);\n            } catch (Exception e1) {\n              log.error(\"\", e1);\n            }\n            SolrException.log(log, \"\", e);\n          }\n        }\n      \n    };\n    \n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(thread);\n      } else {\n        thread.run();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a96b173f2f573ac82bc8279dfdd3cbe2b948f95","date":1429031018,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean).mjava","sourceNew":"  public void registerInZk(final SolrCore core, boolean background) {\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n          try {\n            zkController.register(core.getName(), core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            SolrException.log(log, \"\", e);\n          } catch (Exception e) {\n            try {\n              zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n            } catch (InterruptedException e1) {\n              Thread.currentThread().interrupt();\n              log.error(\"\", e1);\n            } catch (Exception e1) {\n              log.error(\"\", e1);\n            }\n            SolrException.log(log, \"\", e);\n          }\n        }\n\n    };\n    \n    if (zkController != null) {\n      MDCUtils.setCore(core.getName());\n      try {\n        if (background) {\n          coreZkRegister.execute(thread);\n        } else {\n          thread.run();\n        }\n      } finally {\n        MDC.remove(CORE_NAME_PROP);\n      }\n    }\n  }\n\n","sourceOld":"  public void registerInZk(final SolrCore core, boolean background) {\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n          try {\n            zkController.register(core.getName(), core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            SolrException.log(log, \"\", e);\n          } catch (Exception e) {\n            try {\n              zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n            } catch (InterruptedException e1) {\n              Thread.currentThread().interrupt();\n              log.error(\"\", e1);\n            } catch (Exception e1) {\n              log.error(\"\", e1);\n            }\n            SolrException.log(log, \"\", e);\n          }\n        }\n      \n    };\n    \n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(thread);\n      } else {\n        thread.run();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"439c63ae5d22132fca810a0029a854e97d2c1a3e","date":1432733612,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean).mjava","sourceNew":"  public void registerInZk(final SolrCore core, boolean background) {\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        MDCLoggingContext.setCore(core);\n        try {\n          try {\n            zkController.register(core.getName(), core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            SolrException.log(log, \"\", e);\n          } catch (Exception e) {\n            try {\n              zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n            } catch (InterruptedException e1) {\n              Thread.currentThread().interrupt();\n              log.error(\"\", e1);\n            } catch (Exception e1) {\n              log.error(\"\", e1);\n            }\n            SolrException.log(log, \"\", e);\n          }\n        } finally {\n          MDC.clear();\n        }\n      }\n      \n    };\n    \n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(thread);\n      } else {\n        MDCLoggingContext.setCore(core);\n        try {\n          thread.run();\n        } finally {\n          MDC.clear();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void registerInZk(final SolrCore core, boolean background) {\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n          try {\n            zkController.register(core.getName(), core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            SolrException.log(log, \"\", e);\n          } catch (Exception e) {\n            try {\n              zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n            } catch (InterruptedException e1) {\n              Thread.currentThread().interrupt();\n              log.error(\"\", e1);\n            } catch (Exception e1) {\n              log.error(\"\", e1);\n            }\n            SolrException.log(log, \"\", e);\n          }\n        }\n\n    };\n    \n    if (zkController != null) {\n      MDCUtils.setCore(core.getName());\n      try {\n        if (background) {\n          coreZkRegister.execute(thread);\n        } else {\n          thread.run();\n        }\n      } finally {\n        MDC.remove(CORE_NAME_PROP);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1","date":1437834887,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean).mjava","sourceNew":"  public void registerInZk(final SolrCore core, boolean background) {\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        MDCLoggingContext.setCore(core);\n        try {\n          try {\n            zkController.register(core.getName(), core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            SolrException.log(log, \"\", e);\n          } catch (Exception e) {\n            try {\n              zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n            } catch (InterruptedException e1) {\n              Thread.currentThread().interrupt();\n              log.error(\"\", e1);\n            } catch (Exception e1) {\n              log.error(\"\", e1);\n            }\n            SolrException.log(log, \"\", e);\n          }\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n      \n    };\n    \n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(thread);\n      } else {\n        MDCLoggingContext.setCore(core);\n        try {\n          thread.run();\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void registerInZk(final SolrCore core, boolean background) {\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        MDCLoggingContext.setCore(core);\n        try {\n          try {\n            zkController.register(core.getName(), core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            SolrException.log(log, \"\", e);\n          } catch (Exception e) {\n            try {\n              zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n            } catch (InterruptedException e1) {\n              Thread.currentThread().interrupt();\n              log.error(\"\", e1);\n            } catch (Exception e1) {\n              log.error(\"\", e1);\n            }\n            SolrException.log(log, \"\", e);\n          }\n        } finally {\n          MDC.clear();\n        }\n      }\n      \n    };\n    \n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(thread);\n      } else {\n        MDCLoggingContext.setCore(core);\n        try {\n          thread.run();\n        } finally {\n          MDC.clear();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc69baf14413994ccde897681e5ce1d393cf7156","date":1468245555,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean).mjava","sourceNew":"  public void registerInZk(final SolrCore core, boolean background) {\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          zkController.register(core.getName(), core.getCoreDescriptor());\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (Exception e) {\n          try {\n            zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(r);\n      } else {\n        MDCLoggingContext.setCore(core);\n        try {\n          r.run();\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void registerInZk(final SolrCore core, boolean background) {\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        MDCLoggingContext.setCore(core);\n        try {\n          try {\n            zkController.register(core.getName(), core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            SolrException.log(log, \"\", e);\n          } catch (Exception e) {\n            try {\n              zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n            } catch (InterruptedException e1) {\n              Thread.currentThread().interrupt();\n              log.error(\"\", e1);\n            } catch (Exception e1) {\n              log.error(\"\", e1);\n            }\n            SolrException.log(log, \"\", e);\n          }\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n      \n    };\n    \n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(thread);\n      } else {\n        MDCLoggingContext.setCore(core);\n        try {\n          thread.run();\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d528fd7ae22865015b756e0a03832e2051de2a9c","date":1476721105,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean).mjava","sourceNew":"  public void registerInZk(final SolrCore core, boolean background, boolean skipRecovery) {\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          zkController.register(core.getName(), core.getCoreDescriptor(), skipRecovery);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (Exception e) {\n          try {\n            zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(r);\n      } else {\n        MDCLoggingContext.setCore(core);\n        try {\n          r.run();\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void registerInZk(final SolrCore core, boolean background) {\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          zkController.register(core.getName(), core.getCoreDescriptor());\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (Exception e) {\n          try {\n            zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(r);\n      } else {\n        MDCLoggingContext.setCore(core);\n        try {\n          r.run();\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean).mjava","sourceNew":null,"sourceOld":"  public void registerInZk(final SolrCore core, boolean background) {\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        MDCLoggingContext.setCore(core);\n        try {\n          try {\n            zkController.register(core.getName(), core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            SolrException.log(log, \"\", e);\n          } catch (Exception e) {\n            try {\n              zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n            } catch (InterruptedException e1) {\n              Thread.currentThread().interrupt();\n              log.error(\"\", e1);\n            } catch (Exception e1) {\n              log.error(\"\", e1);\n            }\n            SolrException.log(log, \"\", e);\n          }\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n      \n    };\n    \n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(thread);\n      } else {\n        MDCLoggingContext.setCore(core);\n        try {\n          thread.run();\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["97bd2b0da4beced82821b752b29576be986cf1ff"],"6a96b173f2f573ac82bc8279dfdd3cbe2b948f95":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"97bd2b0da4beced82821b752b29576be986cf1ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d528fd7ae22865015b756e0a03832e2051de2a9c":["cc69baf14413994ccde897681e5ce1d393cf7156"],"c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"cc69baf14413994ccde897681e5ce1d393cf7156":["c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1","d528fd7ae22865015b756e0a03832e2051de2a9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d528fd7ae22865015b756e0a03832e2051de2a9c"],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["6a96b173f2f573ac82bc8279dfdd3cbe2b948f95"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["6a96b173f2f573ac82bc8279dfdd3cbe2b948f95"],"6a96b173f2f573ac82bc8279dfdd3cbe2b948f95":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"97bd2b0da4beced82821b752b29576be986cf1ff":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97bd2b0da4beced82821b752b29576be986cf1ff"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1":["cc69baf14413994ccde897681e5ce1d393cf7156","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cc69baf14413994ccde897681e5ce1d393cf7156":["d528fd7ae22865015b756e0a03832e2051de2a9c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}