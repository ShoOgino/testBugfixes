{"path":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_USER_DATA) {\n        if (format <= FORMAT_DIAGNOSTICS) {\n          userData = input.readStringStringMap();\n        } else if (0 != input.readByte()) {\n          userData = Collections.singletonMap(\"userData\", input.readString());\n        } else {\n          userData = Collections.<String,String>emptyMap();\n        }\n      } else {\n        userData = Collections.<String,String>emptyMap();\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_USER_DATA) {\n        if (format <= FORMAT_DIAGNOSTICS) {\n          userData = input.readStringStringMap();\n        } else if (0 != input.readByte()) {\n          userData = Collections.singletonMap(\"userData\", input.readString());\n        } else {\n          userData = Collections.<String,String>emptyMap();\n        }\n      } else {\n        userData = Collections.<String,String>emptyMap();\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_USER_DATA) {\n        if (format <= FORMAT_DIAGNOSTICS) {\n          userData = input.readStringStringMap();\n        } else if (0 != input.readByte()) {\n          userData = Collections.singletonMap(\"userData\", input.readString());\n        } else {\n          userData = Collections.<String,String>emptyMap();\n        }\n      } else {\n        userData = Collections.<String,String>emptyMap();\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    // TODO: scary to have default impl reopen the file... but to make it a bit more flexible,\n    // maybe we could use a plain indexinput here... could default impl rewind/wrap with checksumII,\n    // and any checksumming is then up to implementation?\n    ChecksumIndexInput input = null;\n    try {\n      input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n      final int format = input.readInt();\n      setFormat(format);\n    \n      // check that it is a format we can understand\n      if (format > DefaultSegmentInfosWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(segmentFileName, format,\n          DefaultSegmentInfosWriter.FORMAT_MINIMUM, DefaultSegmentInfosWriter.FORMAT_CURRENT);\n      if (format < DefaultSegmentInfosWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(segmentFileName, format,\n          DefaultSegmentInfosWriter.FORMAT_MINIMUM, DefaultSegmentInfosWriter.FORMAT_CURRENT);\n\n      if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n        codecFormat = Codec.forName(input.readString());\n      } else {\n        codecFormat = Codec.forName(\"Lucene3x\");\n      }\n      SegmentInfosReader infosReader = codecFormat.segmentInfosFormat().getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, input, this, IOContext.READ);\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen)\n        throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      success = true;\n    }\n    finally {\n      if (input != null) {\n        input.close();\n      }\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.codecs = codecs;\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      SegmentInfosReader infosReader = codecs.getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, codecs, this, IOContext.READ);\n      success = true;\n    }\n    finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1efe3edca215dd9891cb42af283fed96f792ca0","date":1320428891,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    // TODO: scary to have default impl reopen the file... but to make it a bit more flexible,\n    // maybe we could use a plain indexinput here... could default impl rewind/wrap with checksumII,\n    // and any checksumming is then up to implementation?\n    ChecksumIndexInput input = null;\n    try {\n      input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n      final int format = input.readInt();\n      setFormat(format);\n    \n      // check that it is a format we can understand\n      if (format > DefaultSegmentInfosWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(input, format,\n          DefaultSegmentInfosWriter.FORMAT_MINIMUM, DefaultSegmentInfosWriter.FORMAT_CURRENT);\n      if (format < DefaultSegmentInfosWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(input, format,\n          DefaultSegmentInfosWriter.FORMAT_MINIMUM, DefaultSegmentInfosWriter.FORMAT_CURRENT);\n\n      if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n        codecFormat = Codec.forName(input.readString());\n      } else {\n        codecFormat = Codec.forName(\"Lucene3x\");\n      }\n      SegmentInfosReader infosReader = codecFormat.segmentInfosFormat().getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, input, this, IOContext.READ);\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen)\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      success = true;\n    }\n    finally {\n      if (input != null) {\n        input.close();\n      }\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    // TODO: scary to have default impl reopen the file... but to make it a bit more flexible,\n    // maybe we could use a plain indexinput here... could default impl rewind/wrap with checksumII,\n    // and any checksumming is then up to implementation?\n    ChecksumIndexInput input = null;\n    try {\n      input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n      final int format = input.readInt();\n      setFormat(format);\n    \n      // check that it is a format we can understand\n      if (format > DefaultSegmentInfosWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(segmentFileName, format,\n          DefaultSegmentInfosWriter.FORMAT_MINIMUM, DefaultSegmentInfosWriter.FORMAT_CURRENT);\n      if (format < DefaultSegmentInfosWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(segmentFileName, format,\n          DefaultSegmentInfosWriter.FORMAT_MINIMUM, DefaultSegmentInfosWriter.FORMAT_CURRENT);\n\n      if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n        codecFormat = Codec.forName(input.readString());\n      } else {\n        codecFormat = Codec.forName(\"Lucene3x\");\n      }\n      SegmentInfosReader infosReader = codecFormat.segmentInfosFormat().getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, input, this, IOContext.READ);\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen)\n        throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      success = true;\n    }\n    finally {\n      if (input != null) {\n        input.close();\n      }\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cfd7f00f3dbc4c50d336540f063493fc0f7d830f","date":1322850565,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    // TODO: scary to have default impl reopen the file... but to make it a bit more flexible,\n    // maybe we could use a plain indexinput here... could default impl rewind/wrap with checksumII,\n    // and any checksumming is then up to implementation?\n    ChecksumIndexInput input = null;\n    try {\n      input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n      final int format = input.readInt();\n      setFormat(format);\n    \n      // check that it is a format we can understand\n      if (format > FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(input, format,\n          FORMAT_MINIMUM, FORMAT_CURRENT);\n      if (format < FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(input, format,\n          FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      if (format <= FORMAT_4_0) {\n        codecFormat = Codec.forName(input.readString());\n      } else {\n        codecFormat = Codec.forName(\"Lucene3x\");\n      }\n      SegmentInfosReader infosReader = codecFormat.segmentInfosFormat().getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, input, this, IOContext.READ);\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen)\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      success = true;\n    }\n    finally {\n      if (input != null) {\n        input.close();\n      }\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    // TODO: scary to have default impl reopen the file... but to make it a bit more flexible,\n    // maybe we could use a plain indexinput here... could default impl rewind/wrap with checksumII,\n    // and any checksumming is then up to implementation?\n    ChecksumIndexInput input = null;\n    try {\n      input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n      final int format = input.readInt();\n      setFormat(format);\n    \n      // check that it is a format we can understand\n      if (format > DefaultSegmentInfosWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(input, format,\n          DefaultSegmentInfosWriter.FORMAT_MINIMUM, DefaultSegmentInfosWriter.FORMAT_CURRENT);\n      if (format < DefaultSegmentInfosWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(input, format,\n          DefaultSegmentInfosWriter.FORMAT_MINIMUM, DefaultSegmentInfosWriter.FORMAT_CURRENT);\n\n      if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n        codecFormat = Codec.forName(input.readString());\n      } else {\n        codecFormat = Codec.forName(\"Lucene3x\");\n      }\n      SegmentInfosReader infosReader = codecFormat.segmentInfosFormat().getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, input, this, IOContext.READ);\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen)\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      success = true;\n    }\n    finally {\n      if (input != null) {\n        input.close();\n      }\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    // TODO: scary to have default impl reopen the file... but to make it a bit more flexible,\n    // maybe we could use a plain indexinput here... could default impl rewind/wrap with checksumII,\n    // and any checksumming is then up to implementation?\n    ChecksumIndexInput input = null;\n    try {\n      input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n      final int format = input.readInt();\n      setFormat(format);\n    \n      // check that it is a format we can understand\n      if (format > FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(input, format,\n          FORMAT_MINIMUM, FORMAT_CURRENT);\n      if (format < FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(input, format,\n          FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      if (format <= FORMAT_4_0) {\n        codecFormat = Codec.forName(input.readString());\n      } else {\n        codecFormat = Codec.forName(\"Lucene3x\");\n      }\n      SegmentInfosReader infosReader = codecFormat.segmentInfosFormat().getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, input, this, IOContext.READ);\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen)\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      success = true;\n    }\n    finally {\n      if (input != null) {\n        input.close();\n      }\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    // TODO: scary to have default impl reopen the file... but to make it a bit more flexible,\n    // maybe we could use a plain indexinput here... could default impl rewind/wrap with checksumII,\n    // and any checksumming is then up to implementation?\n    ChecksumIndexInput input = null;\n    try {\n      input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n      final int format = input.readInt();\n      setFormat(format);\n    \n      // check that it is a format we can understand\n      if (format > FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(input, format,\n          FORMAT_MINIMUM, FORMAT_CURRENT);\n      if (format < FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(input, format,\n          FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      if (format <= FORMAT_4_0) {\n        codecFormat = Codec.forName(input.readString());\n      } else {\n        codecFormat = Codec.forName(\"Lucene3x\");\n      }\n      SegmentInfosReader infosReader = codecFormat.segmentInfosFormat().getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, input, this, IOContext.READ);\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen)\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      success = true;\n    }\n    finally {\n      if (input != null) {\n        input.close();\n      }\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["f1efe3edca215dd9891cb42af283fed96f792ca0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"f1efe3edca215dd9891cb42af283fed96f792ca0":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["f1efe3edca215dd9891cb42af283fed96f792ca0"],"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f1efe3edca215dd9891cb42af283fed96f792ca0":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7b91922b55d15444d554721b352861d028eb8278"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}