{"path":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#readTermsBlock(IndexInput,FieldInfo,BlockTermState).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#readTermsBlock(IndexInput,FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReader#readTermsBlock(IndexInput,FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void readTermsBlock(IndexInput termsIn, FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR.readTermsBlock state=\" + _termState);\n    final PulsingTermState termState = (PulsingTermState) _termState;\n    if (termState.inlinedBytes == null) {\n      termState.inlinedBytes = new byte[128];\n      termState.inlinedBytesReader = new ByteArrayDataInput();\n    }\n    int len = termsIn.readVInt();\n    //System.out.println(\"  len=\" + len + \" fp=\" + termsIn.getFilePointer());\n    if (termState.inlinedBytes.length < len) {\n      termState.inlinedBytes = new byte[ArrayUtil.oversize(len, 1)];\n    }\n    termsIn.readBytes(termState.inlinedBytes, 0, len);\n    termState.inlinedBytesReader.reset(termState.inlinedBytes);\n    termState.wrappedTermState.termBlockOrd = 0;\n    wrappedPostingsReader.readTermsBlock(termsIn, fieldInfo, termState.wrappedTermState);\n  }\n\n","sourceOld":"  @Override\n  public void readTermsBlock(IndexInput termsIn, FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR.readTermsBlock state=\" + _termState);\n    final PulsingTermState termState = (PulsingTermState) _termState;\n    if (termState.inlinedBytes == null) {\n      termState.inlinedBytes = new byte[128];\n      termState.inlinedBytesReader = new ByteArrayDataInput();\n    }\n    int len = termsIn.readVInt();\n    //System.out.println(\"  len=\" + len + \" fp=\" + termsIn.getFilePointer());\n    if (termState.inlinedBytes.length < len) {\n      termState.inlinedBytes = new byte[ArrayUtil.oversize(len, 1)];\n    }\n    termsIn.readBytes(termState.inlinedBytes, 0, len);\n    termState.inlinedBytesReader.reset(termState.inlinedBytes);\n    termState.wrappedTermState.termBlockOrd = 0;\n    wrappedPostingsReader.readTermsBlock(termsIn, fieldInfo, termState.wrappedTermState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#readTermsBlock(IndexInput,FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#readTermsBlock(IndexInput,FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void readTermsBlock(IndexInput termsIn, FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR.readTermsBlock state=\" + _termState);\n    final PulsingTermState termState = (PulsingTermState) _termState;\n    if (termState.inlinedBytes == null) {\n      termState.inlinedBytes = new byte[128];\n      termState.inlinedBytesReader = new ByteArrayDataInput();\n    }\n    int len = termsIn.readVInt();\n    //System.out.println(\"  len=\" + len + \" fp=\" + termsIn.getFilePointer());\n    if (termState.inlinedBytes.length < len) {\n      termState.inlinedBytes = new byte[ArrayUtil.oversize(len, 1)];\n    }\n    termsIn.readBytes(termState.inlinedBytes, 0, len);\n    termState.inlinedBytesReader.reset(termState.inlinedBytes);\n    termState.wrappedTermState.termBlockOrd = 0;\n    wrappedPostingsReader.readTermsBlock(termsIn, fieldInfo, termState.wrappedTermState);\n  }\n\n","sourceOld":"  @Override\n  public void readTermsBlock(IndexInput termsIn, FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR.readTermsBlock state=\" + _termState);\n    final PulsingTermState termState = (PulsingTermState) _termState;\n    if (termState.inlinedBytes == null) {\n      termState.inlinedBytes = new byte[128];\n      termState.inlinedBytesReader = new ByteArrayDataInput();\n    }\n    int len = termsIn.readVInt();\n    //System.out.println(\"  len=\" + len + \" fp=\" + termsIn.getFilePointer());\n    if (termState.inlinedBytes.length < len) {\n      termState.inlinedBytes = new byte[ArrayUtil.oversize(len, 1)];\n    }\n    termsIn.readBytes(termState.inlinedBytes, 0, len);\n    termState.inlinedBytesReader.reset(termState.inlinedBytes);\n    termState.wrappedTermState.termBlockOrd = 0;\n    wrappedPostingsReader.readTermsBlock(termsIn, fieldInfo, termState.wrappedTermState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}