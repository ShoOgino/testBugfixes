{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap.Builder#build().mjava","commits":[{"id":"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545","date":1336310014,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap.Builder#build().mjava","pathOld":"/dev/null","sourceNew":"    /** Builds the NormalizeCharMap; call this once you\n     *  are done calling {@link #add}. */\n    public NormalizeCharMap build() {\n\n      final FST<CharsRef> map;\n      try {\n        final Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n        final org.apache.lucene.util.fst.Builder<CharsRef> builder = new org.apache.lucene.util.fst.Builder<CharsRef>(FST.INPUT_TYPE.BYTE2, outputs);\n        final IntsRef scratch = new IntsRef();\n        for(Map.Entry<String,String> ent : pendingPairs.entrySet()) {\n          builder.add(Util.toUTF32(ent.getKey(), scratch),\n                      new CharsRef(ent.getValue()));\n      \n        }\n        map = builder.finish();\n        pendingPairs.clear();\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n\n      return new NormalizeCharMap(map);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"568a645b11ac7a39e75da7b1cbea441a16e47635","date":1345226141,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap.Builder#build().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap.Builder#build().mjava","sourceNew":"    /** Builds the NormalizeCharMap; call this once you\n     *  are done calling {@link #add}. */\n    public NormalizeCharMap build() {\n\n      final FST<CharsRef> map;\n      try {\n        final Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n        final org.apache.lucene.util.fst.Builder<CharsRef> builder = new org.apache.lucene.util.fst.Builder<CharsRef>(FST.INPUT_TYPE.BYTE2, outputs);\n        final IntsRef scratch = new IntsRef();\n        for(Map.Entry<String,String> ent : pendingPairs.entrySet()) {\n          builder.add(Util.toUTF16(ent.getKey(), scratch),\n                      new CharsRef(ent.getValue()));\n        }\n        map = builder.finish();\n        pendingPairs.clear();\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n\n      return new NormalizeCharMap(map);\n    }\n\n","sourceOld":"    /** Builds the NormalizeCharMap; call this once you\n     *  are done calling {@link #add}. */\n    public NormalizeCharMap build() {\n\n      final FST<CharsRef> map;\n      try {\n        final Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n        final org.apache.lucene.util.fst.Builder<CharsRef> builder = new org.apache.lucene.util.fst.Builder<CharsRef>(FST.INPUT_TYPE.BYTE2, outputs);\n        final IntsRef scratch = new IntsRef();\n        for(Map.Entry<String,String> ent : pendingPairs.entrySet()) {\n          builder.add(Util.toUTF32(ent.getKey(), scratch),\n                      new CharsRef(ent.getValue()));\n      \n        }\n        map = builder.finish();\n        pendingPairs.clear();\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n\n      return new NormalizeCharMap(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27cbdd6eaf81f9fada7736ab457efbd65b1d9271","date":1345226378,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap.Builder#build().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap.Builder#build().mjava","sourceNew":"    /** Builds the NormalizeCharMap; call this once you\n     *  are done calling {@link #add}. */\n    public NormalizeCharMap build() {\n\n      final FST<CharsRef> map;\n      try {\n        final Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n        final org.apache.lucene.util.fst.Builder<CharsRef> builder = new org.apache.lucene.util.fst.Builder<CharsRef>(FST.INPUT_TYPE.BYTE2, outputs);\n        final IntsRef scratch = new IntsRef();\n        for(Map.Entry<String,String> ent : pendingPairs.entrySet()) {\n          builder.add(Util.toUTF32(ent.getKey(), scratch),\n                      new CharsRef(ent.getValue()));\n      \n        }\n        map = builder.finish();\n        pendingPairs.clear();\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n\n      return new NormalizeCharMap(map);\n    }\n\n","sourceOld":"    /** Builds the NormalizeCharMap; call this once you\n     *  are done calling {@link #add}. */\n    public NormalizeCharMap build() {\n\n      final FST<CharsRef> map;\n      try {\n        final Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n        final org.apache.lucene.util.fst.Builder<CharsRef> builder = new org.apache.lucene.util.fst.Builder<CharsRef>(FST.INPUT_TYPE.BYTE2, outputs);\n        final IntsRef scratch = new IntsRef();\n        for(Map.Entry<String,String> ent : pendingPairs.entrySet()) {\n          builder.add(Util.toUTF16(ent.getKey(), scratch),\n                      new CharsRef(ent.getValue()));\n        }\n        map = builder.finish();\n        pendingPairs.clear();\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n\n      return new NormalizeCharMap(map);\n    }\n\n","bugFix":null,"bugIntro":["cfa2e3018325e8460563f18bd453cb779254c5f0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cfa2e3018325e8460563f18bd453cb779254c5f0","date":1345227284,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap.Builder#build().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap.Builder#build().mjava","sourceNew":"    /** Builds the NormalizeCharMap; call this once you\n     *  are done calling {@link #add}. */\n    public NormalizeCharMap build() {\n\n      final FST<CharsRef> map;\n      try {\n        final Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n        final org.apache.lucene.util.fst.Builder<CharsRef> builder = new org.apache.lucene.util.fst.Builder<CharsRef>(FST.INPUT_TYPE.BYTE2, outputs);\n        final IntsRef scratch = new IntsRef();\n        for(Map.Entry<String,String> ent : pendingPairs.entrySet()) {\n          builder.add(Util.toUTF16(ent.getKey(), scratch),\n                      new CharsRef(ent.getValue()));\n        }\n        map = builder.finish();\n        pendingPairs.clear();\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n\n      return new NormalizeCharMap(map);\n    }\n\n","sourceOld":"    /** Builds the NormalizeCharMap; call this once you\n     *  are done calling {@link #add}. */\n    public NormalizeCharMap build() {\n\n      final FST<CharsRef> map;\n      try {\n        final Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n        final org.apache.lucene.util.fst.Builder<CharsRef> builder = new org.apache.lucene.util.fst.Builder<CharsRef>(FST.INPUT_TYPE.BYTE2, outputs);\n        final IntsRef scratch = new IntsRef();\n        for(Map.Entry<String,String> ent : pendingPairs.entrySet()) {\n          builder.add(Util.toUTF32(ent.getKey(), scratch),\n                      new CharsRef(ent.getValue()));\n      \n        }\n        map = builder.finish();\n        pendingPairs.clear();\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n\n      return new NormalizeCharMap(map);\n    }\n\n","bugFix":["27cbdd6eaf81f9fada7736ab457efbd65b1d9271"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap.Builder#build().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap.Builder#build().mjava","sourceNew":"    /** Builds the NormalizeCharMap; call this once you\n     *  are done calling {@link #add}. */\n    public NormalizeCharMap build() {\n\n      final FST<CharsRef> map;\n      try {\n        final Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n        final org.apache.lucene.util.fst.Builder<CharsRef> builder = new org.apache.lucene.util.fst.Builder<CharsRef>(FST.INPUT_TYPE.BYTE2, outputs);\n        final IntsRef scratch = new IntsRef();\n        for(Map.Entry<String,String> ent : pendingPairs.entrySet()) {\n          builder.add(Util.toUTF16(ent.getKey(), scratch),\n                      new CharsRef(ent.getValue()));\n        }\n        map = builder.finish();\n        pendingPairs.clear();\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n\n      return new NormalizeCharMap(map);\n    }\n\n","sourceOld":"    /** Builds the NormalizeCharMap; call this once you\n     *  are done calling {@link #add}. */\n    public NormalizeCharMap build() {\n\n      final FST<CharsRef> map;\n      try {\n        final Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n        final org.apache.lucene.util.fst.Builder<CharsRef> builder = new org.apache.lucene.util.fst.Builder<CharsRef>(FST.INPUT_TYPE.BYTE2, outputs);\n        final IntsRef scratch = new IntsRef();\n        for(Map.Entry<String,String> ent : pendingPairs.entrySet()) {\n          builder.add(Util.toUTF32(ent.getKey(), scratch),\n                      new CharsRef(ent.getValue()));\n      \n        }\n        map = builder.finish();\n        pendingPairs.clear();\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n\n      return new NormalizeCharMap(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap.Builder#build().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap.Builder#build().mjava","sourceNew":"    /** Builds the NormalizeCharMap; call this once you\n     *  are done calling {@link #add}. */\n    public NormalizeCharMap build() {\n\n      final FST<CharsRef> map;\n      try {\n        final Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n        final org.apache.lucene.util.fst.Builder<CharsRef> builder = new org.apache.lucene.util.fst.Builder<CharsRef>(FST.INPUT_TYPE.BYTE2, outputs);\n        final IntsRef scratch = new IntsRef();\n        for(Map.Entry<String,String> ent : pendingPairs.entrySet()) {\n          builder.add(Util.toUTF16(ent.getKey(), scratch),\n                      new CharsRef(ent.getValue()));\n        }\n        map = builder.finish();\n        pendingPairs.clear();\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n\n      return new NormalizeCharMap(map);\n    }\n\n","sourceOld":"    /** Builds the NormalizeCharMap; call this once you\n     *  are done calling {@link #add}. */\n    public NormalizeCharMap build() {\n\n      final FST<CharsRef> map;\n      try {\n        final Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n        final org.apache.lucene.util.fst.Builder<CharsRef> builder = new org.apache.lucene.util.fst.Builder<CharsRef>(FST.INPUT_TYPE.BYTE2, outputs);\n        final IntsRef scratch = new IntsRef();\n        for(Map.Entry<String,String> ent : pendingPairs.entrySet()) {\n          builder.add(Util.toUTF32(ent.getKey(), scratch),\n                      new CharsRef(ent.getValue()));\n      \n        }\n        map = builder.finish();\n        pendingPairs.clear();\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n\n      return new NormalizeCharMap(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap.Builder#build().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap.Builder#build().mjava","sourceNew":"    /** Builds the NormalizeCharMap; call this once you\n     *  are done calling {@link #add}. */\n    public NormalizeCharMap build() {\n\n      final FST<CharsRef> map;\n      try {\n        final Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n        final org.apache.lucene.util.fst.Builder<CharsRef> builder = new org.apache.lucene.util.fst.Builder<>(FST.INPUT_TYPE.BYTE2, outputs);\n        final IntsRef scratch = new IntsRef();\n        for(Map.Entry<String,String> ent : pendingPairs.entrySet()) {\n          builder.add(Util.toUTF16(ent.getKey(), scratch),\n                      new CharsRef(ent.getValue()));\n        }\n        map = builder.finish();\n        pendingPairs.clear();\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n\n      return new NormalizeCharMap(map);\n    }\n\n","sourceOld":"    /** Builds the NormalizeCharMap; call this once you\n     *  are done calling {@link #add}. */\n    public NormalizeCharMap build() {\n\n      final FST<CharsRef> map;\n      try {\n        final Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n        final org.apache.lucene.util.fst.Builder<CharsRef> builder = new org.apache.lucene.util.fst.Builder<CharsRef>(FST.INPUT_TYPE.BYTE2, outputs);\n        final IntsRef scratch = new IntsRef();\n        for(Map.Entry<String,String> ent : pendingPairs.entrySet()) {\n          builder.add(Util.toUTF16(ent.getKey(), scratch),\n                      new CharsRef(ent.getValue()));\n        }\n        map = builder.finish();\n        pendingPairs.clear();\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n\n      return new NormalizeCharMap(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap.Builder#build().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap.Builder#build().mjava","sourceNew":"    /** Builds the NormalizeCharMap; call this once you\n     *  are done calling {@link #add}. */\n    public NormalizeCharMap build() {\n\n      final FST<CharsRef> map;\n      try {\n        final Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n        final org.apache.lucene.util.fst.Builder<CharsRef> builder = new org.apache.lucene.util.fst.Builder<>(FST.INPUT_TYPE.BYTE2, outputs);\n        final IntsRefBuilder scratch = new IntsRefBuilder();\n        for(Map.Entry<String,String> ent : pendingPairs.entrySet()) {\n          builder.add(Util.toUTF16(ent.getKey(), scratch),\n                      new CharsRef(ent.getValue()));\n        }\n        map = builder.finish();\n        pendingPairs.clear();\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n\n      return new NormalizeCharMap(map);\n    }\n\n","sourceOld":"    /** Builds the NormalizeCharMap; call this once you\n     *  are done calling {@link #add}. */\n    public NormalizeCharMap build() {\n\n      final FST<CharsRef> map;\n      try {\n        final Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n        final org.apache.lucene.util.fst.Builder<CharsRef> builder = new org.apache.lucene.util.fst.Builder<>(FST.INPUT_TYPE.BYTE2, outputs);\n        final IntsRef scratch = new IntsRef();\n        for(Map.Entry<String,String> ent : pendingPairs.entrySet()) {\n          builder.add(Util.toUTF16(ent.getKey(), scratch),\n                      new CharsRef(ent.getValue()));\n        }\n        map = builder.finish();\n        pendingPairs.clear();\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n\n      return new NormalizeCharMap(map);\n    }\n\n","bugFix":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap.Builder#build().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap.Builder#build().mjava","sourceNew":"    /** Builds the NormalizeCharMap; call this once you\n     *  are done calling {@link #add}. */\n    public NormalizeCharMap build() {\n\n      final FST<CharsRef> map;\n      try {\n        final Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n        final FSTCompiler<CharsRef> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE2, outputs);\n        final IntsRefBuilder scratch = new IntsRefBuilder();\n        for(Map.Entry<String,String> ent : pendingPairs.entrySet()) {\n          fstCompiler.add(Util.toUTF16(ent.getKey(), scratch),\n                      new CharsRef(ent.getValue()));\n        }\n        map = fstCompiler.compile();\n        pendingPairs.clear();\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n\n      return new NormalizeCharMap(map);\n    }\n\n","sourceOld":"    /** Builds the NormalizeCharMap; call this once you\n     *  are done calling {@link #add}. */\n    public NormalizeCharMap build() {\n\n      final FST<CharsRef> map;\n      try {\n        final Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n        final org.apache.lucene.util.fst.Builder<CharsRef> builder = new org.apache.lucene.util.fst.Builder<>(FST.INPUT_TYPE.BYTE2, outputs);\n        final IntsRefBuilder scratch = new IntsRefBuilder();\n        for(Map.Entry<String,String> ent : pendingPairs.entrySet()) {\n          builder.add(Util.toUTF16(ent.getKey(), scratch),\n                      new CharsRef(ent.getValue()));\n        }\n        map = builder.finish();\n        pendingPairs.clear();\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n\n      return new NormalizeCharMap(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap.Builder#build().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap.Builder#build().mjava","sourceNew":"    /** Builds the NormalizeCharMap; call this once you\n     *  are done calling {@link #add}. */\n    public NormalizeCharMap build() {\n\n      final FST<CharsRef> map;\n      try {\n        final Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n        final FSTCompiler<CharsRef> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE2, outputs);\n        final IntsRefBuilder scratch = new IntsRefBuilder();\n        for(Map.Entry<String,String> ent : pendingPairs.entrySet()) {\n          fstCompiler.add(Util.toUTF16(ent.getKey(), scratch),\n                      new CharsRef(ent.getValue()));\n        }\n        map = fstCompiler.compile();\n        pendingPairs.clear();\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n\n      return new NormalizeCharMap(map);\n    }\n\n","sourceOld":"    /** Builds the NormalizeCharMap; call this once you\n     *  are done calling {@link #add}. */\n    public NormalizeCharMap build() {\n\n      final FST<CharsRef> map;\n      try {\n        final Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n        final org.apache.lucene.util.fst.Builder<CharsRef> builder = new org.apache.lucene.util.fst.Builder<>(FST.INPUT_TYPE.BYTE2, outputs);\n        final IntsRefBuilder scratch = new IntsRefBuilder();\n        for(Map.Entry<String,String> ent : pendingPairs.entrySet()) {\n          builder.add(Util.toUTF16(ent.getKey(), scratch),\n                      new CharsRef(ent.getValue()));\n        }\n        map = builder.finish();\n        pendingPairs.clear();\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n\n      return new NormalizeCharMap(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cfa2e3018325e8460563f18bd453cb779254c5f0"],"568a645b11ac7a39e75da7b1cbea441a16e47635":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545"],"cfa2e3018325e8460563f18bd453cb779254c5f0":["27cbdd6eaf81f9fada7736ab457efbd65b1d9271"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545","cfa2e3018325e8460563f18bd453cb779254c5f0"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545","cfa2e3018325e8460563f18bd453cb779254c5f0"],"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"27cbdd6eaf81f9fada7736ab457efbd65b1d9271":["568a645b11ac7a39e75da7b1cbea441a16e47635"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"568a645b11ac7a39e75da7b1cbea441a16e47635":["27cbdd6eaf81f9fada7736ab457efbd65b1d9271"],"cfa2e3018325e8460563f18bd453cb779254c5f0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545":["568a645b11ac7a39e75da7b1cbea441a16e47635","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"27cbdd6eaf81f9fada7736ab457efbd65b1d9271":["cfa2e3018325e8460563f18bd453cb779254c5f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}