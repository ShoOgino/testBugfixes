{"path":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#buildSpellIndex(SolrIndexSearcher).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#buildSpellIndex(SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#buildSpellIndex(SolrIndexSearcher).mjava","sourceNew":"    private void buildSpellIndex(SolrIndexSearcher newSearcher) {\n      try {\n        LOG.info(\"Building spell index for spell checker: \" + checker.getDictionaryName());\n        checker.build(core, newSearcher);\n      } catch (Exception e) {\n        log.error(\n                \"Exception in building spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n      }\n    }\n\n","sourceOld":"    private void buildSpellIndex(SolrIndexSearcher newSearcher) {\n      try {\n        LOG.info(\"Building spell index for spell checker: \" + checker.getDictionaryName());\n        checker.build(core, newSearcher);\n      } catch (Exception e) {\n        log.error(\n                \"Exception in building spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#buildSpellIndex(SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#buildSpellIndex(SolrIndexSearcher).mjava","sourceNew":"    private void buildSpellIndex(SolrIndexSearcher newSearcher) {\n      try {\n        LOG.info(\"Building spell index for spell checker: \" + checker.getDictionaryName());\n        checker.build(core, newSearcher);\n      } catch (Exception e) {\n        log.error(\n                \"Exception in building spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n      }\n    }\n\n","sourceOld":"    private void buildSpellIndex(SolrIndexSearcher newSearcher) {\n      try {\n        LOG.info(\"Building spell index for spell checker: \" + checker.getDictionaryName());\n        checker.build(core, newSearcher);\n      } catch (Exception e) {\n        log.error(\n                \"Exception in building spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#buildSpellIndex(SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#buildSpellIndex(SolrIndexSearcher).mjava","sourceNew":"    private void buildSpellIndex(SolrIndexSearcher newSearcher) {\n      try {\n        LOG.info(\"Building spell index for spell checker: \" + checker.getDictionaryName());\n        checker.build(core, newSearcher);\n      } catch (Exception e) {\n        log.error(\n                \"Exception in building spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n      }\n    }\n\n","sourceOld":"    private void buildSpellIndex(SolrIndexSearcher newSearcher) {\n      try {\n        LOG.info(\"Building spell index for spell checker: \" + checker.getDictionaryName());\n        checker.build(core, newSearcher);\n      } catch (Exception e) {\n        log.error(\n                \"Exception in building spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#buildSpellIndex(SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#buildSpellIndex(SolrIndexSearcher).mjava","sourceNew":"    private void buildSpellIndex(SolrIndexSearcher newSearcher) {\n      try {\n        LOG.info(\"Building spell index for spell checker: \" + checker.getDictionaryName());\n        checker.build(core, newSearcher);\n      } catch (Exception e) {\n        LOG.error(\n                \"Exception in building spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n      }\n    }\n\n","sourceOld":"    private void buildSpellIndex(SolrIndexSearcher newSearcher) {\n      try {\n        LOG.info(\"Building spell index for spell checker: \" + checker.getDictionaryName());\n        checker.build(core, newSearcher);\n      } catch (Exception e) {\n        log.error(\n                \"Exception in building spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#buildSpellIndex(SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#buildSpellIndex(SolrIndexSearcher).mjava","sourceNew":"    private void buildSpellIndex(SolrIndexSearcher newSearcher) {\n      try {\n        log.info(\"Building spell index for spell checker: \" + checker.getDictionaryName());\n        checker.build(core, newSearcher);\n      } catch (Exception e) {\n        log.error(\n                \"Exception in building spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n      }\n    }\n\n","sourceOld":"    private void buildSpellIndex(SolrIndexSearcher newSearcher) {\n      try {\n        LOG.info(\"Building spell index for spell checker: \" + checker.getDictionaryName());\n        checker.build(core, newSearcher);\n      } catch (Exception e) {\n        LOG.error(\n                \"Exception in building spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#buildSpellIndex(SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#buildSpellIndex(SolrIndexSearcher).mjava","sourceNew":"    private void buildSpellIndex(SolrIndexSearcher newSearcher) {\n      try {\n        if (log.isInfoEnabled()) {\n          log.info(\"Building spell index for spell checker: {}\", checker.getDictionaryName());\n        }\n        checker.build(core, newSearcher);\n      } catch (Exception e) {\n        log.error(\"Exception in building spell check index for spellchecker: {}\", checker.getDictionaryName(), e);\n      }\n    }\n\n","sourceOld":"    private void buildSpellIndex(SolrIndexSearcher newSearcher) {\n      try {\n        log.info(\"Building spell index for spell checker: \" + checker.getDictionaryName());\n        checker.build(core, newSearcher);\n      } catch (Exception e) {\n        log.error(\n                \"Exception in building spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["9367dbf5b00d7764583d991c1888f4acc9c9991a"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}