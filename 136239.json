{"path":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#andExpression(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#andExpression(String).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#andExpression(String).mjava","sourceNew":"  final public Query andExpression(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int modifier;\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, MOD_NONE, q);\n    firstQuery = q;\n    label_2:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_2;\n      }\n      jj_consume_token(AND);\n      modifier = Modifier();\n      q = Clause(field);\n      addClause(clauses, CONJ_AND, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query andExpression(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int modifier;\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, MOD_NONE, q);\n    firstQuery = q;\n    label_2:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_2;\n      }\n      jj_consume_token(AND);\n      modifier = Modifier();\n      q = Clause(field);\n      addClause(clauses, CONJ_AND, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#andExpression(String).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#andExpression(String).mjava","sourceNew":"  final public Query andExpression(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int modifier;\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, MOD_NONE, q);\n    firstQuery = q;\n    label_2:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_2;\n      }\n      jj_consume_token(AND);\n      modifier = Modifier();\n      q = Clause(field);\n      addClause(clauses, CONJ_AND, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query andExpression(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int modifier;\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, MOD_NONE, q);\n    firstQuery = q;\n    label_2:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_2;\n      }\n      jj_consume_token(AND);\n      modifier = Modifier();\n      q = Clause(field);\n      addClause(clauses, CONJ_AND, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}