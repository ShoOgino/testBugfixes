{"path":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter.ByteSequencesReader#read().mjava","commits":[{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter.ByteSequencesReader#read().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort.ByteSequencesReader#read().mjava","sourceNew":"    /**\n     * Reads the next entry and returns it if successful.\n     * \n     * @see #read(BytesRef)\n     * \n     * @return Returns <code>null</code> if EOF occurred before the next entry\n     * could be read.\n     * @throws EOFException if the file ends before the full sequence is read.\n     */\n    public byte[] read() throws IOException {\n      short length;\n      try {\n        length = is.readShort();\n      } catch (EOFException e) {\n        return null;\n      }\n\n      assert length >= 0 : \"Sanity: sequence length < 0: \" + length;\n      byte [] result = new byte [length];\n      is.readFully(result);\n      return result;\n    }\n\n","sourceOld":"    /**\n     * Reads the next entry and returns it if successful.\n     * \n     * @see #read(BytesRef)\n     * \n     * @return Returns <code>null</code> if EOF occurred before the next entry\n     * could be read.\n     * @throws EOFException if the file ends before the full sequence is read.\n     */\n    public byte[] read() throws IOException {\n      short length;\n      try {\n        length = is.readShort();\n      } catch (EOFException e) {\n        return null;\n      }\n\n      assert length >= 0 : \"Sanity: sequence length < 0: \" + length;\n      byte [] result = new byte [length];\n      is.readFully(result);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter.ByteSequencesReader#read().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort.ByteSequencesReader#read().mjava","sourceNew":"    /**\n     * Reads the next entry and returns it if successful.\n     * \n     * @see #read(BytesRef)\n     * \n     * @return Returns <code>null</code> if EOF occurred before the next entry\n     * could be read.\n     * @throws EOFException if the file ends before the full sequence is read.\n     */\n    public byte[] read() throws IOException {\n      short length;\n      try {\n        length = is.readShort();\n      } catch (EOFException e) {\n        return null;\n      }\n\n      assert length >= 0 : \"Sanity: sequence length < 0: \" + length;\n      byte [] result = new byte [length];\n      is.readFully(result);\n      return result;\n    }\n\n","sourceOld":"    /**\n     * Reads the next entry and returns it if successful.\n     * \n     * @see #read(BytesRef)\n     * \n     * @return Returns <code>null</code> if EOF occurred before the next entry\n     * could be read.\n     * @throws EOFException if the file ends before the full sequence is read.\n     */\n    public byte[] read() throws IOException {\n      short length;\n      try {\n        length = is.readShort();\n      } catch (EOFException e) {\n        return null;\n      }\n\n      assert length >= 0 : \"Sanity: sequence length < 0: \" + length;\n      byte [] result = new byte [length];\n      is.readFully(result);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter.ByteSequencesReader#read().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter.ByteSequencesReader#read().mjava","sourceNew":"    /**\n     * Reads the next entry and returns it if successful.\n     * \n     * @see #read(BytesRefBuilder)\n     * \n     * @return Returns <code>null</code> if EOF occurred before the next entry\n     * could be read.\n     * @throws EOFException if the file ends before the full sequence is read.\n     */\n    public byte[] read() throws IOException {\n      short length;\n      try {\n        length = is.readShort();\n      } catch (EOFException e) {\n        return null;\n      }\n\n      assert length >= 0 : \"Sanity: sequence length < 0: \" + length;\n      byte [] result = new byte [length];\n      is.readFully(result);\n      return result;\n    }\n\n","sourceOld":"    /**\n     * Reads the next entry and returns it if successful.\n     * \n     * @see #read(BytesRef)\n     * \n     * @return Returns <code>null</code> if EOF occurred before the next entry\n     * could be read.\n     * @throws EOFException if the file ends before the full sequence is read.\n     */\n    public byte[] read() throws IOException {\n      short length;\n      try {\n        length = is.readShort();\n      } catch (EOFException e) {\n        return null;\n      }\n\n      assert length >= 0 : \"Sanity: sequence length < 0: \" + length;\n      byte [] result = new byte [length];\n      is.readFully(result);\n      return result;\n    }\n\n","bugFix":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter.ByteSequencesReader#read().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter.ByteSequencesReader#read().mjava","sourceNew":"    /**\n     * Reads the next entry and returns it if successful.\n     * \n     * @see #read(BytesRefBuilder)\n     * \n     * @return Returns <code>null</code> if EOF occurred before the next entry\n     * could be read.\n     * @throws EOFException if the file ends before the full sequence is read.\n     */\n    public byte[] read() throws IOException {\n      short length;\n      try {\n        length = in.readShort();\n      } catch (EOFException e) {\n        return null;\n      }\n\n      assert length >= 0 : \"Sanity: sequence length < 0: \" + length;\n      byte[] result = new byte[length];\n      in.readBytes(result, 0, length);\n      return result;\n    }\n\n","sourceOld":"    /**\n     * Reads the next entry and returns it if successful.\n     * \n     * @see #read(BytesRefBuilder)\n     * \n     * @return Returns <code>null</code> if EOF occurred before the next entry\n     * could be read.\n     * @throws EOFException if the file ends before the full sequence is read.\n     */\n    public byte[] read() throws IOException {\n      short length;\n      try {\n        length = is.readShort();\n      } catch (EOFException e) {\n        return null;\n      }\n\n      assert length >= 0 : \"Sanity: sequence length < 0: \" + length;\n      byte [] result = new byte [length];\n      is.readFully(result);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3ce1ef883d26aa73919aa2d53991726e96caa13","date":1445421402,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter.ByteSequencesReader#read().mjava","sourceNew":null,"sourceOld":"    /**\n     * Reads the next entry and returns it if successful.\n     * \n     * @see #read(BytesRefBuilder)\n     * \n     * @return Returns <code>null</code> if EOF occurred before the next entry\n     * could be read.\n     * @throws EOFException if the file ends before the full sequence is read.\n     */\n    public byte[] read() throws IOException {\n      short length;\n      try {\n        length = in.readShort();\n      } catch (EOFException e) {\n        return null;\n      }\n\n      assert length >= 0 : \"Sanity: sequence length < 0: \" + length;\n      byte[] result = new byte[length];\n      in.readBytes(result, 0, length);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","36f5a8c57e16c0f801006a52f87c75378427852e"],"36f5a8c57e16c0f801006a52f87c75378427852e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3ce1ef883d26aa73919aa2d53991726e96caa13"]},"commit2Childs":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}