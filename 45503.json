{"path":"contrib/misc/src/test/org/apache/lucene/misc/TestLengthNormModifier#testGoodCases().mjava","commits":[{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/misc/TestLengthNormModifier#testGoodCases().mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/misc/TestLengthNormModifier#testGoodCases().mjava","sourceNew":"    public void testGoodCases() throws Exception {\n\t\n\tIndexSearcher searcher;\n\tfinal float[] scores = new float[NUM_DOCS];\n\tfloat lastScore = 0.0f;\n\t\n\t// default similarity should put docs with shorter length first\n  searcher = new IndexSearcher(store);\n  searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n    private int docBase = 0;\n    private Scorer scorer;\n    public final void collect(int doc) throws IOException {\n      scores[doc + docBase] = scorer.score();\n    }\n    public void setNextReader(IndexReader reader, int docBase) {\n      this.docBase = docBase;\n    }\n    public void setScorer(Scorer scorer) throws IOException {\n      this.scorer = scorer;\n    }\n    public boolean acceptsDocsOutOfOrder() {\n      return true;\n    }\n  });\n  searcher.close();\n\t\n\tlastScore = Float.MAX_VALUE;\n\tfor (int i = 0; i < NUM_DOCS; i++) {\n\t    String msg = \"i=\" + i + \", \"+scores[i]+\" <= \"+lastScore;\n\t    assertTrue(msg, scores[i] <= lastScore);\n\t    //System.out.println(msg);\n\t    lastScore = scores[i];\n\t}\n\n\t// override the norms to be inverted\n\tSimilarity s = new DefaultSimilarity() {\n\t\tpublic float lengthNorm(String fieldName, int numTokens) {\n\t\t    return numTokens;\n\t\t}\n\t    };\n\tFieldNormModifier fnm = new FieldNormModifier(store, s);\n\tfnm.reSetNorms(\"field\");\n\n\t// new norm (with default similarity) should put longer docs first\n\tsearcher = new IndexSearcher(store);\n\tsearcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n\t\n\tlastScore = 0.0f;\n\tfor (int i = 0; i < NUM_DOCS; i++) {\n\t    String msg = \"i=\" + i + \", \"+scores[i]+\" >= \"+lastScore;\n\t    assertTrue(msg, scores[i] >= lastScore);\n\t    //System.out.println(msg);\n\t    lastScore = scores[i];\n\t}\n\t\n    }\n\n","sourceOld":"    public void testGoodCases() throws Exception {\n\t\n\tIndexSearcher searcher;\n\tfinal float[] scores = new float[NUM_DOCS];\n\tfloat lastScore = 0.0f;\n\t\n\t// default similarity should put docs with shorter length first\n  searcher = new IndexSearcher(store);\n  searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n    private int docBase = 0;\n    private Scorer scorer;\n    public final void collect(int doc) throws IOException {\n      scores[doc + docBase] = scorer.score();\n    }\n    public void setNextReader(IndexReader reader, int docBase) {\n      this.docBase = docBase;\n    }\n    public void setScorer(Scorer scorer) throws IOException {\n      this.scorer = scorer;\n    }\n    public boolean acceptsDocsOutOfOrder() {\n      return true;\n    }\n  });\n  searcher.close();\n\t\n\tlastScore = Float.MAX_VALUE;\n\tfor (int i = 0; i < NUM_DOCS; i++) {\n\t    String msg = \"i=\" + i + \", \"+scores[i]+\" <= \"+lastScore;\n\t    assertTrue(msg, scores[i] <= lastScore);\n\t    //System.out.println(msg);\n\t    lastScore = scores[i];\n\t}\n\n\t// override the norms to be inverted\n\tSimilarity s = new DefaultSimilarity() {\n\t\tpublic float lengthNorm(String fieldName, int numTokens) {\n\t\t    return numTokens;\n\t\t}\n\t    };\n\tFieldNormModifier fnm = new FieldNormModifier(store, s);\n\tfnm.reSetNorms(\"field\");\n\n\t// new norm (with default similarity) should put longer docs first\n\tsearcher = new IndexSearcher(store);\n\tsearcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n\t\n\tlastScore = 0.0f;\n\tfor (int i = 0; i < NUM_DOCS; i++) {\n\t    String msg = \"i=\" + i + \", \"+scores[i]+\" >= \"+lastScore;\n\t    assertTrue(msg, scores[i] >= lastScore);\n\t    //System.out.println(msg);\n\t    lastScore = scores[i];\n\t}\n\t\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/misc/TestLengthNormModifier#testGoodCases().mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/misc/TestLengthNormModifier#testGoodCases().mjava","sourceNew":"    public void testGoodCases() throws Exception {\n\t\n\tIndexSearcher searcher;\n\tfinal float[] scores = new float[NUM_DOCS];\n\tfloat lastScore = 0.0f;\n\t\n\t// default similarity should put docs with shorter length first\n  searcher = new IndexSearcher(store, false);\n  searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n    private int docBase = 0;\n    private Scorer scorer;\n    public final void collect(int doc) throws IOException {\n      scores[doc + docBase] = scorer.score();\n    }\n    public void setNextReader(IndexReader reader, int docBase) {\n      this.docBase = docBase;\n    }\n    public void setScorer(Scorer scorer) throws IOException {\n      this.scorer = scorer;\n    }\n    public boolean acceptsDocsOutOfOrder() {\n      return true;\n    }\n  });\n  searcher.close();\n\t\n\tlastScore = Float.MAX_VALUE;\n\tfor (int i = 0; i < NUM_DOCS; i++) {\n\t    String msg = \"i=\" + i + \", \"+scores[i]+\" <= \"+lastScore;\n\t    assertTrue(msg, scores[i] <= lastScore);\n\t    //System.out.println(msg);\n\t    lastScore = scores[i];\n\t}\n\n\t// override the norms to be inverted\n\tSimilarity s = new DefaultSimilarity() {\n\t\tpublic float lengthNorm(String fieldName, int numTokens) {\n\t\t    return numTokens;\n\t\t}\n\t    };\n\tFieldNormModifier fnm = new FieldNormModifier(store, s);\n\tfnm.reSetNorms(\"field\");\n\n\t// new norm (with default similarity) should put longer docs first\n\tsearcher = new IndexSearcher(store, false);\n\tsearcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n\t\n\tlastScore = 0.0f;\n\tfor (int i = 0; i < NUM_DOCS; i++) {\n\t    String msg = \"i=\" + i + \", \"+scores[i]+\" >= \"+lastScore;\n\t    assertTrue(msg, scores[i] >= lastScore);\n\t    //System.out.println(msg);\n\t    lastScore = scores[i];\n\t}\n\t\n    }\n\n","sourceOld":"    public void testGoodCases() throws Exception {\n\t\n\tIndexSearcher searcher;\n\tfinal float[] scores = new float[NUM_DOCS];\n\tfloat lastScore = 0.0f;\n\t\n\t// default similarity should put docs with shorter length first\n  searcher = new IndexSearcher(store);\n  searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n    private int docBase = 0;\n    private Scorer scorer;\n    public final void collect(int doc) throws IOException {\n      scores[doc + docBase] = scorer.score();\n    }\n    public void setNextReader(IndexReader reader, int docBase) {\n      this.docBase = docBase;\n    }\n    public void setScorer(Scorer scorer) throws IOException {\n      this.scorer = scorer;\n    }\n    public boolean acceptsDocsOutOfOrder() {\n      return true;\n    }\n  });\n  searcher.close();\n\t\n\tlastScore = Float.MAX_VALUE;\n\tfor (int i = 0; i < NUM_DOCS; i++) {\n\t    String msg = \"i=\" + i + \", \"+scores[i]+\" <= \"+lastScore;\n\t    assertTrue(msg, scores[i] <= lastScore);\n\t    //System.out.println(msg);\n\t    lastScore = scores[i];\n\t}\n\n\t// override the norms to be inverted\n\tSimilarity s = new DefaultSimilarity() {\n\t\tpublic float lengthNorm(String fieldName, int numTokens) {\n\t\t    return numTokens;\n\t\t}\n\t    };\n\tFieldNormModifier fnm = new FieldNormModifier(store, s);\n\tfnm.reSetNorms(\"field\");\n\n\t// new norm (with default similarity) should put longer docs first\n\tsearcher = new IndexSearcher(store);\n\tsearcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n\t\n\tlastScore = 0.0f;\n\tfor (int i = 0; i < NUM_DOCS; i++) {\n\t    String msg = \"i=\" + i + \", \"+scores[i]+\" >= \"+lastScore;\n\t    assertTrue(msg, scores[i] >= lastScore);\n\t    //System.out.println(msg);\n\t    lastScore = scores[i];\n\t}\n\t\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/misc/TestLengthNormModifier#testGoodCases().mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/misc/TestLengthNormModifier#testGoodCases().mjava","sourceNew":"    public void testGoodCases() throws Exception {\n\t\n\tIndexSearcher searcher;\n\tfinal float[] scores = new float[NUM_DOCS];\n\tfloat lastScore = 0.0f;\n\t\n\t// default similarity should put docs with shorter length first\n  searcher = new IndexSearcher(store, false);\n  searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n    private int docBase = 0;\n    private Scorer scorer;\n    @Override\n    public final void collect(int doc) throws IOException {\n      scores[doc + docBase] = scorer.score();\n    }\n    @Override\n    public void setNextReader(IndexReader reader, int docBase) {\n      this.docBase = docBase;\n    }\n    @Override\n    public void setScorer(Scorer scorer) throws IOException {\n      this.scorer = scorer;\n    }\n    @Override\n    public boolean acceptsDocsOutOfOrder() {\n      return true;\n    }\n  });\n  searcher.close();\n\t\n\tlastScore = Float.MAX_VALUE;\n\tfor (int i = 0; i < NUM_DOCS; i++) {\n\t    String msg = \"i=\" + i + \", \"+scores[i]+\" <= \"+lastScore;\n\t    assertTrue(msg, scores[i] <= lastScore);\n\t    //System.out.println(msg);\n\t    lastScore = scores[i];\n\t}\n\n\t// override the norms to be inverted\n\tSimilarity s = new DefaultSimilarity() {\n\t\t@Override\n\t\tpublic float lengthNorm(String fieldName, int numTokens) {\n\t\t    return numTokens;\n\t\t}\n\t    };\n\tFieldNormModifier fnm = new FieldNormModifier(store, s);\n\tfnm.reSetNorms(\"field\");\n\n\t// new norm (with default similarity) should put longer docs first\n\tsearcher = new IndexSearcher(store, false);\n\tsearcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n\t\n\tlastScore = 0.0f;\n\tfor (int i = 0; i < NUM_DOCS; i++) {\n\t    String msg = \"i=\" + i + \", \"+scores[i]+\" >= \"+lastScore;\n\t    assertTrue(msg, scores[i] >= lastScore);\n\t    //System.out.println(msg);\n\t    lastScore = scores[i];\n\t}\n\t\n    }\n\n","sourceOld":"    public void testGoodCases() throws Exception {\n\t\n\tIndexSearcher searcher;\n\tfinal float[] scores = new float[NUM_DOCS];\n\tfloat lastScore = 0.0f;\n\t\n\t// default similarity should put docs with shorter length first\n  searcher = new IndexSearcher(store, false);\n  searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n    private int docBase = 0;\n    private Scorer scorer;\n    public final void collect(int doc) throws IOException {\n      scores[doc + docBase] = scorer.score();\n    }\n    public void setNextReader(IndexReader reader, int docBase) {\n      this.docBase = docBase;\n    }\n    public void setScorer(Scorer scorer) throws IOException {\n      this.scorer = scorer;\n    }\n    public boolean acceptsDocsOutOfOrder() {\n      return true;\n    }\n  });\n  searcher.close();\n\t\n\tlastScore = Float.MAX_VALUE;\n\tfor (int i = 0; i < NUM_DOCS; i++) {\n\t    String msg = \"i=\" + i + \", \"+scores[i]+\" <= \"+lastScore;\n\t    assertTrue(msg, scores[i] <= lastScore);\n\t    //System.out.println(msg);\n\t    lastScore = scores[i];\n\t}\n\n\t// override the norms to be inverted\n\tSimilarity s = new DefaultSimilarity() {\n\t\tpublic float lengthNorm(String fieldName, int numTokens) {\n\t\t    return numTokens;\n\t\t}\n\t    };\n\tFieldNormModifier fnm = new FieldNormModifier(store, s);\n\tfnm.reSetNorms(\"field\");\n\n\t// new norm (with default similarity) should put longer docs first\n\tsearcher = new IndexSearcher(store, false);\n\tsearcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n\t\n\tlastScore = 0.0f;\n\tfor (int i = 0; i < NUM_DOCS; i++) {\n\t    String msg = \"i=\" + i + \", \"+scores[i]+\" >= \"+lastScore;\n\t    assertTrue(msg, scores[i] >= lastScore);\n\t    //System.out.println(msg);\n\t    lastScore = scores[i];\n\t}\n\t\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestLengthNormModifier#testGoodCases().mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/misc/TestLengthNormModifier#testGoodCases().mjava","sourceNew":"    public void testGoodCases() throws Exception {\n\t\n\tIndexSearcher searcher;\n\tfinal float[] scores = new float[NUM_DOCS];\n\tfloat lastScore = 0.0f;\n\t\n\t// default similarity should put docs with shorter length first\n  searcher = new IndexSearcher(store, false);\n  searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n    private int docBase = 0;\n    private Scorer scorer;\n    @Override\n    public final void collect(int doc) throws IOException {\n      scores[doc + docBase] = scorer.score();\n    }\n    @Override\n    public void setNextReader(IndexReader reader, int docBase) {\n      this.docBase = docBase;\n    }\n    @Override\n    public void setScorer(Scorer scorer) throws IOException {\n      this.scorer = scorer;\n    }\n    @Override\n    public boolean acceptsDocsOutOfOrder() {\n      return true;\n    }\n  });\n  searcher.close();\n\t\n\tlastScore = Float.MAX_VALUE;\n\tfor (int i = 0; i < NUM_DOCS; i++) {\n\t    String msg = \"i=\" + i + \", \"+scores[i]+\" <= \"+lastScore;\n\t    assertTrue(msg, scores[i] <= lastScore);\n\t    //System.out.println(msg);\n\t    lastScore = scores[i];\n\t}\n\n\t// override the norms to be inverted\n\tSimilarity s = new DefaultSimilarity() {\n\t\t@Override\n\t\tpublic float lengthNorm(String fieldName, int numTokens) {\n\t\t    return numTokens;\n\t\t}\n\t    };\n\tFieldNormModifier fnm = new FieldNormModifier(store, s);\n\tfnm.reSetNorms(\"field\");\n\n\t// new norm (with default similarity) should put longer docs first\n\tsearcher = new IndexSearcher(store, false);\n\tsearcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n\t\n\tlastScore = 0.0f;\n\tfor (int i = 0; i < NUM_DOCS; i++) {\n\t    String msg = \"i=\" + i + \", \"+scores[i]+\" >= \"+lastScore;\n\t    assertTrue(msg, scores[i] >= lastScore);\n\t    //System.out.println(msg);\n\t    lastScore = scores[i];\n\t}\n\t\n    }\n\n","sourceOld":"    public void testGoodCases() throws Exception {\n\t\n\tIndexSearcher searcher;\n\tfinal float[] scores = new float[NUM_DOCS];\n\tfloat lastScore = 0.0f;\n\t\n\t// default similarity should put docs with shorter length first\n  searcher = new IndexSearcher(store, false);\n  searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n    private int docBase = 0;\n    private Scorer scorer;\n    @Override\n    public final void collect(int doc) throws IOException {\n      scores[doc + docBase] = scorer.score();\n    }\n    @Override\n    public void setNextReader(IndexReader reader, int docBase) {\n      this.docBase = docBase;\n    }\n    @Override\n    public void setScorer(Scorer scorer) throws IOException {\n      this.scorer = scorer;\n    }\n    @Override\n    public boolean acceptsDocsOutOfOrder() {\n      return true;\n    }\n  });\n  searcher.close();\n\t\n\tlastScore = Float.MAX_VALUE;\n\tfor (int i = 0; i < NUM_DOCS; i++) {\n\t    String msg = \"i=\" + i + \", \"+scores[i]+\" <= \"+lastScore;\n\t    assertTrue(msg, scores[i] <= lastScore);\n\t    //System.out.println(msg);\n\t    lastScore = scores[i];\n\t}\n\n\t// override the norms to be inverted\n\tSimilarity s = new DefaultSimilarity() {\n\t\t@Override\n\t\tpublic float lengthNorm(String fieldName, int numTokens) {\n\t\t    return numTokens;\n\t\t}\n\t    };\n\tFieldNormModifier fnm = new FieldNormModifier(store, s);\n\tfnm.reSetNorms(\"field\");\n\n\t// new norm (with default similarity) should put longer docs first\n\tsearcher = new IndexSearcher(store, false);\n\tsearcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n\t\n\tlastScore = 0.0f;\n\tfor (int i = 0; i < NUM_DOCS; i++) {\n\t    String msg = \"i=\" + i + \", \"+scores[i]+\" >= \"+lastScore;\n\t    assertTrue(msg, scores[i] >= lastScore);\n\t    //System.out.println(msg);\n\t    lastScore = scores[i];\n\t}\n\t\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["4256bc1b3c94786287ccdfc751230374521843cf"],"4256bc1b3c94786287ccdfc751230374521843cf":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["4256bc1b3c94786287ccdfc751230374521843cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4256bc1b3c94786287ccdfc751230374521843cf":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}