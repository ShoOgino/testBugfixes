{"path":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","commits":[{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls \n   * whether current term is delta encoded according to latest term.\n   */\n  public abstract void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cff9c2f82cba41c789e4f62f8ca8c65585d48eb7","date":1378009921,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls \n   * whether current term is delta encoded according to latest term.\n   *\n   * NOTE: sometimes long[] might contain values that doesn't make sense,\n   * e.g. for Lucene41PostingsFormat, when singletonDocID != -1, docStartFP is not defined.\n   * Here postings side should always use the last docStartFP, to keep each element in \n   * metadata long[] monotonic.\n   */\n  public abstract void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","sourceOld":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls \n   * whether current term is delta encoded according to latest term.\n   */\n  public abstract void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75bb5d39efc3017188ad2881bd61b25153a8e3de","date":1378175814,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls whether \n   * current term is delta encoded according to latest term. \n   * Usually elements in {@code longs} are file pointers, so each one always \n   * increases when a new term is consumed. {@code out} is used to write generic\n   * bytes, which are not monotonical.\n   *\n   * NOTE: sometimes long[] might contain values that doesn't make sense, e.g. \n   * the pointer to postings list may not be defined, if it is designed to inline \n   * some postings data in term dictionary.  For this the postings side should \n   * always use the last file pointer, so that each element in metadata long[] is \n   * still monotonic.\n   */\n  public abstract void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","sourceOld":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls \n   * whether current term is delta encoded according to latest term.\n   *\n   * NOTE: sometimes long[] might contain values that doesn't make sense,\n   * e.g. for Lucene41PostingsFormat, when singletonDocID != -1, docStartFP is not defined.\n   * Here postings side should always use the last docStartFP, to keep each element in \n   * metadata long[] monotonic.\n   */\n  public abstract void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54f47976dd9b6972bf436e4ba5f6d584bdef17fd","date":1378414697,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls whether \n   * current term is delta encoded according to latest term. \n   * Usually elements in {@code longs} are file pointers, so each one always \n   * increases when a new term is consumed. {@code out} is used to write generic\n   * bytes, which are not monotonic.\n   *\n   * NOTE: sometimes long[] might contain \"don't care\" values that are unused, e.g. \n   * the pointer to postings list may not be defined for some terms but is defined\n   * for others, if it is designed to inline  some postings data in term dictionary.\n   * In this case, the postings writer should always use the last value, so that each\n   * element in metadata long[] remains monotonic.\n   */\n  public abstract void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","sourceOld":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls whether \n   * current term is delta encoded according to latest term. \n   * Usually elements in {@code longs} are file pointers, so each one always \n   * increases when a new term is consumed. {@code out} is used to write generic\n   * bytes, which are not monotonical.\n   *\n   * NOTE: sometimes long[] might contain values that doesn't make sense, e.g. \n   * the pointer to postings list may not be defined, if it is designed to inline \n   * some postings data in term dictionary.  For this the postings side should \n   * always use the last file pointer, so that each element in metadata long[] is \n   * still monotonic.\n   */\n  public abstract void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls whether \n   * current term is delta encoded according to latest term. \n   * Usually elements in {@code longs} are file pointers, so each one always \n   * increases when a new term is consumed. {@code out} is used to write generic\n   * bytes, which are not monotonic.\n   *\n   * NOTE: sometimes long[] might contain \"don't care\" values that are unused, e.g. \n   * the pointer to postings list may not be defined for some terms but is defined\n   * for others, if it is designed to inline  some postings data in term dictionary.\n   * In this case, the postings writer should always use the last value, so that each\n   * element in metadata long[] remains monotonic.\n   */\n  public abstract void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls whether \n   * current term is delta encoded according to latest term. \n   * Usually elements in {@code longs} are file pointers, so each one always \n   * increases when a new term is consumed. {@code out} is used to write generic\n   * bytes, which are not monotonic.\n   */\n  public abstract void encodeTerm(DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","sourceOld":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls whether \n   * current term is delta encoded according to latest term. \n   * Usually elements in {@code longs} are file pointers, so each one always \n   * increases when a new term is consumed. {@code out} is used to write generic\n   * bytes, which are not monotonic.\n   *\n   * NOTE: sometimes long[] might contain \"don't care\" values that are unused, e.g. \n   * the pointer to postings list may not be defined for some terms but is defined\n   * for others, if it is designed to inline  some postings data in term dictionary.\n   * In this case, the postings writer should always use the last value, so that each\n   * element in metadata long[] remains monotonic.\n   */\n  public abstract void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls whether \n   * current term is delta encoded according to latest term. \n   * Usually elements in {@code longs} are file pointers, so each one always \n   * increases when a new term is consumed. {@code out} is used to write generic\n   * bytes, which are not monotonic.\n   *\n   * NOTE: sometimes long[] might contain \"don't care\" values that are unused, e.g. \n   * the pointer to postings list may not be defined for some terms but is defined\n   * for others, if it is designed to inline  some postings data in term dictionary.\n   * In this case, the postings writer should always use the last value, so that each\n   * element in metadata long[] remains monotonic.\n   */\n  public abstract void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","sourceOld":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls whether \n   * current term is delta encoded according to latest term. \n   * Usually elements in {@code longs} are file pointers, so each one always \n   * increases when a new term is consumed. {@code out} is used to write generic\n   * bytes, which are not monotonic.\n   */\n  public abstract void encodeTerm(DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls whether \n   * current term is delta encoded according to latest term. \n   * Usually elements in {@code longs} are file pointers, so each one always \n   * increases when a new term is consumed. {@code out} is used to write generic\n   * bytes, which are not monotonic.\n   */\n  public abstract void encodeTerm(DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","sourceOld":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls whether \n   * current term is delta encoded according to latest term. \n   * Usually elements in {@code longs} are file pointers, so each one always \n   * increases when a new term is consumed. {@code out} is used to write generic\n   * bytes, which are not monotonic.\n   *\n   * NOTE: sometimes long[] might contain \"don't care\" values that are unused, e.g. \n   * the pointer to postings list may not be defined for some terms but is defined\n   * for others, if it is designed to inline  some postings data in term dictionary.\n   * In this case, the postings writer should always use the last value, so that each\n   * element in metadata long[] remains monotonic.\n   */\n  public abstract void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cff9c2f82cba41c789e4f62f8ca8c65585d48eb7":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"75bb5d39efc3017188ad2881bd61b25153a8e3de":["cff9c2f82cba41c789e4f62f8ca8c65585d48eb7"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","54f47976dd9b6972bf436e4ba5f6d584bdef17fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"54f47976dd9b6972bf436e4ba5f6d584bdef17fd":["75bb5d39efc3017188ad2881bd61b25153a8e3de"]},"commit2Childs":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["cff9c2f82cba41c789e4f62f8ca8c65585d48eb7"],"cff9c2f82cba41c789e4f62f8ca8c65585d48eb7":["75bb5d39efc3017188ad2881bd61b25153a8e3de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"75bb5d39efc3017188ad2881bd61b25153a8e3de":["54f47976dd9b6972bf436e4ba5f6d584bdef17fd"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"54f47976dd9b6972bf436e4ba5f6d584bdef17fd":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}