{"path":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","commits":[{"id":"7b2c4e17100e207bc842e56d016b9f91f411304e","date":1434336696,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","pathOld":"/dev/null","sourceNew":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"sql\", \"select year_i, sum(item_i) from mytable group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getDouble(\"sum(item_i)\") == 66);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"sql\", \"select year_i, month_i, sum(item_i) from mytable group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getDouble(\"sum(item_i)\") == 57);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"sum(item_i)\") == 9);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"sql\", \"select year_i, month_i, day_i, sum(item_i) from mytable group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"sum(item_i)\") == 42);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"sum(item_i)\") == 15);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"sum(item_i)\") == 5);\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"sum(item_i)\") == 4);\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 6);\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"sum(item_i)\") == 1);\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da9a71da64ce12a97dcfcdd912893aeb1fa2981","date":1437510515,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","sourceNew":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"sql\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getDouble(\"sum(item_i)\") == 66);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"sql\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getDouble(\"sum(item_i)\") == 57);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"sum(item_i)\") == 9);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"sql\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"sum(item_i)\") == 42);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"sum(item_i)\") == 15);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"sum(item_i)\") == 5);\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"sum(item_i)\") == 4);\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 6);\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"sum(item_i)\") == 1);\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"sql\", \"select year_i, sum(item_i) from mytable group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getDouble(\"sum(item_i)\") == 66);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"sql\", \"select year_i, month_i, sum(item_i) from mytable group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getDouble(\"sum(item_i)\") == 57);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"sum(item_i)\") == 9);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"sql\", \"select year_i, month_i, day_i, sum(item_i) from mytable group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"sum(item_i)\") == 42);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"sum(item_i)\") == 15);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"sum(item_i)\") == 5);\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"sum(item_i)\") == 4);\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 6);\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"sum(item_i)\") == 1);\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ec71d4701edbd96cfea97384101d13611393552","date":1444686705,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","sourceNew":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getDouble(\"sum(item_i)\") == 66);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getDouble(\"sum(item_i)\") == 57);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"sum(item_i)\") == 9);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"sum(item_i)\") == 42);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"sum(item_i)\") == 15);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"sum(item_i)\") == 5);\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"sum(item_i)\") == 4);\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 6);\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"sum(item_i)\") == 1);\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"sql\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getDouble(\"sum(item_i)\") == 66);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"sql\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getDouble(\"sum(item_i)\") == 57);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"sum(item_i)\") == 9);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"sql\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"sum(item_i)\") == 42);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"sum(item_i)\") == 15);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"sum(item_i)\") == 5);\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"sum(item_i)\") == 4);\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 6);\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"sum(item_i)\") == 1);\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ced76ea488919a7dca53e413e903839996d0f3c","date":1453928984,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","sourceNew":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"sum(item_i)\") == 66);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"sum(item_i)\") == 57);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"sum(item_i)\") == 9);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"sum(item_i)\") == 42);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"sum(item_i)\") == 15);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"sum(item_i)\") == 5);\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"sum(item_i)\") == 4);\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 6);\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"sum(item_i)\") == 1);\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getDouble(\"sum(item_i)\") == 66);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getDouble(\"sum(item_i)\") == 57);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"sum(item_i)\") == 9);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"sum(item_i)\") == 42);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"sum(item_i)\") == 15);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"sum(item_i)\") == 5);\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"sum(item_i)\") == 4);\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 6);\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"sum(item_i)\") == 1);\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","sourceNew":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"sum(item_i)\") == 66);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"sum(item_i)\") == 57);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"sum(item_i)\") == 9);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"sum(item_i)\") == 42);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"sum(item_i)\") == 15);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"sum(item_i)\") == 5);\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"sum(item_i)\") == 4);\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 6);\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"sum(item_i)\") == 1);\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getDouble(\"sum(item_i)\") == 66);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getDouble(\"sum(item_i)\") == 57);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"sum(item_i)\") == 9);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"sum(item_i)\") == 42);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"sum(item_i)\") == 15);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"sum(item_i)\") == 5);\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"sum(item_i)\") == 4);\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 6);\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"sum(item_i)\") == 1);\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ea75dee47a56cd5d6997df5198d96cdba08574","date":1461870891,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","sourceNew":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"EXPR$1\") == 66); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"EXPR$1\") == 7); //sum(item_i)\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"EXPR$2\") == 57); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"EXPR$2\") == 9); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$2\") == 7); //sum(item_i)\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"EXPR$3\") == 42); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"EXPR$3\") == 15); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"EXPR$3\") == 5); //sum(item_i)\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"EXPR$3\") == 4); //sum(item_i)\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$3\") == 6); //sum(item_i)\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"EXPR$3\") == 1); //sum(item_i)\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"sum(item_i)\") == 66);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"sum(item_i)\") == 57);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"sum(item_i)\") == 9);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"sum(item_i)\") == 42);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"sum(item_i)\") == 15);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"sum(item_i)\") == 5);\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"sum(item_i)\") == 4);\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 6);\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"sum(item_i)\") == 1);\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99c8e9b44b0cdc8162d6e058914bac3148e80da9","date":1461873164,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","sourceNew":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"EXPR$1\") == 66); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"EXPR$1\") == 7); //sum(item_i)\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"EXPR$2\") == 57); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"EXPR$2\") == 9); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$2\") == 7); //sum(item_i)\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"EXPR$3\") == 42); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"EXPR$3\") == 15); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"EXPR$3\") == 5); //sum(item_i)\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"EXPR$3\") == 4); //sum(item_i)\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$3\") == 6); //sum(item_i)\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"EXPR$3\") == 1); //sum(item_i)\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"EXPR$1\") == 66); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"EXPR$1\") == 7); //sum(item_i)\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"EXPR$2\") == 57); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"EXPR$2\") == 9); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$2\") == 7); //sum(item_i)\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"EXPR$3\") == 42); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"EXPR$3\") == 15); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"EXPR$3\") == 5); //sum(item_i)\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"EXPR$3\") == 4); //sum(item_i)\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$3\") == 6); //sum(item_i)\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"EXPR$3\") == 1); //sum(item_i)\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4","date":1461940050,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","sourceNew":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"EXPR$1\") == 66); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"EXPR$1\") == 7); //sum(item_i)\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i \" +\n          \"order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"EXPR$2\") == 57); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"EXPR$2\") == 9); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$2\") == 7); //sum(item_i)\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i \" +\n          \"order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"EXPR$3\") == 42); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"EXPR$3\") == 15); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"EXPR$3\") == 5); //sum(item_i)\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"EXPR$3\") == 4); //sum(item_i)\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$3\") == 6); //sum(item_i)\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"EXPR$3\") == 1); //sum(item_i)\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"EXPR$1\") == 66); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"EXPR$1\") == 7); //sum(item_i)\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"EXPR$2\") == 57); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"EXPR$2\") == 9); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$2\") == 7); //sum(item_i)\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"EXPR$3\") == 42); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"EXPR$3\") == 15); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"EXPR$3\") == 5); //sum(item_i)\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"EXPR$3\") == 4); //sum(item_i)\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$3\") == 6); //sum(item_i)\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"EXPR$3\") == 1); //sum(item_i)\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","sourceNew":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \n          \"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"sum(item_i)\") == 66);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\",\n        \"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"sum(item_i)\") == 57);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"sum(item_i)\") == 9);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\",\n        \"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"sum(item_i)\") == 42);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"sum(item_i)\") == 15);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"sum(item_i)\") == 5);\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"sum(item_i)\") == 4);\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 6);\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"sum(item_i)\") == 1);\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"sum(item_i)\") == 66);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"sum(item_i)\") == 57);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"sum(item_i)\") == 9);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"sum(item_i)\") == 42);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"sum(item_i)\") == 15);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"sum(item_i)\") == 5);\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"sum(item_i)\") == 4);\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 6);\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"sum(item_i)\") == 1);\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","sourceNew":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \n          \"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"sum(item_i)\") == 66);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\",\n        \"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"sum(item_i)\") == 57);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"sum(item_i)\") == 9);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\",\n        \"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"sum(item_i)\") == 42);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"sum(item_i)\") == 15);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"sum(item_i)\") == 5);\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"sum(item_i)\") == 4);\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 6);\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"sum(item_i)\") == 1);\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"sum(item_i)\") == 66);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"sum(item_i)\") == 57);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"sum(item_i)\") == 9);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"sum(item_i)\") == 42);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"sum(item_i)\") == 15);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"sum(item_i)\") == 5);\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"sum(item_i)\") == 4);\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 6);\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"sum(item_i)\") == 1);\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","sourceNew":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \n          \"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"sum(item_i)\") == 66);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\",\n        \"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"sum(item_i)\") == 57);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"sum(item_i)\") == 9);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\",\n        \"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"sum(item_i)\") == 42);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"sum(item_i)\") == 15);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"sum(item_i)\") == 5);\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"sum(item_i)\") == 4);\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 6);\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"sum(item_i)\") == 1);\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"sum(item_i)\") == 66);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"sum(item_i)\") == 57);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"sum(item_i)\") == 9);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"sum(item_i)\") == 42);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"sum(item_i)\") == 15);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"sum(item_i)\") == 5);\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"sum(item_i)\") == 4);\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 6);\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"sum(item_i)\") == 1);\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","sourceNew":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \n          \"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"EXPR$1\") == 66); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"EXPR$1\") == 7); //sum(item_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\",\n          \"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i \" +\n          \"order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"EXPR$2\") == 57); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"EXPR$2\") == 9); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$2\") == 7); //sum(item_i)\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\",\n          \"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i \" +\n          \"order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"EXPR$3\") == 42); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"EXPR$3\") == 15); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"EXPR$3\") == 5); //sum(item_i)\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"EXPR$3\") == 4); //sum(item_i)\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$3\") == 6); //sum(item_i)\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"EXPR$3\") == 1); //sum(item_i)\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"EXPR$1\") == 66); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"EXPR$1\") == 7); //sum(item_i)\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i \" +\n          \"order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"EXPR$2\") == 57); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"EXPR$2\") == 9); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$2\") == 7); //sum(item_i)\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", 2);\n      params.put(\"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i \" +\n          \"order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"EXPR$3\") == 42); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"EXPR$3\") == 15); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"EXPR$3\") == 5); //sum(item_i)\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"EXPR$3\") == 4); //sum(item_i)\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$3\") == 6); //sum(item_i)\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"EXPR$3\") == 1); //sum(item_i)\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"612da0a0a2d5f4409da55729b9833e799f905ac5","date":1479142562,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","sourceNew":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \n          \"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"EXPR$1\") == 66); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"EXPR$1\") == 7); //sum(item_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\",\n          \"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i \" +\n          \"order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"EXPR$2\") == 57); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"EXPR$2\") == 9); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$2\") == 7); //sum(item_i)\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\",\n          \"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i \" +\n          \"order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"EXPR$3\") == 42); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"EXPR$3\") == 15); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"EXPR$3\") == 5); //sum(item_i)\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"EXPR$3\") == 4); //sum(item_i)\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$3\") == 6); //sum(item_i)\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"EXPR$3\") == 1); //sum(item_i)\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \n          \"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"EXPR$1\") == 66); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"EXPR$1\") == 7); //sum(item_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\",\n          \"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i \" +\n          \"order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"EXPR$2\") == 57); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"EXPR$2\") == 9); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$2\") == 7); //sum(item_i)\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\",\n          \"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i \" +\n          \"order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"EXPR$3\") == 42); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"EXPR$3\") == 15); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"EXPR$3\") == 5); //sum(item_i)\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"EXPR$3\") == 4); //sum(item_i)\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$3\") == 6); //sum(item_i)\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"EXPR$3\") == 1); //sum(item_i)\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f20deebda1cf327549c84cb60464135abd31c71","date":1487004368,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","sourceNew":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"EXPR$1\") == 66); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"EXPR$1\") == 7); //sum(item_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i \" +\n          \"order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"EXPR$2\") == 57); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"EXPR$2\") == 9); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$2\") == 7); //sum(item_i)\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i \" +\n          \"order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"EXPR$3\") == 42); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"EXPR$3\") == 15); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"EXPR$3\") == 5); //sum(item_i)\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"EXPR$3\") == 4); //sum(item_i)\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$3\") == 6); //sum(item_i)\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"EXPR$3\") == 1); //sum(item_i)\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \n          \"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"EXPR$1\") == 66); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"EXPR$1\") == 7); //sum(item_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\",\n          \"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i \" +\n          \"order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"EXPR$2\") == 57); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"EXPR$2\") == 9); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$2\") == 7); //sum(item_i)\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\",\n          \"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i \" +\n          \"order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"EXPR$3\") == 42); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"EXPR$3\") == 15); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"EXPR$3\") == 5); //sum(item_i)\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"EXPR$3\") == 4); //sum(item_i)\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$3\") == 6); //sum(item_i)\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"EXPR$3\") == 1); //sum(item_i)\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":3,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","sourceNew":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"EXPR$1\") == 66); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"EXPR$1\") == 7); //sum(item_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i \" +\n          \"order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"EXPR$2\") == 57); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"EXPR$2\") == 9); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$2\") == 7); //sum(item_i)\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i \" +\n          \"order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"EXPR$3\") == 42); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"EXPR$3\") == 15); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"EXPR$3\") == 5); //sum(item_i)\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"EXPR$3\") == 4); //sum(item_i)\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$3\") == 6); //sum(item_i)\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"EXPR$3\") == 1); //sum(item_i)\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \n          \"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"sum(item_i)\") == 66);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\",\n        \"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 3);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"sum(item_i)\") == 57);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"sum(item_i)\") == 9);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 7);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\",\n        \"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 6);\n\n      tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"sum(item_i)\") == 42);\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"sum(item_i)\") == 15);\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"sum(item_i)\") == 5);\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"sum(item_i)\") == 4);\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"sum(item_i)\") == 6);\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"sum(item_i)\") == 1);\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c58a62203315881cce5089ef67ffee6b8a988a75","date":1544601986,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","sourceNew":"  private void testParallelTimeSeriesGrouping() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n    indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n    indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n    indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n    indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n    indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n    indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"4\", \"item_i\", \"6\");\n    indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n    commit();\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 2);\n\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.get(\"year_i\") instanceof Long); // SOLR-8601, This tests that the bucket is actually a Long and not\n                                                  // parsed from a String.\n    assert (tuple.getDouble(\"EXPR$1\") == 66); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getDouble(\"EXPR$1\") == 7); // sum(item_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i \" +\n            \"order by year_i desc, month_i desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.get(\"year_i\") instanceof Long);\n    assert (tuple.get(\"month_i\") instanceof Long);\n    assert (tuple.getDouble(\"EXPR$2\") == 57); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getDouble(\"EXPR$2\") == 9); // sum(item_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getDouble(\"EXPR$2\") == 7); // sum(item_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i \" +\n            \"order by year_i desc, month_i desc, day_i desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.getLong(\"day_i\") == 8);\n    assert (tuple.getDouble(\"EXPR$3\") == 42); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.getLong(\"day_i\") == 7);\n    assert (tuple.getDouble(\"EXPR$3\") == 15); // sum(item_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getLong(\"day_i\") == 3);\n    assert (tuple.getDouble(\"EXPR$3\") == 5); // sum(item_i)\n\n    tuple = tuples.get(3);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getLong(\"day_i\") == 1);\n    assert (tuple.getDouble(\"EXPR$3\") == 4); // sum(item_i)\n\n    tuple = tuples.get(4);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getLong(\"day_i\") == 4);\n    assert (tuple.getDouble(\"EXPR$3\") == 6); // sum(item_i)\n\n    tuple = tuples.get(5);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getLong(\"day_i\") == 2);\n    assert (tuple.getDouble(\"EXPR$3\") == 1); // sum(item_i)\n\n  }\n\n","sourceOld":"  private void testParallelTimeSeriesGrouping() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n      indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n      indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n      indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n      indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n      indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n      indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\",  \"day_i\", \"4\", \"item_i\", \"6\");\n      indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n      commit();\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.get(\"year_i\") instanceof Long);  // SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.\n      assert(tuple.getDouble(\"EXPR$1\") == 66); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getDouble(\"EXPR$1\") == 7); //sum(item_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i \" +\n          \"order by year_i desc, month_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.get(\"year_i\") instanceof Long);\n      assert(tuple.get(\"month_i\") instanceof Long);\n      assert(tuple.getDouble(\"EXPR$2\") == 57); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getDouble(\"EXPR$2\") == 9); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$2\") == 7); //sum(item_i)\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i \" +\n          \"order by year_i desc, month_i desc, day_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 8);\n      assert(tuple.getDouble(\"EXPR$3\") == 42); //sum(item_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 11);\n      assert(tuple.getLong(\"day_i\") == 7);\n      assert(tuple.getDouble(\"EXPR$3\") == 15); //sum(item_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 3);\n      assert(tuple.getDouble(\"EXPR$3\") == 5); //sum(item_i)\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"year_i\") == 2015);\n      assert(tuple.getLong(\"month_i\") == 10);\n      assert(tuple.getLong(\"day_i\") == 1);\n      assert(tuple.getDouble(\"EXPR$3\") == 4); //sum(item_i)\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 4);\n      assert(tuple.getDouble(\"EXPR$3\") == 6); //sum(item_i)\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"year_i\") == 2014);\n      assert(tuple.getLong(\"month_i\") == 4);\n      assert(tuple.getLong(\"day_i\") == 2);\n      assert(tuple.getDouble(\"EXPR$3\") == 1); //sum(item_i)\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"600937be95b5a041815220371fa7882e73031d56","date":1551734162,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","sourceNew":"  private void testParallelTimeSeriesGrouping() throws Exception {\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n    indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n    indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n    indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n    indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n    indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n    indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"4\", \"item_i\", \"6\");\n    indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n    commit();\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n    List<Tuple> tuples = getTuples(sParams);\n\n    assert (tuples.size() == 2);\n\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.get(\"year_i\") instanceof Long); // SOLR-8601, This tests that the bucket is actually a Long and not\n                                                  // parsed from a String.\n    assert (tuple.getDouble(\"EXPR$1\") == 66); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getDouble(\"EXPR$1\") == 7); // sum(item_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i \" +\n            \"order by year_i desc, month_i desc\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.get(\"year_i\") instanceof Long);\n    assert (tuple.get(\"month_i\") instanceof Long);\n    assert (tuple.getDouble(\"EXPR$2\") == 57); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getDouble(\"EXPR$2\") == 9); // sum(item_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getDouble(\"EXPR$2\") == 7); // sum(item_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i \" +\n            \"order by year_i desc, month_i desc, day_i desc\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.getLong(\"day_i\") == 8);\n    assert (tuple.getDouble(\"EXPR$3\") == 42); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.getLong(\"day_i\") == 7);\n    assert (tuple.getDouble(\"EXPR$3\") == 15); // sum(item_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getLong(\"day_i\") == 3);\n    assert (tuple.getDouble(\"EXPR$3\") == 5); // sum(item_i)\n\n    tuple = tuples.get(3);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getLong(\"day_i\") == 1);\n    assert (tuple.getDouble(\"EXPR$3\") == 4); // sum(item_i)\n\n    tuple = tuples.get(4);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getLong(\"day_i\") == 4);\n    assert (tuple.getDouble(\"EXPR$3\") == 6); // sum(item_i)\n\n    tuple = tuples.get(5);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getLong(\"day_i\") == 2);\n    assert (tuple.getDouble(\"EXPR$3\") == 1); // sum(item_i)\n\n  }\n\n","sourceOld":"  private void testParallelTimeSeriesGrouping() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n    indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n    indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n    indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n    indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n    indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n    indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"4\", \"item_i\", \"6\");\n    indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n    commit();\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 2);\n\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.get(\"year_i\") instanceof Long); // SOLR-8601, This tests that the bucket is actually a Long and not\n                                                  // parsed from a String.\n    assert (tuple.getDouble(\"EXPR$1\") == 66); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getDouble(\"EXPR$1\") == 7); // sum(item_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i \" +\n            \"order by year_i desc, month_i desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.get(\"year_i\") instanceof Long);\n    assert (tuple.get(\"month_i\") instanceof Long);\n    assert (tuple.getDouble(\"EXPR$2\") == 57); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getDouble(\"EXPR$2\") == 9); // sum(item_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getDouble(\"EXPR$2\") == 7); // sum(item_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i \" +\n            \"order by year_i desc, month_i desc, day_i desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.getLong(\"day_i\") == 8);\n    assert (tuple.getDouble(\"EXPR$3\") == 42); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.getLong(\"day_i\") == 7);\n    assert (tuple.getDouble(\"EXPR$3\") == 15); // sum(item_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getLong(\"day_i\") == 3);\n    assert (tuple.getDouble(\"EXPR$3\") == 5); // sum(item_i)\n\n    tuple = tuples.get(3);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getLong(\"day_i\") == 1);\n    assert (tuple.getDouble(\"EXPR$3\") == 4); // sum(item_i)\n\n    tuple = tuples.get(4);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getLong(\"day_i\") == 4);\n    assert (tuple.getDouble(\"EXPR$3\") == 6); // sum(item_i)\n\n    tuple = tuples.get(5);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getLong(\"day_i\") == 2);\n    assert (tuple.getDouble(\"EXPR$3\") == 1); // sum(item_i)\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22191e72f6c40dec88c9b94f9bb55c7527772a47","date":1553715407,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testParallelTimeSeriesGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","sourceNew":"  @Test\n  public void testParallelTimeSeriesGrouping() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\")\n        .add(id, \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\")\n        .add(id, \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\")\n        .add(id, \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\")\n        .add(id, \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\")\n        .add(id, \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\")\n        .add(id, \"7\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"4\", \"item_i\", \"6\")\n        .add(id, \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\")\n\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 2);\n\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.get(\"year_i\") instanceof Long); // SOLR-8601, This tests that the bucket is actually a Long and not\n    // parsed from a String.\n    assert (tuple.getDouble(\"EXPR$1\") == 66); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getDouble(\"EXPR$1\") == 7); // sum(item_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i \" +\n            \"order by year_i desc, month_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.get(\"year_i\") instanceof Long);\n    assert (tuple.get(\"month_i\") instanceof Long);\n    assert (tuple.getDouble(\"EXPR$2\") == 57); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getDouble(\"EXPR$2\") == 9); // sum(item_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getDouble(\"EXPR$2\") == 7); // sum(item_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i \" +\n            \"order by year_i desc, month_i desc, day_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.getLong(\"day_i\") == 8);\n    assert (tuple.getDouble(\"EXPR$3\") == 42); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.getLong(\"day_i\") == 7);\n    assert (tuple.getDouble(\"EXPR$3\") == 15); // sum(item_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getLong(\"day_i\") == 3);\n    assert (tuple.getDouble(\"EXPR$3\") == 5); // sum(item_i)\n\n    tuple = tuples.get(3);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getLong(\"day_i\") == 1);\n    assert (tuple.getDouble(\"EXPR$3\") == 4); // sum(item_i)\n\n    tuple = tuples.get(4);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getLong(\"day_i\") == 4);\n    assert (tuple.getDouble(\"EXPR$3\") == 6); // sum(item_i)\n\n    tuple = tuples.get(5);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getLong(\"day_i\") == 2);\n    assert (tuple.getDouble(\"EXPR$3\") == 1); // sum(item_i)\n\n  }\n\n","sourceOld":"  private void testParallelTimeSeriesGrouping() throws Exception {\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\");\n    indexr(\"id\", \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\");\n    indexr(\"id\", \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\");\n    indexr(\"id\", \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\");\n    indexr(\"id\", \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\");\n    indexr(\"id\", \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\");\n    indexr(\"id\", \"7\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"4\", \"item_i\", \"6\");\n    indexr(\"id\", \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\");\n\n    commit();\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n    List<Tuple> tuples = getTuples(sParams);\n\n    assert (tuples.size() == 2);\n\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.get(\"year_i\") instanceof Long); // SOLR-8601, This tests that the bucket is actually a Long and not\n                                                  // parsed from a String.\n    assert (tuple.getDouble(\"EXPR$1\") == 66); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getDouble(\"EXPR$1\") == 7); // sum(item_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i \" +\n            \"order by year_i desc, month_i desc\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.get(\"year_i\") instanceof Long);\n    assert (tuple.get(\"month_i\") instanceof Long);\n    assert (tuple.getDouble(\"EXPR$2\") == 57); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getDouble(\"EXPR$2\") == 9); // sum(item_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getDouble(\"EXPR$2\") == 7); // sum(item_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i \" +\n            \"order by year_i desc, month_i desc, day_i desc\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.getLong(\"day_i\") == 8);\n    assert (tuple.getDouble(\"EXPR$3\") == 42); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.getLong(\"day_i\") == 7);\n    assert (tuple.getDouble(\"EXPR$3\") == 15); // sum(item_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getLong(\"day_i\") == 3);\n    assert (tuple.getDouble(\"EXPR$3\") == 5); // sum(item_i)\n\n    tuple = tuples.get(3);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getLong(\"day_i\") == 1);\n    assert (tuple.getDouble(\"EXPR$3\") == 4); // sum(item_i)\n\n    tuple = tuples.get(4);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getLong(\"day_i\") == 4);\n    assert (tuple.getDouble(\"EXPR$3\") == 6); // sum(item_i)\n\n    tuple = tuples.get(5);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getLong(\"day_i\") == 2);\n    assert (tuple.getDouble(\"EXPR$3\") == 1); // sum(item_i)\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94e31112925a65b1d36f9064772080e25b5ef373","date":1553715407,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testParallelTimeSeriesGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testParallelTimeSeriesGrouping().mjava","sourceNew":"  @Test\n  public void testParallelTimeSeriesGrouping() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\")\n        .add(id, \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\")\n        .add(id, \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\")\n        .add(id, \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\")\n        .add(id, \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\")\n        .add(id, \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\")\n        .add(id, \"7\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"4\", \"item_i\", \"6\")\n        .add(id, \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\")\n\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 2);\n\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.get(\"year_i\") instanceof Long); // SOLR-8601, This tests that the bucket is actually a Long and not\n    // parsed from a String.\n    assert (tuple.getDouble(\"EXPR$1\") == 66); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getDouble(\"EXPR$1\") == 7); // sum(item_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i \" +\n            \"order by year_i desc, month_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.get(\"year_i\") instanceof Long);\n    assert (tuple.get(\"month_i\") instanceof Long);\n    assert (tuple.getDouble(\"EXPR$2\") == 57); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getDouble(\"EXPR$2\") == 9); // sum(item_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getDouble(\"EXPR$2\") == 7); // sum(item_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i \" +\n            \"order by year_i desc, month_i desc, day_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.getLong(\"day_i\") == 8);\n    assert (tuple.getDouble(\"EXPR$3\") == 42); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.getLong(\"day_i\") == 7);\n    assert (tuple.getDouble(\"EXPR$3\") == 15); // sum(item_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getLong(\"day_i\") == 3);\n    assert (tuple.getDouble(\"EXPR$3\") == 5); // sum(item_i)\n\n    tuple = tuples.get(3);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getLong(\"day_i\") == 1);\n    assert (tuple.getDouble(\"EXPR$3\") == 4); // sum(item_i)\n\n    tuple = tuples.get(4);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getLong(\"day_i\") == 4);\n    assert (tuple.getDouble(\"EXPR$3\") == 6); // sum(item_i)\n\n    tuple = tuples.get(5);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getLong(\"day_i\") == 2);\n    assert (tuple.getDouble(\"EXPR$3\") == 1); // sum(item_i)\n\n  }\n\n","sourceOld":"  @Test\n  public void testParallelTimeSeriesGrouping() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"5\")\n        .add(id, \"2\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"7\", \"item_i\", \"10\")\n        .add(id, \"3\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"30\")\n        .add(id, \"4\", \"year_i\", \"2015\", \"month_i\", \"11\", \"day_i\", \"8\", \"item_i\", \"12\")\n        .add(id, \"5\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"1\", \"item_i\", \"4\")\n        .add(id, \"6\", \"year_i\", \"2015\", \"month_i\", \"10\", \"day_i\", \"3\", \"item_i\", \"5\")\n        .add(id, \"7\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"4\", \"item_i\", \"6\")\n        .add(id, \"8\", \"year_i\", \"2014\", \"month_i\", \"4\", \"day_i\", \"2\", \"item_i\", \"1\")\n\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc\");\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 2);\n\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.get(\"year_i\") instanceof Long); // SOLR-8601, This tests that the bucket is actually a Long and not\n    // parsed from a String.\n    assert (tuple.getDouble(\"EXPR$1\") == 66); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getDouble(\"EXPR$1\") == 7); // sum(item_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i \" +\n            \"order by year_i desc, month_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.get(\"year_i\") instanceof Long);\n    assert (tuple.get(\"month_i\") instanceof Long);\n    assert (tuple.getDouble(\"EXPR$2\") == 57); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getDouble(\"EXPR$2\") == 9); // sum(item_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getDouble(\"EXPR$2\") == 7); // sum(item_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i \" +\n            \"order by year_i desc, month_i desc, day_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.getLong(\"day_i\") == 8);\n    assert (tuple.getDouble(\"EXPR$3\") == 42); // sum(item_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 11);\n    assert (tuple.getLong(\"day_i\") == 7);\n    assert (tuple.getDouble(\"EXPR$3\") == 15); // sum(item_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getLong(\"day_i\") == 3);\n    assert (tuple.getDouble(\"EXPR$3\") == 5); // sum(item_i)\n\n    tuple = tuples.get(3);\n    assert (tuple.getLong(\"year_i\") == 2015);\n    assert (tuple.getLong(\"month_i\") == 10);\n    assert (tuple.getLong(\"day_i\") == 1);\n    assert (tuple.getDouble(\"EXPR$3\") == 4); // sum(item_i)\n\n    tuple = tuples.get(4);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getLong(\"day_i\") == 4);\n    assert (tuple.getDouble(\"EXPR$3\") == 6); // sum(item_i)\n\n    tuple = tuples.get(5);\n    assert (tuple.getLong(\"year_i\") == 2014);\n    assert (tuple.getLong(\"month_i\") == 4);\n    assert (tuple.getLong(\"day_i\") == 2);\n    assert (tuple.getDouble(\"EXPR$3\") == 1); // sum(item_i)\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["600937be95b5a041815220371fa7882e73031d56"],"612da0a0a2d5f4409da55729b9833e799f905ac5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"29ea75dee47a56cd5d6997df5198d96cdba08574":["2ced76ea488919a7dca53e413e903839996d0f3c"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["3ec71d4701edbd96cfea97384101d13611393552","2ced76ea488919a7dca53e413e903839996d0f3c"],"7b2c4e17100e207bc842e56d016b9f91f411304e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["2ced76ea488919a7dca53e413e903839996d0f3c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["2ced76ea488919a7dca53e413e903839996d0f3c","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"99c8e9b44b0cdc8162d6e058914bac3148e80da9":["29ea75dee47a56cd5d6997df5198d96cdba08574"],"3ec71d4701edbd96cfea97384101d13611393552":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4":["99c8e9b44b0cdc8162d6e058914bac3148e80da9"],"600937be95b5a041815220371fa7882e73031d56":["c58a62203315881cce5089ef67ffee6b8a988a75"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["d470c8182e92b264680e34081b75e70a9f2b3c89","3f20deebda1cf327549c84cb60464135abd31c71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ced76ea488919a7dca53e413e903839996d0f3c":["3ec71d4701edbd96cfea97384101d13611393552"],"c58a62203315881cce5089ef67ffee6b8a988a75":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"3f20deebda1cf327549c84cb60464135abd31c71":["612da0a0a2d5f4409da55729b9833e799f905ac5"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["2ced76ea488919a7dca53e413e903839996d0f3c","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["94e31112925a65b1d36f9064772080e25b5ef373"],"94e31112925a65b1d36f9064772080e25b5ef373":["22191e72f6c40dec88c9b94f9bb55c7527772a47"]},"commit2Childs":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["94e31112925a65b1d36f9064772080e25b5ef373"],"612da0a0a2d5f4409da55729b9833e799f905ac5":["3f20deebda1cf327549c84cb60464135abd31c71"],"29ea75dee47a56cd5d6997df5198d96cdba08574":["99c8e9b44b0cdc8162d6e058914bac3148e80da9"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"7b2c4e17100e207bc842e56d016b9f91f411304e":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["612da0a0a2d5f4409da55729b9833e799f905ac5"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"99c8e9b44b0cdc8162d6e058914bac3148e80da9":["7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4"],"3ec71d4701edbd96cfea97384101d13611393552":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","2ced76ea488919a7dca53e413e903839996d0f3c"],"7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"600937be95b5a041815220371fa7882e73031d56":["22191e72f6c40dec88c9b94f9bb55c7527772a47"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["c58a62203315881cce5089ef67ffee6b8a988a75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"2ced76ea488919a7dca53e413e903839996d0f3c":["29ea75dee47a56cd5d6997df5198d96cdba08574","1e6acbaae7af722f17204ceccf0f7db5753eccf3","826d15444ddf61716dc768c229cd54b2c2ccce1c","d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"c58a62203315881cce5089ef67ffee6b8a988a75":["600937be95b5a041815220371fa7882e73031d56"],"3f20deebda1cf327549c84cb60464135abd31c71":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["3ec71d4701edbd96cfea97384101d13611393552"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"94e31112925a65b1d36f9064772080e25b5ef373":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}