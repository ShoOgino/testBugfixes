{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","commits":[{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNumericRangeQuery().mjava","sourceNew":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = DimensionalRangeQuery.new1DIntRange(NUMERIC_FIELD_NAME, 2, true, 6, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":"  public void testNumericRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = NumericRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, 6, true, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","sourceNew":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = PointRangeQuery.new1DIntRange(NUMERIC_FIELD_NAME, 2, true, 6, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = DimensionalRangeQuery.new1DIntRange(NUMERIC_FIELD_NAME, 2, true, 6, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86cab68ee900a31d093b114182b488ea8e85c59d","date":1456171815,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","sourceNew":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = PointRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, true, 6, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = PointRangeQuery.new1DIntRange(NUMERIC_FIELD_NAME, 2, true, 6, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","sourceNew":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = PointRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, true, 6, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = PointRangeQuery.new1DIntRange(NUMERIC_FIELD_NAME, 2, true, 6, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3104a6ba367dfb690806b227c5ef17c42c6107b","date":1456265035,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","sourceNew":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = IntPoint.newRangeQuery(NUMERIC_FIELD_NAME, 2, true, 6, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = PointRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, true, 6, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","date":1456265720,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","sourceNew":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = IntPoint.newRangeQuery(NUMERIC_FIELD_NAME, 2, true, 6, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = PointRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, true, 6, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","sourceNew":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = IntPoint.newRangeQuery(NUMERIC_FIELD_NAME, 2, true, 6, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = PointRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, true, 6, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","sourceNew":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = IntPoint.newRangeQuery(NUMERIC_FIELD_NAME, 2, true, 6, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = PointRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, true, 6, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","sourceNew":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = IntPoint.newRangeQuery(NUMERIC_FIELD_NAME, 2, 6);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = IntPoint.newRangeQuery(NUMERIC_FIELD_NAME, 2, true, 6, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","bugFix":["d3104a6ba367dfb690806b227c5ef17c42c6107b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","sourceNew":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = IntPoint.newRangeQuery(NUMERIC_FIELD_NAME, 2, 6);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = IntPoint.newRangeQuery(NUMERIC_FIELD_NAME, 2, true, 6, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","sourceNew":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = IntPoint.newRangeQuery(NUMERIC_FIELD_NAME, 2, 6);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = IntPoint.newRangeQuery(NUMERIC_FIELD_NAME, 2, true, 6, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","sourceNew":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = IntPoint.newRangeQuery(NUMERIC_FIELD_NAME, 2, 6);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits.value; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = IntPoint.newRangeQuery(NUMERIC_FIELD_NAME, 2, 6);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["770342641f7b505eaa8dccdc666158bff2419109"],"419a8f52c6635419beb951255cacbbb281044c57":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","86cab68ee900a31d093b114182b488ea8e85c59d"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["419a8f52c6635419beb951255cacbbb281044c57","a5296efc4b319f5647b606629c093a94b23692c6"],"770342641f7b505eaa8dccdc666158bff2419109":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c422e924212367b334b4938f1fd3e44438e88c40":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["419a8f52c6635419beb951255cacbbb281044c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a5296efc4b319f5647b606629c093a94b23692c6":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","c422e924212367b334b4938f1fd3e44438e88c40"],"86cab68ee900a31d093b114182b488ea8e85c59d":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["419a8f52c6635419beb951255cacbbb281044c57","86cab68ee900a31d093b114182b488ea8e85c59d"],"419a8f52c6635419beb951255cacbbb281044c57":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","d3104a6ba367dfb690806b227c5ef17c42c6107b","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"770342641f7b505eaa8dccdc666158bff2419109":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770342641f7b505eaa8dccdc666158bff2419109"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":[],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"86cab68ee900a31d093b114182b488ea8e85c59d":["419a8f52c6635419beb951255cacbbb281044c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}