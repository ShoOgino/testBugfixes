{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int).mjava","commits":[{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","sourceNew":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent + 1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    // added a category document, mark that ReaderManager is not up-to-date\n    shouldRefreshReaderManager = true;\n    \n    // also add to the parent array\n    taxoArrays = getTaxoArrays().add(id, parent);\n\n    // NOTE: this line must be executed last, or else the cache gets updated\n    // before the parents array (LUCENE-4596)\n    addToCache(categoryPath, id);\n\n    return id;\n  }\n\n","sourceOld":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int length,\n      int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent+1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    // added a category document, mark that ReaderManager is not up-to-date\n    shouldRefreshReaderManager = true;\n    \n    // also add to the parent array\n    taxoArrays = getTaxoArrays().add(id, parent);\n\n    // NOTE: this line must be executed last, or else the cache gets updated\n    // before the parents array (LUCENE-4596)\n    addToCache(categoryPath, length, id);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent + 1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    // added a category document, mark that ReaderManager is not up-to-date\n    shouldRefreshReaderManager = true;\n    \n    // also add to the parent array\n    taxoArrays = getTaxoArrays().add(id, parent);\n\n    // NOTE: this line must be executed last, or else the cache gets updated\n    // before the parents array (LUCENE-4596)\n    addToCache(categoryPath, id);\n\n    return id;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(FacetLabel,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int).mjava","sourceNew":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(FacetLabel categoryPath, int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent + 1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    // added a category document, mark that ReaderManager is not up-to-date\n    shouldRefreshReaderManager = true;\n    \n    // also add to the parent array\n    taxoArrays = getTaxoArrays().add(id, parent);\n\n    // NOTE: this line must be executed last, or else the cache gets updated\n    // before the parents array (LUCENE-4596)\n    addToCache(categoryPath, id);\n\n    return id;\n  }\n\n","sourceOld":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent + 1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    // added a category document, mark that ReaderManager is not up-to-date\n    shouldRefreshReaderManager = true;\n    \n    // also add to the parent array\n    taxoArrays = getTaxoArrays().add(id, parent);\n\n    // NOTE: this line must be executed last, or else the cache gets updated\n    // before the parents array (LUCENE-4596)\n    addToCache(categoryPath, id);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent + 1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    // added a category document, mark that ReaderManager is not up-to-date\n    shouldRefreshReaderManager = true;\n    \n    // also add to the parent array\n    taxoArrays = getTaxoArrays().add(id, parent);\n\n    // NOTE: this line must be executed last, or else the cache gets updated\n    // before the parents array (LUCENE-4596)\n    addToCache(categoryPath, id);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}