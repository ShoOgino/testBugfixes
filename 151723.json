{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/PlaneTest#testIdenticalPlanes().mjava","commits":[{"id":"4762743d2f10f32ae47dc222ef92e0807ffe2ab8","date":1429841956,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/PlaneTest#testIdenticalPlanes().mjava","pathOld":"/dev/null","sourceNew":"    @Test\n    public void testIdenticalPlanes() {\n        final GeoPoint p = new GeoPoint(0.123,-0.456);\n        final Plane plane1 = new Plane(p,0.0);\n        final Plane plane2 = new Plane(p,0.0);\n        assertTrue(plane1.isNumericallyIdentical(plane2));\n        final Plane plane3 = new Plane(p,0.1);\n        assertFalse(plane1.isNumericallyIdentical(plane3));\n        final Vector v1 = new Vector(0.1,-0.732,0.9);\n        final double constant = 0.432;\n        final Vector v2 = new Vector(v1.x*constant,v1.y*constant,v1.z*constant);\n        final Plane p1 = new Plane(v1,0.2);\n        final Plane p2 = new Plane(v2,0.2*constant);\n        assertTrue(p1.isNumericallyIdentical(p2));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/PlaneTest#testIdenticalPlanes().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/PlaneTest#testIdenticalPlanes().mjava","sourceNew":"  @Test\n  public void testIdenticalPlanes() {\n    final GeoPoint p = new GeoPoint(0.123, -0.456);\n    final Plane plane1 = new Plane(p, 0.0);\n    final Plane plane2 = new Plane(p, 0.0);\n    assertTrue(plane1.isNumericallyIdentical(plane2));\n    final Plane plane3 = new Plane(p, 0.1);\n    assertFalse(plane1.isNumericallyIdentical(plane3));\n    final Vector v1 = new Vector(0.1, -0.732, 0.9);\n    final double constant = 0.432;\n    final Vector v2 = new Vector(v1.x * constant, v1.y * constant, v1.z * constant);\n    final Plane p1 = new Plane(v1, 0.2);\n    final Plane p2 = new Plane(v2, 0.2 * constant);\n    assertTrue(p1.isNumericallyIdentical(p2));\n  }\n\n","sourceOld":"    @Test\n    public void testIdenticalPlanes() {\n        final GeoPoint p = new GeoPoint(0.123,-0.456);\n        final Plane plane1 = new Plane(p,0.0);\n        final Plane plane2 = new Plane(p,0.0);\n        assertTrue(plane1.isNumericallyIdentical(plane2));\n        final Plane plane3 = new Plane(p,0.1);\n        assertFalse(plane1.isNumericallyIdentical(plane3));\n        final Vector v1 = new Vector(0.1,-0.732,0.9);\n        final double constant = 0.432;\n        final Vector v2 = new Vector(v1.x*constant,v1.y*constant,v1.z*constant);\n        final Plane p1 = new Plane(v1,0.2);\n        final Plane p2 = new Plane(v2,0.2*constant);\n        assertTrue(p1.isNumericallyIdentical(p2));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/PlaneTest#testIdenticalPlanes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testIdenticalPlanes() {\n    final GeoPoint p = new GeoPoint(0.123, -0.456);\n    final Plane plane1 = new Plane(p, 0.0);\n    final Plane plane2 = new Plane(p, 0.0);\n    assertTrue(plane1.isNumericallyIdentical(plane2));\n    final Plane plane3 = new Plane(p, 0.1);\n    assertFalse(plane1.isNumericallyIdentical(plane3));\n    final Vector v1 = new Vector(0.1, -0.732, 0.9);\n    final double constant = 0.432;\n    final Vector v2 = new Vector(v1.x * constant, v1.y * constant, v1.z * constant);\n    final Plane p1 = new Plane(v1, 0.2);\n    final Plane p2 = new Plane(v2, 0.2 * constant);\n    assertTrue(p1.isNumericallyIdentical(p2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/PlaneTest#testIdenticalPlanes().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/PlaneTest#testIdenticalPlanes().mjava","sourceNew":"  @Test\n  public void testIdenticalPlanes() {\n    final GeoPoint p = new GeoPoint(PlanetModel.SPHERE, 0.123, -0.456);\n    final Plane plane1 = new Plane(p, 0.0);\n    final Plane plane2 = new Plane(p, 0.0);\n    assertTrue(plane1.isNumericallyIdentical(plane2));\n    final Plane plane3 = new Plane(p, 0.1);\n    assertFalse(plane1.isNumericallyIdentical(plane3));\n    final Vector v1 = new Vector(0.1, -0.732, 0.9);\n    final double constant = 0.432;\n    final Vector v2 = new Vector(v1.x * constant, v1.y * constant, v1.z * constant);\n    final Plane p1 = new Plane(v1, 0.2);\n    final Plane p2 = new Plane(v2, 0.2 * constant);\n    assertTrue(p1.isNumericallyIdentical(p2));\n  }\n\n","sourceOld":"  @Test\n  public void testIdenticalPlanes() {\n    final GeoPoint p = new GeoPoint(0.123, -0.456);\n    final Plane plane1 = new Plane(p, 0.0);\n    final Plane plane2 = new Plane(p, 0.0);\n    assertTrue(plane1.isNumericallyIdentical(plane2));\n    final Plane plane3 = new Plane(p, 0.1);\n    assertFalse(plane1.isNumericallyIdentical(plane3));\n    final Vector v1 = new Vector(0.1, -0.732, 0.9);\n    final double constant = 0.432;\n    final Vector v2 = new Vector(v1.x * constant, v1.y * constant, v1.z * constant);\n    final Plane p1 = new Plane(v1, 0.2);\n    final Plane p2 = new Plane(v2, 0.2 * constant);\n    assertTrue(p1.isNumericallyIdentical(p2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":3,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/PlaneTest#testIdenticalPlanes().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/PlaneTest#testIdenticalPlanes().mjava","sourceNew":"  @Test\n  public void testIdenticalPlanes() {\n    final GeoPoint p = new GeoPoint(PlanetModel.SPHERE, 0.123, -0.456);\n    final Plane plane1 = new Plane(p, 0.0);\n    final Plane plane2 = new Plane(p, 0.0);\n    assertTrue(plane1.isNumericallyIdentical(plane2));\n    final Plane plane3 = new Plane(p, 0.1);\n    assertFalse(plane1.isNumericallyIdentical(plane3));\n    final Vector v1 = new Vector(0.1, -0.732, 0.9);\n    final double constant = 0.432;\n    final Vector v2 = new Vector(v1.x * constant, v1.y * constant, v1.z * constant);\n    final Plane p1 = new Plane(v1, 0.2);\n    final Plane p2 = new Plane(v2, 0.2 * constant);\n    assertTrue(p1.isNumericallyIdentical(p2));\n  }\n\n","sourceOld":"  @Test\n  public void testIdenticalPlanes() {\n    final GeoPoint p = new GeoPoint(0.123, -0.456);\n    final Plane plane1 = new Plane(p, 0.0);\n    final Plane plane2 = new Plane(p, 0.0);\n    assertTrue(plane1.isNumericallyIdentical(plane2));\n    final Plane plane3 = new Plane(p, 0.1);\n    assertFalse(plane1.isNumericallyIdentical(plane3));\n    final Vector v1 = new Vector(0.1, -0.732, 0.9);\n    final double constant = 0.432;\n    final Vector v2 = new Vector(v1.x * constant, v1.y * constant, v1.z * constant);\n    final Plane p1 = new Plane(v1, 0.2);\n    final Plane p2 = new Plane(v2, 0.2 * constant);\n    assertTrue(p1.isNumericallyIdentical(p2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/PlaneTest#testIdenticalPlanes().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/PlaneTest#testIdenticalPlanes().mjava","sourceNew":"  @Test\n  public void testIdenticalPlanes() {\n    final GeoPoint p = new GeoPoint(PlanetModel.SPHERE, 0.123, -0.456);\n    final Plane plane1 = new Plane(p, 0.0);\n    final Plane plane2 = new Plane(p, 0.0);\n    assertTrue(plane1.isNumericallyIdentical(plane2));\n    final Plane plane3 = new Plane(p, 0.1);\n    assertFalse(plane1.isNumericallyIdentical(plane3));\n    final Vector v1 = new Vector(0.1, -0.732, 0.9);\n    final double constant = 0.432;\n    final Vector v2 = new Vector(v1.x * constant, v1.y * constant, v1.z * constant);\n    final Plane p1 = new Plane(v1, 0.2);\n    final Plane p2 = new Plane(v2, 0.2 * constant);\n    assertTrue(p1.isNumericallyIdentical(p2));\n  }\n\n","sourceOld":"  @Test\n  public void testIdenticalPlanes() {\n    final GeoPoint p = new GeoPoint(PlanetModel.SPHERE, 0.123, -0.456);\n    final Plane plane1 = new Plane(p, 0.0);\n    final Plane plane2 = new Plane(p, 0.0);\n    assertTrue(plane1.isNumericallyIdentical(plane2));\n    final Plane plane3 = new Plane(p, 0.1);\n    assertFalse(plane1.isNumericallyIdentical(plane3));\n    final Vector v1 = new Vector(0.1, -0.732, 0.9);\n    final double constant = 0.432;\n    final Vector v2 = new Vector(v1.x * constant, v1.y * constant, v1.z * constant);\n    final Plane p1 = new Plane(v1, 0.2);\n    final Plane p2 = new Plane(v2, 0.2 * constant);\n    assertTrue(p1.isNumericallyIdentical(p2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["fec06d6753751ae302c7d35866763e6cb414112d"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["4762743d2f10f32ae47dc222ef92e0807ffe2ab8"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2997acf74723385bd84aff1ea0b12af4aefde77"],"4762743d2f10f32ae47dc222ef92e0807ffe2ab8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","4762743d2f10f32ae47dc222ef92e0807ffe2ab8"],"fec06d6753751ae302c7d35866763e6cb414112d":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"4762743d2f10f32ae47dc222ef92e0807ffe2ab8":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}