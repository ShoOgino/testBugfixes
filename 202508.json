{"path":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","sourceNew":"  /* create the value to inject in the runtime parameter depending on its declared type */\n  private Object getRuntimeValue(AnalysisEngineDescription desc, String attributeName)\n          throws ClassNotFoundException {\n    String type = desc.getAnalysisEngineMetaData().getConfigurationParameterDeclarations().\n                    getConfigurationParameter(null, attributeName).getType();\n    // TODO : do it via reflection ? i.e. Class paramType = Class.forName(type)...\n    Object val = null;\n    Object runtimeValue = runtimeParameters.get(attributeName);\n    if (runtimeValue!=null) {\n      if (\"String\".equals(type)) {\n        val = String.valueOf(runtimeValue);\n      }\n      else if (\"Integer\".equals(type)) {\n        val = Integer.valueOf(runtimeValue.toString());\n      }\n      else if (\"Boolean\".equals(type)) {\n        val = Boolean.valueOf(runtimeValue.toString());\n      }\n      else if (\"Float\".equals(type)) {\n        val = Float.valueOf(runtimeValue.toString());\n      }\n    }\n\n    return val;\n  }\n\n","sourceOld":"  /* create the value to inject in the runtime parameter depending on its declared type */\n  private Object getRuntimeValue(AnalysisEngineDescription desc, String attributeName)\n          throws ClassNotFoundException {\n    String type = desc.getAnalysisEngineMetaData().getConfigurationParameterDeclarations().\n                    getConfigurationParameter(null, attributeName).getType();\n    // TODO : do it via reflection ? i.e. Class paramType = Class.forName(type)...\n    Object val = null;\n    Object runtimeValue = runtimeParameters.get(attributeName);\n    if (runtimeValue!=null) {\n      if (\"String\".equals(type)) {\n        val = String.valueOf(runtimeValue);\n      }\n      else if (\"Integer\".equals(type)) {\n        val = Integer.valueOf(runtimeValue.toString());\n      }\n      else if (\"Boolean\".equals(type)) {\n        val = Boolean.valueOf(runtimeValue.toString());\n      }\n      else if (\"Float\".equals(type)) {\n        val = Float.valueOf(runtimeValue.toString());\n      }\n    }\n\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","sourceNew":"  /* create the value to inject in the runtime parameter depending on its declared type */\n  private Object getRuntimeValue(AnalysisEngineDescription desc, String attributeName)\n          throws ClassNotFoundException {\n    String type = desc.getAnalysisEngineMetaData().getConfigurationParameterDeclarations().\n                    getConfigurationParameter(null, attributeName).getType();\n    // TODO : do it via reflection ? i.e. Class paramType = Class.forName(type)...\n    Object val = null;\n    Object runtimeValue = runtimeParameters.get(attributeName);\n    if (runtimeValue!=null) {\n      if (\"String\".equals(type)) {\n        val = String.valueOf(runtimeValue);\n      }\n      else if (\"Integer\".equals(type)) {\n        val = Integer.valueOf(runtimeValue.toString());\n      }\n      else if (\"Boolean\".equals(type)) {\n        val = Boolean.valueOf(runtimeValue.toString());\n      }\n      else if (\"Float\".equals(type)) {\n        val = Float.valueOf(runtimeValue.toString());\n      }\n    }\n\n    return val;\n  }\n\n","sourceOld":"  /* create the value to inject in the runtime parameter depending on its declared type */\n  private Object getRuntimeValue(AnalysisEngineDescription desc, String attributeName)\n          throws ClassNotFoundException {\n    String type = desc.getAnalysisEngineMetaData().getConfigurationParameterDeclarations().\n                    getConfigurationParameter(null, attributeName).getType();\n    // TODO : do it via reflection ? i.e. Class paramType = Class.forName(type)...\n    Object val = null;\n    Object runtimeValue = runtimeParameters.get(attributeName);\n    if (runtimeValue!=null) {\n      if (\"String\".equals(type)) {\n        val = String.valueOf(runtimeValue);\n      }\n      else if (\"Integer\".equals(type)) {\n        val = Integer.valueOf(runtimeValue.toString());\n      }\n      else if (\"Boolean\".equals(type)) {\n        val = Boolean.valueOf(runtimeValue.toString());\n      }\n      else if (\"Float\".equals(type)) {\n        val = Float.valueOf(runtimeValue.toString());\n      }\n    }\n\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3655f54faddf6be170f81f2105afebac0bc3afb","date":1330555392,"type":4,"author":"Tommaso Teofili","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","sourceNew":null,"sourceOld":"  /* create the value to inject in the runtime parameter depending on its declared type */\n  private Object getRuntimeValue(AnalysisEngineDescription desc, String attributeName)\n          throws ClassNotFoundException {\n    String type = desc.getAnalysisEngineMetaData().getConfigurationParameterDeclarations().\n                    getConfigurationParameter(null, attributeName).getType();\n    // TODO : do it via reflection ? i.e. Class paramType = Class.forName(type)...\n    Object val = null;\n    Object runtimeValue = runtimeParameters.get(attributeName);\n    if (runtimeValue!=null) {\n      if (\"String\".equals(type)) {\n        val = String.valueOf(runtimeValue);\n      }\n      else if (\"Integer\".equals(type)) {\n        val = Integer.valueOf(runtimeValue.toString());\n      }\n      else if (\"Boolean\".equals(type)) {\n        val = Boolean.valueOf(runtimeValue.toString());\n      }\n      else if (\"Float\".equals(type)) {\n        val = Float.valueOf(runtimeValue.toString());\n      }\n    }\n\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","sourceNew":null,"sourceOld":"  /* create the value to inject in the runtime parameter depending on its declared type */\n  private Object getRuntimeValue(AnalysisEngineDescription desc, String attributeName)\n          throws ClassNotFoundException {\n    String type = desc.getAnalysisEngineMetaData().getConfigurationParameterDeclarations().\n                    getConfigurationParameter(null, attributeName).getType();\n    // TODO : do it via reflection ? i.e. Class paramType = Class.forName(type)...\n    Object val = null;\n    Object runtimeValue = runtimeParameters.get(attributeName);\n    if (runtimeValue!=null) {\n      if (\"String\".equals(type)) {\n        val = String.valueOf(runtimeValue);\n      }\n      else if (\"Integer\".equals(type)) {\n        val = Integer.valueOf(runtimeValue.toString());\n      }\n      else if (\"Boolean\".equals(type)) {\n        val = Boolean.valueOf(runtimeValue.toString());\n      }\n      else if (\"Float\".equals(type)) {\n        val = Float.valueOf(runtimeValue.toString());\n      }\n    }\n\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["c26f00b574427b55127e869b935845554afde1fa","c3655f54faddf6be170f81f2105afebac0bc3afb"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c3655f54faddf6be170f81f2105afebac0bc3afb"],"c3655f54faddf6be170f81f2105afebac0bc3afb":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c3655f54faddf6be170f81f2105afebac0bc3afb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"c3655f54faddf6be170f81f2105afebac0bc3afb":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}