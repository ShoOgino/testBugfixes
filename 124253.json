{"path":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","commits":[{"id":"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf","date":1440482195,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean).mjava","sourceNew":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.addCollectionWatch(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.updateClusterState();\n        } else {\n          for (int i = 0; i < 100; ++i) {\n            if (reader.getClusterState().hasCollection(\"c1\")) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.updateClusterState();\n        } else {\n          for (int i = 0; i < 100; ++i) {\n            if (reader.getClusterState().getCollection(\"c1\").getStateFormat() == 2) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testStateFormatUpdate(boolean explicitRefresh) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      int trackedStateVersion = reader.getClusterState().getZkClusterStateVersion();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        trackedStateVersion = refresh(reader, trackedStateVersion, explicitRefresh);\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        trackedStateVersion = refresh(reader, trackedStateVersion, explicitRefresh);\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","sourceNew":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.addCollectionWatch(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 100; ++i) {\n            if (reader.getClusterState().hasCollection(\"c1\")) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 100; ++i) {\n            if (reader.getClusterState().getCollection(\"c1\").getStateFormat() == 2) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.addCollectionWatch(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.updateClusterState();\n        } else {\n          for (int i = 0; i < 100; ++i) {\n            if (reader.getClusterState().hasCollection(\"c1\")) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.updateClusterState();\n        } else {\n          for (int i = 0; i < 100; ++i) {\n            if (reader.getClusterState().getCollection(\"c1\").getStateFormat() == 2) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","sourceNew":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.addCollectionWatch(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 500; ++i) {\n            if (reader.getClusterState().hasCollection(\"c1\")) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 500; ++i) {\n            if (reader.getClusterState().getCollection(\"c1\").getStateFormat() == 2) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.addCollectionWatch(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 100; ++i) {\n            if (reader.getClusterState().hasCollection(\"c1\")) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 100; ++i) {\n            if (reader.getClusterState().getCollection(\"c1\").getStateFormat() == 2) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09f52be048fc990c62f9e62b446a2e605839434d","date":1460555656,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","sourceNew":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.addCollectionWatch(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().hasCollection(\"c1\")) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().getCollection(\"c1\").getStateFormat() == 2) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.addCollectionWatch(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 500; ++i) {\n            if (reader.getClusterState().hasCollection(\"c1\")) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 500; ++i) {\n            if (reader.getClusterState().getCollection(\"c1\").getStateFormat() == 2) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ea9249ab9a9f76eb4132ceb4631d15315721f6a","date":1460578553,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","sourceNew":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.addCollectionWatch(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().hasCollection(\"c1\")) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().getCollection(\"c1\").getStateFormat() == 2) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.addCollectionWatch(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 500; ++i) {\n            if (reader.getClusterState().hasCollection(\"c1\")) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 500; ++i) {\n            if (reader.getClusterState().getCollection(\"c1\").getStateFormat() == 2) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","sourceNew":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.registerCore(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().hasCollection(\"c1\")) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().getCollection(\"c1\").getStateFormat() == 2) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.addCollectionWatch(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().hasCollection(\"c1\")) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().getCollection(\"c1\").getStateFormat() == 2) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","sourceNew":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.registerCore(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().hasCollection(\"c1\")) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().getCollection(\"c1\").getStateFormat() == 2) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.addCollectionWatch(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().hasCollection(\"c1\")) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().getCollection(\"c1\").getStateFormat() == 2) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","sourceNew":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.registerCore(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().hasCollection(\"c1\")) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().getCollection(\"c1\").getStateFormat() == 2) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.addCollectionWatch(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().hasCollection(\"c1\")) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().getCollection(\"c1\").getStateFormat() == 2) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14ebce138cd0e2e76c0ab6e22f4e612ace9da0dc","date":1464963170,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","sourceNew":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.registerCore(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS, (n, c) -> c != null);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS, (n, c) -> c != null && c.getStateFormat() == 2);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.registerCore(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().hasCollection(\"c1\")) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().getCollection(\"c1\").getStateFormat() == 2) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14ed55f2bfbc6da6c47312889f4946f1ace920e7","date":1465034744,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","sourceNew":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.registerCore(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().hasCollection(\"c1\")) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().getCollection(\"c1\").getStateFormat() == 2) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.registerCore(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS, (n, c) -> c != null);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS, (n, c) -> c != null && c.getStateFormat() == 2);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","date":1467384467,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","sourceNew":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.registerCore(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS, (n, c) -> c != null);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.registerCore(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().hasCollection(\"c1\")) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().getCollection(\"c1\").getStateFormat() == 2) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","sourceNew":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.registerCore(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS, (n, c) -> c != null);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.addCollectionWatch(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().hasCollection(\"c1\")) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          for (int i = 0; i < 1000; ++i) {\n            if (reader.getClusterState().getCollection(\"c1\").getStateFormat() == 2) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e42079c4c34cc1868518eff79f79ebaeb6d1965","date":1507883024,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","sourceNew":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.registerCore(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS, (n, c) -> c != null);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c2), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.registerCore(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS, (n, c) -> c != null);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","sourceNew":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.registerCore(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS, (n, c) -> c != null);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c2), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.registerCore(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS, (n, c) -> c != null);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c2), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","sourceNew":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.registerCore(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS, (n, c) -> c != null);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c2), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.registerCore(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS, (n, c) -> c != null);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c2), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","sourceNew":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    Path zkDir = createTempDir(\"testStateFormatUpdate\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.registerCore(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS, (n, c) -> c != null);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c2), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.registerCore(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS, (n, c) -> c != null);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c2), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":4,"author":"murblanc","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","sourceNew":null,"sourceOld":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    Path zkDir = createTempDir(\"testStateFormatUpdate\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.registerCore(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS, (n, c) -> c != null);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c2), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.forceUpdateCollection(\"c1\");\n        } else {\n          reader.waitForState(\"c1\", TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"4e42079c4c34cc1868518eff79f79ebaeb6d1965":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"14ed55f2bfbc6da6c47312889f4946f1ace920e7":["14ebce138cd0e2e76c0ab6e22f4e612ace9da0dc"],"09f52be048fc990c62f9e62b446a2e605839434d":["859081acf00749f5dd462772c571d611d4a4d2db"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["4e42079c4c34cc1868518eff79f79ebaeb6d1965"],"14ebce138cd0e2e76c0ab6e22f4e612ace9da0dc":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["14ed55f2bfbc6da6c47312889f4946f1ace920e7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a","b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a","0ad30c6a479e764150a3316e57263319775f1df2"],"859081acf00749f5dd462772c571d611d4a4d2db":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["859081acf00749f5dd462772c571d611d4a4d2db","09f52be048fc990c62f9e62b446a2e605839434d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e42079c4c34cc1868518eff79f79ebaeb6d1965":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"14ed55f2bfbc6da6c47312889f4946f1ace920e7":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"09f52be048fc990c62f9e62b446a2e605839434d":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"14ebce138cd0e2e76c0ab6e22f4e612ace9da0dc":["14ed55f2bfbc6da6c47312889f4946f1ace920e7"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["859081acf00749f5dd462772c571d611d4a4d2db"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["4e42079c4c34cc1868518eff79f79ebaeb6d1965","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["14ebce138cd0e2e76c0ab6e22f4e612ace9da0dc"],"859081acf00749f5dd462772c571d611d4a4d2db":["09f52be048fc990c62f9e62b446a2e605839434d","9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}