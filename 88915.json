{"path":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsReader#FieldsReader(SegmentReadState).mjava","commits":[{"id":"addc47115aa3376d79985cd4abc9f8c6e212a032","date":1354202882,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsReader#FieldsReader(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"    public FieldsReader(final SegmentReadState readState) throws IOException {\n\n      // Read _X.per and init each format:\n      boolean success = false;\n      try {\n        // Read field name -> format name\n        for (FieldInfo fi : readState.fieldInfos) {\n          if (fi.hasDocValues()) {\n            final String fieldName = fi.name;\n            final String formatName = fi.getAttribute(PER_FIELD_FORMAT_KEY);\n            if (formatName != null) {\n              // null formatName means the field is in fieldInfos, but has no docvalues!\n              final String suffix = fi.getAttribute(PER_FIELD_SUFFIX_KEY);\n              assert suffix != null;\n              SimpleDocValuesFormat format = SimpleDocValuesFormat.forName(formatName);\n              String segmentSuffix = getSuffix(formatName, suffix);\n              if (!formats.containsKey(segmentSuffix)) {\n                formats.put(segmentSuffix, format.fieldsProducer(new SegmentReadState(readState, segmentSuffix)));\n              }\n              fields.put(fieldName, formats.get(segmentSuffix));\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(formats.values());\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsReader#FieldsReader(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsReader#FieldsReader(SegmentReadState).mjava","sourceNew":"    public FieldsReader(final SegmentReadState readState) throws IOException {\n\n      // Read _X.per and init each format:\n      boolean success = false;\n      try {\n        // Read field name -> format name\n        for (FieldInfo fi : readState.fieldInfos) {\n          if (fi.hasDocValues()) {\n            final String fieldName = fi.name;\n            final String formatName = fi.getAttribute(PER_FIELD_FORMAT_KEY);\n            if (formatName != null) {\n              // null formatName means the field is in fieldInfos, but has no docvalues!\n              final String suffix = fi.getAttribute(PER_FIELD_SUFFIX_KEY);\n              assert suffix != null;\n              DocValuesFormat format = DocValuesFormat.forName(formatName);\n              String segmentSuffix = getSuffix(formatName, suffix);\n              if (!formats.containsKey(segmentSuffix)) {\n                formats.put(segmentSuffix, format.fieldsProducer(new SegmentReadState(readState, segmentSuffix)));\n              }\n              fields.put(fieldName, formats.get(segmentSuffix));\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(formats.values());\n        }\n      }\n    }\n\n","sourceOld":"    public FieldsReader(final SegmentReadState readState) throws IOException {\n\n      // Read _X.per and init each format:\n      boolean success = false;\n      try {\n        // Read field name -> format name\n        for (FieldInfo fi : readState.fieldInfos) {\n          if (fi.hasDocValues()) {\n            final String fieldName = fi.name;\n            final String formatName = fi.getAttribute(PER_FIELD_FORMAT_KEY);\n            if (formatName != null) {\n              // null formatName means the field is in fieldInfos, but has no docvalues!\n              final String suffix = fi.getAttribute(PER_FIELD_SUFFIX_KEY);\n              assert suffix != null;\n              SimpleDocValuesFormat format = SimpleDocValuesFormat.forName(formatName);\n              String segmentSuffix = getSuffix(formatName, suffix);\n              if (!formats.containsKey(segmentSuffix)) {\n                formats.put(segmentSuffix, format.fieldsProducer(new SegmentReadState(readState, segmentSuffix)));\n              }\n              fields.put(fieldName, formats.get(segmentSuffix));\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(formats.values());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsReader#FieldsReader(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"    public FieldsReader(final SegmentReadState readState) throws IOException {\n\n      // Read _X.per and init each format:\n      boolean success = false;\n      try {\n        // Read field name -> format name\n        for (FieldInfo fi : readState.fieldInfos) {\n          if (fi.hasDocValues()) {\n            final String fieldName = fi.name;\n            final String formatName = fi.getAttribute(PER_FIELD_FORMAT_KEY);\n            if (formatName != null) {\n              // null formatName means the field is in fieldInfos, but has no docvalues!\n              final String suffix = fi.getAttribute(PER_FIELD_SUFFIX_KEY);\n              assert suffix != null;\n              DocValuesFormat format = DocValuesFormat.forName(formatName);\n              String segmentSuffix = getSuffix(formatName, suffix);\n              if (!formats.containsKey(segmentSuffix)) {\n                formats.put(segmentSuffix, format.fieldsProducer(new SegmentReadState(readState, segmentSuffix)));\n              }\n              fields.put(fieldName, formats.get(segmentSuffix));\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(formats.values());\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsReader#FieldsReader(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsReader#FieldsReader(SegmentReadState).mjava","sourceNew":"    public FieldsReader(final SegmentReadState readState) throws IOException {\n\n      // Read _X.per and init each format:\n      boolean success = false;\n      try {\n        // Read field name -> format name\n        for (FieldInfo fi : readState.fieldInfos) {\n          if (fi.hasDocValues()) {\n            final String fieldName = fi.name;\n            final String formatName = fi.getAttribute(PER_FIELD_FORMAT_KEY);\n            if (formatName != null) {\n              // null formatName means the field is in fieldInfos, but has no docvalues!\n              final String suffix = fi.getAttribute(PER_FIELD_SUFFIX_KEY);\n              assert suffix != null;\n              DocValuesFormat format = DocValuesFormat.forName(formatName);\n              String segmentSuffix = getFullSegmentSuffix(readState.segmentSuffix, getSuffix(formatName, suffix));\n              if (!formats.containsKey(segmentSuffix)) {\n                formats.put(segmentSuffix, format.fieldsProducer(new SegmentReadState(readState, segmentSuffix)));\n              }\n              fields.put(fieldName, formats.get(segmentSuffix));\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(formats.values());\n        }\n      }\n    }\n\n","sourceOld":"    public FieldsReader(final SegmentReadState readState) throws IOException {\n\n      // Read _X.per and init each format:\n      boolean success = false;\n      try {\n        // Read field name -> format name\n        for (FieldInfo fi : readState.fieldInfos) {\n          if (fi.hasDocValues()) {\n            final String fieldName = fi.name;\n            final String formatName = fi.getAttribute(PER_FIELD_FORMAT_KEY);\n            if (formatName != null) {\n              // null formatName means the field is in fieldInfos, but has no docvalues!\n              final String suffix = fi.getAttribute(PER_FIELD_SUFFIX_KEY);\n              assert suffix != null;\n              DocValuesFormat format = DocValuesFormat.forName(formatName);\n              String segmentSuffix = getSuffix(formatName, suffix);\n              if (!formats.containsKey(segmentSuffix)) {\n                formats.put(segmentSuffix, format.fieldsProducer(new SegmentReadState(readState, segmentSuffix)));\n              }\n              fields.put(fieldName, formats.get(segmentSuffix));\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(formats.values());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10a170b987d46ec48dd8d286ff1521fb39ab6c20","date":1397832923,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsReader#FieldsReader(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsReader#FieldsReader(SegmentReadState).mjava","sourceNew":"    public FieldsReader(final SegmentReadState readState) throws IOException {\n\n      // Init each unique format:\n      boolean success = false;\n      try {\n        // Read field name -> format name\n        for (FieldInfo fi : readState.fieldInfos) {\n          if (fi.hasDocValues()) {\n            final String fieldName = fi.name;\n            final String formatName = fi.getAttribute(PER_FIELD_FORMAT_KEY);\n            if (formatName != null) {\n              // null formatName means the field is in fieldInfos, but has no docvalues!\n              final String suffix = fi.getAttribute(PER_FIELD_SUFFIX_KEY);\n              assert suffix != null;\n              DocValuesFormat format = DocValuesFormat.forName(formatName);\n              String segmentSuffix = getFullSegmentSuffix(readState.segmentSuffix, getSuffix(formatName, suffix));\n              if (!formats.containsKey(segmentSuffix)) {\n                formats.put(segmentSuffix, format.fieldsProducer(new SegmentReadState(readState, segmentSuffix)));\n              }\n              fields.put(fieldName, formats.get(segmentSuffix));\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(formats.values());\n        }\n      }\n    }\n\n","sourceOld":"    public FieldsReader(final SegmentReadState readState) throws IOException {\n\n      // Read _X.per and init each format:\n      boolean success = false;\n      try {\n        // Read field name -> format name\n        for (FieldInfo fi : readState.fieldInfos) {\n          if (fi.hasDocValues()) {\n            final String fieldName = fi.name;\n            final String formatName = fi.getAttribute(PER_FIELD_FORMAT_KEY);\n            if (formatName != null) {\n              // null formatName means the field is in fieldInfos, but has no docvalues!\n              final String suffix = fi.getAttribute(PER_FIELD_SUFFIX_KEY);\n              assert suffix != null;\n              DocValuesFormat format = DocValuesFormat.forName(formatName);\n              String segmentSuffix = getFullSegmentSuffix(readState.segmentSuffix, getSuffix(formatName, suffix));\n              if (!formats.containsKey(segmentSuffix)) {\n                formats.put(segmentSuffix, format.fieldsProducer(new SegmentReadState(readState, segmentSuffix)));\n              }\n              fields.put(fieldName, formats.get(segmentSuffix));\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(formats.values());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"971c32cba25aa5578c4b2a22aca3a3a93e01c251","date":1411816524,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsReader#FieldsReader(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsReader#FieldsReader(SegmentReadState).mjava","sourceNew":"    public FieldsReader(final SegmentReadState readState) throws IOException {\n\n      // Init each unique format:\n      boolean success = false;\n      try {\n        // Read field name -> format name\n        for (FieldInfo fi : readState.fieldInfos) {\n          if (fi.hasDocValues()) {\n            final String fieldName = fi.name;\n            final String formatName = fi.getAttribute(PER_FIELD_FORMAT_KEY);\n            if (formatName != null) {\n              // null formatName means the field is in fieldInfos, but has no docvalues!\n              final String suffix = fi.getAttribute(PER_FIELD_SUFFIX_KEY);\n              if (suffix == null) {\n                throw new IllegalStateException(\"missing attribute: \" + PER_FIELD_SUFFIX_KEY + \" for field: \" + fieldName);\n              }\n              DocValuesFormat format = DocValuesFormat.forName(formatName);\n              String segmentSuffix = getFullSegmentSuffix(readState.segmentSuffix, getSuffix(formatName, suffix));\n              if (!formats.containsKey(segmentSuffix)) {\n                formats.put(segmentSuffix, format.fieldsProducer(new SegmentReadState(readState, segmentSuffix)));\n              }\n              fields.put(fieldName, formats.get(segmentSuffix));\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(formats.values());\n        }\n      }\n    }\n\n","sourceOld":"    public FieldsReader(final SegmentReadState readState) throws IOException {\n\n      // Init each unique format:\n      boolean success = false;\n      try {\n        // Read field name -> format name\n        for (FieldInfo fi : readState.fieldInfos) {\n          if (fi.hasDocValues()) {\n            final String fieldName = fi.name;\n            final String formatName = fi.getAttribute(PER_FIELD_FORMAT_KEY);\n            if (formatName != null) {\n              // null formatName means the field is in fieldInfos, but has no docvalues!\n              final String suffix = fi.getAttribute(PER_FIELD_SUFFIX_KEY);\n              assert suffix != null;\n              DocValuesFormat format = DocValuesFormat.forName(formatName);\n              String segmentSuffix = getFullSegmentSuffix(readState.segmentSuffix, getSuffix(formatName, suffix));\n              if (!formats.containsKey(segmentSuffix)) {\n                formats.put(segmentSuffix, format.fieldsProducer(new SegmentReadState(readState, segmentSuffix)));\n              }\n              fields.put(fieldName, formats.get(segmentSuffix));\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(formats.values());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsReader#FieldsReader(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsReader#FieldsReader(SegmentReadState).mjava","sourceNew":"    public FieldsReader(final SegmentReadState readState) throws IOException {\n\n      // Init each unique format:\n      boolean success = false;\n      try {\n        // Read field name -> format name\n        for (FieldInfo fi : readState.fieldInfos) {\n          if (fi.hasDocValues()) {\n            final String fieldName = fi.name;\n            final String formatName = fi.getAttribute(PER_FIELD_FORMAT_KEY);\n            if (formatName != null) {\n              // null formatName means the field is in fieldInfos, but has no docvalues!\n              final String suffix = fi.getAttribute(PER_FIELD_SUFFIX_KEY);\n              if (suffix == null) {\n                throw new IllegalStateException(\"missing attribute: \" + PER_FIELD_SUFFIX_KEY + \" for field: \" + fieldName);\n              }\n              DocValuesFormat format = DocValuesFormat.forName(formatName);\n              String segmentSuffix = getFullSegmentSuffix(readState.segmentSuffix, getSuffix(formatName, suffix));\n              if (!formats.containsKey(segmentSuffix)) {\n                formats.put(segmentSuffix, format.fieldsProducer(new SegmentReadState(readState, segmentSuffix)));\n              }\n              fields.put(fieldName, formats.get(segmentSuffix));\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(formats.values());\n        }\n      }\n    }\n\n","sourceOld":"    public FieldsReader(final SegmentReadState readState) throws IOException {\n\n      // Init each unique format:\n      boolean success = false;\n      try {\n        // Read field name -> format name\n        for (FieldInfo fi : readState.fieldInfos) {\n          if (fi.hasDocValues()) {\n            final String fieldName = fi.name;\n            final String formatName = fi.getAttribute(PER_FIELD_FORMAT_KEY);\n            if (formatName != null) {\n              // null formatName means the field is in fieldInfos, but has no docvalues!\n              final String suffix = fi.getAttribute(PER_FIELD_SUFFIX_KEY);\n              assert suffix != null;\n              DocValuesFormat format = DocValuesFormat.forName(formatName);\n              String segmentSuffix = getFullSegmentSuffix(readState.segmentSuffix, getSuffix(formatName, suffix));\n              if (!formats.containsKey(segmentSuffix)) {\n                formats.put(segmentSuffix, format.fieldsProducer(new SegmentReadState(readState, segmentSuffix)));\n              }\n              fields.put(fieldName, formats.get(segmentSuffix));\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(formats.values());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"556a4aab886d75371b2af129d87be3c2795cea76","date":1414954991,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsReader#FieldsReader(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.FieldsReader#FieldsReader(SegmentReadState).mjava","sourceNew":"    public FieldsReader(final SegmentReadState readState) throws IOException {\n\n      // Init each unique format:\n      boolean success = false;\n      try {\n        // Read field name -> format name\n        for (FieldInfo fi : readState.fieldInfos) {\n          if (fi.getDocValuesType() != DocValuesType.NONE) {\n            final String fieldName = fi.name;\n            final String formatName = fi.getAttribute(PER_FIELD_FORMAT_KEY);\n            if (formatName != null) {\n              // null formatName means the field is in fieldInfos, but has no docvalues!\n              final String suffix = fi.getAttribute(PER_FIELD_SUFFIX_KEY);\n              if (suffix == null) {\n                throw new IllegalStateException(\"missing attribute: \" + PER_FIELD_SUFFIX_KEY + \" for field: \" + fieldName);\n              }\n              DocValuesFormat format = DocValuesFormat.forName(formatName);\n              String segmentSuffix = getFullSegmentSuffix(readState.segmentSuffix, getSuffix(formatName, suffix));\n              if (!formats.containsKey(segmentSuffix)) {\n                formats.put(segmentSuffix, format.fieldsProducer(new SegmentReadState(readState, segmentSuffix)));\n              }\n              fields.put(fieldName, formats.get(segmentSuffix));\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(formats.values());\n        }\n      }\n    }\n\n","sourceOld":"    public FieldsReader(final SegmentReadState readState) throws IOException {\n\n      // Init each unique format:\n      boolean success = false;\n      try {\n        // Read field name -> format name\n        for (FieldInfo fi : readState.fieldInfos) {\n          if (fi.hasDocValues()) {\n            final String fieldName = fi.name;\n            final String formatName = fi.getAttribute(PER_FIELD_FORMAT_KEY);\n            if (formatName != null) {\n              // null formatName means the field is in fieldInfos, but has no docvalues!\n              final String suffix = fi.getAttribute(PER_FIELD_SUFFIX_KEY);\n              if (suffix == null) {\n                throw new IllegalStateException(\"missing attribute: \" + PER_FIELD_SUFFIX_KEY + \" for field: \" + fieldName);\n              }\n              DocValuesFormat format = DocValuesFormat.forName(formatName);\n              String segmentSuffix = getFullSegmentSuffix(readState.segmentSuffix, getSuffix(formatName, suffix));\n              if (!formats.containsKey(segmentSuffix)) {\n                formats.put(segmentSuffix, format.fieldsProducer(new SegmentReadState(readState, segmentSuffix)));\n              }\n              fields.put(fieldName, formats.get(segmentSuffix));\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(formats.values());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"addc47115aa3376d79985cd4abc9f8c6e212a032":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["addc47115aa3376d79985cd4abc9f8c6e212a032"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"9bb9a29a5e71a90295f175df8919802993142c9a":["10a170b987d46ec48dd8d286ff1521fb39ab6c20","971c32cba25aa5578c4b2a22aca3a3a93e01c251"],"971c32cba25aa5578c4b2a22aca3a3a93e01c251":["10a170b987d46ec48dd8d286ff1521fb39ab6c20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"556a4aab886d75371b2af129d87be3c2795cea76":["9bb9a29a5e71a90295f175df8919802993142c9a"],"10a170b987d46ec48dd8d286ff1521fb39ab6c20":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["556a4aab886d75371b2af129d87be3c2795cea76"]},"commit2Childs":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["10a170b987d46ec48dd8d286ff1521fb39ab6c20"],"addc47115aa3376d79985cd4abc9f8c6e212a032":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"9bb9a29a5e71a90295f175df8919802993142c9a":["556a4aab886d75371b2af129d87be3c2795cea76"],"971c32cba25aa5578c4b2a22aca3a3a93e01c251":["9bb9a29a5e71a90295f175df8919802993142c9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["addc47115aa3376d79985cd4abc9f8c6e212a032","d4d69c535930b5cce125cff868d40f6373dc27d4"],"556a4aab886d75371b2af129d87be3c2795cea76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10a170b987d46ec48dd8d286ff1521fb39ab6c20":["9bb9a29a5e71a90295f175df8919802993142c9a","971c32cba25aa5578c4b2a22aca3a3a93e01c251"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}