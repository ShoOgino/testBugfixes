{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30;\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List readers = Collections.synchronizedList(new ArrayList());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set readersToClose = Collections.synchronizedSet(new HashSet());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c = (ReaderCouple) readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    Iterator it = readersToClose.iterator();\n    while (it.hasNext()) {\n      ((IndexReader) it.next()).close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    it = readersToClose.iterator();\n    while (it.hasNext()) {\n      assertReaderClosed((IndexReader) it.next(), true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30;\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List readers = Collections.synchronizedList(new ArrayList());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set readersToClose = Collections.synchronizedSet(new HashSet());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c = (ReaderCouple) readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    Iterator it = readersToClose.iterator();\n    while (it.hasNext()) {\n      ((IndexReader) it.next()).close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    it = readersToClose.iterator();\n    while (it.hasNext()) {\n      assertReaderClosed((IndexReader) it.next(), true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":null,"sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30;\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List readers = Collections.synchronizedList(new ArrayList());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set readersToClose = Collections.synchronizedSet(new HashSet());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c = (ReaderCouple) readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    Iterator it = readersToClose.iterator();\n    while (it.hasNext()) {\n      ((IndexReader) it.next()).close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    it = readersToClose.iterator();\n    while (it.hasNext()) {\n      assertReaderClosed((IndexReader) it.next(), true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}