{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/PortedSolr3Test#testIntersections().mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/PortedSolr3Test#testIntersections().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#testIntersections().mjava","sourceNew":"  @Test\n  public void testIntersections() throws Exception {\n    setupDocs();\n    //Try some edge cases\n      //NOTE: 2nd arg is distance in kilometers\n    checkHitsCircle(ctx.makePoint(1, 1), 175, 3, 5, 6, 7);\n    checkHitsCircle(ctx.makePoint(179.8, 0), 200, 2, 8, 9);\n    checkHitsCircle(ctx.makePoint(50, 89.8), 200, 2, 10, 11);//this goes over the north pole\n    checkHitsCircle(ctx.makePoint(50, -89.8), 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHitsCircle(ctx.makePoint(-80.0, 33.0), 300, 2);\n    //large distance\n    checkHitsCircle(ctx.makePoint(1, 1), 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHitsBBox(ctx.makePoint(0.1, 0.1), 15, 2, 5, 6);\n    //try some more\n    deleteAll();\n    adoc(\"14\", ctx.makePoint(5, 0));\n    adoc(\"15\", ctx.makePoint(15, 0));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    adoc(\"16\", ctx.makePoint(19.79750, 18.71111));\n    adoc(\"17\", ctx.makePoint(-95.436643, 44.043900));\n    commit();\n\n    checkHitsCircle(ctx.makePoint(0, 0), 1000, 1, 14);\n    checkHitsCircle(ctx.makePoint(0, 0), 2000, 2, 14, 15);\n    checkHitsBBox(ctx.makePoint(0, 0), 3000, 3, 14, 15, 16);\n    checkHitsCircle(ctx.makePoint(0, 0), 3001, 3, 14, 15, 16);\n    checkHitsCircle(ctx.makePoint(0, 0), 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHitsCircle(ctx.makePoint(-96.789603, 43.517030), 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box\n    checkHitsCircle(ctx.makePoint(-96.789603, 43.517030), 110, 0);\n    checkHitsBBox(ctx.makePoint(-96.789603, 43.517030), 110, 1, 17);\n  }\n\n","sourceOld":"  @Test\n  public void testIntersections() throws Exception {\n    setupDocs();\n    //Try some edge cases\n      //NOTE: 2nd arg is distance in kilometers\n    checkHitsCircle(ctx.makePoint(1, 1), 175, 3, 5, 6, 7);\n    checkHitsCircle(ctx.makePoint(179.8, 0), 200, 2, 8, 9);\n    checkHitsCircle(ctx.makePoint(50, 89.8), 200, 2, 10, 11);//this goes over the north pole\n    checkHitsCircle(ctx.makePoint(50, -89.8), 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHitsCircle(ctx.makePoint(-80.0, 33.0), 300, 2);\n    //large distance\n    checkHitsCircle(ctx.makePoint(1, 1), 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHitsBBox(ctx.makePoint(0.1, 0.1), 15, 2, 5, 6);\n    //try some more\n    deleteAll();\n    adoc(\"14\", ctx.makePoint(5, 0));\n    adoc(\"15\", ctx.makePoint(15, 0));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    adoc(\"16\", ctx.makePoint(19.79750, 18.71111));\n    adoc(\"17\", ctx.makePoint(-95.436643, 44.043900));\n    commit();\n\n    checkHitsCircle(ctx.makePoint(0, 0), 1000, 1, 14);\n    checkHitsCircle(ctx.makePoint(0, 0), 2000, 2, 14, 15);\n    checkHitsBBox(ctx.makePoint(0, 0), 3000, 3, 14, 15, 16);\n    checkHitsCircle(ctx.makePoint(0, 0), 3001, 3, 14, 15, 16);\n    checkHitsCircle(ctx.makePoint(0, 0), 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHitsCircle(ctx.makePoint(-96.789603, 43.517030), 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box\n    checkHitsCircle(ctx.makePoint(-96.789603, 43.517030), 110, 0);\n    checkHitsBBox(ctx.makePoint(-96.789603, 43.517030), 110, 1, 17);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/PortedSolr3Test#testIntersections().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#testIntersections().mjava","sourceNew":"  @Test\n  public void testIntersections() throws Exception {\n    setupDocs();\n    //Try some edge cases\n      //NOTE: 2nd arg is distance in kilometers\n    checkHitsCircle(ctx.makePoint(1, 1), 175, 3, 5, 6, 7);\n    checkHitsCircle(ctx.makePoint(179.8, 0), 200, 2, 8, 9);\n    checkHitsCircle(ctx.makePoint(50, 89.8), 200, 2, 10, 11);//this goes over the north pole\n    checkHitsCircle(ctx.makePoint(50, -89.8), 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHitsCircle(ctx.makePoint(-80.0, 33.0), 300, 2);\n    //large distance\n    checkHitsCircle(ctx.makePoint(1, 1), 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHitsBBox(ctx.makePoint(0.1, 0.1), 15, 2, 5, 6);\n    //try some more\n    deleteAll();\n    adoc(\"14\", ctx.makePoint(5, 0));\n    adoc(\"15\", ctx.makePoint(15, 0));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    adoc(\"16\", ctx.makePoint(19.79750, 18.71111));\n    adoc(\"17\", ctx.makePoint(-95.436643, 44.043900));\n    commit();\n\n    checkHitsCircle(ctx.makePoint(0, 0), 1000, 1, 14);\n    checkHitsCircle(ctx.makePoint(0, 0), 2000, 2, 14, 15);\n    checkHitsBBox(ctx.makePoint(0, 0), 3000, 3, 14, 15, 16);\n    checkHitsCircle(ctx.makePoint(0, 0), 3001, 3, 14, 15, 16);\n    checkHitsCircle(ctx.makePoint(0, 0), 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHitsCircle(ctx.makePoint(-96.789603, 43.517030), 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box\n    checkHitsCircle(ctx.makePoint(-96.789603, 43.517030), 110, 0);\n    checkHitsBBox(ctx.makePoint(-96.789603, 43.517030), 110, 1, 17);\n  }\n\n","sourceOld":"  @Test\n  public void testIntersections() throws Exception {\n    setupDocs();\n    //Try some edge cases\n      //NOTE: 2nd arg is distance in kilometers\n    checkHitsCircle(ctx.makePoint(1, 1), 175, 3, 5, 6, 7);\n    checkHitsCircle(ctx.makePoint(179.8, 0), 200, 2, 8, 9);\n    checkHitsCircle(ctx.makePoint(50, 89.8), 200, 2, 10, 11);//this goes over the north pole\n    checkHitsCircle(ctx.makePoint(50, -89.8), 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHitsCircle(ctx.makePoint(-80.0, 33.0), 300, 2);\n    //large distance\n    checkHitsCircle(ctx.makePoint(1, 1), 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHitsBBox(ctx.makePoint(0.1, 0.1), 15, 2, 5, 6);\n    //try some more\n    deleteAll();\n    adoc(\"14\", ctx.makePoint(5, 0));\n    adoc(\"15\", ctx.makePoint(15, 0));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    adoc(\"16\", ctx.makePoint(19.79750, 18.71111));\n    adoc(\"17\", ctx.makePoint(-95.436643, 44.043900));\n    commit();\n\n    checkHitsCircle(ctx.makePoint(0, 0), 1000, 1, 14);\n    checkHitsCircle(ctx.makePoint(0, 0), 2000, 2, 14, 15);\n    checkHitsBBox(ctx.makePoint(0, 0), 3000, 3, 14, 15, 16);\n    checkHitsCircle(ctx.makePoint(0, 0), 3001, 3, 14, 15, 16);\n    checkHitsCircle(ctx.makePoint(0, 0), 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHitsCircle(ctx.makePoint(-96.789603, 43.517030), 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box\n    checkHitsCircle(ctx.makePoint(-96.789603, 43.517030), 110, 0);\n    checkHitsBBox(ctx.makePoint(-96.789603, 43.517030), 110, 1, 17);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/PortedSolr3Test#testIntersections().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/PortedSolr3Test#testIntersections().mjava","sourceNew":"  @Test\n  public void testIntersections() throws Exception {\n    setupDocs();\n    //Try some edge cases\n      //NOTE: 2nd arg is distance in kilometers\n    checkHitsCircle(ctx.makePoint(1, 1), 175, 3, 5, 6, 7);\n    checkHitsCircle(ctx.makePoint(179.8, 0), 200, 2, 8, 9);\n    checkHitsCircle(ctx.makePoint(50, 89.8), 200, 2, 10, 11);//this goes over the north pole\n    checkHitsCircle(ctx.makePoint(50, -89.8), 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHitsCircle(ctx.makePoint(-80.0, 33.0), 300, 2);\n    //large distance\n    checkHitsCircle(ctx.makePoint(1, 1), 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/zScaling of the box calculation.\n    checkHitsBBox(ctx.makePoint(0.1, 0.1), 15, 2, 5, 6);\n    //try some more\n    deleteAll();\n    adoc(\"14\", ctx.makePoint(5, 0));\n    adoc(\"15\", ctx.makePoint(15, 0));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    adoc(\"16\", ctx.makePoint(19.79750, 18.71111));\n    adoc(\"17\", ctx.makePoint(-95.436643, 44.043900));\n    commit();\n\n    checkHitsCircle(ctx.makePoint(0, 0), 1000, 1, 14);\n    checkHitsCircle(ctx.makePoint(0, 0), 2000, 2, 14, 15);\n    checkHitsBBox(ctx.makePoint(0, 0), 3000, 3, 14, 15, 16);\n    checkHitsCircle(ctx.makePoint(0, 0), 3001, 3, 14, 15, 16);\n    checkHitsCircle(ctx.makePoint(0, 0), 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHitsCircle(ctx.makePoint(-96.789603, 43.517030), 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box\n    checkHitsCircle(ctx.makePoint(-96.789603, 43.517030), 110, 0);\n    checkHitsBBox(ctx.makePoint(-96.789603, 43.517030), 110, 1, 17);\n  }\n\n","sourceOld":"  @Test\n  public void testIntersections() throws Exception {\n    setupDocs();\n    //Try some edge cases\n      //NOTE: 2nd arg is distance in kilometers\n    checkHitsCircle(ctx.makePoint(1, 1), 175, 3, 5, 6, 7);\n    checkHitsCircle(ctx.makePoint(179.8, 0), 200, 2, 8, 9);\n    checkHitsCircle(ctx.makePoint(50, 89.8), 200, 2, 10, 11);//this goes over the north pole\n    checkHitsCircle(ctx.makePoint(50, -89.8), 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHitsCircle(ctx.makePoint(-80.0, 33.0), 300, 2);\n    //large distance\n    checkHitsCircle(ctx.makePoint(1, 1), 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHitsBBox(ctx.makePoint(0.1, 0.1), 15, 2, 5, 6);\n    //try some more\n    deleteAll();\n    adoc(\"14\", ctx.makePoint(5, 0));\n    adoc(\"15\", ctx.makePoint(15, 0));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    adoc(\"16\", ctx.makePoint(19.79750, 18.71111));\n    adoc(\"17\", ctx.makePoint(-95.436643, 44.043900));\n    commit();\n\n    checkHitsCircle(ctx.makePoint(0, 0), 1000, 1, 14);\n    checkHitsCircle(ctx.makePoint(0, 0), 2000, 2, 14, 15);\n    checkHitsBBox(ctx.makePoint(0, 0), 3000, 3, 14, 15, 16);\n    checkHitsCircle(ctx.makePoint(0, 0), 3001, 3, 14, 15, 16);\n    checkHitsCircle(ctx.makePoint(0, 0), 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHitsCircle(ctx.makePoint(-96.789603, 43.517030), 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box\n    checkHitsCircle(ctx.makePoint(-96.789603, 43.517030), 110, 0);\n    checkHitsBBox(ctx.makePoint(-96.789603, 43.517030), 110, 1, 17);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/PortedSolr3Test#testIntersections().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/PortedSolr3Test#testIntersections().mjava","sourceNew":"  @Test\n  public void testIntersections() throws Exception {\n    setupDocs();\n    //Try some edge cases\n      //NOTE: 2nd arg is distance in kilometers\n    checkHitsCircle(shapeFactory.pointXY(1, 1), 175, 3, 5, 6, 7);\n    checkHitsCircle(shapeFactory.pointXY(179.8, 0), 200, 2, 8, 9);\n    checkHitsCircle(shapeFactory.pointXY(50, 89.8), 200, 2, 10, 11);//this goes over the north pole\n    checkHitsCircle(shapeFactory.pointXY(50, -89.8), 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHitsCircle(shapeFactory.pointXY(-80.0, 33.0), 300, 2);\n    //large distance\n    checkHitsCircle(shapeFactory.pointXY(1, 1), 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/zScaling of the box calculation.\n    checkHitsBBox(shapeFactory.pointXY(0.1, 0.1), 15, 2, 5, 6);\n    //try some more\n    deleteAll();\n    adoc(\"14\", shapeFactory.pointXY(5, 0));\n    adoc(\"15\", shapeFactory.pointXY(15, 0));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    adoc(\"16\", shapeFactory.pointXY(19.79750, 18.71111));\n    adoc(\"17\", shapeFactory.pointXY(-95.436643, 44.043900));\n    commit();\n\n    checkHitsCircle(shapeFactory.pointXY(0, 0), 1000, 1, 14);\n    checkHitsCircle(shapeFactory.pointXY(0, 0), 2000, 2, 14, 15);\n    checkHitsBBox(shapeFactory.pointXY(0, 0), 3000, 3, 14, 15, 16);\n    checkHitsCircle(shapeFactory.pointXY(0, 0), 3001, 3, 14, 15, 16);\n    checkHitsCircle(shapeFactory.pointXY(0, 0), 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHitsCircle(shapeFactory.pointXY(-96.789603, 43.517030), 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box\n    checkHitsCircle(shapeFactory.pointXY(-96.789603, 43.517030), 110, 0);\n    checkHitsBBox(shapeFactory.pointXY(-96.789603, 43.517030), 110, 1, 17);\n  }\n\n","sourceOld":"  @Test\n  public void testIntersections() throws Exception {\n    setupDocs();\n    //Try some edge cases\n      //NOTE: 2nd arg is distance in kilometers\n    checkHitsCircle(ctx.makePoint(1, 1), 175, 3, 5, 6, 7);\n    checkHitsCircle(ctx.makePoint(179.8, 0), 200, 2, 8, 9);\n    checkHitsCircle(ctx.makePoint(50, 89.8), 200, 2, 10, 11);//this goes over the north pole\n    checkHitsCircle(ctx.makePoint(50, -89.8), 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHitsCircle(ctx.makePoint(-80.0, 33.0), 300, 2);\n    //large distance\n    checkHitsCircle(ctx.makePoint(1, 1), 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/zScaling of the box calculation.\n    checkHitsBBox(ctx.makePoint(0.1, 0.1), 15, 2, 5, 6);\n    //try some more\n    deleteAll();\n    adoc(\"14\", ctx.makePoint(5, 0));\n    adoc(\"15\", ctx.makePoint(15, 0));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    adoc(\"16\", ctx.makePoint(19.79750, 18.71111));\n    adoc(\"17\", ctx.makePoint(-95.436643, 44.043900));\n    commit();\n\n    checkHitsCircle(ctx.makePoint(0, 0), 1000, 1, 14);\n    checkHitsCircle(ctx.makePoint(0, 0), 2000, 2, 14, 15);\n    checkHitsBBox(ctx.makePoint(0, 0), 3000, 3, 14, 15, 16);\n    checkHitsCircle(ctx.makePoint(0, 0), 3001, 3, 14, 15, 16);\n    checkHitsCircle(ctx.makePoint(0, 0), 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHitsCircle(ctx.makePoint(-96.789603, 43.517030), 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box\n    checkHitsCircle(ctx.makePoint(-96.789603, 43.517030), 110, 0);\n    checkHitsBBox(ctx.makePoint(-96.789603, 43.517030), 110, 1, 17);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}