{"path":"solr/core/src/test/org/apache/solr/search/join/TestCloudNestedDocsSort#setupCluster().mjava","commits":[{"id":"5220c264531ed933424a495eb8ed8ada158961cc","date":1493367833,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestCloudNestedDocsSort#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    for (int i=0; i<10+random().nextInt(20); i++) {\n      vals.add(\"\"+Integer.toString(random().nextInt(1000000), Character.MAX_RADIX));\n    }\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    int shards = 2;\n    int replicas = 2 ;\n    CollectionAdminRequest.createCollection(\"collection1\", configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-minimal.xml\")\n        .withProperty(\"schema\", \"schema.xml\")\n        .process(cluster.getSolrClient());\n\n    client = cluster.getSolrClient();\n    client.setDefaultCollection(\"collection1\");\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"collection1\", zkStateReader, true, true, 30);\n    \n    {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      int parentsNum = 10+random().nextInt(20);\n      for (int i=0; i<parentsNum || (matchingParent==null ||matchingChild==null); i++) {\n        final String parentTieVal = \"\" + random().nextInt(5);\n        final String parentId = \"\"+random().nextInt();\n        final SolrInputDocument parent = new SolrInputDocument(\"id\", parentId,\n            \"type_s\", \"parent\",\n            \"parentTie_s1\", parentTieVal,\n            \"parent_id_s1\", parentId\n            );\n        final List<String> parentFilter = addValsField(parent, \"parentFilter_s\");\n        final int kids = usually() ? atLeast(20) : 0;\n        for(int c = 0; c< kids; c++){\n          SolrInputDocument child = new SolrInputDocument(\"id\", \"\"+random().nextInt(),\n              \"type_s\", \"child\",\n              \"parentTie_s1\", parentTieVal,\n              \"val_s1\", Integer.toString(random().nextInt(1000), Character.MAX_RADIX)+\"\" ,\n              \"parent_id_s1\", parentId);\n          child.addField(\"parentFilter_s\", parentFilter);\n          final List<String> chVals = addValsField(child, \"childFilter_s\");\n          parent.addChildDocument(child );\n\n          // let's pickup at least matching child\n          final boolean canPickMatchingChild = !chVals.isEmpty() && !parentFilter.isEmpty();\n          final boolean haveNtPickedMatchingChild = matchingParent==null ||matchingChild==null;\n          if (canPickMatchingChild && haveNtPickedMatchingChild && usually()) {\n            matchingParent = (String) parentFilter.iterator().next();\n            matchingChild = (String) chVals.iterator().next();\n          }\n        }\n        maxDocs+=parent.getChildDocumentCount()+1;\n        docs.add(parent);\n      }\n      client.add(docs);\n      client.commit();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fa0dc67e6d1044f8b1ed34eadb08da2b9f17e322"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestCloudNestedDocsSort#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    for (int i=0; i<10+random().nextInt(20); i++) {\n      vals.add(\"\"+Integer.toString(random().nextInt(1000000), Character.MAX_RADIX));\n    }\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    int shards = 2;\n    int replicas = 2 ;\n    CollectionAdminRequest.createCollection(\"collection1\", configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-minimal.xml\")\n        .withProperty(\"schema\", \"schema.xml\")\n        .process(cluster.getSolrClient());\n\n    client = cluster.getSolrClient();\n    client.setDefaultCollection(\"collection1\");\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"collection1\", zkStateReader, true, true, 30);\n    \n    {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      int parentsNum = 10+random().nextInt(20);\n      for (int i=0; i<parentsNum || (matchingParent==null ||matchingChild==null); i++) {\n        final String parentTieVal = \"\" + random().nextInt(5);\n        final String parentId = \"\"+random().nextInt();\n        final SolrInputDocument parent = new SolrInputDocument(\"id\", parentId,\n            \"type_s\", \"parent\",\n            \"parentTie_s1\", parentTieVal,\n            \"parent_id_s1\", parentId\n            );\n        final List<String> parentFilter = addValsField(parent, \"parentFilter_s\");\n        final int kids = usually() ? atLeast(20) : 0;\n        for(int c = 0; c< kids; c++){\n          SolrInputDocument child = new SolrInputDocument(\"id\", \"\"+random().nextInt(),\n              \"type_s\", \"child\",\n              \"parentTie_s1\", parentTieVal,\n              \"val_s1\", Integer.toString(random().nextInt(1000), Character.MAX_RADIX)+\"\" ,\n              \"parent_id_s1\", parentId);\n          child.addField(\"parentFilter_s\", parentFilter);\n          final List<String> chVals = addValsField(child, \"childFilter_s\");\n          parent.addChildDocument(child );\n\n          // let's pickup at least matching child\n          final boolean canPickMatchingChild = !chVals.isEmpty() && !parentFilter.isEmpty();\n          final boolean haveNtPickedMatchingChild = matchingParent==null ||matchingChild==null;\n          if (canPickMatchingChild && haveNtPickedMatchingChild && usually()) {\n            matchingParent = (String) parentFilter.iterator().next();\n            matchingChild = (String) chVals.iterator().next();\n          }\n        }\n        maxDocs+=parent.getChildDocumentCount()+1;\n        docs.add(parent);\n      }\n      client.add(docs);\n      client.commit();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0dc67e6d1044f8b1ed34eadb08da2b9f17e322","date":1499326969,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestCloudNestedDocsSort#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestCloudNestedDocsSort#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    for (int i=0; i<10+random().nextInt(20); i++) {\n      vals.add(\"\"+Integer.toString(random().nextInt(1000000), Character.MAX_RADIX));\n    }\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    int shards = 2;\n    int replicas = 2 ;\n    CollectionAdminRequest.createCollection(\"collection1\", configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-minimal.xml\")\n        .withProperty(\"schema\", \"schema.xml\")\n        .process(cluster.getSolrClient());\n\n    client = cluster.getSolrClient();\n    client.setDefaultCollection(\"collection1\");\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"collection1\", zkStateReader, true, true, 30);\n    \n    {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      int parentsNum = 10 +random().nextInt(20)\n          ;\n      for (int i=0; i<parentsNum || (matchingParent==null ||matchingChild==null); i++) {\n        final String parentTieVal = \"\" + random().nextInt(5);\n        final String parentId = \"\"+random().nextInt();\n        final SolrInputDocument parent = new SolrInputDocument(\"id\", parentId,\n            \"type_s\", \"parent\",\n            \"parentTie_s1\", parentTieVal,\n            \"parent_id_s1\", parentId\n            );\n        final List<String> parentFilter = addValsField(parent, \"parentFilter_s\");\n        final int kids = usually() ? atLeast(20) : 0;\n        for(int c = 0; c< kids; c++){\n          SolrInputDocument child = new SolrInputDocument(\"id\", \"\"+random().nextInt(),\n              \"type_s\", \"child\",\n              \"parentTie_s1\", parentTieVal,\n              \"parent_id_s1\", parentId);\n          child.addField(\"parentFilter_s\", parentFilter);\n          if (usually()) {\n            child.addField( \"val_s1\", Integer.toString(random().nextInt(1000), Character.MAX_RADIX)+\"\" );\n          }\n          final List<String> chVals = addValsField(child, \"childFilter_s\");\n          parent.addChildDocument(child );\n\n          // let's pickup at least matching child\n          final boolean canPickMatchingChild = !chVals.isEmpty() && !parentFilter.isEmpty();\n          final boolean haveNtPickedMatchingChild = matchingParent==null ||matchingChild==null;\n          if (canPickMatchingChild && haveNtPickedMatchingChild && usually()) {\n            matchingParent = (String) parentFilter.iterator().next();\n            matchingChild = (String) chVals.iterator().next();\n          }\n        }\n        maxDocs+=parent.getChildDocumentCount()+1;\n        docs.add(parent);\n      }\n      client.add(docs);\n      client.commit();\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    for (int i=0; i<10+random().nextInt(20); i++) {\n      vals.add(\"\"+Integer.toString(random().nextInt(1000000), Character.MAX_RADIX));\n    }\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    int shards = 2;\n    int replicas = 2 ;\n    CollectionAdminRequest.createCollection(\"collection1\", configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-minimal.xml\")\n        .withProperty(\"schema\", \"schema.xml\")\n        .process(cluster.getSolrClient());\n\n    client = cluster.getSolrClient();\n    client.setDefaultCollection(\"collection1\");\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"collection1\", zkStateReader, true, true, 30);\n    \n    {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      int parentsNum = 10+random().nextInt(20);\n      for (int i=0; i<parentsNum || (matchingParent==null ||matchingChild==null); i++) {\n        final String parentTieVal = \"\" + random().nextInt(5);\n        final String parentId = \"\"+random().nextInt();\n        final SolrInputDocument parent = new SolrInputDocument(\"id\", parentId,\n            \"type_s\", \"parent\",\n            \"parentTie_s1\", parentTieVal,\n            \"parent_id_s1\", parentId\n            );\n        final List<String> parentFilter = addValsField(parent, \"parentFilter_s\");\n        final int kids = usually() ? atLeast(20) : 0;\n        for(int c = 0; c< kids; c++){\n          SolrInputDocument child = new SolrInputDocument(\"id\", \"\"+random().nextInt(),\n              \"type_s\", \"child\",\n              \"parentTie_s1\", parentTieVal,\n              \"val_s1\", Integer.toString(random().nextInt(1000), Character.MAX_RADIX)+\"\" ,\n              \"parent_id_s1\", parentId);\n          child.addField(\"parentFilter_s\", parentFilter);\n          final List<String> chVals = addValsField(child, \"childFilter_s\");\n          parent.addChildDocument(child );\n\n          // let's pickup at least matching child\n          final boolean canPickMatchingChild = !chVals.isEmpty() && !parentFilter.isEmpty();\n          final boolean haveNtPickedMatchingChild = matchingParent==null ||matchingChild==null;\n          if (canPickMatchingChild && haveNtPickedMatchingChild && usually()) {\n            matchingParent = (String) parentFilter.iterator().next();\n            matchingChild = (String) chVals.iterator().next();\n          }\n        }\n        maxDocs+=parent.getChildDocumentCount()+1;\n        docs.add(parent);\n      }\n      client.add(docs);\n      client.commit();\n    }\n  }\n\n","bugFix":["5220c264531ed933424a495eb8ed8ada158961cc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestCloudNestedDocsSort#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestCloudNestedDocsSort#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    for (int i=0; i<10+random().nextInt(20); i++) {\n      vals.add(\"\"+Integer.toString(random().nextInt(1000000), Character.MAX_RADIX));\n    }\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    int shards = 2;\n    int replicas = 2 ;\n    CollectionAdminRequest.createCollection(\"collection1\", configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-minimal.xml\")\n        .withProperty(\"schema\", \"schema.xml\")\n        .process(cluster.getSolrClient());\n\n    client = cluster.getSolrClient();\n    client.setDefaultCollection(\"collection1\");\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"collection1\", zkStateReader, true, true, 30);\n    \n    {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      int parentsNum = 10 +random().nextInt(20)\n          ;\n      for (int i=0; i<parentsNum || (matchingParent==null ||matchingChild==null); i++) {\n        final String parentTieVal = \"\" + random().nextInt(5);\n        final String parentId = \"\"+random().nextInt();\n        final SolrInputDocument parent = new SolrInputDocument(\"id\", parentId,\n            \"type_s\", \"parent\",\n            \"parentTie_s1\", parentTieVal,\n            \"parent_id_s1\", parentId\n            );\n        final List<String> parentFilter = addValsField(parent, \"parentFilter_s\");\n        final int kids = usually() ? atLeast(20) : 0;\n        for(int c = 0; c< kids; c++){\n          SolrInputDocument child = new SolrInputDocument(\"id\", \"\"+random().nextInt(),\n              \"type_s\", \"child\",\n              \"parentTie_s1\", parentTieVal,\n              \"parent_id_s1\", parentId);\n          child.addField(\"parentFilter_s\", parentFilter);\n          if (usually()) {\n            child.addField( \"val_s1\", Integer.toString(random().nextInt(1000), Character.MAX_RADIX)+\"\" );\n          }\n          final List<String> chVals = addValsField(child, \"childFilter_s\");\n          parent.addChildDocument(child );\n\n          // let's pickup at least matching child\n          final boolean canPickMatchingChild = !chVals.isEmpty() && !parentFilter.isEmpty();\n          final boolean haveNtPickedMatchingChild = matchingParent==null ||matchingChild==null;\n          if (canPickMatchingChild && haveNtPickedMatchingChild && usually()) {\n            matchingParent = (String) parentFilter.iterator().next();\n            matchingChild = (String) chVals.iterator().next();\n          }\n        }\n        maxDocs+=parent.getChildDocumentCount()+1;\n        docs.add(parent);\n      }\n      client.add(docs);\n      client.commit();\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    for (int i=0; i<10+random().nextInt(20); i++) {\n      vals.add(\"\"+Integer.toString(random().nextInt(1000000), Character.MAX_RADIX));\n    }\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    int shards = 2;\n    int replicas = 2 ;\n    CollectionAdminRequest.createCollection(\"collection1\", configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-minimal.xml\")\n        .withProperty(\"schema\", \"schema.xml\")\n        .process(cluster.getSolrClient());\n\n    client = cluster.getSolrClient();\n    client.setDefaultCollection(\"collection1\");\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"collection1\", zkStateReader, true, true, 30);\n    \n    {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      int parentsNum = 10+random().nextInt(20);\n      for (int i=0; i<parentsNum || (matchingParent==null ||matchingChild==null); i++) {\n        final String parentTieVal = \"\" + random().nextInt(5);\n        final String parentId = \"\"+random().nextInt();\n        final SolrInputDocument parent = new SolrInputDocument(\"id\", parentId,\n            \"type_s\", \"parent\",\n            \"parentTie_s1\", parentTieVal,\n            \"parent_id_s1\", parentId\n            );\n        final List<String> parentFilter = addValsField(parent, \"parentFilter_s\");\n        final int kids = usually() ? atLeast(20) : 0;\n        for(int c = 0; c< kids; c++){\n          SolrInputDocument child = new SolrInputDocument(\"id\", \"\"+random().nextInt(),\n              \"type_s\", \"child\",\n              \"parentTie_s1\", parentTieVal,\n              \"val_s1\", Integer.toString(random().nextInt(1000), Character.MAX_RADIX)+\"\" ,\n              \"parent_id_s1\", parentId);\n          child.addField(\"parentFilter_s\", parentFilter);\n          final List<String> chVals = addValsField(child, \"childFilter_s\");\n          parent.addChildDocument(child );\n\n          // let's pickup at least matching child\n          final boolean canPickMatchingChild = !chVals.isEmpty() && !parentFilter.isEmpty();\n          final boolean haveNtPickedMatchingChild = matchingParent==null ||matchingChild==null;\n          if (canPickMatchingChild && haveNtPickedMatchingChild && usually()) {\n            matchingParent = (String) parentFilter.iterator().next();\n            matchingChild = (String) chVals.iterator().next();\n          }\n        }\n        maxDocs+=parent.getChildDocumentCount()+1;\n        docs.add(parent);\n      }\n      client.add(docs);\n      client.commit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c64c404e3b9468c68df5bdf42ddb3b77b6dd707","date":1571266198,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestCloudNestedDocsSort#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestCloudNestedDocsSort#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    final int numVals = atLeast(10);\n    for (int i=0; i < numVals; i++) {\n      vals.add(\"\"+Integer.toString(random().nextInt(1000000), Character.MAX_RADIX));\n    }\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    int shards = 2;\n    int replicas = 2 ;\n    CollectionAdminRequest.createCollection(\"collection1\", configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-minimal.xml\")\n        .withProperty(\"schema\", \"schema.xml\")\n        .process(cluster.getSolrClient());\n\n    client = cluster.getSolrClient();\n    client.setDefaultCollection(\"collection1\");\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"collection1\", zkStateReader, true, true, 30);\n    \n    {\n      int id = 42;\n      final List<SolrInputDocument> docs = new ArrayList<>();\n      final int parentsNum = atLeast(20);\n          ;\n      for (int i=0; i<parentsNum || (matchingParent==null ||matchingChild==null); i++) {\n        final String parentTieVal = \"\" + random().nextInt(5);\n        final String parentId = \"\"+(id++);\n        final SolrInputDocument parent = new SolrInputDocument(\"id\", parentId,\n            \"type_s\", \"parent\",\n            \"parentTie_s1\", parentTieVal,\n            \"parent_id_s1\", parentId\n            );\n        final List<String> parentFilter = addValsField(parent, \"parentFilter_s\");\n        final int kids = usually() ? atLeast(20) : 0;\n        for(int c = 0; c< kids; c++){\n          SolrInputDocument child = new SolrInputDocument(\"id\", \"\"+(id++),\n              \"type_s\", \"child\",\n              \"parentTie_s1\", parentTieVal,\n              \"parent_id_s1\", parentId);\n          child.addField(\"parentFilter_s\", parentFilter);\n          if (usually()) {\n            child.addField( \"val_s1\", Integer.toString(random().nextInt(1000), Character.MAX_RADIX)+\"\" );\n          }\n          final List<String> chVals = addValsField(child, \"childFilter_s\");\n          parent.addChildDocument(child );\n\n          // let's pickup at least matching child\n          final boolean canPickMatchingChild = !chVals.isEmpty() && !parentFilter.isEmpty();\n          final boolean haveNtPickedMatchingChild = matchingParent==null ||matchingChild==null;\n          if (canPickMatchingChild && haveNtPickedMatchingChild && usually()) {\n            matchingParent = (String) parentFilter.iterator().next();\n            matchingChild = (String) chVals.iterator().next();\n          }\n        }\n        maxDocs += parent.getChildDocumentCount()+1;\n        docs.add(parent);\n      }\n      // don't add parents in increasing uniqueKey order\n      Collections.shuffle(docs, random());\n      client.add(docs);\n      client.commit();\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    for (int i=0; i<10+random().nextInt(20); i++) {\n      vals.add(\"\"+Integer.toString(random().nextInt(1000000), Character.MAX_RADIX));\n    }\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    int shards = 2;\n    int replicas = 2 ;\n    CollectionAdminRequest.createCollection(\"collection1\", configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-minimal.xml\")\n        .withProperty(\"schema\", \"schema.xml\")\n        .process(cluster.getSolrClient());\n\n    client = cluster.getSolrClient();\n    client.setDefaultCollection(\"collection1\");\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"collection1\", zkStateReader, true, true, 30);\n    \n    {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      int parentsNum = 10 +random().nextInt(20)\n          ;\n      for (int i=0; i<parentsNum || (matchingParent==null ||matchingChild==null); i++) {\n        final String parentTieVal = \"\" + random().nextInt(5);\n        final String parentId = \"\"+random().nextInt();\n        final SolrInputDocument parent = new SolrInputDocument(\"id\", parentId,\n            \"type_s\", \"parent\",\n            \"parentTie_s1\", parentTieVal,\n            \"parent_id_s1\", parentId\n            );\n        final List<String> parentFilter = addValsField(parent, \"parentFilter_s\");\n        final int kids = usually() ? atLeast(20) : 0;\n        for(int c = 0; c< kids; c++){\n          SolrInputDocument child = new SolrInputDocument(\"id\", \"\"+random().nextInt(),\n              \"type_s\", \"child\",\n              \"parentTie_s1\", parentTieVal,\n              \"parent_id_s1\", parentId);\n          child.addField(\"parentFilter_s\", parentFilter);\n          if (usually()) {\n            child.addField( \"val_s1\", Integer.toString(random().nextInt(1000), Character.MAX_RADIX)+\"\" );\n          }\n          final List<String> chVals = addValsField(child, \"childFilter_s\");\n          parent.addChildDocument(child );\n\n          // let's pickup at least matching child\n          final boolean canPickMatchingChild = !chVals.isEmpty() && !parentFilter.isEmpty();\n          final boolean haveNtPickedMatchingChild = matchingParent==null ||matchingChild==null;\n          if (canPickMatchingChild && haveNtPickedMatchingChild && usually()) {\n            matchingParent = (String) parentFilter.iterator().next();\n            matchingChild = (String) chVals.iterator().next();\n          }\n        }\n        maxDocs+=parent.getChildDocumentCount()+1;\n        docs.add(parent);\n      }\n      client.add(docs);\n      client.commit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestCloudNestedDocsSort#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestCloudNestedDocsSort#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    final int numVals = atLeast(10);\n    for (int i=0; i < numVals; i++) {\n      vals.add(\"\"+Integer.toString(random().nextInt(1000000), Character.MAX_RADIX));\n    }\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    int shards = 2;\n    int replicas = 2 ;\n    CollectionAdminRequest.createCollection(\"collection1\", configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-minimal.xml\")\n        .withProperty(\"schema\", \"schema.xml\")\n        .process(cluster.getSolrClient());\n\n    client = cluster.getSolrClient();\n    client.setDefaultCollection(\"collection1\");\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"collection1\", zkStateReader, true, true, 30);\n    \n    {\n      int id = 42;\n      final List<SolrInputDocument> docs = new ArrayList<>();\n      final int parentsNum = atLeast(20);\n          ;\n      for (int i=0; i<parentsNum || (matchingParent==null ||matchingChild==null); i++) {\n        final String parentTieVal = \"\" + random().nextInt(5);\n        final String parentId = \"\"+(id++);\n        final SolrInputDocument parent = new SolrInputDocument(\"id\", parentId,\n            \"type_s\", \"parent\",\n            \"parentTie_s1\", parentTieVal,\n            \"parent_id_s1\", parentId\n            );\n        final List<String> parentFilter = addValsField(parent, \"parentFilter_s\");\n        final int kids = usually() ? atLeast(20) : 0;\n        for(int c = 0; c< kids; c++){\n          SolrInputDocument child = new SolrInputDocument(\"id\", \"\"+(id++),\n              \"type_s\", \"child\",\n              \"parentTie_s1\", parentTieVal,\n              \"parent_id_s1\", parentId);\n          child.addField(\"parentFilter_s\", parentFilter);\n          if (usually()) {\n            child.addField( \"val_s1\", Integer.toString(random().nextInt(1000), Character.MAX_RADIX)+\"\" );\n          }\n          final List<String> chVals = addValsField(child, \"childFilter_s\");\n          parent.addChildDocument(child );\n\n          // let's pickup at least matching child\n          final boolean canPickMatchingChild = !chVals.isEmpty() && !parentFilter.isEmpty();\n          final boolean haveNtPickedMatchingChild = matchingParent==null ||matchingChild==null;\n          if (canPickMatchingChild && haveNtPickedMatchingChild && usually()) {\n            matchingParent = parentFilter.iterator().next();\n            matchingChild = chVals.iterator().next();\n          }\n        }\n        maxDocs += parent.getChildDocumentCount()+1;\n        docs.add(parent);\n      }\n      // don't add parents in increasing uniqueKey order\n      Collections.shuffle(docs, random());\n      client.add(docs);\n      client.commit();\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    final int numVals = atLeast(10);\n    for (int i=0; i < numVals; i++) {\n      vals.add(\"\"+Integer.toString(random().nextInt(1000000), Character.MAX_RADIX));\n    }\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    int shards = 2;\n    int replicas = 2 ;\n    CollectionAdminRequest.createCollection(\"collection1\", configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-minimal.xml\")\n        .withProperty(\"schema\", \"schema.xml\")\n        .process(cluster.getSolrClient());\n\n    client = cluster.getSolrClient();\n    client.setDefaultCollection(\"collection1\");\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"collection1\", zkStateReader, true, true, 30);\n    \n    {\n      int id = 42;\n      final List<SolrInputDocument> docs = new ArrayList<>();\n      final int parentsNum = atLeast(20);\n          ;\n      for (int i=0; i<parentsNum || (matchingParent==null ||matchingChild==null); i++) {\n        final String parentTieVal = \"\" + random().nextInt(5);\n        final String parentId = \"\"+(id++);\n        final SolrInputDocument parent = new SolrInputDocument(\"id\", parentId,\n            \"type_s\", \"parent\",\n            \"parentTie_s1\", parentTieVal,\n            \"parent_id_s1\", parentId\n            );\n        final List<String> parentFilter = addValsField(parent, \"parentFilter_s\");\n        final int kids = usually() ? atLeast(20) : 0;\n        for(int c = 0; c< kids; c++){\n          SolrInputDocument child = new SolrInputDocument(\"id\", \"\"+(id++),\n              \"type_s\", \"child\",\n              \"parentTie_s1\", parentTieVal,\n              \"parent_id_s1\", parentId);\n          child.addField(\"parentFilter_s\", parentFilter);\n          if (usually()) {\n            child.addField( \"val_s1\", Integer.toString(random().nextInt(1000), Character.MAX_RADIX)+\"\" );\n          }\n          final List<String> chVals = addValsField(child, \"childFilter_s\");\n          parent.addChildDocument(child );\n\n          // let's pickup at least matching child\n          final boolean canPickMatchingChild = !chVals.isEmpty() && !parentFilter.isEmpty();\n          final boolean haveNtPickedMatchingChild = matchingParent==null ||matchingChild==null;\n          if (canPickMatchingChild && haveNtPickedMatchingChild && usually()) {\n            matchingParent = (String) parentFilter.iterator().next();\n            matchingChild = (String) chVals.iterator().next();\n          }\n        }\n        maxDocs += parent.getChildDocumentCount()+1;\n        docs.add(parent);\n      }\n      // don't add parents in increasing uniqueKey order\n      Collections.shuffle(docs, random());\n      client.add(docs);\n      client.commit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5220c264531ed933424a495eb8ed8ada158961cc"],"9c64c404e3b9468c68df5bdf42ddb3b77b6dd707":["fa0dc67e6d1044f8b1ed34eadb08da2b9f17e322"],"fa0dc67e6d1044f8b1ed34eadb08da2b9f17e322":["5220c264531ed933424a495eb8ed8ada158961cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e73d8d559120669b47658108d818b637df5456ea":["e9017cf144952056066919f1ebc7897ff9bd71b1","fa0dc67e6d1044f8b1ed34eadb08da2b9f17e322"],"5220c264531ed933424a495eb8ed8ada158961cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["9c64c404e3b9468c68df5bdf42ddb3b77b6dd707"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["e73d8d559120669b47658108d818b637df5456ea"],"9c64c404e3b9468c68df5bdf42ddb3b77b6dd707":["e98520789adb1d5ad05afb4956eca0944a929688"],"fa0dc67e6d1044f8b1ed34eadb08da2b9f17e322":["9c64c404e3b9468c68df5bdf42ddb3b77b6dd707","e73d8d559120669b47658108d818b637df5456ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","5220c264531ed933424a495eb8ed8ada158961cc"],"e73d8d559120669b47658108d818b637df5456ea":[],"5220c264531ed933424a495eb8ed8ada158961cc":["e9017cf144952056066919f1ebc7897ff9bd71b1","fa0dc67e6d1044f8b1ed34eadb08da2b9f17e322"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}