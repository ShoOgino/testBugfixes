{"path":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5","date":1320922486,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions size should be 0\", suggestions.size()==0);\n    searcher.decref();\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(SolrSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions size should be 0\", suggestions.size()==0);\n    searcher.decref();\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions size should be 0\", suggestions.size()==0);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(SolrSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions size should be 0\", suggestions.size()==0);\n    searcher.decref();\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions size should be 0\", suggestions.size()==0);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(SolrSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions size should be 0\", suggestions.size()==0);\n    searcher.decref();\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(SolrSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions size should be 0\", suggestions.size()==0);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ab833f2b623042c834458d4cbcad05073a93793","date":1527625631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(SolrSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    h.getCore().withSearcher(searcher -> {\n      Collection<Token> tokens = queryConverter.convert(\"solar\");\n      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.getIndexReader());\n      SpellingResult result = checker.getSuggestions(spellOpts);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      //should be lowercased, b/c we are using a lowercasing analyzer\n      Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n      assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n      Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n      assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n      assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n      spellOpts.tokens = queryConverter.convert(\"super\");\n      result = checker.getSuggestions(spellOpts);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      suggestions = result.get(spellOpts.tokens.iterator().next());\n      assertTrue(\"suggestions size should be 0\", suggestions.size()==0);\n      return null;\n    });\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(SolrSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions size should be 0\", suggestions.size()==0);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2138c838f1c8052d94d61eb1e205dce7fa6932ef","date":1527642223,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(SolrSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    h.getCore().withSearcher(searcher -> {\n      Collection<Token> tokens = queryConverter.convert(\"solar\");\n      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.getIndexReader());\n      SpellingResult result = checker.getSuggestions(spellOpts);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      //should be lowercased, b/c we are using a lowercasing analyzer\n      Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n      assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n      Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n      assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n      assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n      spellOpts.tokens = queryConverter.convert(\"super\");\n      result = checker.getSuggestions(spellOpts);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      suggestions = result.get(spellOpts.tokens.iterator().next());\n      assertTrue(\"suggestions size should be 0\", suggestions.size()==0);\n      return null;\n    });\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(SolrSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions size should be 0\", suggestions.size()==0);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   */\n  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(SolrSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    h.getCore().withSearcher(searcher -> {\n      Collection<Token> tokens = queryConverter.convert(\"solar\");\n      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.getIndexReader());\n      SpellingResult result = checker.getSuggestions(spellOpts);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      //should be lowercased, b/c we are using a lowercasing analyzer\n      Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n      assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n      Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n      assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n      assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n      spellOpts.tokens = queryConverter.convert(\"super\");\n      result = checker.getSuggestions(spellOpts);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      suggestions = result.get(spellOpts.tokens.iterator().next());\n      assertTrue(\"suggestions size should be 0\", suggestions.size()==0);\n      return null;\n    });\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(SolrSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    h.getCore().withSearcher(searcher -> {\n      Collection<Token> tokens = queryConverter.convert(\"solar\");\n      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.getIndexReader());\n      SpellingResult result = checker.getSuggestions(spellOpts);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      //should be lowercased, b/c we are using a lowercasing analyzer\n      Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n      assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n      Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n      assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n      assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n      spellOpts.tokens = queryConverter.convert(\"super\");\n      result = checker.getSuggestions(spellOpts);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      suggestions = result.get(spellOpts.tokens.iterator().next());\n      assertTrue(\"suggestions size should be 0\", suggestions.size()==0);\n      return null;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ab833f2b623042c834458d4cbcad05073a93793":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","4ab833f2b623042c834458d4cbcad05073a93793"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["4ab833f2b623042c834458d4cbcad05073a93793","2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"c26f00b574427b55127e869b935845554afde1fa":["51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4ab833f2b623042c834458d4cbcad05073a93793":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}