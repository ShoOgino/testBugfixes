{"path":"solr/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","commits":[{"id":"0aea57ab530d174e645bf6e14d04db1e243e13d7","date":1274216848,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(errString);\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6d061c6ac0252e445714563a37eb8aa9816ce369","6d061c6ac0252e445714563a37eb8aa9816ce369","6d061c6ac0252e445714563a37eb8aa9816ce369"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e15e433a5cf81d3275a13920ec3461408b3f26b7","date":1283541243,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","pathOld":"solr/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","sourceNew":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(errString);\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","sourceOld":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(errString);\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","pathOld":"solr/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","sourceNew":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(errString);\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","sourceOld":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(errString);\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5526c7296d909d49bc2ce493b4e8435db4979db0","date":1299104057,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","pathOld":"solr/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","sourceNew":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","sourceOld":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(errString);\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","pathOld":"solr/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","sourceNew":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","sourceOld":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(errString);\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","pathOld":"solr/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","sourceNew":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","sourceOld":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(errString);\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","pathOld":"solr/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","sourceNew":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","sourceOld":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","pathOld":"solr/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","sourceNew":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","sourceOld":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","pathOld":"solr/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","sourceNew":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","sourceOld":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5526c7296d909d49bc2ce493b4e8435db4979db0"],"e15e433a5cf81d3275a13920ec3461408b3f26b7":["0aea57ab530d174e645bf6e14d04db1e243e13d7"],"0aea57ab530d174e645bf6e14d04db1e243e13d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5526c7296d909d49bc2ce493b4e8435db4979db0":["e15e433a5cf81d3275a13920ec3461408b3f26b7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["5526c7296d909d49bc2ce493b4e8435db4979db0"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["e15e433a5cf81d3275a13920ec3461408b3f26b7","5526c7296d909d49bc2ce493b4e8435db4979db0"],"c26f00b574427b55127e869b935845554afde1fa":["5526c7296d909d49bc2ce493b4e8435db4979db0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["5526c7296d909d49bc2ce493b4e8435db4979db0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0aea57ab530d174e645bf6e14d04db1e243e13d7","e15e433a5cf81d3275a13920ec3461408b3f26b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"e15e433a5cf81d3275a13920ec3461408b3f26b7":["5526c7296d909d49bc2ce493b4e8435db4979db0","d619839baa8ce5503e496b94a9e42ad6f079293f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"0aea57ab530d174e645bf6e14d04db1e243e13d7":["e15e433a5cf81d3275a13920ec3461408b3f26b7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"5526c7296d909d49bc2ce493b4e8435db4979db0":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0aea57ab530d174e645bf6e14d04db1e243e13d7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}