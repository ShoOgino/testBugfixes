{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#polyToBBox(double[],double[]).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#polyToBBox(double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#polyToBBox(double[],double[]).mjava","sourceNew":"  /** Compute Bounding Box for a polygon using WGS-84 parameters */\n  public static GeoRect polyToBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = min(polyLons[i], minLon);\n      maxLon = max(polyLons[i], maxLon);\n      minLat = min(polyLats[i], minLat);\n      maxLat = max(polyLats[i], maxLat);\n    }\n    // expand bounding box by TOLERANCE factor to handle round-off error\n    return new GeoRect(max(minLon - TOLERANCE, MIN_LON_INCL), min(maxLon + TOLERANCE, MAX_LON_INCL),\n        max(minLat - TOLERANCE, MIN_LAT_INCL), min(maxLat + TOLERANCE, MAX_LAT_INCL));\n  }\n\n","sourceOld":"  /**\n   * Compute Bounding Box for a polygon using WGS-84 parameters\n   */\n  public static GeoRect polyToBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = Math.min(polyLons[i], minLon);\n      maxLon = Math.max(polyLons[i], maxLon);\n      minLat = Math.min(polyLats[i], minLat);\n      maxLat = Math.max(polyLats[i], maxLat);\n    }\n    // expand bounding box by TOLERANCE factor to handle round-off error\n    return new GeoRect(Math.max(minLon - TOLERANCE, MIN_LON_INCL), Math.min(maxLon + TOLERANCE, MAX_LON_INCL),\n        Math.max(minLat - TOLERANCE, MIN_LAT_INCL), Math.min(maxLat + TOLERANCE, MAX_LAT_INCL));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#polyToBBox(double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#polyToBBox(double[],double[]).mjava","sourceNew":"  /** Compute Bounding Box for a polygon using WGS-84 parameters */\n  public static GeoRect polyToBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = min(polyLons[i], minLon);\n      maxLon = max(polyLons[i], maxLon);\n      minLat = min(polyLats[i], minLat);\n      maxLat = max(polyLats[i], maxLat);\n    }\n    // expand bounding box by TOLERANCE factor to handle round-off error\n    return new GeoRect(max(minLon - TOLERANCE, MIN_LON_INCL), min(maxLon + TOLERANCE, MAX_LON_INCL),\n        max(minLat - TOLERANCE, MIN_LAT_INCL), min(maxLat + TOLERANCE, MAX_LAT_INCL));\n  }\n\n","sourceOld":"  /**\n   * Compute Bounding Box for a polygon using WGS-84 parameters\n   */\n  public static GeoRect polyToBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = Math.min(polyLons[i], minLon);\n      maxLon = Math.max(polyLons[i], maxLon);\n      minLat = Math.min(polyLats[i], minLat);\n      maxLat = Math.max(polyLats[i], maxLat);\n    }\n\n    return new GeoRect(GeoUtils.unscaleLon(GeoUtils.scaleLon(minLon)), GeoUtils.unscaleLon(GeoUtils.scaleLon(maxLon)),\n        GeoUtils.unscaleLat(GeoUtils.scaleLat(minLat)), GeoUtils.unscaleLat(GeoUtils.scaleLat(maxLat)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#polyToBBox(double[],double[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#polyToBBox(double[],double[]).mjava","sourceNew":"  /** Compute Bounding Box for a polygon using WGS-84 parameters */\n  public static GeoRect polyToBBox(double[] polyLats, double[] polyLons) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = min(polyLons[i], minLon);\n      maxLon = max(polyLons[i], maxLon);\n      minLat = min(polyLats[i], minLat);\n      maxLat = max(polyLats[i], maxLat);\n    }\n    // expand bounding box by TOLERANCE factor to handle round-off error\n    return new GeoRect(max(minLat - TOLERANCE, MIN_LAT_INCL), min(maxLat + TOLERANCE, MAX_LAT_INCL),\n                       max(minLon - TOLERANCE, MIN_LON_INCL), min(maxLon + TOLERANCE, MAX_LON_INCL));\n  }\n\n","sourceOld":"  /** Compute Bounding Box for a polygon using WGS-84 parameters */\n  public static GeoRect polyToBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = min(polyLons[i], minLon);\n      maxLon = max(polyLons[i], maxLon);\n      minLat = min(polyLats[i], minLat);\n      maxLat = max(polyLats[i], maxLat);\n    }\n    // expand bounding box by TOLERANCE factor to handle round-off error\n    return new GeoRect(max(minLon - TOLERANCE, MIN_LON_INCL), min(maxLon + TOLERANCE, MAX_LON_INCL),\n        max(minLat - TOLERANCE, MIN_LAT_INCL), min(maxLat + TOLERANCE, MAX_LAT_INCL));\n  }\n\n","bugFix":null,"bugIntro":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca8abb1a4010d2a9e71b0162d3600e898a8a4f56","date":1458685284,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#polyToBBox(double[],double[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#polyToBBox(double[],double[]).mjava","sourceNew":"  /** Compute Bounding Box for a polygon using WGS-84 parameters */\n  public static GeoRect polyToBBox(double[] polyLats, double[] polyLons) {\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      minLat = min(polyLats[i], minLat);\n      maxLat = max(polyLats[i], maxLat);\n      minLon = min(polyLons[i], minLon);\n      maxLon = max(polyLons[i], maxLon);\n    }\n    // expand bounding box by TOLERANCE factor to handle round-off error\n    return new GeoRect(max(minLat - TOLERANCE, MIN_LAT_INCL), min(maxLat + TOLERANCE, MAX_LAT_INCL),\n                       max(minLon - TOLERANCE, MIN_LON_INCL), min(maxLon + TOLERANCE, MAX_LON_INCL));\n  }\n\n","sourceOld":"  /** Compute Bounding Box for a polygon using WGS-84 parameters */\n  public static GeoRect polyToBBox(double[] polyLats, double[] polyLons) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = min(polyLons[i], minLon);\n      maxLon = max(polyLons[i], maxLon);\n      minLat = min(polyLats[i], minLat);\n      maxLat = max(polyLats[i], maxLat);\n    }\n    // expand bounding box by TOLERANCE factor to handle round-off error\n    return new GeoRect(max(minLat - TOLERANCE, MIN_LAT_INCL), min(maxLat + TOLERANCE, MAX_LAT_INCL),\n                       max(minLon - TOLERANCE, MIN_LON_INCL), min(maxLon + TOLERANCE, MAX_LON_INCL));\n  }\n\n","bugFix":["937923083e4d137932336fc80f3d78758ff698a6","e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"bugIntro":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0da288484d638cec72e8fc33363e4c0532d35ff0","date":1459115234,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#polyToBBox(double[],double[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#polyToBBox(double[],double[]).mjava","sourceNew":"  /** Compute Bounding Box for a polygon using WGS-84 parameters */\n  public static GeoRect polyToBBox(double[] polyLats, double[] polyLons) {\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      checkLatitude(polyLats[i]);\n      checkLongitude(polyLons[i]);\n      minLat = min(polyLats[i], minLat);\n      maxLat = max(polyLats[i], maxLat);\n      minLon = min(polyLons[i], minLon);\n      maxLon = max(polyLons[i], maxLon);\n    }\n    // expand bounding box by TOLERANCE factor to handle round-off error\n    return new GeoRect(max(minLat - TOLERANCE, MIN_LAT_INCL), min(maxLat + TOLERANCE, MAX_LAT_INCL),\n                       max(minLon - TOLERANCE, MIN_LON_INCL), min(maxLon + TOLERANCE, MAX_LON_INCL));\n  }\n\n","sourceOld":"  /** Compute Bounding Box for a polygon using WGS-84 parameters */\n  public static GeoRect polyToBBox(double[] polyLats, double[] polyLons) {\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      minLat = min(polyLats[i], minLat);\n      maxLat = max(polyLats[i], maxLat);\n      minLon = min(polyLons[i], minLon);\n      maxLon = max(polyLons[i], maxLon);\n    }\n    // expand bounding box by TOLERANCE factor to handle round-off error\n    return new GeoRect(max(minLat - TOLERANCE, MIN_LAT_INCL), min(maxLat + TOLERANCE, MAX_LAT_INCL),\n                       max(minLon - TOLERANCE, MIN_LON_INCL), min(maxLon + TOLERANCE, MAX_LON_INCL));\n  }\n\n","bugFix":null,"bugIntro":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad0d09e969f4763b0df4230f8e3f74357872a4e4","date":1459188769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#polyToBBox(double[],double[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#polyToBBox(double[],double[]).mjava","sourceNew":"  /** Compute Bounding Box for a polygon using WGS-84 parameters */\n  public static GeoRect polyToBBox(double[] polyLats, double[] polyLons) {\n    checkPolygon(polyLats, polyLons);\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      minLat = min(polyLats[i], minLat);\n      maxLat = max(polyLats[i], maxLat);\n      minLon = min(polyLons[i], minLon);\n      maxLon = max(polyLons[i], maxLon);\n    }\n    return new GeoRect(minLat, maxLat, minLon, maxLon);\n  }\n\n","sourceOld":"  /** Compute Bounding Box for a polygon using WGS-84 parameters */\n  public static GeoRect polyToBBox(double[] polyLats, double[] polyLons) {\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      checkLatitude(polyLats[i]);\n      checkLongitude(polyLons[i]);\n      minLat = min(polyLats[i], minLat);\n      maxLat = max(polyLats[i], maxLat);\n      minLon = min(polyLons[i], minLon);\n      maxLon = max(polyLons[i], maxLon);\n    }\n    // expand bounding box by TOLERANCE factor to handle round-off error\n    return new GeoRect(max(minLat - TOLERANCE, MIN_LAT_INCL), min(maxLat + TOLERANCE, MAX_LAT_INCL),\n                       max(minLon - TOLERANCE, MIN_LON_INCL), min(maxLon + TOLERANCE, MAX_LON_INCL));\n  }\n\n","bugFix":["04995b00da1e08edb88b14c5a9789d741de5c51d","ca8abb1a4010d2a9e71b0162d3600e898a8a4f56","ec996bf2daff09d61a876319e8fae4aebbea58e3","e91b7d9f5000faefb0e81b98e76ad5b9463283e8","0da288484d638cec72e8fc33363e4c0532d35ff0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95ddcac9ac08381985af6eac8f8b77ba881d4ad8","date":1459477726,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/Polygon#getBoundingBox(Polygon[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#polyToBBox(double[],double[]).mjava","sourceNew":"  /** Returns the bounding box over an array of polygons */\n  public static GeoRect getBoundingBox(Polygon[] polygons) {\n    // compute bounding box\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n\n    for (int i = 0;i < polygons.length; i++) {\n      minLat = Math.min(polygons[i].minLat, minLat);\n      maxLat = Math.max(polygons[i].maxLat, maxLat);\n      minLon = Math.min(polygons[i].minLon, minLon);\n      maxLon = Math.max(polygons[i].maxLon, maxLon);\n    }\n    \n    return new GeoRect(minLat, maxLat, minLon, maxLon);\n  }\n\n","sourceOld":"  /** Compute Bounding Box for a polygon using WGS-84 parameters */\n  public static GeoRect polyToBBox(double[] polyLats, double[] polyLons) {\n    checkPolygon(polyLats, polyLons);\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      minLat = min(polyLats[i], minLat);\n      maxLat = max(polyLats[i], maxLat);\n      minLon = min(polyLons[i], minLon);\n      maxLon = max(polyLons[i], maxLon);\n    }\n    return new GeoRect(minLat, maxLat, minLon, maxLon);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"ca8abb1a4010d2a9e71b0162d3600e898a8a4f56":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["937923083e4d137932336fc80f3d78758ff698a6"],"0da288484d638cec72e8fc33363e4c0532d35ff0":["ca8abb1a4010d2a9e71b0162d3600e898a8a4f56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["0da288484d638cec72e8fc33363e4c0532d35ff0"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"]},"commit2Childs":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca8abb1a4010d2a9e71b0162d3600e898a8a4f56":["0da288484d638cec72e8fc33363e4c0532d35ff0"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["ca8abb1a4010d2a9e71b0162d3600e898a8a4f56"],"0da288484d638cec72e8fc33363e4c0532d35ff0":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"],"937923083e4d137932336fc80f3d78758ff698a6":["ec996bf2daff09d61a876319e8fae4aebbea58e3","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}