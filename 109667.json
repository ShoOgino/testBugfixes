{"path":"src/test/org/apache/lucene/search/spans/TestSpansAdvanced#assertHits(Hits,String,String[],float[]).mjava","commits":[{"id":"4cf220eb1cc65fcd52b78436bd9c17eb4c4aabf2","date":1117758167,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestSpansAdvanced#assertHits(Hits,String,String[],float[]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Checks to see if the hits are what we expected.\n     *\n     * @param hits the search results\n     * @param description the description of the search\n     * @param expectedIds the expected document ids of the hits\n     * @param expectedScores the expected scores of the hits\n     *\n     * @throws IOException\n     */\n    protected void assertHits(final Hits hits, final String description, final String[] expectedIds,\n            final float[] expectedScores) throws IOException {\n\n        // display the hits\n        System.out.println(hits.length() + \" hits for search: \\\"\" + description + '\\\"');\n        for (int i = 0; i < hits.length(); i++) {\n            System.out.println(\"  \" + FIELD_ID + ':' + hits.doc(i).get(FIELD_ID) + \" (score:\" + hits.score(i) + ')');\n        }\n\n        // did we get the hits we expected\n        assertEquals(expectedIds.length, hits.length());\n        for (int i = 0; i < hits.length(); i++) {\n            assertTrue(expectedIds[i].equals(hits.doc(i).get(FIELD_ID)));\n            assertEquals(expectedScores[i], hits.score(i), 0);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37f9ccf8fd3be1fdb41000047980afa555a5b68a","date":1120072375,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestSpansAdvanced#assertHits(Hits,String,String[],float[]).mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpansAdvanced#assertHits(Hits,String,String[],float[]).mjava","sourceNew":"    /**\n     * Checks to see if the hits are what we expected.\n     *\n     * @param hits the search results\n     * @param description the description of the search\n     * @param expectedIds the expected document ids of the hits\n     * @param expectedScores the expected scores of the hits\n     *\n     * @throws IOException\n     */\n    protected void assertHits(final Hits hits, final String description, final String[] expectedIds,\n            final float[] expectedScores) throws IOException {\n\n        // display the hits\n        /*System.out.println(hits.length() + \" hits for search: \\\"\" + description + '\\\"');\n        for (int i = 0; i < hits.length(); i++) {\n            System.out.println(\"  \" + FIELD_ID + ':' + hits.doc(i).get(FIELD_ID) + \" (score:\" + hits.score(i) + ')');\n        }*/\n\n        // did we get the hits we expected\n        assertEquals(expectedIds.length, hits.length());\n        for (int i = 0; i < hits.length(); i++) {\n            assertTrue(expectedIds[i].equals(hits.doc(i).get(FIELD_ID)));\n            assertEquals(expectedScores[i], hits.score(i), 0);\n        }\n    }\n\n","sourceOld":"    /**\n     * Checks to see if the hits are what we expected.\n     *\n     * @param hits the search results\n     * @param description the description of the search\n     * @param expectedIds the expected document ids of the hits\n     * @param expectedScores the expected scores of the hits\n     *\n     * @throws IOException\n     */\n    protected void assertHits(final Hits hits, final String description, final String[] expectedIds,\n            final float[] expectedScores) throws IOException {\n\n        // display the hits\n        System.out.println(hits.length() + \" hits for search: \\\"\" + description + '\\\"');\n        for (int i = 0; i < hits.length(); i++) {\n            System.out.println(\"  \" + FIELD_ID + ':' + hits.doc(i).get(FIELD_ID) + \" (score:\" + hits.score(i) + ')');\n        }\n\n        // did we get the hits we expected\n        assertEquals(expectedIds.length, hits.length());\n        for (int i = 0; i < hits.length(); i++) {\n            assertTrue(expectedIds[i].equals(hits.doc(i).get(FIELD_ID)));\n            assertEquals(expectedScores[i], hits.score(i), 0);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c62564d5adf82d1fc178ea3e881841b5ae83a94","date":1144164358,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestSpansAdvanced#assertHits(Searcher,Query,String,String[],float[]).mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpansAdvanced#assertHits(Hits,String,String[],float[]).mjava","sourceNew":"    /**\n     * Checks to see if the hits are what we expected.\n     *\n     * @param query the query to execute\n     * @param description the description of the search\n     * @param expectedIds the expected document ids of the hits\n     * @param expectedScores the expected scores of the hits\n     *\n     * @throws IOException\n     */\n    protected static void assertHits(Searcher s, Query query, final String description, final String[] expectedIds,\n            final float[] expectedScores) throws IOException {\n        final float tolerance = 1e-5f;\n\n        // Hits hits = searcher.search(query);\n        // hits normalizes and throws things off if one score is greater than 1.0\n        TopDocs topdocs = s.search(query,null,10000);\n\n        /*****\n        // display the hits\n        System.out.println(hits.length() + \" hits for search: \\\"\" + description + '\\\"');\n        for (int i = 0; i < hits.length(); i++) {\n            System.out.println(\"  \" + FIELD_ID + ':' + hits.doc(i).get(FIELD_ID) + \" (score:\" + hits.score(i) + ')');\n        }\n        *****/\n\n        // did we get the hits we expected\n        assertEquals(expectedIds.length, topdocs.totalHits);\n        for (int i = 0; i < topdocs.totalHits; i++) {\n            //System.out.println(i + \" exp: \" + expectedIds[i]);\n            //System.out.println(i + \" field: \" + hits.doc(i).get(FIELD_ID));\n\n            int id = topdocs.scoreDocs[i].doc;\n            float score = topdocs.scoreDocs[i].score;\n            Document doc = s.doc(id);\n            assertEquals(expectedIds[i], doc.get(FIELD_ID));\n            boolean scoreEq = Math.abs(expectedScores[i] - score) < tolerance;\n            if (!scoreEq) {\n              System.out.println(i + \" warning, expected score: \" + expectedScores[i] + \", actual \" + score);\n              System.out.println(s.explain(query,id));\n            }\n            assertEquals(expectedScores[i], score, tolerance);\n            assertEquals(s.explain(query,id).getValue(), score, tolerance);\n        }\n    }\n\n","sourceOld":"    /**\n     * Checks to see if the hits are what we expected.\n     *\n     * @param hits the search results\n     * @param description the description of the search\n     * @param expectedIds the expected document ids of the hits\n     * @param expectedScores the expected scores of the hits\n     *\n     * @throws IOException\n     */\n    protected void assertHits(final Hits hits, final String description, final String[] expectedIds,\n            final float[] expectedScores) throws IOException {\n\n        // display the hits\n        /*System.out.println(hits.length() + \" hits for search: \\\"\" + description + '\\\"');\n        for (int i = 0; i < hits.length(); i++) {\n            System.out.println(\"  \" + FIELD_ID + ':' + hits.doc(i).get(FIELD_ID) + \" (score:\" + hits.score(i) + ')');\n        }*/\n\n        // did we get the hits we expected\n        assertEquals(expectedIds.length, hits.length());\n        for (int i = 0; i < hits.length(); i++) {\n            assertTrue(expectedIds[i].equals(hits.doc(i).get(FIELD_ID)));\n            assertEquals(expectedScores[i], hits.score(i), 0);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37f9ccf8fd3be1fdb41000047980afa555a5b68a":["4cf220eb1cc65fcd52b78436bd9c17eb4c4aabf2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cf220eb1cc65fcd52b78436bd9c17eb4c4aabf2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c62564d5adf82d1fc178ea3e881841b5ae83a94"],"7c62564d5adf82d1fc178ea3e881841b5ae83a94":["37f9ccf8fd3be1fdb41000047980afa555a5b68a"]},"commit2Childs":{"37f9ccf8fd3be1fdb41000047980afa555a5b68a":["7c62564d5adf82d1fc178ea3e881841b5ae83a94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf220eb1cc65fcd52b78436bd9c17eb4c4aabf2"],"4cf220eb1cc65fcd52b78436bd9c17eb4c4aabf2":["37f9ccf8fd3be1fdb41000047980afa555a5b68a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7c62564d5adf82d1fc178ea3e881841b5ae83a94":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}