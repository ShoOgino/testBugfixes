{"path":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    NamedList res = new SimpleOrderedMap();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n      res.add(\"facet_fields\", getFacetFieldCounts());\n      res.add(\"facet_dates\", getFacetDateCounts());\n      \n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":null,"sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    NamedList res = new SimpleOrderedMap();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n      res.add(\"facet_fields\", getFacetFieldCounts());\n      res.add(\"facet_dates\", getFacetDateCounts());\n      \n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    NamedList res = new SimpleOrderedMap();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n      res.add(\"facet_fields\", getFacetFieldCounts());\n      res.add(\"facet_dates\", getFacetDateCounts());\n      \n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    NamedList res = new SimpleOrderedMap();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n      res.add(\"facet_fields\", getFacetFieldCounts());\n      res.add(\"facet_dates\", getFacetDateCounts());\n      \n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    NamedList res = new SimpleOrderedMap();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n      res.add(\"facet_fields\", getFacetFieldCounts());\n      res.add(\"facet_dates\", getFacetDateCounts());\n      \n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"432127b09840b2b70209e404d242e7029421ef0a","date":1280433941,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    NamedList res = new SimpleOrderedMap();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n      res.add(\"facet_fields\", getFacetFieldCounts());\n      res.add(\"facet_dates\", getFacetDateCounts());\n      res.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    NamedList res = new SimpleOrderedMap();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n      res.add(\"facet_fields\", getFacetFieldCounts());\n      res.add(\"facet_dates\", getFacetDateCounts());\n      \n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["ef02613bb5b67b98ca5caf41e8d6e016a0158923"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef02613bb5b67b98ca5caf41e8d6e016a0158923","date":1283980033,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    NamedList res = new SimpleOrderedMap();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n      res.add(\"facet_fields\", getFacetFieldCounts());\n      res.add(\"facet_dates\", getFacetDateCounts());\n      res.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","bugFix":["4145b7b13874de95211223a6edb648da8794a688","d1b4f9f023bf5098df34505adf1ed91daa67c239","432127b09840b2b70209e404d242e7029421ef0a","487bcb36f5ba67741dd4dc6ebea3dc32420c4fb1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    NamedList res = new SimpleOrderedMap();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n      res.add(\"facet_fields\", getFacetFieldCounts());\n      res.add(\"facet_dates\", getFacetDateCounts());\n      \n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"755f2f419306d7297c8feee10d1897addf4b2dd0","date":1294442354,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef02613bb5b67b98ca5caf41e8d6e016a0158923":["432127b09840b2b70209e404d242e7029421ef0a"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["755f2f419306d7297c8feee10d1897addf4b2dd0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"432127b09840b2b70209e404d242e7029421ef0a":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","ef02613bb5b67b98ca5caf41e8d6e016a0158923"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["755f2f419306d7297c8feee10d1897addf4b2dd0"],"755f2f419306d7297c8feee10d1897addf4b2dd0":["ef02613bb5b67b98ca5caf41e8d6e016a0158923"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ef02613bb5b67b98ca5caf41e8d6e016a0158923","755f2f419306d7297c8feee10d1897addf4b2dd0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["755f2f419306d7297c8feee10d1897addf4b2dd0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","755f2f419306d7297c8feee10d1897addf4b2dd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"ef02613bb5b67b98ca5caf41e8d6e016a0158923":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","755f2f419306d7297c8feee10d1897addf4b2dd0","29ef99d61cda9641b6250bf9567329a6e65f901d"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"432127b09840b2b70209e404d242e7029421ef0a":["ef02613bb5b67b98ca5caf41e8d6e016a0158923"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"1da8d55113b689b06716246649de6f62430f15c0":["432127b09840b2b70209e404d242e7029421ef0a","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"755f2f419306d7297c8feee10d1897addf4b2dd0":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}