{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testDeleteUsedPolicy().mjava","commits":[{"id":"b514c6ae79cf71bd7d613f4639007dd37dc3a192","date":1501725016,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testDeleteUsedPolicy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeleteUsedPolicy() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand = \"{'set-policy': {\" +\n        \"    'nodelete':[\" +\n        \"      {'nodeRole':'overseer', 'replica':0}]}}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand));\n    CollectionAdminRequest.createCollection(\"COLL1\", \"conf\", 1, 1)\n        .setPolicy(\"nodelete\")\n        .process(cluster.getSolrClient());\n    String removePolicyCommand = \"{remove-policy : nodelete}\";\n    createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    try {\n      solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand));\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"is being used by collection\"));\n    }\n    solrClient.request(CollectionAdminRequest.deleteCollection(\"COLL1\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3590d254d013266ac3849fae45974e747f7f576","date":1501767095,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testDeleteUsedPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testDeleteUsedPolicy().mjava","sourceNew":"  @Test\n  public void testDeleteUsedPolicy() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand = \"{'set-policy': {\" +\n        \"    'nodelete':[\" +\n        \"      {'nodeRole':'overseer', 'replica':0}]}}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand));\n    CollectionAdminRequest.createCollection(\"COLL1\", \"conf\", 1, 1)\n        .setPolicy(\"nodelete\")\n        .process(cluster.getSolrClient());\n    String removePolicyCommand = \"{remove-policy : nodelete}\";\n    createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    try {\n      solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand));\n      fail(\"should have failed\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(), true, \"error/errorMessages[0]/errorMessages[0]\"))\n          .contains(\"is being used by collection\"));\n    } catch (Exception e) {\n      fail(\"Only RemoteExecutionException expected\");\n    }\n    solrClient.request(CollectionAdminRequest.deleteCollection(\"COLL1\"));\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteUsedPolicy() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand = \"{'set-policy': {\" +\n        \"    'nodelete':[\" +\n        \"      {'nodeRole':'overseer', 'replica':0}]}}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand));\n    CollectionAdminRequest.createCollection(\"COLL1\", \"conf\", 1, 1)\n        .setPolicy(\"nodelete\")\n        .process(cluster.getSolrClient());\n    String removePolicyCommand = \"{remove-policy : nodelete}\";\n    createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    try {\n      solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand));\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"is being used by collection\"));\n    }\n    solrClient.request(CollectionAdminRequest.deleteCollection(\"COLL1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c","date":1501832890,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testDeleteUsedPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testDeleteUsedPolicy().mjava","sourceNew":"  @Test\n  public void testDeleteUsedPolicy() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand = \"{'set-policy': {\" +\n        \"    'nodelete':[\" +\n        \"      {'nodeRole':'overseer', 'replica':0}]}}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand));\n    CollectionAdminRequest.createCollection(\"COLL1\", \"conf\", 1, 1)\n        .setPolicy(\"nodelete\")\n        .process(cluster.getSolrClient());\n    String removePolicyCommand = \"{remove-policy : nodelete}\";\n    createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    try {\n      solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand));\n      fail(\"should have failed\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"))\n          .contains(\"is being used by collection\"));\n    } catch (Exception e) {\n      fail(\"Only RemoteExecutionException expected\");\n    }\n    solrClient.request(CollectionAdminRequest.deleteCollection(\"COLL1\"));\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteUsedPolicy() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand = \"{'set-policy': {\" +\n        \"    'nodelete':[\" +\n        \"      {'nodeRole':'overseer', 'replica':0}]}}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand));\n    CollectionAdminRequest.createCollection(\"COLL1\", \"conf\", 1, 1)\n        .setPolicy(\"nodelete\")\n        .process(cluster.getSolrClient());\n    String removePolicyCommand = \"{remove-policy : nodelete}\";\n    createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    try {\n      solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand));\n      fail(\"should have failed\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(), true, \"error/errorMessages[0]/errorMessages[0]\"))\n          .contains(\"is being used by collection\"));\n    } catch (Exception e) {\n      fail(\"Only RemoteExecutionException expected\");\n    }\n    solrClient.request(CollectionAdminRequest.deleteCollection(\"COLL1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testDeleteUsedPolicy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeleteUsedPolicy() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand = \"{'set-policy': {\" +\n        \"    'nodelete':[\" +\n        \"      {'nodeRole':'overseer', 'replica':0}]}}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand));\n    CollectionAdminRequest.createCollection(\"COLL1\", \"conf\", 1, 1)\n        .setPolicy(\"nodelete\")\n        .process(cluster.getSolrClient());\n    String removePolicyCommand = \"{remove-policy : nodelete}\";\n    createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    try {\n      solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand));\n      fail(\"should have failed\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"))\n          .contains(\"is being used by collection\"));\n    } catch (Exception e) {\n      fail(\"Only RemoteExecutionException expected\");\n    }\n    solrClient.request(CollectionAdminRequest.deleteCollection(\"COLL1\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testDeleteUsedPolicy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeleteUsedPolicy() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand = \"{'set-policy': {\" +\n        \"    'nodelete':[\" +\n        \"      {'nodeRole':'overseer', 'replica':0}]}}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand));\n    CollectionAdminRequest.createCollection(\"COLL1\", \"conf\", 1, 1)\n        .setPolicy(\"nodelete\")\n        .process(cluster.getSolrClient());\n    String removePolicyCommand = \"{remove-policy : nodelete}\";\n    createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    try {\n      solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand));\n      fail(\"should have failed\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"))\n          .contains(\"is being used by collection\"));\n    } catch (Exception e) {\n      fail(\"Only RemoteExecutionException expected\");\n    }\n    solrClient.request(CollectionAdminRequest.deleteCollection(\"COLL1\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testDeleteUsedPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testDeleteUsedPolicy().mjava","sourceNew":"  @Test\n  public void testDeleteUsedPolicy() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand = \"{'set-policy': {\" +\n        \"    'nodelete':[\" +\n        \"      {'nodeRole':'overseer', 'replica':0}]}}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand));\n    CollectionAdminRequest.createCollection(\"COLL1\", \"conf\", 1, 1)\n        .setPolicy(\"nodelete\")\n        .process(cluster.getSolrClient());\n    String removePolicyCommand = \"{remove-policy : nodelete}\";\n    AutoScalingRequest.create(SolrRequest.METHOD.POST, removePolicyCommand);\n    try {\n      solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, removePolicyCommand));\n      fail(\"should have failed\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"))\n          .contains(\"is being used by collection\"));\n    } catch (Exception e) {\n      fail(\"Only RemoteExecutionException expected\");\n    }\n    solrClient.request(CollectionAdminRequest.deleteCollection(\"COLL1\"));\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteUsedPolicy() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand = \"{'set-policy': {\" +\n        \"    'nodelete':[\" +\n        \"      {'nodeRole':'overseer', 'replica':0}]}}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand));\n    CollectionAdminRequest.createCollection(\"COLL1\", \"conf\", 1, 1)\n        .setPolicy(\"nodelete\")\n        .process(cluster.getSolrClient());\n    String removePolicyCommand = \"{remove-policy : nodelete}\";\n    createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    try {\n      solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand));\n      fail(\"should have failed\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"))\n          .contains(\"is being used by collection\"));\n    } catch (Exception e) {\n      fail(\"Only RemoteExecutionException expected\");\n    }\n    solrClient.request(CollectionAdminRequest.deleteCollection(\"COLL1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testDeleteUsedPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testDeleteUsedPolicy().mjava","sourceNew":"  @Test\n  public void testDeleteUsedPolicy() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand = \"{'set-policy': {\" +\n        \"    'nodelete':[\" +\n        \"      {'nodeRole':'overseer', 'replica':0}]}}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand));\n    CollectionAdminRequest.createCollection(\"COLL1\", \"conf\", 1, 1)\n        .setPolicy(\"nodelete\")\n        .process(cluster.getSolrClient());\n    String removePolicyCommand = \"{remove-policy : nodelete}\";\n    AutoScalingRequest.create(SolrRequest.METHOD.POST, removePolicyCommand);\n    try {\n      solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, removePolicyCommand));\n      fail(\"should have failed\");\n    } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"))\n          .contains(\"is being used by collection\"));\n    } catch (Exception e) {\n      fail(\"Only RemoteExecutionException expected\");\n    }\n    solrClient.request(CollectionAdminRequest.deleteCollection(\"COLL1\"));\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteUsedPolicy() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand = \"{'set-policy': {\" +\n        \"    'nodelete':[\" +\n        \"      {'nodeRole':'overseer', 'replica':0}]}}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand));\n    CollectionAdminRequest.createCollection(\"COLL1\", \"conf\", 1, 1)\n        .setPolicy(\"nodelete\")\n        .process(cluster.getSolrClient());\n    String removePolicyCommand = \"{remove-policy : nodelete}\";\n    AutoScalingRequest.create(SolrRequest.METHOD.POST, removePolicyCommand);\n    try {\n      solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, removePolicyCommand));\n      fail(\"should have failed\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"))\n          .contains(\"is being used by collection\"));\n    } catch (Exception e) {\n      fail(\"Only RemoteExecutionException expected\");\n    }\n    solrClient.request(CollectionAdminRequest.deleteCollection(\"COLL1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testDeleteUsedPolicy().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testDeleteUsedPolicy() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand = \"{'set-policy': {\" +\n        \"    'nodelete':[\" +\n        \"      {'nodeRole':'overseer', 'replica':0}]}}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand));\n    CollectionAdminRequest.createCollection(\"COLL1\", \"conf\", 1, 1)\n        .setPolicy(\"nodelete\")\n        .process(cluster.getSolrClient());\n    String removePolicyCommand = \"{remove-policy : nodelete}\";\n    AutoScalingRequest.create(SolrRequest.METHOD.POST, removePolicyCommand);\n    try {\n      solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, removePolicyCommand));\n      fail(\"should have failed\");\n    } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"))\n          .contains(\"is being used by collection\"));\n    } catch (Exception e) {\n      fail(\"Only RemoteExecutionException expected\");\n    }\n    solrClient.request(CollectionAdminRequest.deleteCollection(\"COLL1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c"],"3f504512a03d978990cbff30db0522b354e846db":["db96734b79e26d948b59f68bd4564c4836a71acf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c":["e3590d254d013266ac3849fae45974e747f7f576"],"b514c6ae79cf71bd7d613f4639007dd37dc3a192":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db96734b79e26d948b59f68bd4564c4836a71acf":["89948af0461fead48f44ba8fb7866f107ce83f22"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"89948af0461fead48f44ba8fb7866f107ce83f22":["560c18d71dad43d675158783c3840f8c80d6d39c"],"e3590d254d013266ac3849fae45974e747f7f576":["b514c6ae79cf71bd7d613f4639007dd37dc3a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","b514c6ae79cf71bd7d613f4639007dd37dc3a192","560c18d71dad43d675158783c3840f8c80d6d39c"],"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"b514c6ae79cf71bd7d613f4639007dd37dc3a192":["e3590d254d013266ac3849fae45974e747f7f576"],"db96734b79e26d948b59f68bd4564c4836a71acf":["3f504512a03d978990cbff30db0522b354e846db"],"560c18d71dad43d675158783c3840f8c80d6d39c":["89948af0461fead48f44ba8fb7866f107ce83f22"],"89948af0461fead48f44ba8fb7866f107ce83f22":["db96734b79e26d948b59f68bd4564c4836a71acf"],"e3590d254d013266ac3849fae45974e747f7f576":["5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}