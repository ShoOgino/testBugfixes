{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        return Double.longBitsToDouble(arr.get(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = doubleVal(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    final NumericDocValues values = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new DoubleDocValues(this) {\n      int lastDocID;\n\n      private double getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = values.docID();\n        if (doc > curDocID) {\n          curDocID = values.advance(doc);\n        }\n        if (doc == curDocID) {\n          return Double.longBitsToDouble(values.longValue());\n        } else {\n          return 0.0;\n        }\n      }\n      \n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return doc == values.docID();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = exists(doc);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        return Double.longBitsToDouble(arr.get(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = doubleVal(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    final NumericDocValues values = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new DoubleDocValues(this) {\n      int lastDocID;\n\n      private double getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = values.docID();\n        if (doc > curDocID) {\n          curDocID = values.advance(doc);\n        }\n        if (doc == curDocID) {\n          return Double.longBitsToDouble(values.longValue());\n        } else {\n          return 0.0;\n        }\n      }\n      \n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return doc == values.docID();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = exists(doc);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        return Double.longBitsToDouble(arr.get(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = doubleVal(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    final NumericDocValues values = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new DoubleDocValues(this) {\n      int lastDocID;\n\n      private double getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = values.docID();\n        if (doc > curDocID) {\n          curDocID = values.advance(doc);\n        }\n        if (doc == curDocID) {\n          return Double.longBitsToDouble(values.longValue());\n        } else {\n          return 0.0;\n        }\n      }\n      \n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return doc == values.docID();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = exists(doc);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        return Double.longBitsToDouble(arr.get(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = doubleVal(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cc453cd9f503b2ba830b15afa27d11dc109c6af","date":1486406649,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    final NumericDocValues values = getNumericDocValues(context, readerContext);\n\n    return new DoubleDocValues(this) {\n      int lastDocID;\n\n      private double getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = values.docID();\n        if (doc > curDocID) {\n          curDocID = values.advance(doc);\n        }\n        if (doc == curDocID) {\n          return Double.longBitsToDouble(values.longValue());\n        } else {\n          return 0.0;\n        }\n      }\n      \n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return doc == values.docID();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = exists(doc);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    final NumericDocValues values = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new DoubleDocValues(this) {\n      int lastDocID;\n\n      private double getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = values.docID();\n        if (doc > curDocID) {\n          curDocID = values.advance(doc);\n        }\n        if (doc == curDocID) {\n          return Double.longBitsToDouble(values.longValue());\n        } else {\n          return 0.0;\n        }\n      }\n      \n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return doc == values.docID();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = exists(doc);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":5,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource#getValues(Map[Object,Object],LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n\n    final NumericDocValues values = getNumericDocValues(context, readerContext);\n\n    return new DoubleDocValues(this) {\n      int lastDocID;\n\n      private double getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = values.docID();\n        if (doc > curDocID) {\n          curDocID = values.advance(doc);\n        }\n        if (doc == curDocID) {\n          return Double.longBitsToDouble(values.longValue());\n        } else {\n          return 0.0;\n        }\n      }\n      \n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return doc == values.docID();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = exists(doc);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    final NumericDocValues values = getNumericDocValues(context, readerContext);\n\n    return new DoubleDocValues(this) {\n      int lastDocID;\n\n      private double getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = values.docID();\n        if (doc > curDocID) {\n          curDocID = values.advance(doc);\n        }\n        if (doc == curDocID) {\n          return Double.longBitsToDouble(values.longValue());\n        } else {\n          return 0.0;\n        }\n      }\n      \n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return doc == values.docID();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = exists(doc);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7cc453cd9f503b2ba830b15afa27d11dc109c6af":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c9fb5f46e264daf5ba3860defe623a89d202dd87","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["7cc453cd9f503b2ba830b15afa27d11dc109c6af"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c9fb5f46e264daf5ba3860defe623a89d202dd87","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"7cc453cd9f503b2ba830b15afa27d11dc109c6af":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7cc453cd9f503b2ba830b15afa27d11dc109c6af","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}