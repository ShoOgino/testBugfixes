{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","sourceNew":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.  This setting refers to the number of running terms,\n   * not to the number of different terms.<p/>\n   * <strong>Note:</strong> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than {@link #DEFAULT_MAX_FIELD_LENGTH} terms\n   * will be indexed for a field.\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n    docWriter.setMaxFieldLength(maxFieldLength);\n    if (infoStream != null)\n      message(\"setMaxFieldLength \" + maxFieldLength);\n  }\n\n","sourceOld":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.  This setting refers to the number of running terms,\n   * not to the number of different terms.<p/>\n   * <strong>Note:</strong> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than {@link #DEFAULT_MAX_FIELD_LENGTH} terms\n   * will be indexed for a field.\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n    docWriter.setMaxFieldLength(maxFieldLength);\n    if (infoStream != null)\n      message(\"setMaxFieldLength \" + maxFieldLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.  This setting refers to the number of running terms,\n   * not to the number of different terms.<p/>\n   * <strong>Note:</strong> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than {@link #DEFAULT_MAX_FIELD_LENGTH} terms\n   * will be indexed for a field.\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n    docWriter.setMaxFieldLength(maxFieldLength);\n    if (infoStream != null)\n      message(\"setMaxFieldLength \" + maxFieldLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}