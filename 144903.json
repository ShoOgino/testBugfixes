{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#block(int).mjava","commits":[{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#block(int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#block(int).mjava","sourceNew":"  private int block(int docID) {\n    int lo = 0, hi = docBases.length - 1;\n    while (lo <= hi) {\n      final int mid = (lo + hi) >>> 1;\n      final int midValue = docBases[mid];\n      if (midValue == docID) {\n        return mid;\n      } else if (midValue < docID) {\n        lo = mid + 1;\n      } else {\n        hi = mid - 1;\n      }\n    }\n    return hi;\n  }\n\n","sourceOld":"  private int block(int docID) {\n    int lo = 0, hi = docBases.length - 1;\n    while (lo <= hi) {\n      final int mid = (lo + hi) >>> 1;\n      final int midValue = docBases[mid];\n      if (midValue == docID) {\n        return mid;\n      } else if (midValue < docID) {\n        lo = mid + 1;\n      } else {\n        hi = mid - 1;\n      }\n    }\n    return hi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#block(int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#block(int).mjava","sourceNew":"  private int block(int docID) {\n    int lo = 0, hi = docBases.length - 1;\n    while (lo <= hi) {\n      final int mid = (lo + hi) >>> 1;\n      final int midValue = docBases[mid];\n      if (midValue == docID) {\n        return mid;\n      } else if (midValue < docID) {\n        lo = mid + 1;\n      } else {\n        hi = mid - 1;\n      }\n    }\n    return hi;\n  }\n\n","sourceOld":"  private int block(int docID) {\n    int lo = 0, hi = docBases.length - 1;\n    while (lo <= hi) {\n      final int mid = (lo + hi) >>> 1;\n      final int midValue = docBases[mid];\n      if (midValue == docID) {\n        return mid;\n      } else if (midValue < docID) {\n        lo = mid + 1;\n      } else {\n        hi = mid - 1;\n      }\n    }\n    return hi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a4487b07c49a1861c05720e04624826ecbe9fa","date":1580924108,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LegacyFieldsIndexReader#block(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#block(int).mjava","sourceNew":"  private int block(int docID) {\n    int lo = 0, hi = docBases.length - 1;\n    while (lo <= hi) {\n      final int mid = (lo + hi) >>> 1;\n      final int midValue = docBases[mid];\n      if (midValue == docID) {\n        return mid;\n      } else if (midValue < docID) {\n        lo = mid + 1;\n      } else {\n        hi = mid - 1;\n      }\n    }\n    return hi;\n  }\n\n","sourceOld":"  private int block(int docID) {\n    int lo = 0, hi = docBases.length - 1;\n    while (lo <= hi) {\n      final int mid = (lo + hi) >>> 1;\n      final int midValue = docBases[mid];\n      if (midValue == docID) {\n        return mid;\n      } else if (midValue < docID) {\n        lo = mid + 1;\n      } else {\n        hi = mid - 1;\n      }\n    }\n    return hi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70a4487b07c49a1861c05720e04624826ecbe9fa":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70a4487b07c49a1861c05720e04624826ecbe9fa"]},"commit2Childs":{"70a4487b07c49a1861c05720e04624826ecbe9fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["70a4487b07c49a1861c05720e04624826ecbe9fa","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}