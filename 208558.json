{"path":"lucene/core/src/java/org/apache/lucene/search/NRTManager#refreshIfNeeded(IndexSearcher).mjava","commits":[{"id":"c380c22ff3b659b2d7412a3335f853d354d17568","date":1329505731,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NRTManager#refreshIfNeeded(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected IndexSearcher refreshIfNeeded(IndexSearcher referenceToRefresh) throws IOException {\n    // Record gen as of when reopen started:\n    lastRefreshGen = writer.getAndIncrementGeneration();\n    final IndexReader r = referenceToRefresh.getIndexReader();\n    assert r instanceof DirectoryReader: \"searcher's IndexReader should be a DirectoryReader, but got \" + r;\n    final DirectoryReader dirReader = (DirectoryReader) r;\n    IndexSearcher newSearcher = null;\n    if (!dirReader.isCurrent()) {\n      final IndexReader newReader = DirectoryReader.openIfChanged(dirReader);\n      if (newReader != null) {\n        newSearcher = SearcherManager.getSearcher(searcherFactory, newReader);\n      }\n    }\n\n    return newSearcher;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2045b132a2396bb23dff28d2d9f349a6907d36e","date":1367513076,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/NRTManager#refreshIfNeeded(IndexSearcher).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected IndexSearcher refreshIfNeeded(IndexSearcher referenceToRefresh) throws IOException {\n    // Record gen as of when reopen started:\n    lastRefreshGen = writer.getAndIncrementGeneration();\n    final IndexReader r = referenceToRefresh.getIndexReader();\n    assert r instanceof DirectoryReader: \"searcher's IndexReader should be a DirectoryReader, but got \" + r;\n    final DirectoryReader dirReader = (DirectoryReader) r;\n    IndexSearcher newSearcher = null;\n    if (!dirReader.isCurrent()) {\n      final IndexReader newReader = DirectoryReader.openIfChanged(dirReader);\n      if (newReader != null) {\n        newSearcher = SearcherManager.getSearcher(searcherFactory, newReader);\n      }\n    }\n\n    return newSearcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2045b132a2396bb23dff28d2d9f349a6907d36e":["c380c22ff3b659b2d7412a3335f853d354d17568"],"c380c22ff3b659b2d7412a3335f853d354d17568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2045b132a2396bb23dff28d2d9f349a6907d36e"]},"commit2Childs":{"c2045b132a2396bb23dff28d2d9f349a6907d36e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c380c22ff3b659b2d7412a3335f853d354d17568":["c2045b132a2396bb23dff28d2d9f349a6907d36e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c380c22ff3b659b2d7412a3335f853d354d17568"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}