{"path":"solr/core/src/java/org/apache/solr/schema/PointType#parseCommaSeparatedList(String,int).mjava","commits":[{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#parseCommaSeparatedList(String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas,\n   * return a String array of length <i>dimension</i> containing the values.\n   *\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws SolrException if the dimension specified does not match the number found\n   */\n  public static String[] parseCommaSeparatedList(String externalVal, int dimension) throws SolrException {\n    //TODO: Should we support sparse vectors?\n    String[] out = new String[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = externalVal.trim();\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n        if (start == end) {\n          break;\n        }\n        out[i] = externalVal.substring(start, end);\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n        idx = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"]},"commit2Childs":{"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}