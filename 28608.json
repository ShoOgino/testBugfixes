{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#startBlock(BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame,boolean).mjava","commits":[{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#startBlock(BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame,boolean).mjava","pathOld":"/dev/null","sourceNew":"  void startBlock(BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame frame, boolean isFloor) {\n    totalBlockCount++;\n    if (isFloor) {\n      if (frame.fp == frame.fpOrig) {\n        floorBlockCount++;\n      }\n      floorSubBlockCount++;\n    } else {\n      nonFloorBlockCount++;\n    }\n\n    if (blockCountByPrefixLen.length <= frame.prefix) {\n      blockCountByPrefixLen = ArrayUtil.grow(blockCountByPrefixLen, 1+frame.prefix);\n    }\n    blockCountByPrefixLen[frame.prefix]++;\n    startBlockCount++;\n    totalBlockSuffixBytes += frame.suffixesReader.length();\n    totalBlockStatsBytes += frame.statsReader.length();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47d9d581b0b317125672636196fa3c73bbcabc56","date":1400178129,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#startBlock(FieldReader.SegmentTermsEnum.Frame,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#startBlock(BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame,boolean).mjava","sourceNew":"  void startBlock(FieldReader.SegmentTermsEnum.Frame frame, boolean isFloor) {\n    totalBlockCount++;\n    if (isFloor) {\n      if (frame.fp == frame.fpOrig) {\n        floorBlockCount++;\n      }\n      floorSubBlockCount++;\n    } else {\n      nonFloorBlockCount++;\n    }\n\n    if (blockCountByPrefixLen.length <= frame.prefix) {\n      blockCountByPrefixLen = ArrayUtil.grow(blockCountByPrefixLen, 1+frame.prefix);\n    }\n    blockCountByPrefixLen[frame.prefix]++;\n    startBlockCount++;\n    totalBlockSuffixBytes += frame.suffixesReader.length();\n    totalBlockStatsBytes += frame.statsReader.length();\n  }\n\n","sourceOld":"  void startBlock(BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame frame, boolean isFloor) {\n    totalBlockCount++;\n    if (isFloor) {\n      if (frame.fp == frame.fpOrig) {\n        floorBlockCount++;\n      }\n      floorSubBlockCount++;\n    } else {\n      nonFloorBlockCount++;\n    }\n\n    if (blockCountByPrefixLen.length <= frame.prefix) {\n      blockCountByPrefixLen = ArrayUtil.grow(blockCountByPrefixLen, 1+frame.prefix);\n    }\n    blockCountByPrefixLen[frame.prefix]++;\n    startBlockCount++;\n    totalBlockSuffixBytes += frame.suffixesReader.length();\n    totalBlockStatsBytes += frame.statsReader.length();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"47d9d581b0b317125672636196fa3c73bbcabc56":["5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["47d9d581b0b317125672636196fa3c73bbcabc56"],"47d9d581b0b317125672636196fa3c73bbcabc56":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ad80176d91a6f70fe93880e43dfd697dc4e63ed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["47d9d581b0b317125672636196fa3c73bbcabc56","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}