{"path":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#nextPosition().mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() {\n      if (VERBOSE) System.out.println(\"    nextPos storePayloads=\" + storePayloads + \" this=\" + this);\n      assert posPending > 0;\n      posPending--;\n      if (!storePayloads) {\n        pos += in.readVInt();\n      } else {\n        final int code = in.readVInt();\n        pos += code >>> 1;\n        if ((code & 1) != 0) {\n          payloadLength = in.readVInt();\n          //System.out.println(\"      new payloadLen=\" + payloadLength);\n          //} else {\n          //System.out.println(\"      same payloadLen=\" + payloadLength);\n        }\n        payload.offset = in.getPosition();\n        in.skipBytes(payloadLength);\n        payload.length = payloadLength;\n        // Necessary, in case caller changed the\n        // payload.bytes from prior call:\n        payload.bytes = buffer;\n        payloadRetrieved = false;\n      }\n\n      if (VERBOSE) System.out.println(\"      pos=\" + pos + \" payload=\" + payload + \" fp=\" + in.getPosition());\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() {\n      if (VERBOSE) System.out.println(\"    nextPos storePayloads=\" + storePayloads + \" this=\" + this);\n      assert posPending > 0;\n      posPending--;\n      if (!storePayloads) {\n        pos += in.readVInt();\n      } else {\n        final int code = in.readVInt();\n        pos += code >>> 1;\n        if ((code & 1) != 0) {\n          payloadLength = in.readVInt();\n          //System.out.println(\"      new payloadLen=\" + payloadLength);\n          //} else {\n          //System.out.println(\"      same payloadLen=\" + payloadLength);\n        }\n        payload.offset = in.getPosition();\n        in.skipBytes(payloadLength);\n        payload.length = payloadLength;\n        // Necessary, in case caller changed the\n        // payload.bytes from prior call:\n        payload.bytes = buffer;\n        payloadRetrieved = false;\n      }\n\n      if (VERBOSE) System.out.println(\"      pos=\" + pos + \" payload=\" + payload + \" fp=\" + in.getPosition());\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() {\n      if (VERBOSE) System.out.println(\"    nextPos storePayloads=\" + storePayloads + \" this=\" + this);\n      assert posPending > 0;\n      posPending--;\n      if (!storePayloads) {\n        pos += in.readVInt();\n      } else {\n        final int code = in.readVInt();\n        pos += code >>> 1;\n        if ((code & 1) != 0) {\n          payloadLength = in.readVInt();\n          //System.out.println(\"      new payloadLen=\" + payloadLength);\n          //} else {\n          //System.out.println(\"      same payloadLen=\" + payloadLength);\n        }\n        payload.offset = in.getPosition();\n        in.skipBytes(payloadLength);\n        payload.length = payloadLength;\n        // Necessary, in case caller changed the\n        // payload.bytes from prior call:\n        payload.bytes = buffer;\n        payloadRetrieved = false;\n      }\n\n      if (VERBOSE) System.out.println(\"      pos=\" + pos + \" payload=\" + payload + \" fp=\" + in.getPosition());\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() {\n      if (VERBOSE) System.out.println(\"    nextPos storePayloads=\" + storePayloads + \" this=\" + this);\n      assert posPending > 0;\n      posPending--;\n      if (!storePayloads) {\n        pos += in.readVInt();\n      } else {\n        final int code = in.readVInt();\n        pos += code >>> 1;\n        if ((code & 1) != 0) {\n          payloadLength = in.readVInt();\n          //System.out.println(\"      new payloadLen=\" + payloadLength);\n          //} else {\n          //System.out.println(\"      same payloadLen=\" + payloadLength);\n        }\n        payload.offset = in.getPosition();\n        in.skipBytes(payloadLength);\n        payload.length = payloadLength;\n        // Necessary, in case caller changed the\n        // payload.bytes from prior call:\n        payload.bytes = buffer;\n        payloadRetrieved = false;\n      }\n\n      if (VERBOSE) System.out.println(\"      pos=\" + pos + \" payload=\" + payload + \" fp=\" + in.getPosition());\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}