{"path":"lucene/src/test-framework/org/apache/lucene/util/automaton/AutomatonTestUtil#isFiniteSlow(State,HashSet[State]).mjava","commits":[{"id":"f89574d69843793efb77e8611441f8aee3aad1e8","date":1300294286,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/automaton/AutomatonTestUtil#isFiniteSlow(State,HashSet[State]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#isFinite(State,HashSet[State]).mjava","sourceNew":"  /**\n   * Checks whether there is a loop containing s. (This is sufficient since\n   * there are never transitions to dead states.)\n   */\n  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack\n  private static boolean isFiniteSlow(State s, HashSet<State> path) {\n    path.add(s);\n    for (Transition t : s.getTransitions())\n      if (path.contains(t.to) || !isFiniteSlow(t.to, path)) return false;\n    path.remove(s);\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Checks whether there is a loop containing s. (This is sufficient since\n   * there are never transitions to dead states.)\n   */\n  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack\n  private static boolean isFinite(State s, HashSet<State> path) {\n    path.add(s);\n    for (Transition t : s.getTransitions())\n      if (path.contains(t.to) || !isFinite(t.to, path)) return false;\n    path.remove(s);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/automaton/AutomatonTestUtil#isFiniteSlow(State,HashSet[State]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Checks whether there is a loop containing s. (This is sufficient since\n   * there are never transitions to dead states.)\n   */\n  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack\n  private static boolean isFiniteSlow(State s, HashSet<State> path) {\n    path.add(s);\n    for (Transition t : s.getTransitions())\n      if (path.contains(t.to) || !isFiniteSlow(t.to, path)) return false;\n    path.remove(s);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/automaton/AutomatonTestUtil#isFiniteSlow(State,HashSet[State]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Checks whether there is a loop containing s. (This is sufficient since\n   * there are never transitions to dead states.)\n   */\n  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack\n  private static boolean isFiniteSlow(State s, HashSet<State> path) {\n    path.add(s);\n    for (Transition t : s.getTransitions())\n      if (path.contains(t.to) || !isFiniteSlow(t.to, path)) return false;\n    path.remove(s);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/AutomatonTestUtil#isFiniteSlow(State,HashSet[State]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/automaton/AutomatonTestUtil#isFiniteSlow(State,HashSet[State]).mjava","sourceNew":"  /**\n   * Checks whether there is a loop containing s. (This is sufficient since\n   * there are never transitions to dead states.)\n   */\n  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack\n  private static boolean isFiniteSlow(State s, HashSet<State> path) {\n    path.add(s);\n    for (Transition t : s.getTransitions())\n      if (path.contains(t.to) || !isFiniteSlow(t.to, path)) return false;\n    path.remove(s);\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Checks whether there is a loop containing s. (This is sufficient since\n   * there are never transitions to dead states.)\n   */\n  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack\n  private static boolean isFiniteSlow(State s, HashSet<State> path) {\n    path.add(s);\n    for (Transition t : s.getTransitions())\n      if (path.contains(t.to) || !isFiniteSlow(t.to, path)) return false;\n    path.remove(s);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["f89574d69843793efb77e8611441f8aee3aad1e8"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f89574d69843793efb77e8611441f8aee3aad1e8"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f89574d69843793efb77e8611441f8aee3aad1e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f89574d69843793efb77e8611441f8aee3aad1e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","f89574d69843793efb77e8611441f8aee3aad1e8"],"f89574d69843793efb77e8611441f8aee3aad1e8":["7b91922b55d15444d554721b352861d028eb8278","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}