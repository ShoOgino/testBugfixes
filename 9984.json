{"path":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#nextDoc().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#nextDoc().mjava","sourceNew":"  @Override\n  public final int nextDoc() throws IOException {\n    if (_queue.size() == 0) {\n      return NO_MORE_DOCS;\n    }\n\n    // TODO: move this init into positions(): if the search\n    // doesn't need the positions for this doc then don't\n    // waste CPU merging them:\n    _posList.clear();\n    _doc = _queue.top().docID();\n\n    // merge sort all positions together\n    DocsAndPositionsEnum postings;\n    do {\n      postings = _queue.top();\n\n      final int freq = postings.freq();\n      for (int i = 0; i < freq; i++) {\n        _posList.add(postings.nextPosition());\n      }\n\n      if (postings.nextDoc() != NO_MORE_DOCS) {\n        _queue.updateTop();\n      } else {\n        _queue.pop();\n      }\n    } while (_queue.size() > 0 && _queue.top().docID() == _doc);\n\n    _posList.sort();\n    _freq = _posList.size();\n\n    return _doc;\n  }\n\n","sourceOld":"  @Override\n  public final int nextDoc() throws IOException {\n    if (_queue.size() == 0) {\n      return NO_MORE_DOCS;\n    }\n\n    // TODO: move this init into positions(): if the search\n    // doesn't need the positions for this doc then don't\n    // waste CPU merging them:\n    _posList.clear();\n    _doc = _queue.top().docID();\n\n    // merge sort all positions together\n    DocsAndPositionsEnum postings;\n    do {\n      postings = _queue.top();\n\n      final int freq = postings.freq();\n      for (int i = 0; i < freq; i++) {\n        _posList.add(postings.nextPosition());\n      }\n\n      if (postings.nextDoc() != NO_MORE_DOCS) {\n        _queue.updateTop();\n      } else {\n        _queue.pop();\n      }\n    } while (_queue.size() > 0 && _queue.top().docID() == _doc);\n\n    _posList.sort();\n    _freq = _posList.size();\n\n    return _doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3c6e1801c052bca884af0da09fd85b9b08701a6","date":1422027626,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#nextDoc().mjava","sourceNew":"  @Override\n  public final int nextDoc() throws IOException {\n    if (_queue.size() == 0) {\n      return _doc = NO_MORE_DOCS;\n    }\n\n    // TODO: move this init into positions(): if the search\n    // doesn't need the positions for this doc then don't\n    // waste CPU merging them:\n    _posList.clear();\n    _doc = _queue.top().docID();\n\n    // merge sort all positions together\n    DocsAndPositionsEnum postings;\n    do {\n      postings = _queue.top();\n\n      final int freq = postings.freq();\n      for (int i = 0; i < freq; i++) {\n        _posList.add(postings.nextPosition());\n      }\n\n      if (postings.nextDoc() != NO_MORE_DOCS) {\n        _queue.updateTop();\n      } else {\n        _queue.pop();\n      }\n    } while (_queue.size() > 0 && _queue.top().docID() == _doc);\n\n    _posList.sort();\n    _freq = _posList.size();\n\n    return _doc;\n  }\n\n","sourceOld":"  @Override\n  public final int nextDoc() throws IOException {\n    if (_queue.size() == 0) {\n      return NO_MORE_DOCS;\n    }\n\n    // TODO: move this init into positions(): if the search\n    // doesn't need the positions for this doc then don't\n    // waste CPU merging them:\n    _posList.clear();\n    _doc = _queue.top().docID();\n\n    // merge sort all positions together\n    DocsAndPositionsEnum postings;\n    do {\n      postings = _queue.top();\n\n      final int freq = postings.freq();\n      for (int i = 0; i < freq; i++) {\n        _posList.add(postings.nextPosition());\n      }\n\n      if (postings.nextDoc() != NO_MORE_DOCS) {\n        _queue.updateTop();\n      } else {\n        _queue.pop();\n      }\n    } while (_queue.size() > 0 && _queue.top().docID() == _doc);\n\n    _posList.sort();\n    _freq = _posList.size();\n\n    return _doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery]#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#nextDoc().mjava","sourceNew":"  @Override\n  public final int nextDoc() throws IOException {\n    if (_queue.size() == 0) {\n      return _doc = NO_MORE_DOCS;\n    }\n\n    // TODO: move this init into positions(): if the search\n    // doesn't need the positions for this doc then don't\n    // waste CPU merging them:\n    _posList.clear();\n    _doc = _queue.top().docID();\n\n    // merge sort all positions together\n    PostingsEnum postings;\n    do {\n      postings = _queue.top();\n\n      final int freq = postings.freq();\n      for (int i = 0; i < freq; i++) {\n        _posList.add(postings.nextPosition());\n      }\n\n      if (postings.nextDoc() != NO_MORE_DOCS) {\n        _queue.updateTop();\n      } else {\n        _queue.pop();\n      }\n    } while (_queue.size() > 0 && _queue.top().docID() == _doc);\n\n    _posList.sort();\n    _freq = _posList.size();\n\n    return _doc;\n  }\n\n","sourceOld":"  @Override\n  public final int nextDoc() throws IOException {\n    if (_queue.size() == 0) {\n      return _doc = NO_MORE_DOCS;\n    }\n\n    // TODO: move this init into positions(): if the search\n    // doesn't need the positions for this doc then don't\n    // waste CPU merging them:\n    _posList.clear();\n    _doc = _queue.top().docID();\n\n    // merge sort all positions together\n    DocsAndPositionsEnum postings;\n    do {\n      postings = _queue.top();\n\n      final int freq = postings.freq();\n      for (int i = 0; i < freq; i++) {\n        _posList.add(postings.nextPosition());\n      }\n\n      if (postings.nextDoc() != NO_MORE_DOCS) {\n        _queue.updateTop();\n      } else {\n        _queue.pop();\n      }\n    } while (_queue.size() > 0 && _queue.top().docID() == _doc);\n\n    _posList.sort();\n    _freq = _posList.size();\n\n    return _doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3c6e1801c052bca884af0da09fd85b9b08701a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"51f5280f31484820499077f41fcdfe92d527d9dc":["b3c6e1801c052bca884af0da09fd85b9b08701a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3c6e1801c052bca884af0da09fd85b9b08701a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b3c6e1801c052bca884af0da09fd85b9b08701a6":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}