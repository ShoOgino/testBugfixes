{"path":"backwards/src/test/org/apache/lucene/analysis/TestNumericTokenStream#testIntStream().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/analysis/TestNumericTokenStream#testIntStream().mjava","pathOld":"/dev/null","sourceNew":"  public void testIntStream() throws Exception {\n    final NumericTokenStream stream=new NumericTokenStream().setIntValue(ivalue);\n    // use getAttribute to test if attributes really exist, if not an IAE will be throwed\n    final TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = stream.getAttribute(TypeAttribute.class);\n    for (int shift=0; shift<32; shift+=NumericUtils.PRECISION_STEP_DEFAULT) {\n      assertTrue(\"New token is available\", stream.incrementToken());\n      assertEquals(\"Term is correctly encoded\", NumericUtils.intToPrefixCoded(ivalue, shift), termAtt.term());\n      assertEquals(\"Type correct\", (shift == 0) ? NumericTokenStream.TOKEN_TYPE_FULL_PREC : NumericTokenStream.TOKEN_TYPE_LOWER_PREC, typeAtt.type());\n    }\n    assertFalse(\"No more tokens available\", stream.incrementToken());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/analysis/TestNumericTokenStream#testIntStream().mjava","pathOld":"backwards/src/test/org/apache/lucene/analysis/TestNumericTokenStream#testIntStream().mjava","sourceNew":"  public void testIntStream() throws Exception {\n    final NumericTokenStream stream=new NumericTokenStream().setIntValue(ivalue);\n    // use getAttribute to test if attributes really exist, if not an IAE will be throwed\n    final TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = stream.getAttribute(TypeAttribute.class);\n    for (int shift=0; shift<32; shift+=NumericUtils.PRECISION_STEP_DEFAULT) {\n      assertTrue(\"New token is available\", stream.incrementToken());\n      assertEquals(\"Term is correctly encoded\", NumericUtils.intToPrefixCoded(ivalue, shift), termAtt.term());\n      assertEquals(\"Type correct\", (shift == 0) ? NumericTokenStream.TOKEN_TYPE_FULL_PREC : NumericTokenStream.TOKEN_TYPE_LOWER_PREC, typeAtt.type());\n    }\n    assertFalse(\"No more tokens available\", stream.incrementToken());\n  }\n\n","sourceOld":"  public void testIntStream() throws Exception {\n    final NumericTokenStream stream=new NumericTokenStream().setIntValue(ivalue);\n    // use getAttribute to test if attributes really exist, if not an IAE will be throwed\n    final TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = stream.getAttribute(TypeAttribute.class);\n    for (int shift=0; shift<32; shift+=NumericUtils.PRECISION_STEP_DEFAULT) {\n      assertTrue(\"New token is available\", stream.incrementToken());\n      assertEquals(\"Term is correctly encoded\", NumericUtils.intToPrefixCoded(ivalue, shift), termAtt.term());\n      assertEquals(\"Type correct\", (shift == 0) ? NumericTokenStream.TOKEN_TYPE_FULL_PREC : NumericTokenStream.TOKEN_TYPE_LOWER_PREC, typeAtt.type());\n    }\n    assertFalse(\"No more tokens available\", stream.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":6,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestNumericTokenStream#testIntStream().mjava","pathOld":"backwards/src/test/org/apache/lucene/analysis/TestNumericTokenStream#testIntStream().mjava","sourceNew":"  public void testIntStream() throws Exception {\n    final NumericTokenStream stream=new NumericTokenStream().setIntValue(ivalue);\n    // use getAttribute to test if attributes really exist, if not an IAE will be throwed\n    final TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = stream.getAttribute(TypeAttribute.class);\n    for (int shift=0; shift<32; shift+=NumericUtils.PRECISION_STEP_DEFAULT) {\n      assertTrue(\"New token is available\", stream.incrementToken());\n      assertEquals(\"Term is correctly encoded\", NumericUtils.intToPrefixCoded(ivalue, shift), termAtt.term());\n      assertEquals(\"Type correct\", (shift == 0) ? NumericTokenStream.TOKEN_TYPE_FULL_PREC : NumericTokenStream.TOKEN_TYPE_LOWER_PREC, typeAtt.type());\n    }\n    assertFalse(\"No more tokens available\", stream.incrementToken());\n  }\n\n","sourceOld":"  public void testIntStream() throws Exception {\n    final NumericTokenStream stream=new NumericTokenStream().setIntValue(ivalue);\n    // use getAttribute to test if attributes really exist, if not an IAE will be throwed\n    final TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = stream.getAttribute(TypeAttribute.class);\n    for (int shift=0; shift<32; shift+=NumericUtils.PRECISION_STEP_DEFAULT) {\n      assertTrue(\"New token is available\", stream.incrementToken());\n      assertEquals(\"Term is correctly encoded\", NumericUtils.intToPrefixCoded(ivalue, shift), termAtt.term());\n      assertEquals(\"Type correct\", (shift == 0) ? NumericTokenStream.TOKEN_TYPE_FULL_PREC : NumericTokenStream.TOKEN_TYPE_LOWER_PREC, typeAtt.type());\n    }\n    assertFalse(\"No more tokens available\", stream.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}