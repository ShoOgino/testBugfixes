{"path":"src/java/org/apache/solr/analysis/EnglishPorterFilter[EnglishPorterFilterFactory]#next().mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/EnglishPorterFilter[EnglishPorterFilterFactory]#next().mjava","pathOld":"/dev/null","sourceNew":"  /** the original code from lucene sandbox\n  public final Token next() throws IOException {\n    Token token = input.next();\n    if (token == null)\n      return null;\n    stemmer.setCurrent(token.termText());\n    try {\n      stemMethod.invoke(stemmer, EMPTY_ARGS);\n    } catch (Exception e) {\n      throw new RuntimeException(e.toString());\n    }\n    return new Token(stemmer.getCurrent(),\n                     token.startOffset(), token.endOffset(), token.type());\n  }\n  **/\n\n  public Token next() throws IOException {\n    Token tok = input.next();\n    if (tok==null) return null;\n    String tokstr = tok.termText();\n\n    // if protected, don't stem.  use this to avoid stemming collisions.\n    if (protWords != null && protWords.contains(tokstr)) {\n      return tok;\n    }\n\n    stemmer.setCurrent(tokstr);\n    stemmer.stem();\n    String newstr = stemmer.getCurrent();\n    if (tokstr.equals(newstr)) {\n      return tok;\n    } else {\n      // TODO: it would be nice if I could just set termText directly like\n      // lucene packages can.\n      Token newtok = new Token(newstr, tok.startOffset(), tok.endOffset(), tok.type());\n      newtok.setPositionIncrement(tok.getPositionIncrement());\n      return newtok;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/EnglishPorterFilter[EnglishPorterFilterFactory]#next().mjava","pathOld":"src/java/org/apache/solr/analysis/EnglishPorterFilter[EnglishPorterFilterFactory]#next().mjava","sourceNew":"  /** the original code from lucene sandbox\n  public final Token next() throws IOException {\n    Token token = input.next();\n    if (token == null)\n      return null;\n    stemmer.setCurrent(token.termText());\n    try {\n      stemMethod.invoke(stemmer, EMPTY_ARGS);\n    } catch (Exception e) {\n      throw new RuntimeException(e.toString());\n    }\n    return new Token(stemmer.getCurrent(),\n                     token.startOffset(), token.endOffset(), token.type());\n  }\n  **/\n\n  @Override\n  public Token next() throws IOException {\n    Token tok = input.next();\n    if (tok==null) return null;\n    String tokstr = tok.termText();\n\n    // if protected, don't stem.  use this to avoid stemming collisions.\n    if (protWords != null && protWords.contains(tokstr)) {\n      return tok;\n    }\n\n    stemmer.setCurrent(tokstr);\n    stemmer.stem();\n    String newstr = stemmer.getCurrent();\n    if (tokstr.equals(newstr)) {\n      return tok;\n    } else {\n      // TODO: it would be nice if I could just set termText directly like\n      // lucene packages can.\n      Token newtok = new Token(newstr, tok.startOffset(), tok.endOffset(), tok.type());\n      newtok.setPositionIncrement(tok.getPositionIncrement());\n      return newtok;\n    }\n\n  }\n\n","sourceOld":"  /** the original code from lucene sandbox\n  public final Token next() throws IOException {\n    Token token = input.next();\n    if (token == null)\n      return null;\n    stemmer.setCurrent(token.termText());\n    try {\n      stemMethod.invoke(stemmer, EMPTY_ARGS);\n    } catch (Exception e) {\n      throw new RuntimeException(e.toString());\n    }\n    return new Token(stemmer.getCurrent(),\n                     token.startOffset(), token.endOffset(), token.type());\n  }\n  **/\n\n  public Token next() throws IOException {\n    Token tok = input.next();\n    if (tok==null) return null;\n    String tokstr = tok.termText();\n\n    // if protected, don't stem.  use this to avoid stemming collisions.\n    if (protWords != null && protWords.contains(tokstr)) {\n      return tok;\n    }\n\n    stemmer.setCurrent(tokstr);\n    stemmer.stem();\n    String newstr = stemmer.getCurrent();\n    if (tokstr.equals(newstr)) {\n      return tok;\n    } else {\n      // TODO: it would be nice if I could just set termText directly like\n      // lucene packages can.\n      Token newtok = new Token(newstr, tok.startOffset(), tok.endOffset(), tok.type());\n      newtok.setPositionIncrement(tok.getPositionIncrement());\n      return newtok;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe8ae1ed027200f075b0de9f264776fa32c4862f","date":1207066219,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/analysis/EnglishPorterFilter[EnglishPorterFilterFactory]#next().mjava","sourceNew":null,"sourceOld":"  /** the original code from lucene sandbox\n  public final Token next() throws IOException {\n    Token token = input.next();\n    if (token == null)\n      return null;\n    stemmer.setCurrent(token.termText());\n    try {\n      stemMethod.invoke(stemmer, EMPTY_ARGS);\n    } catch (Exception e) {\n      throw new RuntimeException(e.toString());\n    }\n    return new Token(stemmer.getCurrent(),\n                     token.startOffset(), token.endOffset(), token.type());\n  }\n  **/\n\n  @Override\n  public Token next() throws IOException {\n    Token tok = input.next();\n    if (tok==null) return null;\n    String tokstr = tok.termText();\n\n    // if protected, don't stem.  use this to avoid stemming collisions.\n    if (protWords != null && protWords.contains(tokstr)) {\n      return tok;\n    }\n\n    stemmer.setCurrent(tokstr);\n    stemmer.stem();\n    String newstr = stemmer.getCurrent();\n    if (tokstr.equals(newstr)) {\n      return tok;\n    } else {\n      // TODO: it would be nice if I could just set termText directly like\n      // lucene packages can.\n      Token newtok = new Token(newstr, tok.startOffset(), tok.endOffset(), tok.type());\n      newtok.setPositionIncrement(tok.getPositionIncrement());\n      return newtok;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe8ae1ed027200f075b0de9f264776fa32c4862f":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fe8ae1ed027200f075b0de9f264776fa32c4862f":[],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["fe8ae1ed027200f075b0de9f264776fa32c4862f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe8ae1ed027200f075b0de9f264776fa32c4862f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}