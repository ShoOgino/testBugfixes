{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000);\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        }\n        \n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000);\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        }\n        \n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edb74c83fff94196b864e08ca033d92823252cb7","date":1339593164,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000, random().nextFloat());\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        }\n        \n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000);\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        }\n        \n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000, random().nextFloat());\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        }\n        \n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000, random().nextFloat());\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        }\n        \n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000, random().nextFloat());\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        }\n        \n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000, random().nextFloat());\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        }\n        \n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000, random().nextFloat());\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        }\n        \n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000, random().nextFloat());\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        }\n        \n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000, random().nextFloat());\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        }\n        \n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000, random().nextFloat());\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        }\n        \n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49f4d9c4e29f2345e789073801e7945431a23ca3","date":1355344131,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000, random().nextFloat());\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        }\n        \n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000, random().nextFloat());\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        }\n        \n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87e78f3c129251e74ecc2ff73a32de0f27cf09d5","date":1358006150,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n        long t = System.currentTimeMillis() - tStart;\n        System.out.println((t / 1000.0) + \" sec to build\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73e44327cb5401cc5098da2f488c899954c9bfbc","date":1358092175,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n        long t = System.currentTimeMillis() - tStart;\n        System.out.println((t / 1000.0) + \" sec to build\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d245db17aaa41b338dae9da5d4edba4dd6f61612","date":1394644847,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), StandardCharsets.UTF_8), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), StandardCharsets.UTF_8), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), StandardCharsets.UTF_8), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), StandardCharsets.UTF_8), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8405d98acebb7e287bf7ac40e937ba05b8661285","date":1401433291,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), StandardCharsets.UTF_8), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.ramBytesUsed());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), StandardCharsets.UTF_8), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), StandardCharsets.UTF_8), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), StandardCharsets.UTF_8), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":["f04dea8ce9675dc75eb2483feb840a86f765fb82"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), StandardCharsets.UTF_8), 65536);\n      try {\n        final IntsRefBuilder intsRef = new IntsRefBuilder();\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef.get(),\n                      getOutput(intsRef.get(), ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.ramBytesUsed());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), StandardCharsets.UTF_8), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef.get(), ord);\n                T actual = Util.get(fst, intsRef.get());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef.get(), ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), StandardCharsets.UTF_8), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.ramBytesUsed());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), StandardCharsets.UTF_8), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":["f04dea8ce9675dc75eb2483feb840a86f765fb82"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      \n      BufferedReader is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n      try {\n        final IntsRefBuilder intsRef = new IntsRefBuilder();\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef.get(),\n                      getOutput(intsRef.get(), ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.ramBytesUsed());\n        if (fst.getNodeCount() < 100) {\n          Writer w = Files.newBufferedWriter(Paths.get(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(dirOut);\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef.get(), ord);\n                T actual = Util.get(fst, intsRef.get());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef.get(), ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), StandardCharsets.UTF_8), 65536);\n      try {\n        final IntsRefBuilder intsRef = new IntsRefBuilder();\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef.get(),\n                      getOutput(intsRef.get(), ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.ramBytesUsed());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), StandardCharsets.UTF_8), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef.get(), ord);\n                T actual = Util.get(fst, intsRef.get());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef.get(), ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1abb939fb41b2fe4f89fd518f3da288c0213341d","date":1435657417,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      \n      BufferedReader is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n      try {\n        final IntsRefBuilder intsRef = new IntsRefBuilder();\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef.get(),\n                      getOutput(intsRef.get(), ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + builder.getNodeCount() + \" nodes; \" + builder.getArcCount() + \" arcs; tot size \" + fst.ramBytesUsed());\n        if (builder.getNodeCount() < 100) {\n          Writer w = Files.newBufferedWriter(Paths.get(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(dirOut);\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef.get(), ord);\n                T actual = Util.get(fst, intsRef.get());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef.get(), ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      \n      BufferedReader is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n      try {\n        final IntsRefBuilder intsRef = new IntsRefBuilder();\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef.get(),\n                      getOutput(intsRef.get(), ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.ramBytesUsed());\n        if (fst.getNodeCount() < 100) {\n          Writer w = Files.newBufferedWriter(Paths.get(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(dirOut);\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef.get(), ord);\n                T actual = Util.get(fst, intsRef.get());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef.get(), ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      \n      BufferedReader is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n      try {\n        final IntsRefBuilder intsRef = new IntsRefBuilder();\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef.get(),\n                      getOutput(intsRef.get(), ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + builder.getNodeCount() + \" nodes; \" + builder.getArcCount() + \" arcs; tot size \" + fst.ramBytesUsed());\n        if (builder.getNodeCount() < 100) {\n          Writer w = Files.newBufferedWriter(Paths.get(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(dirOut);\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef.get(), ord);\n                T actual = Util.get(fst, intsRef.get());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef.get(), ord);\n                @SuppressWarnings({\"unchecked\", \"deprecation\"}) final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      \n      BufferedReader is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n      try {\n        final IntsRefBuilder intsRef = new IntsRefBuilder();\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef.get(),\n                      getOutput(intsRef.get(), ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + builder.getNodeCount() + \" nodes; \" + builder.getArcCount() + \" arcs; tot size \" + fst.ramBytesUsed());\n        if (builder.getNodeCount() < 100) {\n          Writer w = Files.newBufferedWriter(Paths.get(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(dirOut);\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef.get(), ord);\n                T actual = Util.get(fst, intsRef.get());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef.get(), ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      \n      BufferedReader is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n      try {\n        final IntsRefBuilder intsRef = new IntsRefBuilder();\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef.get(),\n                      getOutput(intsRef.get(), ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + builder.getNodeCount() + \" nodes; \" + builder.getArcCount() + \" arcs; tot size \" + fst.ramBytesUsed());\n        if (builder.getNodeCount() < 100) {\n          Writer w = Files.newBufferedWriter(Paths.get(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(dirOut);\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef.get(), ord);\n                T actual = Util.get(fst, intsRef.get());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef.get(), ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      \n      BufferedReader is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n      try {\n        final IntsRefBuilder intsRef = new IntsRefBuilder();\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef.get(),\n                      getOutput(intsRef.get(), ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + builder.getNodeCount() + \" nodes; \" + builder.getArcCount() + \" arcs; tot size \" + fst.ramBytesUsed());\n        if (builder.getNodeCount() < 100) {\n          Writer w = Files.newBufferedWriter(Paths.get(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(dirOut);\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef.get(), ord);\n                T actual = Util.get(fst, intsRef.get());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef.get(), ord);\n                @SuppressWarnings({\"unchecked\", \"deprecation\"}) final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      \n      BufferedReader is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n      try {\n        final IntsRefBuilder intsRef = new IntsRefBuilder();\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          fstCompiler.add(intsRef.get(),\n                      getOutput(intsRef.get(), ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert fstCompiler.getTermCount() == ord;\n        FST<T> fst = fstCompiler.compile();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fstCompiler.getNodeCount() + \" nodes; \" + fstCompiler.getArcCount() + \" arcs; tot size \" + fst.ramBytesUsed());\n        if (fstCompiler.getNodeCount() < 100) {\n          Writer w = Files.newBufferedWriter(Paths.get(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(dirOut);\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef.get(), ord);\n                T actual = Util.get(fst, intsRef.get());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef.get(), ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      \n      BufferedReader is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n      try {\n        final IntsRefBuilder intsRef = new IntsRefBuilder();\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef.get(),\n                      getOutput(intsRef.get(), ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + builder.getNodeCount() + \" nodes; \" + builder.getArcCount() + \" arcs; tot size \" + fst.ramBytesUsed());\n        if (builder.getNodeCount() < 100) {\n          Writer w = Files.newBufferedWriter(Paths.get(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(dirOut);\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef.get(), ord);\n                T actual = Util.get(fst, intsRef.get());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef.get(), ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      \n      BufferedReader is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n      try {\n        final IntsRefBuilder intsRef = new IntsRefBuilder();\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          fstCompiler.add(intsRef.get(),\n                      getOutput(intsRef.get(), ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert fstCompiler.getTermCount() == ord;\n        FST<T> fst = fstCompiler.compile();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fstCompiler.getNodeCount() + \" nodes; \" + fstCompiler.getArcCount() + \" arcs; tot size \" + fst.ramBytesUsed());\n        if (fstCompiler.getNodeCount() < 100) {\n          Writer w = Files.newBufferedWriter(Paths.get(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(dirOut);\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef.get(), ord);\n                T actual = Util.get(fst, intsRef.get());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef.get(), ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      \n      BufferedReader is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n      try {\n        final IntsRefBuilder intsRef = new IntsRefBuilder();\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef.get(),\n                      getOutput(intsRef.get(), ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + builder.getNodeCount() + \" nodes; \" + builder.getArcCount() + \" arcs; tot size \" + fst.ramBytesUsed());\n        if (builder.getNodeCount() < 100) {\n          Writer w = Files.newBufferedWriter(Paths.get(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(dirOut);\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef.get(), ord);\n                T actual = Util.get(fst, intsRef.get());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef.get(), ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      \n      BufferedReader is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n      try {\n        final IntsRefBuilder intsRef = new IntsRefBuilder();\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          fstCompiler.add(intsRef.get(),\n                      getOutput(intsRef.get(), ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert fstCompiler.getTermCount() == ord;\n        FST<T> fst = fstCompiler.compile();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fstCompiler.getNodeCount() + \" nodes; \" + fstCompiler.getArcCount() + \" arcs; tot size \" + fst.ramBytesUsed());\n        if (fstCompiler.getNodeCount() < 100) {\n          Writer w = Files.newBufferedWriter(Paths.get(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(dirOut);\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef.get(), ord);\n                T actual = Util.get(fst, intsRef.get());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef.get(), ord);\n                @SuppressWarnings({\"unchecked\", \"deprecation\"}) final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      \n      BufferedReader is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n      try {\n        final IntsRefBuilder intsRef = new IntsRefBuilder();\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          fstCompiler.add(intsRef.get(),\n                      getOutput(intsRef.get(), ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert fstCompiler.getTermCount() == ord;\n        FST<T> fst = fstCompiler.compile();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fstCompiler.getNodeCount() + \" nodes; \" + fstCompiler.getArcCount() + \" arcs; tot size \" + fst.ramBytesUsed());\n        if (fstCompiler.getNodeCount() < 100) {\n          Writer w = Files.newBufferedWriter(Paths.get(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(dirOut);\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef.get(), ord);\n                T actual = Util.get(fst, intsRef.get());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef.get(), ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99f06f5dd087b1829e7b4139e4d014c786b92572","date":1592312728,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      \n      BufferedReader is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n      try {\n        final IntsRefBuilder intsRef = new IntsRefBuilder();\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          fstCompiler.add(intsRef.get(),\n                      getOutput(intsRef.get(), ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert fstCompiler.getTermCount() == ord;\n        FST<T> fst = fstCompiler.compile();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fstCompiler.getNodeCount() + \" nodes; \" + fstCompiler.getArcCount() + \" arcs; tot size \" + fst.ramBytesUsed());\n        if (fstCompiler.getNodeCount() < 100) {\n          Writer w = Files.newBufferedWriter(Paths.get(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(dirOut);\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out, out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef.get(), ord);\n                T actual = Util.get(fst, intsRef.get());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef.get(), ord);\n                @SuppressWarnings({\"unchecked\", \"deprecation\"}) final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      \n      BufferedReader is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n      try {\n        final IntsRefBuilder intsRef = new IntsRefBuilder();\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          fstCompiler.add(intsRef.get(),\n                      getOutput(intsRef.get(), ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        long tMid = System.currentTimeMillis();\n        System.out.println(((tMid-tStart) / 1000.0) + \" sec to add all terms\");\n\n        assert fstCompiler.getTermCount() == ord;\n        FST<T> fst = fstCompiler.compile();\n        long tEnd = System.currentTimeMillis();\n        System.out.println(((tEnd-tMid) / 1000.0) + \" sec to finish/pack\");\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fstCompiler.getNodeCount() + \" nodes; \" + fstCompiler.getArcCount() + \" arcs; tot size \" + fst.ramBytesUsed());\n        if (fstCompiler.getNodeCount() < 100) {\n          Writer w = Files.newBufferedWriter(Paths.get(\"out.dot\"), StandardCharsets.UTF_8);\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(dirOut);\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        /*\n        IndexInput in = dir.openInput(\"fst.bin\", IOContext.DEFAULT);\n        fst = new FST<T>(in, outputs);\n        in.close();\n        */\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = Files.newBufferedReader(wordsFileIn, StandardCharsets.UTF_8);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef.get(), ord);\n                T actual = Util.get(fst, intsRef.get());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef.get(), ord);\n                @SuppressWarnings({\"unchecked\", \"deprecation\"}) final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1abb939fb41b2fe4f89fd518f3da288c0213341d":["f4abec28b874149a7223e32cc7a01704c27790de"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["2acf500f78aa12b92e371fd89c719291986b6b90","49f4d9c4e29f2345e789073801e7945431a23ca3"],"d245db17aaa41b338dae9da5d4edba4dd6f61612":["73e44327cb5401cc5098da2f488c899954c9bfbc"],"8405d98acebb7e287bf7ac40e937ba05b8661285":["7d89d7e4e5101347833eea558851bf4209218619"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","73e44327cb5401cc5098da2f488c899954c9bfbc"],"99f06f5dd087b1829e7b4139e4d014c786b92572":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["8405d98acebb7e287bf7ac40e937ba05b8661285"],"2acf500f78aa12b92e371fd89c719291986b6b90":["edb74c83fff94196b864e08ca033d92823252cb7","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edb74c83fff94196b864e08ca033d92823252cb7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["bb9c3baacabd473e8ecd6c4948aabacead49b88e","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"49f4d9c4e29f2345e789073801e7945431a23ca3":["2acf500f78aa12b92e371fd89c719291986b6b90"],"5eb2511ababf862ea11e10761c70ee560cd84510":["d245db17aaa41b338dae9da5d4edba4dd6f61612","7d89d7e4e5101347833eea558851bf4209218619"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["1abb939fb41b2fe4f89fd518f3da288c0213341d"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["edb74c83fff94196b864e08ca033d92823252cb7"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["49f4d9c4e29f2345e789073801e7945431a23ca3"],"f4abec28b874149a7223e32cc7a01704c27790de":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7d89d7e4e5101347833eea558851bf4209218619":["d245db17aaa41b338dae9da5d4edba4dd6f61612"],"46d8ada1fff8d18cb197c38c7983225162599948":["edb74c83fff94196b864e08ca033d92823252cb7","2acf500f78aa12b92e371fd89c719291986b6b90"],"73e44327cb5401cc5098da2f488c899954c9bfbc":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["edb74c83fff94196b864e08ca033d92823252cb7","2acf500f78aa12b92e371fd89c719291986b6b90"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99f06f5dd087b1829e7b4139e4d014c786b92572"]},"commit2Childs":{"1abb939fb41b2fe4f89fd518f3da288c0213341d":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"d245db17aaa41b338dae9da5d4edba4dd6f61612":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"8405d98acebb7e287bf7ac40e937ba05b8661285":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["edb74c83fff94196b864e08ca033d92823252cb7"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"99f06f5dd087b1829e7b4139e4d014c786b92572":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2acf500f78aa12b92e371fd89c719291986b6b90":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","49f4d9c4e29f2345e789073801e7945431a23ca3","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"edb74c83fff94196b864e08ca033d92823252cb7":["2acf500f78aa12b92e371fd89c719291986b6b90","9279c7cd47f17e1e8b674a3741ff5f040bc680be","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["99f06f5dd087b1829e7b4139e4d014c786b92572"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"49f4d9c4e29f2345e789073801e7945431a23ca3":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["73e44327cb5401cc5098da2f488c899954c9bfbc"],"f4abec28b874149a7223e32cc7a01704c27790de":["1abb939fb41b2fe4f89fd518f3da288c0213341d"],"7d89d7e4e5101347833eea558851bf4209218619":["8405d98acebb7e287bf7ac40e937ba05b8661285","5eb2511ababf862ea11e10761c70ee560cd84510"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"73e44327cb5401cc5098da2f488c899954c9bfbc":["d245db17aaa41b338dae9da5d4edba4dd6f61612","8917bfede3b4ca30f4305c1e391e9218959cd723"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","c5db9bff3aeb942c848a2ab8fa4b8b0737377deb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","5eb2511ababf862ea11e10761c70ee560cd84510","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}