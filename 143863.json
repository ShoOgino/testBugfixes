{"path":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testCommitUserData().mjava","commits":[{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testCommitUserData().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/lucene/TestLuceneTaxonomyWriter#testCommitUserData().mjava","sourceNew":"  @Test\n  public void testCommitUserData() throws Exception {\n    // Verifies that committed data is retrievable\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter ltw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    assertFalse(IndexReader.indexExists(dir));\n    ltw.commit(); // first commit, so that an index will be created\n    ltw.addCategory(new CategoryPath(\"a\"));\n    ltw.addCategory(new CategoryPath(\"b\"));\n    Map <String, String> userCommitData = new HashMap<String, String>();\n    userCommitData.put(\"testing\", \"1 2 3\");\n    ltw.commit(userCommitData);\n    ltw.close();\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(\"2 categories plus root should have been committed to the underlying directory\", 3, r.numDocs());\n    Map <String, String> readUserCommitData = r.getCommitUserData();\n    assertTrue(\"wrong value extracted from commit data\", \n        \"1 2 3\".equals(readUserCommitData.get(\"testing\")));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCommitUserData() throws Exception {\n    // Verifies that committed data is retrievable\n    Directory dir = newDirectory();\n    LuceneTaxonomyWriter ltw = new LuceneTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    assertFalse(IndexReader.indexExists(dir));\n    ltw.commit(); // first commit, so that an index will be created\n    ltw.addCategory(new CategoryPath(\"a\"));\n    ltw.addCategory(new CategoryPath(\"b\"));\n    Map <String, String> userCommitData = new HashMap<String, String>();\n    userCommitData.put(\"testing\", \"1 2 3\");\n    ltw.commit(userCommitData);\n    ltw.close();\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(\"2 categories plus root should have been committed to the underlying directory\", 3, r.numDocs());\n    Map <String, String> readUserCommitData = r.getCommitUserData();\n    assertTrue(\"wrong value extracted from commit data\", \n        \"1 2 3\".equals(readUserCommitData.get(\"testing\")));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20b26030b0883b7f045e3350bb97bee7146f1efd","date":1327854897,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testCommitUserData().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testCommitUserData().mjava","sourceNew":"  @Test\n  public void testCommitUserData() throws Exception {\n    // Verifies that committed data is retrievable\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter ltw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    assertFalse(DirectoryReader.indexExists(dir));\n    ltw.commit(); // first commit, so that an index will be created\n    ltw.addCategory(new CategoryPath(\"a\"));\n    ltw.addCategory(new CategoryPath(\"b\"));\n    Map <String, String> userCommitData = new HashMap<String, String>();\n    userCommitData.put(\"testing\", \"1 2 3\");\n    ltw.commit(userCommitData);\n    ltw.close();\n    DirectoryReader r = IndexReader.open(dir);\n    assertEquals(\"2 categories plus root should have been committed to the underlying directory\", 3, r.numDocs());\n    Map <String, String> readUserCommitData = r.getCommitUserData();\n    assertTrue(\"wrong value extracted from commit data\", \n        \"1 2 3\".equals(readUserCommitData.get(\"testing\")));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCommitUserData() throws Exception {\n    // Verifies that committed data is retrievable\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter ltw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    assertFalse(IndexReader.indexExists(dir));\n    ltw.commit(); // first commit, so that an index will be created\n    ltw.addCategory(new CategoryPath(\"a\"));\n    ltw.addCategory(new CategoryPath(\"b\"));\n    Map <String, String> userCommitData = new HashMap<String, String>();\n    userCommitData.put(\"testing\", \"1 2 3\");\n    ltw.commit(userCommitData);\n    ltw.close();\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(\"2 categories plus root should have been committed to the underlying directory\", 3, r.numDocs());\n    Map <String, String> readUserCommitData = r.getCommitUserData();\n    assertTrue(\"wrong value extracted from commit data\", \n        \"1 2 3\".equals(readUserCommitData.get(\"testing\")));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["e26e3b5080bfb6fcabdc46d0072efe441de1a21b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testCommitUserData().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testCommitUserData().mjava","sourceNew":"  @Test\n  public void testCommitUserData() throws Exception {\n    // Verifies that committed data is retrievable\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter ltw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    assertFalse(DirectoryReader.indexExists(dir));\n    ltw.commit(); // first commit, so that an index will be created\n    ltw.addCategory(new CategoryPath(\"a\"));\n    ltw.addCategory(new CategoryPath(\"b\"));\n    Map <String, String> userCommitData = new HashMap<String, String>();\n    userCommitData.put(\"testing\", \"1 2 3\");\n    ltw.commit(userCommitData);\n    ltw.close();\n    DirectoryReader r = IndexReader.open(dir);\n    assertEquals(\"2 categories plus root should have been committed to the underlying directory\", 3, r.numDocs());\n    Map <String, String> readUserCommitData = r.getCommitUserData();\n    assertTrue(\"wrong value extracted from commit data\", \n        \"1 2 3\".equals(readUserCommitData.get(\"testing\")));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCommitUserData() throws Exception {\n    // Verifies that committed data is retrievable\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter ltw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    assertFalse(IndexReader.indexExists(dir));\n    ltw.commit(); // first commit, so that an index will be created\n    ltw.addCategory(new CategoryPath(\"a\"));\n    ltw.addCategory(new CategoryPath(\"b\"));\n    Map <String, String> userCommitData = new HashMap<String, String>();\n    userCommitData.put(\"testing\", \"1 2 3\");\n    ltw.commit(userCommitData);\n    ltw.close();\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(\"2 categories plus root should have been committed to the underlying directory\", 3, r.numDocs());\n    Map <String, String> readUserCommitData = r.getCommitUserData();\n    assertTrue(\"wrong value extracted from commit data\", \n        \"1 2 3\".equals(readUserCommitData.get(\"testing\")));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"438e995b4e32916f631722aab36254146830fefb","date":1328903827,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testCommitUserData().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testCommitUserData().mjava","sourceNew":"  @Test\n  public void testCommitUserData() throws Exception {\n    // Verifies that committed data is retrievable\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter ltw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    assertFalse(DirectoryReader.indexExists(dir));\n    ltw.commit(); // first commit, so that an index will be created\n    ltw.addCategory(new CategoryPath(\"a\"));\n    ltw.addCategory(new CategoryPath(\"b\"));\n    Map <String, String> userCommitData = new HashMap<String, String>();\n    userCommitData.put(\"testing\", \"1 2 3\");\n    ltw.commit(userCommitData);\n    ltw.close();\n    DirectoryReader r = IndexReader.open(dir);\n    assertEquals(\"2 categories plus root should have been committed to the underlying directory\", 3, r.numDocs());\n    Map <String, String> readUserCommitData = r.getIndexCommit().getUserData();\n    assertTrue(\"wrong value extracted from commit data\", \n        \"1 2 3\".equals(readUserCommitData.get(\"testing\")));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCommitUserData() throws Exception {\n    // Verifies that committed data is retrievable\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter ltw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    assertFalse(DirectoryReader.indexExists(dir));\n    ltw.commit(); // first commit, so that an index will be created\n    ltw.addCategory(new CategoryPath(\"a\"));\n    ltw.addCategory(new CategoryPath(\"b\"));\n    Map <String, String> userCommitData = new HashMap<String, String>();\n    userCommitData.put(\"testing\", \"1 2 3\");\n    ltw.commit(userCommitData);\n    ltw.close();\n    DirectoryReader r = IndexReader.open(dir);\n    assertEquals(\"2 categories plus root should have been committed to the underlying directory\", 3, r.numDocs());\n    Map <String, String> readUserCommitData = r.getCommitUserData();\n    assertTrue(\"wrong value extracted from commit data\", \n        \"1 2 3\".equals(readUserCommitData.get(\"testing\")));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e26e3b5080bfb6fcabdc46d0072efe441de1a21b","date":1329396896,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testCommitUserData().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testCommitUserData().mjava","sourceNew":"  @Test\n  public void testCommitUserData() throws Exception {\n    // Verifies taxonomy commit data\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    taxoWriter.addCategory(new CategoryPath(\"a\"));\n    taxoWriter.addCategory(new CategoryPath(\"b\"));\n    Map <String, String> userCommitData = new HashMap<String, String>();\n    userCommitData.put(\"testing\", \"1 2 3\");\n    taxoWriter.commit(userCommitData);\n    taxoWriter.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(\"2 categories plus root should have been committed to the underlying directory\", 3, r.numDocs());\n    Map <String, String> readUserCommitData = r.getIndexCommit().getUserData();\n    assertTrue(\"wrong value extracted from commit data\", \n        \"1 2 3\".equals(readUserCommitData.get(\"testing\")));\n    assertNotNull(\"index.create.time not found in commitData\", readUserCommitData.get(DirectoryTaxonomyWriter.INDEX_CREATE_TIME));\n    r.close();\n    \n    // open DirTaxoWriter again and commit, INDEX_CREATE_TIME should still exist\n    // in the commit data, otherwise DirTaxoReader.refresh() might not detect\n    // that the taxonomy index has been recreated.\n    taxoWriter = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    taxoWriter.addCategory(new CategoryPath(\"c\")); // add a category so that commit will happen\n    taxoWriter.commit(new HashMap<String, String>(){{\n      put(\"just\", \"data\");\n    }});\n    taxoWriter.close();\n    \n    r = DirectoryReader.open(dir);\n    readUserCommitData = r.getIndexCommit().getUserData();\n    assertNotNull(\"index.create.time not found in commitData\", readUserCommitData.get(DirectoryTaxonomyWriter.INDEX_CREATE_TIME));\n    r.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCommitUserData() throws Exception {\n    // Verifies that committed data is retrievable\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter ltw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    assertFalse(DirectoryReader.indexExists(dir));\n    ltw.commit(); // first commit, so that an index will be created\n    ltw.addCategory(new CategoryPath(\"a\"));\n    ltw.addCategory(new CategoryPath(\"b\"));\n    Map <String, String> userCommitData = new HashMap<String, String>();\n    userCommitData.put(\"testing\", \"1 2 3\");\n    ltw.commit(userCommitData);\n    ltw.close();\n    DirectoryReader r = IndexReader.open(dir);\n    assertEquals(\"2 categories plus root should have been committed to the underlying directory\", 3, r.numDocs());\n    Map <String, String> readUserCommitData = r.getIndexCommit().getUserData();\n    assertTrue(\"wrong value extracted from commit data\", \n        \"1 2 3\".equals(readUserCommitData.get(\"testing\")));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","89f15687f60bd49cd3d9de427e85c17fd9397d61","20b26030b0883b7f045e3350bb97bee7146f1efd"],"bugIntro":["71e1a70f18d64b93db3ef618e606d6df5062f747","78e3613d9274c0d98ca67d976e415c82e9f9cf46"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testCommitUserData().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testCommitUserData().mjava","sourceNew":"  @Test\n  public void testCommitUserData() throws Exception {\n    // Verifies taxonomy commit data\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    taxoWriter.addCategory(new CategoryPath(\"a\"));\n    taxoWriter.addCategory(new CategoryPath(\"b\"));\n    Map <String, String> userCommitData = new HashMap<String, String>();\n    userCommitData.put(\"testing\", \"1 2 3\");\n    taxoWriter.commit(userCommitData);\n    taxoWriter.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(\"2 categories plus root should have been committed to the underlying directory\", 3, r.numDocs());\n    Map <String, String> readUserCommitData = r.getIndexCommit().getUserData();\n    assertTrue(\"wrong value extracted from commit data\", \n        \"1 2 3\".equals(readUserCommitData.get(\"testing\")));\n    assertNotNull(\"index.create.time not found in commitData\", readUserCommitData.get(DirectoryTaxonomyWriter.INDEX_CREATE_TIME));\n    r.close();\n    \n    // open DirTaxoWriter again and commit, INDEX_CREATE_TIME should still exist\n    // in the commit data, otherwise DirTaxoReader.refresh() might not detect\n    // that the taxonomy index has been recreated.\n    taxoWriter = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    taxoWriter.addCategory(new CategoryPath(\"c\")); // add a category so that commit will happen\n    taxoWriter.commit(new HashMap<String, String>(){{\n      put(\"just\", \"data\");\n    }});\n    taxoWriter.close();\n    \n    r = DirectoryReader.open(dir);\n    readUserCommitData = r.getIndexCommit().getUserData();\n    assertNotNull(\"index.create.time not found in commitData\", readUserCommitData.get(DirectoryTaxonomyWriter.INDEX_CREATE_TIME));\n    r.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCommitUserData() throws Exception {\n    // Verifies taxonomy commit data\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    taxoWriter.addCategory(new CategoryPath(\"a\"));\n    taxoWriter.addCategory(new CategoryPath(\"b\"));\n    Map <String, String> userCommitData = new HashMap<String, String>();\n    userCommitData.put(\"testing\", \"1 2 3\");\n    taxoWriter.commit(userCommitData);\n    taxoWriter.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(\"2 categories plus root should have been committed to the underlying directory\", 3, r.numDocs());\n    Map <String, String> readUserCommitData = r.getIndexCommit().getUserData();\n    assertTrue(\"wrong value extracted from commit data\", \n        \"1 2 3\".equals(readUserCommitData.get(\"testing\")));\n    assertNotNull(\"index.create.time not found in commitData\", readUserCommitData.get(DirectoryTaxonomyWriter.INDEX_CREATE_TIME));\n    r.close();\n    \n    // open DirTaxoWriter again and commit, INDEX_CREATE_TIME should still exist\n    // in the commit data, otherwise DirTaxoReader.refresh() might not detect\n    // that the taxonomy index has been recreated.\n    taxoWriter = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    taxoWriter.addCategory(new CategoryPath(\"c\")); // add a category so that commit will happen\n    taxoWriter.commit(new HashMap<String, String>(){{\n      put(\"just\", \"data\");\n    }});\n    taxoWriter.close();\n    \n    r = DirectoryReader.open(dir);\n    readUserCommitData = r.getIndexCommit().getUserData();\n    assertNotNull(\"index.create.time not found in commitData\", readUserCommitData.get(DirectoryTaxonomyWriter.INDEX_CREATE_TIME));\n    r.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e26e3b5080bfb6fcabdc46d0072efe441de1a21b"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20b26030b0883b7f045e3350bb97bee7146f1efd":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"438e995b4e32916f631722aab36254146830fefb":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"e26e3b5080bfb6fcabdc46d0072efe441de1a21b":["438e995b4e32916f631722aab36254146830fefb"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","20b26030b0883b7f045e3350bb97bee7146f1efd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["20b26030b0883b7f045e3350bb97bee7146f1efd","5cab9a86bd67202d20b6adc463008c8e982b070a"],"20b26030b0883b7f045e3350bb97bee7146f1efd":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"438e995b4e32916f631722aab36254146830fefb":["e26e3b5080bfb6fcabdc46d0072efe441de1a21b"],"e26e3b5080bfb6fcabdc46d0072efe441de1a21b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["438e995b4e32916f631722aab36254146830fefb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}