{"path":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext],float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext],float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext]).mjava","sourceNew":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates, float boost) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(true);\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID)));\n        }\n      }\n\n      stats = similarity.computeWeight(boost, searcher.collectionStatistics(field),\n                                       allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(true);\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID)));\n        }\n      }\n\n      stats = similarity.computeWeight(searcher.collectionStatistics(field),\n                                       allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext],float).mjava","pathOld":"/dev/null","sourceNew":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates, float boost) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(true);\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID)));\n        }\n      }\n\n      stats = similarity.computeWeight(boost, searcher.collectionStatistics(field),\n                                       allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3119ed4143b91eaf5ac74a4dc4625f5036d472c","date":1509409932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext],float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext],float).mjava","sourceNew":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates, float boost) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(true);\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          TermStatistics stats = searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID));\n          if (stats != null) {\n            allTermStats.add(stats);\n          }\n        }\n      }\n\n      if (allTermStats.isEmpty()) {\n        stats = null; // no terms matched at all, will not use sim\n      } else {\n        stats = similarity.computeWeight(boost, searcher.collectionStatistics(field),\n                                         allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","sourceOld":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates, float boost) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(true);\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID)));\n        }\n      }\n\n      stats = similarity.computeWeight(boost, searcher.collectionStatistics(field),\n                                       allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext],float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext],float).mjava","sourceNew":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates, float boost) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          TermStatistics stats = searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID));\n          if (stats != null) {\n            allTermStats.add(stats);\n          }\n        }\n      }\n\n      if (allTermStats.isEmpty()) {\n        stats = null; // no terms matched at all, will not use sim\n      } else {\n        stats = similarity.scorer(boost, searcher.collectionStatistics(field),\n                                         allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","sourceOld":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates, float boost) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(true);\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          TermStatistics stats = searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID));\n          if (stats != null) {\n            allTermStats.add(stats);\n          }\n        }\n      }\n\n      if (allTermStats.isEmpty()) {\n        stats = null; // no terms matched at all, will not use sim\n      } else {\n        stats = similarity.computeWeight(boost, searcher.collectionStatistics(field),\n                                         allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermStates],float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext],float).mjava","sourceNew":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermStates> termStates, float boost) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          TermStatistics stats = searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID));\n          if (stats != null) {\n            allTermStats.add(stats);\n          }\n        }\n      }\n\n      if (allTermStats.isEmpty()) {\n        stats = null; // no terms matched at all, will not use sim\n      } else {\n        stats = similarity.scorer(boost, searcher.collectionStatistics(field),\n                                         allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","sourceOld":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates, float boost) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          TermStatistics stats = searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID));\n          if (stats != null) {\n            allTermStats.add(stats);\n          }\n        }\n      }\n\n      if (allTermStats.isEmpty()) {\n        stats = null; // no terms matched at all, will not use sim\n      } else {\n        stats = similarity.scorer(boost, searcher.collectionStatistics(field),\n                                         allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext],float).mjava","sourceNew":null,"sourceOld":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates, float boost) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(true);\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          TermStatistics stats = searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID));\n          if (stats != null) {\n            allTermStats.add(stats);\n          }\n        }\n      }\n\n      if (allTermStats.isEmpty()) {\n        stats = null; // no terms matched at all, will not use sim\n      } else {\n        stats = similarity.computeWeight(boost, searcher.collectionStatistics(field),\n                                         allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c","a6e9f769521480a623f897c0d59089b919fa4239"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"a6e9f769521480a623f897c0d59089b919fa4239":["68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}