{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","commits":[{"id":"54f531dff997ea7763360cb59f5ccadc6811b519","date":1457742562,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = -90 + 180.0 * random().nextDouble();\n      double lonRaw = -180 + 360.0 * random().nextDouble();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n      double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(new LatLonPoint(\"field\", lat, lon));\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n        double distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      Sort sort = new Sort(LatLonPoint.newDistanceSort(\"field\", lat, lon), \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336","b9e52892242a8c82e1b0c1bd4f1d404366b0501c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"575856a9f007b9c35d0113c9e18151b554709ef2","date":1457776622,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = -90 + 180.0 * random().nextDouble();\n      double lonRaw = -180 + 360.0 * random().nextDouble();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n      double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(new LatLonPoint(\"field\", lat, lon));\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n        double distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      Sort sort = new Sort(LatLonPoint.newDistanceSort(\"field\", lat, lon), \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28a45be12e8dd3ff8d9d55181fba46f6bf23d438","date":1457972359,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","sourceNew":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = -90 + 180.0 * random().nextDouble();\n      double lonRaw = -180 + 360.0 * random().nextDouble();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n      double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(new LatLonPoint(\"field\", lat, lon));\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n        double distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      Sort sort = new Sort(LatLonPoint.newDistanceSort(\"field\", lat, lon), \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = -90 + 180.0 * random().nextDouble();\n      double lonRaw = -180 + 360.0 * random().nextDouble();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n      double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(new LatLonPoint(\"field\", lat, lon));\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n        double distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      Sort sort = new Sort(LatLonPoint.newDistanceSort(\"field\", lat, lon), \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336","date":1457978905,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","sourceNew":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = -90 + 180.0 * random().nextDouble();\n        double lonRaw = -180 + 360.0 * random().nextDouble();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n        double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n\n        doc.add(new LatLonPoint(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double missingValue = random().nextBoolean() ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonPoint.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = -90 + 180.0 * random().nextDouble();\n      double lonRaw = -180 + 360.0 * random().nextDouble();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n      double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(new LatLonPoint(\"field\", lat, lon));\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n        double distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      Sort sort = new Sort(LatLonPoint.newDistanceSort(\"field\", lat, lon), \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["54f531dff997ea7763360cb59f5ccadc6811b519"],"bugIntro":["ec60431d008a694828dacb4bc3cda775b6c44a9f","98e0f1aa9ab98b9d47cc76e3d38926353c75b571"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d210c7f333402b4828c1d10dfd5457c9fe312c7d","date":1457987131,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","sourceNew":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = -90 + 180.0 * random().nextDouble();\n        double lonRaw = -180 + 360.0 * random().nextDouble();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n        double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n\n        doc.add(new LatLonPoint(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double missingValue = random().nextBoolean() ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonPoint.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = -90 + 180.0 * random().nextDouble();\n        double lonRaw = -180 + 360.0 * random().nextDouble();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n        double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n\n        doc.add(new LatLonPoint(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double missingValue = random().nextBoolean() ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonPoint.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98e0f1aa9ab98b9d47cc76e3d38926353c75b571","date":1457996850,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","sourceNew":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = -90 + 180.0 * random().nextDouble();\n        double lonRaw = -180 + 360.0 * random().nextDouble();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n        double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n\n        doc.add(new LatLonPoint(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double missingValue = Double.POSITIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonPoint.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = -90 + 180.0 * random().nextDouble();\n        double lonRaw = -180 + 360.0 * random().nextDouble();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n        double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n\n        doc.add(new LatLonPoint(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double missingValue = random().nextBoolean() ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonPoint.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","sourceNew":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = -90 + 180.0 * random().nextDouble();\n        double lonRaw = -180 + 360.0 * random().nextDouble();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n        double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n\n        doc.add(new LatLonPoint(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double missingValue = Double.POSITIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonPoint.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = -90 + 180.0 * random().nextDouble();\n        double lonRaw = -180 + 360.0 * random().nextDouble();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n        double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n\n        doc.add(new LatLonPoint(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double missingValue = Double.POSITIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonPoint.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c4a8e3b94d62e9d8d9312e45550ee15f9e39495","date":1459180853,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","sourceNew":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = GeoTestUtil.nextLatitude();\n        double lonRaw = GeoTestUtil.nextLongitude();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n        double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n\n        doc.add(new LatLonPoint(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double missingValue = Double.POSITIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonPoint.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = -90 + 180.0 * random().nextDouble();\n        double lonRaw = -180 + 360.0 * random().nextDouble();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n        double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n\n        doc.add(new LatLonPoint(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double missingValue = Double.POSITIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonPoint.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b9e52892242a8c82e1b0c1bd4f1d404366b0501c","date":1459531691,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","sourceNew":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // else seeds may not to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = GeoTestUtil.nextLatitude();\n        double lonRaw = GeoTestUtil.nextLongitude();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n        double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n\n        doc.add(new LatLonPoint(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double missingValue = Double.POSITIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonPoint.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = GeoTestUtil.nextLatitude();\n        double lonRaw = GeoTestUtil.nextLongitude();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n        double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n\n        doc.add(new LatLonPoint(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double missingValue = Double.POSITIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonPoint.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["54f531dff997ea7763360cb59f5ccadc6811b519"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737","date":1460056040,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","sourceNew":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // else seeds may not to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = GeoTestUtil.nextLatitude();\n        double lonRaw = GeoTestUtil.nextLongitude();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = decodeLatitude(encodeLatitude(latRaw));\n        double lon = decodeLongitude(encodeLongitude(lonRaw));\n\n        doc.add(new LatLonPoint(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double missingValue = Double.POSITIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonPoint.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // else seeds may not to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = GeoTestUtil.nextLatitude();\n        double lonRaw = GeoTestUtil.nextLongitude();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n        double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n\n        doc.add(new LatLonPoint(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double missingValue = Double.POSITIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonPoint.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09f15823cf5eb6e807005579e875e117d8598f95","date":1460066385,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","sourceNew":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // else seeds may not to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = GeoTestUtil.nextLatitude();\n        double lonRaw = GeoTestUtil.nextLongitude();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = decodeLatitude(encodeLatitude(latRaw));\n        double lon = decodeLongitude(encodeLongitude(lonRaw));\n\n        doc.add(new LatLonPoint(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double missingValue = Double.POSITIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonPoint.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // else seeds may not to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = GeoTestUtil.nextLatitude();\n        double lonRaw = GeoTestUtil.nextLongitude();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n        double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n\n        doc.add(new LatLonPoint(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double missingValue = Double.POSITIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonPoint.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc75470f235495b4ac71f43bba9b503023f7f2d0","date":1461532530,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","sourceNew":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // else seeds may not to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = GeoTestUtil.nextLatitude();\n        double lonRaw = GeoTestUtil.nextLongitude();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = decodeLatitude(encodeLatitude(latRaw));\n        double lon = decodeLongitude(encodeLongitude(lonRaw));\n\n        doc.add(new LatLonDocValuesField(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double missingValue = Double.POSITIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonDocValuesField.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // else seeds may not to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = GeoTestUtil.nextLatitude();\n        double lonRaw = GeoTestUtil.nextLongitude();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = decodeLatitude(encodeLatitude(latRaw));\n        double lon = decodeLongitude(encodeLongitude(lonRaw));\n\n        doc.add(new LatLonPoint(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double missingValue = Double.POSITIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonPoint.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","sourceNew":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // else seeds may not to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = GeoTestUtil.nextLatitude();\n        double lonRaw = GeoTestUtil.nextLongitude();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = decodeLatitude(encodeLatitude(latRaw));\n        double lon = decodeLongitude(encodeLongitude(lonRaw));\n\n        doc.add(new LatLonDocValuesField(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double missingValue = Double.POSITIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonDocValuesField.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // else seeds may not to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = GeoTestUtil.nextLatitude();\n        double lonRaw = GeoTestUtil.nextLongitude();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = decodeLatitude(encodeLatitude(latRaw));\n        double lon = decodeLongitude(encodeLongitude(lonRaw));\n\n        doc.add(new LatLonPoint(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double missingValue = Double.POSITIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonPoint.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88b0212386fe531136816706dc37dc49b9dbf7dc","date":1532560226,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#doRandomTest(int,int).mjava","sourceNew":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // else seeds may not to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = GeoTestUtil.nextLatitude();\n        double lonRaw = GeoTestUtil.nextLongitude();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = decodeLatitude(encodeLatitude(latRaw));\n        double lon = decodeLongitude(encodeLongitude(lonRaw));\n\n        doc.add(new LatLonDocValuesField(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double missingValue = Double.POSITIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonDocValuesField.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // else seeds may not to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        double latRaw = GeoTestUtil.nextLatitude();\n        double lonRaw = GeoTestUtil.nextLongitude();\n        // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n        double lat = decodeLatitude(encodeLatitude(latRaw));\n        double lon = decodeLongitude(encodeLongitude(lonRaw));\n\n        doc.add(new LatLonDocValuesField(\"field\", lat, lon));\n        doc.add(new StoredField(\"lat\", lat));\n        doc.add(new StoredField(\"lon\", lon));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double missingValue = Double.POSITIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"lat\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docLatitude = targetDoc.getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = targetDoc.getField(\"lon\").numericValue().doubleValue();\n          distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = LatLonDocValuesField.newDistanceSort(\"field\", lat, lon);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d210c7f333402b4828c1d10dfd5457c9fe312c7d":["fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336"],"28a45be12e8dd3ff8d9d55181fba46f6bf23d438":["575856a9f007b9c35d0113c9e18151b554709ef2"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["09f15823cf5eb6e807005579e875e117d8598f95","cc75470f235495b4ac71f43bba9b503023f7f2d0"],"575856a9f007b9c35d0113c9e18151b554709ef2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","54f531dff997ea7763360cb59f5ccadc6811b519"],"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737":["b9e52892242a8c82e1b0c1bd4f1d404366b0501c"],"98e0f1aa9ab98b9d47cc76e3d38926353c75b571":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336":["28a45be12e8dd3ff8d9d55181fba46f6bf23d438"],"8c4a8e3b94d62e9d8d9312e45550ee15f9e39495":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["98e0f1aa9ab98b9d47cc76e3d38926353c75b571"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"54f531dff997ea7763360cb59f5ccadc6811b519":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b9e52892242a8c82e1b0c1bd4f1d404366b0501c":["8c4a8e3b94d62e9d8d9312e45550ee15f9e39495"],"cc75470f235495b4ac71f43bba9b503023f7f2d0":["09f15823cf5eb6e807005579e875e117d8598f95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"09f15823cf5eb6e807005579e875e117d8598f95":["b9e52892242a8c82e1b0c1bd4f1d404366b0501c","ed48f9723ad1b29c351ea43b5a2c8f90c3a45737"]},"commit2Childs":{"d210c7f333402b4828c1d10dfd5457c9fe312c7d":["98e0f1aa9ab98b9d47cc76e3d38926353c75b571"],"28a45be12e8dd3ff8d9d55181fba46f6bf23d438":["fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"575856a9f007b9c35d0113c9e18151b554709ef2":["28a45be12e8dd3ff8d9d55181fba46f6bf23d438"],"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737":["09f15823cf5eb6e807005579e875e117d8598f95"],"98e0f1aa9ab98b9d47cc76e3d38926353c75b571":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"8c4a8e3b94d62e9d8d9312e45550ee15f9e39495":["b9e52892242a8c82e1b0c1bd4f1d404366b0501c"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["8c4a8e3b94d62e9d8d9312e45550ee15f9e39495"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["575856a9f007b9c35d0113c9e18151b554709ef2","54f531dff997ea7763360cb59f5ccadc6811b519"],"54f531dff997ea7763360cb59f5ccadc6811b519":["575856a9f007b9c35d0113c9e18151b554709ef2"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b9e52892242a8c82e1b0c1bd4f1d404366b0501c":["ed48f9723ad1b29c351ea43b5a2c8f90c3a45737","09f15823cf5eb6e807005579e875e117d8598f95"],"cc75470f235495b4ac71f43bba9b503023f7f2d0":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"09f15823cf5eb6e807005579e875e117d8598f95":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","cc75470f235495b4ac71f43bba9b503023f7f2d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}