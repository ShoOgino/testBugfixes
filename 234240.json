{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","commits":[{"id":"6ba2b0062c52d2287d625a2a3f922ed4f8697f4e","date":1359040590,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","pathOld":"/dev/null","sourceNew":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = ((HttpSolrServer) clients.get(0)).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) clients.get(0)).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", 2);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, 2);\n    String collectionName = \"nodes_used_collection\";\n\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(\"nodes_used_collection\", numShardsNumReplicaList , null);\n    \n    List<String> createNodeList = new ArrayList<String>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n    \n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(\"nodes_used_collection\");\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    assertEquals(createNodeList.toString(), 1, createNodeList.size());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ff0a5e4b4eeeb7a0faf4cdfba397bb540a04feb","date":1359060677,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","pathOld":"/dev/null","sourceNew":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = ((HttpSolrServer) clients.get(0)).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) clients.get(0)).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", 2);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, 2);\n    String collectionName = \"nodes_used_collection\";\n\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(\"nodes_used_collection\", numShardsNumReplicaList , null);\n    \n    List<String> createNodeList = new ArrayList<String>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n    \n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(\"nodes_used_collection\");\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    assertEquals(createNodeList.toString(), 1, createNodeList.size());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cfa38e36fa296bb93d77df7d5556257dffa4535","date":1362635543,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","sourceNew":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", 2);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, 2);\n    String collectionName = \"nodes_used_collection\";\n\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(\"nodes_used_collection\", numShardsNumReplicaList , null);\n    \n    List<String> createNodeList = new ArrayList<String>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n    \n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(\"nodes_used_collection\");\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    assertEquals(createNodeList.toString(), 1, createNodeList.size());\n\n  }\n\n","sourceOld":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = ((HttpSolrServer) clients.get(0)).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) clients.get(0)).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", 2);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, 2);\n    String collectionName = \"nodes_used_collection\";\n\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(\"nodes_used_collection\", numShardsNumReplicaList , null);\n    \n    List<String> createNodeList = new ArrayList<String>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n    \n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(\"nodes_used_collection\");\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    assertEquals(createNodeList.toString(), 1, createNodeList.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eeda7e62e149f90eee8895af874c74efa7d4852","date":1375293182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","sourceNew":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", 2);\n    params.set(REPLICATION_FACTOR, 2);\n    String collectionName = \"nodes_used_collection\";\n\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(\"nodes_used_collection\", numShardsNumReplicaList , null);\n\n    List<String> createNodeList = new ArrayList<String>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n\n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(\"nodes_used_collection\");\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    assertEquals(createNodeList.toString(), 1, createNodeList.size());\n\n  }\n\n","sourceOld":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", 2);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, 2);\n    String collectionName = \"nodes_used_collection\";\n\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(\"nodes_used_collection\", numShardsNumReplicaList , null);\n    \n    List<String> createNodeList = new ArrayList<String>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n    \n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(\"nodes_used_collection\");\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    assertEquals(createNodeList.toString(), 1, createNodeList.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","sourceNew":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", 2);\n    params.set(REPLICATION_FACTOR, 2);\n    String collectionName = \"nodes_used_collection\";\n\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(\"nodes_used_collection\", numShardsNumReplicaList , null);\n\n    List<String> createNodeList = new ArrayList<String>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n\n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(\"nodes_used_collection\");\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    assertEquals(createNodeList.toString(), 1, createNodeList.size());\n\n  }\n\n","sourceOld":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", 2);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, 2);\n    String collectionName = \"nodes_used_collection\";\n\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(\"nodes_used_collection\", numShardsNumReplicaList , null);\n    \n    List<String> createNodeList = new ArrayList<String>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n    \n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(\"nodes_used_collection\");\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    assertEquals(createNodeList.toString(), 1, createNodeList.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a82d855abc18f7ee3e1ec359d8f256c8c86977a","date":1381347960,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","sourceNew":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", 2);\n    params.set(REPLICATION_FACTOR, 2);\n    String collectionName = \"nodes_used_collection\";\n\n    params.set(\"name\", collectionName);\n    \n    if (secondConfigSet) {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n    \n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(\"nodes_used_collection\", numShardsNumReplicaList , null);\n\n    List<String> createNodeList = new ArrayList<String>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n\n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(\"nodes_used_collection\");\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    assertEquals(createNodeList.toString(), 1, createNodeList.size());\n\n  }\n\n","sourceOld":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", 2);\n    params.set(REPLICATION_FACTOR, 2);\n    String collectionName = \"nodes_used_collection\";\n\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(\"nodes_used_collection\", numShardsNumReplicaList , null);\n\n    List<String> createNodeList = new ArrayList<String>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n\n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(\"nodes_used_collection\");\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    assertEquals(createNodeList.toString(), 1, createNodeList.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","sourceNew":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", 2);\n    params.set(REPLICATION_FACTOR, 2);\n    String collectionName = \"nodes_used_collection\";\n\n    params.set(\"name\", collectionName);\n    \n    if (secondConfigSet) {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n    \n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(\"nodes_used_collection\", numShardsNumReplicaList , null);\n\n    List<String> createNodeList = new ArrayList<>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n\n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(\"nodes_used_collection\");\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    assertEquals(createNodeList.toString(), 1, createNodeList.size());\n\n  }\n\n","sourceOld":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", 2);\n    params.set(REPLICATION_FACTOR, 2);\n    String collectionName = \"nodes_used_collection\";\n\n    params.set(\"name\", collectionName);\n    \n    if (secondConfigSet) {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n    \n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(\"nodes_used_collection\", numShardsNumReplicaList , null);\n\n    List<String> createNodeList = new ArrayList<String>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n\n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(\"nodes_used_collection\");\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    assertEquals(createNodeList.toString(), 1, createNodeList.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3a46663789411cdf016145a96a40cf861798ae3","date":1395119088,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","sourceNew":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(NUM_SLICES, 2);\n    params.set(REPLICATION_FACTOR, 2);\n    params.set(MAX_SHARDS_PER_NODE, 1000);\n    String collectionName = NODES_USED_COLLECTION;\n\n    params.set(\"name\", collectionName);\n    \n    if (secondConfigSet) {\n      params.set(COLLECTION_CONFIG_NAME, \"conf1\");\n    }\n    \n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(NODES_USED_COLLECTION, numShardsNumReplicaList , null);\n\n    List<String> createNodeList = new ArrayList<>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n\n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(NODES_USED_COLLECTION);\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    printLayout();\n    // 2x2 collection + control means we should be on shardCount + 1 - 4\n    assertEquals(createNodeList.toString(), Math.max(0, shardCount + 1 - 4), createNodeList.size());\n\n  }\n\n","sourceOld":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", 2);\n    params.set(REPLICATION_FACTOR, 2);\n    String collectionName = \"nodes_used_collection\";\n\n    params.set(\"name\", collectionName);\n    \n    if (secondConfigSet) {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n    \n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(\"nodes_used_collection\", numShardsNumReplicaList , null);\n\n    List<String> createNodeList = new ArrayList<>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n\n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(\"nodes_used_collection\");\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    assertEquals(createNodeList.toString(), 1, createNodeList.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"963b0a9b072593721af39e1d9b815fba17e88e7f","date":1395120846,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","sourceNew":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", 2);\n    params.set(REPLICATION_FACTOR, 2);\n    String collectionName = \"nodes_used_collection\";\n\n    params.set(\"name\", collectionName);\n    \n    if (secondConfigSet) {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n    \n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(\"nodes_used_collection\", numShardsNumReplicaList , null);\n\n    List<String> createNodeList = new ArrayList<>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n\n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(\"nodes_used_collection\");\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    assertEquals(createNodeList.toString(), 1, createNodeList.size());\n\n  }\n\n","sourceOld":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(NUM_SLICES, 2);\n    params.set(REPLICATION_FACTOR, 2);\n    params.set(MAX_SHARDS_PER_NODE, 1000);\n    String collectionName = NODES_USED_COLLECTION;\n\n    params.set(\"name\", collectionName);\n    \n    if (secondConfigSet) {\n      params.set(COLLECTION_CONFIG_NAME, \"conf1\");\n    }\n    \n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(NODES_USED_COLLECTION, numShardsNumReplicaList , null);\n\n    List<String> createNodeList = new ArrayList<>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n\n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(NODES_USED_COLLECTION);\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    printLayout();\n    // 2x2 collection + control means we should be on shardCount + 1 - 4\n    assertEquals(createNodeList.toString(), Math.max(0, shardCount + 1 - 4), createNodeList.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","sourceNew":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", 2);\n    params.set(REPLICATION_FACTOR, 2);\n    String collectionName = \"nodes_used_collection\";\n\n    params.set(\"name\", collectionName);\n    \n    if (secondConfigSet) {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n    \n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrClient(\"\", baseUrl).request(request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(\"nodes_used_collection\", numShardsNumReplicaList , null);\n\n    List<String> createNodeList = new ArrayList<>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n\n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(\"nodes_used_collection\");\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    assertEquals(createNodeList.toString(), 1, createNodeList.size());\n\n  }\n\n","sourceOld":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", 2);\n    params.set(REPLICATION_FACTOR, 2);\n    String collectionName = \"nodes_used_collection\";\n\n    params.set(\"name\", collectionName);\n    \n    if (secondConfigSet) {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n    \n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(\"nodes_used_collection\", numShardsNumReplicaList , null);\n\n    List<String> createNodeList = new ArrayList<>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n\n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(\"nodes_used_collection\");\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    assertEquals(createNodeList.toString(), 1, createNodeList.size());\n\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","sourceNew":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", 2);\n    params.set(REPLICATION_FACTOR, 2);\n    String collectionName = \"nodes_used_collection\";\n\n    params.set(\"name\", collectionName);\n    \n    if (secondConfigSet) {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n    \n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    makeRequest(baseUrl, request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(\"nodes_used_collection\", numShardsNumReplicaList , null);\n\n    List<String> createNodeList = new ArrayList<>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n\n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(\"nodes_used_collection\");\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    assertEquals(createNodeList.toString(), 1, createNodeList.size());\n\n  }\n\n","sourceOld":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", 2);\n    params.set(REPLICATION_FACTOR, 2);\n    String collectionName = \"nodes_used_collection\";\n\n    params.set(\"name\", collectionName);\n    \n    if (secondConfigSet) {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n    \n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrClient(\"\", baseUrl).request(request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(\"nodes_used_collection\", numShardsNumReplicaList , null);\n\n    List<String> createNodeList = new ArrayList<>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n\n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(\"nodes_used_collection\");\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    assertEquals(createNodeList.toString(), 1, createNodeList.size());\n\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","sourceNew":null,"sourceOld":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", 2);\n    params.set(REPLICATION_FACTOR, 2);\n    String collectionName = \"nodes_used_collection\";\n\n    params.set(\"name\", collectionName);\n    \n    if (secondConfigSet) {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n    \n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    makeRequest(baseUrl, request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(\"nodes_used_collection\", numShardsNumReplicaList , null);\n\n    List<String> createNodeList = new ArrayList<>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n\n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(\"nodes_used_collection\");\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    assertEquals(createNodeList.toString(), 1, createNodeList.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNodesUsedByCreate().mjava","sourceNew":null,"sourceOld":"  private void testNodesUsedByCreate() throws Exception {\n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", 2);\n    params.set(REPLICATION_FACTOR, 2);\n    String collectionName = \"nodes_used_collection\";\n\n    params.set(\"name\", collectionName);\n    \n    if (secondConfigSet) {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n    \n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    makeRequest(baseUrl, request);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(2);\n    checkForCollection(\"nodes_used_collection\", numShardsNumReplicaList , null);\n\n    List<String> createNodeList = new ArrayList<>();\n\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState()\n        .getLiveNodes();\n    \n    for (String node : liveNodes) {\n      createNodeList.add(node);\n    }\n\n    DocCollection col = cloudClient.getZkStateReader().getClusterState().getCollection(\"nodes_used_collection\");\n    Collection<Slice> slices = col.getSlices();\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for (Replica replica : replicas) {\n        createNodeList.remove(replica.getNodeName());\n      }\n    }\n    assertEquals(createNodeList.toString(), 1, createNodeList.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["6784d0cc613dc1ee97030eaaa5e0754edc22d164","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["1cfa38e36fa296bb93d77df7d5556257dffa4535","1eeda7e62e149f90eee8895af874c74efa7d4852"],"d3a46663789411cdf016145a96a40cf861798ae3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["6ba2b0062c52d2287d625a2a3f922ed4f8697f4e"],"bafca15d8e408346a67f4282ad1143b88023893b":["963b0a9b072593721af39e1d9b815fba17e88e7f"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["1cfa38e36fa296bb93d77df7d5556257dffa4535"],"5a82d855abc18f7ee3e1ec359d8f256c8c86977a":["1eeda7e62e149f90eee8895af874c74efa7d4852"],"963b0a9b072593721af39e1d9b815fba17e88e7f":["d3a46663789411cdf016145a96a40cf861798ae3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bafca15d8e408346a67f4282ad1143b88023893b"],"6ff0a5e4b4eeeb7a0faf4cdfba397bb540a04feb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6ba2b0062c52d2287d625a2a3f922ed4f8697f4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"6ba2b0062c52d2287d625a2a3f922ed4f8697f4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d3a46663789411cdf016145a96a40cf861798ae3"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"d3a46663789411cdf016145a96a40cf861798ae3":["963b0a9b072593721af39e1d9b815fba17e88e7f"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","1eeda7e62e149f90eee8895af874c74efa7d4852"],"bafca15d8e408346a67f4282ad1143b88023893b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"5a82d855abc18f7ee3e1ec359d8f256c8c86977a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"963b0a9b072593721af39e1d9b815fba17e88e7f":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ff0a5e4b4eeeb7a0faf4cdfba397bb540a04feb","6ba2b0062c52d2287d625a2a3f922ed4f8697f4e"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"6ff0a5e4b4eeeb7a0faf4cdfba397bb540a04feb":[],"6ba2b0062c52d2287d625a2a3f922ed4f8697f4e":["1cfa38e36fa296bb93d77df7d5556257dffa4535","6ff0a5e4b4eeeb7a0faf4cdfba397bb540a04feb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","6ff0a5e4b4eeeb7a0faf4cdfba397bb540a04feb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}