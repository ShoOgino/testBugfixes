{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],long,int).mjava","commits":[{"id":"e50f0da93c6dcee20d8792637b1786e2c34975e9","date":1400182475,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],long,int).mjava","pathOld":"/dev/null","sourceNew":"  // Pushes next'd frame or seek'd frame; we later\n  // lazy-load the frame only when needed\n  Frame pushFrame(FST.Arc<BytesRef> arc, long fp, int length) throws IOException {\n    final Frame f = getFrame(1+currentFrame.ord);\n    f.arc = arc;\n    if (f.fpOrig == fp && f.nextEnt != -1) {\n      //if (DEBUG) System.out.println(\"      push reused frame ord=\" + f.ord + \" fp=\" + f.fp + \" isFloor?=\" + f.isFloor + \" hasTerms=\" + f.hasTerms + \" pref=\" + term + \" nextEnt=\" + f.nextEnt + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength + \" term.length=\" + term.length + \" vs prefix=\" + f.prefix);\n      if (f.prefix > targetBeforeCurrentLength) {\n        f.rewind();\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        skip rewind!\");\n        // }\n      }\n      assert length == f.prefix;\n    } else {\n      f.nextEnt = -1;\n      f.prefix = length;\n      f.state.termBlockOrd = 0;\n      f.fpOrig = f.fp = fp;\n      f.lastSubFP = -1;\n      // if (DEBUG) {\n      //   final int sav = term.length;\n      //   term.length = length;\n      //   System.out.println(\"      push new frame ord=\" + f.ord + \" fp=\" + f.fp + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" pref=\" + brToString(term));\n      //   term.length = sav;\n      // }\n    }\n\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4","date":1400183621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],long,int).mjava","sourceNew":"  // Pushes next'd frame or seek'd frame; we later\n  // lazy-load the frame only when needed\n  SegmentTermsEnumFrame pushFrame(FST.Arc<BytesRef> arc, long fp, int length) throws IOException {\n    final SegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.arc = arc;\n    if (f.fpOrig == fp && f.nextEnt != -1) {\n      //if (DEBUG) System.out.println(\"      push reused frame ord=\" + f.ord + \" fp=\" + f.fp + \" isFloor?=\" + f.isFloor + \" hasTerms=\" + f.hasTerms + \" pref=\" + term + \" nextEnt=\" + f.nextEnt + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength + \" term.length=\" + term.length + \" vs prefix=\" + f.prefix);\n      if (f.prefix > targetBeforeCurrentLength) {\n        f.rewind();\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        skip rewind!\");\n        // }\n      }\n      assert length == f.prefix;\n    } else {\n      f.nextEnt = -1;\n      f.prefix = length;\n      f.state.termBlockOrd = 0;\n      f.fpOrig = f.fp = fp;\n      f.lastSubFP = -1;\n      // if (DEBUG) {\n      //   final int sav = term.length;\n      //   term.length = length;\n      //   System.out.println(\"      push new frame ord=\" + f.ord + \" fp=\" + f.fp + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" pref=\" + brToString(term));\n      //   term.length = sav;\n      // }\n    }\n\n    return f;\n  }\n\n","sourceOld":"  // Pushes next'd frame or seek'd frame; we later\n  // lazy-load the frame only when needed\n  Frame pushFrame(FST.Arc<BytesRef> arc, long fp, int length) throws IOException {\n    final Frame f = getFrame(1+currentFrame.ord);\n    f.arc = arc;\n    if (f.fpOrig == fp && f.nextEnt != -1) {\n      //if (DEBUG) System.out.println(\"      push reused frame ord=\" + f.ord + \" fp=\" + f.fp + \" isFloor?=\" + f.isFloor + \" hasTerms=\" + f.hasTerms + \" pref=\" + term + \" nextEnt=\" + f.nextEnt + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength + \" term.length=\" + term.length + \" vs prefix=\" + f.prefix);\n      if (f.prefix > targetBeforeCurrentLength) {\n        f.rewind();\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        skip rewind!\");\n        // }\n      }\n      assert length == f.prefix;\n    } else {\n      f.nextEnt = -1;\n      f.prefix = length;\n      f.state.termBlockOrd = 0;\n      f.fpOrig = f.fp = fp;\n      f.lastSubFP = -1;\n      // if (DEBUG) {\n      //   final int sav = term.length;\n      //   term.length = length;\n      //   System.out.println(\"      push new frame ord=\" + f.ord + \" fp=\" + f.fp + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" pref=\" + brToString(term));\n      //   term.length = sav;\n      // }\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3251bdaf728baf81f779183e464984bc769ed9c7","date":1400494940,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],long,int).mjava","sourceNew":"  // Pushes next'd frame or seek'd frame; we later\n  // lazy-load the frame only when needed\n  SegmentTermsEnumFrame pushFrame(FST.Arc<BytesRef> arc, long fp, int length) throws IOException {\n    final SegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.arc = arc;\n    if (f.fpOrig == fp && f.nextEnt != -1) {\n      //if (DEBUG) System.out.println(\"      push reused frame ord=\" + f.ord + \" fp=\" + f.fp + \" isFloor?=\" + f.isFloor + \" hasTerms=\" + f.hasTerms + \" pref=\" + term + \" nextEnt=\" + f.nextEnt + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength + \" term.length=\" + term.length + \" vs prefix=\" + f.prefix);\n      //if (f.prefix > targetBeforeCurrentLength) {\n      if (f.ord > targetBeforeCurrentLength) {\n        f.rewind();\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        skip rewind!\");\n        // }\n      }\n      assert length == f.prefix;\n    } else {\n      f.nextEnt = -1;\n      f.prefix = length;\n      f.state.termBlockOrd = 0;\n      f.fpOrig = f.fp = fp;\n      f.lastSubFP = -1;\n      // if (DEBUG) {\n      //   final int sav = term.length;\n      //   term.length = length;\n      //   System.out.println(\"      push new frame ord=\" + f.ord + \" fp=\" + f.fp + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" pref=\" + brToString(term));\n      //   term.length = sav;\n      // }\n    }\n\n    return f;\n  }\n\n","sourceOld":"  // Pushes next'd frame or seek'd frame; we later\n  // lazy-load the frame only when needed\n  SegmentTermsEnumFrame pushFrame(FST.Arc<BytesRef> arc, long fp, int length) throws IOException {\n    final SegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.arc = arc;\n    if (f.fpOrig == fp && f.nextEnt != -1) {\n      //if (DEBUG) System.out.println(\"      push reused frame ord=\" + f.ord + \" fp=\" + f.fp + \" isFloor?=\" + f.isFloor + \" hasTerms=\" + f.hasTerms + \" pref=\" + term + \" nextEnt=\" + f.nextEnt + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength + \" term.length=\" + term.length + \" vs prefix=\" + f.prefix);\n      if (f.prefix > targetBeforeCurrentLength) {\n        f.rewind();\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        skip rewind!\");\n        // }\n      }\n      assert length == f.prefix;\n    } else {\n      f.nextEnt = -1;\n      f.prefix = length;\n      f.state.termBlockOrd = 0;\n      f.fpOrig = f.fp = fp;\n      f.lastSubFP = -1;\n      // if (DEBUG) {\n      //   final int sav = term.length;\n      //   term.length = length;\n      //   System.out.println(\"      push new frame ord=\" + f.ord + \" fp=\" + f.fp + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" pref=\" + brToString(term));\n      //   term.length = sav;\n      // }\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],long,int).mjava","pathOld":"/dev/null","sourceNew":"  // Pushes next'd frame or seek'd frame; we later\n  // lazy-load the frame only when needed\n  SegmentTermsEnumFrame pushFrame(FST.Arc<BytesRef> arc, long fp, int length) throws IOException {\n    final SegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.arc = arc;\n    if (f.fpOrig == fp && f.nextEnt != -1) {\n      //if (DEBUG) System.out.println(\"      push reused frame ord=\" + f.ord + \" fp=\" + f.fp + \" isFloor?=\" + f.isFloor + \" hasTerms=\" + f.hasTerms + \" pref=\" + term + \" nextEnt=\" + f.nextEnt + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength + \" term.length=\" + term.length + \" vs prefix=\" + f.prefix);\n      //if (f.prefix > targetBeforeCurrentLength) {\n      if (f.ord > targetBeforeCurrentLength) {\n        f.rewind();\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        skip rewind!\");\n        // }\n      }\n      assert length == f.prefix;\n    } else {\n      f.nextEnt = -1;\n      f.prefix = length;\n      f.state.termBlockOrd = 0;\n      f.fpOrig = f.fp = fp;\n      f.lastSubFP = -1;\n      // if (DEBUG) {\n      //   final int sav = term.length;\n      //   term.length = length;\n      //   System.out.println(\"      push new frame ord=\" + f.ord + \" fp=\" + f.fp + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" pref=\" + brToString(term));\n      //   term.length = sav;\n      // }\n    }\n\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3251bdaf728baf81f779183e464984bc769ed9c7"],"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4":["e50f0da93c6dcee20d8792637b1786e2c34975e9"],"e50f0da93c6dcee20d8792637b1786e2c34975e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"3251bdaf728baf81f779183e464984bc769ed9c7":["3f4ef2de7b0fd59ef22e20888773ad260c90bfb4"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4":["3251bdaf728baf81f779183e464984bc769ed9c7"],"e50f0da93c6dcee20d8792637b1786e2c34975e9":["3f4ef2de7b0fd59ef22e20888773ad260c90bfb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","e50f0da93c6dcee20d8792637b1786e2c34975e9"],"3251bdaf728baf81f779183e464984bc769ed9c7":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}