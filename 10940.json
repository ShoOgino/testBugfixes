{"path":"lucene/src/java/org/apache/lucene/search/HitQueue#getSentinelObject().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/HitQueue#getSentinelObject().mjava","pathOld":"src/java/org/apache/lucene/search/HitQueue#getSentinelObject().mjava","sourceNew":"  // Returns null if prePopulate is false.\n  @Override\n  protected ScoreDoc getSentinelObject() {\n    // Always set the doc Id to MAX_VALUE so that it won't be favored by\n    // lessThan. This generally should not happen since if score is not NEG_INF,\n    // TopScoreDocCollector will always add the object to the queue.\n    return !prePopulate ? null : new ScoreDoc(Integer.MAX_VALUE, Float.NEGATIVE_INFINITY);\n  }\n\n","sourceOld":"  // Returns null if prePopulate is false.\n  @Override\n  protected ScoreDoc getSentinelObject() {\n    // Always set the doc Id to MAX_VALUE so that it won't be favored by\n    // lessThan. This generally should not happen since if score is not NEG_INF,\n    // TopScoreDocCollector will always add the object to the queue.\n    return !prePopulate ? null : new ScoreDoc(Integer.MAX_VALUE, Float.NEGATIVE_INFINITY);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da2c39cf47fc10dc839d8c37890a2b009081e76","date":1299662336,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/HitQueue#getSentinelObject().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/HitQueue#getSentinelObject().mjava","sourceNew":"  @Override\n  protected ScoreDoc getSentinelObject() {\n    // Always set the doc Id to MAX_VALUE so that it won't be favored by\n    // lessThan. This generally should not happen since if score is not NEG_INF,\n    // TopScoreDocCollector will always add the object to the queue.\n    return new ScoreDoc(Integer.MAX_VALUE, Float.NEGATIVE_INFINITY);\n  }\n\n","sourceOld":"  // Returns null if prePopulate is false.\n  @Override\n  protected ScoreDoc getSentinelObject() {\n    // Always set the doc Id to MAX_VALUE so that it won't be favored by\n    // lessThan. This generally should not happen since if score is not NEG_INF,\n    // TopScoreDocCollector will always add the object to the queue.\n    return !prePopulate ? null : new ScoreDoc(Integer.MAX_VALUE, Float.NEGATIVE_INFINITY);\n  }\n\n","bugFix":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/HitQueue#getSentinelObject().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/HitQueue#getSentinelObject().mjava","sourceNew":"  @Override\n  protected ScoreDoc getSentinelObject() {\n    // Always set the doc Id to MAX_VALUE so that it won't be favored by\n    // lessThan. This generally should not happen since if score is not NEG_INF,\n    // TopScoreDocCollector will always add the object to the queue.\n    return new ScoreDoc(Integer.MAX_VALUE, Float.NEGATIVE_INFINITY);\n  }\n\n","sourceOld":"  // Returns null if prePopulate is false.\n  @Override\n  protected ScoreDoc getSentinelObject() {\n    // Always set the doc Id to MAX_VALUE so that it won't be favored by\n    // lessThan. This generally should not happen since if score is not NEG_INF,\n    // TopScoreDocCollector will always add the object to the queue.\n    return !prePopulate ? null : new ScoreDoc(Integer.MAX_VALUE, Float.NEGATIVE_INFINITY);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/HitQueue#getSentinelObject().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/HitQueue#getSentinelObject().mjava","sourceNew":"  @Override\n  protected ScoreDoc getSentinelObject() {\n    // Always set the doc Id to MAX_VALUE so that it won't be favored by\n    // lessThan. This generally should not happen since if score is not NEG_INF,\n    // TopScoreDocCollector will always add the object to the queue.\n    return new ScoreDoc(Integer.MAX_VALUE, Float.NEGATIVE_INFINITY);\n  }\n\n","sourceOld":"  // Returns null if prePopulate is false.\n  @Override\n  protected ScoreDoc getSentinelObject() {\n    // Always set the doc Id to MAX_VALUE so that it won't be favored by\n    // lessThan. This generally should not happen since if score is not NEG_INF,\n    // TopScoreDocCollector will always add the object to the queue.\n    return !prePopulate ? null : new ScoreDoc(Integer.MAX_VALUE, Float.NEGATIVE_INFINITY);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/HitQueue#getSentinelObject().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/HitQueue#getSentinelObject().mjava","sourceNew":"  @Override\n  protected ScoreDoc getSentinelObject() {\n    // Always set the doc Id to MAX_VALUE so that it won't be favored by\n    // lessThan. This generally should not happen since if score is not NEG_INF,\n    // TopScoreDocCollector will always add the object to the queue.\n    return new ScoreDoc(Integer.MAX_VALUE, Float.NEGATIVE_INFINITY);\n  }\n\n","sourceOld":"  @Override\n  protected ScoreDoc getSentinelObject() {\n    // Always set the doc Id to MAX_VALUE so that it won't be favored by\n    // lessThan. This generally should not happen since if score is not NEG_INF,\n    // TopScoreDocCollector will always add the object to the queue.\n    return new ScoreDoc(Integer.MAX_VALUE, Float.NEGATIVE_INFINITY);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da2c39cf47fc10dc839d8c37890a2b009081e76":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["9454a6510e2db155fb01faa5c049b06ece95fab9","1da2c39cf47fc10dc839d8c37890a2b009081e76"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["9454a6510e2db155fb01faa5c049b06ece95fab9","1da2c39cf47fc10dc839d8c37890a2b009081e76"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1da2c39cf47fc10dc839d8c37890a2b009081e76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1da2c39cf47fc10dc839d8c37890a2b009081e76":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1da2c39cf47fc10dc839d8c37890a2b009081e76","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}