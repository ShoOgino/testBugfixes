{"path":"solr/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","commits":[{"id":"64cae353de680169c133e0a9f4debee071ad3241","date":1303312298,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","pathOld":"/dev/null","sourceNew":"  /**\r   * Tests that both update.chain and update.processor works\r   * NOTE: This test will fail when support for update.processor is removed and should then be removed\r   */\r  public void testUpdateProcessorParamDeprecation() throws Exception {\r    SolrCore core = h.getCore();\r    \r    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\r    handler.init( null );\r    \r    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\r    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\r\r    // Add a single document\r    SolrQueryResponse rsp = new SolrQueryResponse();\r    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\r    \r    // First check that the old param behaves as it should\r    try {\r    \thandler.handleRequestBody(req, rsp);\r    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\r    } catch (Exception e) {\r    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\r    }\r    \r    // Then check that the new param behaves correctly\r    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\r    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \r    req.setParams(params);\r    try {\r    \thandler.handleRequestBody(req, rsp);\r    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\r    } catch (Exception e) {\r    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\r    }\r    \r  }\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","pathOld":"/dev/null","sourceNew":"  /**\r   * Tests that both update.chain and update.processor works\r   * NOTE: This test will fail when support for update.processor is removed and should then be removed\r   */\r  public void testUpdateProcessorParamDeprecation() throws Exception {\r    SolrCore core = h.getCore();\r    \r    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\r    handler.init( null );\r    \r    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\r    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\r\r    // Add a single document\r    SolrQueryResponse rsp = new SolrQueryResponse();\r    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\r    \r    // First check that the old param behaves as it should\r    try {\r    \thandler.handleRequestBody(req, rsp);\r    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\r    } catch (Exception e) {\r    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\r    }\r    \r    // Then check that the new param behaves correctly\r    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\r    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \r    req.setParams(params);\r    try {\r    \thandler.handleRequestBody(req, rsp);\r    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\r    } catch (Exception e) {\r    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\r    }\r    \r  }\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5112619c0471f45787126cb808fbf19fbe1c4fd7","date":1303933218,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","pathOld":"solr/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","sourceNew":"  /**\n   * Tests that both update.chain and update.processor works\n   * NOTE: This test will fail when support for update.processor is removed and should then be removed\n   */\n  public void testUpdateProcessorParamDeprecation() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","sourceOld":"  /**\r   * Tests that both update.chain and update.processor works\r   * NOTE: This test will fail when support for update.processor is removed and should then be removed\r   */\r  public void testUpdateProcessorParamDeprecation() throws Exception {\r    SolrCore core = h.getCore();\r    \r    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\r    handler.init( null );\r    \r    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\r    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\r\r    // Add a single document\r    SolrQueryResponse rsp = new SolrQueryResponse();\r    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\r    \r    // First check that the old param behaves as it should\r    try {\r    \thandler.handleRequestBody(req, rsp);\r    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\r    } catch (Exception e) {\r    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\r    }\r    \r    // Then check that the new param behaves correctly\r    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\r    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \r    req.setParams(params);\r    try {\r    \thandler.handleRequestBody(req, rsp);\r    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\r    } catch (Exception e) {\r    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\r    }\r    \r  }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae4a6669d73678b396f2a88aef88690f3263bb25","date":1303934929,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","pathOld":"solr/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","sourceNew":"  /**\n   * Tests that both update.chain and update.processor works\n   * NOTE: This test will fail when support for update.processor is removed and should then be removed\n   */\n  public void testUpdateProcessorParamDeprecation() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","sourceOld":"  /**\r   * Tests that both update.chain and update.processor works\r   * NOTE: This test will fail when support for update.processor is removed and should then be removed\r   */\r  public void testUpdateProcessorParamDeprecation() throws Exception {\r    SolrCore core = h.getCore();\r    \r    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\r    handler.init( null );\r    \r    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\r    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\r\r    // Add a single document\r    SolrQueryResponse rsp = new SolrQueryResponse();\r    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\r    \r    // First check that the old param behaves as it should\r    try {\r    \thandler.handleRequestBody(req, rsp);\r    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\r    } catch (Exception e) {\r    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\r    }\r    \r    // Then check that the new param behaves correctly\r    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\r    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \r    req.setParams(params);\r    try {\r    \thandler.handleRequestBody(req, rsp);\r    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\r    } catch (Exception e) {\r    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\r    }\r    \r  }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests that both update.chain and update.processor works\n   * NOTE: This test will fail when support for update.processor is removed and should then be removed\n   */\n  public void testUpdateProcessorParamDeprecation() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests that both update.chain and update.processor works\n   * NOTE: This test will fail when support for update.processor is removed and should then be removed\n   */\n  public void testUpdateProcessorParamDeprecation() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","pathOld":"solr/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","sourceNew":"  /**\n   * Tests that both update.chain and update.processor works\n   * NOTE: This test will fail when support for update.processor is removed and should then be removed\n   */\n  public void testUpdateProcessorParamDeprecation() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Tests that both update.chain and update.processor works\n   * NOTE: This test will fail when support for update.processor is removed and should then be removed\n   */\n  public void testUpdateProcessorParamDeprecation() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","pathOld":"solr/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","sourceNew":"  /**\n   * Tests that both update.chain and update.processor works\n   * NOTE: This test will fail when support for update.processor is removed and should then be removed\n   */\n  public void testUpdateProcessorParamDeprecation() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Tests that both update.chain and update.processor works\n   * NOTE: This test will fail when support for update.processor is removed and should then be removed\n   */\n  public void testUpdateProcessorParamDeprecation() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","pathOld":"solr/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","sourceNew":"  /**\n   * Tests that both update.chain and update.processor works\n   * NOTE: This test will fail when support for update.processor is removed and should then be removed\n   */\n  public void testUpdateProcessorParamDeprecation() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Tests that both update.chain and update.processor works\n   * NOTE: This test will fail when support for update.processor is removed and should then be removed\n   */\n  public void testUpdateProcessorParamDeprecation() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"c26f00b574427b55127e869b935845554afde1fa":["5112619c0471f45787126cb808fbf19fbe1c4fd7","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5112619c0471f45787126cb808fbf19fbe1c4fd7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5112619c0471f45787126cb808fbf19fbe1c4fd7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["5112619c0471f45787126cb808fbf19fbe1c4fd7"],"5112619c0471f45787126cb808fbf19fbe1c4fd7":["64cae353de680169c133e0a9f4debee071ad3241"],"ae4a6669d73678b396f2a88aef88690f3263bb25":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","64cae353de680169c133e0a9f4debee071ad3241"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"64cae353de680169c133e0a9f4debee071ad3241":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","64cae353de680169c133e0a9f4debee071ad3241"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5112619c0471f45787126cb808fbf19fbe1c4fd7":["c26f00b574427b55127e869b935845554afde1fa","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ae4a6669d73678b396f2a88aef88690f3263bb25":[],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["ae4a6669d73678b396f2a88aef88690f3263bb25"],"64cae353de680169c133e0a9f4debee071ad3241":["5112619c0471f45787126cb808fbf19fbe1c4fd7","d493718201f0d0c54c773fb323d87bbd2fbffe41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","ae4a6669d73678b396f2a88aef88690f3263bb25","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}