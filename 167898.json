{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],BytesReader).mjava","commits":[{"id":"87e78f3c129251e74ecc2ff73a32de0f27cf09d5","date":1358006150,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],FST.BytesReader).mjava","sourceNew":"  /**\n   * Checks if <code>arc</code>'s target state is in expanded (or vector) format. \n   * \n   * @return Returns <code>true</code> if <code>arc</code> points to a state in an\n   * expanded array format.\n   */\n  boolean isExpandedTarget(Arc<T> follow, BytesReader in) throws IOException {\n    if (!targetHasArcs(follow)) {\n      return false;\n    } else {\n      in.setPosition(getNodeAddress(follow.target));\n      return in.readByte() == ARCS_AS_FIXED_ARRAY;\n    }\n  }\n\n","sourceOld":"  /**\n   * Checks if <code>arc</code>'s target state is in expanded (or vector) format. \n   * \n   * @return Returns <code>true</code> if <code>arc</code> points to a state in an\n   * expanded array format.\n   */\n  boolean isExpandedTarget(Arc<T> follow, FST.BytesReader in) throws IOException {\n    if (!targetHasArcs(follow)) {\n      return false;\n    } else {\n      in.pos = getNodeAddress(follow.target);\n      return in.readByte() == ARCS_AS_FIXED_ARRAY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],FST.BytesReader).mjava","sourceNew":"  /**\n   * Checks if <code>arc</code>'s target state is in expanded (or vector) format. \n   * \n   * @return Returns <code>true</code> if <code>arc</code> points to a state in an\n   * expanded array format.\n   */\n  boolean isExpandedTarget(Arc<T> follow, BytesReader in) throws IOException {\n    if (!targetHasArcs(follow)) {\n      return false;\n    } else {\n      in.setPosition(getNodeAddress(follow.target));\n      return in.readByte() == ARCS_AS_FIXED_ARRAY;\n    }\n  }\n\n","sourceOld":"  /**\n   * Checks if <code>arc</code>'s target state is in expanded (or vector) format. \n   * \n   * @return Returns <code>true</code> if <code>arc</code> points to a state in an\n   * expanded array format.\n   */\n  boolean isExpandedTarget(Arc<T> follow, FST.BytesReader in) throws IOException {\n    if (!targetHasArcs(follow)) {\n      return false;\n    } else {\n      in.pos = getNodeAddress(follow.target);\n      return in.readByte() == ARCS_AS_FIXED_ARRAY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6244579a467d5f2673ac98265d74bddbea1a8114","date":1478786509,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],BytesReader).mjava","sourceNew":"  /**\n   * Checks if <code>arc</code>'s target state is in expanded (or vector) format. \n   * \n   * @return Returns <code>true</code> if <code>arc</code> points to a state in an\n   * expanded array format.\n   */\n  boolean isExpandedTarget(Arc<T> follow, BytesReader in) throws IOException {\n    if (!targetHasArcs(follow)) {\n      return false;\n    } else {\n      in.setPosition(follow.target);\n      return in.readByte() == ARCS_AS_FIXED_ARRAY;\n    }\n  }\n\n","sourceOld":"  /**\n   * Checks if <code>arc</code>'s target state is in expanded (or vector) format. \n   * \n   * @return Returns <code>true</code> if <code>arc</code> points to a state in an\n   * expanded array format.\n   */\n  boolean isExpandedTarget(Arc<T> follow, BytesReader in) throws IOException {\n    if (!targetHasArcs(follow)) {\n      return false;\n    } else {\n      in.setPosition(getNodeAddress(follow.target));\n      return in.readByte() == ARCS_AS_FIXED_ARRAY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],BytesReader).mjava","sourceNew":"  /**\n   * Checks if <code>arc</code>'s target state is in expanded (or vector) format. \n   * \n   * @return Returns <code>true</code> if <code>arc</code> points to a state in an\n   * expanded array format.\n   */\n  boolean isExpandedTarget(Arc<T> follow, BytesReader in) throws IOException {\n    if (!targetHasArcs(follow)) {\n      return false;\n    } else {\n      in.setPosition(follow.target);\n      return in.readByte() == ARCS_AS_FIXED_ARRAY;\n    }\n  }\n\n","sourceOld":"  /**\n   * Checks if <code>arc</code>'s target state is in expanded (or vector) format. \n   * \n   * @return Returns <code>true</code> if <code>arc</code> points to a state in an\n   * expanded array format.\n   */\n  boolean isExpandedTarget(Arc<T> follow, BytesReader in) throws IOException {\n    if (!targetHasArcs(follow)) {\n      return false;\n    } else {\n      in.setPosition(getNodeAddress(follow.target));\n      return in.readByte() == ARCS_AS_FIXED_ARRAY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae67e1f82a53594208ca929f382ee861dad3d7a8","date":1557134375,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],BytesReader).mjava","sourceNew":"  /**\n   * Checks if <code>arc</code>'s target state is in expanded (or vector) format. \n   * \n   * @return Returns <code>true</code> if <code>arc</code> points to a state in an\n   * expanded array format.\n   */\n  boolean isExpandedTarget(Arc<T> follow, BytesReader in) throws IOException {\n    if (!targetHasArcs(follow)) {\n      return false;\n    } else {\n      in.setPosition(follow.target);\n      byte flags = in.readByte();\n      return flags == ARCS_AS_ARRAY_PACKED || flags == ARCS_AS_ARRAY_WITH_GAPS;\n    }\n  }\n\n","sourceOld":"  /**\n   * Checks if <code>arc</code>'s target state is in expanded (or vector) format. \n   * \n   * @return Returns <code>true</code> if <code>arc</code> points to a state in an\n   * expanded array format.\n   */\n  boolean isExpandedTarget(Arc<T> follow, BytesReader in) throws IOException {\n    if (!targetHasArcs(follow)) {\n      return false;\n    } else {\n      in.setPosition(follow.target);\n      return in.readByte() == ARCS_AS_FIXED_ARRAY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],BytesReader).mjava","sourceNew":"  /**\n   * Checks if <code>arc</code>'s target state is in expanded (or vector) format. \n   * \n   * @return Returns <code>true</code> if <code>arc</code> points to a state in an\n   * expanded array format.\n   */\n  boolean isExpandedTarget(Arc<T> follow, BytesReader in) throws IOException {\n    if (!targetHasArcs(follow)) {\n      return false;\n    } else {\n      in.setPosition(follow.target());\n      byte flags = in.readByte();\n      return flags == ARCS_AS_ARRAY_PACKED || flags == ARCS_AS_ARRAY_WITH_GAPS;\n    }\n  }\n\n","sourceOld":"  /**\n   * Checks if <code>arc</code>'s target state is in expanded (or vector) format. \n   * \n   * @return Returns <code>true</code> if <code>arc</code> points to a state in an\n   * expanded array format.\n   */\n  boolean isExpandedTarget(Arc<T> follow, BytesReader in) throws IOException {\n    if (!targetHasArcs(follow)) {\n      return false;\n    } else {\n      in.setPosition(follow.target);\n      byte flags = in.readByte();\n      return flags == ARCS_AS_ARRAY_PACKED || flags == ARCS_AS_ARRAY_WITH_GAPS;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],BytesReader).mjava","sourceNew":"  /**\n   * Checks if <code>arc</code>'s target state is in expanded (or vector) format. \n   * \n   * @return Returns <code>true</code> if <code>arc</code> points to a state in an\n   * expanded array format.\n   */\n  boolean isExpandedTarget(Arc<T> follow, BytesReader in) throws IOException {\n    if (!targetHasArcs(follow)) {\n      return false;\n    } else {\n      in.setPosition(follow.target());\n      byte flags = in.readByte();\n      return flags == ARCS_AS_ARRAY_PACKED || flags == ARCS_AS_ARRAY_WITH_GAPS;\n    }\n  }\n\n","sourceOld":"  /**\n   * Checks if <code>arc</code>'s target state is in expanded (or vector) format. \n   * \n   * @return Returns <code>true</code> if <code>arc</code> points to a state in an\n   * expanded array format.\n   */\n  boolean isExpandedTarget(Arc<T> follow, BytesReader in) throws IOException {\n    if (!targetHasArcs(follow)) {\n      return false;\n    } else {\n      in.setPosition(follow.target);\n      byte flags = in.readByte();\n      return flags == ARCS_AS_ARRAY_PACKED || flags == ARCS_AS_ARRAY_WITH_GAPS;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e19a701ad1d5fd2dd25e0f79bb5d81df864116b","date":1571070636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],BytesReader).mjava","sourceNew":"  /**\n   * Checks if <code>arc</code>'s target state is in expanded (or vector) format. \n   * \n   * @return Returns <code>true</code> if <code>arc</code> points to a state in an\n   * expanded array format.\n   */\n  boolean isExpandedTarget(Arc<T> follow, BytesReader in) throws IOException {\n    if (!targetHasArcs(follow)) {\n      return false;\n    } else {\n      in.setPosition(follow.target());\n      byte flags = in.readByte();\n      return flags == ARCS_AS_ARRAY_PACKED;\n    }\n  }\n\n","sourceOld":"  /**\n   * Checks if <code>arc</code>'s target state is in expanded (or vector) format. \n   * \n   * @return Returns <code>true</code> if <code>arc</code> points to a state in an\n   * expanded array format.\n   */\n  boolean isExpandedTarget(Arc<T> follow, BytesReader in) throws IOException {\n    if (!targetHasArcs(follow)) {\n      return false;\n    } else {\n      in.setPosition(follow.target());\n      byte flags = in.readByte();\n      return flags == ARCS_AS_ARRAY_PACKED || flags == ARCS_AS_ARRAY_WITH_GAPS;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],BytesReader).mjava","sourceNew":"  /**\n   * Checks if <code>arc</code>'s target state is in expanded (or vector) format. \n   * \n   * @return Returns <code>true</code> if <code>arc</code> points to a state in an\n   * expanded array format.\n   */\n  boolean isExpandedTarget(Arc<T> follow, BytesReader in) throws IOException {\n    if (!targetHasArcs(follow)) {\n      return false;\n    } else {\n      in.setPosition(follow.target());\n      byte flags = in.readByte();\n      return flags == ARCS_AS_ARRAY_PACKED;\n    }\n  }\n\n","sourceOld":"  /**\n   * Checks if <code>arc</code>'s target state is in expanded (or vector) format. \n   * \n   * @return Returns <code>true</code> if <code>arc</code> points to a state in an\n   * expanded array format.\n   */\n  boolean isExpandedTarget(Arc<T> follow, BytesReader in) throws IOException {\n    if (!targetHasArcs(follow)) {\n      return false;\n    } else {\n      in.setPosition(follow.target());\n      byte flags = in.readByte();\n      return flags == ARCS_AS_ARRAY_PACKED || flags == ARCS_AS_ARRAY_WITH_GAPS;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#isExpandedTarget(Arc[T],BytesReader).mjava","sourceNew":"  /**\n   * Returns whether <code>arc</code>'s target points to a node in expanded format (fixed length arcs).\n   */\n  boolean isExpandedTarget(Arc<T> follow, BytesReader in) throws IOException {\n    if (!targetHasArcs(follow)) {\n      return false;\n    } else {\n      in.setPosition(follow.target());\n      byte flags = in.readByte();\n      return flags == ARCS_FOR_BINARY_SEARCH || flags == ARCS_FOR_DIRECT_ADDRESSING;\n    }\n  }\n\n","sourceOld":"  /**\n   * Checks if <code>arc</code>'s target state is in expanded (or vector) format. \n   * \n   * @return Returns <code>true</code> if <code>arc</code> points to a state in an\n   * expanded array format.\n   */\n  boolean isExpandedTarget(Arc<T> follow, BytesReader in) throws IOException {\n    if (!targetHasArcs(follow)) {\n      return false;\n    } else {\n      in.setPosition(follow.target());\n      byte flags = in.readByte();\n      return flags == ARCS_AS_ARRAY_PACKED;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6244579a467d5f2673ac98265d74bddbea1a8114":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5","6244579a467d5f2673ac98265d74bddbea1a8114"],"71d31a7d5773508492505519bb5230b87c8937ad":["3e19a701ad1d5fd2dd25e0f79bb5d81df864116b"],"3e19a701ad1d5fd2dd25e0f79bb5d81df864116b":["54204c8a3ca26aeafd273139fc29baf70d0f6786"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["6244579a467d5f2673ac98265d74bddbea1a8114"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["ae67e1f82a53594208ca929f382ee861dad3d7a8","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71d31a7d5773508492505519bb5230b87c8937ad"],"b0b597c65628ca9e73913a07e81691f8229bae35":["54204c8a3ca26aeafd273139fc29baf70d0f6786","3e19a701ad1d5fd2dd25e0f79bb5d81df864116b"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["3e19a701ad1d5fd2dd25e0f79bb5d81df864116b","f8061ddd97f3352007d927dae445884a6f3d857b","b0b597c65628ca9e73913a07e81691f8229bae35"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8917bfede3b4ca30f4305c1e391e9218959cd723","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"6244579a467d5f2673ac98265d74bddbea1a8114":["199dfa410f1fdbfd3294106b04096cce5ed34b21","ae67e1f82a53594208ca929f382ee861dad3d7a8"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["8917bfede3b4ca30f4305c1e391e9218959cd723","6244579a467d5f2673ac98265d74bddbea1a8114","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"71d31a7d5773508492505519bb5230b87c8937ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e19a701ad1d5fd2dd25e0f79bb5d81df864116b":["71d31a7d5773508492505519bb5230b87c8937ad","b0b597c65628ca9e73913a07e81691f8229bae35"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","199dfa410f1fdbfd3294106b04096cce5ed34b21","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}