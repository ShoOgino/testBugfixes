{"path":"solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader#skip(long).mjava","commits":[{"id":"80931fa1f3b04650bde7b20e61b02063a7093ced","date":1333130683,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader#skip(long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Skips char in the stream\n   * \n   * ATTENTION: invalidates the line-counter !!!!!\n   * \n   * @return nof skiped chars\n   */\n  public long skip(long n) throws IllegalArgumentException, IOException  {\n    \n    if (lookaheadChar == UNDEFINED) {\n      lookaheadChar = super.read();   \n    }\n    \n    // illegal argument\n    if (n < 0) {\n      throw new IllegalArgumentException(\"negative argument not supported\");  \n    }\n    \n    // no skipping\n    if (n == 0 || lookaheadChar == END_OF_STREAM) {\n      return 0;\n    } \n    \n    // skip and reread the lookahead-char\n    long skiped = 0;\n    if (n > 1) {\n      skiped = super.skip(n - 1);\n    }\n    lookaheadChar = super.read();\n    // fixme uh: we should check the skiped sequence for line-terminations...\n    lineCounter = Integer.MIN_VALUE;\n    return skiped + 1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader#skip(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader#skip(long).mjava","sourceNew":"  /**\n   * Skips char in the stream\n   * \n   * ATTENTION: invalidates the line-counter !!!!!\n   * \n   * @return nof skiped chars\n   */\n  @Override\n  public long skip(long n) throws IllegalArgumentException, IOException  {\n    \n    if (lookaheadChar == UNDEFINED) {\n      lookaheadChar = super.read();   \n    }\n    \n    // illegal argument\n    if (n < 0) {\n      throw new IllegalArgumentException(\"negative argument not supported\");  \n    }\n    \n    // no skipping\n    if (n == 0 || lookaheadChar == END_OF_STREAM) {\n      return 0;\n    } \n    \n    // skip and reread the lookahead-char\n    long skiped = 0;\n    if (n > 1) {\n      skiped = super.skip(n - 1);\n    }\n    lookaheadChar = super.read();\n    // fixme uh: we should check the skiped sequence for line-terminations...\n    lineCounter = Integer.MIN_VALUE;\n    return skiped + 1;\n  }\n\n","sourceOld":"  /**\n   * Skips char in the stream\n   * \n   * ATTENTION: invalidates the line-counter !!!!!\n   * \n   * @return nof skiped chars\n   */\n  public long skip(long n) throws IllegalArgumentException, IOException  {\n    \n    if (lookaheadChar == UNDEFINED) {\n      lookaheadChar = super.read();   \n    }\n    \n    // illegal argument\n    if (n < 0) {\n      throw new IllegalArgumentException(\"negative argument not supported\");  \n    }\n    \n    // no skipping\n    if (n == 0 || lookaheadChar == END_OF_STREAM) {\n      return 0;\n    } \n    \n    // skip and reread the lookahead-char\n    long skiped = 0;\n    if (n > 1) {\n      skiped = super.skip(n - 1);\n    }\n    lookaheadChar = super.read();\n    // fixme uh: we should check the skiped sequence for line-terminations...\n    lineCounter = Integer.MIN_VALUE;\n    return skiped + 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader#skip(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader#skip(long).mjava","sourceNew":"  /**\n   * Skips char in the stream\n   * \n   * ATTENTION: invalidates the line-counter !!!!!\n   * \n   * @return nof skiped chars\n   */\n  @Override\n  public long skip(long n) throws IllegalArgumentException, IOException  {\n    \n    if (lookaheadChar == UNDEFINED) {\n      lookaheadChar = super.read();   \n    }\n    \n    // illegal argument\n    if (n < 0) {\n      throw new IllegalArgumentException(\"negative argument not supported\");  \n    }\n    \n    // no skipping\n    if (n == 0 || lookaheadChar == END_OF_STREAM) {\n      return 0;\n    } \n    \n    // skip and reread the lookahead-char\n    long skiped = 0;\n    if (n > 1) {\n      skiped = super.skip(n - 1);\n    }\n    lookaheadChar = super.read();\n    // fixme uh: we should check the skiped sequence for line-terminations...\n    lineCounter = Integer.MIN_VALUE;\n    return skiped + 1;\n  }\n\n","sourceOld":"  /**\n   * Skips char in the stream\n   * \n   * ATTENTION: invalidates the line-counter !!!!!\n   * \n   * @return nof skiped chars\n   */\n  public long skip(long n) throws IllegalArgumentException, IOException  {\n    \n    if (lookaheadChar == UNDEFINED) {\n      lookaheadChar = super.read();   \n    }\n    \n    // illegal argument\n    if (n < 0) {\n      throw new IllegalArgumentException(\"negative argument not supported\");  \n    }\n    \n    // no skipping\n    if (n == 0 || lookaheadChar == END_OF_STREAM) {\n      return 0;\n    } \n    \n    // skip and reread the lookahead-char\n    long skiped = 0;\n    if (n > 1) {\n      skiped = super.skip(n - 1);\n    }\n    lookaheadChar = super.read();\n    // fixme uh: we should check the skiped sequence for line-terminations...\n    lineCounter = Integer.MIN_VALUE;\n    return skiped + 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["80931fa1f3b04650bde7b20e61b02063a7093ced","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80931fa1f3b04650bde7b20e61b02063a7093ced":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7530de27b87b961b51f01bd1299b7004d46e8823"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"80931fa1f3b04650bde7b20e61b02063a7093ced":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}