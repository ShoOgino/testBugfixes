{"path":"solr/core/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    restrictProps(SORT_MISSING_FIRST | SORT_MISSING_LAST);\n    String ftypeS = getArg(\"valType\", args);\n    if (ftypeS!=null) {\n      ftype = schema.getFieldTypes().get(ftypeS);\n      if (ftype==null || !(ftype instanceof FloatField)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Only float (FloatField) is currently supported as external field type.  got \" + ftypeS);\n      }\n    }   \n    keyFieldName = args.remove(\"keyField\");\n    String defValS = args.remove(\"defVal\");\n    defVal = defValS==null ? 0 : Float.parseFloat(defValS);\n    this.schema = schema;\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    restrictProps(SORT_MISSING_FIRST | SORT_MISSING_LAST);\n    String ftypeS = getArg(\"valType\", args);\n    if (ftypeS!=null) {\n      ftype = schema.getFieldTypes().get(ftypeS);\n      if (ftype==null || !(ftype instanceof FloatField)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Only float (FloatField) is currently supported as external field type.  got \" + ftypeS);\n      }\n    }   \n    keyFieldName = args.remove(\"keyField\");\n    String defValS = args.remove(\"defVal\");\n    defVal = defValS==null ? 0 : Float.parseFloat(defValS);\n    this.schema = schema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    restrictProps(SORT_MISSING_FIRST | SORT_MISSING_LAST);\n    String ftypeS = getArg(\"valType\", args);\n    if (ftypeS!=null) {\n      ftype = schema.getFieldTypes().get(ftypeS);\n      if (ftype==null || !(ftype instanceof FloatField)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Only float (FloatField) is currently supported as external field type.  got \" + ftypeS);\n      }\n    }   \n    keyFieldName = args.remove(\"keyField\");\n    String defValS = args.remove(\"defVal\");\n    defVal = defValS==null ? 0 : Float.parseFloat(defValS);\n    this.schema = schema;\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    restrictProps(SORT_MISSING_FIRST | SORT_MISSING_LAST);\n    String ftypeS = getArg(\"valType\", args);\n    if (ftypeS!=null) {\n      ftype = schema.getFieldTypes().get(ftypeS);\n      if (ftype==null || !(ftype instanceof FloatField)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Only float (FloatField) is currently supported as external field type.  got \" + ftypeS);\n      }\n    }   \n    keyFieldName = args.remove(\"keyField\");\n    String defValS = args.remove(\"defVal\");\n    defVal = defValS==null ? 0 : Float.parseFloat(defValS);\n    this.schema = schema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    restrictProps(SORT_MISSING_FIRST | SORT_MISSING_LAST);\n    String ftypeS = getArg(\"valType\", args);\n    if (ftypeS!=null) {\n      ftype = schema.getFieldTypes().get(ftypeS);\n      if (ftype==null || !(ftype instanceof FloatField)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Only float (FloatField) is currently supported as external field type.  got \" + ftypeS);\n      }\n    }   \n    keyFieldName = args.remove(\"keyField\");\n    String defValS = args.remove(\"defVal\");\n    defVal = defValS==null ? 0 : Float.parseFloat(defValS);\n    this.schema = schema;\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    restrictProps(SORT_MISSING_FIRST | SORT_MISSING_LAST);\n    String ftypeS = getArg(\"valType\", args);\n    if (ftypeS!=null) {\n      ftype = schema.getFieldTypes().get(ftypeS);\n      if (ftype==null || !(ftype instanceof FloatField)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Only float (FloatField) is currently supported as external field type.  got \" + ftypeS);\n      }\n    }   \n    keyFieldName = args.remove(\"keyField\");\n    String defValS = args.remove(\"defVal\");\n    defVal = defValS==null ? 0 : Float.parseFloat(defValS);\n    this.schema = schema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f428760ced439cc718b16a0355bdb1d33e1e86a5","date":1324133616,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    restrictProps(SORT_MISSING_FIRST | SORT_MISSING_LAST);\n    // valType has never been used for anything except to throw an error, so make it optional since the\n    // code (see getValueSource) gives you a FileFloatSource.\n    String ftypeS = args.remove(\"valType\");\n    if (ftypeS != null) {\n      ftype = schema.getFieldTypes().get(ftypeS);\n      if (ftype != null && !(ftype instanceof FloatField) && !(ftype instanceof TrieFloatField)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Only float and pfloat (Trie|Float)Field are currently supported as external field type.  Got \" + ftypeS);\n      }\n    }\n    keyFieldName = args.remove(\"keyField\");\n    String defValS = args.remove(\"defVal\");\n    defVal = defValS == null ? 0 : Float.parseFloat(defValS);\n    this.schema = schema;\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    restrictProps(SORT_MISSING_FIRST | SORT_MISSING_LAST);\n    String ftypeS = getArg(\"valType\", args);\n    if (ftypeS!=null) {\n      ftype = schema.getFieldTypes().get(ftypeS);\n      if (ftype==null || !(ftype instanceof FloatField)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Only float (FloatField) is currently supported as external field type.  got \" + ftypeS);\n      }\n    }   \n    keyFieldName = args.remove(\"keyField\");\n    String defValS = args.remove(\"defVal\");\n    defVal = defValS==null ? 0 : Float.parseFloat(defValS);\n    this.schema = schema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    restrictProps(SORT_MISSING_FIRST | SORT_MISSING_LAST);\n    // valType has never been used for anything except to throw an error, so make it optional since the\n    // code (see getValueSource) gives you a FileFloatSource.\n    String ftypeS = args.remove(\"valType\");\n    if (ftypeS != null) {\n      ftype = schema.getFieldTypes().get(ftypeS);\n      if (ftype != null && !(ftype instanceof FloatField) && !(ftype instanceof TrieFloatField)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Only float and pfloat (Trie|Float)Field are currently supported as external field type.  Got \" + ftypeS);\n      }\n    }\n    keyFieldName = args.remove(\"keyField\");\n    String defValS = args.remove(\"defVal\");\n    defVal = defValS == null ? 0 : Float.parseFloat(defValS);\n    this.schema = schema;\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    restrictProps(SORT_MISSING_FIRST | SORT_MISSING_LAST);\n    // valType has never been used for anything except to throw an error, so make it optional since the\n    // code (see getValueSource) gives you a FileFloatSource.\n    String ftypeS = args.remove(\"valType\");\n    if (ftypeS != null) {\n      ftype = schema.getFieldTypes().get(ftypeS);\n      if (ftype != null && !(ftype instanceof FloatField) && !(ftype instanceof TrieFloatField)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Only float and pfloat (Trie|Float)Field are currently supported as external field type.  Got \" + ftypeS);\n      }\n    }\n    keyFieldName = args.remove(\"keyField\");\n    String defValS = args.remove(\"defVal\");\n    defVal = defValS == null ? 0 : Float.parseFloat(defValS);\n    this.schema = schema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    restrictProps(SORT_MISSING_FIRST | SORT_MISSING_LAST);\n    // valType has never been used for anything except to throw an error, so make it optional since the\n    // code (see getValueSource) gives you a FileFloatSource.\n    String ftypeS = args.remove(\"valType\");\n    if (ftypeS != null) {\n      ftype = schema.getFieldTypes().get(ftypeS);\n      if (ftype != null && !(ftype instanceof FloatField) && !(ftype instanceof TrieFloatField)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Only float and pfloat (Trie|Float)Field are currently supported as external field type.  Got \" + ftypeS);\n      }\n    }\n    keyFieldName = args.remove(\"keyField\");\n    String defValS = args.remove(\"defVal\");\n    defVal = defValS == null ? 0 : Float.parseFloat(defValS);\n    this.schema = schema;\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    restrictProps(SORT_MISSING_FIRST | SORT_MISSING_LAST);\n    // valType has never been used for anything except to throw an error, so make it optional since the\n    // code (see getValueSource) gives you a FileFloatSource.\n    String ftypeS = args.remove(\"valType\");\n    if (ftypeS != null) {\n      ftype = schema.getFieldTypes().get(ftypeS);\n      if (ftype != null && !(ftype instanceof FloatField) && !(ftype instanceof TrieFloatField)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Only float and pfloat (Trie|Float)Field are currently supported as external field type.  Got \" + ftypeS);\n      }\n    }\n    keyFieldName = args.remove(\"keyField\");\n    String defValS = args.remove(\"defVal\");\n    defVal = defValS == null ? 0 : Float.parseFloat(defValS);\n    this.schema = schema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    restrictProps(SORT_MISSING_FIRST | SORT_MISSING_LAST);\n    // valType has never been used for anything except to throw an error, so make it optional since the\n    // code (see getValueSource) gives you a FileFloatSource.\n    String ftypeS = args.remove(\"valType\");\n    if (ftypeS != null) {\n      ftype = schema.getFieldTypes().get(ftypeS);\n      if (ftype != null && !(ftype instanceof TrieFloatField)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Only float (TrieFloatField) is currently supported as external field type.  Got \" + ftypeS);\n      }\n    }\n    keyFieldName = args.remove(\"keyField\");\n    String defValS = args.remove(\"defVal\");\n    defVal = defValS == null ? 0 : Float.parseFloat(defValS);\n    this.schema = schema;\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    restrictProps(SORT_MISSING_FIRST | SORT_MISSING_LAST);\n    // valType has never been used for anything except to throw an error, so make it optional since the\n    // code (see getValueSource) gives you a FileFloatSource.\n    String ftypeS = args.remove(\"valType\");\n    if (ftypeS != null) {\n      ftype = schema.getFieldTypes().get(ftypeS);\n      if (ftype != null && !(ftype instanceof FloatField) && !(ftype instanceof TrieFloatField)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Only float and pfloat (Trie|Float)Field are currently supported as external field type.  Got \" + ftypeS);\n      }\n    }\n    keyFieldName = args.remove(\"keyField\");\n    String defValS = args.remove(\"defVal\");\n    defVal = defValS == null ? 0 : Float.parseFloat(defValS);\n    this.schema = schema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0942e3d045973516b6a9ded0e5b232e84c3a06","date":1498061602,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    restrictProps(SORT_MISSING_FIRST | SORT_MISSING_LAST);\n    keyFieldName = args.remove(\"keyField\");\n    String defValS = args.remove(\"defVal\");\n    defVal = defValS == null ? 0 : Float.parseFloat(defValS);\n    this.schema = schema;\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    restrictProps(SORT_MISSING_FIRST | SORT_MISSING_LAST);\n    // valType has never been used for anything except to throw an error, so make it optional since the\n    // code (see getValueSource) gives you a FileFloatSource.\n    String ftypeS = args.remove(\"valType\");\n    if (ftypeS != null) {\n      ftype = schema.getFieldTypes().get(ftypeS);\n      if (ftype != null && !(ftype instanceof TrieFloatField)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Only float (TrieFloatField) is currently supported as external field type.  Got \" + ftypeS);\n      }\n    }\n    keyFieldName = args.remove(\"keyField\");\n    String defValS = args.remove(\"defVal\");\n    defVal = defValS == null ? 0 : Float.parseFloat(defValS);\n    this.schema = schema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    restrictProps(SORT_MISSING_FIRST | SORT_MISSING_LAST);\n    keyFieldName = args.remove(\"keyField\");\n    String defValS = args.remove(\"defVal\");\n    defVal = defValS == null ? 0 : Float.parseFloat(defValS);\n    this.schema = schema;\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    restrictProps(SORT_MISSING_FIRST | SORT_MISSING_LAST);\n    // valType has never been used for anything except to throw an error, so make it optional since the\n    // code (see getValueSource) gives you a FileFloatSource.\n    String ftypeS = args.remove(\"valType\");\n    if (ftypeS != null) {\n      ftype = schema.getFieldTypes().get(ftypeS);\n      if (ftype != null && !(ftype instanceof TrieFloatField)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Only float (TrieFloatField) is currently supported as external field type.  Got \" + ftypeS);\n      }\n    }\n    keyFieldName = args.remove(\"keyField\");\n    String defValS = args.remove(\"defVal\");\n    defVal = defValS == null ? 0 : Float.parseFloat(defValS);\n    this.schema = schema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ExternalFileField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    restrictProps(SORT_MISSING_FIRST | SORT_MISSING_LAST);\n    keyFieldName = args.remove(\"keyField\");\n    String defValS = args.remove(\"defVal\");\n    defVal = defValS == null ? 0 : Float.parseFloat(defValS);\n    this.schema = schema;\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    restrictProps(SORT_MISSING_FIRST | SORT_MISSING_LAST);\n    // valType has never been used for anything except to throw an error, so make it optional since the\n    // code (see getValueSource) gives you a FileFloatSource.\n    String ftypeS = args.remove(\"valType\");\n    if (ftypeS != null) {\n      ftype = schema.getFieldTypes().get(ftypeS);\n      if (ftype != null && !(ftype instanceof TrieFloatField)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Only float (TrieFloatField) is currently supported as external field type.  Got \" + ftypeS);\n      }\n    }\n    keyFieldName = args.remove(\"keyField\");\n    String defValS = args.remove(\"defVal\");\n    defVal = defValS == null ? 0 : Float.parseFloat(defValS);\n    this.schema = schema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["f428760ced439cc718b16a0355bdb1d33e1e86a5","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2106271e380c198349e0f6eac0395bb462913fab":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f428760ced439cc718b16a0355bdb1d33e1e86a5":["c26f00b574427b55127e869b935845554afde1fa"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["f428760ced439cc718b16a0355bdb1d33e1e86a5"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a0942e3d045973516b6a9ded0e5b232e84c3a06":["2106271e380c198349e0f6eac0395bb462913fab"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["2106271e380c198349e0f6eac0395bb462913fab","2a0942e3d045973516b6a9ded0e5b232e84c3a06"],"28288370235ed02234a64753cdbf0c6ec096304a":["2106271e380c198349e0f6eac0395bb462913fab","2a0942e3d045973516b6a9ded0e5b232e84c3a06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"2106271e380c198349e0f6eac0395bb462913fab":["2a0942e3d045973516b6a9ded0e5b232e84c3a06","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"c26f00b574427b55127e869b935845554afde1fa":["f428760ced439cc718b16a0355bdb1d33e1e86a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"f428760ced439cc718b16a0355bdb1d33e1e86a5":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","2106271e380c198349e0f6eac0395bb462913fab"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2a0942e3d045973516b6a9ded0e5b232e84c3a06":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}