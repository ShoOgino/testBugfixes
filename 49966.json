{"path":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.OutOfOrderScoringMaxScoreCollector#getLeafCollector(LeafReaderContext).mjava","commits":[{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.OutOfOrderScoringMaxScoreCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      docBase = context.docBase;\n\n      final LeafFieldComparator[] comparators = queue.getComparators(context);\n      final int[] reverseMul = queue.getReverseMul();\n\n      if (comparators.length == 1) {\n        return new OneComparatorLeafCollector(comparators[0], reverseMul[0]) {\n\n          @Override\n          public void collect(int doc) throws IOException {\n            final float score = scorer.score();\n            if (score > maxScore) {\n              maxScore = score;\n            }\n            ++totalHits;\n            if (queueFull) {\n              // Fastmatch: return if this hit is not competitive\n              final int cmp = reverseMul * comparator.compareBottom(doc);\n              if (cmp < 0 || (cmp == 0 && doc + docBase > bottom.doc)) {\n                return;\n              }\n\n              // This hit is competitive - replace bottom element in queue & adjustTop\n              comparator.copy(bottom.slot, doc);\n              updateBottom(doc, score);\n              comparator.setBottom(bottom.slot);\n            } else {\n              // Startup transient: queue hasn't gathered numHits yet\n              final int slot = totalHits - 1;\n              // Copy hit into queue\n              comparator.copy(slot, doc);\n              add(slot, doc, score);\n              if (queueFull) {\n                comparator.setBottom(bottom.slot);\n              }\n            }\n          }\n\n          @Override\n          public boolean acceptsDocsOutOfOrder() {\n            return true;\n          }\n        };\n      } else {\n        return new MultiComparatorLeafCollector(comparators, reverseMul) {\n\n          @Override\n          public void collect(int doc) throws IOException {\n            final float score = scorer.score();\n            if (score > maxScore) {\n              maxScore = score;\n            }\n            ++totalHits;\n            if (queueFull) {\n              // Fastmatch: return if this hit is not competitive\n              final int cmp = compareBottom(doc);\n              if (cmp < 0 || (cmp == 0 && doc + docBase > bottom.doc)) {\n                return;\n              }\n\n              // This hit is competitive - replace bottom element in queue & adjustTop\n              copy(bottom.slot, doc);\n              updateBottom(doc, score);\n              setBottom(bottom.slot);\n            } else {\n              // Startup transient: queue hasn't gathered numHits yet\n              final int slot = totalHits - 1;\n              // Copy hit into queue\n              copy(slot, doc);\n              add(slot, doc, score);\n              if (queueFull) {\n                setBottom(bottom.slot);\n              }\n            }\n          }\n\n          @Override\n          public boolean acceptsDocsOutOfOrder() {\n            return true;\n          }\n        };\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.OutOfOrderScoringMaxScoreCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      docBase = context.docBase;\n\n      final LeafFieldComparator[] comparators = queue.getComparators(context);\n      final int[] reverseMul = queue.getReverseMul();\n\n      if (comparators.length == 1) {\n        return new OneComparatorLeafCollector(comparators[0], reverseMul[0]) {\n\n          @Override\n          public void collect(int doc) throws IOException {\n            final float score = scorer.score();\n            if (score > maxScore) {\n              maxScore = score;\n            }\n            ++totalHits;\n            if (queueFull) {\n              // Fastmatch: return if this hit is not competitive\n              final int cmp = reverseMul * comparator.compareBottom(doc);\n              if (cmp < 0 || (cmp == 0 && doc + docBase > bottom.doc)) {\n                return;\n              }\n\n              // This hit is competitive - replace bottom element in queue & adjustTop\n              comparator.copy(bottom.slot, doc);\n              updateBottom(doc, score);\n              comparator.setBottom(bottom.slot);\n            } else {\n              // Startup transient: queue hasn't gathered numHits yet\n              final int slot = totalHits - 1;\n              // Copy hit into queue\n              comparator.copy(slot, doc);\n              add(slot, doc, score);\n              if (queueFull) {\n                comparator.setBottom(bottom.slot);\n              }\n            }\n          }\n\n          @Override\n          public boolean acceptsDocsOutOfOrder() {\n            return true;\n          }\n        };\n      } else {\n        return new MultiComparatorLeafCollector(comparators, reverseMul) {\n\n          @Override\n          public void collect(int doc) throws IOException {\n            final float score = scorer.score();\n            if (score > maxScore) {\n              maxScore = score;\n            }\n            ++totalHits;\n            if (queueFull) {\n              // Fastmatch: return if this hit is not competitive\n              final int cmp = compareBottom(doc);\n              if (cmp < 0 || (cmp == 0 && doc + docBase > bottom.doc)) {\n                return;\n              }\n\n              // This hit is competitive - replace bottom element in queue & adjustTop\n              copy(bottom.slot, doc);\n              updateBottom(doc, score);\n              setBottom(bottom.slot);\n            } else {\n              // Startup transient: queue hasn't gathered numHits yet\n              final int slot = totalHits - 1;\n              // Copy hit into queue\n              copy(slot, doc);\n              add(slot, doc, score);\n              if (queueFull) {\n                setBottom(bottom.slot);\n              }\n            }\n          }\n\n          @Override\n          public boolean acceptsDocsOutOfOrder() {\n            return true;\n          }\n        };\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["901e951cec2e6af4e503209a6721c8834db23279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"901e951cec2e6af4e503209a6721c8834db23279":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"]},"commit2Childs":{"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["901e951cec2e6af4e503209a6721c8834db23279"],"901e951cec2e6af4e503209a6721c8834db23279":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}