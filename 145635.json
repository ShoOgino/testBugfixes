{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#readShards(SolrZkClient,String,Slice).mjava","commits":[{"id":"3c12159f094951abca20de13adfd11224da456e1","date":1317314664,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#readShards(SolrZkClient,String,Slice).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#readShards(SolrZkClient,String).mjava","sourceNew":"  /**\n   * @param zkClient\n   * @param shardsZkPath\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException\n   */\n  private static Map<String,ZkNodeProps> readShards(SolrZkClient zkClient, String shardsZkPath, Slice oldSlice)\n      throws KeeperException, InterruptedException, IOException {\n\n    Map<String,ZkNodeProps> shardNameToProps = new HashMap<String,ZkNodeProps>();\n\n    if (zkClient.exists(shardsZkPath, null) == null) {\n      throw new IllegalStateException(\"Cannot find zk shards node that should exist:\"\n          + shardsZkPath);\n    }\n\n    List<String> shardZkPaths = zkClient.getChildren(shardsZkPath, null);\n    \n    for (String shardPath : shardZkPaths) {\n      ZkNodeProps props;\n      if (oldSlice != null && oldSlice.getShards().containsKey(shardPath)) {\n        props = oldSlice.getShards().get(shardPath);\n      } else {\n        byte[] data = zkClient.getData(shardsZkPath + \"/\" + shardPath, null,\n            null);\n        \n        props = new ZkNodeProps();\n        props.load(data);\n      }\n      \n      shardNameToProps.put(shardPath, props);\n    }\n\n    return Collections.unmodifiableMap(shardNameToProps);\n  }\n\n","sourceOld":"  /**\n   * @param zkClient\n   * @param shardsZkPath\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException\n   */\n  private static Map<String,ZkNodeProps> readShards(SolrZkClient zkClient, String shardsZkPath)\n      throws KeeperException, InterruptedException, IOException {\n\n    Map<String,ZkNodeProps> shardNameToProps = new HashMap<String,ZkNodeProps>();\n\n    if (zkClient.exists(shardsZkPath, null) == null) {\n      throw new IllegalStateException(\"Cannot find zk shards node that should exist:\"\n          + shardsZkPath);\n    }\n\n    List<String> shardZkPaths = zkClient.getChildren(shardsZkPath, null);\n    \n    for(String shardPath : shardZkPaths) {\n      byte[] data = zkClient.getData(shardsZkPath + \"/\" + shardPath, null,\n          null);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.load(data);\n      shardNameToProps.put(shardPath, props);\n    }\n\n    return Collections.unmodifiableMap(shardNameToProps);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#readShards(SolrZkClient,String,Slice).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param zkClient\n   * @param shardsZkPath\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException\n   */\n  private static Map<String,ZkNodeProps> readShards(SolrZkClient zkClient, String shardsZkPath, Slice oldSlice)\n      throws KeeperException, InterruptedException, IOException {\n\n    Map<String,ZkNodeProps> shardNameToProps = new HashMap<String,ZkNodeProps>();\n\n    if (zkClient.exists(shardsZkPath, null) == null) {\n      throw new IllegalStateException(\"Cannot find zk shards node that should exist:\"\n          + shardsZkPath);\n    }\n\n    List<String> shardZkPaths = zkClient.getChildren(shardsZkPath, null);\n    \n    for (String shardPath : shardZkPaths) {\n      ZkNodeProps props;\n      if (oldSlice != null && oldSlice.getShards().containsKey(shardPath)) {\n        props = oldSlice.getShards().get(shardPath);\n      } else {\n        byte[] data = zkClient.getData(shardsZkPath + \"/\" + shardPath, null,\n            null);\n        \n        props = new ZkNodeProps();\n        props.load(data);\n      }\n      \n      shardNameToProps.put(shardPath, props);\n    }\n\n    return Collections.unmodifiableMap(shardNameToProps);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#readShards(SolrZkClient,String,Slice).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param zkClient\n   * @param shardsZkPath\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException\n   */\n  private static Map<String,ZkNodeProps> readShards(SolrZkClient zkClient, String shardsZkPath, Slice oldSlice)\n      throws KeeperException, InterruptedException, IOException {\n\n    Map<String,ZkNodeProps> shardNameToProps = new HashMap<String,ZkNodeProps>();\n\n    if (zkClient.exists(shardsZkPath, null) == null) {\n      throw new IllegalStateException(\"Cannot find zk shards node that should exist:\"\n          + shardsZkPath);\n    }\n\n    List<String> shardZkPaths = zkClient.getChildren(shardsZkPath, null);\n    \n    for (String shardPath : shardZkPaths) {\n      ZkNodeProps props;\n      if (oldSlice != null && oldSlice.getShards().containsKey(shardPath)) {\n        props = oldSlice.getShards().get(shardPath);\n      } else {\n        byte[] data = zkClient.getData(shardsZkPath + \"/\" + shardPath, null,\n            null);\n        \n        props = new ZkNodeProps();\n        props.load(data);\n      }\n      \n      shardNameToProps.put(shardPath, props);\n    }\n\n    return Collections.unmodifiableMap(shardNameToProps);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#readShards(SolrZkClient,String,Slice).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param zkClient\n   * @param shardsZkPath\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException\n   */\n  private static Map<String,ZkNodeProps> readShards(SolrZkClient zkClient, String shardsZkPath, Slice oldSlice)\n      throws KeeperException, InterruptedException, IOException {\n\n    Map<String,ZkNodeProps> shardNameToProps = new HashMap<String,ZkNodeProps>();\n\n    if (zkClient.exists(shardsZkPath, null) == null) {\n      throw new IllegalStateException(\"Cannot find zk shards node that should exist:\"\n          + shardsZkPath);\n    }\n\n    List<String> shardZkPaths = zkClient.getChildren(shardsZkPath, null);\n    \n    for (String shardPath : shardZkPaths) {\n      ZkNodeProps props;\n      if (oldSlice != null && oldSlice.getShards().containsKey(shardPath)) {\n        props = oldSlice.getShards().get(shardPath);\n      } else {\n        byte[] data = zkClient.getData(shardsZkPath + \"/\" + shardPath, null,\n            null);\n        \n        props = new ZkNodeProps();\n        props.load(data);\n      }\n      \n      shardNameToProps.put(shardPath, props);\n    }\n\n    return Collections.unmodifiableMap(shardNameToProps);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["3c12159f094951abca20de13adfd11224da456e1","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"3c12159f094951abca20de13adfd11224da456e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["3c12159f094951abca20de13adfd11224da456e1","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["3c12159f094951abca20de13adfd11224da456e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"3c12159f094951abca20de13adfd11224da456e1":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c12159f094951abca20de13adfd11224da456e1"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}