{"path":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","commits":[{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final Map<SegmentInfoPerCommit,Boolean> oldSegments = new HashMap<SegmentInfoPerCommit,Boolean>();\n    for (final SegmentInfoPerCommit si : segmentInfos) {\n      final Boolean v = segmentsToMerge.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) {\n      message(\"findForcedMerges: segmentsToUpgrade=\" + oldSegments);\n    }\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findForcedMerges(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose()) {\n        message(\"findForcedMerges: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      }\n      final List<SegmentInfoPerCommit> newInfos = new ArrayList<SegmentInfoPerCommit>();\n      for (final SegmentInfoPerCommit si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToMerge) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final Map<SegmentInfo,Boolean> oldSegments = new HashMap<SegmentInfo,Boolean>();\n    for (final SegmentInfo si : segmentInfos) {\n      final Boolean v = segmentsToMerge.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) {\n      message(\"findForcedMerges: segmentsToUpgrade=\" + oldSegments);\n    }\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findForcedMerges(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose()) {\n        message(\"findForcedMerges: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      }\n      final List<SegmentInfo> newInfos = new ArrayList<SegmentInfo>();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final Map<SegmentInfoPerCommit,Boolean> oldSegments = new HashMap<SegmentInfoPerCommit,Boolean>();\n    for (final SegmentInfoPerCommit si : segmentInfos) {\n      final Boolean v = segmentsToMerge.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) {\n      message(\"findForcedMerges: segmentsToUpgrade=\" + oldSegments);\n    }\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findForcedMerges(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose()) {\n        message(\"findForcedMerges: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      }\n      final List<SegmentInfoPerCommit> newInfos = new ArrayList<SegmentInfoPerCommit>();\n      for (final SegmentInfoPerCommit si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToMerge) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final Map<SegmentInfo,Boolean> oldSegments = new HashMap<SegmentInfo,Boolean>();\n    for (final SegmentInfo si : segmentInfos) {\n      final Boolean v = segmentsToMerge.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) {\n      message(\"findForcedMerges: segmentsToUpgrade=\" + oldSegments);\n    }\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findForcedMerges(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose()) {\n        message(\"findForcedMerges: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      }\n      final List<SegmentInfo> newInfos = new ArrayList<SegmentInfo>();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge) throws IOException {\n    // first find all old segments\n    final Map<SegmentInfoPerCommit,Boolean> oldSegments = new HashMap<SegmentInfoPerCommit,Boolean>();\n    for (final SegmentInfoPerCommit si : segmentInfos) {\n      final Boolean v = segmentsToMerge.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) {\n      message(\"findForcedMerges: segmentsToUpgrade=\" + oldSegments);\n    }\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findForcedMerges(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose()) {\n        message(\"findForcedMerges: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      }\n      final List<SegmentInfoPerCommit> newInfos = new ArrayList<SegmentInfoPerCommit>();\n      for (final SegmentInfoPerCommit si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final Map<SegmentInfoPerCommit,Boolean> oldSegments = new HashMap<SegmentInfoPerCommit,Boolean>();\n    for (final SegmentInfoPerCommit si : segmentInfos) {\n      final Boolean v = segmentsToMerge.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) {\n      message(\"findForcedMerges: segmentsToUpgrade=\" + oldSegments);\n    }\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findForcedMerges(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose()) {\n        message(\"findForcedMerges: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      }\n      final List<SegmentInfoPerCommit> newInfos = new ArrayList<SegmentInfoPerCommit>();\n      for (final SegmentInfoPerCommit si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","bugFix":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge) throws IOException {\n    // first find all old segments\n    final Map<SegmentInfoPerCommit,Boolean> oldSegments = new HashMap<SegmentInfoPerCommit,Boolean>();\n    for (final SegmentInfoPerCommit si : segmentInfos) {\n      final Boolean v = segmentsToMerge.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) {\n      message(\"findForcedMerges: segmentsToUpgrade=\" + oldSegments);\n    }\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findForcedMerges(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose()) {\n        message(\"findForcedMerges: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      }\n      final List<SegmentInfoPerCommit> newInfos = new ArrayList<SegmentInfoPerCommit>();\n      for (final SegmentInfoPerCommit si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final Map<SegmentInfoPerCommit,Boolean> oldSegments = new HashMap<SegmentInfoPerCommit,Boolean>();\n    for (final SegmentInfoPerCommit si : segmentInfos) {\n      final Boolean v = segmentsToMerge.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) {\n      message(\"findForcedMerges: segmentsToUpgrade=\" + oldSegments);\n    }\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findForcedMerges(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose()) {\n        message(\"findForcedMerges: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      }\n      final List<SegmentInfoPerCommit> newInfos = new ArrayList<SegmentInfoPerCommit>();\n      for (final SegmentInfoPerCommit si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge) throws IOException {\n    // first find all old segments\n    final Map<SegmentCommitInfo,Boolean> oldSegments = new HashMap<SegmentCommitInfo,Boolean>();\n    for (final SegmentCommitInfo si : segmentInfos) {\n      final Boolean v = segmentsToMerge.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) {\n      message(\"findForcedMerges: segmentsToUpgrade=\" + oldSegments);\n    }\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findForcedMerges(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose()) {\n        message(\"findForcedMerges: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      }\n      final List<SegmentCommitInfo> newInfos = new ArrayList<SegmentCommitInfo>();\n      for (final SegmentCommitInfo si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge) throws IOException {\n    // first find all old segments\n    final Map<SegmentInfoPerCommit,Boolean> oldSegments = new HashMap<SegmentInfoPerCommit,Boolean>();\n    for (final SegmentInfoPerCommit si : segmentInfos) {\n      final Boolean v = segmentsToMerge.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) {\n      message(\"findForcedMerges: segmentsToUpgrade=\" + oldSegments);\n    }\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findForcedMerges(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose()) {\n        message(\"findForcedMerges: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      }\n      final List<SegmentInfoPerCommit> newInfos = new ArrayList<SegmentInfoPerCommit>();\n      for (final SegmentInfoPerCommit si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d153abcf92dc5329d98571a8c3035df9bd80648"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}