{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#repairCoreProperty(CoreDescriptor,String).mjava","commits":[{"id":"b775be0d772d22dbbfd73b9989b5f0b4e7ef5506","date":1509763417,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#repairCoreProperty(CoreDescriptor,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *\n   * @param cd CoreDescriptor, presumably a deficient one\n   * @param prop The property that needs to be repaired.\n   * @return true if we were able to successfuly perisist the repaired coreDescriptor, false otherwise.\n   *\n   * See SOLR-11503, This can be removed when there's no chance we'll need to upgrade a\n   * Solr isntallation createged with legacyCloud=true from 6.6.1 through 7.1\n   */\n  public boolean repairCoreProperty(CoreDescriptor cd, String prop) {\n    // So far, coreNodeName is the only property that we need to repair, this may get more complex as other properties\n    // are added.\n\n    if (CoreDescriptor.CORE_NODE_NAME.equals(prop) == false) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          String.format(Locale.ROOT,\"The only supported property for repair is currently [%s]\",\n              CoreDescriptor.CORE_NODE_NAME));\n    }\n\n    // Try to read the coreNodeName from the cluster state.\n\n    String coreName = cd.getName();\n    DocCollection coll = getZkController().getZkStateReader().getClusterState().getCollection(cd.getCollectionName());\n    for (Replica rep : coll.getReplicas()) {\n      if (coreName.equals(rep.getCoreName())) {\n        log.warn(\"Core properties file for node {} found with no coreNodeName, attempting to repair with value {}. See SOLR-11503. \" +\n            \"This message should only appear if upgrading from collections created Solr 6.6.1 through 7.1.\",\n            rep.getCoreName(), rep.getName());\n        cd.getCloudDescriptor().setCoreNodeName(rep.getName());\n        coresLocator.persist(this, cd);\n        return true;\n      }\n    }\n    log.error(\"Could not repair coreNodeName in core.properties file for core {}\", coreName);\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#repairCoreProperty(CoreDescriptor,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *\n   * @param cd CoreDescriptor, presumably a deficient one\n   * @param prop The property that needs to be repaired.\n   * @return true if we were able to successfuly perisist the repaired coreDescriptor, false otherwise.\n   *\n   * See SOLR-11503, This can be removed when there's no chance we'll need to upgrade a\n   * Solr isntallation createged with legacyCloud=true from 6.6.1 through 7.1\n   */\n  public boolean repairCoreProperty(CoreDescriptor cd, String prop) {\n    // So far, coreNodeName is the only property that we need to repair, this may get more complex as other properties\n    // are added.\n\n    if (CoreDescriptor.CORE_NODE_NAME.equals(prop) == false) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          String.format(Locale.ROOT,\"The only supported property for repair is currently [%s]\",\n              CoreDescriptor.CORE_NODE_NAME));\n    }\n\n    // Try to read the coreNodeName from the cluster state.\n\n    String coreName = cd.getName();\n    DocCollection coll = getZkController().getZkStateReader().getClusterState().getCollection(cd.getCollectionName());\n    for (Replica rep : coll.getReplicas()) {\n      if (coreName.equals(rep.getCoreName())) {\n        log.warn(\"Core properties file for node {} found with no coreNodeName, attempting to repair with value {}. See SOLR-11503. \" +\n            \"This message should only appear if upgrading from collections created Solr 6.6.1 through 7.1.\",\n            rep.getCoreName(), rep.getName());\n        cd.getCloudDescriptor().setCoreNodeName(rep.getName());\n        coresLocator.persist(this, cd);\n        return true;\n      }\n    }\n    log.error(\"Could not repair coreNodeName in core.properties file for core {}\", coreName);\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffc8d70d9f57a62a24c3dd15b66e353de935054","date":1533178472,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#repairCoreProperty(CoreDescriptor,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#repairCoreProperty(CoreDescriptor,String).mjava","sourceNew":"  /**\n   *\n   * @param cd CoreDescriptor, presumably a deficient one\n   * @param prop The property that needs to be repaired.\n   * @return true if we were able to successfuly perisist the repaired coreDescriptor, false otherwise.\n   *\n   * See SOLR-11503, This can be removed when there's no chance we'll need to upgrade a\n   * Solr installation created with legacyCloud=true from 6.6.1 through 7.1\n   */\n  public boolean repairCoreProperty(CoreDescriptor cd, String prop) {\n    // So far, coreNodeName is the only property that we need to repair, this may get more complex as other properties\n    // are added.\n\n    if (CoreDescriptor.CORE_NODE_NAME.equals(prop) == false) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          String.format(Locale.ROOT,\"The only supported property for repair is currently [%s]\",\n              CoreDescriptor.CORE_NODE_NAME));\n    }\n\n    // Try to read the coreNodeName from the cluster state.\n\n    String coreName = cd.getName();\n    DocCollection coll = getZkController().getZkStateReader().getClusterState().getCollection(cd.getCollectionName());\n    for (Replica rep : coll.getReplicas()) {\n      if (coreName.equals(rep.getCoreName())) {\n        log.warn(\"Core properties file for node {} found with no coreNodeName, attempting to repair with value {}. See SOLR-11503. \" +\n            \"This message should only appear if upgrading from collections created Solr 6.6.1 through 7.1.\",\n            rep.getCoreName(), rep.getName());\n        cd.getCloudDescriptor().setCoreNodeName(rep.getName());\n        coresLocator.persist(this, cd);\n        return true;\n      }\n    }\n    log.error(\"Could not repair coreNodeName in core.properties file for core {}\", coreName);\n    return false;\n  }\n\n","sourceOld":"  /**\n   *\n   * @param cd CoreDescriptor, presumably a deficient one\n   * @param prop The property that needs to be repaired.\n   * @return true if we were able to successfuly perisist the repaired coreDescriptor, false otherwise.\n   *\n   * See SOLR-11503, This can be removed when there's no chance we'll need to upgrade a\n   * Solr isntallation createged with legacyCloud=true from 6.6.1 through 7.1\n   */\n  public boolean repairCoreProperty(CoreDescriptor cd, String prop) {\n    // So far, coreNodeName is the only property that we need to repair, this may get more complex as other properties\n    // are added.\n\n    if (CoreDescriptor.CORE_NODE_NAME.equals(prop) == false) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          String.format(Locale.ROOT,\"The only supported property for repair is currently [%s]\",\n              CoreDescriptor.CORE_NODE_NAME));\n    }\n\n    // Try to read the coreNodeName from the cluster state.\n\n    String coreName = cd.getName();\n    DocCollection coll = getZkController().getZkStateReader().getClusterState().getCollection(cd.getCollectionName());\n    for (Replica rep : coll.getReplicas()) {\n      if (coreName.equals(rep.getCoreName())) {\n        log.warn(\"Core properties file for node {} found with no coreNodeName, attempting to repair with value {}. See SOLR-11503. \" +\n            \"This message should only appear if upgrading from collections created Solr 6.6.1 through 7.1.\",\n            rep.getCoreName(), rep.getName());\n        cd.getCloudDescriptor().setCoreNodeName(rep.getName());\n        coresLocator.persist(this, cd);\n        return true;\n      }\n    }\n    log.error(\"Could not repair coreNodeName in core.properties file for core {}\", coreName);\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#repairCoreProperty(CoreDescriptor,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#repairCoreProperty(CoreDescriptor,String).mjava","sourceNew":"  /**\n   * @param cd   CoreDescriptor, presumably a deficient one\n   * @param prop The property that needs to be repaired.\n   * @return true if we were able to successfuly perisist the repaired coreDescriptor, false otherwise.\n   * <p>\n   * See SOLR-11503, This can be removed when there's no chance we'll need to upgrade a\n   * Solr installation created with legacyCloud=true from 6.6.1 through 7.1\n   */\n  public boolean repairCoreProperty(CoreDescriptor cd, String prop) {\n    // So far, coreNodeName is the only property that we need to repair, this may get more complex as other properties\n    // are added.\n\n    if (CoreDescriptor.CORE_NODE_NAME.equals(prop) == false) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          String.format(Locale.ROOT, \"The only supported property for repair is currently [%s]\",\n              CoreDescriptor.CORE_NODE_NAME));\n    }\n\n    // Try to read the coreNodeName from the cluster state.\n\n    String coreName = cd.getName();\n    DocCollection coll = getZkController().getZkStateReader().getClusterState().getCollection(cd.getCollectionName());\n    for (Replica rep : coll.getReplicas()) {\n      if (coreName.equals(rep.getCoreName())) {\n        log.warn(\"Core properties file for node {} found with no coreNodeName, attempting to repair with value {}. See SOLR-11503. \" +\n                \"This message should only appear if upgrading from collections created Solr 6.6.1 through 7.1.\",\n            rep.getCoreName(), rep.getName());\n        cd.getCloudDescriptor().setCoreNodeName(rep.getName());\n        coresLocator.persist(this, cd);\n        return true;\n      }\n    }\n    log.error(\"Could not repair coreNodeName in core.properties file for core {}\", coreName);\n    return false;\n  }\n\n","sourceOld":"  /**\n   *\n   * @param cd CoreDescriptor, presumably a deficient one\n   * @param prop The property that needs to be repaired.\n   * @return true if we were able to successfuly perisist the repaired coreDescriptor, false otherwise.\n   *\n   * See SOLR-11503, This can be removed when there's no chance we'll need to upgrade a\n   * Solr installation created with legacyCloud=true from 6.6.1 through 7.1\n   */\n  public boolean repairCoreProperty(CoreDescriptor cd, String prop) {\n    // So far, coreNodeName is the only property that we need to repair, this may get more complex as other properties\n    // are added.\n\n    if (CoreDescriptor.CORE_NODE_NAME.equals(prop) == false) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          String.format(Locale.ROOT,\"The only supported property for repair is currently [%s]\",\n              CoreDescriptor.CORE_NODE_NAME));\n    }\n\n    // Try to read the coreNodeName from the cluster state.\n\n    String coreName = cd.getName();\n    DocCollection coll = getZkController().getZkStateReader().getClusterState().getCollection(cd.getCollectionName());\n    for (Replica rep : coll.getReplicas()) {\n      if (coreName.equals(rep.getCoreName())) {\n        log.warn(\"Core properties file for node {} found with no coreNodeName, attempting to repair with value {}. See SOLR-11503. \" +\n            \"This message should only appear if upgrading from collections created Solr 6.6.1 through 7.1.\",\n            rep.getCoreName(), rep.getName());\n        cd.getCloudDescriptor().setCoreNodeName(rep.getName());\n        coresLocator.persist(this, cd);\n        return true;\n      }\n    }\n    log.error(\"Could not repair coreNodeName in core.properties file for core {}\", coreName);\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#repairCoreProperty(CoreDescriptor,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#repairCoreProperty(CoreDescriptor,String).mjava","sourceNew":"  /**\n   * @param cd   CoreDescriptor, presumably a deficient one\n   * @param prop The property that needs to be repaired.\n   * @return true if we were able to successfuly perisist the repaired coreDescriptor, false otherwise.\n   * <p>\n   * See SOLR-11503, This can be removed when there's no chance we'll need to upgrade a\n   * Solr installation created with legacyCloud=true from 6.6.1 through 7.1\n   */\n  public boolean repairCoreProperty(CoreDescriptor cd, String prop) {\n    // So far, coreNodeName is the only property that we need to repair, this may get more complex as other properties\n    // are added.\n\n    if (CoreDescriptor.CORE_NODE_NAME.equals(prop) == false) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          String.format(Locale.ROOT, \"The only supported property for repair is currently [%s]\",\n              CoreDescriptor.CORE_NODE_NAME));\n    }\n\n    // Try to read the coreNodeName from the cluster state.\n\n    String coreName = cd.getName();\n    DocCollection coll = getZkController().getZkStateReader().getClusterState().getCollection(cd.getCollectionName());\n    for (Replica rep : coll.getReplicas()) {\n      if (coreName.equals(rep.getCoreName())) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Core properties file for node {} found with no coreNodeName, attempting to repair with value {}. See SOLR-11503. \" +\n                  \"This message should only appear if upgrading from collections created Solr 6.6.1 through 7.1.\",\n              rep.getCoreName(), rep.getName());\n        }\n        cd.getCloudDescriptor().setCoreNodeName(rep.getName());\n        coresLocator.persist(this, cd);\n        return true;\n      }\n    }\n    log.error(\"Could not repair coreNodeName in core.properties file for core {}\", coreName);\n    return false;\n  }\n\n","sourceOld":"  /**\n   * @param cd   CoreDescriptor, presumably a deficient one\n   * @param prop The property that needs to be repaired.\n   * @return true if we were able to successfuly perisist the repaired coreDescriptor, false otherwise.\n   * <p>\n   * See SOLR-11503, This can be removed when there's no chance we'll need to upgrade a\n   * Solr installation created with legacyCloud=true from 6.6.1 through 7.1\n   */\n  public boolean repairCoreProperty(CoreDescriptor cd, String prop) {\n    // So far, coreNodeName is the only property that we need to repair, this may get more complex as other properties\n    // are added.\n\n    if (CoreDescriptor.CORE_NODE_NAME.equals(prop) == false) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          String.format(Locale.ROOT, \"The only supported property for repair is currently [%s]\",\n              CoreDescriptor.CORE_NODE_NAME));\n    }\n\n    // Try to read the coreNodeName from the cluster state.\n\n    String coreName = cd.getName();\n    DocCollection coll = getZkController().getZkStateReader().getClusterState().getCollection(cd.getCollectionName());\n    for (Replica rep : coll.getReplicas()) {\n      if (coreName.equals(rep.getCoreName())) {\n        log.warn(\"Core properties file for node {} found with no coreNodeName, attempting to repair with value {}. See SOLR-11503. \" +\n                \"This message should only appear if upgrading from collections created Solr 6.6.1 through 7.1.\",\n            rep.getCoreName(), rep.getName());\n        cd.getCloudDescriptor().setCoreNodeName(rep.getName());\n        coresLocator.persist(this, cd);\n        return true;\n      }\n    }\n    log.error(\"Could not repair coreNodeName in core.properties file for core {}\", coreName);\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#repairCoreProperty(CoreDescriptor,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#repairCoreProperty(CoreDescriptor,String).mjava","sourceNew":"  /**\n   * @param cd   CoreDescriptor, presumably a deficient one\n   * @param prop The property that needs to be repaired.\n   * @return true if we were able to successfuly perisist the repaired coreDescriptor, false otherwise.\n   * <p>\n   * See SOLR-11503, This can be removed when there's no chance we'll need to upgrade a\n   * Solr installation created with legacyCloud=true from 6.6.1 through 7.1\n   */\n  public boolean repairCoreProperty(CoreDescriptor cd, String prop) {\n    // So far, coreNodeName is the only property that we need to repair, this may get more complex as other properties\n    // are added.\n\n    if (CoreDescriptor.CORE_NODE_NAME.equals(prop) == false) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          String.format(Locale.ROOT, \"The only supported property for repair is currently [%s]\",\n              CoreDescriptor.CORE_NODE_NAME));\n    }\n\n    // Try to read the coreNodeName from the cluster state.\n\n    String coreName = cd.getName();\n    DocCollection coll = getZkController().getZkStateReader().getClusterState().getCollection(cd.getCollectionName());\n    for (Replica rep : coll.getReplicas()) {\n      if (coreName.equals(rep.getCoreName())) {\n        log.warn(\"Core properties file for node {} found with no coreNodeName, attempting to repair with value {}. See SOLR-11503. {}\"\n            , \"This message should only appear if upgrading from collections created Solr 6.6.1 through 7.1.\"\n            , rep.getCoreName(), rep.getName());\n        cd.getCloudDescriptor().setCoreNodeName(rep.getName());\n        coresLocator.persist(this, cd);\n        return true;\n      }\n    }\n    log.error(\"Could not repair coreNodeName in core.properties file for core {}\", coreName);\n    return false;\n  }\n\n","sourceOld":"  /**\n   * @param cd   CoreDescriptor, presumably a deficient one\n   * @param prop The property that needs to be repaired.\n   * @return true if we were able to successfuly perisist the repaired coreDescriptor, false otherwise.\n   * <p>\n   * See SOLR-11503, This can be removed when there's no chance we'll need to upgrade a\n   * Solr installation created with legacyCloud=true from 6.6.1 through 7.1\n   */\n  public boolean repairCoreProperty(CoreDescriptor cd, String prop) {\n    // So far, coreNodeName is the only property that we need to repair, this may get more complex as other properties\n    // are added.\n\n    if (CoreDescriptor.CORE_NODE_NAME.equals(prop) == false) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          String.format(Locale.ROOT, \"The only supported property for repair is currently [%s]\",\n              CoreDescriptor.CORE_NODE_NAME));\n    }\n\n    // Try to read the coreNodeName from the cluster state.\n\n    String coreName = cd.getName();\n    DocCollection coll = getZkController().getZkStateReader().getClusterState().getCollection(cd.getCollectionName());\n    for (Replica rep : coll.getReplicas()) {\n      if (coreName.equals(rep.getCoreName())) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Core properties file for node {} found with no coreNodeName, attempting to repair with value {}. See SOLR-11503. \" +\n                  \"This message should only appear if upgrading from collections created Solr 6.6.1 through 7.1.\",\n              rep.getCoreName(), rep.getName());\n        }\n        cd.getCloudDescriptor().setCoreNodeName(rep.getName());\n        coresLocator.persist(this, cd);\n        return true;\n      }\n    }\n    log.error(\"Could not repair coreNodeName in core.properties file for core {}\", coreName);\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":4,"author":"murblanc","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#repairCoreProperty(CoreDescriptor,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param cd   CoreDescriptor, presumably a deficient one\n   * @param prop The property that needs to be repaired.\n   * @return true if we were able to successfuly perisist the repaired coreDescriptor, false otherwise.\n   * <p>\n   * See SOLR-11503, This can be removed when there's no chance we'll need to upgrade a\n   * Solr installation created with legacyCloud=true from 6.6.1 through 7.1\n   */\n  public boolean repairCoreProperty(CoreDescriptor cd, String prop) {\n    // So far, coreNodeName is the only property that we need to repair, this may get more complex as other properties\n    // are added.\n\n    if (CoreDescriptor.CORE_NODE_NAME.equals(prop) == false) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          String.format(Locale.ROOT, \"The only supported property for repair is currently [%s]\",\n              CoreDescriptor.CORE_NODE_NAME));\n    }\n\n    // Try to read the coreNodeName from the cluster state.\n\n    String coreName = cd.getName();\n    DocCollection coll = getZkController().getZkStateReader().getClusterState().getCollection(cd.getCollectionName());\n    for (Replica rep : coll.getReplicas()) {\n      if (coreName.equals(rep.getCoreName())) {\n        log.warn(\"Core properties file for node {} found with no coreNodeName, attempting to repair with value {}. See SOLR-11503. {}\"\n            , \"This message should only appear if upgrading from collections created Solr 6.6.1 through 7.1.\"\n            , rep.getCoreName(), rep.getName());\n        cd.getCloudDescriptor().setCoreNodeName(rep.getName());\n        coresLocator.persist(this, cd);\n        return true;\n      }\n    }\n    log.error(\"Could not repair coreNodeName in core.properties file for core {}\", coreName);\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["575e66bd4b2349209027f6801184da7fc3cba13f"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b775be0d772d22dbbfd73b9989b5f0b4e7ef5506"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["2ffc8d70d9f57a62a24c3dd15b66e353de935054"],"140be51d03394488536f4aacedace29f9b318347":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["140be51d03394488536f4aacedace29f9b318347"],"2ffc8d70d9f57a62a24c3dd15b66e353de935054":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"b775be0d772d22dbbfd73b9989b5f0b4e7ef5506":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["2ffc8d70d9f57a62a24c3dd15b66e353de935054"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["140be51d03394488536f4aacedace29f9b318347"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","b775be0d772d22dbbfd73b9989b5f0b4e7ef5506"],"140be51d03394488536f4aacedace29f9b318347":["575e66bd4b2349209027f6801184da7fc3cba13f"],"575e66bd4b2349209027f6801184da7fc3cba13f":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"b775be0d772d22dbbfd73b9989b5f0b4e7ef5506":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"2ffc8d70d9f57a62a24c3dd15b66e353de935054":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}