{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader#TermsReader(FieldInfo,long,long,long,int,int,FST[Long]).mjava","commits":[{"id":"dbba3c5be159d190b2b308dfc250c43531694ddb","date":1375234944,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader#TermsReader(FieldInfo,long,long,long,int,int,FST[Long]).mjava","pathOld":"/dev/null","sourceNew":"    TermsReader(FieldInfo fieldInfo, long numTerms, long sumTotalTermFreq, long sumDocFreq, int docCount, int longsSize, FST<Long> index) throws IOException {\n      this.fieldInfo = fieldInfo;\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq;\n      this.sumDocFreq = sumDocFreq;\n      this.docCount = docCount;\n      this.longsSize = longsSize;\n      this.index = index;\n\n      assert (numTerms & (~0xffffffffL)) == 0;\n      final int numBlocks = (int)(numTerms + INTERVAL - 1) / INTERVAL;\n      this.numSkipInfo = longsSize + 3;\n      this.skipInfo = new long[numBlocks * numSkipInfo];\n      this.statsBlock = new byte[(int)blockIn.readVLong()];\n      this.metaLongsBlock = new byte[(int)blockIn.readVLong()];\n      this.metaBytesBlock = new byte[(int)blockIn.readVLong()];\n\n      int last = 0, next = 0;\n      for (int i = 1; i < numBlocks; i++) {\n        next = numSkipInfo * i;\n        for (int j = 0; j < numSkipInfo; j++) {\n          skipInfo[next + j] = skipInfo[last + j] + blockIn.readVLong();\n        }\n        last = next;\n      }\n      blockIn.readBytes(statsBlock, 0, statsBlock.length);\n      blockIn.readBytes(metaLongsBlock, 0, metaLongsBlock.length);\n      blockIn.readBytes(metaBytesBlock, 0, metaBytesBlock.length);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader#TermsReader(FieldInfo,long,long,long,int,int,FST[Long]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader#TermsReader(FieldInfo,long,long,long,int,int,FST[Long]).mjava","sourceNew":"    TermsReader(FieldInfo fieldInfo, long numTerms, long sumTotalTermFreq, long sumDocFreq, int docCount, int longsSize, FST<Long> index) throws IOException {\n      this.fieldInfo = fieldInfo;\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq;\n      this.sumDocFreq = sumDocFreq;\n      this.docCount = docCount;\n      this.longsSize = longsSize;\n      this.index = index;\n\n      assert (numTerms & (~0xffffffffL)) == 0;\n      final int numBlocks = (int)(numTerms + INTERVAL - 1) / INTERVAL;\n      this.numSkipInfo = longsSize + 3;\n      this.skipInfo = new long[numBlocks * numSkipInfo];\n      this.statsBlock = new byte[(int)blockIn.readVLong()];\n      this.metaLongsBlock = new byte[(int)blockIn.readVLong()];\n      this.metaBytesBlock = new byte[(int)blockIn.readVLong()];\n\n      int last = 0, next = 0;\n      for (int i = 1; i < numBlocks; i++) {\n        next = numSkipInfo * i;\n        for (int j = 0; j < numSkipInfo; j++) {\n          skipInfo[next + j] = skipInfo[last + j] + blockIn.readVLong();\n        }\n        last = next;\n      }\n      blockIn.readBytes(statsBlock, 0, statsBlock.length);\n      blockIn.readBytes(metaLongsBlock, 0, metaLongsBlock.length);\n      blockIn.readBytes(metaBytesBlock, 0, metaBytesBlock.length);\n    }\n\n","sourceOld":"    TermsReader(FieldInfo fieldInfo, long numTerms, long sumTotalTermFreq, long sumDocFreq, int docCount, int longsSize, FST<Long> index) throws IOException {\n      this.fieldInfo = fieldInfo;\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq;\n      this.sumDocFreq = sumDocFreq;\n      this.docCount = docCount;\n      this.longsSize = longsSize;\n      this.index = index;\n\n      assert (numTerms & (~0xffffffffL)) == 0;\n      final int numBlocks = (int)(numTerms + INTERVAL - 1) / INTERVAL;\n      this.numSkipInfo = longsSize + 3;\n      this.skipInfo = new long[numBlocks * numSkipInfo];\n      this.statsBlock = new byte[(int)blockIn.readVLong()];\n      this.metaLongsBlock = new byte[(int)blockIn.readVLong()];\n      this.metaBytesBlock = new byte[(int)blockIn.readVLong()];\n\n      int last = 0, next = 0;\n      for (int i = 1; i < numBlocks; i++) {\n        next = numSkipInfo * i;\n        for (int j = 0; j < numSkipInfo; j++) {\n          skipInfo[next + j] = skipInfo[last + j] + blockIn.readVLong();\n        }\n        last = next;\n      }\n      blockIn.readBytes(statsBlock, 0, statsBlock.length);\n      blockIn.readBytes(metaLongsBlock, 0, metaLongsBlock.length);\n      blockIn.readBytes(metaBytesBlock, 0, metaBytesBlock.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dbba3c5be159d190b2b308dfc250c43531694ddb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["dbba3c5be159d190b2b308dfc250c43531694ddb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"dbba3c5be159d190b2b308dfc250c43531694ddb":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbba3c5be159d190b2b308dfc250c43531694ddb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}