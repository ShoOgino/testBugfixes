{"path":"lucene/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToInt(BytesRef).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToInt(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an int from prefixCoded bytes.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode a term's value.\n   * @throws NumberFormatException if the supplied {@link BytesRef} is\n   * not correctly prefix encoded.\n   * @see #intToPrefixCoded(int,int,BytesRef)\n   */\n  public static int prefixCodedToInt(final BytesRef val) {\n    int sortableBits = 0;\n    for (int i=val.offset+1, limit=val.offset+val.length; i<limit; i++) {\n      sortableBits <<= 7;\n      final byte b = val.bytes[i];\n      if (b < 0) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (byte \"+\n          Integer.toHexString(b&0xff)+\" at position \"+(i-val.offset)+\" is invalid)\"\n        );\n      }\n      sortableBits |= b;\n    }\n    return (sortableBits << getPrefixCodedIntShift(val)) ^ 0x80000000;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2311669a2fcb84bbcf31c94964d40277ae09952d","date":1270815168,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToInt(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToInt(BytesRef).mjava","sourceNew":"  /*\n   * Returns an int from prefixCoded bytes.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode a term's value.\n   * @throws NumberFormatException if the supplied {@link BytesRef} is\n   * not correctly prefix encoded.\n   * @see #intToPrefixCoded(int,int,BytesRef)\n   */\n  public static int prefixCodedToInt(final BytesRef val) {\n    int sortableBits = 0;\n    for (int i=val.offset+1, limit=val.offset+val.length; i<limit; i++) {\n      sortableBits <<= 7;\n      final byte b = val.bytes[i];\n      if (b < 0) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (byte \"+\n          Integer.toHexString(b&0xff)+\" at position \"+(i-val.offset)+\" is invalid)\"\n        );\n      }\n      sortableBits |= b;\n    }\n    return (sortableBits << getPrefixCodedIntShift(val)) ^ 0x80000000;\n  }\n\n","sourceOld":"  /**\n   * Returns an int from prefixCoded bytes.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode a term's value.\n   * @throws NumberFormatException if the supplied {@link BytesRef} is\n   * not correctly prefix encoded.\n   * @see #intToPrefixCoded(int,int,BytesRef)\n   */\n  public static int prefixCodedToInt(final BytesRef val) {\n    int sortableBits = 0;\n    for (int i=val.offset+1, limit=val.offset+val.length; i<limit; i++) {\n      sortableBits <<= 7;\n      final byte b = val.bytes[i];\n      if (b < 0) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (byte \"+\n          Integer.toHexString(b&0xff)+\" at position \"+(i-val.offset)+\" is invalid)\"\n        );\n      }\n      sortableBits |= b;\n    }\n    return (sortableBits << getPrefixCodedIntShift(val)) ^ 0x80000000;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToInt(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToInt(BytesRef).mjava","sourceNew":"  /**\n   * Returns an int from prefixCoded bytes.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode a term's value.\n   * @throws NumberFormatException if the supplied {@link BytesRef} is\n   * not correctly prefix encoded.\n   * @see #intToPrefixCoded(int,int,BytesRef)\n   */\n  public static int prefixCodedToInt(final BytesRef val) {\n    int sortableBits = 0;\n    for (int i=val.offset+1, limit=val.offset+val.length; i<limit; i++) {\n      sortableBits <<= 7;\n      final byte b = val.bytes[i];\n      if (b < 0) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (byte \"+\n          Integer.toHexString(b&0xff)+\" at position \"+(i-val.offset)+\" is invalid)\"\n        );\n      }\n      sortableBits |= b;\n    }\n    return (sortableBits << getPrefixCodedIntShift(val)) ^ 0x80000000;\n  }\n\n","sourceOld":"  /*\n   * Returns an int from prefixCoded bytes.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode a term's value.\n   * @throws NumberFormatException if the supplied {@link BytesRef} is\n   * not correctly prefix encoded.\n   * @see #intToPrefixCoded(int,int,BytesRef)\n   */\n  public static int prefixCodedToInt(final BytesRef val) {\n    int sortableBits = 0;\n    for (int i=val.offset+1, limit=val.offset+val.length; i<limit; i++) {\n      sortableBits <<= 7;\n      final byte b = val.bytes[i];\n      if (b < 0) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (byte \"+\n          Integer.toHexString(b&0xff)+\" at position \"+(i-val.offset)+\" is invalid)\"\n        );\n      }\n      sortableBits |= b;\n    }\n    return (sortableBits << getPrefixCodedIntShift(val)) ^ 0x80000000;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToInt(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToInt(BytesRef).mjava","sourceNew":"  /**\n   * Returns an int from prefixCoded bytes.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode a term's value.\n   * @throws NumberFormatException if the supplied {@link BytesRef} is\n   * not correctly prefix encoded.\n   * @see #intToPrefixCoded(int,int,BytesRef)\n   */\n  public static int prefixCodedToInt(final BytesRef val) {\n    int sortableBits = 0;\n    for (int i=val.offset+1, limit=val.offset+val.length; i<limit; i++) {\n      sortableBits <<= 7;\n      final byte b = val.bytes[i];\n      if (b < 0) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (byte \"+\n          Integer.toHexString(b&0xff)+\" at position \"+(i-val.offset)+\" is invalid)\"\n        );\n      }\n      sortableBits |= b;\n    }\n    return (sortableBits << getPrefixCodedIntShift(val)) ^ 0x80000000;\n  }\n\n","sourceOld":"  /*\n   * Returns an int from prefixCoded bytes.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode a term's value.\n   * @throws NumberFormatException if the supplied {@link BytesRef} is\n   * not correctly prefix encoded.\n   * @see #intToPrefixCoded(int,int,BytesRef)\n   */\n  public static int prefixCodedToInt(final BytesRef val) {\n    int sortableBits = 0;\n    for (int i=val.offset+1, limit=val.offset+val.length; i<limit; i++) {\n      sortableBits <<= 7;\n      final byte b = val.bytes[i];\n      if (b < 0) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (byte \"+\n          Integer.toHexString(b&0xff)+\" at position \"+(i-val.offset)+\" is invalid)\"\n        );\n      }\n      sortableBits |= b;\n    }\n    return (sortableBits << getPrefixCodedIntShift(val)) ^ 0x80000000;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToInt(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToInt(BytesRef).mjava","sourceNew":"  /**\n   * Returns an int from prefixCoded bytes.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode a term's value.\n   * @throws NumberFormatException if the supplied {@link BytesRef} is\n   * not correctly prefix encoded.\n   * @see #intToPrefixCoded(int,int,BytesRef)\n   */\n  public static int prefixCodedToInt(final BytesRef val) {\n    int sortableBits = 0;\n    for (int i=val.offset+1, limit=val.offset+val.length; i<limit; i++) {\n      sortableBits <<= 7;\n      final byte b = val.bytes[i];\n      if (b < 0) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (byte \"+\n          Integer.toHexString(b&0xff)+\" at position \"+(i-val.offset)+\" is invalid)\"\n        );\n      }\n      sortableBits |= b;\n    }\n    return (sortableBits << getPrefixCodedIntShift(val)) ^ 0x80000000;\n  }\n\n","sourceOld":"  /*\n   * Returns an int from prefixCoded bytes.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode a term's value.\n   * @throws NumberFormatException if the supplied {@link BytesRef} is\n   * not correctly prefix encoded.\n   * @see #intToPrefixCoded(int,int,BytesRef)\n   */\n  public static int prefixCodedToInt(final BytesRef val) {\n    int sortableBits = 0;\n    for (int i=val.offset+1, limit=val.offset+val.length; i<limit; i++) {\n      sortableBits <<= 7;\n      final byte b = val.bytes[i];\n      if (b < 0) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (byte \"+\n          Integer.toHexString(b&0xff)+\" at position \"+(i-val.offset)+\" is invalid)\"\n        );\n      }\n      sortableBits |= b;\n    }\n    return (sortableBits << getPrefixCodedIntShift(val)) ^ 0x80000000;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToInt(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToInt(BytesRef).mjava","sourceNew":"  /**\n   * Returns an int from prefixCoded bytes.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode a term's value.\n   * @throws NumberFormatException if the supplied {@link BytesRef} is\n   * not correctly prefix encoded.\n   * @see #intToPrefixCoded(int,int,BytesRef)\n   */\n  public static int prefixCodedToInt(final BytesRef val) {\n    int sortableBits = 0;\n    for (int i=val.offset+1, limit=val.offset+val.length; i<limit; i++) {\n      sortableBits <<= 7;\n      final byte b = val.bytes[i];\n      if (b < 0) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (byte \"+\n          Integer.toHexString(b&0xff)+\" at position \"+(i-val.offset)+\" is invalid)\"\n        );\n      }\n      sortableBits |= b;\n    }\n    return (sortableBits << getPrefixCodedIntShift(val)) ^ 0x80000000;\n  }\n\n","sourceOld":"  /**\n   * Returns an int from prefixCoded bytes.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode a term's value.\n   * @throws NumberFormatException if the supplied {@link BytesRef} is\n   * not correctly prefix encoded.\n   * @see #intToPrefixCoded(int,int,BytesRef)\n   */\n  public static int prefixCodedToInt(final BytesRef val) {\n    int sortableBits = 0;\n    for (int i=val.offset+1, limit=val.offset+val.length; i<limit; i++) {\n      sortableBits <<= 7;\n      final byte b = val.bytes[i];\n      if (b < 0) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (byte \"+\n          Integer.toHexString(b&0xff)+\" at position \"+(i-val.offset)+\" is invalid)\"\n        );\n      }\n      sortableBits |= b;\n    }\n    return (sortableBits << getPrefixCodedIntShift(val)) ^ 0x80000000;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2311669a2fcb84bbcf31c94964d40277ae09952d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["2311669a2fcb84bbcf31c94964d40277ae09952d","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["2311669a2fcb84bbcf31c94964d40277ae09952d","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["2311669a2fcb84bbcf31c94964d40277ae09952d"]},"commit2Childs":{"2311669a2fcb84bbcf31c94964d40277ae09952d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["2311669a2fcb84bbcf31c94964d40277ae09952d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}