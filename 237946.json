{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","sourceNew":"  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version = input.readString();\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    // this is still written in 4.0 if we open a 3.x and upgrade the SI\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) { \n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(input.readInt(), input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n    final int hasProx = input.readByte();\n    final Codec codec = Codec.forName(input.readString());\n    final Map<String,String> diagnostics = input.readStringStringMap();\n    final int hasVectors = input.readByte();\n    \n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, hasProx, codec, diagnostics, hasVectors);\n  }\n\n","sourceOld":"  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version = input.readString();\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    // this is still written in 4.0 if we open a 3.x and upgrade the SI\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) { \n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(input.readInt(), input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n    final int hasProx = input.readByte();\n    final Codec codec = Codec.forName(input.readString());\n    final Map<String,String> diagnostics = input.readStringStringMap();\n    final int hasVectors = input.readByte();\n    \n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, hasProx, codec, diagnostics, hasVectors);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2dee33619431ada2a7a07f5fe2dbd94bac6a460","date":1337274029,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","sourceNew":"  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version = input.readString();\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    // this is still written in 4.0 if we open a 3.x and upgrade the SI\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) { \n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(input.readInt(), input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n    final boolean hasProx = input.readByte() == 1;\n    final Codec codec = Codec.forName(input.readString());\n    final Map<String,String> diagnostics = input.readStringStringMap();\n    final boolean hasVectors = input.readByte() == 1;\n    final boolean hasDocValues = input.readByte() == 1;\n    final boolean hasNorms = input.readByte() == 1;\n    final boolean hasFreq = input.readByte() == 1;\n    \n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, hasProx, codec, diagnostics, hasVectors, hasDocValues, hasNorms,\n      hasFreq);\n  }\n\n","sourceOld":"  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version = input.readString();\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    // this is still written in 4.0 if we open a 3.x and upgrade the SI\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) { \n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(input.readInt(), input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n    final int hasProx = input.readByte();\n    final Codec codec = Codec.forName(input.readString());\n    final Map<String,String> diagnostics = input.readStringStringMap();\n    final int hasVectors = input.readByte();\n    \n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, hasProx, codec, diagnostics, hasVectors);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc834f3412d287003cc04691da380b69ab983239","date":1337276089,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","sourceNew":"  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version = input.readString();\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    // this is still written in 4.0 if we open a 3.x and upgrade the SI\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) { \n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(input.readInt(), input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n    final boolean hasProx = input.readByte() == 1;\n    final Codec codec = Codec.forName(input.readString());\n    final Map<String,String> diagnostics = input.readStringStringMap();\n    final boolean hasVectors = input.readByte() == 1;\n    \n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, hasProx, codec, diagnostics, hasVectors);\n  }\n\n","sourceOld":"  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version = input.readString();\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    // this is still written in 4.0 if we open a 3.x and upgrade the SI\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) { \n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(input.readInt(), input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n    final boolean hasProx = input.readByte() == 1;\n    final Codec codec = Codec.forName(input.readString());\n    final Map<String,String> diagnostics = input.readStringStringMap();\n    final boolean hasVectors = input.readByte() == 1;\n    final boolean hasDocValues = input.readByte() == 1;\n    final boolean hasNorms = input.readByte() == 1;\n    final boolean hasFreq = input.readByte() == 1;\n    \n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, hasProx, codec, diagnostics, hasVectors, hasDocValues, hasNorms,\n      hasFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a8b14bc4241c302311422d5c6f7627f8febb86e","date":1337291675,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","sourceNew":"  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version = input.readString();\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    // this is still written in 4.0 if we open a 3.x and upgrade the SI\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) { \n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(input.readInt(), input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n    final boolean hasProx = input.readByte() == 1;\n    final Codec codec = Codec.forName(input.readString());\n    final Map<String,String> diagnostics = input.readStringStringMap();\n    \n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, hasProx, codec, diagnostics);\n  }\n\n","sourceOld":"  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version = input.readString();\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    // this is still written in 4.0 if we open a 3.x and upgrade the SI\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) { \n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(input.readInt(), input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n    final boolean hasProx = input.readByte() == 1;\n    final Codec codec = Codec.forName(input.readString());\n    final Map<String,String> diagnostics = input.readStringStringMap();\n    final boolean hasVectors = input.readByte() == 1;\n    \n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, hasProx, codec, diagnostics, hasVectors);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc97c61094c5498702b29cc2e8309beac50c23dc","date":1337293692,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","sourceNew":"  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version = input.readString();\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    // this is still written in 4.0 if we open a 3.x and upgrade the SI\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) { \n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(input.readInt(), input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n    final Codec codec = Codec.forName(input.readString());\n    final Map<String,String> diagnostics = input.readStringStringMap();\n    \n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, codec, diagnostics);\n  }\n\n","sourceOld":"  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version = input.readString();\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    // this is still written in 4.0 if we open a 3.x and upgrade the SI\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) { \n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(input.readInt(), input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n    final boolean hasProx = input.readByte() == 1;\n    final Codec codec = Codec.forName(input.readString());\n    final Map<String,String> diagnostics = input.readStringStringMap();\n    \n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, hasProx, codec, diagnostics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","sourceNew":null,"sourceOld":"  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version = input.readString();\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    // this is still written in 4.0 if we open a 3.x and upgrade the SI\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) { \n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(input.readInt(), input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n    final Codec codec = Codec.forName(input.readString());\n    final Map<String,String> diagnostics = input.readStringStringMap();\n    \n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, codec, diagnostics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","sourceNew":null,"sourceOld":"  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version = input.readString();\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    // this is still written in 4.0 if we open a 3.x and upgrade the SI\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) { \n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(input.readInt(), input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n    final int hasProx = input.readByte();\n    final Codec codec = Codec.forName(input.readString());\n    final Map<String,String> diagnostics = input.readStringStringMap();\n    final int hasVectors = input.readByte();\n    \n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, hasProx, codec, diagnostics, hasVectors);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a8b14bc4241c302311422d5c6f7627f8febb86e":["fc834f3412d287003cc04691da380b69ab983239"],"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4356000e349e38c9fb48034695b7c309abd54557"],"4356000e349e38c9fb48034695b7c309abd54557":["dc97c61094c5498702b29cc2e8309beac50c23dc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dc97c61094c5498702b29cc2e8309beac50c23dc":["4a8b14bc4241c302311422d5c6f7627f8febb86e"],"fc834f3412d287003cc04691da380b69ab983239":["d2dee33619431ada2a7a07f5fe2dbd94bac6a460"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"4a8b14bc4241c302311422d5c6f7627f8febb86e":["dc97c61094c5498702b29cc2e8309beac50c23dc"],"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["fc834f3412d287003cc04691da380b69ab983239"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4356000e349e38c9fb48034695b7c309abd54557":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d2dee33619431ada2a7a07f5fe2dbd94bac6a460","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dc97c61094c5498702b29cc2e8309beac50c23dc":["4356000e349e38c9fb48034695b7c309abd54557"],"fc834f3412d287003cc04691da380b69ab983239":["4a8b14bc4241c302311422d5c6f7627f8febb86e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}