{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addDynamicFieldShouldntBeCalledTwiceWithTheSameName().mjava","commits":[{"id":"c6ff97491f7791aa98e90d71c4c7fee58688c37b","date":1434817448,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addDynamicFieldShouldntBeCalledTwiceWithTheSameName().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void addDynamicFieldShouldntBeCalledTwiceWithTheSameName() throws Exception {\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", \"*_failure\");\n    fieldAttributes.put(\"type\", \"string\");\n    SchemaRequest.AddDynamicField addDFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addDFieldFirstResponse = addDFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDFieldFirstResponse);\n\n    SchemaResponse.UpdateResponse addDFieldSecondResponse = addDFieldUpdateSchemaRequest.process(getSolrClient());\n    assertEquals(0, addDFieldSecondResponse.getStatus());\n    assertNotNull(addDFieldSecondResponse.getResponse().get(\"errors\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addDynamicFieldShouldntBeCalledTwiceWithTheSameName().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addDynamicFieldShouldntBeCalledTwiceWithTheSameName().mjava","sourceNew":"  @Test\n  public void addDynamicFieldShouldntBeCalledTwiceWithTheSameName() throws Exception {\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", \"*_failure\");\n    fieldAttributes.put(\"type\", \"string\");\n    SchemaRequest.AddDynamicField addDFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SolrClient client = getSolrClient();\n    SchemaResponse.UpdateResponse addDFieldFirstResponse = addDFieldUpdateSchemaRequest.process(client);\n    assertValidSchemaResponse(addDFieldFirstResponse);\n\n    SchemaResponse.UpdateResponse addDFieldSecondResponse = addDFieldUpdateSchemaRequest.process(getSolrClient());\n    assertEquals(0, addDFieldSecondResponse.getStatus());\n    assertNotNull(addDFieldSecondResponse.getResponse().get(\"errors\"));\n  }\n\n","sourceOld":"  @Test\n  public void addDynamicFieldShouldntBeCalledTwiceWithTheSameName() throws Exception {\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", \"*_failure\");\n    fieldAttributes.put(\"type\", \"string\");\n    SchemaRequest.AddDynamicField addDFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addDFieldFirstResponse = addDFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDFieldFirstResponse);\n\n    SchemaResponse.UpdateResponse addDFieldSecondResponse = addDFieldUpdateSchemaRequest.process(getSolrClient());\n    assertEquals(0, addDFieldSecondResponse.getStatus());\n    assertNotNull(addDFieldSecondResponse.getResponse().get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc375e2ab3b7cc0344f8cd85189e42b87fce01a3","date":1515516930,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addDynamicFieldShouldntBeCalledTwiceWithTheSameName().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addDynamicFieldShouldntBeCalledTwiceWithTheSameName().mjava","sourceNew":"  @Test\n  public void addDynamicFieldShouldntBeCalledTwiceWithTheSameName() throws Exception {\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    String dynamicFieldName = \"*_failure\";\n    fieldAttributes.put(\"name\", dynamicFieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    SchemaRequest.AddDynamicField addDFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SolrClient client = getSolrClient();\n    SchemaResponse.UpdateResponse addDFieldFirstResponse = addDFieldUpdateSchemaRequest.process(client);\n    assertValidSchemaResponse(addDFieldFirstResponse);\n\n    assertFailedSchemaResponse(() -> addDFieldUpdateSchemaRequest.process(getSolrClient()),\n        \"[schema.xml] Duplicate DynamicField definition for '\" + dynamicFieldName + \"'\");\n  }\n\n","sourceOld":"  @Test\n  public void addDynamicFieldShouldntBeCalledTwiceWithTheSameName() throws Exception {\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", \"*_failure\");\n    fieldAttributes.put(\"type\", \"string\");\n    SchemaRequest.AddDynamicField addDFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SolrClient client = getSolrClient();\n    SchemaResponse.UpdateResponse addDFieldFirstResponse = addDFieldUpdateSchemaRequest.process(client);\n    assertValidSchemaResponse(addDFieldFirstResponse);\n\n    SchemaResponse.UpdateResponse addDFieldSecondResponse = addDFieldUpdateSchemaRequest.process(getSolrClient());\n    assertEquals(0, addDFieldSecondResponse.getStatus());\n    assertNotNull(addDFieldSecondResponse.getResponse().get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addDynamicFieldShouldntBeCalledTwiceWithTheSameName().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addDynamicFieldShouldntBeCalledTwiceWithTheSameName().mjava","sourceNew":"  @Test\n  public void addDynamicFieldShouldntBeCalledTwiceWithTheSameName() throws Exception {\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    String dynamicFieldName = \"*_failure\";\n    fieldAttributes.put(\"name\", dynamicFieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    SchemaRequest.AddDynamicField addDFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SolrClient client = getSolrClient();\n    SchemaResponse.UpdateResponse addDFieldFirstResponse = addDFieldUpdateSchemaRequest.process(client);\n    assertValidSchemaResponse(addDFieldFirstResponse);\n\n    assertFailedSchemaResponse(() -> addDFieldUpdateSchemaRequest.process(getSolrClient()),\n        \"[schema.xml] Duplicate DynamicField definition for '\" + dynamicFieldName + \"'\");\n  }\n\n","sourceOld":"  @Test\n  public void addDynamicFieldShouldntBeCalledTwiceWithTheSameName() throws Exception {\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", \"*_failure\");\n    fieldAttributes.put(\"type\", \"string\");\n    SchemaRequest.AddDynamicField addDFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SolrClient client = getSolrClient();\n    SchemaResponse.UpdateResponse addDFieldFirstResponse = addDFieldUpdateSchemaRequest.process(client);\n    assertValidSchemaResponse(addDFieldFirstResponse);\n\n    SchemaResponse.UpdateResponse addDFieldSecondResponse = addDFieldUpdateSchemaRequest.process(getSolrClient());\n    assertEquals(0, addDFieldSecondResponse.getStatus());\n    assertNotNull(addDFieldSecondResponse.getResponse().get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["859081acf00749f5dd462772c571d611d4a4d2db","dc375e2ab3b7cc0344f8cd85189e42b87fce01a3"],"859081acf00749f5dd462772c571d611d4a4d2db":["c6ff97491f7791aa98e90d71c4c7fee58688c37b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dc375e2ab3b7cc0344f8cd85189e42b87fce01a3":["859081acf00749f5dd462772c571d611d4a4d2db"],"c6ff97491f7791aa98e90d71c4c7fee58688c37b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"859081acf00749f5dd462772c571d611d4a4d2db":["b94236357aaa22b76c10629851fe4e376e0cea82","dc375e2ab3b7cc0344f8cd85189e42b87fce01a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6ff97491f7791aa98e90d71c4c7fee58688c37b"],"dc375e2ab3b7cc0344f8cd85189e42b87fce01a3":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c6ff97491f7791aa98e90d71c4c7fee58688c37b":["859081acf00749f5dd462772c571d611d4a4d2db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}