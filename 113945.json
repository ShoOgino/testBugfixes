{"path":"solr/core/src/test/org/apache/solr/search/TestQueryWrapperFilter#testRandom().mjava","commits":[{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestQueryWrapperFilter#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newStringField(\"field\", v, Field.Store.NO);\n      doc.add(f);\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = newSearcher(r).search(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newStringField(\"field\", v, Field.Store.NO);\n      doc.add(f);\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = newSearcher(r).search(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ddef54907d52d0079217460aacd73c5d3bb1d39","date":1527887541,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestQueryWrapperFilter#testRandom().mjava","sourceNew":null,"sourceOld":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newStringField(\"field\", v, Field.Store.NO);\n      doc.add(f);\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = newSearcher(r).search(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestQueryWrapperFilter#testRandom().mjava","sourceNew":null,"sourceOld":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newStringField(\"field\", v, Field.Store.NO);\n      doc.add(f);\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = newSearcher(r).search(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ddef54907d52d0079217460aacd73c5d3bb1d39":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["d52e48927ca4ef3655a261f2230b968b6fdf3608","4ddef54907d52d0079217460aacd73c5d3bb1d39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ddef54907d52d0079217460aacd73c5d3bb1d39"]},"commit2Childs":{"4ddef54907d52d0079217460aacd73c5d3bb1d39":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["4ddef54907d52d0079217460aacd73c5d3bb1d39","b70042a8a492f7054d480ccdd2be9796510d4327"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}