{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMatrixMath().mjava","commits":[{"id":"a8c5e58e88072db16e2a636f1738f87c1df207bd","date":1510101986,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMatrixMath().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMatrixMath() throws Exception {\n    String cexpr = \"let(echo=true, a=matrix(array(1.5, 2.5, 3.5), array(4.5,5.5,6.5)), \" +\n                                  \"b=grandSum(a), \" +\n                                  \"c=sumRows(a), \" +\n                                  \"d=sumColumns(a), \" +\n                                  \"e=scalarAdd(1, a),\" +\n                                  \"f=scalarSubtract(1, a),\" +\n                                  \"g=scalarMultiply(1.5, a),\" +\n                                  \"h=scalarDivide(1.5, a),\" +\n                                  \"i=scalarAdd(1.5, array(1.5, 2.5, 3.5)),\" +\n                                  \"j=scalarSubtract(1.5, array(1.5, 2.5, 3.5)),\" +\n                                  \"k=scalarMultiply(1.5, array(1.5, 2.5, 3.5)),\" +\n                                  \"l=scalarDivide(1.5, array(1.5, 2.5, 3.5)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    double grandSum = tuples.get(0).getDouble(\"b\");\n    assertEquals(grandSum, 24, 0.0);\n\n    List<Number> sumRows = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(sumRows.size(), 2);\n    assertEquals(sumRows.get(0).doubleValue(), 7.5, 0.0);\n    assertEquals(sumRows.get(1).doubleValue(), 16.5, 0.0);\n\n    List<Number> sumCols = (List<Number>)tuples.get(0).get(\"d\");\n    assertEquals(sumCols.size(), 3);\n    assertEquals(sumCols.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(sumCols.get(1).doubleValue(), 8.0, 0.0);\n    assertEquals(sumCols.get(2).doubleValue(), 10, 0.0);\n\n    List<List<Number>> scalarAdd = (List<List<Number>>)tuples.get(0).get(\"e\");\n    List<Number> row1 = scalarAdd.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 2.5, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 3.5, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 4.5, 0.0);\n\n    List<Number> row2 = scalarAdd.get(1);\n    assertEquals(row2.get(0).doubleValue(), 5.5, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 6.5, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 7.5, 0.0);\n\n    List<List<Number>> scalarSubtract = (List<List<Number>>)tuples.get(0).get(\"f\");\n    row1 = scalarSubtract.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 0.5, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 1.5, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 2.5, 0.0);\n\n    row2 = scalarSubtract.get(1);\n    assertEquals(row2.get(0).doubleValue(), 3.5, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 4.5, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 5.5, 0.0);\n\n    List<List<Number>> scalarMultiply = (List<List<Number>>)tuples.get(0).get(\"g\");\n    row1 = scalarMultiply.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 2.25, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 3.75, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 5.25, 0.0);\n\n    row2 = scalarMultiply.get(1);\n    assertEquals(row2.get(0).doubleValue(), 6.75, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 8.25, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 9.75, 0.0);\n\n    List<List<Number>> scalarDivide = (List<List<Number>>)tuples.get(0).get(\"h\");\n    row1 = scalarDivide.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 1.66666666666667, 0.001);\n    assertEquals(row1.get(2).doubleValue(), 2.33333333333333, 0.001);\n\n    row2 = scalarDivide.get(1);\n    assertEquals(row2.get(0).doubleValue(), 3, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 3.66666666666667, 0.001);\n    assertEquals(row2.get(2).doubleValue(), 4.33333333333333, 0.001);\n\n    List<Number> rowA = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(rowA.size(), 3);\n    assertEquals(rowA.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(rowA.get(1).doubleValue(), 4.0, 0.0);\n    assertEquals(rowA.get(2).doubleValue(), 5.0, 0.0);\n\n    rowA = (List<Number>)tuples.get(0).get(\"j\");\n    assertEquals(rowA.size(), 3);\n    assertEquals(rowA.get(0).doubleValue(), 0, 0.0);\n    assertEquals(rowA.get(1).doubleValue(), 1.0, 0.0);\n    assertEquals(rowA.get(2).doubleValue(), 2.0, 0.0);\n\n    rowA = (List<Number>)tuples.get(0).get(\"k\");\n    assertEquals(rowA.size(), 3);\n    assertEquals(rowA.get(0).doubleValue(), 2.25, 0.0);\n    assertEquals(rowA.get(1).doubleValue(), 3.75, 0.0);\n    assertEquals(rowA.get(2).doubleValue(), 5.25, 0.0);\n\n    rowA = (List<Number>)tuples.get(0).get(\"l\");\n    assertEquals(rowA.size(), 3);\n    assertEquals(rowA.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(rowA.get(1).doubleValue(), 1.66666666666667, 0.001);\n    assertEquals(rowA.get(2).doubleValue(), 2.33333333333333, 0.001);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMatrixMath().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMatrixMath() throws Exception {\n    String cexpr = \"let(echo=true, a=matrix(array(1.5, 2.5, 3.5), array(4.5,5.5,6.5)), \" +\n                                  \"b=grandSum(a), \" +\n                                  \"c=sumRows(a), \" +\n                                  \"d=sumColumns(a), \" +\n                                  \"e=scalarAdd(1, a),\" +\n                                  \"f=scalarSubtract(1, a),\" +\n                                  \"g=scalarMultiply(1.5, a),\" +\n                                  \"h=scalarDivide(1.5, a),\" +\n                                  \"i=scalarAdd(1.5, array(1.5, 2.5, 3.5)),\" +\n                                  \"j=scalarSubtract(1.5, array(1.5, 2.5, 3.5)),\" +\n                                  \"k=scalarMultiply(1.5, array(1.5, 2.5, 3.5)),\" +\n                                  \"l=scalarDivide(1.5, array(1.5, 2.5, 3.5)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    double grandSum = tuples.get(0).getDouble(\"b\");\n    assertEquals(grandSum, 24, 0.0);\n\n    List<Number> sumRows = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(sumRows.size(), 2);\n    assertEquals(sumRows.get(0).doubleValue(), 7.5, 0.0);\n    assertEquals(sumRows.get(1).doubleValue(), 16.5, 0.0);\n\n    List<Number> sumCols = (List<Number>)tuples.get(0).get(\"d\");\n    assertEquals(sumCols.size(), 3);\n    assertEquals(sumCols.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(sumCols.get(1).doubleValue(), 8.0, 0.0);\n    assertEquals(sumCols.get(2).doubleValue(), 10, 0.0);\n\n    List<List<Number>> scalarAdd = (List<List<Number>>)tuples.get(0).get(\"e\");\n    List<Number> row1 = scalarAdd.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 2.5, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 3.5, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 4.5, 0.0);\n\n    List<Number> row2 = scalarAdd.get(1);\n    assertEquals(row2.get(0).doubleValue(), 5.5, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 6.5, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 7.5, 0.0);\n\n    List<List<Number>> scalarSubtract = (List<List<Number>>)tuples.get(0).get(\"f\");\n    row1 = scalarSubtract.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 0.5, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 1.5, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 2.5, 0.0);\n\n    row2 = scalarSubtract.get(1);\n    assertEquals(row2.get(0).doubleValue(), 3.5, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 4.5, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 5.5, 0.0);\n\n    List<List<Number>> scalarMultiply = (List<List<Number>>)tuples.get(0).get(\"g\");\n    row1 = scalarMultiply.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 2.25, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 3.75, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 5.25, 0.0);\n\n    row2 = scalarMultiply.get(1);\n    assertEquals(row2.get(0).doubleValue(), 6.75, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 8.25, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 9.75, 0.0);\n\n    List<List<Number>> scalarDivide = (List<List<Number>>)tuples.get(0).get(\"h\");\n    row1 = scalarDivide.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 1.66666666666667, 0.001);\n    assertEquals(row1.get(2).doubleValue(), 2.33333333333333, 0.001);\n\n    row2 = scalarDivide.get(1);\n    assertEquals(row2.get(0).doubleValue(), 3, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 3.66666666666667, 0.001);\n    assertEquals(row2.get(2).doubleValue(), 4.33333333333333, 0.001);\n\n    List<Number> rowA = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(rowA.size(), 3);\n    assertEquals(rowA.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(rowA.get(1).doubleValue(), 4.0, 0.0);\n    assertEquals(rowA.get(2).doubleValue(), 5.0, 0.0);\n\n    rowA = (List<Number>)tuples.get(0).get(\"j\");\n    assertEquals(rowA.size(), 3);\n    assertEquals(rowA.get(0).doubleValue(), 0, 0.0);\n    assertEquals(rowA.get(1).doubleValue(), 1.0, 0.0);\n    assertEquals(rowA.get(2).doubleValue(), 2.0, 0.0);\n\n    rowA = (List<Number>)tuples.get(0).get(\"k\");\n    assertEquals(rowA.size(), 3);\n    assertEquals(rowA.get(0).doubleValue(), 2.25, 0.0);\n    assertEquals(rowA.get(1).doubleValue(), 3.75, 0.0);\n    assertEquals(rowA.get(2).doubleValue(), 5.25, 0.0);\n\n    rowA = (List<Number>)tuples.get(0).get(\"l\");\n    assertEquals(rowA.size(), 3);\n    assertEquals(rowA.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(rowA.get(1).doubleValue(), 1.66666666666667, 0.001);\n    assertEquals(rowA.get(2).doubleValue(), 2.33333333333333, 0.001);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatrixMath().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMatrixMath().mjava","sourceNew":"  @Test\n  public void testMatrixMath() throws Exception {\n    String cexpr = \"let(echo=true, a=matrix(array(1.5, 2.5, 3.5), array(4.5,5.5,6.5)), \" +\n                                  \"b=grandSum(a), \" +\n                                  \"c=sumRows(a), \" +\n                                  \"d=sumColumns(a), \" +\n                                  \"e=scalarAdd(1, a),\" +\n                                  \"f=scalarSubtract(1, a),\" +\n                                  \"g=scalarMultiply(1.5, a),\" +\n                                  \"h=scalarDivide(1.5, a),\" +\n                                  \"i=scalarAdd(1.5, array(1.5, 2.5, 3.5)),\" +\n                                  \"j=scalarSubtract(1.5, array(1.5, 2.5, 3.5)),\" +\n                                  \"k=scalarMultiply(1.5, array(1.5, 2.5, 3.5)),\" +\n                                  \"l=scalarDivide(1.5, array(1.5, 2.5, 3.5)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    double grandSum = tuples.get(0).getDouble(\"b\");\n    assertEquals(grandSum, 24, 0.0);\n\n    List<Number> sumRows = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(sumRows.size(), 2);\n    assertEquals(sumRows.get(0).doubleValue(), 7.5, 0.0);\n    assertEquals(sumRows.get(1).doubleValue(), 16.5, 0.0);\n\n    List<Number> sumCols = (List<Number>)tuples.get(0).get(\"d\");\n    assertEquals(sumCols.size(), 3);\n    assertEquals(sumCols.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(sumCols.get(1).doubleValue(), 8.0, 0.0);\n    assertEquals(sumCols.get(2).doubleValue(), 10, 0.0);\n\n    List<List<Number>> scalarAdd = (List<List<Number>>)tuples.get(0).get(\"e\");\n    List<Number> row1 = scalarAdd.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 2.5, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 3.5, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 4.5, 0.0);\n\n    List<Number> row2 = scalarAdd.get(1);\n    assertEquals(row2.get(0).doubleValue(), 5.5, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 6.5, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 7.5, 0.0);\n\n    List<List<Number>> scalarSubtract = (List<List<Number>>)tuples.get(0).get(\"f\");\n    row1 = scalarSubtract.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 0.5, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 1.5, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 2.5, 0.0);\n\n    row2 = scalarSubtract.get(1);\n    assertEquals(row2.get(0).doubleValue(), 3.5, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 4.5, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 5.5, 0.0);\n\n    List<List<Number>> scalarMultiply = (List<List<Number>>)tuples.get(0).get(\"g\");\n    row1 = scalarMultiply.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 2.25, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 3.75, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 5.25, 0.0);\n\n    row2 = scalarMultiply.get(1);\n    assertEquals(row2.get(0).doubleValue(), 6.75, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 8.25, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 9.75, 0.0);\n\n    List<List<Number>> scalarDivide = (List<List<Number>>)tuples.get(0).get(\"h\");\n    row1 = scalarDivide.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 1.66666666666667, 0.001);\n    assertEquals(row1.get(2).doubleValue(), 2.33333333333333, 0.001);\n\n    row2 = scalarDivide.get(1);\n    assertEquals(row2.get(0).doubleValue(), 3, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 3.66666666666667, 0.001);\n    assertEquals(row2.get(2).doubleValue(), 4.33333333333333, 0.001);\n\n    List<Number> rowA = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(rowA.size(), 3);\n    assertEquals(rowA.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(rowA.get(1).doubleValue(), 4.0, 0.0);\n    assertEquals(rowA.get(2).doubleValue(), 5.0, 0.0);\n\n    rowA = (List<Number>)tuples.get(0).get(\"j\");\n    assertEquals(rowA.size(), 3);\n    assertEquals(rowA.get(0).doubleValue(), 0, 0.0);\n    assertEquals(rowA.get(1).doubleValue(), 1.0, 0.0);\n    assertEquals(rowA.get(2).doubleValue(), 2.0, 0.0);\n\n    rowA = (List<Number>)tuples.get(0).get(\"k\");\n    assertEquals(rowA.size(), 3);\n    assertEquals(rowA.get(0).doubleValue(), 2.25, 0.0);\n    assertEquals(rowA.get(1).doubleValue(), 3.75, 0.0);\n    assertEquals(rowA.get(2).doubleValue(), 5.25, 0.0);\n\n    rowA = (List<Number>)tuples.get(0).get(\"l\");\n    assertEquals(rowA.size(), 3);\n    assertEquals(rowA.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(rowA.get(1).doubleValue(), 1.66666666666667, 0.001);\n    assertEquals(rowA.get(2).doubleValue(), 2.33333333333333, 0.001);\n  }\n\n","sourceOld":"  @Test\n  public void testMatrixMath() throws Exception {\n    String cexpr = \"let(echo=true, a=matrix(array(1.5, 2.5, 3.5), array(4.5,5.5,6.5)), \" +\n                                  \"b=grandSum(a), \" +\n                                  \"c=sumRows(a), \" +\n                                  \"d=sumColumns(a), \" +\n                                  \"e=scalarAdd(1, a),\" +\n                                  \"f=scalarSubtract(1, a),\" +\n                                  \"g=scalarMultiply(1.5, a),\" +\n                                  \"h=scalarDivide(1.5, a),\" +\n                                  \"i=scalarAdd(1.5, array(1.5, 2.5, 3.5)),\" +\n                                  \"j=scalarSubtract(1.5, array(1.5, 2.5, 3.5)),\" +\n                                  \"k=scalarMultiply(1.5, array(1.5, 2.5, 3.5)),\" +\n                                  \"l=scalarDivide(1.5, array(1.5, 2.5, 3.5)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    double grandSum = tuples.get(0).getDouble(\"b\");\n    assertEquals(grandSum, 24, 0.0);\n\n    List<Number> sumRows = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(sumRows.size(), 2);\n    assertEquals(sumRows.get(0).doubleValue(), 7.5, 0.0);\n    assertEquals(sumRows.get(1).doubleValue(), 16.5, 0.0);\n\n    List<Number> sumCols = (List<Number>)tuples.get(0).get(\"d\");\n    assertEquals(sumCols.size(), 3);\n    assertEquals(sumCols.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(sumCols.get(1).doubleValue(), 8.0, 0.0);\n    assertEquals(sumCols.get(2).doubleValue(), 10, 0.0);\n\n    List<List<Number>> scalarAdd = (List<List<Number>>)tuples.get(0).get(\"e\");\n    List<Number> row1 = scalarAdd.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 2.5, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 3.5, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 4.5, 0.0);\n\n    List<Number> row2 = scalarAdd.get(1);\n    assertEquals(row2.get(0).doubleValue(), 5.5, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 6.5, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 7.5, 0.0);\n\n    List<List<Number>> scalarSubtract = (List<List<Number>>)tuples.get(0).get(\"f\");\n    row1 = scalarSubtract.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 0.5, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 1.5, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 2.5, 0.0);\n\n    row2 = scalarSubtract.get(1);\n    assertEquals(row2.get(0).doubleValue(), 3.5, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 4.5, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 5.5, 0.0);\n\n    List<List<Number>> scalarMultiply = (List<List<Number>>)tuples.get(0).get(\"g\");\n    row1 = scalarMultiply.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 2.25, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 3.75, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 5.25, 0.0);\n\n    row2 = scalarMultiply.get(1);\n    assertEquals(row2.get(0).doubleValue(), 6.75, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 8.25, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 9.75, 0.0);\n\n    List<List<Number>> scalarDivide = (List<List<Number>>)tuples.get(0).get(\"h\");\n    row1 = scalarDivide.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 1.66666666666667, 0.001);\n    assertEquals(row1.get(2).doubleValue(), 2.33333333333333, 0.001);\n\n    row2 = scalarDivide.get(1);\n    assertEquals(row2.get(0).doubleValue(), 3, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 3.66666666666667, 0.001);\n    assertEquals(row2.get(2).doubleValue(), 4.33333333333333, 0.001);\n\n    List<Number> rowA = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(rowA.size(), 3);\n    assertEquals(rowA.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(rowA.get(1).doubleValue(), 4.0, 0.0);\n    assertEquals(rowA.get(2).doubleValue(), 5.0, 0.0);\n\n    rowA = (List<Number>)tuples.get(0).get(\"j\");\n    assertEquals(rowA.size(), 3);\n    assertEquals(rowA.get(0).doubleValue(), 0, 0.0);\n    assertEquals(rowA.get(1).doubleValue(), 1.0, 0.0);\n    assertEquals(rowA.get(2).doubleValue(), 2.0, 0.0);\n\n    rowA = (List<Number>)tuples.get(0).get(\"k\");\n    assertEquals(rowA.size(), 3);\n    assertEquals(rowA.get(0).doubleValue(), 2.25, 0.0);\n    assertEquals(rowA.get(1).doubleValue(), 3.75, 0.0);\n    assertEquals(rowA.get(2).doubleValue(), 5.25, 0.0);\n\n    rowA = (List<Number>)tuples.get(0).get(\"l\");\n    assertEquals(rowA.size(), 3);\n    assertEquals(rowA.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(rowA.get(1).doubleValue(), 1.66666666666667, 0.001);\n    assertEquals(rowA.get(2).doubleValue(), 2.33333333333333, 0.001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a8c5e58e88072db16e2a636f1738f87c1df207bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a8c5e58e88072db16e2a636f1738f87c1df207bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"a8c5e58e88072db16e2a636f1738f87c1df207bd":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a8c5e58e88072db16e2a636f1738f87c1df207bd","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}