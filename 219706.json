{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#equals(Object).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#equals(Object).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#equals(Object).mjava","sourceNew":"  /**\n   * Compare the given CategoryPath to another one. For two category paths to\n   * be considered equal, only the path they contain needs to be identical The\n   * unused capacity of the objects is not considered in the comparison.\n   */\n  @Override\n  public boolean equals(Object obj) {\n    if (obj instanceof CategoryPath) {\n      CategoryPath other = (CategoryPath) obj;\n      if (other.ncomponents != this.ncomponents) {\n        return false;\n      }\n      // Unfortunately, Arrays.equal() can only compare entire arrays,\n      // and in our case we potentially have unused parts of the arrays\n      // that must not be compared... I wish that some future version\n      // of Java has a offset and length parameter to Arrays.equal\n      // (sort of like System.arraycopy()).\n      if (ncomponents == 0) {\n        return true; // nothing to compare...\n      }\n      for (int i = 0; i < ncomponents; i++) {\n        if (this.ends[i] != other.ends[i]) {\n          return false;\n        }\n      }\n      int len = ends[ncomponents - 1]; \n      for (int i = 0; i < len; i++) {\n        if (this.chars[i] != other.chars[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Compare the given CategoryPath to another one. For two category paths to\n   * be considered equal, only the path they contain needs to be identical The\n   * unused capacity of the objects is not considered in the comparison.\n   */\n  @Override\n  public boolean equals(Object obj) {\n    if (obj instanceof CategoryPath) {\n      CategoryPath other = (CategoryPath) obj;\n      if (other.ncomponents != this.ncomponents) {\n        return false;\n      }\n      // Unfortunately, Arrays.equal() can only compare entire arrays,\n      // and in our case we potentially have unused parts of the arrays\n      // that must not be compared... I wish that some future version\n      // of Java has a offset and length parameter to Arrays.equal\n      // (sort of like System.arraycopy()).\n      if (ncomponents == 0) {\n        return true; // nothing to compare...\n      }\n      for (int i = 0; i < ncomponents; i++) {\n        if (this.ends[i] != other.ends[i]) {\n          return false;\n        }\n      }\n      int len = ends[ncomponents - 1]; \n      for (int i = 0; i < len; i++) {\n        if (this.chars[i] != other.chars[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#equals(Object).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof CategoryPath)) {\n      return false;\n    }\n    \n    CategoryPath other = (CategoryPath) obj;\n    if (length != other.length) {\n      return false; // not same length, cannot be equal\n    }\n    \n    // CategoryPaths are more likely to differ at the last components, so start\n    // from last-first\n    for (int i = length - 1; i >= 0; i--) {\n      if (!components[i].equals(other.components[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Compare the given CategoryPath to another one. For two category paths to\n   * be considered equal, only the path they contain needs to be identical The\n   * unused capacity of the objects is not considered in the comparison.\n   */\n  @Override\n  public boolean equals(Object obj) {\n    if (obj instanceof CategoryPath) {\n      CategoryPath other = (CategoryPath) obj;\n      if (other.ncomponents != this.ncomponents) {\n        return false;\n      }\n      // Unfortunately, Arrays.equal() can only compare entire arrays,\n      // and in our case we potentially have unused parts of the arrays\n      // that must not be compared... I wish that some future version\n      // of Java has a offset and length parameter to Arrays.equal\n      // (sort of like System.arraycopy()).\n      if (ncomponents == 0) {\n        return true; // nothing to compare...\n      }\n      for (int i = 0; i < ncomponents; i++) {\n        if (this.ends[i] != other.ends[i]) {\n          return false;\n        }\n      }\n      int len = ends[ncomponents - 1]; \n      for (int i = 0; i < len; i++) {\n        if (this.chars[i] != other.chars[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#equals(Object).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof CategoryPath)) {\n      return false;\n    }\n    \n    CategoryPath other = (CategoryPath) obj;\n    if (length != other.length) {\n      return false; // not same length, cannot be equal\n    }\n    \n    // CategoryPaths are more likely to differ at the last components, so start\n    // from last-first\n    for (int i = length - 1; i >= 0; i--) {\n      if (!components[i].equals(other.components[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Compare the given CategoryPath to another one. For two category paths to\n   * be considered equal, only the path they contain needs to be identical The\n   * unused capacity of the objects is not considered in the comparison.\n   */\n  @Override\n  public boolean equals(Object obj) {\n    if (obj instanceof CategoryPath) {\n      CategoryPath other = (CategoryPath) obj;\n      if (other.ncomponents != this.ncomponents) {\n        return false;\n      }\n      // Unfortunately, Arrays.equal() can only compare entire arrays,\n      // and in our case we potentially have unused parts of the arrays\n      // that must not be compared... I wish that some future version\n      // of Java has a offset and length parameter to Arrays.equal\n      // (sort of like System.arraycopy()).\n      if (ncomponents == 0) {\n        return true; // nothing to compare...\n      }\n      for (int i = 0; i < ncomponents; i++) {\n        if (this.ends[i] != other.ends[i]) {\n          return false;\n        }\n      }\n      int len = ends[ncomponents - 1]; \n      for (int i = 0; i < len; i++) {\n        if (this.chars[i] != other.chars[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#equals(Object).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof FacetLabel)) {\n      return false;\n    }\n    \n    FacetLabel other = (FacetLabel) obj;\n    if (length != other.length) {\n      return false; // not same length, cannot be equal\n    }\n    \n    // CategoryPaths are more likely to differ at the last components, so start\n    // from last-first\n    for (int i = length - 1; i >= 0; i--) {\n      if (!components[i].equals(other.components[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof CategoryPath)) {\n      return false;\n    }\n    \n    CategoryPath other = (CategoryPath) obj;\n    if (length != other.length) {\n      return false; // not same length, cannot be equal\n    }\n    \n    // CategoryPaths are more likely to differ at the last components, so start\n    // from last-first\n    for (int i = length - 1; i >= 0; i--) {\n      if (!components[i].equals(other.components[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#equals(Object).mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof CategoryPath)) {\n      return false;\n    }\n    \n    CategoryPath other = (CategoryPath) obj;\n    if (length != other.length) {\n      return false; // not same length, cannot be equal\n    }\n    \n    // CategoryPaths are more likely to differ at the last components, so start\n    // from last-first\n    for (int i = length - 1; i >= 0; i--) {\n      if (!components[i].equals(other.components[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}