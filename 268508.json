{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","sourceNew":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    CharTermAttribute termAtt = stpf.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    stpf.reset();\n    for (int i=0; i<20; i+=3) {\n      assertTrue(stpf.incrementToken());\n      log(\"Token \"+i+\": \"+stpf);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,termAtt.toString());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,posIncrAtt.getPositionIncrement());\n    }\n    assertFalse(stpf.incrementToken());\n    stpf.end();\n    stpf.close();\n  }\n\n","sourceOld":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    CharTermAttribute termAtt = stpf.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    stpf.reset();\n    for (int i=0; i<20; i+=3) {\n      assertTrue(stpf.incrementToken());\n      log(\"Token \"+i+\": \"+stpf);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,termAtt.toString());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,posIncrAtt.getPositionIncrement());\n    }\n    assertFalse(stpf.incrementToken());\n    stpf.end();\n    stpf.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"192e49c0445803405b0bc0eebc8b758485480c21","date":1367699151,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#doTestStopPositons(StopFilter).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","sourceNew":"  private void doTestStopPositons(StopFilter stpf) throws IOException {\n    CharTermAttribute termAtt = stpf.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    stpf.reset();\n    for (int i=0; i<20; i+=3) {\n      assertTrue(stpf.incrementToken());\n      log(\"Token \"+i+\": \"+stpf);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,termAtt.toString());\n      assertEquals(\"all but first token must have position increment of 3\",i==0?1:3,posIncrAtt.getPositionIncrement());\n    }\n    assertFalse(stpf.incrementToken());\n    stpf.end();\n    stpf.close();\n  }\n\n","sourceOld":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    CharTermAttribute termAtt = stpf.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    stpf.reset();\n    for (int i=0; i<20; i+=3) {\n      assertTrue(stpf.incrementToken());\n      log(\"Token \"+i+\": \"+stpf);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,termAtt.toString());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,posIncrAtt.getPositionIncrement());\n    }\n    assertFalse(stpf.incrementToken());\n    stpf.end();\n    stpf.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"192e49c0445803405b0bc0eebc8b758485480c21":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["192e49c0445803405b0bc0eebc8b758485480c21"]},"commit2Childs":{"192e49c0445803405b0bc0eebc8b758485480c21":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["192e49c0445803405b0bc0eebc8b758485480c21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}