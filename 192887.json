{"path":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    Map other = null;\n    if (includeScore) {\n      other = scoreMap;\n      scoreMap.put(\"score\",score);\n    }\n    writeDoc(name, (List<Fieldable>)(doc.getFields()), returnFields, other);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":null,"sourceOld":"  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    Map other = null;\n    if (includeScore) {\n      other = scoreMap;\n      scoreMap.put(\"score\",score);\n    }\n    writeDoc(name, (List<Fieldable>)(doc.getFields()), returnFields, other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","pathOld":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":"  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    Map other = null;\n    if (includeScore) {\n      other = scoreMap;\n      scoreMap.put(\"score\",score);\n    }\n    writeDoc(name, (List<Fieldable>)(doc.getFields()), returnFields, other);\n  }\n\n","sourceOld":"  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    Map other = null;\n    if (includeScore) {\n      other = scoreMap;\n      scoreMap.put(\"score\",score);\n    }\n    writeDoc(name, (List<Fieldable>)(doc.getFields()), returnFields, other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    Map other = null;\n    if (includeScore) {\n      other = scoreMap;\n      scoreMap.put(\"score\",score);\n    }\n    writeDoc(name, (List<Fieldable>)(doc.getFields()), returnFields, other);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","date":1286157263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":"  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    Map other = null;\n    if (includeScore) {\n      other = scoreMap;\n      scoreMap.put(\"score\",score);\n    }\n    writeDoc(name, doc.getFields(), returnFields, other);\n  }\n\n","sourceOld":"  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    Map other = null;\n    if (includeScore) {\n      other = scoreMap;\n      scoreMap.put(\"score\",score);\n    }\n    writeDoc(name, (List<Fieldable>)(doc.getFields()), returnFields, other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":"  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    Map other = null;\n    if (includeScore) {\n      other = scoreMap;\n      scoreMap.put(\"score\",score);\n    }\n    writeDoc(name, doc.getFields(), returnFields, other);\n  }\n\n","sourceOld":"  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    Map other = null;\n    if (includeScore) {\n      other = scoreMap;\n      scoreMap.put(\"score\",score);\n    }\n    writeDoc(name, (List<Fieldable>)(doc.getFields()), returnFields, other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":"  @Override\n  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    Map other = null;\n    if (includeScore) {\n      other = scoreMap;\n      scoreMap.put(\"score\",score);\n    }\n    writeDoc(name, doc.getFields(), returnFields, other);\n  }\n\n","sourceOld":"  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    Map other = null;\n    if (includeScore) {\n      other = scoreMap;\n      scoreMap.put(\"score\",score);\n    }\n    writeDoc(name, doc.getFields(), returnFields, other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":"  @Override\n  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    Map other = null;\n    if (includeScore) {\n      other = scoreMap;\n      scoreMap.put(\"score\",score);\n    }\n    writeDoc(name, doc.getFields(), returnFields, other);\n  }\n\n","sourceOld":"  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    Map other = null;\n    if (includeScore) {\n      other = scoreMap;\n      scoreMap.put(\"score\",score);\n    }\n    writeDoc(name, doc.getFields(), returnFields, other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":"  @Override\n  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    Map other = null;\n    if (includeScore) {\n      other = scoreMap;\n      scoreMap.put(\"score\",score);\n    }\n    writeDoc(name, doc.getFields(), returnFields, other);\n  }\n\n","sourceOld":"  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    Map other = null;\n    if (includeScore) {\n      other = scoreMap;\n      scoreMap.put(\"score\",score);\n    }\n    writeDoc(name, doc.getFields(), returnFields, other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    Map other = null;\n    if (includeScore) {\n      other = scoreMap;\n      scoreMap.put(\"score\",score);\n    }\n    writeDoc(name, doc.getFields(), returnFields, other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    Map other = null;\n    if (includeScore) {\n      other = scoreMap;\n      scoreMap.put(\"score\",score);\n    }\n    writeDoc(name, doc.getFields(), returnFields, other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    Map other = null;\n    if (includeScore) {\n      other = scoreMap;\n      scoreMap.put(\"score\",score);\n    }\n    writeDoc(name, doc.getFields(), returnFields, other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d":["1da8d55113b689b06716246649de6f62430f15c0"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","6aedf81f068e430dec27d94310415cc6ff52731c"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","6aedf81f068e430dec27d94310415cc6ff52731c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"6aedf81f068e430dec27d94310415cc6ff52731c":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6aedf81f068e430dec27d94310415cc6ff52731c"]},"commit2Childs":{"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["29ef99d61cda9641b6250bf9567329a6e65f901d","6aedf81f068e430dec27d94310415cc6ff52731c","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1da8d55113b689b06716246649de6f62430f15c0":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"6aedf81f068e430dec27d94310415cc6ff52731c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}