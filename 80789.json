{"path":"solr/core/src/test/org/apache/solr/schema/TestHalfAndHalfDocValues#testHalfAndHalfDocValues().mjava","commits":[{"id":"a2c21c57833fe3ebba9997f38f63f717c64e1e3f","date":1493060181,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestHalfAndHalfDocValues#testHalfAndHalfDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testHalfAndHalfDocValues().mjava","sourceNew":"  public void testHalfAndHalfDocValues() throws Exception {\n    // Insert two docs without docvalues\n    String fieldname = \"string_add_dv_later\";\n    assertU(adoc(\"id\", \"3\", fieldname, \"c\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"1\", fieldname, \"a\"));\n    assertU(commit());\n\n\n    try (SolrCore core = h.getCoreInc()) {\n      assertFalse(core.getLatestSchema().getField(fieldname).hasDocValues());\n      // Add docvalues to the field type\n      IndexSchema schema = core.getLatestSchema();\n      SchemaField oldField = schema.getField(fieldname);\n      int newProperties = oldField.getProperties() | SchemaField.DOC_VALUES;\n\n      SchemaField sf = new SchemaField(fieldname, oldField.getType(), newProperties, null);\n      schema.getFields().put(fieldname, sf);\n\n      // Insert a new doc with docvalues\n      assertU(adoc(\"id\", \"2\", fieldname, \"b\"));\n      assertU(commit());\n\n\n      // Check there are a mix of segments with and without docvalues\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final DirectoryReader topReader = searcher.getRawReader();\n\n        //Assert no merges\n\n        assertEquals(3, topReader.numDocs());\n        assertEquals(3, topReader.leaves().size());\n\n        final FieldInfos infos = MultiFields.getMergedFieldInfos(topReader);\n        //The global field type should have docValues because a document with dvs was added\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(fieldname).getDocValuesType());\n\n        for (LeafReaderContext ctx : topReader.leaves()) {\n          LeafReader r = ctx.reader();\n          //Make sure there were no merges\n          assertEquals(1, r.numDocs());\n          Document doc = r.document(0);\n          String id = doc.getField(\"id\").stringValue();\n\n          if (id.equals(\"1\") || id.equals(\"3\")) {\n            assertEquals(DocValuesType.NONE, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          } else {\n            assertEquals(DocValuesType.SORTED, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          }\n\n        }\n      } finally {\n        searcherRef.decref();\n      }\n    }\n\n    // Assert sort order is correct\n    assertQ(req(\"q\", \"string_add_dv_later:*\", \"sort\", \"string_add_dv_later asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=2]\",\n        \"//result/doc[3]/int[@name='id'][.=3]\"\n    );\n  }\n\n","sourceOld":"  public void testHalfAndHalfDocValues() throws Exception {\n    // Insert two docs without docvalues\n    String fieldname = \"string_add_dv_later\";\n    assertU(adoc(\"id\", \"3\", fieldname, \"c\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"1\", fieldname, \"a\"));\n    assertU(commit());\n    \n   \n    try (SolrCore core = h.getCoreInc()) {\n        assertFalse(core.getLatestSchema().getField(fieldname).hasDocValues());\n      // Add docvalues to the field type\n      IndexSchema schema = core.getLatestSchema();\n      SchemaField oldField = schema.getField(fieldname);\n      int newProperties = oldField.getProperties() | SchemaField.DOC_VALUES;\n      \n      SchemaField sf = new SchemaField( fieldname, oldField.getType(), newProperties, null);\n      schema.getFields().put( fieldname, sf );\n      \n      // Insert a new doc with docvalues\n      assertU(adoc(\"id\", \"2\", fieldname, \"b\"));\n      assertU(commit());\n    \n    \n      // Check there are a mix of segments with and without docvalues\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final DirectoryReader topReader = searcher.getRawReader();\n\n        //Assert no merges\n        \n        assertEquals(3, topReader.numDocs());\n        assertEquals(3, topReader.leaves().size());\n        \n        final FieldInfos infos = MultiFields.getMergedFieldInfos(topReader);\n        //The global field type should have docValues because a document with dvs was added\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(fieldname).getDocValuesType());\n        \n        for(LeafReaderContext ctx: topReader.leaves()) {\n          LeafReader r = ctx.reader();\n          //Make sure there were no merges\n          assertEquals(1, r.numDocs());\n          Document doc = r.document(0);\n          String id = doc.getField(\"id\").stringValue();\n          \n          if(id.equals(\"1\") || id.equals(\"3\")) {\n            assertEquals(DocValuesType.NONE, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          } else {\n            assertEquals(DocValuesType.SORTED, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          }\n          \n        }\n      } finally {\n        searcherRef.decref();\n      }\n    }\n    \n    // Assert sort order is correct\n    assertQ(req(\"q\", \"string_add_dv_later:*\", \"sort\", \"string_add_dv_later asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=2]\",\n        \"//result/doc[3]/int[@name='id'][.=3]\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestHalfAndHalfDocValues#testHalfAndHalfDocValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testHalfAndHalfDocValues() throws Exception {\n    // Insert two docs without docvalues\n    String fieldname = \"string_add_dv_later\";\n    assertU(adoc(\"id\", \"3\", fieldname, \"c\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"1\", fieldname, \"a\"));\n    assertU(commit());\n\n\n    try (SolrCore core = h.getCoreInc()) {\n      assertFalse(core.getLatestSchema().getField(fieldname).hasDocValues());\n      // Add docvalues to the field type\n      IndexSchema schema = core.getLatestSchema();\n      SchemaField oldField = schema.getField(fieldname);\n      int newProperties = oldField.getProperties() | SchemaField.DOC_VALUES;\n\n      SchemaField sf = new SchemaField(fieldname, oldField.getType(), newProperties, null);\n      schema.getFields().put(fieldname, sf);\n\n      // Insert a new doc with docvalues\n      assertU(adoc(\"id\", \"2\", fieldname, \"b\"));\n      assertU(commit());\n\n\n      // Check there are a mix of segments with and without docvalues\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final DirectoryReader topReader = searcher.getRawReader();\n\n        //Assert no merges\n\n        assertEquals(3, topReader.numDocs());\n        assertEquals(3, topReader.leaves().size());\n\n        final FieldInfos infos = MultiFields.getMergedFieldInfos(topReader);\n        //The global field type should have docValues because a document with dvs was added\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(fieldname).getDocValuesType());\n\n        for (LeafReaderContext ctx : topReader.leaves()) {\n          LeafReader r = ctx.reader();\n          //Make sure there were no merges\n          assertEquals(1, r.numDocs());\n          Document doc = r.document(0);\n          String id = doc.getField(\"id\").stringValue();\n\n          if (id.equals(\"1\") || id.equals(\"3\")) {\n            assertEquals(DocValuesType.NONE, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          } else {\n            assertEquals(DocValuesType.SORTED, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          }\n\n        }\n      } finally {\n        searcherRef.decref();\n      }\n    }\n\n    // Assert sort order is correct\n    assertQ(req(\"q\", \"string_add_dv_later:*\", \"sort\", \"string_add_dv_later asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=2]\",\n        \"//result/doc[3]/int[@name='id'][.=3]\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestHalfAndHalfDocValues#testHalfAndHalfDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestHalfAndHalfDocValues#testHalfAndHalfDocValues().mjava","sourceNew":"  public void testHalfAndHalfDocValues() throws Exception {\n    // Insert two docs without docvalues\n    String fieldname = \"string_add_dv_later\";\n    assertU(adoc(\"id\", \"3\", fieldname, \"c\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"1\", fieldname, \"a\"));\n    assertU(commit());\n\n\n    try (SolrCore core = h.getCoreInc()) {\n      assertFalse(core.getLatestSchema().getField(fieldname).hasDocValues());\n      // Add docvalues to the field type\n      IndexSchema schema = core.getLatestSchema();\n      SchemaField oldField = schema.getField(fieldname);\n      int newProperties = oldField.getProperties() | SchemaField.DOC_VALUES;\n\n      SchemaField sf = new SchemaField(fieldname, oldField.getType(), newProperties, null);\n      schema.getFields().put(fieldname, sf);\n\n      // Insert a new doc with docvalues\n      assertU(adoc(\"id\", \"2\", fieldname, \"b\"));\n      assertU(commit());\n\n\n      // Check there are a mix of segments with and without docvalues\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final DirectoryReader topReader = searcher.getRawReader();\n\n        //Assert no merges\n\n        assertEquals(3, topReader.numDocs());\n        assertEquals(3, topReader.leaves().size());\n\n        final FieldInfos infos = MultiFields.getMergedFieldInfos(topReader);\n        //The global field type should have docValues because a document with dvs was added\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(fieldname).getDocValuesType());\n\n        for (LeafReaderContext ctx : topReader.leaves()) {\n          LeafReader r = ctx.reader();\n          //Make sure there were no merges\n          assertEquals(1, r.numDocs());\n          Document doc = r.document(0);\n          String id = doc.getField(\"id\").stringValue();\n\n          if (id.equals(\"1\") || id.equals(\"3\")) {\n            assertEquals(DocValuesType.NONE, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          } else {\n            assertEquals(DocValuesType.SORTED, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          }\n\n        }\n      } finally {\n        searcherRef.decref();\n      }\n    }\n\n    // Assert sort order is correct\n    assertQ(req(\"q\", \"string_add_dv_later:*\", \"sort\", \"string_add_dv_later asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=2]\",\n        \"//result/doc[3]/str[@name='id'][.=3]\"\n    );\n  }\n\n","sourceOld":"  public void testHalfAndHalfDocValues() throws Exception {\n    // Insert two docs without docvalues\n    String fieldname = \"string_add_dv_later\";\n    assertU(adoc(\"id\", \"3\", fieldname, \"c\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"1\", fieldname, \"a\"));\n    assertU(commit());\n\n\n    try (SolrCore core = h.getCoreInc()) {\n      assertFalse(core.getLatestSchema().getField(fieldname).hasDocValues());\n      // Add docvalues to the field type\n      IndexSchema schema = core.getLatestSchema();\n      SchemaField oldField = schema.getField(fieldname);\n      int newProperties = oldField.getProperties() | SchemaField.DOC_VALUES;\n\n      SchemaField sf = new SchemaField(fieldname, oldField.getType(), newProperties, null);\n      schema.getFields().put(fieldname, sf);\n\n      // Insert a new doc with docvalues\n      assertU(adoc(\"id\", \"2\", fieldname, \"b\"));\n      assertU(commit());\n\n\n      // Check there are a mix of segments with and without docvalues\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final DirectoryReader topReader = searcher.getRawReader();\n\n        //Assert no merges\n\n        assertEquals(3, topReader.numDocs());\n        assertEquals(3, topReader.leaves().size());\n\n        final FieldInfos infos = MultiFields.getMergedFieldInfos(topReader);\n        //The global field type should have docValues because a document with dvs was added\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(fieldname).getDocValuesType());\n\n        for (LeafReaderContext ctx : topReader.leaves()) {\n          LeafReader r = ctx.reader();\n          //Make sure there were no merges\n          assertEquals(1, r.numDocs());\n          Document doc = r.document(0);\n          String id = doc.getField(\"id\").stringValue();\n\n          if (id.equals(\"1\") || id.equals(\"3\")) {\n            assertEquals(DocValuesType.NONE, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          } else {\n            assertEquals(DocValuesType.SORTED, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          }\n\n        }\n      } finally {\n        searcherRef.decref();\n      }\n    }\n\n    // Assert sort order is correct\n    assertQ(req(\"q\", \"string_add_dv_later:*\", \"sort\", \"string_add_dv_later asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=2]\",\n        \"//result/doc[3]/int[@name='id'][.=3]\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestHalfAndHalfDocValues#testHalfAndHalfDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestHalfAndHalfDocValues#testHalfAndHalfDocValues().mjava","sourceNew":"  public void testHalfAndHalfDocValues() throws Exception {\n    // Insert two docs without docvalues\n    String fieldname = \"string_add_dv_later\";\n    assertU(adoc(\"id\", \"3\", fieldname, \"c\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"1\", fieldname, \"a\"));\n    assertU(commit());\n\n\n    try (SolrCore core = h.getCoreInc()) {\n      assertFalse(core.getLatestSchema().getField(fieldname).hasDocValues());\n      // Add docvalues to the field type\n      IndexSchema schema = core.getLatestSchema();\n      SchemaField oldField = schema.getField(fieldname);\n      int newProperties = oldField.getProperties() | SchemaField.DOC_VALUES;\n\n      SchemaField sf = new SchemaField(fieldname, oldField.getType(), newProperties, null);\n      schema.getFields().put(fieldname, sf);\n\n      // Insert a new doc with docvalues\n      assertU(adoc(\"id\", \"2\", fieldname, \"b\"));\n      assertU(commit());\n\n\n      // Check there are a mix of segments with and without docvalues\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final DirectoryReader topReader = searcher.getRawReader();\n\n        //Assert no merges\n\n        assertEquals(3, topReader.numDocs());\n        assertEquals(3, topReader.leaves().size());\n\n        final FieldInfos infos = MultiFields.getMergedFieldInfos(topReader);\n        //The global field type should have docValues because a document with dvs was added\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(fieldname).getDocValuesType());\n\n        for (LeafReaderContext ctx : topReader.leaves()) {\n          LeafReader r = ctx.reader();\n          //Make sure there were no merges\n          assertEquals(1, r.numDocs());\n          Document doc = r.document(0);\n          String id = doc.getField(\"id\").stringValue();\n\n          if (id.equals(\"1\") || id.equals(\"3\")) {\n            assertEquals(DocValuesType.NONE, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          } else {\n            assertEquals(DocValuesType.SORTED, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          }\n\n        }\n      } finally {\n        searcherRef.decref();\n      }\n    }\n\n    // Assert sort order is correct\n    assertQ(req(\"q\", \"string_add_dv_later:*\", \"sort\", \"string_add_dv_later asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=2]\",\n        \"//result/doc[3]/str[@name='id'][.=3]\"\n    );\n  }\n\n","sourceOld":"  public void testHalfAndHalfDocValues() throws Exception {\n    // Insert two docs without docvalues\n    String fieldname = \"string_add_dv_later\";\n    assertU(adoc(\"id\", \"3\", fieldname, \"c\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"1\", fieldname, \"a\"));\n    assertU(commit());\n\n\n    try (SolrCore core = h.getCoreInc()) {\n      assertFalse(core.getLatestSchema().getField(fieldname).hasDocValues());\n      // Add docvalues to the field type\n      IndexSchema schema = core.getLatestSchema();\n      SchemaField oldField = schema.getField(fieldname);\n      int newProperties = oldField.getProperties() | SchemaField.DOC_VALUES;\n\n      SchemaField sf = new SchemaField(fieldname, oldField.getType(), newProperties, null);\n      schema.getFields().put(fieldname, sf);\n\n      // Insert a new doc with docvalues\n      assertU(adoc(\"id\", \"2\", fieldname, \"b\"));\n      assertU(commit());\n\n\n      // Check there are a mix of segments with and without docvalues\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final DirectoryReader topReader = searcher.getRawReader();\n\n        //Assert no merges\n\n        assertEquals(3, topReader.numDocs());\n        assertEquals(3, topReader.leaves().size());\n\n        final FieldInfos infos = MultiFields.getMergedFieldInfos(topReader);\n        //The global field type should have docValues because a document with dvs was added\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(fieldname).getDocValuesType());\n\n        for (LeafReaderContext ctx : topReader.leaves()) {\n          LeafReader r = ctx.reader();\n          //Make sure there were no merges\n          assertEquals(1, r.numDocs());\n          Document doc = r.document(0);\n          String id = doc.getField(\"id\").stringValue();\n\n          if (id.equals(\"1\") || id.equals(\"3\")) {\n            assertEquals(DocValuesType.NONE, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          } else {\n            assertEquals(DocValuesType.SORTED, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          }\n\n        }\n      } finally {\n        searcherRef.decref();\n      }\n    }\n\n    // Assert sort order is correct\n    assertQ(req(\"q\", \"string_add_dv_later:*\", \"sort\", \"string_add_dv_later asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=2]\",\n        \"//result/doc[3]/int[@name='id'][.=3]\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestHalfAndHalfDocValues#testHalfAndHalfDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestHalfAndHalfDocValues#testHalfAndHalfDocValues().mjava","sourceNew":"  public void testHalfAndHalfDocValues() throws Exception {\n    // Insert two docs without docvalues\n    String fieldname = \"string_add_dv_later\";\n    assertU(adoc(\"id\", \"3\", fieldname, \"c\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"1\", fieldname, \"a\"));\n    assertU(commit());\n\n\n    try (SolrCore core = h.getCoreInc()) {\n      assertFalse(core.getLatestSchema().getField(fieldname).hasDocValues());\n      // Add docvalues to the field type\n      IndexSchema schema = core.getLatestSchema();\n      SchemaField oldField = schema.getField(fieldname);\n      int newProperties = oldField.getProperties() | SchemaField.DOC_VALUES;\n\n      SchemaField sf = new SchemaField(fieldname, oldField.getType(), newProperties, null);\n      schema.getFields().put(fieldname, sf);\n\n      // Insert a new doc with docvalues\n      assertU(adoc(\"id\", \"2\", fieldname, \"b\"));\n      assertU(commit());\n\n\n      // Check there are a mix of segments with and without docvalues\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final DirectoryReader topReader = searcher.getRawReader();\n\n        //Assert no merges\n\n        assertEquals(3, topReader.numDocs());\n        assertEquals(3, topReader.leaves().size());\n\n        final FieldInfos infos = MultiFields.getMergedFieldInfos(topReader);\n        //The global field type should have docValues because a document with dvs was added\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(fieldname).getDocValuesType());\n\n        for (LeafReaderContext ctx : topReader.leaves()) {\n          LeafReader r = ctx.reader();\n          //Make sure there were no merges\n          assertEquals(1, r.numDocs());\n          Document doc = r.document(0);\n          String id = doc.getField(\"id\").stringValue();\n\n          if (id.equals(\"1\") || id.equals(\"3\")) {\n            assertEquals(DocValuesType.NONE, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          } else {\n            assertEquals(DocValuesType.SORTED, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          }\n\n        }\n      } finally {\n        searcherRef.decref();\n      }\n    }\n\n    // Assert sort order is correct\n    assertQ(req(\"q\", \"string_add_dv_later:*\", \"sort\", \"string_add_dv_later asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=2]\",\n        \"//result/doc[3]/str[@name='id'][.=3]\"\n    );\n  }\n\n","sourceOld":"  public void testHalfAndHalfDocValues() throws Exception {\n    // Insert two docs without docvalues\n    String fieldname = \"string_add_dv_later\";\n    assertU(adoc(\"id\", \"3\", fieldname, \"c\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"1\", fieldname, \"a\"));\n    assertU(commit());\n\n\n    try (SolrCore core = h.getCoreInc()) {\n      assertFalse(core.getLatestSchema().getField(fieldname).hasDocValues());\n      // Add docvalues to the field type\n      IndexSchema schema = core.getLatestSchema();\n      SchemaField oldField = schema.getField(fieldname);\n      int newProperties = oldField.getProperties() | SchemaField.DOC_VALUES;\n\n      SchemaField sf = new SchemaField(fieldname, oldField.getType(), newProperties, null);\n      schema.getFields().put(fieldname, sf);\n\n      // Insert a new doc with docvalues\n      assertU(adoc(\"id\", \"2\", fieldname, \"b\"));\n      assertU(commit());\n\n\n      // Check there are a mix of segments with and without docvalues\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final DirectoryReader topReader = searcher.getRawReader();\n\n        //Assert no merges\n\n        assertEquals(3, topReader.numDocs());\n        assertEquals(3, topReader.leaves().size());\n\n        final FieldInfos infos = MultiFields.getMergedFieldInfos(topReader);\n        //The global field type should have docValues because a document with dvs was added\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(fieldname).getDocValuesType());\n\n        for (LeafReaderContext ctx : topReader.leaves()) {\n          LeafReader r = ctx.reader();\n          //Make sure there were no merges\n          assertEquals(1, r.numDocs());\n          Document doc = r.document(0);\n          String id = doc.getField(\"id\").stringValue();\n\n          if (id.equals(\"1\") || id.equals(\"3\")) {\n            assertEquals(DocValuesType.NONE, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          } else {\n            assertEquals(DocValuesType.SORTED, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          }\n\n        }\n      } finally {\n        searcherRef.decref();\n      }\n    }\n\n    // Assert sort order is correct\n    assertQ(req(\"q\", \"string_add_dv_later:*\", \"sort\", \"string_add_dv_later asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=2]\",\n        \"//result/doc[3]/int[@name='id'][.=3]\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestHalfAndHalfDocValues#testHalfAndHalfDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestHalfAndHalfDocValues#testHalfAndHalfDocValues().mjava","sourceNew":"  public void testHalfAndHalfDocValues() throws Exception {\n    // Insert two docs without docvalues\n    String fieldname = \"string_add_dv_later\";\n    assertU(adoc(\"id\", \"3\", fieldname, \"c\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"1\", fieldname, \"a\"));\n    assertU(commit());\n\n\n    try (SolrCore core = h.getCoreInc()) {\n      assertFalse(core.getLatestSchema().getField(fieldname).hasDocValues());\n      // Add docvalues to the field type\n      IndexSchema schema = core.getLatestSchema();\n      SchemaField oldField = schema.getField(fieldname);\n      int newProperties = oldField.getProperties() | SchemaField.DOC_VALUES;\n\n      SchemaField sf = new SchemaField(fieldname, oldField.getType(), newProperties, null);\n      schema.getFields().put(fieldname, sf);\n\n      // Insert a new doc with docvalues\n      assertU(adoc(\"id\", \"2\", fieldname, \"b\"));\n      assertU(commit());\n\n\n      // Check there are a mix of segments with and without docvalues\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final DirectoryReader topReader = searcher.getRawReader();\n\n        //Assert no merges\n\n        assertEquals(3, topReader.numDocs());\n        assertEquals(3, topReader.leaves().size());\n\n        final FieldInfos infos = FieldInfos.getMergedFieldInfos(topReader);\n        //The global field type should have docValues because a document with dvs was added\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(fieldname).getDocValuesType());\n\n        for (LeafReaderContext ctx : topReader.leaves()) {\n          LeafReader r = ctx.reader();\n          //Make sure there were no merges\n          assertEquals(1, r.numDocs());\n          Document doc = r.document(0);\n          String id = doc.getField(\"id\").stringValue();\n\n          if (id.equals(\"1\") || id.equals(\"3\")) {\n            assertEquals(DocValuesType.NONE, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          } else {\n            assertEquals(DocValuesType.SORTED, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          }\n\n        }\n      } finally {\n        searcherRef.decref();\n      }\n    }\n\n    // Assert sort order is correct\n    assertQ(req(\"q\", \"string_add_dv_later:*\", \"sort\", \"string_add_dv_later asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=2]\",\n        \"//result/doc[3]/str[@name='id'][.=3]\"\n    );\n  }\n\n","sourceOld":"  public void testHalfAndHalfDocValues() throws Exception {\n    // Insert two docs without docvalues\n    String fieldname = \"string_add_dv_later\";\n    assertU(adoc(\"id\", \"3\", fieldname, \"c\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"1\", fieldname, \"a\"));\n    assertU(commit());\n\n\n    try (SolrCore core = h.getCoreInc()) {\n      assertFalse(core.getLatestSchema().getField(fieldname).hasDocValues());\n      // Add docvalues to the field type\n      IndexSchema schema = core.getLatestSchema();\n      SchemaField oldField = schema.getField(fieldname);\n      int newProperties = oldField.getProperties() | SchemaField.DOC_VALUES;\n\n      SchemaField sf = new SchemaField(fieldname, oldField.getType(), newProperties, null);\n      schema.getFields().put(fieldname, sf);\n\n      // Insert a new doc with docvalues\n      assertU(adoc(\"id\", \"2\", fieldname, \"b\"));\n      assertU(commit());\n\n\n      // Check there are a mix of segments with and without docvalues\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final DirectoryReader topReader = searcher.getRawReader();\n\n        //Assert no merges\n\n        assertEquals(3, topReader.numDocs());\n        assertEquals(3, topReader.leaves().size());\n\n        final FieldInfos infos = MultiFields.getMergedFieldInfos(topReader);\n        //The global field type should have docValues because a document with dvs was added\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(fieldname).getDocValuesType());\n\n        for (LeafReaderContext ctx : topReader.leaves()) {\n          LeafReader r = ctx.reader();\n          //Make sure there were no merges\n          assertEquals(1, r.numDocs());\n          Document doc = r.document(0);\n          String id = doc.getField(\"id\").stringValue();\n\n          if (id.equals(\"1\") || id.equals(\"3\")) {\n            assertEquals(DocValuesType.NONE, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          } else {\n            assertEquals(DocValuesType.SORTED, r.getFieldInfos().fieldInfo(fieldname).getDocValuesType());\n          }\n\n        }\n      } finally {\n        searcherRef.decref();\n      }\n    }\n\n    // Assert sort order is correct\n    assertQ(req(\"q\", \"string_add_dv_later:*\", \"sort\", \"string_add_dv_later asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=2]\",\n        \"//result/doc[3]/str[@name='id'][.=3]\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a2c21c57833fe3ebba9997f38f63f717c64e1e3f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["a2c21c57833fe3ebba9997f38f63f717c64e1e3f"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["28288370235ed02234a64753cdbf0c6ec096304a"],"a2c21c57833fe3ebba9997f38f63f717c64e1e3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a2c21c57833fe3ebba9997f38f63f717c64e1e3f","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","a2c21c57833fe3ebba9997f38f63f717c64e1e3f"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a2c21c57833fe3ebba9997f38f63f717c64e1e3f":["e9017cf144952056066919f1ebc7897ff9bd71b1","a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}