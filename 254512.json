{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    SpanTermQuery other = (SpanTermQuery) obj;\n    if (term == null) {\n      if (other.term != null)\n        return false;\n    } else if (!term.equals(other.term))\n      return false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    SpanTermQuery other = (SpanTermQuery) obj;\n    if (term == null) {\n      if (other.term != null)\n        return false;\n    } else if (!term.equals(other.term))\n      return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    SpanTermQuery other = (SpanTermQuery) obj;\n    return term.equals(other.term);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    SpanTermQuery other = (SpanTermQuery) obj;\n    if (term == null) {\n      if (other.term != null)\n        return false;\n    } else if (!term.equals(other.term))\n      return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    SpanTermQuery other = (SpanTermQuery) obj;\n    return term.equals(other.term);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    SpanTermQuery other = (SpanTermQuery) obj;\n    if (term == null) {\n      if (other.term != null)\n        return false;\n    } else if (!term.equals(other.term))\n      return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaa8203c0525e91bf87759d14591ba3ff26dfa7f","date":1430913024,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (! super.equals(obj)) {\n      return false;\n    }\n    SpanTermQuery other = (SpanTermQuery) obj;\n    return term.equals(other.term);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    SpanTermQuery other = (SpanTermQuery) obj;\n    return term.equals(other.term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           term.equals(((SpanTermQuery) other).term);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (! super.equals(obj)) {\n      return false;\n    }\n    SpanTermQuery other = (SpanTermQuery) obj;\n    return term.equals(other.term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           term.equals(((SpanTermQuery) other).term);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (! super.equals(obj)) {\n      return false;\n    }\n    SpanTermQuery other = (SpanTermQuery) obj;\n    return term.equals(other.term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["aaa8203c0525e91bf87759d14591ba3ff26dfa7f"],"aaa8203c0525e91bf87759d14591ba3ff26dfa7f":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fab172655716b96f7e42376116235017a922de3a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["aaa8203c0525e91bf87759d14591ba3ff26dfa7f","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aaa8203c0525e91bf87759d14591ba3ff26dfa7f":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["aaa8203c0525e91bf87759d14591ba3ff26dfa7f","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}