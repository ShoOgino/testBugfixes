{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testBasicDelete().mjava","commits":[{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testBasicDelete().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicDelete() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n    IndexReader reader = null;\n    Term searchTerm = new Term(\"content\", \"aaa\");\n\n    //  add 100 documents with term : aaa\n    writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < 100; i++) {\n        addDoc(writer, searchTerm.text());\n    }\n    writer.close();\n\n    // OPEN READER AT THIS POINT - this should fix the view of the\n    // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n    reader = IndexReader.open(dir, false);\n    assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n    reader.close();\n\n    // DELETE DOCUMENTS CONTAINING TERM: aaa\n    int deleted = 0;\n    reader = IndexReader.open(dir, false);\n    deleted = reader.deleteDocuments(searchTerm);\n    assertEquals(\"deleted count\", 100, deleted);\n    assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n    // open a 2nd reader to make sure first reader can\n    // commit its changes (.del) while second reader\n    // is open:\n    IndexReader reader2 = IndexReader.open(dir, false);\n    reader.close();\n\n    // CREATE A NEW READER and re-test\n    reader = IndexReader.open(dir, false);\n    assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n    reader.close();\n    reader2.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testBasicDelete().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicDelete() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n    IndexReader reader = null;\n    Term searchTerm = new Term(\"content\", \"aaa\");\n\n    //  add 100 documents with term : aaa\n    writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < 100; i++) {\n        addDoc(writer, searchTerm.text());\n    }\n    writer.close();\n\n    // OPEN READER AT THIS POINT - this should fix the view of the\n    // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n    reader = IndexReader.open(dir, false);\n    assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n    reader.close();\n\n    // DELETE DOCUMENTS CONTAINING TERM: aaa\n    int deleted = 0;\n    reader = IndexReader.open(dir, false);\n    deleted = reader.deleteDocuments(searchTerm);\n    assertEquals(\"deleted count\", 100, deleted);\n    assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n    // open a 2nd reader to make sure first reader can\n    // commit its changes (.del) while second reader\n    // is open:\n    IndexReader reader2 = IndexReader.open(dir, false);\n    reader.close();\n\n    // CREATE A NEW READER and re-test\n    reader = IndexReader.open(dir, false);\n    assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n    reader.close();\n    reader2.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testBasicDelete().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicDelete() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n    IndexReader reader = null;\n    Term searchTerm = new Term(\"content\", \"aaa\");\n\n    //  add 100 documents with term : aaa\n    writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < 100; i++) {\n        addDoc(writer, searchTerm.text());\n    }\n    writer.close();\n\n    // OPEN READER AT THIS POINT - this should fix the view of the\n    // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n    reader = IndexReader.open(dir, false);\n    assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n    reader.close();\n\n    // DELETE DOCUMENTS CONTAINING TERM: aaa\n    int deleted = 0;\n    reader = IndexReader.open(dir, false);\n    deleted = reader.deleteDocuments(searchTerm);\n    assertEquals(\"deleted count\", 100, deleted);\n    assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n    // open a 2nd reader to make sure first reader can\n    // commit its changes (.del) while second reader\n    // is open:\n    IndexReader reader2 = IndexReader.open(dir, false);\n    reader.close();\n\n    // CREATE A NEW READER and re-test\n    reader = IndexReader.open(dir, false);\n    assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n    reader.close();\n    reader2.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testBasicDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testBasicDelete().mjava","sourceNew":"  public void testBasicDelete() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n    IndexReader reader = null;\n    Term searchTerm = new Term(\"content\", \"aaa\");\n\n    //  add 100 documents with term : aaa\n    writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < 100; i++) {\n        addDoc(writer, searchTerm.text());\n    }\n    writer.close();\n\n    // OPEN READER AT THIS POINT - this should fix the view of the\n    // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n    reader = IndexReader.open(dir, false);\n    assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n    reader.close();\n\n    // DELETE DOCUMENTS CONTAINING TERM: aaa\n    int deleted = 0;\n    reader = IndexReader.open(dir, false);\n    deleted = reader.deleteDocuments(searchTerm);\n    assertEquals(\"deleted count\", 100, deleted);\n    assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n    // open a 2nd reader to make sure first reader can\n    // commit its changes (.del) while second reader\n    // is open:\n    IndexReader reader2 = IndexReader.open(dir, false);\n    reader.close();\n\n    // CREATE A NEW READER and re-test\n    reader = IndexReader.open(dir, false);\n    assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n    reader.close();\n    reader2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasicDelete() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n    IndexReader reader = null;\n    Term searchTerm = new Term(\"content\", \"aaa\");\n\n    //  add 100 documents with term : aaa\n    writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < 100; i++) {\n        addDoc(writer, searchTerm.text());\n    }\n    writer.close();\n\n    // OPEN READER AT THIS POINT - this should fix the view of the\n    // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n    reader = IndexReader.open(dir, false);\n    assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n    reader.close();\n\n    // DELETE DOCUMENTS CONTAINING TERM: aaa\n    int deleted = 0;\n    reader = IndexReader.open(dir, false);\n    deleted = reader.deleteDocuments(searchTerm);\n    assertEquals(\"deleted count\", 100, deleted);\n    assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n    // open a 2nd reader to make sure first reader can\n    // commit its changes (.del) while second reader\n    // is open:\n    IndexReader reader2 = IndexReader.open(dir, false);\n    reader.close();\n\n    // CREATE A NEW READER and re-test\n    reader = IndexReader.open(dir, false);\n    assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n    reader.close();\n    reader2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testBasicDelete().mjava","sourceNew":null,"sourceOld":"  public void testBasicDelete() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n    IndexReader reader = null;\n    Term searchTerm = new Term(\"content\", \"aaa\");\n\n    //  add 100 documents with term : aaa\n    writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < 100; i++) {\n        addDoc(writer, searchTerm.text());\n    }\n    writer.close();\n\n    // OPEN READER AT THIS POINT - this should fix the view of the\n    // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n    reader = IndexReader.open(dir, false);\n    assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n    reader.close();\n\n    // DELETE DOCUMENTS CONTAINING TERM: aaa\n    int deleted = 0;\n    reader = IndexReader.open(dir, false);\n    deleted = reader.deleteDocuments(searchTerm);\n    assertEquals(\"deleted count\", 100, deleted);\n    assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n    // open a 2nd reader to make sure first reader can\n    // commit its changes (.del) while second reader\n    // is open:\n    IndexReader reader2 = IndexReader.open(dir, false);\n    reader.close();\n\n    // CREATE A NEW READER and re-test\n    reader = IndexReader.open(dir, false);\n    assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n    reader.close();\n    reader2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testBasicDelete().mjava","sourceNew":null,"sourceOld":"  public void testBasicDelete() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n    IndexReader reader = null;\n    Term searchTerm = new Term(\"content\", \"aaa\");\n\n    //  add 100 documents with term : aaa\n    writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < 100; i++) {\n        addDoc(writer, searchTerm.text());\n    }\n    writer.close();\n\n    // OPEN READER AT THIS POINT - this should fix the view of the\n    // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n    reader = IndexReader.open(dir, false);\n    assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n    reader.close();\n\n    // DELETE DOCUMENTS CONTAINING TERM: aaa\n    int deleted = 0;\n    reader = IndexReader.open(dir, false);\n    deleted = reader.deleteDocuments(searchTerm);\n    assertEquals(\"deleted count\", 100, deleted);\n    assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n    // open a 2nd reader to make sure first reader can\n    // commit its changes (.del) while second reader\n    // is open:\n    IndexReader reader2 = IndexReader.open(dir, false);\n    reader.close();\n\n    // CREATE A NEW READER and re-test\n    reader = IndexReader.open(dir, false);\n    assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n    reader.close();\n    reader2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testBasicDelete().mjava","sourceNew":null,"sourceOld":"  public void testBasicDelete() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n    IndexReader reader = null;\n    Term searchTerm = new Term(\"content\", \"aaa\");\n\n    //  add 100 documents with term : aaa\n    writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < 100; i++) {\n        addDoc(writer, searchTerm.text());\n    }\n    writer.close();\n\n    // OPEN READER AT THIS POINT - this should fix the view of the\n    // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n    reader = IndexReader.open(dir, false);\n    assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n    reader.close();\n\n    // DELETE DOCUMENTS CONTAINING TERM: aaa\n    int deleted = 0;\n    reader = IndexReader.open(dir, false);\n    deleted = reader.deleteDocuments(searchTerm);\n    assertEquals(\"deleted count\", 100, deleted);\n    assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n    // open a 2nd reader to make sure first reader can\n    // commit its changes (.del) while second reader\n    // is open:\n    IndexReader reader2 = IndexReader.open(dir, false);\n    reader.close();\n\n    // CREATE A NEW READER and re-test\n    reader = IndexReader.open(dir, false);\n    assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n    assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n    reader.close();\n    reader2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["06584e6e98d592b34e1329b384182f368d2025e8"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["06584e6e98d592b34e1329b384182f368d2025e8","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"06584e6e98d592b34e1329b384182f368d2025e8":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["06584e6e98d592b34e1329b384182f368d2025e8","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","06584e6e98d592b34e1329b384182f368d2025e8","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"06584e6e98d592b34e1329b384182f368d2025e8":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}