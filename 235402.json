{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#randomArray().mjava","commits":[{"id":"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","date":1349450075,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#randomArray().mjava","pathOld":"/dev/null","sourceNew":"  static byte[] randomArray() {\n    final int max = random().nextBoolean()\n        ? random().nextInt(4)\n        : random().nextInt(256);\n    final int length = random().nextBoolean()\n        ? random().nextInt(20)\n        : random().nextInt(192 * 1024);\n    final byte[] arr = new byte[length];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = (byte) RandomInts.randomIntBetween(random(), 0, max);\n    }\n    return arr;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"078bbd4ef812eb14d6d5b1c0ab72b4df820604dd","date":1351768691,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#randomArray().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#randomArray().mjava","sourceNew":"  static byte[] randomArray() {\n    final int max = random().nextBoolean()\n        ? random().nextInt(4)\n        : random().nextInt(256);\n    final int length = random().nextBoolean()\n        ? random().nextInt(20)\n        : random().nextInt(192 * 1024);\n    return randomArray(length, max);\n  }\n\n","sourceOld":"  static byte[] randomArray() {\n    final int max = random().nextBoolean()\n        ? random().nextInt(4)\n        : random().nextInt(256);\n    final int length = random().nextBoolean()\n        ? random().nextInt(20)\n        : random().nextInt(192 * 1024);\n    final byte[] arr = new byte[length];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = (byte) RandomInts.randomIntBetween(random(), 0, max);\n    }\n    return arr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab","date":1354403647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#randomArray().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#randomArray().mjava","sourceNew":"  static byte[] randomArray() {\n    final int max = random().nextBoolean()\n        ? random().nextInt(4)\n        : random().nextInt(256);\n    final int length = random().nextBoolean()\n        ? random().nextInt(20)\n        : random().nextInt(192 * 1024);\n    return randomArray(length, max);\n  }\n\n","sourceOld":"  static byte[] randomArray() {\n    final int max = random().nextBoolean()\n        ? random().nextInt(4)\n        : random().nextInt(256);\n    final int length = random().nextBoolean()\n        ? random().nextInt(20)\n        : random().nextInt(192 * 1024);\n    return randomArray(length, max);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#randomArray().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#randomArray().mjava","sourceNew":"  static byte[] randomArray() {\n    final int max = random().nextBoolean()\n        ? random().nextInt(4)\n        : random().nextInt(256);\n    final int length = random().nextBoolean()\n        ? random().nextInt(20)\n        : random().nextInt(192 * 1024);\n    return randomArray(length, max);\n  }\n\n","sourceOld":"  static byte[] randomArray() {\n    final int max = random().nextBoolean()\n        ? random().nextInt(4)\n        : random().nextInt(256);\n    final int length = random().nextBoolean()\n        ? random().nextInt(20)\n        : random().nextInt(192 * 1024);\n    return randomArray(length, max);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["078bbd4ef812eb14d6d5b1c0ab72b4df820604dd","1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"078bbd4ef812eb14d6d5b1c0ab72b4df820604dd":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["078bbd4ef812eb14d6d5b1c0ab72b4df820604dd"]},"commit2Childs":{"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["078bbd4ef812eb14d6d5b1c0ab72b4df820604dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"078bbd4ef812eb14d6d5b1c0ab72b4df820604dd":["407687e67faf6e1f02a211ca078d8e3eed631027","1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}