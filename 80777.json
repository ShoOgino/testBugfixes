{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSynonymsPhrase().mjava","commits":[{"id":"833eaf39eb6113cb67002b52c1416331abbc1570","date":1368205176,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSynonymsPhrase().mjava","pathOld":"/dev/null","sourceNew":"  /** forms multiphrase query */\n  public void testSynonymsPhrase() throws Exception {\n    MultiPhraseQuery expected = new MultiPhraseQuery();\n    expected.add(new Term(\"field\", \"old\"));\n    expected.add(new Term[] { new Term(\"field\", \"dogs\"), new Term(\"field\", \"dog\") });\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"\"));\n    expected.setBoost(2.0f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"^2\"));\n    expected.setSlop(3);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"~3^2\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSynonymsPhrase().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSynonymsPhrase().mjava","sourceNew":"  /** forms multiphrase query */\n  public void testSynonymsPhrase() throws Exception {\n    MultiPhraseQuery expected = new MultiPhraseQuery();\n    expected.add(new Term(\"field\", \"old\"));\n    expected.add(new Term[] { new Term(\"field\", \"dogs\"), new Term(\"field\", \"dog\") });\n    QueryParser qp = new QueryParser(\"field\", new MockSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"\"));\n    expected.setBoost(2.0f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"^2\"));\n    expected.setSlop(3);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"~3^2\"));\n  }\n\n","sourceOld":"  /** forms multiphrase query */\n  public void testSynonymsPhrase() throws Exception {\n    MultiPhraseQuery expected = new MultiPhraseQuery();\n    expected.add(new Term(\"field\", \"old\"));\n    expected.add(new Term[] { new Term(\"field\", \"dogs\"), new Term(\"field\", \"dog\") });\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"\"));\n    expected.setBoost(2.0f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"^2\"));\n    expected.setSlop(3);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"~3^2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSynonymsPhrase().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSynonymsPhrase().mjava","sourceNew":"  /** forms multiphrase query */\n  public void testSynonymsPhrase() throws Exception {\n    MultiPhraseQuery expected = new MultiPhraseQuery();\n    expected.add(new Term(\"field\", \"old\"));\n    expected.add(new Term[] { new Term(\"field\", \"dogs\"), new Term(\"field\", \"dog\") });\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"\"));\n    expected.setBoost(2.0f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"^2\"));\n    expected.setSlop(3);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"~3^2\"));\n  }\n\n","sourceOld":"  /** forms multiphrase query */\n  public void testSynonymsPhrase() throws Exception {\n    MultiPhraseQuery expected = new MultiPhraseQuery();\n    expected.add(new Term(\"field\", \"old\"));\n    expected.add(new Term[] { new Term(\"field\", \"dogs\"), new Term(\"field\", \"dog\") });\n    QueryParser qp = new QueryParser(\"field\", new MockSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"\"));\n    expected.setBoost(2.0f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"^2\"));\n    expected.setSlop(3);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"~3^2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSynonymsPhrase().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSynonymsPhrase().mjava","sourceNew":"  /** forms multiphrase query */\n  public void testSynonymsPhrase() throws Exception {\n    MultiPhraseQuery expected = new MultiPhraseQuery();\n    expected.add(new Term(\"field\", \"old\"));\n    expected.add(new Term[] { new Term(\"field\", \"dogs\"), new Term(\"field\", \"dog\") });\n    QueryParser qp = new QueryParser(\"field\", new MockSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"\"));\n    expected.setBoost(2.0f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"^2\"));\n    expected.setSlop(3);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"~3^2\"));\n  }\n\n","sourceOld":"  /** forms multiphrase query */\n  public void testSynonymsPhrase() throws Exception {\n    MultiPhraseQuery expected = new MultiPhraseQuery();\n    expected.add(new Term(\"field\", \"old\"));\n    expected.add(new Term[] { new Term(\"field\", \"dogs\"), new Term(\"field\", \"dog\") });\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"\"));\n    expected.setBoost(2.0f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"^2\"));\n    expected.setSlop(3);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"~3^2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSynonymsPhrase().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSynonymsPhrase().mjava","sourceNew":"  /** forms multiphrase query */\n  public void testSynonymsPhrase() throws Exception {\n    MultiPhraseQuery expectedQ = new MultiPhraseQuery();\n    expectedQ.add(new Term(\"field\", \"old\"));\n    expectedQ.add(new Term[] { new Term(\"field\", \"dogs\"), new Term(\"field\", \"dog\") });\n    QueryParser qp = new QueryParser(\"field\", new MockSynonymAnalyzer());\n    assertEquals(expectedQ, qp.parse(\"\\\"old dogs\\\"\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expectedQ, qp.parse(\"\\\"old dogs\\\"\"));\n    BoostQuery expected = new BoostQuery(expectedQ, 2f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"^2\"));\n    expectedQ.setSlop(3);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"~3^2\"));\n  }\n\n","sourceOld":"  /** forms multiphrase query */\n  public void testSynonymsPhrase() throws Exception {\n    MultiPhraseQuery expected = new MultiPhraseQuery();\n    expected.add(new Term(\"field\", \"old\"));\n    expected.add(new Term[] { new Term(\"field\", \"dogs\"), new Term(\"field\", \"dog\") });\n    QueryParser qp = new QueryParser(\"field\", new MockSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"\"));\n    expected.setBoost(2.0f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"^2\"));\n    expected.setSlop(3);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"~3^2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b4a131f1796dd57cc6698aae3d589d32a29deb","date":1457087316,"type":3,"author":"Luc Vanlerberghe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSynonymsPhrase().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSynonymsPhrase().mjava","sourceNew":"  /** forms multiphrase query */\n  public void testSynonymsPhrase() throws Exception {\n    MultiPhraseQuery.Builder expectedQBuilder = new MultiPhraseQuery.Builder();\n    expectedQBuilder.add(new Term(\"field\", \"old\"));\n    expectedQBuilder.add(new Term[] { new Term(\"field\", \"dogs\"), new Term(\"field\", \"dog\") });\n    QueryParser qp = new QueryParser(\"field\", new MockSynonymAnalyzer());\n    assertEquals(expectedQBuilder.build(), qp.parse(\"\\\"old dogs\\\"\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expectedQBuilder.build(), qp.parse(\"\\\"old dogs\\\"\"));\n    BoostQuery expected = new BoostQuery(expectedQBuilder.build(), 2f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"^2\"));\n    expectedQBuilder.setSlop(3);\n    expected = new BoostQuery(expectedQBuilder.build(), 2f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"~3^2\"));\n  }\n\n","sourceOld":"  /** forms multiphrase query */\n  public void testSynonymsPhrase() throws Exception {\n    MultiPhraseQuery expectedQ = new MultiPhraseQuery();\n    expectedQ.add(new Term(\"field\", \"old\"));\n    expectedQ.add(new Term[] { new Term(\"field\", \"dogs\"), new Term(\"field\", \"dog\") });\n    QueryParser qp = new QueryParser(\"field\", new MockSynonymAnalyzer());\n    assertEquals(expectedQ, qp.parse(\"\\\"old dogs\\\"\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expectedQ, qp.parse(\"\\\"old dogs\\\"\"));\n    BoostQuery expected = new BoostQuery(expectedQ, 2f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"^2\"));\n    expectedQ.setSlop(3);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"~3^2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSynonymsPhrase().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSynonymsPhrase().mjava","sourceNew":"  /** forms multiphrase query */\n  public void testSynonymsPhrase() throws Exception {\n    MultiPhraseQuery.Builder expectedQBuilder = new MultiPhraseQuery.Builder();\n    expectedQBuilder.add(new Term(\"field\", \"old\"));\n    expectedQBuilder.add(new Term[] { new Term(\"field\", \"dogs\"), new Term(\"field\", \"dog\") });\n    QueryParser qp = new QueryParser(\"field\", new MockSynonymAnalyzer());\n    assertEquals(expectedQBuilder.build(), qp.parse(\"\\\"old dogs\\\"\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expectedQBuilder.build(), qp.parse(\"\\\"old dogs\\\"\"));\n    BoostQuery expected = new BoostQuery(expectedQBuilder.build(), 2f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"^2\"));\n    expectedQBuilder.setSlop(3);\n    expected = new BoostQuery(expectedQBuilder.build(), 2f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"~3^2\"));\n  }\n\n","sourceOld":"  /** forms multiphrase query */\n  public void testSynonymsPhrase() throws Exception {\n    MultiPhraseQuery expectedQ = new MultiPhraseQuery();\n    expectedQ.add(new Term(\"field\", \"old\"));\n    expectedQ.add(new Term[] { new Term(\"field\", \"dogs\"), new Term(\"field\", \"dog\") });\n    QueryParser qp = new QueryParser(\"field\", new MockSynonymAnalyzer());\n    assertEquals(expectedQ, qp.parse(\"\\\"old dogs\\\"\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expectedQ, qp.parse(\"\\\"old dogs\\\"\"));\n    BoostQuery expected = new BoostQuery(expectedQ, 2f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"^2\"));\n    expectedQ.setSlop(3);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"~3^2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSynonymsPhrase().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSynonymsPhrase().mjava","sourceNew":"  /** forms multiphrase query */\n  public void testSynonymsPhrase() throws Exception {\n    MultiPhraseQuery.Builder expectedQBuilder = new MultiPhraseQuery.Builder();\n    expectedQBuilder.add(new Term(FIELD, \"old\"));\n    expectedQBuilder.add(new Term[] { new Term(FIELD, \"dogs\"), new Term(FIELD, \"dog\") });\n    QueryParser qp = new QueryParser(FIELD, new MockSynonymAnalyzer());\n    assertEquals(expectedQBuilder.build(), qp.parse(\"\\\"old dogs\\\"\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expectedQBuilder.build(), qp.parse(\"\\\"old dogs\\\"\"));\n    BoostQuery expected = new BoostQuery(expectedQBuilder.build(), 2f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"^2\"));\n    expectedQBuilder.setSlop(3);\n    expected = new BoostQuery(expectedQBuilder.build(), 2f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"~3^2\"));\n  }\n\n","sourceOld":"  /** forms multiphrase query */\n  public void testSynonymsPhrase() throws Exception {\n    MultiPhraseQuery.Builder expectedQBuilder = new MultiPhraseQuery.Builder();\n    expectedQBuilder.add(new Term(\"field\", \"old\"));\n    expectedQBuilder.add(new Term[] { new Term(\"field\", \"dogs\"), new Term(\"field\", \"dog\") });\n    QueryParser qp = new QueryParser(\"field\", new MockSynonymAnalyzer());\n    assertEquals(expectedQBuilder.build(), qp.parse(\"\\\"old dogs\\\"\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expectedQBuilder.build(), qp.parse(\"\\\"old dogs\\\"\"));\n    BoostQuery expected = new BoostQuery(expectedQBuilder.build(), 2f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"^2\"));\n    expectedQBuilder.setSlop(3);\n    expected = new BoostQuery(expectedQBuilder.build(), 2f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"~3^2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSynonymsPhrase().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSynonymsPhrase().mjava","sourceNew":"  /** forms multiphrase query */\n  public void testSynonymsPhrase() throws Exception {\n    MultiPhraseQuery.Builder expectedQBuilder = new MultiPhraseQuery.Builder();\n    expectedQBuilder.add(new Term(FIELD, \"old\"));\n    expectedQBuilder.add(new Term[] { new Term(FIELD, \"dogs\"), new Term(FIELD, \"dog\") });\n    QueryParser qp = new QueryParser(FIELD, new MockSynonymAnalyzer());\n    assertEquals(expectedQBuilder.build(), qp.parse(\"\\\"old dogs\\\"\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expectedQBuilder.build(), qp.parse(\"\\\"old dogs\\\"\"));\n    BoostQuery expected = new BoostQuery(expectedQBuilder.build(), 2f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"^2\"));\n    expectedQBuilder.setSlop(3);\n    expected = new BoostQuery(expectedQBuilder.build(), 2f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"~3^2\"));\n  }\n\n","sourceOld":"  /** forms multiphrase query */\n  public void testSynonymsPhrase() throws Exception {\n    MultiPhraseQuery.Builder expectedQBuilder = new MultiPhraseQuery.Builder();\n    expectedQBuilder.add(new Term(\"field\", \"old\"));\n    expectedQBuilder.add(new Term[] { new Term(\"field\", \"dogs\"), new Term(\"field\", \"dog\") });\n    QueryParser qp = new QueryParser(\"field\", new MockSynonymAnalyzer());\n    assertEquals(expectedQBuilder.build(), qp.parse(\"\\\"old dogs\\\"\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expectedQBuilder.build(), qp.parse(\"\\\"old dogs\\\"\"));\n    BoostQuery expected = new BoostQuery(expectedQBuilder.build(), 2f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"^2\"));\n    expectedQBuilder.setSlop(3);\n    expected = new BoostQuery(expectedQBuilder.build(), 2f);\n    assertEquals(expected, qp.parse(\"\\\"old dogs\\\"~3^2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["833eaf39eb6113cb67002b52c1416331abbc1570"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"833eaf39eb6113cb67002b52c1416331abbc1570":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["2dfdf766e55e943d942055d7de53c7ad6bc45283","92b4a131f1796dd57cc6698aae3d589d32a29deb"],"ea4107f60b9f95623c16025c9c247412ff809092":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["833eaf39eb6113cb67002b52c1416331abbc1570"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["92b4a131f1796dd57cc6698aae3d589d32a29deb","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"833eaf39eb6113cb67002b52c1416331abbc1570":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}