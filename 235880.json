{"path":"lucene/test-framework/src/test/org/apache/lucene/search/TestBaseExplanationTestCase#testIncorrectExplainScores().mjava","commits":[{"id":"7c82b0d4b7bf499a159eeff92add20bac6599cc1","date":1465223716,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/search/TestBaseExplanationTestCase#testIncorrectExplainScores().mjava","pathOld":"/dev/null","sourceNew":"  public void testIncorrectExplainScores() throws Exception {\n    // sanity check what a real TermQuery matches\n    qtest(new TermQuery(new Term(FIELD, \"zz\")), new int[] { 1, 3 });\n\n    // ensure when the Explanations are broken, we get an error about those matches\n    expectThrows(AssertionFailedError.class, () -> {\n        qtest(new BrokenExplainTermQuery(new Term(FIELD, \"zz\"), false, true), new int[] { 1, 3 });\n              \n      });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/search/TestBaseExplanationTestCase#testIncorrectExplainScores().mjava","pathOld":"/dev/null","sourceNew":"  public void testIncorrectExplainScores() throws Exception {\n    // sanity check what a real TermQuery matches\n    qtest(new TermQuery(new Term(FIELD, \"zz\")), new int[] { 1, 3 });\n\n    // ensure when the Explanations are broken, we get an error about those matches\n    expectThrows(AssertionFailedError.class, () -> {\n        qtest(new BrokenExplainTermQuery(new Term(FIELD, \"zz\"), false, true), new int[] { 1, 3 });\n              \n      });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/search/TestBaseExplanationTestCase#testIncorrectExplainScores().mjava","pathOld":"/dev/null","sourceNew":"  public void testIncorrectExplainScores() throws Exception {\n    // sanity check what a real TermQuery matches\n    qtest(new TermQuery(new Term(FIELD, \"zz\")), new int[] { 1, 3 });\n\n    // ensure when the Explanations are broken, we get an error about those matches\n    expectThrows(AssertionFailedError.class, () -> {\n        qtest(new BrokenExplainTermQuery(new Term(FIELD, \"zz\"), false, true), new int[] { 1, 3 });\n              \n      });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/search/TestBaseExplanationTestCase#testIncorrectExplainScores().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/search/TestBaseExplanationTestCase#testIncorrectExplainScores().mjava","sourceNew":"  public void testIncorrectExplainScores() throws Exception {\n    // sanity check what a real TermQuery matches\n    qtest(new TermQuery(new Term(FIELD, \"zz\")), new int[] { 1, 3 });\n\n    // ensure when the Explanations are broken, we get an error about those matches\n    expectThrows(AssertionError.class, () -> {\n        qtest(new BrokenExplainTermQuery(new Term(FIELD, \"zz\"), false, true), new int[] { 1, 3 });\n              \n      });\n  }\n\n","sourceOld":"  public void testIncorrectExplainScores() throws Exception {\n    // sanity check what a real TermQuery matches\n    qtest(new TermQuery(new Term(FIELD, \"zz\")), new int[] { 1, 3 });\n\n    // ensure when the Explanations are broken, we get an error about those matches\n    expectThrows(AssertionFailedError.class, () -> {\n        qtest(new BrokenExplainTermQuery(new Term(FIELD, \"zz\"), false, true), new int[] { 1, 3 });\n              \n      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/search/TestBaseExplanationTestCase#testIncorrectExplainScores().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/search/TestBaseExplanationTestCase#testIncorrectExplainScores().mjava","sourceNew":"  public void testIncorrectExplainScores() throws Exception {\n    // sanity check what a real TermQuery matches\n    qtest(new TermQuery(new Term(FIELD, \"zz\")), new int[] { 1, 3 });\n\n    // ensure when the Explanations are broken, we get an error about those matches\n    expectThrows(AssertionFailedError.class, () -> {\n        qtest(new BrokenExplainTermQuery(new Term(FIELD, \"zz\"), false, true), new int[] { 1, 3 });\n              \n      });\n  }\n\n","sourceOld":"  public void testIncorrectExplainScores() throws Exception {\n    // sanity check what a real TermQuery matches\n    qtest(new TermQuery(new Term(FIELD, \"zz\")), new int[] { 1, 3 });\n\n    // ensure when the Explanations are broken, we get an error about those matches\n    expectThrows(AssertionError.class, () -> {\n        qtest(new BrokenExplainTermQuery(new Term(FIELD, \"zz\"), false, true), new int[] { 1, 3 });\n              \n      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/search/TestBaseExplanationTestCase#testIncorrectExplainScores().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/search/TestBaseExplanationTestCase#testIncorrectExplainScores().mjava","sourceNew":"  public void testIncorrectExplainScores() throws Exception {\n    // sanity check what a real TermQuery matches\n    qtest(new TermQuery(new Term(FIELD, \"zz\")), new int[] { 1, 3 });\n\n    // ensure when the Explanations are broken, we get an error about those matches\n    expectThrows(AssertionError.class, () -> {\n        qtest(new BrokenExplainTermQuery(new Term(FIELD, \"zz\"), false, true), new int[] { 1, 3 });\n              \n      });\n  }\n\n","sourceOld":"  public void testIncorrectExplainScores() throws Exception {\n    // sanity check what a real TermQuery matches\n    qtest(new TermQuery(new Term(FIELD, \"zz\")), new int[] { 1, 3 });\n\n    // ensure when the Explanations are broken, we get an error about those matches\n    expectThrows(AssertionFailedError.class, () -> {\n        qtest(new BrokenExplainTermQuery(new Term(FIELD, \"zz\"), false, true), new int[] { 1, 3 });\n              \n      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["191128ac5b85671b1671e2c857437694283b6ebf"],"7c82b0d4b7bf499a159eeff92add20bac6599cc1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"191128ac5b85671b1671e2c857437694283b6ebf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7c82b0d4b7bf499a159eeff92add20bac6599cc1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","191128ac5b85671b1671e2c857437694283b6ebf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"7c82b0d4b7bf499a159eeff92add20bac6599cc1":["191128ac5b85671b1671e2c857437694283b6ebf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c82b0d4b7bf499a159eeff92add20bac6599cc1","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"191128ac5b85671b1671e2c857437694283b6ebf":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}