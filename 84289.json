{"path":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","commits":[{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"    /** Forcefully clear changes for the specifed segments,\n     *  and remove from the pool.   This is called on succesful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        Iterator iter = readerMap.entrySet().iterator();\n        while (iter.hasNext()) {\n          Map.Entry ent = (Map.Entry) iter.next();\n          ((SegmentReader) ent.getValue()).hasChanges = false;\n        }\n      } else {\n        final int numSegments = infos.size();\n        for(int i=0;i<numSegments;i++) {\n          final SegmentInfo info = infos.info(i);\n          if (readerMap.containsKey(info)) {\n            ((SegmentReader) readerMap.get(info)).hasChanges = false;\n          }\n        }     \n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","sourceNew":"    /** Forcefully clear changes for the specified segments,\n     *  and remove from the pool.   This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        Iterator iter = readerMap.entrySet().iterator();\n        while (iter.hasNext()) {\n          Map.Entry ent = (Map.Entry) iter.next();\n          ((SegmentReader) ent.getValue()).hasChanges = false;\n        }\n      } else {\n        final int numSegments = infos.size();\n        for(int i=0;i<numSegments;i++) {\n          final SegmentInfo info = infos.info(i);\n          if (readerMap.containsKey(info)) {\n            ((SegmentReader) readerMap.get(info)).hasChanges = false;\n          }\n        }     \n      }\n    }\n\n","sourceOld":"    /** Forcefully clear changes for the specifed segments,\n     *  and remove from the pool.   This is called on succesful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        Iterator iter = readerMap.entrySet().iterator();\n        while (iter.hasNext()) {\n          Map.Entry ent = (Map.Entry) iter.next();\n          ((SegmentReader) ent.getValue()).hasChanges = false;\n        }\n      } else {\n        final int numSegments = infos.size();\n        for(int i=0;i<numSegments;i++) {\n          final SegmentInfo info = infos.info(i);\n          if (readerMap.containsKey(info)) {\n            ((SegmentReader) readerMap.get(info)).hasChanges = false;\n          }\n        }     \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","sourceNew":"    /** Forcefully clear changes for the specified segments,\n     *  and remove from the pool.   This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          if (readerMap.containsKey(info)) {\n            readerMap.get(info).hasChanges = false;\n          }\n        }     \n      }\n    }\n\n","sourceOld":"    /** Forcefully clear changes for the specified segments,\n     *  and remove from the pool.   This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        Iterator iter = readerMap.entrySet().iterator();\n        while (iter.hasNext()) {\n          Map.Entry ent = (Map.Entry) iter.next();\n          ((SegmentReader) ent.getValue()).hasChanges = false;\n        }\n      } else {\n        final int numSegments = infos.size();\n        for(int i=0;i<numSegments;i++) {\n          final SegmentInfo info = infos.info(i);\n          if (readerMap.containsKey(info)) {\n            ((SegmentReader) readerMap.get(info)).hasChanges = false;\n          }\n        }     \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","sourceNew":"    /** Forcefully clear changes for the specified segments,\n     *  and remove from the pool.   This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          if (readerMap.containsKey(info)) {\n            readerMap.get(info).hasChanges = false;\n          }\n        }     \n      }\n    }\n\n","sourceOld":"    /** Forcefully clear changes for the specified segments,\n     *  and remove from the pool.   This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          if (readerMap.containsKey(info)) {\n            readerMap.get(info).hasChanges = false;\n          }\n        }     \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef82ff03e4016c705811b2658e81471a645c0e49":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4ff8864209d2e972cb4393600c26082f9a6533d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ef82ff03e4016c705811b2658e81471a645c0e49"]},"commit2Childs":{"ef82ff03e4016c705811b2658e81471a645c0e49":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["ef82ff03e4016c705811b2658e81471a645c0e49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}