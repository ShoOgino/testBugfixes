{"path":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.LongCache#createValue(LeafReader,CacheKey,boolean).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.LongCache#createValue(LeafReader,CacheKey,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected Accountable createValue(final LeafReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final Parser parser = (Parser) key.custom;\n\n      final HoldsOneThing<GrowableWriterAndMinValue> valuesRef = new HoldsOneThing<>();\n\n      Uninvert u = new Uninvert() {\n          private long minValue;\n          private long currentValue;\n          private GrowableWriter values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseValue(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              int startBitsPerValue;\n              // Make sure than missing values (0) can be stored without resizing\n              if (currentValue < 0) {\n                minValue = currentValue;\n                startBitsPerValue = minValue == Long.MIN_VALUE ? 64 : PackedInts.bitsRequired(-minValue);\n              } else {\n                minValue = 0;\n                startBitsPerValue = PackedInts.bitsRequired(currentValue);\n              }\n              values = new GrowableWriter(startBitsPerValue, reader.maxDoc(), PackedInts.FAST);\n              if (minValue != 0) {\n                values.fill(0, values.size(), -minValue); // default value must be 0\n              }\n              valuesRef.set(new GrowableWriterAndMinValue(values, minValue));\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values.set(docID, currentValue - minValue);\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n      GrowableWriterAndMinValue values = valuesRef.get();\n      if (values == null) {\n        return new LongsFromArray(new PackedInts.NullReader(reader.maxDoc()), 0L);\n      }\n      return new LongsFromArray(values.writer.getMutable(), values.minValue);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c146731a64debc22c115bbf11ee1a060aa7ea02","date":1457616596,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.LongCache#createValue(LeafReader,CacheKey,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.LongCache#createValue(LeafReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Accountable createValue(final LeafReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final Parser parser = (Parser) key.custom;\n\n      final HoldsOneThing<GrowableWriterAndMinValue> valuesRef = new HoldsOneThing<>();\n\n      Uninvert u = new Uninvert(parser instanceof PointParser) {\n          private long minValue;\n          private long currentValue;\n          private GrowableWriter values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseValue(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              int startBitsPerValue;\n              // Make sure than missing values (0) can be stored without resizing\n              if (currentValue < 0) {\n                minValue = currentValue;\n                startBitsPerValue = minValue == Long.MIN_VALUE ? 64 : PackedInts.bitsRequired(-minValue);\n              } else {\n                minValue = 0;\n                startBitsPerValue = PackedInts.bitsRequired(currentValue);\n              }\n              values = new GrowableWriter(startBitsPerValue, reader.maxDoc(), PackedInts.FAST);\n              if (minValue != 0) {\n                values.fill(0, values.size(), -minValue); // default value must be 0\n              }\n              valuesRef.set(new GrowableWriterAndMinValue(values, minValue));\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values.set(docID, currentValue - minValue);\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField, parser);\n      }\n      GrowableWriterAndMinValue values = valuesRef.get();\n      if (values == null) {\n        return new LongsFromArray(new PackedInts.NullReader(reader.maxDoc()), 0L);\n      }\n      return new LongsFromArray(values.writer.getMutable(), values.minValue);\n    }\n\n","sourceOld":"    @Override\n    protected Accountable createValue(final LeafReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final Parser parser = (Parser) key.custom;\n\n      final HoldsOneThing<GrowableWriterAndMinValue> valuesRef = new HoldsOneThing<>();\n\n      Uninvert u = new Uninvert() {\n          private long minValue;\n          private long currentValue;\n          private GrowableWriter values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseValue(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              int startBitsPerValue;\n              // Make sure than missing values (0) can be stored without resizing\n              if (currentValue < 0) {\n                minValue = currentValue;\n                startBitsPerValue = minValue == Long.MIN_VALUE ? 64 : PackedInts.bitsRequired(-minValue);\n              } else {\n                minValue = 0;\n                startBitsPerValue = PackedInts.bitsRequired(currentValue);\n              }\n              values = new GrowableWriter(startBitsPerValue, reader.maxDoc(), PackedInts.FAST);\n              if (minValue != 0) {\n                values.fill(0, values.size(), -minValue); // default value must be 0\n              }\n              valuesRef.set(new GrowableWriterAndMinValue(values, minValue));\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values.set(docID, currentValue - minValue);\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n      GrowableWriterAndMinValue values = valuesRef.get();\n      if (values == null) {\n        return new LongsFromArray(new PackedInts.NullReader(reader.maxDoc()), 0L);\n      }\n      return new LongsFromArray(values.writer.getMutable(), values.minValue);\n    }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongCache#createValue(LeafReader,CacheKey,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.LongCache#createValue(LeafReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Accountable createValue(final LeafReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final Parser parser = (Parser) key.custom;\n\n      final HoldsOneThing<GrowableWriterAndMinValue> valuesRef = new HoldsOneThing<>();\n\n      Uninvert u = new Uninvert(parser instanceof PointParser) {\n          private long minValue;\n          private long currentValue;\n          private GrowableWriter values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseValue(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              int startBitsPerValue;\n              // Make sure than missing values (0) can be stored without resizing\n              if (currentValue < 0) {\n                minValue = currentValue;\n                startBitsPerValue = minValue == Long.MIN_VALUE ? 64 : PackedInts.bitsRequired(-minValue);\n              } else {\n                minValue = 0;\n                startBitsPerValue = PackedInts.bitsRequired(currentValue);\n              }\n              values = new GrowableWriter(startBitsPerValue, reader.maxDoc(), PackedInts.FAST);\n              if (minValue != 0) {\n                values.fill(0, values.size(), -minValue); // default value must be 0\n              }\n              valuesRef.set(new GrowableWriterAndMinValue(values, minValue));\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values.set(docID, currentValue - minValue);\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField, parser);\n      }\n      GrowableWriterAndMinValue values = valuesRef.get();\n      if (values == null) {\n        return new LongsFromArray(new PackedInts.NullReader(reader.maxDoc()), 0L);\n      }\n      return new LongsFromArray(values.writer.getMutable(), values.minValue);\n    }\n\n","sourceOld":"    @Override\n    protected Accountable createValue(final LeafReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final Parser parser = (Parser) key.custom;\n\n      final HoldsOneThing<GrowableWriterAndMinValue> valuesRef = new HoldsOneThing<>();\n\n      Uninvert u = new Uninvert(parser instanceof PointParser) {\n          private long minValue;\n          private long currentValue;\n          private GrowableWriter values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseValue(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              int startBitsPerValue;\n              // Make sure than missing values (0) can be stored without resizing\n              if (currentValue < 0) {\n                minValue = currentValue;\n                startBitsPerValue = minValue == Long.MIN_VALUE ? 64 : PackedInts.bitsRequired(-minValue);\n              } else {\n                minValue = 0;\n                startBitsPerValue = PackedInts.bitsRequired(currentValue);\n              }\n              values = new GrowableWriter(startBitsPerValue, reader.maxDoc(), PackedInts.FAST);\n              if (minValue != 0) {\n                values.fill(0, values.size(), -minValue); // default value must be 0\n              }\n              valuesRef.set(new GrowableWriterAndMinValue(values, minValue));\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values.set(docID, currentValue - minValue);\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField, parser);\n      }\n      GrowableWriterAndMinValue values = valuesRef.get();\n      if (values == null) {\n        return new LongsFromArray(new PackedInts.NullReader(reader.maxDoc()), 0L);\n      }\n      return new LongsFromArray(values.writer.getMutable(), values.minValue);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongCache#createValue(LeafReader,CacheKey,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.LongCache#createValue(LeafReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Accountable createValue(final LeafReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final Parser parser = (Parser) key.custom;\n\n      final HoldsOneThing<GrowableWriterAndMinValue> valuesRef = new HoldsOneThing<>();\n\n      Uninvert u = new Uninvert(parser instanceof PointParser) {\n          private long minValue;\n          private long currentValue;\n          private GrowableWriter values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseValue(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              int startBitsPerValue;\n              // Make sure than missing values (0) can be stored without resizing\n              if (currentValue < 0) {\n                minValue = currentValue;\n                startBitsPerValue = minValue == Long.MIN_VALUE ? 64 : PackedInts.bitsRequired(-minValue);\n              } else {\n                minValue = 0;\n                startBitsPerValue = PackedInts.bitsRequired(currentValue);\n              }\n              values = new GrowableWriter(startBitsPerValue, reader.maxDoc(), PackedInts.FAST);\n              if (minValue != 0) {\n                values.fill(0, values.size(), -minValue); // default value must be 0\n              }\n              valuesRef.set(new GrowableWriterAndMinValue(values, minValue));\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values.set(docID, currentValue - minValue);\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField, parser);\n      }\n      GrowableWriterAndMinValue values = valuesRef.get();\n      if (values == null) {\n        return new LongsFromArray(new PackedInts.NullReader(reader.maxDoc()), 0L);\n      }\n      return new LongsFromArray(values.writer.getMutable(), values.minValue);\n    }\n\n","sourceOld":"    @Override\n    protected Accountable createValue(final LeafReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final Parser parser = (Parser) key.custom;\n\n      final HoldsOneThing<GrowableWriterAndMinValue> valuesRef = new HoldsOneThing<>();\n\n      Uninvert u = new Uninvert(parser instanceof PointParser) {\n          private long minValue;\n          private long currentValue;\n          private GrowableWriter values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseValue(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              int startBitsPerValue;\n              // Make sure than missing values (0) can be stored without resizing\n              if (currentValue < 0) {\n                minValue = currentValue;\n                startBitsPerValue = minValue == Long.MIN_VALUE ? 64 : PackedInts.bitsRequired(-minValue);\n              } else {\n                minValue = 0;\n                startBitsPerValue = PackedInts.bitsRequired(currentValue);\n              }\n              values = new GrowableWriter(startBitsPerValue, reader.maxDoc(), PackedInts.FAST);\n              if (minValue != 0) {\n                values.fill(0, values.size(), -minValue); // default value must be 0\n              }\n              valuesRef.set(new GrowableWriterAndMinValue(values, minValue));\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values.set(docID, currentValue - minValue);\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField, parser);\n      }\n      GrowableWriterAndMinValue values = valuesRef.get();\n      if (values == null) {\n        return new LongsFromArray(new PackedInts.NullReader(reader.maxDoc()), 0L);\n      }\n      return new LongsFromArray(values.writer.getMutable(), values.minValue);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongCache#createValue(LeafReader,CacheKey,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.LongCache#createValue(LeafReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Accountable createValue(final LeafReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final Parser parser = (Parser) key.custom;\n\n      final HoldsOneThing<GrowableWriterAndMinValue> valuesRef = new HoldsOneThing<>();\n\n      Uninvert u = new Uninvert(parser instanceof PointParser) {\n          private long minValue;\n          private long currentValue;\n          private GrowableWriter values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseValue(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              int startBitsPerValue;\n              // Make sure than missing values (0) can be stored without resizing\n              if (currentValue < 0) {\n                minValue = currentValue;\n                startBitsPerValue = minValue == Long.MIN_VALUE ? 64 : PackedInts.bitsRequired(-minValue);\n              } else {\n                minValue = 0;\n                startBitsPerValue = PackedInts.bitsRequired(currentValue);\n              }\n              values = new GrowableWriter(startBitsPerValue, reader.maxDoc(), PackedInts.FAST);\n              if (minValue != 0) {\n                values.fill(0, values.size(), -minValue); // default value must be 0\n              }\n              valuesRef.set(new GrowableWriterAndMinValue(values, minValue));\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values.set(docID, currentValue - minValue);\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField, parser);\n      }\n      GrowableWriterAndMinValue values = valuesRef.get();\n      if (values == null) {\n        return new LongsFromArray(new PackedInts.NullReader(reader.maxDoc()), 0L);\n      }\n      return new LongsFromArray(values.writer.getMutable(), values.minValue);\n    }\n\n","sourceOld":"    @Override\n    protected Accountable createValue(final LeafReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final Parser parser = (Parser) key.custom;\n\n      final HoldsOneThing<GrowableWriterAndMinValue> valuesRef = new HoldsOneThing<>();\n\n      Uninvert u = new Uninvert(parser instanceof PointParser) {\n          private long minValue;\n          private long currentValue;\n          private GrowableWriter values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseValue(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              int startBitsPerValue;\n              // Make sure than missing values (0) can be stored without resizing\n              if (currentValue < 0) {\n                minValue = currentValue;\n                startBitsPerValue = minValue == Long.MIN_VALUE ? 64 : PackedInts.bitsRequired(-minValue);\n              } else {\n                minValue = 0;\n                startBitsPerValue = PackedInts.bitsRequired(currentValue);\n              }\n              values = new GrowableWriter(startBitsPerValue, reader.maxDoc(), PackedInts.FAST);\n              if (minValue != 0) {\n                values.fill(0, values.size(), -minValue); // default value must be 0\n              }\n              valuesRef.set(new GrowableWriterAndMinValue(values, minValue));\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values.set(docID, currentValue - minValue);\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField, parser);\n      }\n      GrowableWriterAndMinValue values = valuesRef.get();\n      if (values == null) {\n        return new LongsFromArray(new PackedInts.NullReader(reader.maxDoc()), 0L);\n      }\n      return new LongsFromArray(values.writer.getMutable(), values.minValue);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.LongCache#createValue(LeafReader,CacheKey,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected Accountable createValue(final LeafReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final Parser parser = (Parser) key.custom;\n\n      final HoldsOneThing<GrowableWriterAndMinValue> valuesRef = new HoldsOneThing<>();\n\n      Uninvert u = new Uninvert(parser instanceof PointParser) {\n          private long minValue;\n          private long currentValue;\n          private GrowableWriter values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseValue(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              int startBitsPerValue;\n              // Make sure than missing values (0) can be stored without resizing\n              if (currentValue < 0) {\n                minValue = currentValue;\n                startBitsPerValue = minValue == Long.MIN_VALUE ? 64 : PackedInts.bitsRequired(-minValue);\n              } else {\n                minValue = 0;\n                startBitsPerValue = PackedInts.bitsRequired(currentValue);\n              }\n              values = new GrowableWriter(startBitsPerValue, reader.maxDoc(), PackedInts.FAST);\n              if (minValue != 0) {\n                values.fill(0, values.size(), -minValue); // default value must be 0\n              }\n              valuesRef.set(new GrowableWriterAndMinValue(values, minValue));\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values.set(docID, currentValue - minValue);\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField, parser);\n      }\n      GrowableWriterAndMinValue values = valuesRef.get();\n      if (values == null) {\n        return new LongsFromArray(new PackedInts.NullReader(reader.maxDoc()), 0L);\n      }\n      return new LongsFromArray(values.writer.getMutable(), values.minValue);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["8c146731a64debc22c115bbf11ee1a060aa7ea02","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["8c146731a64debc22c115bbf11ee1a060aa7ea02","0e121d43b5a10f2df530f406f935102656e9c4e8"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8c146731a64debc22c115bbf11ee1a060aa7ea02","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}