{"path":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","sourceNew":"  @Override\n  public void writeArray(String name, Iterator val) throws IOException {\n    writeArrayOpener(-1); // no trivial way to determine array size\n    incLevel();\n    boolean first=true;\n    while( val.hasNext() ) {\n      if( !first ) indent();\n      writeVal(null, val.next());\n      if( val.hasNext() ) {\n        writeArraySeparator();\n      }\n      first=false;\n    }\n    decLevel();\n    writeArrayCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeArray(String name, Iterator val) throws IOException {\n    writeArrayOpener(-1); // no trivial way to determine array size\n    incLevel();\n    boolean first=true;\n    while( val.hasNext() ) {\n      if( !first ) indent();\n      writeVal(null, val.next());\n      if( val.hasNext() ) {\n        writeArraySeparator();\n      }\n      first=false;\n    }\n    decLevel();\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","sourceNew":"  @Override\n  public void writeArray(String name, Iterator val) throws IOException {\n    writeArrayOpener(-1); // no trivial way to determine array size\n    incLevel();\n    boolean first=true;\n    while( val.hasNext() ) {\n      if( !first ) indent();\n      writeVal(null, val.next());\n      if( val.hasNext() ) {\n        writeArraySeparator();\n      }\n      first=false;\n    }\n    decLevel();\n    writeArrayCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeArray(String name, Iterator val) throws IOException {\n    writeArrayOpener(-1); // no trivial way to determine array size\n    incLevel();\n    boolean first=true;\n    while( val.hasNext() ) {\n      if( !first ) indent();\n      writeVal(null, val.next());\n      if( val.hasNext() ) {\n        writeArraySeparator();\n      }\n      first=false;\n    }\n    decLevel();\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","sourceNew":"  @Override\n  public void writeArray(String name, Iterator val) throws IOException {\n    writeArrayOpener(-1); // no trivial way to determine array size\n    incLevel();\n    boolean first=true;\n    while( val.hasNext() ) {\n      if( !first ) indent();\n      writeVal(null, val.next());\n      if( val.hasNext() ) {\n        writeArraySeparator();\n      }\n      first=false;\n    }\n    decLevel();\n    writeArrayCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeArray(String name, Iterator val) throws IOException {\n    writeArrayOpener(-1); // no trivial way to determine array size\n    incLevel();\n    boolean first=true;\n    while( val.hasNext() ) {\n      if( !first ) indent();\n      writeVal(null, val.next());\n      if( val.hasNext() ) {\n        writeArraySeparator();\n      }\n      first=false;\n    }\n    decLevel();\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a6fbf1484b3c2b38b75d59998de5fe4330b6b40","date":1478163495,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","sourceNew":"  @Override\n  public void writeArray(String name, Iterator val) throws IOException {\n    writeArrayOpener(-1); // no trivial way to determine array size\n    writeJsonIter(val);\n  }\n\n","sourceOld":"  @Override\n  public void writeArray(String name, Iterator val) throws IOException {\n    writeArrayOpener(-1); // no trivial way to determine array size\n    incLevel();\n    boolean first=true;\n    while( val.hasNext() ) {\n      if( !first ) indent();\n      writeVal(null, val.next());\n      if( val.hasNext() ) {\n        writeArraySeparator();\n      }\n      first=false;\n    }\n    decLevel();\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","sourceNew":"  @Override\n  public void writeArray(String name, Iterator val) throws IOException {\n    writeArrayOpener(-1); // no trivial way to determine array size\n    writeJsonIter(val);\n  }\n\n","sourceOld":"  @Override\n  public void writeArray(String name, Iterator val) throws IOException {\n    writeArrayOpener(-1); // no trivial way to determine array size\n    incLevel();\n    boolean first=true;\n    while( val.hasNext() ) {\n      if( !first ) indent();\n      writeVal(null, val.next());\n      if( val.hasNext() ) {\n        writeArraySeparator();\n      }\n      first=false;\n    }\n    decLevel();\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b90143dcb941cdeb74127110c9c2b5e92ad0daa4","date":1478290850,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","sourceNew":"  @Override\n  public void writeArray(String name, Iterator val) throws IOException {\n    writeArrayOpener(-1); // no trivial way to determine array size\n    writeJsonIter(val);\n    writeArrayCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeArray(String name, Iterator val) throws IOException {\n    writeArrayOpener(-1); // no trivial way to determine array size\n    writeJsonIter(val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","sourceNew":"  @Override\n  public void writeArray(String name, Iterator val) throws IOException {\n    writeArrayOpener(-1); // no trivial way to determine array size\n    writeJsonIter(val);\n    writeArrayCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeArray(String name, Iterator val) throws IOException {\n    writeArrayOpener(-1); // no trivial way to determine array size\n    writeJsonIter(val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"119f84a673d2ea32c0ec18c36987696dd31aa174","date":1528551316,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeArray(String name, Iterator val) throws IOException {\n    writeArrayOpener(-1); // no trivial way to determine array size\n    writeJsonIter(val);\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeArray(String name, Iterator val) throws IOException {\n    writeArrayOpener(-1); // no trivial way to determine array size\n    writeJsonIter(val);\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeArray(String,Iterator).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeArray(String name, Iterator val) throws IOException {\n    writeArrayOpener(-1); // no trivial way to determine array size\n    writeJsonIter(val);\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b90143dcb941cdeb74127110c9c2b5e92ad0daa4","119f84a673d2ea32c0ec18c36987696dd31aa174"],"119f84a673d2ea32c0ec18c36987696dd31aa174":["b90143dcb941cdeb74127110c9c2b5e92ad0daa4"],"b90143dcb941cdeb74127110c9c2b5e92ad0daa4":["3a6fbf1484b3c2b38b75d59998de5fe4330b6b40"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["c26f00b574427b55127e869b935845554afde1fa","3a6fbf1484b3c2b38b75d59998de5fe4330b6b40"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["9720b151fde2073f4e401450f4574e5f31c2d0ff","b90143dcb941cdeb74127110c9c2b5e92ad0daa4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a6fbf1484b3c2b38b75d59998de5fe4330b6b40":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["119f84a673d2ea32c0ec18c36987696dd31aa174"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b90143dcb941cdeb74127110c9c2b5e92ad0daa4","119f84a673d2ea32c0ec18c36987696dd31aa174"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"b90143dcb941cdeb74127110c9c2b5e92ad0daa4":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","119f84a673d2ea32c0ec18c36987696dd31aa174","199dfa410f1fdbfd3294106b04096cce5ed34b21","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"119f84a673d2ea32c0ec18c36987696dd31aa174":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["9720b151fde2073f4e401450f4574e5f31c2d0ff","3a6fbf1484b3c2b38b75d59998de5fe4330b6b40"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"3a6fbf1484b3c2b38b75d59998de5fe4330b6b40":["b90143dcb941cdeb74127110c9c2b5e92ad0daa4","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","199dfa410f1fdbfd3294106b04096cce5ed34b21","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}