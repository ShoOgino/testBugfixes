{"path":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","sourceNew":"  @Test\n  public void testPhrase() {\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\",\"text:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='1']\"\n    );\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\",\"text_np:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='2']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPhrase() {\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\",\"text:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='1']\"\n    );\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\",\"text_np:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='2']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","sourceNew":"  @Test\n  public void testPhrase() {\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\",\"text:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='1']\"\n    );\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\",\"text_np:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='2']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPhrase() {\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\",\"text:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='1']\"\n    );\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\",\"text_np:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='2']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","sourceNew":"  @Test\n  public void testPhrase() {\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\",\"text:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='1']\"\n    );\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\",\"text_np:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='2']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPhrase() {\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\",\"text:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='1']\"\n    );\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\",\"text_np:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='2']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d959d418bddfa46d8eea54f0d8b855165586838","date":1453938797,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","sourceNew":"  @Test\n  public void testPhrase() {\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\", \"text:now-cow\", \"indent\", \"true\")\n        , \"//*[@numFound='1']\"\n    );\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\", \"text_np:now-cow\", \"indent\", \"true\")\n        , \"//*[@numFound='2']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPhrase() {\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\",\"text:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='1']\"\n    );\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\",\"text_np:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='2']\"\n    );\n  }\n\n","bugFix":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","sourceNew":"  @Test\n  public void testPhrase() {\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\", \"text:now-cow\", \"indent\", \"true\")\n        , \"//*[@numFound='1']\"\n    );\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\", \"text_np:now-cow\", \"indent\", \"true\")\n        , \"//*[@numFound='2']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPhrase() {\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\",\"text:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='1']\"\n    );\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\",\"text_np:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='2']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4260b228cfff6ad78ac88d519f0f7746529c3c","date":1493136145,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","sourceNew":"  @Test\n  public void testPhrase() {\n    // \"text\" field's type has WordDelimiterGraphFilter (WDGFF) and autoGeneratePhraseQueries=true\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\", \"text:now-cow\", \"indent\", \"true\", \"sow\",\"true\")\n        , \"//*[@numFound='1']\"\n    );\n    // When sow=false, autoGeneratePhraseQueries=true only works when a graph is produced\n    // (i.e. overlapping terms, e.g. if WDGFF's preserveOriginal=1 or concatenateWords=1).\n    // The WDGFF config on the \"text\" field doesn't produce a graph, so the generated query\n    // is not a phrase query.  As a result, docs can match that don't match phrase query \"now cow\"\n    assertQ(req(\"q\", \"text:now-cow\", \"indent\", \"true\", \"sow\",\"false\")\n        , \"//*[@numFound='2']\"\n    );\n    assertQ(req(\"q\", \"text:now-cow\", \"indent\", \"true\") // default sow=false\n        , \"//*[@numFound='2']\"\n    );\n    \n    // \"text_np\" field's type has WDGFF and (default) autoGeneratePhraseQueries=false\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\", \"text_np:now-cow\", \"indent\", \"true\")\n        , \"//*[@numFound='2']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPhrase() {\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\", \"text:now-cow\", \"indent\", \"true\")\n        , \"//*[@numFound='1']\"\n    );\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\", \"text_np:now-cow\", \"indent\", \"true\")\n        , \"//*[@numFound='2']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","sourceNew":"  @Test\n  public void testPhrase() {\n    // \"text\" field's type has WordDelimiterGraphFilter (WDGFF) and autoGeneratePhraseQueries=true\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\", \"text:now-cow\", \"indent\", \"true\", \"sow\",\"true\")\n        , \"//*[@numFound='1']\"\n    );\n    // When sow=false, autoGeneratePhraseQueries=true only works when a graph is produced\n    // (i.e. overlapping terms, e.g. if WDGFF's preserveOriginal=1 or concatenateWords=1).\n    // The WDGFF config on the \"text\" field doesn't produce a graph, so the generated query\n    // is not a phrase query.  As a result, docs can match that don't match phrase query \"now cow\"\n    assertQ(req(\"q\", \"text:now-cow\", \"indent\", \"true\", \"sow\",\"false\")\n        , \"//*[@numFound='2']\"\n    );\n    assertQ(req(\"q\", \"text:now-cow\", \"indent\", \"true\") // default sow=false\n        , \"//*[@numFound='2']\"\n    );\n    \n    // \"text_np\" field's type has WDGFF and (default) autoGeneratePhraseQueries=false\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\", \"text_np:now-cow\", \"indent\", \"true\")\n        , \"//*[@numFound='2']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPhrase() {\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\", \"text:now-cow\", \"indent\", \"true\")\n        , \"//*[@numFound='1']\"\n    );\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\", \"text_np:now-cow\", \"indent\", \"true\")\n        , \"//*[@numFound='2']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["7d959d418bddfa46d8eea54f0d8b855165586838","7a4260b228cfff6ad78ac88d519f0f7746529c3c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["c26f00b574427b55127e869b935845554afde1fa","7d959d418bddfa46d8eea54f0d8b855165586838"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d959d418bddfa46d8eea54f0d8b855165586838":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a4260b228cfff6ad78ac88d519f0f7746529c3c"],"7a4260b228cfff6ad78ac88d519f0f7746529c3c":["7d959d418bddfa46d8eea54f0d8b855165586838"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","7d959d418bddfa46d8eea54f0d8b855165586838"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7d959d418bddfa46d8eea54f0d8b855165586838":["e9017cf144952056066919f1ebc7897ff9bd71b1","1e6acbaae7af722f17204ceccf0f7db5753eccf3","7a4260b228cfff6ad78ac88d519f0f7746529c3c"],"7a4260b228cfff6ad78ac88d519f0f7746529c3c":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","1e6acbaae7af722f17204ceccf0f7db5753eccf3","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}