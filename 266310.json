{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getSimpleNormValues(String).mjava","commits":[{"id":"55eeb2534cd53d2a985669829df942468ebf5314","date":1354409119,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getSimpleNormValues(String).mjava","pathOld":"/dev/null","sourceNew":"  NumericDocValues getSimpleNormValues(String field) throws IOException {\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null) {\n      // Field does not exist\n      return null;\n    }\n    if (fi.omitsNorms()) {\n      return null;\n    }\n    // nocommit change to assert != null!!\n    if (simpleNormsProducer == null) {\n      return null;\n    }\n    return simpleNormsProducer.getNumeric(fi);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2899ae5069a2533466ac842042478e67263e1f43","date":1354624628,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getSimpleNormValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getSimpleNormValues(String).mjava","sourceNew":"  NumericDocValues getSimpleNormValues(String field) throws IOException {\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null) {\n      // Field does not exist\n      return null;\n    }\n    if (fi.omitsNorms()) {\n      return null;\n    }\n    // nocommit change to assert != null!!\n    if (simpleNormsProducer == null) {\n      return null;\n    }\n    return simpleNormsLocal.get().getNumeric(fi);\n  }\n\n","sourceOld":"  NumericDocValues getSimpleNormValues(String field) throws IOException {\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null) {\n      // Field does not exist\n      return null;\n    }\n    if (fi.omitsNorms()) {\n      return null;\n    }\n    // nocommit change to assert != null!!\n    if (simpleNormsProducer == null) {\n      return null;\n    }\n    return simpleNormsProducer.getNumeric(fi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad7de846867bd14c63f9dd19df082f72c5ea9c54","date":1355517454,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getSimpleNormValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getSimpleNormValues(String).mjava","sourceNew":"  NumericDocValues getSimpleNormValues(String field) throws IOException {\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null) {\n      // Field does not exist\n      return null;\n    }\n    if (!fi.isIndexed() || fi.omitsNorms()) {\n      return null;\n    }\n    // nocommit change to assert != null!!\n    if (simpleNormsProducer == null) {\n      return null;\n    }\n    return simpleNormsLocal.get().getNumeric(fi);\n  }\n\n","sourceOld":"  NumericDocValues getSimpleNormValues(String field) throws IOException {\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null) {\n      // Field does not exist\n      return null;\n    }\n    if (fi.omitsNorms()) {\n      return null;\n    }\n    // nocommit change to assert != null!!\n    if (simpleNormsProducer == null) {\n      return null;\n    }\n    return simpleNormsLocal.get().getNumeric(fi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed00c8118962f490744732ab611c595c91b80d1c","date":1356020966,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getSimpleNormValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getSimpleNormValues(String).mjava","sourceNew":"  NumericDocValues getSimpleNormValues(String field) throws IOException {\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null) {\n      // Field does not exist\n      return null;\n    }\n    if (!fi.isIndexed() || fi.omitsNorms()) {\n      return null;\n    }\n    // nocommit change to assert != null!!\n    if (simpleNormsProducer == null) {\n      return null;\n    }\n\n    Map<String,Object> normFields = simpleNormsLocal.get();\n\n    NumericDocValues norms = (NumericDocValues) normFields.get(field);\n    if (norms == null) {\n      norms = simpleNormsProducer.getNumeric(fi);\n      normFields.put(field, norms);\n    }\n\n    return norms;\n  }\n\n","sourceOld":"  NumericDocValues getSimpleNormValues(String field) throws IOException {\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null) {\n      // Field does not exist\n      return null;\n    }\n    if (!fi.isIndexed() || fi.omitsNorms()) {\n      return null;\n    }\n    // nocommit change to assert != null!!\n    if (simpleNormsProducer == null) {\n      return null;\n    }\n    return simpleNormsLocal.get().getNumeric(fi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ff8fcbb5ae20d2286cb666d4694f0a8c3c552f6","date":1357912799,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getSimpleNormValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getSimpleNormValues(String).mjava","sourceNew":"  NumericDocValues getSimpleNormValues(String field) throws IOException {\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null) {\n      // Field does not exist\n      return null;\n    }\n    if (!fi.hasNorms()) {\n      return null;\n    }\n    // nocommit change to assert != null!!\n    if (simpleNormsProducer == null) {\n      return null;\n    }\n\n    Map<String,Object> normFields = simpleNormsLocal.get();\n\n    NumericDocValues norms = (NumericDocValues) normFields.get(field);\n    if (norms == null) {\n      norms = simpleNormsProducer.getNumeric(fi);\n      normFields.put(field, norms);\n    }\n\n    return norms;\n  }\n\n","sourceOld":"  NumericDocValues getSimpleNormValues(String field) throws IOException {\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null) {\n      // Field does not exist\n      return null;\n    }\n    if (!fi.isIndexed() || fi.omitsNorms()) {\n      return null;\n    }\n    // nocommit change to assert != null!!\n    if (simpleNormsProducer == null) {\n      return null;\n    }\n\n    Map<String,Object> normFields = simpleNormsLocal.get();\n\n    NumericDocValues norms = (NumericDocValues) normFields.get(field);\n    if (norms == null) {\n      norms = simpleNormsProducer.getNumeric(fi);\n      normFields.put(field, norms);\n    }\n\n    return norms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f06b860886fc48ea071171354835b8aed8a94de","date":1358789970,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getSimpleNormValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getSimpleNormValues(String).mjava","sourceNew":"  NumericDocValues getSimpleNormValues(String field) throws IOException {\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null) {\n      // Field does not exist\n      return null;\n    }\n    if (!fi.hasNorms()) {\n      return null;\n    }\n   \n    assert normsProducer != null;\n\n    Map<String,Object> normFields = normsLocal.get();\n\n    NumericDocValues norms = (NumericDocValues) normFields.get(field);\n    if (norms == null) {\n      norms = normsProducer.getNumeric(fi);\n      normFields.put(field, norms);\n    }\n\n    return norms;\n  }\n\n","sourceOld":"  NumericDocValues getSimpleNormValues(String field) throws IOException {\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null) {\n      // Field does not exist\n      return null;\n    }\n    if (!fi.hasNorms()) {\n      return null;\n    }\n    // nocommit change to assert != null!!\n    if (simpleNormsProducer == null) {\n      return null;\n    }\n\n    Map<String,Object> normFields = simpleNormsLocal.get();\n\n    NumericDocValues norms = (NumericDocValues) normFields.get(field);\n    if (norms == null) {\n      norms = simpleNormsProducer.getNumeric(fi);\n      normFields.put(field, norms);\n    }\n\n    return norms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9ae144de5073a637ea71fec646a5212c8784863","date":1360013934,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getNormValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getSimpleNormValues(String).mjava","sourceNew":"  NumericDocValues getNormValues(String field) throws IOException {\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null) {\n      // Field does not exist\n      return null;\n    }\n    if (!fi.hasNorms()) {\n      return null;\n    }\n   \n    assert normsProducer != null;\n\n    Map<String,Object> normFields = normsLocal.get();\n\n    NumericDocValues norms = (NumericDocValues) normFields.get(field);\n    if (norms == null) {\n      norms = normsProducer.getNumeric(fi);\n      normFields.put(field, norms);\n    }\n\n    return norms;\n  }\n\n","sourceOld":"  NumericDocValues getSimpleNormValues(String field) throws IOException {\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null) {\n      // Field does not exist\n      return null;\n    }\n    if (!fi.hasNorms()) {\n      return null;\n    }\n   \n    assert normsProducer != null;\n\n    Map<String,Object> normFields = normsLocal.get();\n\n    NumericDocValues norms = (NumericDocValues) normFields.get(field);\n    if (norms == null) {\n      norms = normsProducer.getNumeric(fi);\n      normFields.put(field, norms);\n    }\n\n    return norms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f06b860886fc48ea071171354835b8aed8a94de":["4ff8fcbb5ae20d2286cb666d4694f0a8c3c552f6"],"ed00c8118962f490744732ab611c595c91b80d1c":["ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["2899ae5069a2533466ac842042478e67263e1f43"],"2899ae5069a2533466ac842042478e67263e1f43":["55eeb2534cd53d2a985669829df942468ebf5314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ff8fcbb5ae20d2286cb666d4694f0a8c3c552f6":["ed00c8118962f490744732ab611c595c91b80d1c"],"55eeb2534cd53d2a985669829df942468ebf5314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b9ae144de5073a637ea71fec646a5212c8784863":["8f06b860886fc48ea071171354835b8aed8a94de"]},"commit2Childs":{"8f06b860886fc48ea071171354835b8aed8a94de":["b9ae144de5073a637ea71fec646a5212c8784863"],"ed00c8118962f490744732ab611c595c91b80d1c":["4ff8fcbb5ae20d2286cb666d4694f0a8c3c552f6"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["ed00c8118962f490744732ab611c595c91b80d1c"],"2899ae5069a2533466ac842042478e67263e1f43":["ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55eeb2534cd53d2a985669829df942468ebf5314","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ff8fcbb5ae20d2286cb666d4694f0a8c3c552f6":["8f06b860886fc48ea071171354835b8aed8a94de"],"55eeb2534cd53d2a985669829df942468ebf5314":["2899ae5069a2533466ac842042478e67263e1f43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b9ae144de5073a637ea71fec646a5212c8784863":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b9ae144de5073a637ea71fec646a5212c8784863"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}