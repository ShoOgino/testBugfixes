{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEnumEquals(String,IndexReader,TermsEnum,TermsEnum,boolean).mjava","commits":[{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEnumEquals(String,IndexReader,TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnumEquals(String info, IndexReader leftReader, TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws IOException {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStatsEquals(info, leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnumEquals(info, leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnumEquals(info, leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        // with freqs:\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        \n        // with freqs:\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEnumEquals(String,IndexReader,TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEnumEquals(String,IndexReader,TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnumEquals(String info, IndexReader leftReader, TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws IOException {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStatsEquals(info, leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnumEquals(info, leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.FLAG_ALL),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.FLAG_ALL));\n        assertDocsAndPositionsEnumEquals(info, leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.FLAG_ALL),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.FLAG_ALL));\n\n        assertPositionsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.FLAG_ALL),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.FLAG_ALL));\n        assertPositionsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.FLAG_ALL),\n            rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.FLAG_ALL));\n\n        // with freqs:\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs),\n            true);\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.FLAG_NONE),\n            false);\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.FLAG_NONE),\n            false);\n        \n        // with freqs:\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs),\n            true);\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.FLAG_NONE),\n            false);\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.FLAG_NONE),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnumEquals(String info, IndexReader leftReader, TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws IOException {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStatsEquals(info, leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnumEquals(info, leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnumEquals(info, leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        // with freqs:\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        \n        // with freqs:\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEnumEquals(String,IndexReader,TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEnumEquals(String,IndexReader,TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnumEquals(String info, IndexReader leftReader, TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws IOException {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStatsEquals(info, leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnumEquals(info, leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n        assertDocsAndPositionsEnumEquals(info, leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n\n        assertPositionsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n        assertPositionsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n            rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n\n        // with freqs:\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs),\n            true);\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE),\n            false);\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE),\n            false);\n        \n        // with freqs:\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs),\n            true);\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE),\n            false);\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnumEquals(String info, IndexReader leftReader, TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws IOException {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStatsEquals(info, leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnumEquals(info, leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.FLAG_ALL),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.FLAG_ALL));\n        assertDocsAndPositionsEnumEquals(info, leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.FLAG_ALL),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.FLAG_ALL));\n\n        assertPositionsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.FLAG_ALL),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.FLAG_ALL));\n        assertPositionsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.FLAG_ALL),\n            rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.FLAG_ALL));\n\n        // with freqs:\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs),\n            true);\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.FLAG_NONE),\n            false);\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.FLAG_NONE),\n            false);\n        \n        // with freqs:\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs),\n            true);\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.FLAG_NONE),\n            false);\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.FLAG_NONE),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEnumEquals(String,IndexReader,TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEnumEquals(String,IndexReader,TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnumEquals(String info, IndexReader leftReader, TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws IOException {\n    BytesRef term;\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStatsEquals(info, leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnumEquals(info, leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.ALL),\n                                   rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.ALL));\n\n        assertPositionsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.ALL),\n                                rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.ALL));\n\n\n        // with freqs:\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(leftDocs),\n            rightDocs = rightTermsEnum.postings(rightDocs),\n            true);\n\n\n        // w/o freqs:\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(rightDocs, PostingsEnum.NONE),\n            false);\n\n        \n        // with freqs:\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(leftDocs),\n            rightDocs = rightTermsEnum.postings(rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(rightDocs, PostingsEnum.NONE),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnumEquals(String info, IndexReader leftReader, TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws IOException {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStatsEquals(info, leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnumEquals(info, leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n        assertDocsAndPositionsEnumEquals(info, leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n\n        assertPositionsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n        assertPositionsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n            rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n\n        // with freqs:\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs),\n            true);\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE),\n            false);\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE),\n            false);\n        \n        // with freqs:\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs),\n            true);\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE),\n            false);\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["51f5280f31484820499077f41fcdfe92d527d9dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}