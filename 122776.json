{"path":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  private static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<State, HashSet<Transition>>();\n    Set<State> states = a.getStates();\n    Set<State> accept = a.getAcceptStates();\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states)\n      r.transitions = m.get(r);\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    return accept;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","sourceNew":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  private static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<State, HashSet<Transition>>();\n    State[] states = a.getNumberedStates();\n    Set<State> accept = new HashSet<State>();\n    for (State s : states)\n      if (s.isAccept())\n        accept.add(s);\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states) {\n      Set<Transition> tr = m.get(r);\n      r.setTransitions(tr.toArray(new Transition[tr.size()]));\n    }\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    a.clearNumberedStates();\n    return accept;\n  }\n\n","sourceOld":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  private static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<State, HashSet<Transition>>();\n    Set<State> states = a.getStates();\n    Set<State> accept = a.getAcceptStates();\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states)\n      r.transitions = m.get(r);\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    return accept;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a62f51fc98f22545b2c8453da582a2d8222a756","date":1287705676,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","sourceNew":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<State, HashSet<Transition>>();\n    State[] states = a.getNumberedStates();\n    Set<State> accept = new HashSet<State>();\n    for (State s : states)\n      if (s.isAccept())\n        accept.add(s);\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states) {\n      Set<Transition> tr = m.get(r);\n      r.setTransitions(tr.toArray(new Transition[tr.size()]));\n    }\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    a.clearNumberedStates();\n    return accept;\n  }\n\n","sourceOld":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  private static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<State, HashSet<Transition>>();\n    State[] states = a.getNumberedStates();\n    Set<State> accept = new HashSet<State>();\n    for (State s : states)\n      if (s.isAccept())\n        accept.add(s);\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states) {\n      Set<Transition> tr = m.get(r);\n      r.setTransitions(tr.toArray(new Transition[tr.size()]));\n    }\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    a.clearNumberedStates();\n    return accept;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","sourceNew":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<State, HashSet<Transition>>();\n    State[] states = a.getNumberedStates();\n    Set<State> accept = new HashSet<State>();\n    for (State s : states)\n      if (s.isAccept())\n        accept.add(s);\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states) {\n      Set<Transition> tr = m.get(r);\n      r.setTransitions(tr.toArray(new Transition[tr.size()]));\n    }\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    a.clearNumberedStates();\n    return accept;\n  }\n\n","sourceOld":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  private static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<State, HashSet<Transition>>();\n    State[] states = a.getNumberedStates();\n    Set<State> accept = new HashSet<State>();\n    for (State s : states)\n      if (s.isAccept())\n        accept.add(s);\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states) {\n      Set<Transition> tr = m.get(r);\n      r.setTransitions(tr.toArray(new Transition[tr.size()]));\n    }\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    a.clearNumberedStates();\n    return accept;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02f9424edb9eccc558626693e4a4cd43f8ce2622","date":1288987640,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","sourceNew":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  public static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<State, HashSet<Transition>>();\n    State[] states = a.getNumberedStates();\n    Set<State> accept = new HashSet<State>();\n    for (State s : states)\n      if (s.isAccept())\n        accept.add(s);\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states) {\n      Set<Transition> tr = m.get(r);\n      r.setTransitions(tr.toArray(new Transition[tr.size()]));\n    }\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    a.clearNumberedStates();\n    return accept;\n  }\n\n","sourceOld":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<State, HashSet<Transition>>();\n    State[] states = a.getNumberedStates();\n    Set<State> accept = new HashSet<State>();\n    for (State s : states)\n      if (s.isAccept())\n        accept.add(s);\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states) {\n      Set<Transition> tr = m.get(r);\n      r.setTransitions(tr.toArray(new Transition[tr.size()]));\n    }\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    a.clearNumberedStates();\n    return accept;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","sourceNew":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  public static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<State, HashSet<Transition>>();\n    State[] states = a.getNumberedStates();\n    Set<State> accept = new HashSet<State>();\n    for (State s : states)\n      if (s.isAccept())\n        accept.add(s);\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states) {\n      Set<Transition> tr = m.get(r);\n      r.setTransitions(tr.toArray(new Transition[tr.size()]));\n    }\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    a.clearNumberedStates();\n    return accept;\n  }\n\n","sourceOld":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<State, HashSet<Transition>>();\n    State[] states = a.getNumberedStates();\n    Set<State> accept = new HashSet<State>();\n    for (State s : states)\n      if (s.isAccept())\n        accept.add(s);\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states) {\n      Set<Transition> tr = m.get(r);\n      r.setTransitions(tr.toArray(new Transition[tr.size()]));\n    }\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    a.clearNumberedStates();\n    return accept;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","sourceNew":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  public static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<State, HashSet<Transition>>();\n    State[] states = a.getNumberedStates();\n    Set<State> accept = new HashSet<State>();\n    for (State s : states)\n      if (s.isAccept())\n        accept.add(s);\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states) {\n      Set<Transition> tr = m.get(r);\n      r.setTransitions(tr.toArray(new Transition[tr.size()]));\n    }\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    a.clearNumberedStates();\n    return accept;\n  }\n\n","sourceOld":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  private static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<State, HashSet<Transition>>();\n    State[] states = a.getNumberedStates();\n    Set<State> accept = new HashSet<State>();\n    for (State s : states)\n      if (s.isAccept())\n        accept.add(s);\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states) {\n      Set<Transition> tr = m.get(r);\n      r.setTransitions(tr.toArray(new Transition[tr.size()]));\n    }\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    a.clearNumberedStates();\n    return accept;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","sourceNew":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  public static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<State, HashSet<Transition>>();\n    State[] states = a.getNumberedStates();\n    Set<State> accept = new HashSet<State>();\n    for (State s : states)\n      if (s.isAccept())\n        accept.add(s);\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states) {\n      Set<Transition> tr = m.get(r);\n      r.setTransitions(tr.toArray(new Transition[tr.size()]));\n    }\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    a.clearNumberedStates();\n    return accept;\n  }\n\n","sourceOld":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  public static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<State, HashSet<Transition>>();\n    State[] states = a.getNumberedStates();\n    Set<State> accept = new HashSet<State>();\n    for (State s : states)\n      if (s.isAccept())\n        accept.add(s);\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states) {\n      Set<Transition> tr = m.get(r);\n      r.setTransitions(tr.toArray(new Transition[tr.size()]));\n    }\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    a.clearNumberedStates();\n    return accept;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["02f9424edb9eccc558626693e4a4cd43f8ce2622"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["b12d3e81e0f95a4527b5703953c503f71120ffcc","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","6a62f51fc98f22545b2c8453da582a2d8222a756"],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["6a62f51fc98f22545b2c8453da582a2d8222a756"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"6a62f51fc98f22545b2c8453da582a2d8222a756":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","6a62f51fc98f22545b2c8453da582a2d8222a756"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"85a883878c0af761245ab048babc63d099f835f3":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["85a883878c0af761245ab048babc63d099f835f3"],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"6a62f51fc98f22545b2c8453da582a2d8222a756":["b12d3e81e0f95a4527b5703953c503f71120ffcc","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}