{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SearchFacadeStream#SearchFacadeStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233","date":1543335722,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SearchFacadeStream#SearchFacadeStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public SearchFacadeStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    /*\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    */\n\n    if(mParams.get(CommonParams.QT) != null && mParams.get(CommonParams.QT).equals(\"/export\")) {\n      CloudSolrStream cloudSolrStream = new CloudSolrStream();\n      cloudSolrStream.init(collectionName, zkHost, mParams);\n      this.innerStream = cloudSolrStream;\n    } else {\n\n      if(mParams.get(\"partitionKeys\") != null) {\n        throw new IOException(\"partitionKeys can only be used in the search function when the /export handler is specified\");\n      }\n\n      SearchStream searchStream = new SearchStream();\n      searchStream.init(zkHost, collectionName, mParams);\n      this.innerStream = searchStream;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a209db4770770843a101e5dfe46086a63507fd3","date":1544624168,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SearchFacadeStream#SearchFacadeStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SearchFacadeStream#SearchFacadeStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public SearchFacadeStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    //Handle comma delimited list of collections.\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    /*\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    */\n\n    if(mParams.get(CommonParams.QT) != null && mParams.get(CommonParams.QT).equals(\"/export\")) {\n      CloudSolrStream cloudSolrStream = new CloudSolrStream();\n      cloudSolrStream.init(collectionName, zkHost, mParams);\n      this.innerStream = cloudSolrStream;\n    } else {\n\n      if(mParams.get(\"partitionKeys\") != null) {\n        throw new IOException(\"partitionKeys can only be used in the search function when the /export handler is specified\");\n      }\n\n      SearchStream searchStream = new SearchStream();\n      searchStream.init(zkHost, collectionName, mParams);\n      this.innerStream = searchStream;\n    }\n  }\n\n","sourceOld":"  public SearchFacadeStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    /*\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    */\n\n    if(mParams.get(CommonParams.QT) != null && mParams.get(CommonParams.QT).equals(\"/export\")) {\n      CloudSolrStream cloudSolrStream = new CloudSolrStream();\n      cloudSolrStream.init(collectionName, zkHost, mParams);\n      this.innerStream = cloudSolrStream;\n    } else {\n\n      if(mParams.get(\"partitionKeys\") != null) {\n        throw new IOException(\"partitionKeys can only be used in the search function when the /export handler is specified\");\n      }\n\n      SearchStream searchStream = new SearchStream();\n      searchStream.init(zkHost, collectionName, mParams);\n      this.innerStream = searchStream;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a209db4770770843a101e5dfe46086a63507fd3":["b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a209db4770770843a101e5dfe46086a63507fd3"],"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233"],"5a209db4770770843a101e5dfe46086a63507fd3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233":["5a209db4770770843a101e5dfe46086a63507fd3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}