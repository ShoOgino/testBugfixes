{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudHttp2SolrClient#CloudHttp2SolrClient(Builder).mjava","commits":[{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudHttp2SolrClient#CloudHttp2SolrClient(Builder).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   *\n   * @param builder a {@link Http2SolrClient.Builder} with the options used to create the client.\n   */\n  protected CloudHttp2SolrClient(Builder builder) {\n    super(builder.shardLeadersOnly, builder.parallelUpdates, builder.directUpdatesToLeadersOnly);\n    this.clientIsInternal = builder.httpClient == null;\n    this.myClient = (builder.httpClient == null) ? new Http2SolrClient.Builder().build() : builder.httpClient;\n    if (builder.stateProvider == null) {\n      if (builder.zkHosts != null && builder.solrUrls != null) {\n        throw new IllegalArgumentException(\"Both zkHost(s) & solrUrl(s) have been specified. Only specify one.\");\n      }\n      if (builder.zkHosts != null) {\n        this.stateProvider = new ZkClientClusterStateProvider(builder.zkHosts, builder.zkChroot);\n      } else if (builder.solrUrls != null && !builder.solrUrls.isEmpty()) {\n        try {\n          this.stateProvider = new Http2ClusterStateProvider(builder.solrUrls, builder.httpClient);\n        } catch (Exception e) {\n          throw new RuntimeException(\"Couldn't initialize a HttpClusterStateProvider (is/are the \"\n              + \"Solr server(s), \"  + builder.solrUrls + \", down?)\", e);\n        }\n      } else {\n        throw new IllegalArgumentException(\"Both zkHosts and solrUrl cannot be null.\");\n      }\n    } else {\n      this.stateProvider = builder.stateProvider;\n    }\n    this.lbClient = new LBHttp2SolrClient(myClient);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"]},"commit2Childs":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}