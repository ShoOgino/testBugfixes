{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String).mjava","commits":[{"id":"79900e89f08cc17c4bcf49789dd61a2236ee7840","date":1492541915,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestDatePointFunctionQuery(String field, String nonDvFieldName) throws Exception {\n    final String baseDate = \"1995-01-10T10:59:10Z\";\n    \n    for (int i = 9; i >= 0; i--) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), field, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,ms(\" + field + \")) asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='\" + field + \"'][.='1995-01-10T10:59:20Z']\",\n        \"//result/doc[2]/date[@name='\" + field + \"'][.='1995-01-10T10:59:19Z']\",\n        \"//result/doc[3]/date[@name='\" + field + \"'][.='1995-01-10T10:59:18Z']\",\n        \"//result/doc[10]/date[@name='\" + field + \"'][.='1995-01-10T10:59:11Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", ms(\" + field + \",\"+baseDate+\")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:20Z']\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ecc9c5cd143934b0259ea9a255c5b694cd12ec17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestDatePointFunctionQuery(String field, String nonDvFieldName) throws Exception {\n    final String baseDate = \"1995-01-10T10:59:10Z\";\n    \n    for (int i = 9; i >= 0; i--) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), field, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,ms(\" + field + \")) asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='\" + field + \"'][.='1995-01-10T10:59:20Z']\",\n        \"//result/doc[2]/date[@name='\" + field + \"'][.='1995-01-10T10:59:19Z']\",\n        \"//result/doc[3]/date[@name='\" + field + \"'][.='1995-01-10T10:59:18Z']\",\n        \"//result/doc[10]/date[@name='\" + field + \"'][.='1995-01-10T10:59:11Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", ms(\" + field + \",\"+baseDate+\")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:20Z']\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc9c5cd143934b0259ea9a255c5b694cd12ec17","date":1496773537,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String).mjava","sourceNew":"  private void doTestDatePointFunctionQuery(String field, String nonDvFieldName) throws Exception {\n    final String baseDate = \"1995-01-10T10:59:10Z\";\n    \n    for (int i = 9; i >= 0; i--) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), field, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,ms(\" + field + \",\" + baseDate +\")) asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='\" + field + \"'][.='1995-01-10T10:59:20Z']\",\n        \"//result/doc[2]/date[@name='\" + field + \"'][.='1995-01-10T10:59:19Z']\",\n        \"//result/doc[3]/date[@name='\" + field + \"'][.='1995-01-10T10:59:18Z']\",\n        \"//result/doc[10]/date[@name='\" + field + \"'][.='1995-01-10T10:59:11Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", ms(\" + field + \",\"+baseDate+\")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:20Z']\");\n\n  }\n\n","sourceOld":"  private void doTestDatePointFunctionQuery(String field, String nonDvFieldName) throws Exception {\n    final String baseDate = \"1995-01-10T10:59:10Z\";\n    \n    for (int i = 9; i >= 0; i--) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), field, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,ms(\" + field + \")) asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='\" + field + \"'][.='1995-01-10T10:59:20Z']\",\n        \"//result/doc[2]/date[@name='\" + field + \"'][.='1995-01-10T10:59:19Z']\",\n        \"//result/doc[3]/date[@name='\" + field + \"'][.='1995-01-10T10:59:18Z']\",\n        \"//result/doc[10]/date[@name='\" + field + \"'][.='1995-01-10T10:59:11Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", ms(\" + field + \",\"+baseDate+\")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:20Z']\");\n\n  }\n\n","bugFix":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f344bb33ca91f48e99c061980115b46fa84fc8f5","date":1496903283,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String).mjava","sourceNew":"  private void doTestDatePointFunctionQuery(String field, String nonDvFieldName) throws Exception {\n    final String baseDate = \"1995-01-10T10:59:10Z\";\n    \n    for (int i = 9; i >= 0; i--) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), field, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,ms(\" + field + \",\" + baseDate +\")) asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='\" + field + \"'][.='1995-01-10T10:59:20Z']\",\n        \"//result/doc[2]/date[@name='\" + field + \"'][.='1995-01-10T10:59:19Z']\",\n        \"//result/doc[3]/date[@name='\" + field + \"'][.='1995-01-10T10:59:18Z']\",\n        \"//result/doc[10]/date[@name='\" + field + \"'][.='1995-01-10T10:59:11Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", ms(\" + field + \",\"+baseDate+\")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:20Z']\");\n\n  }\n\n","sourceOld":"  private void doTestDatePointFunctionQuery(String field, String nonDvFieldName) throws Exception {\n    final String baseDate = \"1995-01-10T10:59:10Z\";\n    \n    for (int i = 9; i >= 0; i--) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), field, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,ms(\" + field + \")) asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='\" + field + \"'][.='1995-01-10T10:59:20Z']\",\n        \"//result/doc[2]/date[@name='\" + field + \"'][.='1995-01-10T10:59:19Z']\",\n        \"//result/doc[3]/date[@name='\" + field + \"'][.='1995-01-10T10:59:18Z']\",\n        \"//result/doc[10]/date[@name='\" + field + \"'][.='1995-01-10T10:59:11Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", ms(\" + field + \",\"+baseDate+\")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:20Z']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String).mjava","sourceNew":"  private void doTestDatePointFunctionQuery(String field, String nonDvFieldName) throws Exception {\n    final String baseDate = \"1995-01-10T10:59:10Z\";\n    \n    for (int i = 9; i >= 0; i--) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), field, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,ms(\" + field + \",\" + baseDate +\")) asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='\" + field + \"'][.='1995-01-10T10:59:20Z']\",\n        \"//result/doc[2]/date[@name='\" + field + \"'][.='1995-01-10T10:59:19Z']\",\n        \"//result/doc[3]/date[@name='\" + field + \"'][.='1995-01-10T10:59:18Z']\",\n        \"//result/doc[10]/date[@name='\" + field + \"'][.='1995-01-10T10:59:11Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", ms(\" + field + \",\"+baseDate+\")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:20Z']\");\n\n  }\n\n","sourceOld":"  private void doTestDatePointFunctionQuery(String field, String nonDvFieldName) throws Exception {\n    final String baseDate = \"1995-01-10T10:59:10Z\";\n    \n    for (int i = 9; i >= 0; i--) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), field, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,ms(\" + field + \")) asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='\" + field + \"'][.='1995-01-10T10:59:20Z']\",\n        \"//result/doc[2]/date[@name='\" + field + \"'][.='1995-01-10T10:59:19Z']\",\n        \"//result/doc[3]/date[@name='\" + field + \"'][.='1995-01-10T10:59:18Z']\",\n        \"//result/doc[10]/date[@name='\" + field + \"'][.='1995-01-10T10:59:11Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", ms(\" + field + \",\"+baseDate+\")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:20Z']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String).mjava","sourceNew":"  private void doTestDatePointFunctionQuery(String field, String nonDvFieldName) throws Exception {\n    final String baseDate = \"1995-01-10T10:59:10Z\";\n    \n    for (int i = 9; i >= 0; i--) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), field, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,ms(\" + field + \",\" + baseDate +\")) asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='\" + field + \"'][.='1995-01-10T10:59:20Z']\",\n        \"//result/doc[2]/date[@name='\" + field + \"'][.='1995-01-10T10:59:19Z']\",\n        \"//result/doc[3]/date[@name='\" + field + \"'][.='1995-01-10T10:59:18Z']\",\n        \"//result/doc[10]/date[@name='\" + field + \"'][.='1995-01-10T10:59:11Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", ms(\" + field + \",\"+baseDate+\")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:20Z']\");\n\n  }\n\n","sourceOld":"  private void doTestDatePointFunctionQuery(String field, String nonDvFieldName) throws Exception {\n    final String baseDate = \"1995-01-10T10:59:10Z\";\n    \n    for (int i = 9; i >= 0; i--) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), field, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,ms(\" + field + \")) asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='\" + field + \"'][.='1995-01-10T10:59:20Z']\",\n        \"//result/doc[2]/date[@name='\" + field + \"'][.='1995-01-10T10:59:19Z']\",\n        \"//result/doc[3]/date[@name='\" + field + \"'][.='1995-01-10T10:59:18Z']\",\n        \"//result/doc[10]/date[@name='\" + field + \"'][.='1995-01-10T10:59:11Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", ms(\" + field + \",\"+baseDate+\")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:20Z']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String).mjava","sourceNew":null,"sourceOld":"  private void doTestDatePointFunctionQuery(String field, String nonDvFieldName) throws Exception {\n    final String baseDate = \"1995-01-10T10:59:10Z\";\n    \n    for (int i = 9; i >= 0; i--) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), field, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,ms(\" + field + \",\" + baseDate +\")) asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='\" + field + \"'][.='1995-01-10T10:59:20Z']\",\n        \"//result/doc[2]/date[@name='\" + field + \"'][.='1995-01-10T10:59:19Z']\",\n        \"//result/doc[3]/date[@name='\" + field + \"'][.='1995-01-10T10:59:18Z']\",\n        \"//result/doc[10]/date[@name='\" + field + \"'][.='1995-01-10T10:59:11Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", ms(\" + field + \",\"+baseDate+\")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:20Z']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String).mjava","sourceNew":null,"sourceOld":"  private void doTestDatePointFunctionQuery(String field, String nonDvFieldName) throws Exception {\n    final String baseDate = \"1995-01-10T10:59:10Z\";\n    \n    for (int i = 9; i >= 0; i--) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), field, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,ms(\" + field + \",\" + baseDate +\")) asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='\" + field + \"'][.='1995-01-10T10:59:20Z']\",\n        \"//result/doc[2]/date[@name='\" + field + \"'][.='1995-01-10T10:59:19Z']\",\n        \"//result/doc[3]/date[@name='\" + field + \"'][.='1995-01-10T10:59:18Z']\",\n        \"//result/doc[10]/date[@name='\" + field + \"'][.='1995-01-10T10:59:11Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", ms(\" + field + \",\"+baseDate+\")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:20Z']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["79900e89f08cc17c4bcf49789dd61a2236ee7840","ecc9c5cd143934b0259ea9a255c5b694cd12ec17"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["79900e89f08cc17c4bcf49789dd61a2236ee7840","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"ecc9c5cd143934b0259ea9a255c5b694cd12ec17":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","79900e89f08cc17c4bcf49789dd61a2236ee7840"],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["f344bb33ca91f48e99c061980115b46fa84fc8f5","28288370235ed02234a64753cdbf0c6ec096304a","ecc9c5cd143934b0259ea9a255c5b694cd12ec17"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"ecc9c5cd143934b0259ea9a255c5b694cd12ec17":["f344bb33ca91f48e99c061980115b46fa84fc8f5"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}