{"path":"solr/src/java/org/apache/solr/response/transform/ValueAugmenterFactory#getObjectFrom(String).mjava","commits":[{"id":"c1c76c72faecc7c9b683ad67e99240c975ee37b3","date":1301109514,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/transform/ValueAugmenterFactory#getObjectFrom(String).mjava","pathOld":"/dev/null","sourceNew":"  public static Object getObjectFrom( String str )\n  {\n    int idx = str.indexOf( ':' );\n    if( idx > 0 ) {\n      String type = str.substring(0,idx);\n      String val = str.substring(idx+1);\n      try {\n        if( \"int\".equals( type ) ) return Integer.valueOf( val );\n        if( \"double\".equals( type ) ) return Double.valueOf( val );\n        if( \"float\".equals( type ) ) return Float.valueOf( val );\n        if( \"date\".equals( type ) ) return DateUtil.parseDate(val);\n      }\n      catch( Exception ex ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Unable to parse \"+type+\"=\"+val, ex );\n      }\n    }\n    return str;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/transform/ValueAugmenterFactory#getObjectFrom(String).mjava","pathOld":"/dev/null","sourceNew":"  public static Object getObjectFrom( String str )\n  {\n    int idx = str.indexOf( ':' );\n    if( idx > 0 ) {\n      String type = str.substring(0,idx);\n      String val = str.substring(idx+1);\n      try {\n        if( \"int\".equals( type ) ) return Integer.valueOf( val );\n        if( \"double\".equals( type ) ) return Double.valueOf( val );\n        if( \"float\".equals( type ) ) return Float.valueOf( val );\n        if( \"date\".equals( type ) ) return DateUtil.parseDate(val);\n      }\n      catch( Exception ex ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Unable to parse \"+type+\"=\"+val, ex );\n      }\n    }\n    return str;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/transform/ValueAugmenterFactory#getObjectFrom(String).mjava","pathOld":"/dev/null","sourceNew":"  public static Object getObjectFrom( String str )\n  {\n    int idx = str.indexOf( ':' );\n    if( idx > 0 ) {\n      String type = str.substring(0,idx);\n      String val = str.substring(idx+1);\n      try {\n        if( \"int\".equals( type ) ) return Integer.valueOf( val );\n        if( \"double\".equals( type ) ) return Double.valueOf( val );\n        if( \"float\".equals( type ) ) return Float.valueOf( val );\n        if( \"date\".equals( type ) ) return DateUtil.parseDate(val);\n      }\n      catch( Exception ex ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Unable to parse \"+type+\"=\"+val, ex );\n      }\n    }\n    return str;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"785c5e6bc8889b740445ed7f2b278a442ad92f7f","date":1307558822,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/transform/ValueAugmenterFactory#getObjectFrom(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/ValueAugmenterFactory#getObjectFrom(String).mjava","sourceNew":"  public static Object getObjectFrom( String val, String type )\n  {\n    if( type != null ) {\n      try {\n        if( \"int\".equals( type ) ) return Integer.valueOf( val );\n        if( \"double\".equals( type ) ) return Double.valueOf( val );\n        if( \"float\".equals( type ) ) return Float.valueOf( val );\n        if( \"date\".equals( type ) ) return DateUtil.parseDate(val);\n      }\n      catch( Exception ex ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Unable to parse \"+type+\"=\"+val, ex );\n      }\n    }\n    return val;\n  }\n\n","sourceOld":"  public static Object getObjectFrom( String str )\n  {\n    int idx = str.indexOf( ':' );\n    if( idx > 0 ) {\n      String type = str.substring(0,idx);\n      String val = str.substring(idx+1);\n      try {\n        if( \"int\".equals( type ) ) return Integer.valueOf( val );\n        if( \"double\".equals( type ) ) return Double.valueOf( val );\n        if( \"float\".equals( type ) ) return Float.valueOf( val );\n        if( \"date\".equals( type ) ) return DateUtil.parseDate(val);\n      }\n      catch( Exception ex ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Unable to parse \"+type+\"=\"+val, ex );\n      }\n    }\n    return str;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/transform/ValueAugmenterFactory#getObjectFrom(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/ValueAugmenterFactory#getObjectFrom(String).mjava","sourceNew":"  public static Object getObjectFrom( String val, String type )\n  {\n    if( type != null ) {\n      try {\n        if( \"int\".equals( type ) ) return Integer.valueOf( val );\n        if( \"double\".equals( type ) ) return Double.valueOf( val );\n        if( \"float\".equals( type ) ) return Float.valueOf( val );\n        if( \"date\".equals( type ) ) return DateUtil.parseDate(val);\n      }\n      catch( Exception ex ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Unable to parse \"+type+\"=\"+val, ex );\n      }\n    }\n    return val;\n  }\n\n","sourceOld":"  public static Object getObjectFrom( String str )\n  {\n    int idx = str.indexOf( ':' );\n    if( idx > 0 ) {\n      String type = str.substring(0,idx);\n      String val = str.substring(idx+1);\n      try {\n        if( \"int\".equals( type ) ) return Integer.valueOf( val );\n        if( \"double\".equals( type ) ) return Double.valueOf( val );\n        if( \"float\".equals( type ) ) return Float.valueOf( val );\n        if( \"date\".equals( type ) ) return DateUtil.parseDate(val);\n      }\n      catch( Exception ex ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Unable to parse \"+type+\"=\"+val, ex );\n      }\n    }\n    return str;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/transform/ValueAugmenterFactory#getObjectFrom(String).mjava","sourceNew":null,"sourceOld":"  public static Object getObjectFrom( String str )\n  {\n    int idx = str.indexOf( ':' );\n    if( idx > 0 ) {\n      String type = str.substring(0,idx);\n      String val = str.substring(idx+1);\n      try {\n        if( \"int\".equals( type ) ) return Integer.valueOf( val );\n        if( \"double\".equals( type ) ) return Double.valueOf( val );\n        if( \"float\".equals( type ) ) return Float.valueOf( val );\n        if( \"date\".equals( type ) ) return DateUtil.parseDate(val);\n      }\n      catch( Exception ex ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Unable to parse \"+type+\"=\"+val, ex );\n      }\n    }\n    return str;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["c1c76c72faecc7c9b683ad67e99240c975ee37b3","785c5e6bc8889b740445ed7f2b278a442ad92f7f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"c1c76c72faecc7c9b683ad67e99240c975ee37b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["d619839baa8ce5503e496b94a9e42ad6f079293f","785c5e6bc8889b740445ed7f2b278a442ad92f7f"],"785c5e6bc8889b740445ed7f2b278a442ad92f7f":["c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["785c5e6bc8889b740445ed7f2b278a442ad92f7f"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"c1c76c72faecc7c9b683ad67e99240c975ee37b3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","785c5e6bc8889b740445ed7f2b278a442ad92f7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"785c5e6bc8889b740445ed7f2b278a442ad92f7f":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}