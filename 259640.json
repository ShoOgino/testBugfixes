{"path":"lucene/src/java/org/apache/lucene/index/ReusableStringReader#read(char[],int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ReusableStringReader#read(char[],int,int).mjava","pathOld":"src/java/org/apache/lucene/index/ReusableStringReader#read(char[],int,int).mjava","sourceNew":"  @Override\n  public int read(char[] c, int off, int len) {\n    if (left > len) {\n      s.getChars(upto, upto+len, c, off);\n      upto += len;\n      left -= len;\n      return len;\n    } else if (0 == left) {\n      return -1;\n    } else {\n      s.getChars(upto, upto+left, c, off);\n      int r = left;\n      left = 0;\n      upto = s.length();\n      return r;\n    }\n  }\n\n","sourceOld":"  @Override\n  public int read(char[] c, int off, int len) {\n    if (left > len) {\n      s.getChars(upto, upto+len, c, off);\n      upto += len;\n      left -= len;\n      return len;\n    } else if (0 == left) {\n      return -1;\n    } else {\n      s.getChars(upto, upto+left, c, off);\n      int r = left;\n      left = 0;\n      upto = s.length();\n      return r;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"579b8e50af5927e2366553f5e237b2c6e46b258e","date":1274137954,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ReusableStringReader#read(char[],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ReusableStringReader#read(char[],int,int).mjava","sourceNew":"  @Override\n  public int read(char[] c, int off, int len) {\n    if (left > len) {\n      s.getChars(upto, upto+len, c, off);\n      upto += len;\n      left -= len;\n      return len;\n    } else if (0 == left) {\n      // don't keep a reference (s could have been very large)\n      s = null;\n      return -1;\n    } else {\n      s.getChars(upto, upto+left, c, off);\n      int r = left;\n      left = 0;\n      upto = s.length();\n      return r;\n    }\n  }\n\n","sourceOld":"  @Override\n  public int read(char[] c, int off, int len) {\n    if (left > len) {\n      s.getChars(upto, upto+len, c, off);\n      upto += len;\n      left -= len;\n      return len;\n    } else if (0 == left) {\n      return -1;\n    } else {\n      s.getChars(upto, upto+left, c, off);\n      int r = left;\n      left = 0;\n      upto = s.length();\n      return r;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9c3eceae48ef9c0ffbc9e054c91dc653a0ee94e","date":1323563959,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/ReusableStringReader#read(char[],int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int read(char[] c, int off, int len) {\n    if (left > len) {\n      s.getChars(upto, upto+len, c, off);\n      upto += len;\n      left -= len;\n      return len;\n    } else if (0 == left) {\n      // don't keep a reference (s could have been very large)\n      s = null;\n      return -1;\n    } else {\n      s.getChars(upto, upto+left, c, off);\n      int r = left;\n      left = 0;\n      upto = s.length();\n      return r;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/ReusableStringReader#read(char[],int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int read(char[] c, int off, int len) {\n    if (left > len) {\n      s.getChars(upto, upto+len, c, off);\n      upto += len;\n      left -= len;\n      return len;\n    } else if (0 == left) {\n      // don't keep a reference (s could have been very large)\n      s = null;\n      return -1;\n    } else {\n      s.getChars(upto, upto+left, c, off);\n      int r = left;\n      left = 0;\n      upto = s.length();\n      return r;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f9c3eceae48ef9c0ffbc9e054c91dc653a0ee94e":["579b8e50af5927e2366553f5e237b2c6e46b258e"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["579b8e50af5927e2366553f5e237b2c6e46b258e","f9c3eceae48ef9c0ffbc9e054c91dc653a0ee94e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"579b8e50af5927e2366553f5e237b2c6e46b258e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f9c3eceae48ef9c0ffbc9e054c91dc653a0ee94e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f9c3eceae48ef9c0ffbc9e054c91dc653a0ee94e":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"579b8e50af5927e2366553f5e237b2c6e46b258e":["f9c3eceae48ef9c0ffbc9e054c91dc653a0ee94e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["579b8e50af5927e2366553f5e237b2c6e46b258e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}