{"path":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docs(Bits,DocsEnum,int).mjava","commits":[{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docs(Bits,DocsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    MultiDocsEnum docsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsEnum\n    if (reuse != null && reuse instanceof MultiDocsEnum) {\n      docsEnum = (MultiDocsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsEnum.canReuse(this)) {\n        docsEnum = new MultiDocsEnum(this, subs.length);\n      }\n    } else {\n      docsEnum = new MultiDocsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(entry.subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access\n          b = new BitsSlice(liveDocs, entry.subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, entry.subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsEnum.subDocsEnum.length: entry.index + \" vs \" + docsEnum.subDocsEnum.length + \"; \" + subs.length;\n      final DocsEnum subDocsEnum = entry.terms.docs(b, docsEnum.subDocsEnum[entry.index], flags);\n      if (subDocsEnum != null) {\n        docsEnum.subDocsEnum[entry.index] = subDocsEnum;\n        subDocs[upto].docsEnum = subDocsEnum;\n        subDocs[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        // One of our subs cannot provide a docsenum:\n        assert false;\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsEnum.reset(subDocs, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    MultiDocsEnum docsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsEnum\n    if (reuse != null && reuse instanceof MultiDocsEnum) {\n      docsEnum = (MultiDocsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsEnum.canReuse(this)) {\n        docsEnum = new MultiDocsEnum(this, subs.length);\n      }\n    } else {\n      docsEnum = new MultiDocsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(entry.subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access\n          b = new BitsSlice(liveDocs, entry.subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, entry.subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsEnum.subDocsEnum.length: entry.index + \" vs \" + docsEnum.subDocsEnum.length + \"; \" + subs.length;\n      final DocsEnum subDocsEnum = entry.terms.docs(b, docsEnum.subDocsEnum[entry.index], needsFreqs);\n      if (subDocsEnum != null) {\n        docsEnum.subDocsEnum[entry.index] = subDocsEnum;\n        subDocs[upto].docsEnum = subDocsEnum;\n        subDocs[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        // One of our subs cannot provide freqs:\n        assert needsFreqs;\n        return null;\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsEnum.reset(subDocs, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    MultiDocsEnum docsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsEnum\n    if (reuse != null && reuse instanceof MultiDocsEnum) {\n      docsEnum = (MultiDocsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsEnum.canReuse(this)) {\n        docsEnum = new MultiDocsEnum(this, subs.length);\n      }\n    } else {\n      docsEnum = new MultiDocsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(entry.subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access\n          b = new BitsSlice(liveDocs, entry.subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, entry.subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsEnum.subDocsEnum.length: entry.index + \" vs \" + docsEnum.subDocsEnum.length + \"; \" + subs.length;\n      final DocsEnum subDocsEnum = entry.terms.docs(b, docsEnum.subDocsEnum[entry.index], flags);\n      if (subDocsEnum != null) {\n        docsEnum.subDocsEnum[entry.index] = subDocsEnum;\n        subDocs[upto].docsEnum = subDocsEnum;\n        subDocs[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        // One of our subs cannot provide a docsenum:\n        assert false;\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsEnum.reset(subDocs, upto);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    MultiDocsEnum docsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsEnum\n    if (reuse != null && reuse instanceof MultiDocsEnum) {\n      docsEnum = (MultiDocsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsEnum.canReuse(this)) {\n        docsEnum = new MultiDocsEnum(this, subs.length);\n      }\n    } else {\n      docsEnum = new MultiDocsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(entry.subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access\n          b = new BitsSlice(liveDocs, entry.subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, entry.subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsEnum.subDocsEnum.length: entry.index + \" vs \" + docsEnum.subDocsEnum.length + \"; \" + subs.length;\n      final DocsEnum subDocsEnum = entry.terms.docs(b, docsEnum.subDocsEnum[entry.index], flags);\n      if (subDocsEnum != null) {\n        docsEnum.subDocsEnum[entry.index] = subDocsEnum;\n        subDocs[upto].docsEnum = subDocsEnum;\n        subDocs[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        // One of our subs cannot provide a docsenum:\n        assert false;\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsEnum.reset(subDocs, upto);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a92d88a85748af0cb6a68706f8ac3ba6bd686fa6","date":1346421325,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docs(Bits,DocsEnum,int).mjava","sourceNew":"  @Override\n  public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    MultiDocsEnum docsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsEnum\n    if (reuse != null && reuse instanceof MultiDocsEnum) {\n      docsEnum = (MultiDocsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsEnum.canReuse(this)) {\n        docsEnum = new MultiDocsEnum(this, subs.length);\n      }\n    } else {\n      docsEnum = new MultiDocsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(entry.subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access\n          b = new BitsSlice(liveDocs, entry.subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, entry.subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsEnum.subDocsEnum.length: entry.index + \" vs \" + docsEnum.subDocsEnum.length + \"; \" + subs.length;\n      final DocsEnum subDocsEnum = entry.terms.docs(b, docsEnum.subDocsEnum[entry.index], flags);\n      if (subDocsEnum != null) {\n        docsEnum.subDocsEnum[entry.index] = subDocsEnum;\n        subDocs[upto].docsEnum = subDocsEnum;\n        subDocs[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        // should this be an error?\n        assert false : \"One of our subs cannot provide a docsenum\";\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsEnum.reset(subDocs, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    MultiDocsEnum docsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsEnum\n    if (reuse != null && reuse instanceof MultiDocsEnum) {\n      docsEnum = (MultiDocsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsEnum.canReuse(this)) {\n        docsEnum = new MultiDocsEnum(this, subs.length);\n      }\n    } else {\n      docsEnum = new MultiDocsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(entry.subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access\n          b = new BitsSlice(liveDocs, entry.subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, entry.subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsEnum.subDocsEnum.length: entry.index + \" vs \" + docsEnum.subDocsEnum.length + \"; \" + subs.length;\n      final DocsEnum subDocsEnum = entry.terms.docs(b, docsEnum.subDocsEnum[entry.index], flags);\n      if (subDocsEnum != null) {\n        docsEnum.subDocsEnum[entry.index] = subDocsEnum;\n        subDocs[upto].docsEnum = subDocsEnum;\n        subDocs[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        // One of our subs cannot provide a docsenum:\n        assert false;\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsEnum.reset(subDocs, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docs(Bits,DocsEnum,int).mjava","sourceNew":"  @Override\n  public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    MultiDocsEnum docsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsEnum\n    if (reuse != null && reuse instanceof MultiDocsEnum) {\n      docsEnum = (MultiDocsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsEnum.canReuse(this)) {\n        docsEnum = new MultiDocsEnum(this, subs.length);\n      }\n    } else {\n      docsEnum = new MultiDocsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(entry.subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access\n          b = new BitsSlice(liveDocs, entry.subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, entry.subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsEnum.subDocsEnum.length: entry.index + \" vs \" + docsEnum.subDocsEnum.length + \"; \" + subs.length;\n      final DocsEnum subDocsEnum = entry.terms.docs(b, docsEnum.subDocsEnum[entry.index], flags);\n      if (subDocsEnum != null) {\n        docsEnum.subDocsEnum[entry.index] = subDocsEnum;\n        subDocs[upto].docsEnum = subDocsEnum;\n        subDocs[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        // should this be an error?\n        assert false : \"One of our subs cannot provide a docsenum\";\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsEnum.reset(subDocs, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    MultiDocsEnum docsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsEnum\n    if (reuse != null && reuse instanceof MultiDocsEnum) {\n      docsEnum = (MultiDocsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsEnum.canReuse(this)) {\n        docsEnum = new MultiDocsEnum(this, subs.length);\n      }\n    } else {\n      docsEnum = new MultiDocsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(entry.subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access\n          b = new BitsSlice(liveDocs, entry.subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, entry.subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsEnum.subDocsEnum.length: entry.index + \" vs \" + docsEnum.subDocsEnum.length + \"; \" + subs.length;\n      final DocsEnum subDocsEnum = entry.terms.docs(b, docsEnum.subDocsEnum[entry.index], flags);\n      if (subDocsEnum != null) {\n        docsEnum.subDocsEnum[entry.index] = subDocsEnum;\n        subDocs[upto].docsEnum = subDocsEnum;\n        subDocs[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        // One of our subs cannot provide a docsenum:\n        assert false;\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsEnum.reset(subDocs, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docs(Bits,DocsEnum,int).mjava","sourceNew":"  @Override\n  public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n    MultiPostingsEnum docsEnum;\n\n    // Can only reuse if incoming enum is also a MultiDocsEnum\n    if (reuse != null && reuse instanceof MultiPostingsEnum) {\n      docsEnum = (MultiPostingsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsEnum.canReuse(this)) {\n        docsEnum = new MultiPostingsEnum(this, subs.length);\n      }\n    } else {\n      docsEnum = new MultiPostingsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(entry.subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access\n          b = new BitsSlice(liveDocs, entry.subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, entry.subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsEnum.subPostingsEnums.length: entry.index + \" vs \" + docsEnum.subPostingsEnums.length + \"; \" + subs.length;\n      final PostingsEnum subPostingsEnum = entry.terms.postings(b, docsEnum.subPostingsEnums[entry.index], flags);\n      if (subPostingsEnum != null) {\n        docsEnum.subPostingsEnums[entry.index] = subPostingsEnum;\n        subDocs[upto].postingsEnum = subPostingsEnum;\n        subDocs[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        // should this be an error?\n        return null;    // We can't support what is being asked for\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsEnum.reset(subDocs, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    MultiDocsEnum docsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsEnum\n    if (reuse != null && reuse instanceof MultiDocsEnum) {\n      docsEnum = (MultiDocsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsEnum.canReuse(this)) {\n        docsEnum = new MultiDocsEnum(this, subs.length);\n      }\n    } else {\n      docsEnum = new MultiDocsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(entry.subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access\n          b = new BitsSlice(liveDocs, entry.subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, entry.subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsEnum.subDocsEnum.length: entry.index + \" vs \" + docsEnum.subDocsEnum.length + \"; \" + subs.length;\n      final DocsEnum subDocsEnum = entry.terms.docs(b, docsEnum.subDocsEnum[entry.index], flags);\n      if (subDocsEnum != null) {\n        docsEnum.subDocsEnum[entry.index] = subDocsEnum;\n        subDocs[upto].docsEnum = subDocsEnum;\n        subDocs[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        // should this be an error?\n        assert false : \"One of our subs cannot provide a docsenum\";\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsEnum.reset(subDocs, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d0d1f90e969803cc84174589b5e4a39b7935fecd":["d6f074e73200c07d54f242d3880a8da5a35ff97b","a92d88a85748af0cb6a68706f8ac3ba6bd686fa6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02331260bb246364779cb6f04919ca47900d01bb"],"51f5280f31484820499077f41fcdfe92d527d9dc":["a92d88a85748af0cb6a68706f8ac3ba6bd686fa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a92d88a85748af0cb6a68706f8ac3ba6bd686fa6":["02331260bb246364779cb6f04919ca47900d01bb"],"02331260bb246364779cb6f04919ca47900d01bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["d0d1f90e969803cc84174589b5e4a39b7935fecd"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a92d88a85748af0cb6a68706f8ac3ba6bd686fa6":["d0d1f90e969803cc84174589b5e4a39b7935fecd","51f5280f31484820499077f41fcdfe92d527d9dc"],"02331260bb246364779cb6f04919ca47900d01bb":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","a92d88a85748af0cb6a68706f8ac3ba6bd686fa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d0d1f90e969803cc84174589b5e4a39b7935fecd","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}