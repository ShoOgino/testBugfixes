{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonClockwise().mjava","commits":[{"id":"40aa98241c87d86a0077beb8023713d93a0becfe","date":1459784560,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonClockwise().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPolygonClockwise() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n\n    // Points go counterclockwise, so \n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should NOT be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(!c.isWithin(gp));\n\n    // Now, go clockwise\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));    \n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonClockwise().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPolygonClockwise() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n\n    // Points go counterclockwise, so \n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should NOT be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(!c.isWithin(gp));\n\n    // Now, go clockwise\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));    \n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"265e2d0799e876e7c751a97229b0d8007cd79f0a","date":1461779668,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonClockwise().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonClockwise().mjava","sourceNew":"  @Test\n  public void testPolygonClockwise() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    // Points go counterclockwise, so \n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should NOT be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(!c.isWithin(gp));\n\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    assertTrue(!c.isWithin(gp));\n    \n    // Now, go clockwise\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));    \n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonClockwise() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n\n    // Points go counterclockwise, so \n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should NOT be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(!c.isWithin(gp));\n\n    // Now, go clockwise\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));    \n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d2af739bccba3be9b36de4d0bdb45f169c0156f","date":1461802146,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonClockwise().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonClockwise().mjava","sourceNew":"  @Test\n  public void testPolygonClockwise() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    // Points go counterclockwise, so \n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should NOT be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(!c.isWithin(gp));\n\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    assertTrue(!c.isWithin(gp));\n    \n    // Now, go clockwise\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));    \n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    assertTrue(c.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonClockwise() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    // Points go counterclockwise, so \n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should NOT be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(!c.isWithin(gp));\n\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    assertTrue(!c.isWithin(gp));\n    \n    // Now, go clockwise\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));    \n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0","date":1461888019,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonClockwise().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonClockwise().mjava","sourceNew":"  @Test\n  public void testPolygonClockwise() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    // Points go counterclockwise, so \n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should NOT be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(!c.isWithin(gp));\n\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    assertTrue(!c.isWithin(gp));\n    \n    // Now, go clockwise\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));    \n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    assertTrue(c.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonClockwise() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n\n    // Points go counterclockwise, so \n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should NOT be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(!c.isWithin(gp));\n\n    // Now, go clockwise\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));    \n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonClockwise().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonClockwise().mjava","sourceNew":"  @Test\n  public void testPolygonClockwise() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    // Points go counterclockwise, so \n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should NOT be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(!c.isWithin(gp));\n\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    assertTrue(!c.isWithin(gp));\n    \n    // Now, go clockwise\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));    \n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    assertTrue(c.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonClockwise() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n\n    // Points go counterclockwise, so \n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should NOT be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(!c.isWithin(gp));\n\n    // Now, go clockwise\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));    \n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"961aa3f803841184bcbd8a9d0533743be1323d63","date":1521994841,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonClockwise().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonClockwise().mjava","sourceNew":"  @Test\n  public void testPolygonClockwise() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    // Points go counterclockwise, so \n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    GeoPolygonFactory.PolygonDescription pd = new GeoPolygonFactory.PolygonDescription(points);\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, pd);\n    //System.out.println(c);\n    \n    // Middle point should NOT be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(!c.isWithin(gp));\n\n    shapes = new ArrayList<>();\n    shapes.add(pd);\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    assertTrue(!c.isWithin(gp));\n    \n    // Now, go clockwise\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));    \n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    pd = new GeoPolygonFactory.PolygonDescription(points);\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, pd);\n    //System.out.println(c);\n    \n    // Middle point should be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n\n    shapes = new ArrayList<>();\n    shapes.add(pd);\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    assertTrue(c.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonClockwise() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    // Points go counterclockwise, so \n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should NOT be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(!c.isWithin(gp));\n\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    assertTrue(!c.isWithin(gp));\n    \n    // Now, go clockwise\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));    \n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    //System.out.println(c);\n    \n    // Middle point should be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    assertTrue(c.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonClockwise().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonClockwise().mjava","sourceNew":"  @Test\n  public void testPolygonClockwise() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    // Points go counterclockwise, so \n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    GeoPolygonFactory.PolygonDescription pd = new GeoPolygonFactory.PolygonDescription(points);\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, pd);\n    //System.out.println(zScaling);\n    \n    // Middle point should NOT be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(!c.isWithin(gp));\n\n    shapes = new ArrayList<>();\n    shapes.add(pd);\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    assertTrue(!c.isWithin(gp));\n    \n    // Now, go clockwise\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));    \n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    pd = new GeoPolygonFactory.PolygonDescription(points);\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, pd);\n    //System.out.println(zScaling);\n    \n    // Middle point should be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n\n    shapes = new ArrayList<>();\n    shapes.add(pd);\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    assertTrue(c.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonClockwise() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    // Points go counterclockwise, so \n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    GeoPolygonFactory.PolygonDescription pd = new GeoPolygonFactory.PolygonDescription(points);\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, pd);\n    //System.out.println(c);\n    \n    // Middle point should NOT be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(!c.isWithin(gp));\n\n    shapes = new ArrayList<>();\n    shapes.add(pd);\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    assertTrue(!c.isWithin(gp));\n    \n    // Now, go clockwise\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));    \n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    pd = new GeoPolygonFactory.PolygonDescription(points);\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, pd);\n    //System.out.println(c);\n    \n    // Middle point should be within!!\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n\n    shapes = new ArrayList<>();\n    shapes.add(pd);\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    assertTrue(c.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"961aa3f803841184bcbd8a9d0533743be1323d63":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","40aa98241c87d86a0077beb8023713d93a0becfe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d2af739bccba3be9b36de4d0bdb45f169c0156f":["265e2d0799e876e7c751a97229b0d8007cd79f0a"],"265e2d0799e876e7c751a97229b0d8007cd79f0a":["40aa98241c87d86a0077beb8023713d93a0becfe"],"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0":["40aa98241c87d86a0077beb8023713d93a0becfe","7d2af739bccba3be9b36de4d0bdb45f169c0156f"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["961aa3f803841184bcbd8a9d0533743be1323d63"],"40aa98241c87d86a0077beb8023713d93a0becfe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["40aa98241c87d86a0077beb8023713d93a0becfe","c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"]},"commit2Childs":{"961aa3f803841184bcbd8a9d0533743be1323d63":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09af2c9610ce53a4b25fd99344299b40318a4a1a","40aa98241c87d86a0077beb8023713d93a0becfe"],"7d2af739bccba3be9b36de4d0bdb45f169c0156f":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"],"265e2d0799e876e7c751a97229b0d8007cd79f0a":["7d2af739bccba3be9b36de4d0bdb45f169c0156f"],"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0":["961aa3f803841184bcbd8a9d0533743be1323d63","55b50463286869f584cf849d1587a0fcd54d1dfa"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"40aa98241c87d86a0077beb8023713d93a0becfe":["09af2c9610ce53a4b25fd99344299b40318a4a1a","265e2d0799e876e7c751a97229b0d8007cd79f0a","c46db27f3364a67a1c77a0f4e462cc7c5b4147f0","55b50463286869f584cf849d1587a0fcd54d1dfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}