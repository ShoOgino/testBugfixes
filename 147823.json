{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#merge(List[Collection[SearchGroup[T]]],int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#merge(List[Collection[SearchGroup[T]]],int,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#merge(List[Collection[SearchGroup[T]]],int,int).mjava","sourceNew":"    public Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> shards, int offset, int topN) {\n\n      final int maxQueueSize = offset + topN;\n\n      //System.out.println(\"merge\");\n      // Init queue:\n      for(int shardIDX=0;shardIDX<shards.size();shardIDX++) {\n        final Collection<SearchGroup<T>> shard = shards.get(shardIDX);\n        if (!shard.isEmpty()) {\n          //System.out.println(\"  insert shard=\" + shardIDX);\n          updateNextGroup(maxQueueSize, new ShardIter<T>(shard, shardIDX));\n        }\n      }\n\n      // Pull merged topN groups:\n      final List<SearchGroup<T>> newTopGroups = new ArrayList<SearchGroup<T>>();\n\n      int count = 0;\n\n      while(queue.size() != 0) {\n        final MergedGroup<T> group = queue.pollFirst();\n        group.processed = true;\n        //System.out.println(\"  pop: shards=\" + group.shards + \" group=\" + (group.groupValue == null ? \"null\" : (((BytesRef) group.groupValue).utf8ToString())) + \" sortValues=\" + Arrays.toString(group.topValues));\n        if (count++ >= offset) {\n          final SearchGroup<T> newGroup = new SearchGroup<T>();\n          newGroup.groupValue = group.groupValue;\n          newGroup.sortValues = group.topValues;\n          newTopGroups.add(newGroup);\n          if (newTopGroups.size() == topN) {\n            break;\n          }\n        //} else {\n        // System.out.println(\"    skip < offset\");\n        }\n\n        // Advance all iters in this group:\n        for(ShardIter<T> shardIter : group.shards) {\n          updateNextGroup(maxQueueSize, shardIter);\n        }\n      }\n\n      if (newTopGroups.size() == 0) {\n        return null;\n      } else {\n        return newTopGroups;\n      }\n    }\n\n","sourceOld":"    public Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> shards, int offset, int topN) {\n\n      final int maxQueueSize = offset + topN;\n\n      //System.out.println(\"merge\");\n      // Init queue:\n      for(int shardIDX=0;shardIDX<shards.size();shardIDX++) {\n        final Collection<SearchGroup<T>> shard = shards.get(shardIDX);\n        if (!shard.isEmpty()) {\n          //System.out.println(\"  insert shard=\" + shardIDX);\n          updateNextGroup(maxQueueSize, new ShardIter<T>(shard, shardIDX));\n        }\n      }\n\n      // Pull merged topN groups:\n      final List<SearchGroup<T>> newTopGroups = new ArrayList<SearchGroup<T>>();\n\n      int count = 0;\n\n      while(queue.size() != 0) {\n        final MergedGroup<T> group = queue.pollFirst();\n        group.processed = true;\n        //System.out.println(\"  pop: shards=\" + group.shards + \" group=\" + (group.groupValue == null ? \"null\" : (((BytesRef) group.groupValue).utf8ToString())) + \" sortValues=\" + Arrays.toString(group.topValues));\n        if (count++ >= offset) {\n          final SearchGroup<T> newGroup = new SearchGroup<T>();\n          newGroup.groupValue = group.groupValue;\n          newGroup.sortValues = group.topValues;\n          newTopGroups.add(newGroup);\n          if (newTopGroups.size() == topN) {\n            break;\n          }\n        //} else {\n        // System.out.println(\"    skip < offset\");\n        }\n\n        // Advance all iters in this group:\n        for(ShardIter<T> shardIter : group.shards) {\n          updateNextGroup(maxQueueSize, shardIter);\n        }\n      }\n\n      if (newTopGroups.size() == 0) {\n        return null;\n      } else {\n        return newTopGroups;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#merge(List[Collection[SearchGroup[T]]],int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#merge(List[Collection[SearchGroup[T]]],int,int).mjava","sourceNew":"    public Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> shards, int offset, int topN) {\n\n      final int maxQueueSize = offset + topN;\n\n      //System.out.println(\"merge\");\n      // Init queue:\n      for(int shardIDX=0;shardIDX<shards.size();shardIDX++) {\n        final Collection<SearchGroup<T>> shard = shards.get(shardIDX);\n        if (!shard.isEmpty()) {\n          //System.out.println(\"  insert shard=\" + shardIDX);\n          updateNextGroup(maxQueueSize, new ShardIter<>(shard, shardIDX));\n        }\n      }\n\n      // Pull merged topN groups:\n      final List<SearchGroup<T>> newTopGroups = new ArrayList<>();\n\n      int count = 0;\n\n      while(queue.size() != 0) {\n        final MergedGroup<T> group = queue.pollFirst();\n        group.processed = true;\n        //System.out.println(\"  pop: shards=\" + group.shards + \" group=\" + (group.groupValue == null ? \"null\" : (((BytesRef) group.groupValue).utf8ToString())) + \" sortValues=\" + Arrays.toString(group.topValues));\n        if (count++ >= offset) {\n          final SearchGroup<T> newGroup = new SearchGroup<>();\n          newGroup.groupValue = group.groupValue;\n          newGroup.sortValues = group.topValues;\n          newTopGroups.add(newGroup);\n          if (newTopGroups.size() == topN) {\n            break;\n          }\n        //} else {\n        // System.out.println(\"    skip < offset\");\n        }\n\n        // Advance all iters in this group:\n        for(ShardIter<T> shardIter : group.shards) {\n          updateNextGroup(maxQueueSize, shardIter);\n        }\n      }\n\n      if (newTopGroups.size() == 0) {\n        return null;\n      } else {\n        return newTopGroups;\n      }\n    }\n\n","sourceOld":"    public Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> shards, int offset, int topN) {\n\n      final int maxQueueSize = offset + topN;\n\n      //System.out.println(\"merge\");\n      // Init queue:\n      for(int shardIDX=0;shardIDX<shards.size();shardIDX++) {\n        final Collection<SearchGroup<T>> shard = shards.get(shardIDX);\n        if (!shard.isEmpty()) {\n          //System.out.println(\"  insert shard=\" + shardIDX);\n          updateNextGroup(maxQueueSize, new ShardIter<T>(shard, shardIDX));\n        }\n      }\n\n      // Pull merged topN groups:\n      final List<SearchGroup<T>> newTopGroups = new ArrayList<SearchGroup<T>>();\n\n      int count = 0;\n\n      while(queue.size() != 0) {\n        final MergedGroup<T> group = queue.pollFirst();\n        group.processed = true;\n        //System.out.println(\"  pop: shards=\" + group.shards + \" group=\" + (group.groupValue == null ? \"null\" : (((BytesRef) group.groupValue).utf8ToString())) + \" sortValues=\" + Arrays.toString(group.topValues));\n        if (count++ >= offset) {\n          final SearchGroup<T> newGroup = new SearchGroup<T>();\n          newGroup.groupValue = group.groupValue;\n          newGroup.sortValues = group.topValues;\n          newTopGroups.add(newGroup);\n          if (newTopGroups.size() == topN) {\n            break;\n          }\n        //} else {\n        // System.out.println(\"    skip < offset\");\n        }\n\n        // Advance all iters in this group:\n        for(ShardIter<T> shardIter : group.shards) {\n          updateNextGroup(maxQueueSize, shardIter);\n        }\n      }\n\n      if (newTopGroups.size() == 0) {\n        return null;\n      } else {\n        return newTopGroups;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"341fa5edecbe460c9e15d78786c68e3168ba1268","date":1467114131,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#merge(List[Collection[SearchGroup[T]]],int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#merge(List[Collection[SearchGroup[T]]],int,int).mjava","sourceNew":"    public Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> shards, int offset, int topN) {\n\n      final int maxQueueSize = offset + topN;\n\n      //System.out.println(\"merge\");\n      // Init queue:\n      for(int shardIDX=0;shardIDX<shards.size();shardIDX++) {\n        final Collection<SearchGroup<T>> shard = shards.get(shardIDX);\n        if (!shard.isEmpty()) {\n          //System.out.println(\"  insert shard=\" + shardIDX);\n          updateNextGroup(maxQueueSize, new ShardIter<>(shard, shardIDX));\n        }\n      }\n\n      // Pull merged topN groups:\n      final List<SearchGroup<T>> newTopGroups = new ArrayList<>(topN);\n\n      int count = 0;\n\n      while(!queue.isEmpty()) {\n        final MergedGroup<T> group = queue.pollFirst();\n        group.processed = true;\n        //System.out.println(\"  pop: shards=\" + group.shards + \" group=\" + (group.groupValue == null ? \"null\" : (((BytesRef) group.groupValue).utf8ToString())) + \" sortValues=\" + Arrays.toString(group.topValues));\n        if (count++ >= offset) {\n          final SearchGroup<T> newGroup = new SearchGroup<>();\n          newGroup.groupValue = group.groupValue;\n          newGroup.sortValues = group.topValues;\n          newTopGroups.add(newGroup);\n          if (newTopGroups.size() == topN) {\n            break;\n          }\n        //} else {\n        // System.out.println(\"    skip < offset\");\n        }\n\n        // Advance all iters in this group:\n        for(ShardIter<T> shardIter : group.shards) {\n          updateNextGroup(maxQueueSize, shardIter);\n        }\n      }\n\n      if (newTopGroups.isEmpty()) {\n        return null;\n      } else {\n        return newTopGroups;\n      }\n    }\n\n","sourceOld":"    public Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> shards, int offset, int topN) {\n\n      final int maxQueueSize = offset + topN;\n\n      //System.out.println(\"merge\");\n      // Init queue:\n      for(int shardIDX=0;shardIDX<shards.size();shardIDX++) {\n        final Collection<SearchGroup<T>> shard = shards.get(shardIDX);\n        if (!shard.isEmpty()) {\n          //System.out.println(\"  insert shard=\" + shardIDX);\n          updateNextGroup(maxQueueSize, new ShardIter<>(shard, shardIDX));\n        }\n      }\n\n      // Pull merged topN groups:\n      final List<SearchGroup<T>> newTopGroups = new ArrayList<>();\n\n      int count = 0;\n\n      while(queue.size() != 0) {\n        final MergedGroup<T> group = queue.pollFirst();\n        group.processed = true;\n        //System.out.println(\"  pop: shards=\" + group.shards + \" group=\" + (group.groupValue == null ? \"null\" : (((BytesRef) group.groupValue).utf8ToString())) + \" sortValues=\" + Arrays.toString(group.topValues));\n        if (count++ >= offset) {\n          final SearchGroup<T> newGroup = new SearchGroup<>();\n          newGroup.groupValue = group.groupValue;\n          newGroup.sortValues = group.topValues;\n          newTopGroups.add(newGroup);\n          if (newTopGroups.size() == topN) {\n            break;\n          }\n        //} else {\n        // System.out.println(\"    skip < offset\");\n        }\n\n        // Advance all iters in this group:\n        for(ShardIter<T> shardIter : group.shards) {\n          updateNextGroup(maxQueueSize, shardIter);\n        }\n      }\n\n      if (newTopGroups.size() == 0) {\n        return null;\n      } else {\n        return newTopGroups;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#merge(List[Collection[SearchGroup[T]]],int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#merge(List[Collection[SearchGroup[T]]],int,int).mjava","sourceNew":"    public Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> shards, int offset, int topN) {\n\n      final int maxQueueSize = offset + topN;\n\n      //System.out.println(\"merge\");\n      // Init queue:\n      for(int shardIDX=0;shardIDX<shards.size();shardIDX++) {\n        final Collection<SearchGroup<T>> shard = shards.get(shardIDX);\n        if (!shard.isEmpty()) {\n          //System.out.println(\"  insert shard=\" + shardIDX);\n          updateNextGroup(maxQueueSize, new ShardIter<>(shard, shardIDX));\n        }\n      }\n\n      // Pull merged topN groups:\n      final List<SearchGroup<T>> newTopGroups = new ArrayList<>(topN);\n\n      int count = 0;\n\n      while(!queue.isEmpty()) {\n        final MergedGroup<T> group = queue.pollFirst();\n        group.processed = true;\n        //System.out.println(\"  pop: shards=\" + group.shards + \" group=\" + (group.groupValue == null ? \"null\" : (((BytesRef) group.groupValue).utf8ToString())) + \" sortValues=\" + Arrays.toString(group.topValues));\n        if (count++ >= offset) {\n          final SearchGroup<T> newGroup = new SearchGroup<>();\n          newGroup.groupValue = group.groupValue;\n          newGroup.sortValues = group.topValues;\n          newTopGroups.add(newGroup);\n          if (newTopGroups.size() == topN) {\n            break;\n          }\n        //} else {\n        // System.out.println(\"    skip < offset\");\n        }\n\n        // Advance all iters in this group:\n        for(ShardIter<T> shardIter : group.shards) {\n          updateNextGroup(maxQueueSize, shardIter);\n        }\n      }\n\n      if (newTopGroups.isEmpty()) {\n        return null;\n      } else {\n        return newTopGroups;\n      }\n    }\n\n","sourceOld":"    public Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> shards, int offset, int topN) {\n\n      final int maxQueueSize = offset + topN;\n\n      //System.out.println(\"merge\");\n      // Init queue:\n      for(int shardIDX=0;shardIDX<shards.size();shardIDX++) {\n        final Collection<SearchGroup<T>> shard = shards.get(shardIDX);\n        if (!shard.isEmpty()) {\n          //System.out.println(\"  insert shard=\" + shardIDX);\n          updateNextGroup(maxQueueSize, new ShardIter<>(shard, shardIDX));\n        }\n      }\n\n      // Pull merged topN groups:\n      final List<SearchGroup<T>> newTopGroups = new ArrayList<>();\n\n      int count = 0;\n\n      while(queue.size() != 0) {\n        final MergedGroup<T> group = queue.pollFirst();\n        group.processed = true;\n        //System.out.println(\"  pop: shards=\" + group.shards + \" group=\" + (group.groupValue == null ? \"null\" : (((BytesRef) group.groupValue).utf8ToString())) + \" sortValues=\" + Arrays.toString(group.topValues));\n        if (count++ >= offset) {\n          final SearchGroup<T> newGroup = new SearchGroup<>();\n          newGroup.groupValue = group.groupValue;\n          newGroup.sortValues = group.topValues;\n          newTopGroups.add(newGroup);\n          if (newTopGroups.size() == topN) {\n            break;\n          }\n        //} else {\n        // System.out.println(\"    skip < offset\");\n        }\n\n        // Advance all iters in this group:\n        for(ShardIter<T> shardIter : group.shards) {\n          updateNextGroup(maxQueueSize, shardIter);\n        }\n      }\n\n      if (newTopGroups.size() == 0) {\n        return null;\n      } else {\n        return newTopGroups;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"341fa5edecbe460c9e15d78786c68e3168ba1268":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","341fa5edecbe460c9e15d78786c68e3168ba1268"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["341fa5edecbe460c9e15d78786c68e3168ba1268"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["341fa5edecbe460c9e15d78786c68e3168ba1268","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"341fa5edecbe460c9e15d78786c68e3168ba1268":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}