{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","commits":[{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","pathOld":"/dev/null","sourceNew":"  public synchronized void createSystemCollection() throws IOException {\n    try {\n      if (simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n        return;\n      }\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, \"1\",\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\"\n      );\n      simCreateCollection(props, new NamedList());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad60b6945c360ff89899d716d9cdec8dd674e2a0","date":1528114819,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","sourceNew":"  public void createSystemCollection() throws IOException {\n    try {\n      if (simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n        return;\n      }\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, \"1\",\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\",\n          CommonAdminParams.WAIT_FOR_FINAL_STATE, \"true\"\n      );\n      simCreateCollection(props, new NamedList());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public synchronized void createSystemCollection() throws IOException {\n    try {\n      if (simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n        return;\n      }\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, \"1\",\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\"\n      );\n      simCreateCollection(props, new NamedList());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","sourceNew":"  public void createSystemCollection() throws IOException {\n    try {\n      if (simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n        return;\n      }\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, \"1\",\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\",\n          CommonAdminParams.WAIT_FOR_FINAL_STATE, \"true\"\n      );\n      simCreateCollection(props, new NamedList());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public synchronized void createSystemCollection() throws IOException {\n    try {\n      if (simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n        return;\n      }\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, \"1\",\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\"\n      );\n      simCreateCollection(props, new NamedList());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","sourceNew":"  public void createSystemCollection() throws IOException {\n    try {\n      if (simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n        return;\n      }\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, \"1\",\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\",\n          CommonAdminParams.WAIT_FOR_FINAL_STATE, \"true\"\n      );\n      simCreateCollection(props, new NamedList());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public synchronized void createSystemCollection() throws IOException {\n    try {\n      if (simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n        return;\n      }\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, \"1\",\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\"\n      );\n      simCreateCollection(props, new NamedList());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","sourceNew":"  public void createSystemCollection() throws IOException {\n    try {\n      if (simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n        return;\n      }\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, \"1\",\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\",\n          CommonAdminParams.WAIT_FOR_FINAL_STATE, \"true\"\n      );\n      simCreateCollection(props, new NamedList());\n      CloudTestUtils.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL, 20, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1, false, true));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void createSystemCollection() throws IOException {\n    try {\n      if (simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n        return;\n      }\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, \"1\",\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\",\n          CommonAdminParams.WAIT_FOR_FINAL_STATE, \"true\"\n      );\n      simCreateCollection(props, new NamedList());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","sourceNew":"  public void createSystemCollection() throws IOException {\n    try {\n      if (colShardReplicaMap.containsKey(CollectionAdminParams.SYSTEM_COLL)) {\n        return;\n      }\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, \"1\",\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\",\n          CommonAdminParams.WAIT_FOR_FINAL_STATE, \"true\"\n      );\n      simCreateCollection(props, new NamedList());\n      CloudTestUtils.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL, 20, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1, false, true));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void createSystemCollection() throws IOException {\n    try {\n      if (simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n        return;\n      }\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, \"1\",\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\",\n          CommonAdminParams.WAIT_FOR_FINAL_STATE, \"true\"\n      );\n      simCreateCollection(props, new NamedList());\n      CloudTestUtils.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL, 20, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1, false, true));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8254aa20264eb7a88d556bbe0346667937ed9c2a","date":1538494545,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","sourceNew":"  public synchronized void createSystemCollection() throws IOException {\n    try {\n      if (colShardReplicaMap.containsKey(CollectionAdminParams.SYSTEM_COLL)) {\n        return;\n      }\n      String repFactor = String.valueOf(Math.min(3, liveNodes.size()));\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, repFactor,\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\",\n          CommonAdminParams.WAIT_FOR_FINAL_STATE, \"true\"\n      );\n      simCreateCollection(props, new NamedList());\n      CloudTestUtils.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL, 20, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, Integer.parseInt(repFactor), false, true));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void createSystemCollection() throws IOException {\n    try {\n      if (colShardReplicaMap.containsKey(CollectionAdminParams.SYSTEM_COLL)) {\n        return;\n      }\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, \"1\",\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\",\n          CommonAdminParams.WAIT_FOR_FINAL_STATE, \"true\"\n      );\n      simCreateCollection(props, new NamedList());\n      CloudTestUtils.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL, 20, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1, false, true));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","sourceNew":"  public void createSystemCollection() throws IOException {\n    try {\n\n      synchronized (this) {\n        if (colShardReplicaMap.containsKey(CollectionAdminParams.SYSTEM_COLL)) {\n          return;\n        }\n      }\n      String repFactor = String.valueOf(Math.min(3, liveNodes.size()));\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, repFactor,\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\",\n          CommonAdminParams.WAIT_FOR_FINAL_STATE, \"true\");\n      simCreateCollection(props, new NamedList());\n      CloudTestUtils.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL, 90, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, Integer.parseInt(repFactor), false, true));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public synchronized void createSystemCollection() throws IOException {\n    try {\n      if (colShardReplicaMap.containsKey(CollectionAdminParams.SYSTEM_COLL)) {\n        return;\n      }\n      String repFactor = String.valueOf(Math.min(3, liveNodes.size()));\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, repFactor,\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\",\n          CommonAdminParams.WAIT_FOR_FINAL_STATE, \"true\"\n      );\n      simCreateCollection(props, new NamedList());\n      CloudTestUtils.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL, 20, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, Integer.parseInt(repFactor), false, true));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e","8254aa20264eb7a88d556bbe0346667937ed9c2a","4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","042b92cf48996255bedb0c3c4bf772d7e06e4dea","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00c95d2d1a0288835788dbffb1b73ab5852c7154","date":1544457778,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","sourceNew":"  public void createSystemCollection() throws IOException {\n    try {\n\n      synchronized (this) {\n        if (colShardReplicaMap.containsKey(CollectionAdminParams.SYSTEM_COLL)) {\n          return;\n        }\n      }\n      String repFactor = String.valueOf(Math.min(3, liveNodes.size()));\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, repFactor,\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\",\n          CommonAdminParams.WAIT_FOR_FINAL_STATE, \"true\");\n      simCreateCollection(props, new NamedList());\n      CloudTestUtils.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, Integer.parseInt(repFactor), false, true));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void createSystemCollection() throws IOException {\n    try {\n\n      synchronized (this) {\n        if (colShardReplicaMap.containsKey(CollectionAdminParams.SYSTEM_COLL)) {\n          return;\n        }\n      }\n      String repFactor = String.valueOf(Math.min(3, liveNodes.size()));\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, repFactor,\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\",\n          CommonAdminParams.WAIT_FOR_FINAL_STATE, \"true\");\n      simCreateCollection(props, new NamedList());\n      CloudTestUtils.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL, 90, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, Integer.parseInt(repFactor), false, true));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","sourceNew":"  public void createSystemCollection() throws IOException {\n    try {\n\n      synchronized (this) {\n        if (colShardReplicaMap.containsKey(CollectionAdminParams.SYSTEM_COLL)) {\n          return;\n        }\n      }\n      String repFactor = String.valueOf(Math.min(3, liveNodes.size()));\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, repFactor,\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\",\n          CommonAdminParams.WAIT_FOR_FINAL_STATE, \"true\");\n      simCreateCollection(props, new NamedList());\n      CloudUtil.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(1, Integer.parseInt(repFactor), false, true));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void createSystemCollection() throws IOException {\n    try {\n\n      synchronized (this) {\n        if (colShardReplicaMap.containsKey(CollectionAdminParams.SYSTEM_COLL)) {\n          return;\n        }\n      }\n      String repFactor = String.valueOf(Math.min(3, liveNodes.size()));\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, repFactor,\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\",\n          CommonAdminParams.WAIT_FOR_FINAL_STATE, \"true\");\n      simCreateCollection(props, new NamedList());\n      CloudTestUtils.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, Integer.parseInt(repFactor), false, true));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"00c95d2d1a0288835788dbffb1b73ab5852c7154":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"8254aa20264eb7a88d556bbe0346667937ed9c2a":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["00c95d2d1a0288835788dbffb1b73ab5852c7154"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"f592209545c71895260367152601e9200399776d":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["b70042a8a492f7054d480ccdd2be9796510d4327","ad60b6945c360ff89899d716d9cdec8dd674e2a0","f592209545c71895260367152601e9200399776d"],"00c95d2d1a0288835788dbffb1b73ab5852c7154":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["00c95d2d1a0288835788dbffb1b73ab5852c7154"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"8254aa20264eb7a88d556bbe0346667937ed9c2a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["042b92cf48996255bedb0c3c4bf772d7e06e4dea","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}