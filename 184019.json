{"path":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresFromEmptyContainer().mjava","commits":[{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresFromEmptyContainer().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","sourceNew":"  @Test\n  public void testCoreInitFailuresFromEmptyContainer() throws Exception {\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // ----\n    // init the CoreContainer\n    CoreContainer cc = init(CONFIGSETS_SOLR_XML);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n          0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n        0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n\n    }\n\n    cc.shutdown();\n  }\n\n","sourceOld":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.UTF_8);\n\n    // ----\n    // init the CoreContainer\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n      \n    }\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresFromEmptyContainer().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresFromEmptyContainer().mjava","sourceNew":"  @Test\n  public void testCoreInitFailuresFromEmptyContainer() throws Exception {\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // ----\n    // init the CoreContainer\n    CoreContainer cc = init(CONFIGSETS_SOLR_XML);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a configset that doesn't exist\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(\"bogus\", ImmutableMap.of(\"configSet\", \"bogus_path\"));\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      Throwable cause = Throwables.getRootCause(e);\n      assertTrue(\"init exception doesn't mention bogus dir: \" + cause.getMessage(),\n          0 < cause.getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      String cause = Throwables.getRootCause(ex).getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n\n    }\n\n    cc.shutdown();\n  }\n\n","sourceOld":"  @Test\n  public void testCoreInitFailuresFromEmptyContainer() throws Exception {\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // ----\n    // init the CoreContainer\n    CoreContainer cc = init(CONFIGSETS_SOLR_XML);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n          0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n        0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n\n    }\n\n    cc.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresFromEmptyContainer().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresFromEmptyContainer().mjava","sourceNew":"  @Test\n  public void testCoreInitFailuresFromEmptyContainer() throws Exception {\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // ----\n    // init the CoreContainer\n    CoreContainer cc = init(CONFIGSETS_SOLR_XML);\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a configset that doesn't exist\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(\"bogus\", ImmutableMap.of(\"configSet\", \"bogus_path\"));\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      Throwable cause = Throwables.getRootCause(e);\n      assertTrue(\"init exception doesn't mention bogus dir: \" + cause.getMessage(),\n          0 < cause.getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      String cause = Throwables.getRootCause(ex).getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n\n    }\n\n    cc.shutdown();\n  }\n\n","sourceOld":"  @Test\n  public void testCoreInitFailuresFromEmptyContainer() throws Exception {\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // ----\n    // init the CoreContainer\n    CoreContainer cc = init(CONFIGSETS_SOLR_XML);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a configset that doesn't exist\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(\"bogus\", ImmutableMap.of(\"configSet\", \"bogus_path\"));\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      Throwable cause = Throwables.getRootCause(e);\n      assertTrue(\"init exception doesn't mention bogus dir: \" + cause.getMessage(),\n          0 < cause.getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      String cause = Throwables.getRootCause(ex).getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n\n    }\n\n    cc.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresFromEmptyContainer().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresFromEmptyContainer().mjava","sourceNew":"  @Test\n  public void testCoreInitFailuresFromEmptyContainer() throws Exception {\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // ----\n    // init the CoreContainer\n    CoreContainer cc = init(CONFIGSETS_SOLR_XML);\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a configset that doesn't exist\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(\"bogus\", ImmutableMap.of(\"configSet\", \"bogus_path\"));\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      Throwable cause = Throwables.getRootCause(e);\n      assertTrue(\"init exception doesn't mention bogus dir: \" + cause.getMessage(),\n          0 < cause.getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      String cause = Throwables.getRootCause(ex).getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n\n    }\n\n    cc.shutdown();\n  }\n\n","sourceOld":"  @Test\n  public void testCoreInitFailuresFromEmptyContainer() throws Exception {\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // ----\n    // init the CoreContainer\n    CoreContainer cc = init(CONFIGSETS_SOLR_XML);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a configset that doesn't exist\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(\"bogus\", ImmutableMap.of(\"configSet\", \"bogus_path\"));\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      Throwable cause = Throwables.getRootCause(e);\n      assertTrue(\"init exception doesn't mention bogus dir: \" + cause.getMessage(),\n          0 < cause.getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      String cause = Throwables.getRootCause(ex).getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n\n    }\n\n    cc.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68cb00b5f16300efa7bd172de723d9ac91d38cc2","date":1543702774,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresFromEmptyContainer().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresFromEmptyContainer().mjava","sourceNew":"  @Test\n  public void testCoreInitFailuresFromEmptyContainer() throws Exception {\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // ----\n    // init the CoreContainer\n    CoreContainer cc = init(CONFIGSETS_SOLR_XML);\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a configset that doesn't exist\n    ignoreException(Pattern.quote(\"bogus_path\"));\n    SolrException thrown = expectThrows(SolrException.class, () -> {\n      cc.create(\"bogus\", ImmutableMap.of(\"configSet\", \"bogus_path\"));\n    });\n    Throwable rootCause = Throwables.getRootCause(thrown);\n    assertTrue(\"init exception doesn't mention bogus dir: \" + rootCause.getMessage(),\n        0 < rootCause.getMessage().indexOf(\"bogus_path\"));\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    thrown = expectThrows(SolrException.class, () -> {\n      SolrCore c = cc.getCore(\"bogus\");\n    });\n    assertEquals(500, thrown.code());\n    String cause = Throwables.getRootCause(thrown).getMessage();\n    assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n        0 < cause.indexOf(\"bogus_path\"));\n\n    cc.shutdown();\n  }\n\n","sourceOld":"  @Test\n  public void testCoreInitFailuresFromEmptyContainer() throws Exception {\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // ----\n    // init the CoreContainer\n    CoreContainer cc = init(CONFIGSETS_SOLR_XML);\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a configset that doesn't exist\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(\"bogus\", ImmutableMap.of(\"configSet\", \"bogus_path\"));\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      Throwable cause = Throwables.getRootCause(e);\n      assertTrue(\"init exception doesn't mention bogus dir: \" + cause.getMessage(),\n          0 < cause.getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      String cause = Throwables.getRootCause(ex).getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n\n    }\n\n    cc.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68cb00b5f16300efa7bd172de723d9ac91d38cc2":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68cb00b5f16300efa7bd172de723d9ac91d38cc2"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"68cb00b5f16300efa7bd172de723d9ac91d38cc2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["68cb00b5f16300efa7bd172de723d9ac91d38cc2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}