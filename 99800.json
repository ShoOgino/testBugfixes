{"path":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#testToString().mjava","commits":[{"id":"5a412a7808b2815566cb17117ebe6638112b9a31","date":1484916151,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#testToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testToString() {\n    Query q1 = SortedNumericDocValuesField.newRangeQuery(\"foo\", 3, 5);\n    assertEquals(\"foo:[3 TO 5]\", q1.toString());\n    assertEquals(\"[3 TO 5]\", q1.toString(\"foo\"));\n    assertEquals(\"foo:[3 TO 5]\", q1.toString(\"bar\"));\n\n    Query q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), true, true);\n    assertEquals(\"foo:[[62 61 72] TO [62 61 7a]]\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), false, true);\n    assertEquals(\"foo:{[62 61 72] TO [62 61 7a]]\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), false, false);\n    assertEquals(\"foo:{[62 61 72] TO [62 61 7a]}\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), null, true, true);\n    assertEquals(\"foo:[[62 61 72] TO *}\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", null, new BytesRef(\"baz\"), true, true);\n    assertEquals(\"foo:{* TO [62 61 7a]]\", q2.toString());\n    assertEquals(\"{* TO [62 61 7a]]\", q2.toString(\"foo\"));\n    assertEquals(\"foo:{* TO [62 61 7a]]\", q2.toString(\"bar\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b22152b9e1a55aed5f1510ecb2312a0be7056400"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#testToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testToString() {\n    Query q1 = SortedNumericDocValuesField.newRangeQuery(\"foo\", 3, 5);\n    assertEquals(\"foo:[3 TO 5]\", q1.toString());\n    assertEquals(\"[3 TO 5]\", q1.toString(\"foo\"));\n    assertEquals(\"foo:[3 TO 5]\", q1.toString(\"bar\"));\n\n    Query q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), true, true);\n    assertEquals(\"foo:[[62 61 72] TO [62 61 7a]]\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), false, true);\n    assertEquals(\"foo:{[62 61 72] TO [62 61 7a]]\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), false, false);\n    assertEquals(\"foo:{[62 61 72] TO [62 61 7a]}\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), null, true, true);\n    assertEquals(\"foo:[[62 61 72] TO *}\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", null, new BytesRef(\"baz\"), true, true);\n    assertEquals(\"foo:{* TO [62 61 7a]]\", q2.toString());\n    assertEquals(\"{* TO [62 61 7a]]\", q2.toString(\"foo\"));\n    assertEquals(\"foo:{* TO [62 61 7a]]\", q2.toString(\"bar\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9970073fd3c04efd7374f975e45a61084b169ce9","date":1499179453,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#testToString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#testToString().mjava","sourceNew":"  public void testToString() {\n    Query q1 = SortedNumericDocValuesField.newSlowRangeQuery(\"foo\", 3, 5);\n    assertEquals(\"foo:[3 TO 5]\", q1.toString());\n    assertEquals(\"[3 TO 5]\", q1.toString(\"foo\"));\n    assertEquals(\"foo:[3 TO 5]\", q1.toString(\"bar\"));\n\n    Query q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), true, true);\n    assertEquals(\"foo:[[62 61 72] TO [62 61 7a]]\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), false, true);\n    assertEquals(\"foo:{[62 61 72] TO [62 61 7a]]\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), false, false);\n    assertEquals(\"foo:{[62 61 72] TO [62 61 7a]}\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), null, true, true);\n    assertEquals(\"foo:[[62 61 72] TO *}\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", null, new BytesRef(\"baz\"), true, true);\n    assertEquals(\"foo:{* TO [62 61 7a]]\", q2.toString());\n    assertEquals(\"{* TO [62 61 7a]]\", q2.toString(\"foo\"));\n    assertEquals(\"foo:{* TO [62 61 7a]]\", q2.toString(\"bar\"));\n  }\n\n","sourceOld":"  public void testToString() {\n    Query q1 = SortedNumericDocValuesField.newRangeQuery(\"foo\", 3, 5);\n    assertEquals(\"foo:[3 TO 5]\", q1.toString());\n    assertEquals(\"[3 TO 5]\", q1.toString(\"foo\"));\n    assertEquals(\"foo:[3 TO 5]\", q1.toString(\"bar\"));\n\n    Query q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), true, true);\n    assertEquals(\"foo:[[62 61 72] TO [62 61 7a]]\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), false, true);\n    assertEquals(\"foo:{[62 61 72] TO [62 61 7a]]\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), false, false);\n    assertEquals(\"foo:{[62 61 72] TO [62 61 7a]}\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), null, true, true);\n    assertEquals(\"foo:[[62 61 72] TO *}\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", null, new BytesRef(\"baz\"), true, true);\n    assertEquals(\"foo:{* TO [62 61 7a]]\", q2.toString());\n    assertEquals(\"{* TO [62 61 7a]]\", q2.toString(\"foo\"));\n    assertEquals(\"foo:{* TO [62 61 7a]]\", q2.toString(\"bar\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#testToString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#testToString().mjava","sourceNew":"  public void testToString() {\n    Query q1 = SortedNumericDocValuesField.newSlowRangeQuery(\"foo\", 3, 5);\n    assertEquals(\"foo:[3 TO 5]\", q1.toString());\n    assertEquals(\"[3 TO 5]\", q1.toString(\"foo\"));\n    assertEquals(\"foo:[3 TO 5]\", q1.toString(\"bar\"));\n\n    Query q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), true, true);\n    assertEquals(\"foo:[[62 61 72] TO [62 61 7a]]\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), false, true);\n    assertEquals(\"foo:{[62 61 72] TO [62 61 7a]]\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), false, false);\n    assertEquals(\"foo:{[62 61 72] TO [62 61 7a]}\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), null, true, true);\n    assertEquals(\"foo:[[62 61 72] TO *}\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", null, new BytesRef(\"baz\"), true, true);\n    assertEquals(\"foo:{* TO [62 61 7a]]\", q2.toString());\n    assertEquals(\"{* TO [62 61 7a]]\", q2.toString(\"foo\"));\n    assertEquals(\"foo:{* TO [62 61 7a]]\", q2.toString(\"bar\"));\n  }\n\n","sourceOld":"  public void testToString() {\n    Query q1 = SortedNumericDocValuesField.newRangeQuery(\"foo\", 3, 5);\n    assertEquals(\"foo:[3 TO 5]\", q1.toString());\n    assertEquals(\"[3 TO 5]\", q1.toString(\"foo\"));\n    assertEquals(\"foo:[3 TO 5]\", q1.toString(\"bar\"));\n\n    Query q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), true, true);\n    assertEquals(\"foo:[[62 61 72] TO [62 61 7a]]\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), false, true);\n    assertEquals(\"foo:{[62 61 72] TO [62 61 7a]]\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), false, false);\n    assertEquals(\"foo:{[62 61 72] TO [62 61 7a]}\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), null, true, true);\n    assertEquals(\"foo:[[62 61 72] TO *}\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", null, new BytesRef(\"baz\"), true, true);\n    assertEquals(\"foo:{* TO [62 61 7a]]\", q2.toString());\n    assertEquals(\"{* TO [62 61 7a]]\", q2.toString(\"foo\"));\n    assertEquals(\"foo:{* TO [62 61 7a]]\", q2.toString(\"bar\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b22152b9e1a55aed5f1510ecb2312a0be7056400","date":1500556211,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#testToString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#testToString().mjava","sourceNew":"  public void testToString() {\n    Query q1 = SortedNumericDocValuesField.newSlowRangeQuery(\"foo\", 3, 5);\n    assertEquals(\"foo:[3 TO 5]\", q1.toString());\n    assertEquals(\"[3 TO 5]\", q1.toString(\"foo\"));\n    assertEquals(\"foo:[3 TO 5]\", q1.toString(\"bar\"));\n\n    Query q2 = SortedSetDocValuesField.newSlowRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), true, true);\n    assertEquals(\"foo:[[62 61 72] TO [62 61 7a]]\", q2.toString());\n    q2 = SortedSetDocValuesField.newSlowRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), false, true);\n    assertEquals(\"foo:{[62 61 72] TO [62 61 7a]]\", q2.toString());\n    q2 = SortedSetDocValuesField.newSlowRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), false, false);\n    assertEquals(\"foo:{[62 61 72] TO [62 61 7a]}\", q2.toString());\n    q2 = SortedSetDocValuesField.newSlowRangeQuery(\"foo\", new BytesRef(\"bar\"), null, true, true);\n    assertEquals(\"foo:[[62 61 72] TO *}\", q2.toString());\n    q2 = SortedSetDocValuesField.newSlowRangeQuery(\"foo\", null, new BytesRef(\"baz\"), true, true);\n    assertEquals(\"foo:{* TO [62 61 7a]]\", q2.toString());\n    assertEquals(\"{* TO [62 61 7a]]\", q2.toString(\"foo\"));\n    assertEquals(\"foo:{* TO [62 61 7a]]\", q2.toString(\"bar\"));\n  }\n\n","sourceOld":"  public void testToString() {\n    Query q1 = SortedNumericDocValuesField.newSlowRangeQuery(\"foo\", 3, 5);\n    assertEquals(\"foo:[3 TO 5]\", q1.toString());\n    assertEquals(\"[3 TO 5]\", q1.toString(\"foo\"));\n    assertEquals(\"foo:[3 TO 5]\", q1.toString(\"bar\"));\n\n    Query q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), true, true);\n    assertEquals(\"foo:[[62 61 72] TO [62 61 7a]]\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), false, true);\n    assertEquals(\"foo:{[62 61 72] TO [62 61 7a]]\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), false, false);\n    assertEquals(\"foo:{[62 61 72] TO [62 61 7a]}\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), null, true, true);\n    assertEquals(\"foo:[[62 61 72] TO *}\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", null, new BytesRef(\"baz\"), true, true);\n    assertEquals(\"foo:{* TO [62 61 7a]]\", q2.toString());\n    assertEquals(\"{* TO [62 61 7a]]\", q2.toString(\"foo\"));\n    assertEquals(\"foo:{* TO [62 61 7a]]\", q2.toString(\"bar\"));\n  }\n\n","bugFix":["5a412a7808b2815566cb17117ebe6638112b9a31"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#testToString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#testToString().mjava","sourceNew":"  public void testToString() {\n    Query q1 = SortedNumericDocValuesField.newSlowRangeQuery(\"foo\", 3, 5);\n    assertEquals(\"foo:[3 TO 5]\", q1.toString());\n    assertEquals(\"[3 TO 5]\", q1.toString(\"foo\"));\n    assertEquals(\"foo:[3 TO 5]\", q1.toString(\"bar\"));\n\n    Query q2 = SortedSetDocValuesField.newSlowRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), true, true);\n    assertEquals(\"foo:[[62 61 72] TO [62 61 7a]]\", q2.toString());\n    q2 = SortedSetDocValuesField.newSlowRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), false, true);\n    assertEquals(\"foo:{[62 61 72] TO [62 61 7a]]\", q2.toString());\n    q2 = SortedSetDocValuesField.newSlowRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), false, false);\n    assertEquals(\"foo:{[62 61 72] TO [62 61 7a]}\", q2.toString());\n    q2 = SortedSetDocValuesField.newSlowRangeQuery(\"foo\", new BytesRef(\"bar\"), null, true, true);\n    assertEquals(\"foo:[[62 61 72] TO *}\", q2.toString());\n    q2 = SortedSetDocValuesField.newSlowRangeQuery(\"foo\", null, new BytesRef(\"baz\"), true, true);\n    assertEquals(\"foo:{* TO [62 61 7a]]\", q2.toString());\n    assertEquals(\"{* TO [62 61 7a]]\", q2.toString(\"foo\"));\n    assertEquals(\"foo:{* TO [62 61 7a]]\", q2.toString(\"bar\"));\n  }\n\n","sourceOld":"  public void testToString() {\n    Query q1 = SortedNumericDocValuesField.newSlowRangeQuery(\"foo\", 3, 5);\n    assertEquals(\"foo:[3 TO 5]\", q1.toString());\n    assertEquals(\"[3 TO 5]\", q1.toString(\"foo\"));\n    assertEquals(\"foo:[3 TO 5]\", q1.toString(\"bar\"));\n\n    Query q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), true, true);\n    assertEquals(\"foo:[[62 61 72] TO [62 61 7a]]\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), false, true);\n    assertEquals(\"foo:{[62 61 72] TO [62 61 7a]]\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), new BytesRef(\"baz\"), false, false);\n    assertEquals(\"foo:{[62 61 72] TO [62 61 7a]}\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", new BytesRef(\"bar\"), null, true, true);\n    assertEquals(\"foo:[[62 61 72] TO *}\", q2.toString());\n    q2 = SortedSetDocValuesField.newRangeQuery(\"foo\", null, new BytesRef(\"baz\"), true, true);\n    assertEquals(\"foo:{* TO [62 61 7a]]\", q2.toString());\n    assertEquals(\"{* TO [62 61 7a]]\", q2.toString(\"foo\"));\n    assertEquals(\"foo:{* TO [62 61 7a]]\", q2.toString(\"bar\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b22152b9e1a55aed5f1510ecb2312a0be7056400":["9970073fd3c04efd7374f975e45a61084b169ce9"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["5a412a7808b2815566cb17117ebe6638112b9a31","9970073fd3c04efd7374f975e45a61084b169ce9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","b22152b9e1a55aed5f1510ecb2312a0be7056400"],"9970073fd3c04efd7374f975e45a61084b169ce9":["5a412a7808b2815566cb17117ebe6638112b9a31"],"5a412a7808b2815566cb17117ebe6638112b9a31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a412a7808b2815566cb17117ebe6638112b9a31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b22152b9e1a55aed5f1510ecb2312a0be7056400"]},"commit2Childs":{"b22152b9e1a55aed5f1510ecb2312a0be7056400":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a412a7808b2815566cb17117ebe6638112b9a31","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"9970073fd3c04efd7374f975e45a61084b169ce9":["b22152b9e1a55aed5f1510ecb2312a0be7056400","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"5a412a7808b2815566cb17117ebe6638112b9a31":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","9970073fd3c04efd7374f975e45a61084b169ce9","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}