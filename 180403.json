{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.ValidateInfo#validate(String,Object,boolean).mjava","commits":[{"id":"7811b56f2d9e37eb839450d346535c87f1f504c2","date":1502459873,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.ValidateInfo#validate(String,Object,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (type == Double.class) {\n        Double num = parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, (Double) min) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, (Double) max) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && vals != null && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.ValidateInfo#validate(String,Object,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (type == Double.class) {\n        Double num = parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, (Double) min) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, (Double) max) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && vals != null && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.ValidateInfo#validate(String,Object,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (type == Double.class) {\n        Double num = parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, (Double) min) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, (Double) max) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && vals != null && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.ValidateInfo#validate(String,Object,boolean).mjava","sourceNew":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (type == Double.class) {\n        Double num = Clause.parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, (Double) min) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, (Double) max) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = Clause.parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && vals != null && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","sourceOld":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (type == Double.class) {\n        Double num = parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, (Double) min) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, (Double) max) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && vals != null && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7811b56f2d9e37eb839450d346535c87f1f504c2"],"7811b56f2d9e37eb839450d346535c87f1f504c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1bbcda32e5cd37ef61ea1190bacd080308e22070"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"7811b56f2d9e37eb839450d346535c87f1f504c2":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","7811b56f2d9e37eb839450d346535c87f1f504c2","560c18d71dad43d675158783c3840f8c80d6d39c"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"560c18d71dad43d675158783c3840f8c80d6d39c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}