{"path":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream],RTimerTree,HttpServletRequest).mjava","commits":[{"id":"104456f4eeacc857f7e1e6408e1483de8c2bd658","date":1439164522,"type":1,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream],RTimerTree,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream],RTimer,HttpServletRequest).mjava","sourceNew":"  private SolrQueryRequest buildRequestFrom(SolrCore core, SolrParams params, Collection<ContentStream> streams,\n                                            RTimerTree requestTimer, final HttpServletRequest req) throws Exception {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n\n    SolrQueryRequestBase q = new SolrQueryRequestBase(core, params, requestTimer) {\n      @Override\n      public Principal getUserPrincipal() {\n        return req == null ? null : req.getUserPrincipal();\n      }\n    };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","sourceOld":"  private SolrQueryRequest buildRequestFrom(SolrCore core, SolrParams params, Collection<ContentStream> streams,\n                                            RTimer requestTimer, final HttpServletRequest req) throws Exception {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n\n    SolrQueryRequestBase q = new SolrQueryRequestBase(core, params, requestTimer) {\n      @Override\n      public Principal getUserPrincipal() {\n        return req == null ? null : req.getUserPrincipal();\n      }\n    };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream],RTimerTree,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream],RTimerTree,HttpServletRequest).mjava","sourceNew":"  private SolrQueryRequest buildRequestFrom(SolrCore core, SolrParams params, Collection<ContentStream> streams,\n                                            RTimerTree requestTimer, final HttpServletRequest req) throws Exception {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n\n    final HttpSolrCall httpSolrCall = req == null ? null : (HttpSolrCall) req.getAttribute(HttpSolrCall.class.getName());\n    SolrQueryRequestBase q = new SolrQueryRequestBase(core, params, requestTimer) {\n      @Override\n      public Principal getUserPrincipal() {\n        return req == null ? null : req.getUserPrincipal();\n      }\n\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (httpSolrCall != null) {\n          return httpSolrCall.getCommands(validateInput);\n        }\n        return Collections.emptyList();\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        if (httpSolrCall != null && httpSolrCall instanceof V2HttpCall) {\n          return ((V2HttpCall) httpSolrCall).getUrlParts();\n        }\n        return Collections.EMPTY_MAP;\n      }\n\n      @Override\n      public HttpSolrCall getHttpSolrCall() {\n        return httpSolrCall;\n      }\n    };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","sourceOld":"  private SolrQueryRequest buildRequestFrom(SolrCore core, SolrParams params, Collection<ContentStream> streams,\n                                            RTimerTree requestTimer, final HttpServletRequest req) throws Exception {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n\n    SolrQueryRequestBase q = new SolrQueryRequestBase(core, params, requestTimer) {\n      @Override\n      public Principal getUserPrincipal() {\n        return req == null ? null : req.getUserPrincipal();\n      }\n    };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":["bbdd035c502312d32111b9642ba3dbd5c52ee64f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream],RTimerTree,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream],RTimerTree,HttpServletRequest).mjava","sourceNew":"  private SolrQueryRequest buildRequestFrom(SolrCore core, SolrParams params, Collection<ContentStream> streams,\n                                            RTimerTree requestTimer, final HttpServletRequest req) throws Exception {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n\n    final HttpSolrCall httpSolrCall = req == null ? null : (HttpSolrCall) req.getAttribute(HttpSolrCall.class.getName());\n    SolrQueryRequestBase q = new SolrQueryRequestBase(core, params, requestTimer) {\n      @Override\n      public Principal getUserPrincipal() {\n        return req == null ? null : req.getUserPrincipal();\n      }\n\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (httpSolrCall != null) {\n          return httpSolrCall.getCommands(validateInput);\n        }\n        return Collections.emptyList();\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        if (httpSolrCall != null && httpSolrCall instanceof V2HttpCall) {\n          return ((V2HttpCall) httpSolrCall).getUrlParts();\n        }\n        return Collections.EMPTY_MAP;\n      }\n\n      @Override\n      public HttpSolrCall getHttpSolrCall() {\n        return httpSolrCall;\n      }\n    };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","sourceOld":"  private SolrQueryRequest buildRequestFrom(SolrCore core, SolrParams params, Collection<ContentStream> streams,\n                                            RTimerTree requestTimer, final HttpServletRequest req) throws Exception {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n\n    SolrQueryRequestBase q = new SolrQueryRequestBase(core, params, requestTimer) {\n      @Override\n      public Principal getUserPrincipal() {\n        return req == null ? null : req.getUserPrincipal();\n      }\n    };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbdd035c502312d32111b9642ba3dbd5c52ee64f","date":1488346355,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream],RTimerTree,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream],RTimerTree,HttpServletRequest).mjava","sourceNew":"  private SolrQueryRequest buildRequestFrom(SolrCore core, SolrParams params, Collection<ContentStream> streams,\n                                            RTimerTree requestTimer, final HttpServletRequest req) throws Exception {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n\n    final HttpSolrCall httpSolrCall = req == null ? null : (HttpSolrCall) req.getAttribute(HttpSolrCall.class.getName());\n    SolrQueryRequestBase q = new SolrQueryRequestBase(core, params, requestTimer) {\n      @Override\n      public Principal getUserPrincipal() {\n        return req == null ? null : req.getUserPrincipal();\n      }\n\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (httpSolrCall != null) {\n          return httpSolrCall.getCommands(validateInput);\n        }\n        return super.getCommands(validateInput);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        if (httpSolrCall != null && httpSolrCall instanceof V2HttpCall) {\n          return ((V2HttpCall) httpSolrCall).getUrlParts();\n        }\n        return super.getPathTemplateValues();\n      }\n\n      @Override\n      public HttpSolrCall getHttpSolrCall() {\n        return httpSolrCall;\n      }\n    };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","sourceOld":"  private SolrQueryRequest buildRequestFrom(SolrCore core, SolrParams params, Collection<ContentStream> streams,\n                                            RTimerTree requestTimer, final HttpServletRequest req) throws Exception {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n\n    final HttpSolrCall httpSolrCall = req == null ? null : (HttpSolrCall) req.getAttribute(HttpSolrCall.class.getName());\n    SolrQueryRequestBase q = new SolrQueryRequestBase(core, params, requestTimer) {\n      @Override\n      public Principal getUserPrincipal() {\n        return req == null ? null : req.getUserPrincipal();\n      }\n\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (httpSolrCall != null) {\n          return httpSolrCall.getCommands(validateInput);\n        }\n        return Collections.emptyList();\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        if (httpSolrCall != null && httpSolrCall instanceof V2HttpCall) {\n          return ((V2HttpCall) httpSolrCall).getUrlParts();\n        }\n        return Collections.EMPTY_MAP;\n      }\n\n      @Override\n      public HttpSolrCall getHttpSolrCall() {\n        return httpSolrCall;\n      }\n    };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","bugFix":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2238da841c6da38e6ed909d35da8f4c0ea3147b","date":1499346175,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream],RTimerTree,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream],RTimerTree,HttpServletRequest).mjava","sourceNew":"  private SolrQueryRequest buildRequestFrom(SolrCore core, SolrParams params, Collection<ContentStream> streams,\n                                            RTimerTree requestTimer, final HttpServletRequest req) throws Exception {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled. See http://lucene.apache.org/solr/guide/requestdispatcher-in-solrconfig.html for help\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      if( !enableStreamBody ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Stream Body is disabled. See http://lucene.apache.org/solr/guide/requestdispatcher-in-solrconfig.html for help\" );\n      }\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n\n    final HttpSolrCall httpSolrCall = req == null ? null : (HttpSolrCall) req.getAttribute(HttpSolrCall.class.getName());\n    SolrQueryRequestBase q = new SolrQueryRequestBase(core, params, requestTimer) {\n      @Override\n      public Principal getUserPrincipal() {\n        return req == null ? null : req.getUserPrincipal();\n      }\n\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (httpSolrCall != null) {\n          return httpSolrCall.getCommands(validateInput);\n        }\n        return super.getCommands(validateInput);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        if (httpSolrCall != null && httpSolrCall instanceof V2HttpCall) {\n          return ((V2HttpCall) httpSolrCall).getUrlParts();\n        }\n        return super.getPathTemplateValues();\n      }\n\n      @Override\n      public HttpSolrCall getHttpSolrCall() {\n        return httpSolrCall;\n      }\n    };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","sourceOld":"  private SolrQueryRequest buildRequestFrom(SolrCore core, SolrParams params, Collection<ContentStream> streams,\n                                            RTimerTree requestTimer, final HttpServletRequest req) throws Exception {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n\n    final HttpSolrCall httpSolrCall = req == null ? null : (HttpSolrCall) req.getAttribute(HttpSolrCall.class.getName());\n    SolrQueryRequestBase q = new SolrQueryRequestBase(core, params, requestTimer) {\n      @Override\n      public Principal getUserPrincipal() {\n        return req == null ? null : req.getUserPrincipal();\n      }\n\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (httpSolrCall != null) {\n          return httpSolrCall.getCommands(validateInput);\n        }\n        return super.getCommands(validateInput);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        if (httpSolrCall != null && httpSolrCall instanceof V2HttpCall) {\n          return ((V2HttpCall) httpSolrCall).getUrlParts();\n        }\n        return super.getPathTemplateValues();\n      }\n\n      @Override\n      public HttpSolrCall getHttpSolrCall() {\n        return httpSolrCall;\n      }\n    };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream],RTimerTree,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream],RTimerTree,HttpServletRequest).mjava","sourceNew":"  private SolrQueryRequest buildRequestFrom(SolrCore core, SolrParams params, Collection<ContentStream> streams,\n                                            RTimerTree requestTimer, final HttpServletRequest req) throws Exception {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled. See http://lucene.apache.org/solr/guide/requestdispatcher-in-solrconfig.html for help\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      if( !enableStreamBody ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Stream Body is disabled. See http://lucene.apache.org/solr/guide/requestdispatcher-in-solrconfig.html for help\" );\n      }\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n\n    final HttpSolrCall httpSolrCall = req == null ? null : (HttpSolrCall) req.getAttribute(HttpSolrCall.class.getName());\n    SolrQueryRequestBase q = new SolrQueryRequestBase(core, params, requestTimer) {\n      @Override\n      public Principal getUserPrincipal() {\n        return req == null ? null : req.getUserPrincipal();\n      }\n\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (httpSolrCall != null) {\n          return httpSolrCall.getCommands(validateInput);\n        }\n        return super.getCommands(validateInput);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        if (httpSolrCall != null && httpSolrCall instanceof V2HttpCall) {\n          return ((V2HttpCall) httpSolrCall).getUrlParts();\n        }\n        return super.getPathTemplateValues();\n      }\n\n      @Override\n      public HttpSolrCall getHttpSolrCall() {\n        return httpSolrCall;\n      }\n    };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","sourceOld":"  private SolrQueryRequest buildRequestFrom(SolrCore core, SolrParams params, Collection<ContentStream> streams,\n                                            RTimerTree requestTimer, final HttpServletRequest req) throws Exception {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n\n    final HttpSolrCall httpSolrCall = req == null ? null : (HttpSolrCall) req.getAttribute(HttpSolrCall.class.getName());\n    SolrQueryRequestBase q = new SolrQueryRequestBase(core, params, requestTimer) {\n      @Override\n      public Principal getUserPrincipal() {\n        return req == null ? null : req.getUserPrincipal();\n      }\n\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (httpSolrCall != null) {\n          return httpSolrCall.getCommands(validateInput);\n        }\n        return super.getCommands(validateInput);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        if (httpSolrCall != null && httpSolrCall instanceof V2HttpCall) {\n          return ((V2HttpCall) httpSolrCall).getUrlParts();\n        }\n        return super.getPathTemplateValues();\n      }\n\n      @Override\n      public HttpSolrCall getHttpSolrCall() {\n        return httpSolrCall;\n      }\n    };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2238da841c6da38e6ed909d35da8f4c0ea3147b":["bbdd035c502312d32111b9642ba3dbd5c52ee64f"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["104456f4eeacc857f7e1e6408e1483de8c2bd658"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["104456f4eeacc857f7e1e6408e1483de8c2bd658","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"e73d8d559120669b47658108d818b637df5456ea":["bbdd035c502312d32111b9642ba3dbd5c52ee64f","e2238da841c6da38e6ed909d35da8f4c0ea3147b"],"bbdd035c502312d32111b9642ba3dbd5c52ee64f":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"104456f4eeacc857f7e1e6408e1483de8c2bd658":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e2238da841c6da38e6ed909d35da8f4c0ea3147b"]},"commit2Childs":{"e2238da841c6da38e6ed909d35da8f4c0ea3147b":["e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","bbdd035c502312d32111b9642ba3dbd5c52ee64f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["104456f4eeacc857f7e1e6408e1483de8c2bd658"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"e73d8d559120669b47658108d818b637df5456ea":[],"bbdd035c502312d32111b9642ba3dbd5c52ee64f":["e2238da841c6da38e6ed909d35da8f4c0ea3147b","e73d8d559120669b47658108d818b637df5456ea"],"104456f4eeacc857f7e1e6408e1483de8c2bd658":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}