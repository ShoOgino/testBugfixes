{"path":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testMultipleSources().mjava","commits":[{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testMultipleSources().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleSources() throws Exception {\n    final TeeSinkTokenFilter tee1 = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())));\n    final TeeSinkTokenFilter.SinkTokenStream dogDetector = tee1.newSinkTokenStream(dogFilter);\n    final TeeSinkTokenFilter.SinkTokenStream theDetector = tee1.newSinkTokenStream(theFilter);\n    final TokenStream source1 = new CachingTokenFilter(tee1);\n\n    final TeeSinkTokenFilter tee2 = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer2.toString())));\n    tee2.addSinkTokenStream(dogDetector);\n    tee2.addSinkTokenStream(theDetector);\n    final TokenStream source2 = tee2;\n\n    int i = 0;\n    TermAttribute termAtt = (TermAttribute) source1.getAttribute(TermAttribute.class);\n    while (source1.incrementToken()) {\n      assertEquals(tokens1[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens1.length, i);\n    i = 0;\n    termAtt = (TermAttribute) source2.getAttribute(TermAttribute.class);\n    while (source2.incrementToken()) {\n      assertEquals(tokens2[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens2.length, i);\n    i = 0;\n    termAtt = (TermAttribute) theDetector.getAttribute(TermAttribute.class);\n    while (theDetector.incrementToken()) {\n      assertTrue(\"'\" + termAtt.term() + \"' is not equal to 'The'\", termAtt.term().equalsIgnoreCase(\"The\"));\n      i++;\n    }\n    assertEquals(\"there must be 4 times 'The' in the stream\", 4, i);\n    i = 0;\n    termAtt = (TermAttribute) dogDetector.getAttribute(TermAttribute.class);\n    while (dogDetector.incrementToken()) {\n      assertTrue(\"'\" + termAtt.term() + \"' is not equal to 'Dogs'\", termAtt.term().equalsIgnoreCase(\"Dogs\"));\n      i++;\n    }\n    assertEquals(\"there must be 2 times 'Dog' in the stream\", 2, i);\n    \n    source1.reset();\n    TokenStream lowerCasing = new LowerCaseFilter(source1);\n    i = 0;\n    termAtt = (TermAttribute) lowerCasing.getAttribute(TermAttribute.class);\n    while (lowerCasing.incrementToken()) {\n      assertEquals(tokens1[i].toLowerCase(), termAtt.term());\n      i++;\n    }\n    assertEquals(i, tokens1.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["360d15dc189fb48153cb62234f7d20819e4e292e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testMultipleSources().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testMultipleSources().mjava","sourceNew":"  public void testMultipleSources() throws Exception {\n    final TeeSinkTokenFilter tee1 = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())));\n    final TeeSinkTokenFilter.SinkTokenStream dogDetector = tee1.newSinkTokenStream(dogFilter);\n    final TeeSinkTokenFilter.SinkTokenStream theDetector = tee1.newSinkTokenStream(theFilter);\n    final TokenStream source1 = new CachingTokenFilter(tee1);\n\n    final TeeSinkTokenFilter tee2 = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer2.toString())));\n    tee2.addSinkTokenStream(dogDetector);\n    tee2.addSinkTokenStream(theDetector);\n    final TokenStream source2 = tee2;\n\n    int i = 0;\n    TermAttribute termAtt = source1.getAttribute(TermAttribute.class);\n    while (source1.incrementToken()) {\n      assertEquals(tokens1[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens1.length, i);\n    i = 0;\n    termAtt = source2.getAttribute(TermAttribute.class);\n    while (source2.incrementToken()) {\n      assertEquals(tokens2[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens2.length, i);\n    i = 0;\n    termAtt = theDetector.getAttribute(TermAttribute.class);\n    while (theDetector.incrementToken()) {\n      assertTrue(\"'\" + termAtt.term() + \"' is not equal to 'The'\", termAtt.term().equalsIgnoreCase(\"The\"));\n      i++;\n    }\n    assertEquals(\"there must be 4 times 'The' in the stream\", 4, i);\n    i = 0;\n    termAtt = dogDetector.getAttribute(TermAttribute.class);\n    while (dogDetector.incrementToken()) {\n      assertTrue(\"'\" + termAtt.term() + \"' is not equal to 'Dogs'\", termAtt.term().equalsIgnoreCase(\"Dogs\"));\n      i++;\n    }\n    assertEquals(\"there must be 2 times 'Dog' in the stream\", 2, i);\n    \n    source1.reset();\n    TokenStream lowerCasing = new LowerCaseFilter(source1);\n    i = 0;\n    termAtt = lowerCasing.getAttribute(TermAttribute.class);\n    while (lowerCasing.incrementToken()) {\n      assertEquals(tokens1[i].toLowerCase(), termAtt.term());\n      i++;\n    }\n    assertEquals(i, tokens1.length);\n  }\n\n","sourceOld":"  public void testMultipleSources() throws Exception {\n    final TeeSinkTokenFilter tee1 = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())));\n    final TeeSinkTokenFilter.SinkTokenStream dogDetector = tee1.newSinkTokenStream(dogFilter);\n    final TeeSinkTokenFilter.SinkTokenStream theDetector = tee1.newSinkTokenStream(theFilter);\n    final TokenStream source1 = new CachingTokenFilter(tee1);\n\n    final TeeSinkTokenFilter tee2 = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer2.toString())));\n    tee2.addSinkTokenStream(dogDetector);\n    tee2.addSinkTokenStream(theDetector);\n    final TokenStream source2 = tee2;\n\n    int i = 0;\n    TermAttribute termAtt = (TermAttribute) source1.getAttribute(TermAttribute.class);\n    while (source1.incrementToken()) {\n      assertEquals(tokens1[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens1.length, i);\n    i = 0;\n    termAtt = (TermAttribute) source2.getAttribute(TermAttribute.class);\n    while (source2.incrementToken()) {\n      assertEquals(tokens2[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens2.length, i);\n    i = 0;\n    termAtt = (TermAttribute) theDetector.getAttribute(TermAttribute.class);\n    while (theDetector.incrementToken()) {\n      assertTrue(\"'\" + termAtt.term() + \"' is not equal to 'The'\", termAtt.term().equalsIgnoreCase(\"The\"));\n      i++;\n    }\n    assertEquals(\"there must be 4 times 'The' in the stream\", 4, i);\n    i = 0;\n    termAtt = (TermAttribute) dogDetector.getAttribute(TermAttribute.class);\n    while (dogDetector.incrementToken()) {\n      assertTrue(\"'\" + termAtt.term() + \"' is not equal to 'Dogs'\", termAtt.term().equalsIgnoreCase(\"Dogs\"));\n      i++;\n    }\n    assertEquals(\"there must be 2 times 'Dog' in the stream\", 2, i);\n    \n    source1.reset();\n    TokenStream lowerCasing = new LowerCaseFilter(source1);\n    i = 0;\n    termAtt = (TermAttribute) lowerCasing.getAttribute(TermAttribute.class);\n    while (lowerCasing.incrementToken()) {\n      assertEquals(tokens1[i].toLowerCase(), termAtt.term());\n      i++;\n    }\n    assertEquals(i, tokens1.length);\n  }\n\n","bugFix":null,"bugIntro":["360d15dc189fb48153cb62234f7d20819e4e292e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"41ce0ce6485d29a241c4ca4b6179d14df6a66bae","date":1259357651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testMultipleSources().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testMultipleSources().mjava","sourceNew":"  public void testMultipleSources() throws Exception {\n    final TeeSinkTokenFilter tee1 = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())));\n    final TeeSinkTokenFilter.SinkTokenStream dogDetector = tee1.newSinkTokenStream(dogFilter);\n    final TeeSinkTokenFilter.SinkTokenStream theDetector = tee1.newSinkTokenStream(theFilter);\n    final TokenStream source1 = new CachingTokenFilter(tee1);\n\n    final TeeSinkTokenFilter tee2 = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer2.toString())));\n    tee2.addSinkTokenStream(dogDetector);\n    tee2.addSinkTokenStream(theDetector);\n    final TokenStream source2 = tee2;\n\n    int i = 0;\n    TermAttribute termAtt = source1.getAttribute(TermAttribute.class);\n    while (source1.incrementToken()) {\n      assertEquals(tokens1[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens1.length, i);\n    i = 0;\n    termAtt = source2.getAttribute(TermAttribute.class);\n    while (source2.incrementToken()) {\n      assertEquals(tokens2[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens2.length, i);\n    i = 0;\n    termAtt = theDetector.getAttribute(TermAttribute.class);\n    while (theDetector.incrementToken()) {\n      assertTrue(\"'\" + termAtt.term() + \"' is not equal to 'The'\", termAtt.term().equalsIgnoreCase(\"The\"));\n      i++;\n    }\n    assertEquals(\"there must be 4 times 'The' in the stream\", 4, i);\n    i = 0;\n    termAtt = dogDetector.getAttribute(TermAttribute.class);\n    while (dogDetector.incrementToken()) {\n      assertTrue(\"'\" + termAtt.term() + \"' is not equal to 'Dogs'\", termAtt.term().equalsIgnoreCase(\"Dogs\"));\n      i++;\n    }\n    assertEquals(\"there must be 2 times 'Dog' in the stream\", 2, i);\n    \n    source1.reset();\n    TokenStream lowerCasing = new LowerCaseFilter(Version.LUCENE_CURRENT, source1);\n    i = 0;\n    termAtt = lowerCasing.getAttribute(TermAttribute.class);\n    while (lowerCasing.incrementToken()) {\n      assertEquals(tokens1[i].toLowerCase(), termAtt.term());\n      i++;\n    }\n    assertEquals(i, tokens1.length);\n  }\n\n","sourceOld":"  public void testMultipleSources() throws Exception {\n    final TeeSinkTokenFilter tee1 = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())));\n    final TeeSinkTokenFilter.SinkTokenStream dogDetector = tee1.newSinkTokenStream(dogFilter);\n    final TeeSinkTokenFilter.SinkTokenStream theDetector = tee1.newSinkTokenStream(theFilter);\n    final TokenStream source1 = new CachingTokenFilter(tee1);\n\n    final TeeSinkTokenFilter tee2 = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer2.toString())));\n    tee2.addSinkTokenStream(dogDetector);\n    tee2.addSinkTokenStream(theDetector);\n    final TokenStream source2 = tee2;\n\n    int i = 0;\n    TermAttribute termAtt = source1.getAttribute(TermAttribute.class);\n    while (source1.incrementToken()) {\n      assertEquals(tokens1[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens1.length, i);\n    i = 0;\n    termAtt = source2.getAttribute(TermAttribute.class);\n    while (source2.incrementToken()) {\n      assertEquals(tokens2[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens2.length, i);\n    i = 0;\n    termAtt = theDetector.getAttribute(TermAttribute.class);\n    while (theDetector.incrementToken()) {\n      assertTrue(\"'\" + termAtt.term() + \"' is not equal to 'The'\", termAtt.term().equalsIgnoreCase(\"The\"));\n      i++;\n    }\n    assertEquals(\"there must be 4 times 'The' in the stream\", 4, i);\n    i = 0;\n    termAtt = dogDetector.getAttribute(TermAttribute.class);\n    while (dogDetector.incrementToken()) {\n      assertTrue(\"'\" + termAtt.term() + \"' is not equal to 'Dogs'\", termAtt.term().equalsIgnoreCase(\"Dogs\"));\n      i++;\n    }\n    assertEquals(\"there must be 2 times 'Dog' in the stream\", 2, i);\n    \n    source1.reset();\n    TokenStream lowerCasing = new LowerCaseFilter(source1);\n    i = 0;\n    termAtt = lowerCasing.getAttribute(TermAttribute.class);\n    while (lowerCasing.incrementToken()) {\n      assertEquals(tokens1[i].toLowerCase(), termAtt.term());\n      i++;\n    }\n    assertEquals(i, tokens1.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"360d15dc189fb48153cb62234f7d20819e4e292e","date":1263562938,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testMultipleSources().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testMultipleSources().mjava","sourceNew":"  public void testMultipleSources() throws Exception {\n    final TeeSinkTokenFilter tee1 = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())));\n    final TeeSinkTokenFilter.SinkTokenStream dogDetector = tee1.newSinkTokenStream(dogFilter);\n    final TeeSinkTokenFilter.SinkTokenStream theDetector = tee1.newSinkTokenStream(theFilter);\n    final TokenStream source1 = new CachingTokenFilter(tee1);\n    \n    tee1.addAttribute(CheckClearAttributesAttribute.class);\n    dogDetector.addAttribute(CheckClearAttributesAttribute.class);\n    theDetector.addAttribute(CheckClearAttributesAttribute.class);\n\n    final TeeSinkTokenFilter tee2 = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer2.toString())));\n    tee2.addSinkTokenStream(dogDetector);\n    tee2.addSinkTokenStream(theDetector);\n    final TokenStream source2 = tee2;\n\n    assertTokenStreamContents(source1, tokens1);\n    assertTokenStreamContents(source2, tokens2);\n\n    assertTokenStreamContents(theDetector, new String[]{\"The\", \"the\", \"The\", \"the\"});\n    assertTokenStreamContents(dogDetector, new String[]{\"Dogs\", \"Dogs\"});\n    \n    source1.reset();\n    TokenStream lowerCasing = new LowerCaseFilter(Version.LUCENE_CURRENT, source1);\n    String[] lowerCaseTokens = new String[tokens1.length];\n    for (int i = 0; i < tokens1.length; i++)\n      lowerCaseTokens[i] = tokens1[i].toLowerCase();\n    assertTokenStreamContents(lowerCasing, lowerCaseTokens);\n  }\n\n","sourceOld":"  public void testMultipleSources() throws Exception {\n    final TeeSinkTokenFilter tee1 = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())));\n    final TeeSinkTokenFilter.SinkTokenStream dogDetector = tee1.newSinkTokenStream(dogFilter);\n    final TeeSinkTokenFilter.SinkTokenStream theDetector = tee1.newSinkTokenStream(theFilter);\n    final TokenStream source1 = new CachingTokenFilter(tee1);\n\n    final TeeSinkTokenFilter tee2 = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer2.toString())));\n    tee2.addSinkTokenStream(dogDetector);\n    tee2.addSinkTokenStream(theDetector);\n    final TokenStream source2 = tee2;\n\n    int i = 0;\n    TermAttribute termAtt = source1.getAttribute(TermAttribute.class);\n    while (source1.incrementToken()) {\n      assertEquals(tokens1[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens1.length, i);\n    i = 0;\n    termAtt = source2.getAttribute(TermAttribute.class);\n    while (source2.incrementToken()) {\n      assertEquals(tokens2[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens2.length, i);\n    i = 0;\n    termAtt = theDetector.getAttribute(TermAttribute.class);\n    while (theDetector.incrementToken()) {\n      assertTrue(\"'\" + termAtt.term() + \"' is not equal to 'The'\", termAtt.term().equalsIgnoreCase(\"The\"));\n      i++;\n    }\n    assertEquals(\"there must be 4 times 'The' in the stream\", 4, i);\n    i = 0;\n    termAtt = dogDetector.getAttribute(TermAttribute.class);\n    while (dogDetector.incrementToken()) {\n      assertTrue(\"'\" + termAtt.term() + \"' is not equal to 'Dogs'\", termAtt.term().equalsIgnoreCase(\"Dogs\"));\n      i++;\n    }\n    assertEquals(\"there must be 2 times 'Dog' in the stream\", 2, i);\n    \n    source1.reset();\n    TokenStream lowerCasing = new LowerCaseFilter(Version.LUCENE_CURRENT, source1);\n    i = 0;\n    termAtt = lowerCasing.getAttribute(TermAttribute.class);\n    while (lowerCasing.incrementToken()) {\n      assertEquals(tokens1[i].toLowerCase(), termAtt.term());\n      i++;\n    }\n    assertEquals(i, tokens1.length);\n  }\n\n","bugFix":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568","8d78f014fded44fbde905f4f84cdc21907b371e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testMultipleSources().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testMultipleSources().mjava","sourceNew":"  public void testMultipleSources() throws Exception {\n    final TeeSinkTokenFilter tee1 = new TeeSinkTokenFilter(new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer1.toString())));\n    final TeeSinkTokenFilter.SinkTokenStream dogDetector = tee1.newSinkTokenStream(dogFilter);\n    final TeeSinkTokenFilter.SinkTokenStream theDetector = tee1.newSinkTokenStream(theFilter);\n    final TokenStream source1 = new CachingTokenFilter(tee1);\n    \n    tee1.addAttribute(CheckClearAttributesAttribute.class);\n    dogDetector.addAttribute(CheckClearAttributesAttribute.class);\n    theDetector.addAttribute(CheckClearAttributesAttribute.class);\n\n    final TeeSinkTokenFilter tee2 = new TeeSinkTokenFilter(new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer2.toString())));\n    tee2.addSinkTokenStream(dogDetector);\n    tee2.addSinkTokenStream(theDetector);\n    final TokenStream source2 = tee2;\n\n    assertTokenStreamContents(source1, tokens1);\n    assertTokenStreamContents(source2, tokens2);\n\n    assertTokenStreamContents(theDetector, new String[]{\"The\", \"the\", \"The\", \"the\"});\n    assertTokenStreamContents(dogDetector, new String[]{\"Dogs\", \"Dogs\"});\n    \n    source1.reset();\n    TokenStream lowerCasing = new LowerCaseFilter(Version.LUCENE_CURRENT, source1);\n    String[] lowerCaseTokens = new String[tokens1.length];\n    for (int i = 0; i < tokens1.length; i++)\n      lowerCaseTokens[i] = tokens1[i].toLowerCase();\n    assertTokenStreamContents(lowerCasing, lowerCaseTokens);\n  }\n\n","sourceOld":"  public void testMultipleSources() throws Exception {\n    final TeeSinkTokenFilter tee1 = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())));\n    final TeeSinkTokenFilter.SinkTokenStream dogDetector = tee1.newSinkTokenStream(dogFilter);\n    final TeeSinkTokenFilter.SinkTokenStream theDetector = tee1.newSinkTokenStream(theFilter);\n    final TokenStream source1 = new CachingTokenFilter(tee1);\n    \n    tee1.addAttribute(CheckClearAttributesAttribute.class);\n    dogDetector.addAttribute(CheckClearAttributesAttribute.class);\n    theDetector.addAttribute(CheckClearAttributesAttribute.class);\n\n    final TeeSinkTokenFilter tee2 = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer2.toString())));\n    tee2.addSinkTokenStream(dogDetector);\n    tee2.addSinkTokenStream(theDetector);\n    final TokenStream source2 = tee2;\n\n    assertTokenStreamContents(source1, tokens1);\n    assertTokenStreamContents(source2, tokens2);\n\n    assertTokenStreamContents(theDetector, new String[]{\"The\", \"the\", \"The\", \"the\"});\n    assertTokenStreamContents(dogDetector, new String[]{\"Dogs\", \"Dogs\"});\n    \n    source1.reset();\n    TokenStream lowerCasing = new LowerCaseFilter(Version.LUCENE_CURRENT, source1);\n    String[] lowerCaseTokens = new String[tokens1.length];\n    for (int i = 0; i < tokens1.length; i++)\n      lowerCaseTokens[i] = tokens1[i].toLowerCase();\n    assertTokenStreamContents(lowerCasing, lowerCaseTokens);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testMultipleSources().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testMultipleSources().mjava","sourceNew":"  public void testMultipleSources() throws Exception {\n    final TeeSinkTokenFilter tee1 = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer1.toString())));\n    final TeeSinkTokenFilter.SinkTokenStream dogDetector = tee1.newSinkTokenStream(dogFilter);\n    final TeeSinkTokenFilter.SinkTokenStream theDetector = tee1.newSinkTokenStream(theFilter);\n    final TokenStream source1 = new CachingTokenFilter(tee1);\n    \n    tee1.addAttribute(CheckClearAttributesAttribute.class);\n    dogDetector.addAttribute(CheckClearAttributesAttribute.class);\n    theDetector.addAttribute(CheckClearAttributesAttribute.class);\n\n    final TeeSinkTokenFilter tee2 = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer2.toString())));\n    tee2.addSinkTokenStream(dogDetector);\n    tee2.addSinkTokenStream(theDetector);\n    final TokenStream source2 = tee2;\n\n    assertTokenStreamContents(source1, tokens1);\n    assertTokenStreamContents(source2, tokens2);\n\n    assertTokenStreamContents(theDetector, new String[]{\"The\", \"the\", \"The\", \"the\"});\n    assertTokenStreamContents(dogDetector, new String[]{\"Dogs\", \"Dogs\"});\n    \n    source1.reset();\n    TokenStream lowerCasing = new LowerCaseFilter(TEST_VERSION_CURRENT, source1);\n    String[] lowerCaseTokens = new String[tokens1.length];\n    for (int i = 0; i < tokens1.length; i++)\n      lowerCaseTokens[i] = tokens1[i].toLowerCase();\n    assertTokenStreamContents(lowerCasing, lowerCaseTokens);\n  }\n\n","sourceOld":"  public void testMultipleSources() throws Exception {\n    final TeeSinkTokenFilter tee1 = new TeeSinkTokenFilter(new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer1.toString())));\n    final TeeSinkTokenFilter.SinkTokenStream dogDetector = tee1.newSinkTokenStream(dogFilter);\n    final TeeSinkTokenFilter.SinkTokenStream theDetector = tee1.newSinkTokenStream(theFilter);\n    final TokenStream source1 = new CachingTokenFilter(tee1);\n    \n    tee1.addAttribute(CheckClearAttributesAttribute.class);\n    dogDetector.addAttribute(CheckClearAttributesAttribute.class);\n    theDetector.addAttribute(CheckClearAttributesAttribute.class);\n\n    final TeeSinkTokenFilter tee2 = new TeeSinkTokenFilter(new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer2.toString())));\n    tee2.addSinkTokenStream(dogDetector);\n    tee2.addSinkTokenStream(theDetector);\n    final TokenStream source2 = tee2;\n\n    assertTokenStreamContents(source1, tokens1);\n    assertTokenStreamContents(source2, tokens2);\n\n    assertTokenStreamContents(theDetector, new String[]{\"The\", \"the\", \"The\", \"the\"});\n    assertTokenStreamContents(dogDetector, new String[]{\"Dogs\", \"Dogs\"});\n    \n    source1.reset();\n    TokenStream lowerCasing = new LowerCaseFilter(Version.LUCENE_CURRENT, source1);\n    String[] lowerCaseTokens = new String[tokens1.length];\n    for (int i = 0; i < tokens1.length; i++)\n      lowerCaseTokens[i] = tokens1[i].toLowerCase();\n    assertTokenStreamContents(lowerCasing, lowerCaseTokens);\n  }\n\n","bugFix":null,"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testMultipleSources().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testMultipleSources().mjava","sourceNew":"  public void testMultipleSources() throws Exception {\n    final TeeSinkTokenFilter tee1 = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer1.toString())));\n    final TeeSinkTokenFilter.SinkTokenStream dogDetector = tee1.newSinkTokenStream(dogFilter);\n    final TeeSinkTokenFilter.SinkTokenStream theDetector = tee1.newSinkTokenStream(theFilter);\n    final TokenStream source1 = new CachingTokenFilter(tee1);\n    \n    tee1.addAttribute(CheckClearAttributesAttribute.class);\n    dogDetector.addAttribute(CheckClearAttributesAttribute.class);\n    theDetector.addAttribute(CheckClearAttributesAttribute.class);\n\n    final TeeSinkTokenFilter tee2 = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer2.toString())));\n    tee2.addSinkTokenStream(dogDetector);\n    tee2.addSinkTokenStream(theDetector);\n    final TokenStream source2 = tee2;\n\n    assertTokenStreamContents(source1, tokens1);\n    assertTokenStreamContents(source2, tokens2);\n\n    assertTokenStreamContents(theDetector, new String[]{\"The\", \"the\", \"The\", \"the\"});\n    assertTokenStreamContents(dogDetector, new String[]{\"Dogs\", \"Dogs\"});\n    \n    source1.reset();\n    TokenStream lowerCasing = new LowerCaseFilter(TEST_VERSION_CURRENT, source1);\n    String[] lowerCaseTokens = new String[tokens1.length];\n    for (int i = 0; i < tokens1.length; i++)\n      lowerCaseTokens[i] = tokens1[i].toLowerCase();\n    assertTokenStreamContents(lowerCasing, lowerCaseTokens);\n  }\n\n","sourceOld":"  public void testMultipleSources() throws Exception {\n    final TeeSinkTokenFilter tee1 = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer1.toString())));\n    final TeeSinkTokenFilter.SinkTokenStream dogDetector = tee1.newSinkTokenStream(dogFilter);\n    final TeeSinkTokenFilter.SinkTokenStream theDetector = tee1.newSinkTokenStream(theFilter);\n    final TokenStream source1 = new CachingTokenFilter(tee1);\n    \n    tee1.addAttribute(CheckClearAttributesAttribute.class);\n    dogDetector.addAttribute(CheckClearAttributesAttribute.class);\n    theDetector.addAttribute(CheckClearAttributesAttribute.class);\n\n    final TeeSinkTokenFilter tee2 = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer2.toString())));\n    tee2.addSinkTokenStream(dogDetector);\n    tee2.addSinkTokenStream(theDetector);\n    final TokenStream source2 = tee2;\n\n    assertTokenStreamContents(source1, tokens1);\n    assertTokenStreamContents(source2, tokens2);\n\n    assertTokenStreamContents(theDetector, new String[]{\"The\", \"the\", \"The\", \"the\"});\n    assertTokenStreamContents(dogDetector, new String[]{\"Dogs\", \"Dogs\"});\n    \n    source1.reset();\n    TokenStream lowerCasing = new LowerCaseFilter(TEST_VERSION_CURRENT, source1);\n    String[] lowerCaseTokens = new String[tokens1.length];\n    for (int i = 0; i < tokens1.length; i++)\n      lowerCaseTokens[i] = tokens1[i].toLowerCase();\n    assertTokenStreamContents(lowerCasing, lowerCaseTokens);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["360d15dc189fb48153cb62234f7d20819e4e292e"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d78f014fded44fbde905f4f84cdc21907b371e8":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"41ce0ce6485d29a241c4ca4b6179d14df6a66bae":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"360d15dc189fb48153cb62234f7d20819e4e292e":["41ce0ce6485d29a241c4ca4b6179d14df6a66bae"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["41ce0ce6485d29a241c4ca4b6179d14df6a66bae"],"41ce0ce6485d29a241c4ca4b6179d14df6a66bae":["360d15dc189fb48153cb62234f7d20819e4e292e"],"360d15dc189fb48153cb62234f7d20819e4e292e":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}