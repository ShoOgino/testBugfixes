{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.AnalyzingComparator#compare(BytesRef,BytesRef).mjava","commits":[{"id":"5a48377c9931ddb38c784846217ff68d7dcd0b44","date":1363202036,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.AnalyzingComparator#compare(BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int compare(BytesRef a, BytesRef b) {\n\n      // First by analyzed form:\n      readerA.reset(a.bytes, a.offset, a.length);\n      scratchA.length = readerA.readShort();\n      scratchA.bytes = a.bytes;\n      scratchA.offset = readerA.getPosition();\n\n      readerB.reset(b.bytes, b.offset, b.length);\n      scratchB.bytes = b.bytes;\n      scratchB.length = readerB.readShort();\n      scratchB.offset = readerB.getPosition();\n\n      int cmp = scratchA.compareTo(scratchB);\n      if (cmp != 0) {\n        return cmp;\n      }\n\n      // Next by cost:\n      long aCost = readerA.readInt();\n      long bCost = readerB.readInt();\n\n      if (aCost < bCost) {\n        return -1;\n      } else if (aCost > bCost) {\n        return 1;\n      }\n\n      // Finally by surface form:\n      if (hasPayloads) {\n        readerA.setPosition(readerA.getPosition() + scratchA.length);\n        scratchA.length = readerA.readShort();\n        scratchA.offset = readerA.getPosition();\n        readerB.setPosition(readerB.getPosition() + scratchB.length);\n        scratchB.length = readerB.readShort();\n        scratchB.offset = readerB.getPosition();\n      } else {\n        scratchA.offset = readerA.getPosition();\n        scratchA.length = a.length - scratchA.offset;\n        scratchB.offset = readerB.getPosition();\n        scratchB.length = b.length - scratchB.offset;\n      }\n\n      cmp = scratchA.compareTo(scratchB);\n      if (cmp != 0) {\n        return cmp;\n      }\n\n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["de73f9a96d7a4c91d4ec773c03aa188940382805","889901f1b564e80868c57d5f3743f4ddbb4ce44a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"889901f1b564e80868c57d5f3743f4ddbb4ce44a","date":1375181138,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.AnalyzingComparator#compare(BytesRef,BytesRef).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.AnalyzingComparator#compare(BytesRef,BytesRef).mjava","sourceNew":"    @Override\n    public int compare(BytesRef a, BytesRef b) {\n\n      // First by analyzed form:\n      readerA.reset(a.bytes, a.offset, a.length);\n      scratchA.length = readerA.readShort();\n      scratchA.bytes = a.bytes;\n      scratchA.offset = readerA.getPosition();\n\n      readerB.reset(b.bytes, b.offset, b.length);\n      scratchB.bytes = b.bytes;\n      scratchB.length = readerB.readShort();\n      scratchB.offset = readerB.getPosition();\n\n      int cmp = scratchA.compareTo(scratchB);\n      if (cmp != 0) {\n        return cmp;\n      }\n      readerA.skipBytes(scratchA.length);\n      readerB.skipBytes(scratchB.length);\n\n      // Next by cost:\n      long aCost = readerA.readInt();\n      long bCost = readerB.readInt();\n      assert decodeWeight(aCost) >= 0;\n      assert decodeWeight(bCost) >= 0;\n      if (aCost < bCost) {\n        return -1;\n      } else if (aCost > bCost) {\n        return 1;\n      }\n\n      // Finally by surface form:\n      if (hasPayloads) {\n        scratchA.length = readerA.readShort();\n        scratchB.length = readerB.readShort();\n        scratchA.offset = readerA.getPosition();\n        scratchB.offset = readerB.getPosition();\n      } else {\n        scratchA.offset = readerA.getPosition();\n        scratchB.offset = readerB.getPosition();\n        scratchA.length = a.length - scratchA.offset;\n        scratchB.length = b.length - scratchB.offset;\n      }\n   \n      return scratchA.compareTo(scratchB);\n    }\n\n","sourceOld":"    @Override\n    public int compare(BytesRef a, BytesRef b) {\n\n      // First by analyzed form:\n      readerA.reset(a.bytes, a.offset, a.length);\n      scratchA.length = readerA.readShort();\n      scratchA.bytes = a.bytes;\n      scratchA.offset = readerA.getPosition();\n\n      readerB.reset(b.bytes, b.offset, b.length);\n      scratchB.bytes = b.bytes;\n      scratchB.length = readerB.readShort();\n      scratchB.offset = readerB.getPosition();\n\n      int cmp = scratchA.compareTo(scratchB);\n      if (cmp != 0) {\n        return cmp;\n      }\n\n      // Next by cost:\n      long aCost = readerA.readInt();\n      long bCost = readerB.readInt();\n\n      if (aCost < bCost) {\n        return -1;\n      } else if (aCost > bCost) {\n        return 1;\n      }\n\n      // Finally by surface form:\n      if (hasPayloads) {\n        readerA.setPosition(readerA.getPosition() + scratchA.length);\n        scratchA.length = readerA.readShort();\n        scratchA.offset = readerA.getPosition();\n        readerB.setPosition(readerB.getPosition() + scratchB.length);\n        scratchB.length = readerB.readShort();\n        scratchB.offset = readerB.getPosition();\n      } else {\n        scratchA.offset = readerA.getPosition();\n        scratchA.length = a.length - scratchA.offset;\n        scratchB.offset = readerB.getPosition();\n        scratchB.length = b.length - scratchB.offset;\n      }\n\n      cmp = scratchA.compareTo(scratchB);\n      if (cmp != 0) {\n        return cmp;\n      }\n\n      return 0;\n    }\n\n","bugFix":["5a48377c9931ddb38c784846217ff68d7dcd0b44"],"bugIntro":["de73f9a96d7a4c91d4ec773c03aa188940382805"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.AnalyzingComparator#compare(BytesRef,BytesRef).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.AnalyzingComparator#compare(BytesRef,BytesRef).mjava","sourceNew":"    @Override\n    public int compare(BytesRef a, BytesRef b) {\n\n      // First by analyzed form:\n      readerA.reset(a.bytes, a.offset, a.length);\n      scratchA.length = readerA.readShort();\n      scratchA.bytes = a.bytes;\n      scratchA.offset = readerA.getPosition();\n\n      readerB.reset(b.bytes, b.offset, b.length);\n      scratchB.bytes = b.bytes;\n      scratchB.length = readerB.readShort();\n      scratchB.offset = readerB.getPosition();\n\n      int cmp = scratchA.compareTo(scratchB);\n      if (cmp != 0) {\n        return cmp;\n      }\n      readerA.skipBytes(scratchA.length);\n      readerB.skipBytes(scratchB.length);\n\n      // Next by cost:\n      long aCost = readerA.readInt();\n      long bCost = readerB.readInt();\n      assert decodeWeight(aCost) >= 0;\n      assert decodeWeight(bCost) >= 0;\n      if (aCost < bCost) {\n        return -1;\n      } else if (aCost > bCost) {\n        return 1;\n      }\n\n      // Finally by surface form:\n      if (hasPayloads) {\n        scratchA.length = readerA.readShort();\n        scratchB.length = readerB.readShort();\n        scratchA.offset = readerA.getPosition();\n        scratchB.offset = readerB.getPosition();\n      } else {\n        scratchA.offset = readerA.getPosition();\n        scratchB.offset = readerB.getPosition();\n        scratchA.length = a.length - scratchA.offset;\n        scratchB.length = b.length - scratchB.offset;\n      }\n   \n      return scratchA.compareTo(scratchB);\n    }\n\n","sourceOld":"    @Override\n    public int compare(BytesRef a, BytesRef b) {\n\n      // First by analyzed form:\n      readerA.reset(a.bytes, a.offset, a.length);\n      scratchA.length = readerA.readShort();\n      scratchA.bytes = a.bytes;\n      scratchA.offset = readerA.getPosition();\n\n      readerB.reset(b.bytes, b.offset, b.length);\n      scratchB.bytes = b.bytes;\n      scratchB.length = readerB.readShort();\n      scratchB.offset = readerB.getPosition();\n\n      int cmp = scratchA.compareTo(scratchB);\n      if (cmp != 0) {\n        return cmp;\n      }\n\n      // Next by cost:\n      long aCost = readerA.readInt();\n      long bCost = readerB.readInt();\n\n      if (aCost < bCost) {\n        return -1;\n      } else if (aCost > bCost) {\n        return 1;\n      }\n\n      // Finally by surface form:\n      if (hasPayloads) {\n        readerA.setPosition(readerA.getPosition() + scratchA.length);\n        scratchA.length = readerA.readShort();\n        scratchA.offset = readerA.getPosition();\n        readerB.setPosition(readerB.getPosition() + scratchB.length);\n        scratchB.length = readerB.readShort();\n        scratchB.offset = readerB.getPosition();\n      } else {\n        scratchA.offset = readerA.getPosition();\n        scratchA.length = a.length - scratchA.offset;\n        scratchB.offset = readerB.getPosition();\n        scratchB.length = b.length - scratchB.offset;\n      }\n\n      cmp = scratchA.compareTo(scratchB);\n      if (cmp != 0) {\n        return cmp;\n      }\n\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de73f9a96d7a4c91d4ec773c03aa188940382805","date":1505662644,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.AnalyzingComparator#compare(BytesRef,BytesRef).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.AnalyzingComparator#compare(BytesRef,BytesRef).mjava","sourceNew":"    @Override\n    public int compare(BytesRef a, BytesRef b) {\n\n      // First by analyzed form:\n      readerA.reset(a.bytes, a.offset, a.length);\n      scratchA.length = readerA.readShort();\n      scratchA.bytes = a.bytes;\n      scratchA.offset = readerA.getPosition();\n\n      readerB.reset(b.bytes, b.offset, b.length);\n      scratchB.bytes = b.bytes;\n      scratchB.length = readerB.readShort();\n      scratchB.offset = readerB.getPosition();\n\n      int cmp = scratchA.compareTo(scratchB);\n      if (cmp != 0) {\n        return cmp;\n      }\n      readerA.skipBytes(scratchA.length);\n      readerB.skipBytes(scratchB.length);\n\n      // Next by cost:\n      long aCost = readerA.readInt();\n      long bCost = readerB.readInt();\n      assert decodeWeight(aCost) >= 0;\n      assert decodeWeight(bCost) >= 0;\n      if (aCost < bCost) {\n        return -1;\n      } else if (aCost > bCost) {\n        return 1;\n      }\n\n      // Finally by surface form:\n      if (hasPayloads) {\n        scratchA.length = readerA.readShort();\n        scratchB.length = readerB.readShort();\n        scratchA.offset = readerA.getPosition();\n        scratchB.offset = readerB.getPosition();\n      } else {\n        scratchA.offset = readerA.getPosition();\n        scratchB.offset = readerB.getPosition();\n        scratchA.length = readerA.length() - readerA.getPosition();\n        scratchB.length = readerB.length() - readerB.getPosition();\n      }\n      assert scratchA.isValid();\n      assert scratchB.isValid();\n   \n      return scratchA.compareTo(scratchB);\n    }\n\n","sourceOld":"    @Override\n    public int compare(BytesRef a, BytesRef b) {\n\n      // First by analyzed form:\n      readerA.reset(a.bytes, a.offset, a.length);\n      scratchA.length = readerA.readShort();\n      scratchA.bytes = a.bytes;\n      scratchA.offset = readerA.getPosition();\n\n      readerB.reset(b.bytes, b.offset, b.length);\n      scratchB.bytes = b.bytes;\n      scratchB.length = readerB.readShort();\n      scratchB.offset = readerB.getPosition();\n\n      int cmp = scratchA.compareTo(scratchB);\n      if (cmp != 0) {\n        return cmp;\n      }\n      readerA.skipBytes(scratchA.length);\n      readerB.skipBytes(scratchB.length);\n\n      // Next by cost:\n      long aCost = readerA.readInt();\n      long bCost = readerB.readInt();\n      assert decodeWeight(aCost) >= 0;\n      assert decodeWeight(bCost) >= 0;\n      if (aCost < bCost) {\n        return -1;\n      } else if (aCost > bCost) {\n        return 1;\n      }\n\n      // Finally by surface form:\n      if (hasPayloads) {\n        scratchA.length = readerA.readShort();\n        scratchB.length = readerB.readShort();\n        scratchA.offset = readerA.getPosition();\n        scratchB.offset = readerB.getPosition();\n      } else {\n        scratchA.offset = readerA.getPosition();\n        scratchB.offset = readerB.getPosition();\n        scratchA.length = a.length - scratchA.offset;\n        scratchB.length = b.length - scratchB.offset;\n      }\n   \n      return scratchA.compareTo(scratchB);\n    }\n\n","bugFix":["5a48377c9931ddb38c784846217ff68d7dcd0b44","889901f1b564e80868c57d5f3743f4ddbb4ce44a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.AnalyzingComparator#compare(BytesRef,BytesRef).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.AnalyzingComparator#compare(BytesRef,BytesRef).mjava","sourceNew":"    @Override\n    public int compare(BytesRef a, BytesRef b) {\n\n      // First by analyzed form:\n      readerA.reset(a.bytes, a.offset, a.length);\n      scratchA.length = readerA.readShort();\n      scratchA.bytes = a.bytes;\n      scratchA.offset = readerA.getPosition();\n\n      readerB.reset(b.bytes, b.offset, b.length);\n      scratchB.bytes = b.bytes;\n      scratchB.length = readerB.readShort();\n      scratchB.offset = readerB.getPosition();\n\n      int cmp = scratchA.compareTo(scratchB);\n      if (cmp != 0) {\n        return cmp;\n      }\n      readerA.skipBytes(scratchA.length);\n      readerB.skipBytes(scratchB.length);\n\n      // Next by cost:\n      long aCost = readerA.readInt();\n      long bCost = readerB.readInt();\n      assert decodeWeight(aCost) >= 0;\n      assert decodeWeight(bCost) >= 0;\n      if (aCost < bCost) {\n        return -1;\n      } else if (aCost > bCost) {\n        return 1;\n      }\n\n      // Finally by surface form:\n      if (hasPayloads) {\n        scratchA.length = readerA.readShort();\n        scratchB.length = readerB.readShort();\n        scratchA.offset = readerA.getPosition();\n        scratchB.offset = readerB.getPosition();\n      } else {\n        scratchA.offset = readerA.getPosition();\n        scratchB.offset = readerB.getPosition();\n        scratchA.length = readerA.length() - readerA.getPosition();\n        scratchB.length = readerB.length() - readerB.getPosition();\n      }\n      assert scratchA.isValid();\n      assert scratchB.isValid();\n   \n      return scratchA.compareTo(scratchB);\n    }\n\n","sourceOld":"    @Override\n    public int compare(BytesRef a, BytesRef b) {\n\n      // First by analyzed form:\n      readerA.reset(a.bytes, a.offset, a.length);\n      scratchA.length = readerA.readShort();\n      scratchA.bytes = a.bytes;\n      scratchA.offset = readerA.getPosition();\n\n      readerB.reset(b.bytes, b.offset, b.length);\n      scratchB.bytes = b.bytes;\n      scratchB.length = readerB.readShort();\n      scratchB.offset = readerB.getPosition();\n\n      int cmp = scratchA.compareTo(scratchB);\n      if (cmp != 0) {\n        return cmp;\n      }\n      readerA.skipBytes(scratchA.length);\n      readerB.skipBytes(scratchB.length);\n\n      // Next by cost:\n      long aCost = readerA.readInt();\n      long bCost = readerB.readInt();\n      assert decodeWeight(aCost) >= 0;\n      assert decodeWeight(bCost) >= 0;\n      if (aCost < bCost) {\n        return -1;\n      } else if (aCost > bCost) {\n        return 1;\n      }\n\n      // Finally by surface form:\n      if (hasPayloads) {\n        scratchA.length = readerA.readShort();\n        scratchB.length = readerB.readShort();\n        scratchA.offset = readerA.getPosition();\n        scratchB.offset = readerB.getPosition();\n      } else {\n        scratchA.offset = readerA.getPosition();\n        scratchB.offset = readerB.getPosition();\n        scratchA.length = a.length - scratchA.offset;\n        scratchB.length = b.length - scratchB.offset;\n      }\n   \n      return scratchA.compareTo(scratchB);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"de73f9a96d7a4c91d4ec773c03aa188940382805":["889901f1b564e80868c57d5f3743f4ddbb4ce44a"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["889901f1b564e80868c57d5f3743f4ddbb4ce44a","de73f9a96d7a4c91d4ec773c03aa188940382805"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["5a48377c9931ddb38c784846217ff68d7dcd0b44"],"889901f1b564e80868c57d5f3743f4ddbb4ce44a":["5a48377c9931ddb38c784846217ff68d7dcd0b44"],"5a48377c9931ddb38c784846217ff68d7dcd0b44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["de73f9a96d7a4c91d4ec773c03aa188940382805"]},"commit2Childs":{"de73f9a96d7a4c91d4ec773c03aa188940382805":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a48377c9931ddb38c784846217ff68d7dcd0b44"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"889901f1b564e80868c57d5f3743f4ddbb4ce44a":["de73f9a96d7a4c91d4ec773c03aa188940382805","685bd38810c206c93e9058f3c2cfa9827c086c27"],"5a48377c9931ddb38c784846217ff68d7dcd0b44":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","889901f1b564e80868c57d5f3743f4ddbb4ce44a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}