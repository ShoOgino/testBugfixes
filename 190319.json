{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#waitIfStalled().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#waitIfStalled().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterStallControl#waitIfStalled().mjava","sourceNew":"  void waitIfStalled() {\n    sync.acquireShared(0);\n  }\n\n","sourceOld":"  void waitIfStalled() {\n    sync.acquireShared(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6","date":1337196931,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#waitIfStalled().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#waitIfStalled().mjava","sourceNew":"  void waitIfStalled() {\n    try {\n      sync.acquireSharedInterruptibly(0);\n    } catch (InterruptedException e) {\n      throw new ThreadInterruptedException(e);\n    }\n  }\n\n","sourceOld":"  void waitIfStalled() {\n    sync.acquireShared(0);\n  }\n\n","bugFix":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#waitIfStalled().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#waitIfStalled().mjava","sourceNew":"  void waitIfStalled() {\n    try {\n      sync.acquireSharedInterruptibly(0);\n    } catch (InterruptedException e) {\n      throw new ThreadInterruptedException(e);\n    }\n  }\n\n","sourceOld":"  void waitIfStalled() {\n    sync.acquireShared(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e38f40562eb7c165ae08ab2367a031883138354","date":1340287338,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#waitIfStalled().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#waitIfStalled().mjava","sourceNew":"  /**\n   * Blocks if documents writing is currently in a stalled state. \n   * \n   */\n  void waitIfStalled() {\n    if (stalled) {\n      synchronized (this) {\n        boolean hasWaited = false;\n        while (stalled) {\n          try {\n            assert hasWaited || incWaiters();\n            assert (hasWaited = true);\n            wait();\n          } catch (InterruptedException e) {\n            throw new ThreadInterruptedException(e);\n          }\n        }\n        assert !hasWaited || decrWaiters();\n      }\n    }\n  }\n\n","sourceOld":"  void waitIfStalled() {\n    try {\n      sync.acquireSharedInterruptibly(0);\n    } catch (InterruptedException e) {\n      throw new ThreadInterruptedException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["2b148364985e538e801c1e4d9614b8b2a9190339","b0b7352903525839fa9ecf337b5a5e90ea91f243"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0b7352903525839fa9ecf337b5a5e90ea91f243","date":1340613989,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#waitIfStalled().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#waitIfStalled().mjava","sourceNew":"  /**\n   * Blocks if documents writing is currently in a stalled state. \n   * \n   */\n  void waitIfStalled() {\n    if (stalled) {\n      synchronized (this) {\n        if (stalled) { // react on the first wakeup call!\n          // don't loop here, higher level logic will re-stall!\n          try {\n            assert incWaiters();\n            wait();\n            assert  decrWaiters();\n          } catch (InterruptedException e) {\n            throw new ThreadInterruptedException(e);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Blocks if documents writing is currently in a stalled state. \n   * \n   */\n  void waitIfStalled() {\n    if (stalled) {\n      synchronized (this) {\n        boolean hasWaited = false;\n        while (stalled) {\n          try {\n            assert hasWaited || incWaiters();\n            assert (hasWaited = true);\n            wait();\n          } catch (InterruptedException e) {\n            throw new ThreadInterruptedException(e);\n          }\n        }\n        assert !hasWaited || decrWaiters();\n      }\n    }\n  }\n\n","bugFix":["5e38f40562eb7c165ae08ab2367a031883138354"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#waitIfStalled().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#waitIfStalled().mjava","sourceNew":"  /**\n   * Blocks if documents writing is currently in a stalled state. \n   * \n   */\n  void waitIfStalled() {\n    if (stalled) {\n      synchronized (this) {\n        if (stalled) { // react on the first wakeup call!\n          // don't loop here, higher level logic will re-stall!\n          try {\n            assert incWaiters();\n            wait();\n            assert  decrWaiters();\n          } catch (InterruptedException e) {\n            throw new ThreadInterruptedException(e);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void waitIfStalled() {\n    try {\n      sync.acquireSharedInterruptibly(0);\n    } catch (InterruptedException e) {\n      throw new ThreadInterruptedException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4","date":1414017220,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#waitIfStalled().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#waitIfStalled().mjava","sourceNew":"  /**\n   * Blocks if documents writing is currently in a stalled state. \n   * \n   */\n  void waitIfStalled() {\n    if (stalled) {\n      synchronized (this) {\n        if (stalled) { // react on the first wakeup call!\n          // don't loop here, higher level logic will re-stall!\n          try {\n            incWaiters();\n            wait();\n            decrWaiters();\n          } catch (InterruptedException e) {\n            throw new ThreadInterruptedException(e);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Blocks if documents writing is currently in a stalled state. \n   * \n   */\n  void waitIfStalled() {\n    if (stalled) {\n      synchronized (this) {\n        if (stalled) { // react on the first wakeup call!\n          // don't loop here, higher level logic will re-stall!\n          try {\n            assert incWaiters();\n            wait();\n            assert  decrWaiters();\n          } catch (InterruptedException e) {\n            throw new ThreadInterruptedException(e);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2b148364985e538e801c1e4d9614b8b2a9190339","date":1427880341,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#waitIfStalled().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#waitIfStalled().mjava","sourceNew":"  /**\n   * Blocks if documents writing is currently in a stalled state. \n   * \n   */\n  void waitIfStalled() {\n    if (stalled) {\n      synchronized (this) {\n        if (stalled) { // react on the first wakeup call!\n          // don't loop here, higher level logic will re-stall!\n          try {\n            incWaiters();\n            // Defensive, in case we have a concurrency bug that fails to .notify/All our thread:\n            // just wait for up to 1 second here, and let caller re-stall if it's still needed:\n            wait(1000);\n            decrWaiters();\n          } catch (InterruptedException e) {\n            throw new ThreadInterruptedException(e);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Blocks if documents writing is currently in a stalled state. \n   * \n   */\n  void waitIfStalled() {\n    if (stalled) {\n      synchronized (this) {\n        if (stalled) { // react on the first wakeup call!\n          // don't loop here, higher level logic will re-stall!\n          try {\n            incWaiters();\n            wait();\n            decrWaiters();\n          } catch (InterruptedException e) {\n            throw new ThreadInterruptedException(e);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":["5e38f40562eb7c165ae08ab2367a031883138354"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#waitIfStalled().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#waitIfStalled().mjava","sourceNew":"  /**\n   * Blocks if documents writing is currently in a stalled state. \n   * \n   */\n  void waitIfStalled() {\n    if (stalled) {\n      synchronized (this) {\n        if (stalled) { // react on the first wakeup call!\n          // don't loop here, higher level logic will re-stall!\n          try {\n            incWaiters();\n            // Defensive, in case we have a concurrency bug that fails to .notify/All our thread:\n            // just wait for up to 1 second here, and let caller re-stall if it's still needed:\n            wait(1000);\n            decrWaiters();\n          } catch (InterruptedException e) {\n            throw new ThreadInterruptedException(e);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Blocks if documents writing is currently in a stalled state. \n   * \n   */\n  void waitIfStalled() {\n    if (stalled) {\n      synchronized (this) {\n        if (stalled) { // react on the first wakeup call!\n          // don't loop here, higher level logic will re-stall!\n          try {\n            incWaiters();\n            wait();\n            decrWaiters();\n          } catch (InterruptedException e) {\n            throw new ThreadInterruptedException(e);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2b148364985e538e801c1e4d9614b8b2a9190339":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4"],"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4":["b0b7352903525839fa9ecf337b5a5e90ea91f243"],"5e38f40562eb7c165ae08ab2367a031883138354":["f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6"],"f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6","b0b7352903525839fa9ecf337b5a5e90ea91f243"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b0b7352903525839fa9ecf337b5a5e90ea91f243":["5e38f40562eb7c165ae08ab2367a031883138354"],"ef0d8a69209261514c5739c770bba706c2308450":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b148364985e538e801c1e4d9614b8b2a9190339"],"0c924d4069ef5a5bc479a493befe0121aada6896":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4","2b148364985e538e801c1e4d9614b8b2a9190339"]},"commit2Childs":{"2b148364985e538e801c1e4d9614b8b2a9190339":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4":["2b148364985e538e801c1e4d9614b8b2a9190339","0c924d4069ef5a5bc479a493befe0121aada6896"],"5e38f40562eb7c165ae08ab2367a031883138354":["b0b7352903525839fa9ecf337b5a5e90ea91f243"],"f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6":["5e38f40562eb7c165ae08ab2367a031883138354","fe33227f6805edab2036cbb80645cc4e2d1fa424","ef0d8a69209261514c5739c770bba706c2308450"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6","ef0d8a69209261514c5739c770bba706c2308450"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b0b7352903525839fa9ecf337b5a5e90ea91f243":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0c924d4069ef5a5bc479a493befe0121aada6896":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}