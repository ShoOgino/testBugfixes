{"path":"sandbox/contributions/hilighter/src/java/org/apache/lucene/search/highlight/Highlighter#mergeContiguousFragments(TextFragment[]).mjava","commits":[{"id":"e3847974308b7ee4bf1bd64ab343a6758eb9ccb1","date":1081469776,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/hilighter/src/java/org/apache/lucene/search/highlight/Highlighter#mergeContiguousFragments(TextFragment[]).mjava","pathOld":"/dev/null","sourceNew":"\t/** Improves readability of a score-sorted list of TextFragments by merging any fragments \n\t * that were contiguous in the original text into one larger fragment with the correct order.\n\t * This will leave a \"null\" in the array entry for the lesser scored fragment. \n\t * \n\t * @param frag An array of document fragments in descending score\n\t */\n\tprivate void mergeContiguousFragments(TextFragment[] frag)\n\t{\n\t\tboolean mergingStillBeingDone;\n\t\tif (frag.length > 1)\n\t\t\tdo\n\t\t\t{\n\t\t\t\tmergingStillBeingDone = false; //initialise loop control flag\n\t\t\t\t//for each fragment, scan other frags looking for contiguous blocks\n\t\t\t\tfor (int i = 0; i < frag.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t//merge any contiguous blocks \n\t\t\t\t\tfor (int x = 0; x < frag.length; x++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (frag[x] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTextFragment frag1 = null;\n\t\t\t\t\t\tTextFragment frag2 = null;\n\t\t\t\t\t\tint frag1Num = 0;\n\t\t\t\t\t\tint frag2Num = 0;\n\t\t\t\t\t\tint bestScoringFragNum;\n\t\t\t\t\t\tint worstScoringFragNum;\n\t\t\t\t\t\t//if blocks are contiguous....\n\t\t\t\t\t\tif (frag[i].follows(frag[x]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfrag1 = frag[x];\n\t\t\t\t\t\t\tfrag1Num = x;\n\t\t\t\t\t\t\tfrag2 = frag[i];\n\t\t\t\t\t\t\tfrag2Num = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tif (frag[x].follows(frag[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfrag1 = frag[i];\n\t\t\t\t\t\t\t\tfrag1Num = i;\n\t\t\t\t\t\t\t\tfrag2 = frag[x];\n\t\t\t\t\t\t\t\tfrag2Num = x;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t//merging required..\n\t\t\t\t\t\tif (frag1 != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (frag1.getScore() > frag2.getScore())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrag1.merge(frag2);\n\t\t\t\t\t\t\tfrag[worstScoringFragNum] = null;\n\t\t\t\t\t\t\tmergingStillBeingDone = true;\n\t\t\t\t\t\t\tfrag[bestScoringFragNum] = frag1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (mergingStillBeingDone);\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e36e216d6ddce8d71e813a8b0d29d42d4c5025b9","date":1081470820,"type":4,"author":"Erik Hatcher","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/hilighter/src/java/org/apache/lucene/search/highlight/Highlighter#mergeContiguousFragments(TextFragment[]).mjava","sourceNew":null,"sourceOld":"\t/** Improves readability of a score-sorted list of TextFragments by merging any fragments \n\t * that were contiguous in the original text into one larger fragment with the correct order.\n\t * This will leave a \"null\" in the array entry for the lesser scored fragment. \n\t * \n\t * @param frag An array of document fragments in descending score\n\t */\n\tprivate void mergeContiguousFragments(TextFragment[] frag)\n\t{\n\t\tboolean mergingStillBeingDone;\n\t\tif (frag.length > 1)\n\t\t\tdo\n\t\t\t{\n\t\t\t\tmergingStillBeingDone = false; //initialise loop control flag\n\t\t\t\t//for each fragment, scan other frags looking for contiguous blocks\n\t\t\t\tfor (int i = 0; i < frag.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t//merge any contiguous blocks \n\t\t\t\t\tfor (int x = 0; x < frag.length; x++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (frag[x] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTextFragment frag1 = null;\n\t\t\t\t\t\tTextFragment frag2 = null;\n\t\t\t\t\t\tint frag1Num = 0;\n\t\t\t\t\t\tint frag2Num = 0;\n\t\t\t\t\t\tint bestScoringFragNum;\n\t\t\t\t\t\tint worstScoringFragNum;\n\t\t\t\t\t\t//if blocks are contiguous....\n\t\t\t\t\t\tif (frag[i].follows(frag[x]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfrag1 = frag[x];\n\t\t\t\t\t\t\tfrag1Num = x;\n\t\t\t\t\t\t\tfrag2 = frag[i];\n\t\t\t\t\t\t\tfrag2Num = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tif (frag[x].follows(frag[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfrag1 = frag[i];\n\t\t\t\t\t\t\t\tfrag1Num = i;\n\t\t\t\t\t\t\t\tfrag2 = frag[x];\n\t\t\t\t\t\t\t\tfrag2Num = x;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t//merging required..\n\t\t\t\t\t\tif (frag1 != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (frag1.getScore() > frag2.getScore())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrag1.merge(frag2);\n\t\t\t\t\t\t\tfrag[worstScoringFragNum] = null;\n\t\t\t\t\t\t\tmergingStillBeingDone = true;\n\t\t\t\t\t\t\tfrag[bestScoringFragNum] = frag1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (mergingStillBeingDone);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e36e216d6ddce8d71e813a8b0d29d42d4c5025b9":["e3847974308b7ee4bf1bd64ab343a6758eb9ccb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e36e216d6ddce8d71e813a8b0d29d42d4c5025b9"],"e3847974308b7ee4bf1bd64ab343a6758eb9ccb1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3847974308b7ee4bf1bd64ab343a6758eb9ccb1"],"e36e216d6ddce8d71e813a8b0d29d42d4c5025b9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3847974308b7ee4bf1bd64ab343a6758eb9ccb1":["e36e216d6ddce8d71e813a8b0d29d42d4c5025b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}