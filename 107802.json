{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/QueryFacet#createFacetValueExecuters(Filter,SolrQueryRequest,Consumer[FacetValueQueryExecuter]).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/QueryFacet#createFacetValueExecuters(Filter,SolrQueryRequest,Consumer[FacetValueQueryExecuter]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void createFacetValueExecuters(final Filter filter, SolrQueryRequest queryRequest, Consumer<FacetValueQueryExecuter> consumer) {\n    queries.forEach( (queryName, query) -> {\n      final Query q;\n      try {\n        q = QParser.getParser(query, queryRequest).getQuery();\n      } catch( Exception e ){\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"' in query facet '\" + getName() + \"'\",e);\n      }\n      // The searcher sends docIds to the QueryFacetAccumulator which forwards\n      // them to <code>collectQuery()</code> in this class for collection.\n      Query queryQuery = new BooleanQuery.Builder()\n          .add(q, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n\n      ReductionDataCollection dataCol = collectionManager.newDataCollection();\n      reductionData.put(queryName, dataCol);\n      consumer.accept(new FacetValueQueryExecuter(dataCol, queryQuery));\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/QueryFacet#createFacetValueExecuters(Filter,SolrQueryRequest,Consumer[FacetValueQueryExecuter]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void createFacetValueExecuters(final Filter filter, SolrQueryRequest queryRequest, Consumer<FacetValueQueryExecuter> consumer) {\n    queries.forEach( (queryName, query) -> {\n      final Query q;\n      try {\n        q = QParser.getParser(query, queryRequest).getQuery();\n      } catch( Exception e ){\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"' in query facet '\" + getName() + \"'\",e);\n      }\n      // The searcher sends docIds to the QueryFacetAccumulator which forwards\n      // them to <code>collectQuery()</code> in this class for collection.\n      Query queryQuery = new BooleanQuery.Builder()\n          .add(q, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n\n      ReductionDataCollection dataCol = collectionManager.newDataCollection();\n      reductionData.put(queryName, dataCol);\n      consumer.accept(new FacetValueQueryExecuter(dataCol, queryQuery));\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/QueryFacet#createFacetValueExecuters(Filter,SolrQueryRequest,Consumer[FacetValueQueryExecuter]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void createFacetValueExecuters(final Filter filter, SolrQueryRequest queryRequest, Consumer<FacetValueQueryExecuter> consumer) {\n    queries.forEach( (queryName, query) -> {\n      final Query q;\n      try {\n        q = QParser.getParser(query, queryRequest).getQuery();\n      } catch( Exception e ){\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"' in query facet '\" + getName() + \"'\",e);\n      }\n      // The searcher sends docIds to the QueryFacetAccumulator which forwards\n      // them to <code>collectQuery()</code> in this class for collection.\n      Query queryQuery = new BooleanQuery.Builder()\n          .add(q, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n\n      ReductionDataCollection dataCol = collectionManager.newDataCollection();\n      reductionData.put(queryName, dataCol);\n      consumer.accept(new FacetValueQueryExecuter(dataCol, queryQuery));\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec","date":1586897159,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/QueryFacet#createFacetValueExecuters(Filter,SolrQueryRequest,Consumer[FacetValueQueryExecuter]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/QueryFacet#createFacetValueExecuters(Filter,SolrQueryRequest,Consumer[FacetValueQueryExecuter]).mjava","sourceNew":"  @Override\n  public void createFacetValueExecuters(final Filter filter, SolrQueryRequest queryRequest, Consumer<FacetValueQueryExecuter> consumer) {\n    queries.forEach( (queryName, query) -> {\n      final Query q;\n      try {\n        q = QParser.getParser(query, queryRequest).getQuery();\n      } catch( Exception e ){\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"' in query facet '\" + getName() + \"'\",e);\n      }\n      // The searcher sends docIds to the QueryFacetAccumulator which forwards\n      // them to <code>collectQuery()</code> in this class for collection.\n      Query queryQuery = QueryUtils.combineQueryAndFilter(q, filter);\n\n      ReductionDataCollection dataCol = collectionManager.newDataCollection();\n      reductionData.put(queryName, dataCol);\n      consumer.accept(new FacetValueQueryExecuter(dataCol, queryQuery));\n    });\n  }\n\n","sourceOld":"  @Override\n  public void createFacetValueExecuters(final Filter filter, SolrQueryRequest queryRequest, Consumer<FacetValueQueryExecuter> consumer) {\n    queries.forEach( (queryName, query) -> {\n      final Query q;\n      try {\n        q = QParser.getParser(query, queryRequest).getQuery();\n      } catch( Exception e ){\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"' in query facet '\" + getName() + \"'\",e);\n      }\n      // The searcher sends docIds to the QueryFacetAccumulator which forwards\n      // them to <code>collectQuery()</code> in this class for collection.\n      Query queryQuery = new BooleanQuery.Builder()\n          .add(q, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n\n      ReductionDataCollection dataCol = collectionManager.newDataCollection();\n      reductionData.put(queryName, dataCol);\n      consumer.accept(new FacetValueQueryExecuter(dataCol, queryQuery));\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d8a0350513120be3cf48c0eafd6b8787fcd3ec"]},"commit2Childs":{"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["d4d8a0350513120be3cf48c0eafd6b8787fcd3ec","30c8e5574b55d57947e989443dfde611646530ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}