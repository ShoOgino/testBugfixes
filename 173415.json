{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeQuery.SmallDocSet#iterator().mjava","commits":[{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeQuery.SmallDocSet#iterator().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.SmallDocSet#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      if (size() == 0)\n        return null;\n      //copy the unsorted values to a new array then sort them\n      int d = 0;\n      final int[] docs = new int[intSet.size()];\n      for (int v : intSet.keys) {\n        if (v == intSet.emptyVal)\n          continue;\n        docs[d++] = v;\n      }\n      assert d == intSet.size();\n      final int size = d;\n\n      //sort them\n      Arrays.sort(docs, 0, size);\n\n      return new DocIdSetIterator() {\n        int idx = -1;\n        @Override\n        public int docID() {\n          if (idx < 0) {\n            return -1;\n          } else if (idx < size) {\n            return docs[idx];\n          } else {\n            return NO_MORE_DOCS;\n          }\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          if (++idx < size)\n            return docs[idx];\n          return NO_MORE_DOCS;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          //for this small set this is likely faster vs. a binary search\n          // into the sorted array\n          return slowAdvance(target);\n        }\n\n        @Override\n        public long cost() {\n          return size;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      if (size() == 0)\n        return null;\n      //copy the unsorted values to a new array then sort them\n      int d = 0;\n      final int[] docs = new int[intSet.size()];\n      for (int v : intSet.keys) {\n        if (v == intSet.emptyVal)\n          continue;\n        docs[d++] = v;\n      }\n      assert d == intSet.size();\n      final int size = d;\n\n      //sort them\n      Arrays.sort(docs, 0, size);\n\n      return new DocIdSetIterator() {\n        int idx = -1;\n        @Override\n        public int docID() {\n          if (idx < 0) {\n            return -1;\n          } else if (idx < size) {\n            return docs[idx];\n          } else {\n            return NO_MORE_DOCS;\n          }\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          if (++idx < size)\n            return docs[idx];\n          return NO_MORE_DOCS;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          //for this small set this is likely faster vs. a binary search\n          // into the sorted array\n          return slowAdvance(target);\n        }\n\n        @Override\n        public long cost() {\n          return size;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeQuery.SmallDocSet#iterator().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeQuery.SmallDocSet#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      if (size() == 0)\n        return null;\n      //copy the unsorted values to a new array then sort them\n      int d = 0;\n      final int[] docs = new int[intSet.size()];\n      for (int v : intSet.keys) {\n        if (v == intSet.emptyVal)\n          continue;\n        docs[d++] = v;\n      }\n      assert d == intSet.size();\n      final int size = d;\n\n      //sort them\n      Arrays.sort(docs, 0, size);\n\n      return new DocIdSetIterator() {\n        int idx = -1;\n        @Override\n        public int docID() {\n          if (idx < 0) {\n            return -1;\n          } else if (idx < size) {\n            return docs[idx];\n          } else {\n            return NO_MORE_DOCS;\n          }\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          if (++idx < size)\n            return docs[idx];\n          return NO_MORE_DOCS;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          //for this small set this is likely faster vs. a binary search\n          // into the sorted array\n          return slowAdvance(target);\n        }\n\n        @Override\n        public long cost() {\n          return size;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      if (size() == 0)\n        return null;\n      //copy the unsorted values to a new array then sort them\n      int d = 0;\n      final int[] docs = new int[intSet.size()];\n      for (int v : intSet.keys) {\n        if (v == intSet.emptyVal)\n          continue;\n        docs[d++] = v;\n      }\n      assert d == intSet.size();\n      final int size = d;\n\n      //sort them\n      Arrays.sort(docs, 0, size);\n\n      return new DocIdSetIterator() {\n        int idx = -1;\n        @Override\n        public int docID() {\n          if (idx < 0) {\n            return -1;\n          } else if (idx < size) {\n            return docs[idx];\n          } else {\n            return NO_MORE_DOCS;\n          }\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          if (++idx < size)\n            return docs[idx];\n          return NO_MORE_DOCS;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          //for this small set this is likely faster vs. a binary search\n          // into the sorted array\n          return slowAdvance(target);\n        }\n\n        @Override\n        public long cost() {\n          return size;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeQuery.SmallDocSet#iterator().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeQuery.SmallDocSet#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      if (size() == 0)\n        return null;\n      //copy the unsorted values to a new array then sort them\n      int d = 0;\n      final int[] docs = new int[intSet.size()];\n      for (int v : intSet.keys) {\n        if (v == intSet.emptyVal)\n          continue;\n        docs[d++] = v;\n      }\n      assert d == intSet.size();\n      final int size = d;\n\n      //sort them\n      Arrays.sort(docs, 0, size);\n\n      return new DocIdSetIterator() {\n        int idx = -1;\n        @Override\n        public int docID() {\n          if (idx < 0) {\n            return -1;\n          } else if (idx < size) {\n            return docs[idx];\n          } else {\n            return NO_MORE_DOCS;\n          }\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          if (++idx < size)\n            return docs[idx];\n          return NO_MORE_DOCS;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          //for this small set this is likely faster vs. a binary search\n          // into the sorted array\n          return slowAdvance(target);\n        }\n\n        @Override\n        public long cost() {\n          return size;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      if (size() == 0)\n        return null;\n      //copy the unsorted values to a new array then sort them\n      int d = 0;\n      final int[] docs = new int[intSet.size()];\n      for (int v : intSet.keys) {\n        if (v == intSet.emptyVal)\n          continue;\n        docs[d++] = v;\n      }\n      assert d == intSet.size();\n      final int size = d;\n\n      //sort them\n      Arrays.sort(docs, 0, size);\n\n      return new DocIdSetIterator() {\n        int idx = -1;\n        @Override\n        public int docID() {\n          if (idx < 0) {\n            return -1;\n          } else if (idx < size) {\n            return docs[idx];\n          } else {\n            return NO_MORE_DOCS;\n          }\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          if (++idx < size)\n            return docs[idx];\n          return NO_MORE_DOCS;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          //for this small set this is likely faster vs. a binary search\n          // into the sorted array\n          return slowAdvance(target);\n        }\n\n        @Override\n        public long cost() {\n          return size;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["672b198fc3dce868916c727917cae58c2906763d","112d77ac8d3e10a362516ad834c9a11d35c94234"],"672b198fc3dce868916c727917cae58c2906763d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["672b198fc3dce868916c727917cae58c2906763d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"672b198fc3dce868916c727917cae58c2906763d":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["672b198fc3dce868916c727917cae58c2906763d"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}