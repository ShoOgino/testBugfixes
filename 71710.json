{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","commits":[{"id":"85032ab568b3f50eabd577aaa994ba197db93758","date":1404157267,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean,boolean).mjava","sourceNew":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    // We can register a core when creating them via the admin UI, so we need to insure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    // We can register a core when creating them via the admin UI, so we need to insure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d629ca62e3b8ab6e29a127aebe213163d490413","date":1405524223,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    // We can register a core when creating them via the admin UI, so we need to insure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    // We can register a core when creating them via the admin UI, so we need to insure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    // We can register a core when creating them via the admin UI, so we need to insure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been close\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    // We can register a core when creating them via the admin UI, so we need to insure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e1c8e1340d9e31d2c6bee5f72d9040ce569049","date":1431584404,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    // We can register a core when creating them via the admin UI, so we need to insure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been close\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    // We can register a core when creating them via the admin UI, so we need to insure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been close\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb65cc25534f4e0d77ed573d35995eb0b836b818","date":1454441028,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    // We can register a core when creating them via the admin UI, so we need to ensure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been close\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    // We can register a core when creating them via the admin UI, so we need to insure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been close\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd1f5a977dc3b97799ed300423294e2c457774f","date":1454537003,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    // We can register a core when creating them via the admin UI, so we need to ensure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been close\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    // We can register a core when creating them via the admin UI, so we need to insure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been close\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    // We can register a core when creating them via the admin UI, so we need to ensure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been close\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    // We can register a core when creating them via the admin UI, so we need to insure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been close\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9362075f92dff89425ca488b480f70d565d66e7","date":1454985541,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    // We can register a core when creating them via the admin UI, so we need to ensure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    // We can register a core when creating them via the admin UI, so we need to ensure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been close\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    // We can register a core when creating them via the admin UI, so we need to ensure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    // We can register a core when creating them via the admin UI, so we need to ensure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    // We can register a core when creating them via the admin UI, so we need to ensure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    // We can register a core when creating them via the admin UI, so we need to ensure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    // We can register a core when creating them via the admin UI, so we need to ensure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    // We can register a core when creating them via the admin UI, so we need to ensure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d528fd7ae22865015b756e0a03832e2051de2a9c","date":1476721105,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    // We can register a core when creating them via the admin UI, so we need to ensure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    // We can register a core when creating them via the admin UI, so we need to ensure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","sourceNew":null,"sourceOld":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    // We can register a core when creating them via the admin UI, so we need to ensure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"acd1f5a977dc3b97799ed300423294e2c457774f":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049","fb65cc25534f4e0d77ed573d35995eb0b836b818"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049","fb65cc25534f4e0d77ed573d35995eb0b836b818"],"fb65cc25534f4e0d77ed573d35995eb0b836b818":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["f9362075f92dff89425ca488b480f70d565d66e7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f9362075f92dff89425ca488b480f70d565d66e7","d528fd7ae22865015b756e0a03832e2051de2a9c"],"126d6ad24eed13163ba0959435d5a80e5672837c":["f9362075f92dff89425ca488b480f70d565d66e7","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f9362075f92dff89425ca488b480f70d565d66e7","126d6ad24eed13163ba0959435d5a80e5672837c"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2d629ca62e3b8ab6e29a127aebe213163d490413"],"2d629ca62e3b8ab6e29a127aebe213163d490413":["85032ab568b3f50eabd577aaa994ba197db93758"],"f9362075f92dff89425ca488b480f70d565d66e7":["fb65cc25534f4e0d77ed573d35995eb0b836b818"],"85032ab568b3f50eabd577aaa994ba197db93758":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d528fd7ae22865015b756e0a03832e2051de2a9c"],"00e1c8e1340d9e31d2c6bee5f72d9040ce569049":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"acd1f5a977dc3b97799ed300423294e2c457774f":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"fb65cc25534f4e0d77ed573d35995eb0b836b818":["acd1f5a977dc3b97799ed300423294e2c457774f","1e6acbaae7af722f17204ceccf0f7db5753eccf3","f9362075f92dff89425ca488b480f70d565d66e7"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d528fd7ae22865015b756e0a03832e2051de2a9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85032ab568b3f50eabd577aaa994ba197db93758"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"2d629ca62e3b8ab6e29a127aebe213163d490413":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"f9362075f92dff89425ca488b480f70d565d66e7":["7f0c8426396c925de8db3ed3f8ff40fd73670a5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"85032ab568b3f50eabd577aaa994ba197db93758":["2d629ca62e3b8ab6e29a127aebe213163d490413"],"00e1c8e1340d9e31d2c6bee5f72d9040ce569049":["acd1f5a977dc3b97799ed300423294e2c457774f","1e6acbaae7af722f17204ceccf0f7db5753eccf3","fb65cc25534f4e0d77ed573d35995eb0b836b818"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["acd1f5a977dc3b97799ed300423294e2c457774f","1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}