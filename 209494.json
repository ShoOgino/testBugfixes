{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/LZ4.HashTable#insertAndFindWiderMatch(byte[],int,int,int,int,Match).mjava","commits":[{"id":"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","date":1349450075,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/LZ4.HashTable#insertAndFindWiderMatch(byte[],int,int,int,int,Match).mjava","pathOld":"/dev/null","sourceNew":"    boolean insertAndFindWiderMatch(byte[] buf, int off, int startLimit, int matchLimit, int minLen, Match match) {\n      match.len = minLen;\n\n      insert(off, buf);\n\n      final int delta = off - startLimit;\n      int ref = hashPointer(buf, off);\n      for (int i = 0; i < MAX_ATTEMPTS; ++i) {\n        if (ref < Math.max(base, off - MAX_DISTANCE + 1)) {\n          break;\n        }\n        if (buf[ref - delta + match.len] == buf[startLimit + match.len]\n            && readIntEquals(buf, ref, off)) {\n          final int matchLenForward = MIN_MATCH + commonBytes(buf, ref + MIN_MATCH, off + MIN_MATCH, matchLimit);\n          final int matchLenBackward = commonBytesBackward(buf, ref, off, base, startLimit);\n          final int matchLen = matchLenBackward + matchLenForward;\n          if (matchLen > match.len) {\n            match.len = matchLen;\n            match.ref = ref - matchLenBackward;\n            match.start = off - matchLenBackward;\n          }\n        }\n        ref = next(ref);\n      }\n\n      return match.len > minLen;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HashTable#insertAndFindWiderMatch(byte[],int,int,int,int,Match).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/LZ4.HashTable#insertAndFindWiderMatch(byte[],int,int,int,int,Match).mjava","sourceNew":"    boolean insertAndFindWiderMatch(byte[] buf, int off, int startLimit, int matchLimit, int minLen, Match match) {\n      match.len = minLen;\n\n      insert(off, buf);\n\n      final int delta = off - startLimit;\n      int ref = hashPointer(buf, off);\n      for (int i = 0; i < MAX_ATTEMPTS; ++i) {\n        if (ref < Math.max(base, off - MAX_DISTANCE + 1)) {\n          break;\n        }\n        if (buf[ref - delta + match.len] == buf[startLimit + match.len]\n            && readIntEquals(buf, ref, off)) {\n          final int matchLenForward = MIN_MATCH + commonBytes(buf, ref + MIN_MATCH, off + MIN_MATCH, matchLimit);\n          final int matchLenBackward = commonBytesBackward(buf, ref, off, base, startLimit);\n          final int matchLen = matchLenBackward + matchLenForward;\n          if (matchLen > match.len) {\n            match.len = matchLen;\n            match.ref = ref - matchLenBackward;\n            match.start = off - matchLenBackward;\n          }\n        }\n        ref = next(ref);\n      }\n\n      return match.len > minLen;\n    }\n\n","sourceOld":"    boolean insertAndFindWiderMatch(byte[] buf, int off, int startLimit, int matchLimit, int minLen, Match match) {\n      match.len = minLen;\n\n      insert(off, buf);\n\n      final int delta = off - startLimit;\n      int ref = hashPointer(buf, off);\n      for (int i = 0; i < MAX_ATTEMPTS; ++i) {\n        if (ref < Math.max(base, off - MAX_DISTANCE + 1)) {\n          break;\n        }\n        if (buf[ref - delta + match.len] == buf[startLimit + match.len]\n            && readIntEquals(buf, ref, off)) {\n          final int matchLenForward = MIN_MATCH + commonBytes(buf, ref + MIN_MATCH, off + MIN_MATCH, matchLimit);\n          final int matchLenBackward = commonBytesBackward(buf, ref, off, base, startLimit);\n          final int matchLen = matchLenBackward + matchLenForward;\n          if (matchLen > match.len) {\n            match.len = matchLen;\n            match.ref = ref - matchLenBackward;\n            match.start = off - matchLenBackward;\n          }\n        }\n        ref = next(ref);\n      }\n\n      return match.len > minLen;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HashTable#insertAndFindWiderMatch(byte[],int,int,int,int,Match).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/LZ4.HashTable#insertAndFindWiderMatch(byte[],int,int,int,int,Match).mjava","sourceNew":"    boolean insertAndFindWiderMatch(byte[] buf, int off, int startLimit, int matchLimit, int minLen, Match match) {\n      match.len = minLen;\n\n      insert(off, buf);\n\n      final int delta = off - startLimit;\n      int ref = hashPointer(buf, off);\n      for (int i = 0; i < MAX_ATTEMPTS; ++i) {\n        if (ref < Math.max(base, off - MAX_DISTANCE + 1)) {\n          break;\n        }\n        if (buf[ref - delta + match.len] == buf[startLimit + match.len]\n            && readIntEquals(buf, ref, off)) {\n          final int matchLenForward = MIN_MATCH + commonBytes(buf, ref + MIN_MATCH, off + MIN_MATCH, matchLimit);\n          final int matchLenBackward = commonBytesBackward(buf, ref, off, base, startLimit);\n          final int matchLen = matchLenBackward + matchLenForward;\n          if (matchLen > match.len) {\n            match.len = matchLen;\n            match.ref = ref - matchLenBackward;\n            match.start = off - matchLenBackward;\n          }\n        }\n        ref = next(ref);\n      }\n\n      return match.len > minLen;\n    }\n\n","sourceOld":"    boolean insertAndFindWiderMatch(byte[] buf, int off, int startLimit, int matchLimit, int minLen, Match match) {\n      match.len = minLen;\n\n      insert(off, buf);\n\n      final int delta = off - startLimit;\n      int ref = hashPointer(buf, off);\n      for (int i = 0; i < MAX_ATTEMPTS; ++i) {\n        if (ref < Math.max(base, off - MAX_DISTANCE + 1)) {\n          break;\n        }\n        if (buf[ref - delta + match.len] == buf[startLimit + match.len]\n            && readIntEquals(buf, ref, off)) {\n          final int matchLenForward = MIN_MATCH + commonBytes(buf, ref + MIN_MATCH, off + MIN_MATCH, matchLimit);\n          final int matchLenBackward = commonBytesBackward(buf, ref, off, base, startLimit);\n          final int matchLen = matchLenBackward + matchLenForward;\n          if (matchLen > match.len) {\n            match.len = matchLen;\n            match.ref = ref - matchLenBackward;\n            match.start = off - matchLenBackward;\n          }\n        }\n        ref = next(ref);\n      }\n\n      return match.len > minLen;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"]},"commit2Childs":{"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}