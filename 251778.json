{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#copy(LightAutomaton).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#copy(LightAutomaton).mjava","pathOld":"/dev/null","sourceNew":"  /** Copies over all states/transitions from other. */\n  public void copy(LightAutomaton other) {\n    int offset = getNumStates();\n    int otherNumStates = other.getNumStates();\n    for(int s=0;s<otherNumStates;s++) {\n      createState();\n      setAccept(offset+s, other.isAccept(s));\n    }\n    Transition t = new Transition();\n    for(int s=0;s<otherNumStates;s++) {\n      int count = other.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        other.getNextTransition(t);\n        addTransition(offset + s, offset + t.dest, t.min, t.max);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67285d1a68175d877eb9fd1624fccad3db028ff","date":1402779028,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#copy(LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#copy(LightAutomaton).mjava","sourceNew":"  /** Copies over all states/transitions from other.  The states numbers\n   *  are sequentially assigned (appended). */\n  public void copy(LightAutomaton other) {\n\n    int offset = getNumStates();\n    /*\n    int otherNumStates = other.getNumStates();\n    for(int s=0;s<otherNumStates;s++) {\n      createState();\n      setAccept(offset+s, other.isAccept(s));\n    }\n    Transition t = new Transition();\n    for(int s=0;s<otherNumStates;s++) {\n      int count = other.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        other.getNextTransition(t);\n        addTransition(offset + s, offset + t.dest, t.min, t.max);\n      }\n    }\n    */\n\n    // Bulk copy and then fixup the state pointers:\n    int stateOffset = getNumStates();\n    states = ArrayUtil.grow(states, nextState + other.nextState);\n    System.arraycopy(other.states, 0, states, nextState, other.nextState);\n    for(int i=0;i<other.nextState;i += 2) {\n      if (states[nextState+i] != -1) {\n        states[nextState+i] += nextTransition;\n      }\n      int state = i/2;\n      if (other.isAccept(state)) {\n        setAccept(stateOffset+state, true);\n      }\n    }\n    nextState += other.nextState;\n\n    // Bulk copy and then fixup dest for each transition:\n    transitions = ArrayUtil.grow(transitions, nextTransition + other.nextTransition);\n    System.arraycopy(other.transitions, 0, transitions, nextTransition, other.nextTransition);\n    for(int i=0;i<other.nextTransition;i += 3) {\n      transitions[nextTransition+i] += stateOffset;\n    }\n    nextTransition += other.nextTransition;\n\n    if (other.deterministic == false) {\n      deterministic = false;\n    }\n  }\n\n","sourceOld":"  /** Copies over all states/transitions from other. */\n  public void copy(LightAutomaton other) {\n    int offset = getNumStates();\n    int otherNumStates = other.getNumStates();\n    for(int s=0;s<otherNumStates;s++) {\n      createState();\n      setAccept(offset+s, other.isAccept(s));\n    }\n    Transition t = new Transition();\n    for(int s=0;s<otherNumStates;s++) {\n      int count = other.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        other.getNextTransition(t);\n        addTransition(offset + s, offset + t.dest, t.min, t.max);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#copy(LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#copy(LightAutomaton).mjava","sourceNew":"  /** Copies over all states/transitions from other.  The states numbers\n   *  are sequentially assigned (appended). */\n  public void copy(LightAutomaton other) {\n\n    int offset = getNumStates();\n    /*\n    int otherNumStates = other.getNumStates();\n    for(int s=0;s<otherNumStates;s++) {\n      createState();\n      setAccept(offset+s, other.isAccept(s));\n    }\n    Transition t = new Transition();\n    for(int s=0;s<otherNumStates;s++) {\n      int count = other.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        other.getNextTransition(t);\n        addTransition(offset + s, offset + t.dest, t.min, t.max);\n      }\n    }\n    */\n\n    // Bulk copy and then fixup the state pointers:\n    int stateOffset = getNumStates();\n    states = ArrayUtil.grow(states, nextState + other.nextState);\n    System.arraycopy(other.states, 0, states, nextState, other.nextState);\n    for(int i=0;i<other.nextState;i += 2) {\n      if (states[nextState+i] != -1) {\n        states[nextState+i] += nextTransition;\n      }\n      int state = i/2;\n    }\n    nextState += other.nextState;\n\n    for(int s : other.getAcceptStates()) {\n      setAccept(stateOffset+s, true);\n    }\n\n    // Bulk copy and then fixup dest for each transition:\n    transitions = ArrayUtil.grow(transitions, nextTransition + other.nextTransition);\n    System.arraycopy(other.transitions, 0, transitions, nextTransition, other.nextTransition);\n    for(int i=0;i<other.nextTransition;i += 3) {\n      transitions[nextTransition+i] += stateOffset;\n    }\n    nextTransition += other.nextTransition;\n\n    if (other.deterministic == false) {\n      deterministic = false;\n    }\n  }\n\n","sourceOld":"  /** Copies over all states/transitions from other.  The states numbers\n   *  are sequentially assigned (appended). */\n  public void copy(LightAutomaton other) {\n\n    int offset = getNumStates();\n    /*\n    int otherNumStates = other.getNumStates();\n    for(int s=0;s<otherNumStates;s++) {\n      createState();\n      setAccept(offset+s, other.isAccept(s));\n    }\n    Transition t = new Transition();\n    for(int s=0;s<otherNumStates;s++) {\n      int count = other.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        other.getNextTransition(t);\n        addTransition(offset + s, offset + t.dest, t.min, t.max);\n      }\n    }\n    */\n\n    // Bulk copy and then fixup the state pointers:\n    int stateOffset = getNumStates();\n    states = ArrayUtil.grow(states, nextState + other.nextState);\n    System.arraycopy(other.states, 0, states, nextState, other.nextState);\n    for(int i=0;i<other.nextState;i += 2) {\n      if (states[nextState+i] != -1) {\n        states[nextState+i] += nextTransition;\n      }\n      int state = i/2;\n      if (other.isAccept(state)) {\n        setAccept(stateOffset+state, true);\n      }\n    }\n    nextState += other.nextState;\n\n    // Bulk copy and then fixup dest for each transition:\n    transitions = ArrayUtil.grow(transitions, nextTransition + other.nextTransition);\n    System.arraycopy(other.transitions, 0, transitions, nextTransition, other.nextTransition);\n    for(int i=0;i<other.nextTransition;i += 3) {\n      transitions[nextTransition+i] += stateOffset;\n    }\n    nextTransition += other.nextTransition;\n\n    if (other.deterministic == false) {\n      deterministic = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#copy(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#copy(LightAutomaton).mjava","sourceNew":"  /** Copies over all states/transitions from other.  The states numbers\n   *  are sequentially assigned (appended). */\n  public void copy(Automaton other) {\n\n    int offset = getNumStates();\n    /*\n    int otherNumStates = other.getNumStates();\n    for(int s=0;s<otherNumStates;s++) {\n      createState();\n      setAccept(offset+s, other.isAccept(s));\n    }\n    Transition t = new Transition();\n    for(int s=0;s<otherNumStates;s++) {\n      int count = other.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        other.getNextTransition(t);\n        addTransition(offset + s, offset + t.dest, t.min, t.max);\n      }\n    }\n    */\n\n    // Bulk copy and then fixup the state pointers:\n    int stateOffset = getNumStates();\n    states = ArrayUtil.grow(states, nextState + other.nextState);\n    System.arraycopy(other.states, 0, states, nextState, other.nextState);\n    for(int i=0;i<other.nextState;i += 2) {\n      if (states[nextState+i] != -1) {\n        states[nextState+i] += nextTransition;\n      }\n      int state = i/2;\n    }\n    nextState += other.nextState;\n\n    for(int s : other.getAcceptStates()) {\n      setAccept(stateOffset+s, true);\n    }\n\n    // Bulk copy and then fixup dest for each transition:\n    transitions = ArrayUtil.grow(transitions, nextTransition + other.nextTransition);\n    System.arraycopy(other.transitions, 0, transitions, nextTransition, other.nextTransition);\n    for(int i=0;i<other.nextTransition;i += 3) {\n      transitions[nextTransition+i] += stateOffset;\n    }\n    nextTransition += other.nextTransition;\n\n    if (other.deterministic == false) {\n      deterministic = false;\n    }\n  }\n\n","sourceOld":"  /** Copies over all states/transitions from other.  The states numbers\n   *  are sequentially assigned (appended). */\n  public void copy(LightAutomaton other) {\n\n    int offset = getNumStates();\n    /*\n    int otherNumStates = other.getNumStates();\n    for(int s=0;s<otherNumStates;s++) {\n      createState();\n      setAccept(offset+s, other.isAccept(s));\n    }\n    Transition t = new Transition();\n    for(int s=0;s<otherNumStates;s++) {\n      int count = other.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        other.getNextTransition(t);\n        addTransition(offset + s, offset + t.dest, t.min, t.max);\n      }\n    }\n    */\n\n    // Bulk copy and then fixup the state pointers:\n    int stateOffset = getNumStates();\n    states = ArrayUtil.grow(states, nextState + other.nextState);\n    System.arraycopy(other.states, 0, states, nextState, other.nextState);\n    for(int i=0;i<other.nextState;i += 2) {\n      if (states[nextState+i] != -1) {\n        states[nextState+i] += nextTransition;\n      }\n      int state = i/2;\n    }\n    nextState += other.nextState;\n\n    for(int s : other.getAcceptStates()) {\n      setAccept(stateOffset+s, true);\n    }\n\n    // Bulk copy and then fixup dest for each transition:\n    transitions = ArrayUtil.grow(transitions, nextTransition + other.nextTransition);\n    System.arraycopy(other.transitions, 0, transitions, nextTransition, other.nextTransition);\n    for(int i=0;i<other.nextTransition;i += 3) {\n      transitions[nextTransition+i] += stateOffset;\n    }\n    nextTransition += other.nextTransition;\n\n    if (other.deterministic == false) {\n      deterministic = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}