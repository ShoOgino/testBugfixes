{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestExpungeDeletes3().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestExpungeDeletes3().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void xxxtestExpungeDeletes3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    // Force many merges to happen\n    writer.setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    // Force many merges to happen\n    writer.setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestExpungeDeletes3().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    // Force many merges to happen\n    writer.setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void xxxtestExpungeDeletes3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    // Force many merges to happen\n    writer.setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}