{"path":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(StoredDocument).mjava","commits":[{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(StoredDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","sourceNew":"    public SolrDocument getDoc(StoredDocument doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (StorableField f : doc) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        \n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        Object val = null;\n        try {\n          val = getValue(sf,f);\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          //if it happens log it and continue\n          continue;\n        }\n          \n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","sourceOld":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (IndexableField f : doc) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        \n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        Object val = null;\n        try {\n          val = getValue(sf,f);\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          //if it happens log it and continue\n          continue;\n        }\n          \n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(StoredDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","sourceNew":"    public SolrDocument getDoc(StoredDocument doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (StorableField f : doc) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        \n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        Object val = null;\n        try {\n          val = getValue(sf,f);\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          //if it happens log it and continue\n          continue;\n        }\n          \n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","sourceOld":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (IndexableField f : doc) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        \n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        Object val = null;\n        try {\n          val = getValue(sf,f);\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          //if it happens log it and continue\n          continue;\n        }\n          \n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(StoredDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(StoredDocument).mjava","sourceNew":"    public SolrDocument getDoc(StoredDocument doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (StorableField f : doc) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        \n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        Object val = null;\n        try {\n          val = getValue(sf,f);\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          //if it happens log it and continue\n          continue;\n        }\n          \n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","sourceOld":"    public SolrDocument getDoc(StoredDocument doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (StorableField f : doc) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        \n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        Object val = null;\n        try {\n          val = getValue(sf,f);\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          //if it happens log it and continue\n          continue;\n        }\n          \n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(StoredDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(StoredDocument).mjava","sourceNew":"    public SolrDocument getDoc(StoredDocument doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (StorableField f : doc) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        \n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        Object val = null;\n        try {\n          val = getValue(sf,f);\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          //if it happens log it and continue\n          continue;\n        }\n          \n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","sourceOld":"    public SolrDocument getDoc(StoredDocument doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (StorableField f : doc) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        \n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        Object val = null;\n        try {\n          val = getValue(sf,f);\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          //if it happens log it and continue\n          continue;\n        }\n          \n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"204c8bd48c409f38fbe240108b1155caede6962c","date":1405927524,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(StoredDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(StoredDocument).mjava","sourceNew":"    public SolrDocument getDoc(StoredDocument doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (StorableField f : doc) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) )\n          continue;\n\n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        Object val = null;\n        try {\n          val = getValue(sf,f);\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          //if it happens log it and continue\n          continue;\n        }\n          \n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","sourceOld":"    public SolrDocument getDoc(StoredDocument doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (StorableField f : doc) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        \n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        Object val = null;\n        try {\n          val = getValue(sf,f);\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          //if it happens log it and continue\n          continue;\n        }\n          \n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","bugFix":["794957d0f3853445bdf9319bfb72f8b8c2443a7d","14fd29e977ffb76db89d8ecd4fd70fbd9a51d390"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9","date":1434467834,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(StoredDocument).mjava","sourceNew":null,"sourceOld":"    public SolrDocument getDoc(StoredDocument doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (StorableField f : doc) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) )\n          continue;\n\n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        Object val = null;\n        try {\n          val = getValue(sf,f);\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          //if it happens log it and continue\n          continue;\n        }\n          \n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["1d028314cced5858683a1bb4741423d0f934257b","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"204c8bd48c409f38fbe240108b1155caede6962c":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["1d028314cced5858683a1bb4741423d0f934257b"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["204c8bd48c409f38fbe240108b1155caede6962c"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"]},"commit2Childs":{"1d028314cced5858683a1bb4741423d0f934257b":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","204c8bd48c409f38fbe240108b1155caede6962c"],"204c8bd48c409f38fbe240108b1155caede6962c":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}