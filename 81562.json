{"path":"lucene/src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(AtomicReaderContext).mjava","commits":[{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(IndexReader).mjava","sourceNew":"  @Override\n  public SpanFilterResult bitSpans(AtomicReaderContext context) throws IOException {\n\n    final OpenBitSet bits = new OpenBitSet(context.reader.maxDoc());\n    Spans spans = query.getSpans(context);\n    List<SpanFilterResult.PositionInfo> tmp = new ArrayList<SpanFilterResult.PositionInfo>(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","sourceOld":"  @Override\n  public SpanFilterResult bitSpans(IndexReader reader) throws IOException {\n\n    final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\n    Spans spans = query.getSpans(reader);\n    List<SpanFilterResult.PositionInfo> tmp = new ArrayList<SpanFilterResult.PositionInfo>(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(IndexReader).mjava","sourceNew":"  @Override\n  public SpanFilterResult bitSpans(AtomicReaderContext context) throws IOException {\n\n    final OpenBitSet bits = new OpenBitSet(context.reader.maxDoc());\n    Spans spans = query.getSpans(context);\n    List<SpanFilterResult.PositionInfo> tmp = new ArrayList<SpanFilterResult.PositionInfo>(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","sourceOld":"  @Override\n  public SpanFilterResult bitSpans(IndexReader reader) throws IOException {\n\n    final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\n    Spans spans = query.getSpans(reader);\n    List<SpanFilterResult.PositionInfo> tmp = new ArrayList<SpanFilterResult.PositionInfo>(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SpanFilterResult bitSpans(AtomicReaderContext context) throws IOException {\n\n    final OpenBitSet bits = new OpenBitSet(context.reader.maxDoc());\n    Spans spans = query.getSpans(context);\n    List<SpanFilterResult.PositionInfo> tmp = new ArrayList<SpanFilterResult.PositionInfo>(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public SpanFilterResult bitSpans(AtomicReaderContext context) throws IOException {\n\n    final FixedBitSet bits = new FixedBitSet(context.reader.maxDoc());\n    Spans spans = query.getSpans(context);\n    List<SpanFilterResult.PositionInfo> tmp = new ArrayList<SpanFilterResult.PositionInfo>(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","sourceOld":"  @Override\n  public SpanFilterResult bitSpans(AtomicReaderContext context) throws IOException {\n\n    final OpenBitSet bits = new OpenBitSet(context.reader.maxDoc());\n    Spans spans = query.getSpans(context);\n    List<SpanFilterResult.PositionInfo> tmp = new ArrayList<SpanFilterResult.PositionInfo>(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public SpanFilterResult bitSpans(AtomicReaderContext context) throws IOException {\n\n    final FixedBitSet bits = new FixedBitSet(context.reader.maxDoc());\n    Spans spans = query.getSpans(context, context.reader.getLiveDocs());\n    List<SpanFilterResult.PositionInfo> tmp = new ArrayList<SpanFilterResult.PositionInfo>(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","sourceOld":"  @Override\n  public SpanFilterResult bitSpans(AtomicReaderContext context) throws IOException {\n\n    final FixedBitSet bits = new FixedBitSet(context.reader.maxDoc());\n    Spans spans = query.getSpans(context);\n    List<SpanFilterResult.PositionInfo> tmp = new ArrayList<SpanFilterResult.PositionInfo>(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public SpanFilterResult bitSpans(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n\n    final FixedBitSet bits = new FixedBitSet(context.reader.maxDoc());\n    Spans spans = query.getSpans(context, acceptDocs);\n    List<SpanFilterResult.PositionInfo> tmp = new ArrayList<SpanFilterResult.PositionInfo>(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","sourceOld":"  @Override\n  public SpanFilterResult bitSpans(AtomicReaderContext context) throws IOException {\n\n    final FixedBitSet bits = new FixedBitSet(context.reader.maxDoc());\n    Spans spans = query.getSpans(context, context.reader.getLiveDocs());\n    List<SpanFilterResult.PositionInfo> tmp = new ArrayList<SpanFilterResult.PositionInfo>(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"c8323d210478d76a02372693d254b69aac614689":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8323d210478d76a02372693d254b69aac614689"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["c8323d210478d76a02372693d254b69aac614689"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6620df8541b174097b1133a4fc370adb2e570524"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8323d210478d76a02372693d254b69aac614689"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8323d210478d76a02372693d254b69aac614689":["29ef99d61cda9641b6250bf9567329a6e65f901d","c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["6620df8541b174097b1133a4fc370adb2e570524"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8323d210478d76a02372693d254b69aac614689","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}