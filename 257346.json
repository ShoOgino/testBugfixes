{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger[FacetModule]#getMergedResult().mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger[FacetModule]#getMergedResult().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    int first = (int)freq.offset;\n    int end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    int last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b65e1e1139651e98138d35a941b15107427618e3","b65e1e1139651e98138d35a941b15107427618e3","b65e1e1139651e98138d35a941b15107427618e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger[FacetModule]#getMergedResult().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    int first = (int)freq.offset;\n    int end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    int last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1931d98b40b01d5075753b197c2461a5c2652689","date":1471971289,"type":5,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger[FacetModule]#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    int first = (int)freq.offset;\n    int end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    int last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    int first = (int)freq.offset;\n    int end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    int last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger[FacetModule]#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    int first = (int)freq.offset;\n    int end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    int last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    int first = (int)freq.offset;\n    int end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    int last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger[FacetModule]#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    int first = (int)freq.offset;\n    int end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    int last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    int first = (int)freq.offset;\n    int end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    int last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1931d98b40b01d5075753b197c2461a5c2652689":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","1931d98b40b01d5075753b197c2461a5c2652689"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1931d98b40b01d5075753b197c2461a5c2652689","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1931d98b40b01d5075753b197c2461a5c2652689":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}