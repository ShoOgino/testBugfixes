{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/cjk/TestCJKTokenizer#checkCJKToken(String,TestToken[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/cjk/TestCJKTokenizer#checkCJKToken(String,TestToken[]).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cjk/TestCJKTokenizer#checkCJKToken(String,TestToken[]).mjava","sourceNew":"  public void checkCJKToken(final String str, final TestToken[] out_tokens) throws IOException {\n    Analyzer analyzer = new CJKAnalyzer(TEST_VERSION_CURRENT);\n    String terms[] = new String[out_tokens.length];\n    int startOffsets[] = new int[out_tokens.length];\n    int endOffsets[] = new int[out_tokens.length];\n    String types[] = new String[out_tokens.length];\n    for (int i = 0; i < out_tokens.length; i++) {\n      terms[i] = out_tokens[i].termText;\n      startOffsets[i] = out_tokens[i].start;\n      endOffsets[i] = out_tokens[i].end;\n      types[i] = out_tokens[i].type;\n    }\n    assertAnalyzesTo(analyzer, str, terms, startOffsets, endOffsets, types, null);\n  }\n\n","sourceOld":"  public void checkCJKToken(final String str, final TestToken[] out_tokens) throws IOException {\n    Analyzer analyzer = new CJKAnalyzer(TEST_VERSION_CURRENT);\n    String terms[] = new String[out_tokens.length];\n    int startOffsets[] = new int[out_tokens.length];\n    int endOffsets[] = new int[out_tokens.length];\n    String types[] = new String[out_tokens.length];\n    for (int i = 0; i < out_tokens.length; i++) {\n      terms[i] = out_tokens[i].termText;\n      startOffsets[i] = out_tokens[i].start;\n      endOffsets[i] = out_tokens[i].end;\n      types[i] = out_tokens[i].type;\n    }\n    assertAnalyzesTo(analyzer, str, terms, startOffsets, endOffsets, types, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKTokenizer#checkCJKToken(String,TestToken[]).mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/cjk/TestCJKTokenizer#checkCJKToken(String,TestToken[]).mjava","sourceNew":"  public void checkCJKToken(final String str, final TestToken[] out_tokens) throws IOException {\n    Analyzer analyzer = new CJKAnalyzer(TEST_VERSION_CURRENT);\n    String terms[] = new String[out_tokens.length];\n    int startOffsets[] = new int[out_tokens.length];\n    int endOffsets[] = new int[out_tokens.length];\n    String types[] = new String[out_tokens.length];\n    for (int i = 0; i < out_tokens.length; i++) {\n      terms[i] = out_tokens[i].termText;\n      startOffsets[i] = out_tokens[i].start;\n      endOffsets[i] = out_tokens[i].end;\n      types[i] = out_tokens[i].type;\n    }\n    assertAnalyzesTo(analyzer, str, terms, startOffsets, endOffsets, types, null);\n  }\n\n","sourceOld":"  public void checkCJKToken(final String str, final TestToken[] out_tokens) throws IOException {\n    Analyzer analyzer = new CJKAnalyzer(TEST_VERSION_CURRENT);\n    String terms[] = new String[out_tokens.length];\n    int startOffsets[] = new int[out_tokens.length];\n    int endOffsets[] = new int[out_tokens.length];\n    String types[] = new String[out_tokens.length];\n    for (int i = 0; i < out_tokens.length; i++) {\n      terms[i] = out_tokens[i].termText;\n      startOffsets[i] = out_tokens[i].start;\n      endOffsets[i] = out_tokens[i].end;\n      types[i] = out_tokens[i].type;\n    }\n    assertAnalyzesTo(analyzer, str, terms, startOffsets, endOffsets, types, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}