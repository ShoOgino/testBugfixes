{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testFlattenInnerDisjunctions().mjava","commits":[{"id":"a29d706f87429cdcfeb9131846f87d40087fd858","date":1555579490,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testFlattenInnerDisjunctions().mjava","pathOld":"/dev/null","sourceNew":"  public void testFlattenInnerDisjunctions() throws IOException {\n    IndexSearcher searcher = newSearcher(new MultiReader());\n\n    Query inner = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"quux\")), Occur.SHOULD)\n        .build();\n    Query query = new BooleanQuery.Builder()\n        .add(inner, Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n        .build();\n    Query expectedRewritten = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"quux\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n        .build();\n    assertEquals(expectedRewritten, searcher.rewrite(query));\n\n    query = new BooleanQuery.Builder()\n        .setMinimumNumberShouldMatch(0)\n        .add(inner, Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST)\n        .build();\n    expectedRewritten = new BooleanQuery.Builder()\n        .setMinimumNumberShouldMatch(0)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"quux\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST)\n        .build();\n    assertEquals(expectedRewritten, searcher.rewrite(query));\n\n    query = new BooleanQuery.Builder()\n        .setMinimumNumberShouldMatch(1)\n        .add(inner, Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST)\n        .build();\n    expectedRewritten = new BooleanQuery.Builder()\n        .setMinimumNumberShouldMatch(1)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"quux\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST)\n        .build();\n    assertEquals(expectedRewritten, searcher.rewrite(query));\n\n    query = new BooleanQuery.Builder()\n        .setMinimumNumberShouldMatch(2)\n        .add(inner, Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST)\n        .build();\n    assertSame(query, searcher.rewrite(query));\n\n    inner = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"quux\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n        .setMinimumNumberShouldMatch(2)\n        .build();\n    query = new BooleanQuery.Builder()\n        .add(inner, Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n        .build();\n    assertSame(query, searcher.rewrite(query));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a29d706f87429cdcfeb9131846f87d40087fd858":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a29d706f87429cdcfeb9131846f87d40087fd858"]},"commit2Childs":{"a29d706f87429cdcfeb9131846f87d40087fd858":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a29d706f87429cdcfeb9131846f87d40087fd858"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}