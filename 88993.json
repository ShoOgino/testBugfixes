{"path":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermEnum(reader,this, prefix==null?\"\":prefix, 0) {\n      ArrayList<String> lst;\n\n      protected boolean setTerm() {\n        boolean b = super.setTerm();\n        if (b && (pos & intervalMask)==0) {\n          String text = term().text();\n          sizeOfStrings += text.length() << 1;\n          if (lst==null) {\n            lst = new ArrayList<String>();\n          }\n          lst.add(text);\n        }\n        return b;\n      }\n\n      public boolean skipTo(Term target) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public boolean skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new String[lst.size()]) : new String[0];\n      }\n    };\n    else return new NumberedTermEnum(reader,this,\"\",0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","sourceNew":null,"sourceOld":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermEnum(reader,this, prefix==null?\"\":prefix, 0) {\n      ArrayList<String> lst;\n\n      protected boolean setTerm() {\n        boolean b = super.setTerm();\n        if (b && (pos & intervalMask)==0) {\n          String text = term().text();\n          sizeOfStrings += text.length() << 1;\n          if (lst==null) {\n            lst = new ArrayList<String>();\n          }\n          lst.add(text);\n        }\n        return b;\n      }\n\n      public boolean skipTo(Term target) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public boolean skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new String[lst.size()]) : new String[0];\n      }\n    };\n    else return new NumberedTermEnum(reader,this,\"\",0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","pathOld":"src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","sourceNew":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermEnum(reader,this, prefix==null?\"\":prefix, 0) {\n      ArrayList<String> lst;\n\n      protected boolean setTerm() {\n        boolean b = super.setTerm();\n        if (b && (pos & intervalMask)==0) {\n          String text = term().text();\n          sizeOfStrings += text.length() << 1;\n          if (lst==null) {\n            lst = new ArrayList<String>();\n          }\n          lst.add(text);\n        }\n        return b;\n      }\n\n      public boolean skipTo(Term target) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public boolean skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new String[lst.size()]) : new String[0];\n      }\n    };\n    else return new NumberedTermEnum(reader,this,\"\",0);\n  }\n\n","sourceOld":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermEnum(reader,this, prefix==null?\"\":prefix, 0) {\n      ArrayList<String> lst;\n\n      protected boolean setTerm() {\n        boolean b = super.setTerm();\n        if (b && (pos & intervalMask)==0) {\n          String text = term().text();\n          sizeOfStrings += text.length() << 1;\n          if (lst==null) {\n            lst = new ArrayList<String>();\n          }\n          lst.add(text);\n        }\n        return b;\n      }\n\n      public boolean skipTo(Term target) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public boolean skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new String[lst.size()]) : new String[0];\n      }\n    };\n    else return new NumberedTermEnum(reader,this,\"\",0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermEnum(reader,this, prefix==null?\"\":prefix, 0) {\n      ArrayList<String> lst;\n\n      protected boolean setTerm() {\n        boolean b = super.setTerm();\n        if (b && (pos & intervalMask)==0) {\n          String text = term().text();\n          sizeOfStrings += text.length() << 1;\n          if (lst==null) {\n            lst = new ArrayList<String>();\n          }\n          lst.add(text);\n        }\n        return b;\n      }\n\n      public boolean skipTo(Term target) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public boolean skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new String[lst.size()]) : new String[0];\n      }\n    };\n    else return new NumberedTermEnum(reader,this,\"\",0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","sourceNew":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermsEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermsEnum(reader,this, prefix==null?new BytesRef():prefix, 0) {\n      ArrayList<BytesRef> lst;\n\n      protected BytesRef setTerm() throws IOException {\n        BytesRef br = super.setTerm();\n        if (br != null && (pos & intervalMask)==0) {\n          sizeOfStrings += br.length;\n          if (lst==null) {\n            lst = new ArrayList<BytesRef>();\n          }\n          lst.add(new BytesRef(br));\n        }\n        return br;\n      }\n\n      public BytesRef skipTo(Term target) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public BytesRef skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new BytesRef[lst.size()]) : new BytesRef[0];\n      }\n    };\n    else return new NumberedTermsEnum(reader,this,new BytesRef(),0);\n  }\n\n","sourceOld":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermEnum(reader,this, prefix==null?\"\":prefix, 0) {\n      ArrayList<String> lst;\n\n      protected boolean setTerm() {\n        boolean b = super.setTerm();\n        if (b && (pos & intervalMask)==0) {\n          String text = term().text();\n          sizeOfStrings += text.length() << 1;\n          if (lst==null) {\n            lst = new ArrayList<String>();\n          }\n          lst.add(text);\n        }\n        return b;\n      }\n\n      public boolean skipTo(Term target) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public boolean skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new String[lst.size()]) : new String[0];\n      }\n    };\n    else return new NumberedTermEnum(reader,this,\"\",0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87697f76828e4cfc6dc898262de8898e5010703f","date":1276817002,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","sourceNew":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermsEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermsEnum(reader,this, prefix==null?new BytesRef():prefix, 0) {\n      ArrayList<BytesRef> lst;\n      PagedBytes bytes;\n\n      protected BytesRef setTerm() throws IOException {\n        BytesRef br = super.setTerm();\n        if (br != null && (pos & intervalMask)==0) {\n          sizeOfStrings += br.length;\n          if (lst==null) {\n            lst = new ArrayList<BytesRef>();\n            bytes = new PagedBytes(15);\n          }\n          BytesRef out = new BytesRef();\n          bytes.copy(br, out);\n          lst.add(out);\n        }\n        return br;\n      }\n\n      public BytesRef skipTo(Term target) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public BytesRef skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new BytesRef[lst.size()]) : new BytesRef[0];\n      }\n    };\n    else return new NumberedTermsEnum(reader,this,new BytesRef(),0);\n  }\n\n","sourceOld":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermsEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermsEnum(reader,this, prefix==null?new BytesRef():prefix, 0) {\n      ArrayList<BytesRef> lst;\n\n      protected BytesRef setTerm() throws IOException {\n        BytesRef br = super.setTerm();\n        if (br != null && (pos & intervalMask)==0) {\n          sizeOfStrings += br.length;\n          if (lst==null) {\n            lst = new ArrayList<BytesRef>();\n          }\n          lst.add(new BytesRef(br));\n        }\n        return br;\n      }\n\n      public BytesRef skipTo(Term target) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public BytesRef skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new BytesRef[lst.size()]) : new BytesRef[0];\n      }\n    };\n    else return new NumberedTermsEnum(reader,this,new BytesRef(),0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","sourceNew":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermsEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermsEnum(reader,this, prefix==null?new BytesRef():prefix, 0) {\n      ArrayList<BytesRef> lst;\n      PagedBytes bytes;\n\n      protected BytesRef setTerm() throws IOException {\n        BytesRef br = super.setTerm();\n        if (br != null && (pos & intervalMask)==0) {\n          sizeOfStrings += br.length;\n          if (lst==null) {\n            lst = new ArrayList<BytesRef>();\n            bytes = new PagedBytes(15);\n          }\n          BytesRef out = new BytesRef();\n          bytes.copy(br, out);\n          lst.add(out);\n        }\n        return br;\n      }\n\n      public BytesRef skipTo(Term target) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public BytesRef skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new BytesRef[lst.size()]) : new BytesRef[0];\n      }\n    };\n    else return new NumberedTermsEnum(reader,this,new BytesRef(),0);\n  }\n\n","sourceOld":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermEnum(reader,this, prefix==null?\"\":prefix, 0) {\n      ArrayList<String> lst;\n\n      protected boolean setTerm() {\n        boolean b = super.setTerm();\n        if (b && (pos & intervalMask)==0) {\n          String text = term().text();\n          sizeOfStrings += text.length() << 1;\n          if (lst==null) {\n            lst = new ArrayList<String>();\n          }\n          lst.add(text);\n        }\n        return b;\n      }\n\n      public boolean skipTo(Term target) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public boolean skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new String[lst.size()]) : new String[0];\n      }\n    };\n    else return new NumberedTermEnum(reader,this,\"\",0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dd78aee280f1b3b91065adc74a9f5ea695f8802","date":1280154408,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","sourceNew":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermsEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermsEnum(reader,this, prefix==null?new BytesRef():prefix, 0) {\n      ArrayList<BytesRef> lst;\n      PagedBytes bytes;\n\n      protected BytesRef setTerm() throws IOException {\n        BytesRef br = super.setTerm();\n        if (br != null && (pos & intervalMask)==0) {\n          sizeOfStrings += br.length;\n          if (lst==null) {\n            lst = new ArrayList<BytesRef>();\n            bytes = new PagedBytes(15);\n          }\n          BytesRef out = new BytesRef();\n          bytes.copy(br, out);\n          lst.add(out);\n        }\n        return br;\n      }\n\n      public BytesRef skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new BytesRef[lst.size()]) : new BytesRef[0];\n      }\n    };\n    else return new NumberedTermsEnum(reader,this,new BytesRef(),0);\n  }\n\n","sourceOld":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermsEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermsEnum(reader,this, prefix==null?new BytesRef():prefix, 0) {\n      ArrayList<BytesRef> lst;\n      PagedBytes bytes;\n\n      protected BytesRef setTerm() throws IOException {\n        BytesRef br = super.setTerm();\n        if (br != null && (pos & intervalMask)==0) {\n          sizeOfStrings += br.length;\n          if (lst==null) {\n            lst = new ArrayList<BytesRef>();\n            bytes = new PagedBytes(15);\n          }\n          BytesRef out = new BytesRef();\n          bytes.copy(br, out);\n          lst.add(out);\n        }\n        return br;\n      }\n\n      public BytesRef skipTo(Term target) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public BytesRef skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new BytesRef[lst.size()]) : new BytesRef[0];\n      }\n    };\n    else return new NumberedTermsEnum(reader,this,new BytesRef(),0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","sourceNew":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermsEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermsEnum(reader,this, prefix==null?new BytesRef():prefix, 0) {\n      ArrayList<BytesRef> lst;\n      PagedBytes bytes;\n\n      protected BytesRef setTerm() throws IOException {\n        BytesRef br = super.setTerm();\n        if (br != null && (pos & intervalMask)==0) {\n          sizeOfStrings += br.length;\n          if (lst==null) {\n            lst = new ArrayList<BytesRef>();\n            bytes = new PagedBytes(15);\n          }\n          BytesRef out = new BytesRef();\n          bytes.copy(br, out);\n          lst.add(out);\n        }\n        return br;\n      }\n\n      public BytesRef skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new BytesRef[lst.size()]) : new BytesRef[0];\n      }\n    };\n    else return new NumberedTermsEnum(reader,this,new BytesRef(),0);\n  }\n\n","sourceOld":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermsEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermsEnum(reader,this, prefix==null?new BytesRef():prefix, 0) {\n      ArrayList<BytesRef> lst;\n      PagedBytes bytes;\n\n      protected BytesRef setTerm() throws IOException {\n        BytesRef br = super.setTerm();\n        if (br != null && (pos & intervalMask)==0) {\n          sizeOfStrings += br.length;\n          if (lst==null) {\n            lst = new ArrayList<BytesRef>();\n            bytes = new PagedBytes(15);\n          }\n          BytesRef out = new BytesRef();\n          bytes.copy(br, out);\n          lst.add(out);\n        }\n        return br;\n      }\n\n      public BytesRef skipTo(Term target) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public BytesRef skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new BytesRef[lst.size()]) : new BytesRef[0];\n      }\n    };\n    else return new NumberedTermsEnum(reader,this,new BytesRef(),0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","sourceNew":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermsEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermsEnum(reader,this, prefix==null?new BytesRef():prefix, 0) {\n      ArrayList<BytesRef> lst;\n      PagedBytes bytes;\n\n      @Override\n      protected BytesRef setTerm() throws IOException {\n        BytesRef br = super.setTerm();\n        if (br != null && (pos & intervalMask)==0) {\n          sizeOfStrings += br.length;\n          if (lst==null) {\n            lst = new ArrayList<BytesRef>();\n            bytes = new PagedBytes(15);\n          }\n          BytesRef out = new BytesRef();\n          bytes.copy(br, out);\n          lst.add(out);\n        }\n        return br;\n      }\n\n      @Override\n      public BytesRef skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new BytesRef[lst.size()]) : new BytesRef[0];\n      }\n    };\n    else return new NumberedTermsEnum(reader,this,new BytesRef(),0);\n  }\n\n","sourceOld":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermsEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermsEnum(reader,this, prefix==null?new BytesRef():prefix, 0) {\n      ArrayList<BytesRef> lst;\n      PagedBytes bytes;\n\n      protected BytesRef setTerm() throws IOException {\n        BytesRef br = super.setTerm();\n        if (br != null && (pos & intervalMask)==0) {\n          sizeOfStrings += br.length;\n          if (lst==null) {\n            lst = new ArrayList<BytesRef>();\n            bytes = new PagedBytes(15);\n          }\n          BytesRef out = new BytesRef();\n          bytes.copy(br, out);\n          lst.add(out);\n        }\n        return br;\n      }\n\n      public BytesRef skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new BytesRef[lst.size()]) : new BytesRef[0];\n      }\n    };\n    else return new NumberedTermsEnum(reader,this,new BytesRef(),0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","sourceNew":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermsEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermsEnum(reader,this, prefix==null?new BytesRef():prefix, 0) {\n      ArrayList<BytesRef> lst;\n      PagedBytes bytes;\n\n      @Override\n      protected BytesRef setTerm() throws IOException {\n        BytesRef br = super.setTerm();\n        if (br != null && (pos & intervalMask)==0) {\n          sizeOfStrings += br.length;\n          if (lst==null) {\n            lst = new ArrayList<BytesRef>();\n            bytes = new PagedBytes(15);\n          }\n          BytesRef out = new BytesRef();\n          bytes.copy(br, out);\n          lst.add(out);\n        }\n        return br;\n      }\n\n      @Override\n      public BytesRef skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new BytesRef[lst.size()]) : new BytesRef[0];\n      }\n    };\n    else return new NumberedTermsEnum(reader,this,new BytesRef(),0);\n  }\n\n","sourceOld":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermsEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermsEnum(reader,this, prefix==null?new BytesRef():prefix, 0) {\n      ArrayList<BytesRef> lst;\n      PagedBytes bytes;\n\n      protected BytesRef setTerm() throws IOException {\n        BytesRef br = super.setTerm();\n        if (br != null && (pos & intervalMask)==0) {\n          sizeOfStrings += br.length;\n          if (lst==null) {\n            lst = new ArrayList<BytesRef>();\n            bytes = new PagedBytes(15);\n          }\n          BytesRef out = new BytesRef();\n          bytes.copy(br, out);\n          lst.add(out);\n        }\n        return br;\n      }\n\n      public BytesRef skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new BytesRef[lst.size()]) : new BytesRef[0];\n      }\n    };\n    else return new NumberedTermsEnum(reader,this,new BytesRef(),0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","sourceNew":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermsEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermsEnum(reader,this, prefix==null?new BytesRef():prefix, 0) {\n      ArrayList<BytesRef> lst;\n      PagedBytes bytes;\n\n      @Override\n      protected BytesRef setTerm() throws IOException {\n        BytesRef br = super.setTerm();\n        if (br != null && (pos & intervalMask)==0) {\n          sizeOfStrings += br.length;\n          if (lst==null) {\n            lst = new ArrayList<BytesRef>();\n            bytes = new PagedBytes(15);\n          }\n          BytesRef out = new BytesRef();\n          bytes.copy(br, out);\n          lst.add(out);\n        }\n        return br;\n      }\n\n      @Override\n      public BytesRef skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new BytesRef[lst.size()]) : new BytesRef[0];\n      }\n    };\n    else return new NumberedTermsEnum(reader,this,new BytesRef(),0);\n  }\n\n","sourceOld":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermsEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermsEnum(reader,this, prefix==null?new BytesRef():prefix, 0) {\n      ArrayList<BytesRef> lst;\n      PagedBytes bytes;\n\n      protected BytesRef setTerm() throws IOException {\n        BytesRef br = super.setTerm();\n        if (br != null && (pos & intervalMask)==0) {\n          sizeOfStrings += br.length;\n          if (lst==null) {\n            lst = new ArrayList<BytesRef>();\n            bytes = new PagedBytes(15);\n          }\n          BytesRef out = new BytesRef();\n          bytes.copy(br, out);\n          lst.add(out);\n        }\n        return br;\n      }\n\n      public BytesRef skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new BytesRef[lst.size()]) : new BytesRef[0];\n      }\n    };\n    else return new NumberedTermsEnum(reader,this,new BytesRef(),0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95ae76773bf2b95987d5f9c8f566ab3738953fb4","date":1301758351,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","sourceNew":null,"sourceOld":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermsEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermsEnum(reader,this, prefix==null?new BytesRef():prefix, 0) {\n      ArrayList<BytesRef> lst;\n      PagedBytes bytes;\n\n      @Override\n      protected BytesRef setTerm() throws IOException {\n        BytesRef br = super.setTerm();\n        if (br != null && (pos & intervalMask)==0) {\n          sizeOfStrings += br.length;\n          if (lst==null) {\n            lst = new ArrayList<BytesRef>();\n            bytes = new PagedBytes(15);\n          }\n          BytesRef out = new BytesRef();\n          bytes.copy(br, out);\n          lst.add(out);\n        }\n        return br;\n      }\n\n      @Override\n      public BytesRef skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new BytesRef[lst.size()]) : new BytesRef[0];\n      }\n    };\n    else return new NumberedTermsEnum(reader,this,new BytesRef(),0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","sourceNew":null,"sourceOld":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermsEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermsEnum(reader,this, prefix==null?new BytesRef():prefix, 0) {\n      ArrayList<BytesRef> lst;\n      PagedBytes bytes;\n\n      @Override\n      protected BytesRef setTerm() throws IOException {\n        BytesRef br = super.setTerm();\n        if (br != null && (pos & intervalMask)==0) {\n          sizeOfStrings += br.length;\n          if (lst==null) {\n            lst = new ArrayList<BytesRef>();\n            bytes = new PagedBytes(15);\n          }\n          BytesRef out = new BytesRef();\n          bytes.copy(br, out);\n          lst.add(out);\n        }\n        return br;\n      }\n\n      @Override\n      public BytesRef skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new BytesRef[lst.size()]) : new BytesRef[0];\n      }\n    };\n    else return new NumberedTermsEnum(reader,this,new BytesRef(),0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","sourceNew":null,"sourceOld":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermsEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermsEnum(reader,this, prefix==null?new BytesRef():prefix, 0) {\n      ArrayList<BytesRef> lst;\n      PagedBytes bytes;\n\n      @Override\n      protected BytesRef setTerm() throws IOException {\n        BytesRef br = super.setTerm();\n        if (br != null && (pos & intervalMask)==0) {\n          sizeOfStrings += br.length;\n          if (lst==null) {\n            lst = new ArrayList<BytesRef>();\n            bytes = new PagedBytes(15);\n          }\n          BytesRef out = new BytesRef();\n          bytes.copy(br, out);\n          lst.add(out);\n        }\n        return br;\n      }\n\n      @Override\n      public BytesRef skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new BytesRef[lst.size()]) : new BytesRef[0];\n      }\n    };\n    else return new NumberedTermsEnum(reader,this,new BytesRef(),0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","sourceNew":null,"sourceOld":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermsEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermsEnum(reader,this, prefix==null?new BytesRef():prefix, 0) {\n      ArrayList<BytesRef> lst;\n      PagedBytes bytes;\n\n      @Override\n      protected BytesRef setTerm() throws IOException {\n        BytesRef br = super.setTerm();\n        if (br != null && (pos & intervalMask)==0) {\n          sizeOfStrings += br.length;\n          if (lst==null) {\n            lst = new ArrayList<BytesRef>();\n            bytes = new PagedBytes(15);\n          }\n          BytesRef out = new BytesRef();\n          bytes.copy(br, out);\n          lst.add(out);\n        }\n        return br;\n      }\n\n      @Override\n      public BytesRef skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new BytesRef[lst.size()]) : new BytesRef[0];\n      }\n    };\n    else return new NumberedTermsEnum(reader,this,new BytesRef(),0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["5dd78aee280f1b3b91065adc74a9f5ea695f8802"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","5dd78aee280f1b3b91065adc74a9f5ea695f8802"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"5dd78aee280f1b3b91065adc74a9f5ea695f8802":["87697f76828e4cfc6dc898262de8898e5010703f"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","87697f76828e4cfc6dc898262de8898e5010703f"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"87697f76828e4cfc6dc898262de8898e5010703f":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"a3776dccca01c11e7046323cfad46a3b4a471233":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["5dd78aee280f1b3b91065adc74a9f5ea695f8802","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["3242a09f703274d3b9283f2064a1a33064b53a1b","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["95ae76773bf2b95987d5f9c8f566ab3738953fb4"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","95ae76773bf2b95987d5f9c8f566ab3738953fb4","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"5dd78aee280f1b3b91065adc74a9f5ea695f8802":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","3242a09f703274d3b9283f2064a1a33064b53a1b","29ef99d61cda9641b6250bf9567329a6e65f901d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"1da8d55113b689b06716246649de6f62430f15c0":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"87697f76828e4cfc6dc898262de8898e5010703f":["5dd78aee280f1b3b91065adc74a9f5ea695f8802","5f4e87790277826a2aea119328600dfb07761f32"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["87697f76828e4cfc6dc898262de8898e5010703f"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"45669a651c970812a680841b97a77cce06af559f":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}