{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addFieldTypeWithAnalyzerClassAccuracy().mjava","commits":[{"id":"c6ff97491f7791aa98e90d71c4c7fee58688c37b","date":1434817448,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addFieldTypeWithAnalyzerClassAccuracy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void addFieldTypeWithAnalyzerClassAccuracy() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"nameText\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    Map<String, Object> analyzerAttributes = new LinkedHashMap<>();\n    analyzerAttributes.put(\"class\", \"org.apache.lucene.analysis.core.WhitespaceAnalyzer\");\n    analyzerAttributes.put(\"luceneMatchVersion\", \"5.0.0\");\n    AnalyzerDefinition analyzerDefinition = new AnalyzerDefinition();\n    analyzerDefinition.setAttributes(analyzerAttributes);\n    fieldTypeDefinition.setAnalyzer(analyzerDefinition);\n\n\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation newFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"name\"))));\n    assertThat(analyzerAttributes.get(\"class\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getAttributes().get(\"class\"))));\n    assertThat(analyzerAttributes.get(\"luceneMatchVersion\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getAttributes().get(\"luceneMatchVersion\"))));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b91012493e4750b9dc169cf1ae8cdd91493b42","date":1569935879,"type":3,"author":"Thomas Wöckinger","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addFieldTypeWithAnalyzerClassAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addFieldTypeWithAnalyzerClassAccuracy().mjava","sourceNew":"  @Test\n  public void addFieldTypeWithAnalyzerClassAccuracy() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"nameText\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    Map<String, Object> analyzerAttributes = new LinkedHashMap<>();\n    analyzerAttributes.put(\"class\", \"org.apache.lucene.analysis.core.WhitespaceAnalyzer\");\n    analyzerAttributes.put(\"luceneMatchVersion\", \"5.0.0\");\n    AnalyzerDefinition analyzerDefinition = new AnalyzerDefinition();\n    analyzerDefinition.setAttributes(analyzerAttributes);\n    fieldTypeDefinition.setAnalyzer(analyzerDefinition);\n\n\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    restTestHarness.reload();\n    \n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation newFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"name\"))));\n    assertThat(analyzerAttributes.get(\"class\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getAttributes().get(\"class\"))));\n    assertThat(analyzerAttributes.get(\"luceneMatchVersion\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getAttributes().get(\"luceneMatchVersion\"))));\n  }\n\n","sourceOld":"  @Test\n  public void addFieldTypeWithAnalyzerClassAccuracy() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"nameText\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    Map<String, Object> analyzerAttributes = new LinkedHashMap<>();\n    analyzerAttributes.put(\"class\", \"org.apache.lucene.analysis.core.WhitespaceAnalyzer\");\n    analyzerAttributes.put(\"luceneMatchVersion\", \"5.0.0\");\n    AnalyzerDefinition analyzerDefinition = new AnalyzerDefinition();\n    analyzerDefinition.setAttributes(analyzerAttributes);\n    fieldTypeDefinition.setAnalyzer(analyzerDefinition);\n\n\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation newFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"name\"))));\n    assertThat(analyzerAttributes.get(\"class\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getAttributes().get(\"class\"))));\n    assertThat(analyzerAttributes.get(\"luceneMatchVersion\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getAttributes().get(\"luceneMatchVersion\"))));\n  }\n\n","bugFix":null,"bugIntro":["43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3","date":1570208701,"type":3,"author":"Thomas Wöckinger","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addFieldTypeWithAnalyzerClassAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addFieldTypeWithAnalyzerClassAccuracy().mjava","sourceNew":"  @Test\n  public void addFieldTypeWithAnalyzerClassAccuracy() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"nameText\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    Map<String, Object> analyzerAttributes = new LinkedHashMap<>();\n    analyzerAttributes.put(\"class\", \"org.apache.lucene.analysis.core.WhitespaceAnalyzer\");\n    analyzerAttributes.put(\"luceneMatchVersion\", \"5.0.0\");\n    AnalyzerDefinition analyzerDefinition = new AnalyzerDefinition();\n    analyzerDefinition.setAttributes(analyzerAttributes);\n    fieldTypeDefinition.setAnalyzer(analyzerDefinition);\n\n\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation newFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"name\"))));\n    assertThat(analyzerAttributes.get(\"class\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getAttributes().get(\"class\"))));\n    assertThat(analyzerAttributes.get(\"luceneMatchVersion\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getAttributes().get(\"luceneMatchVersion\"))));\n  }\n\n","sourceOld":"  @Test\n  public void addFieldTypeWithAnalyzerClassAccuracy() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"nameText\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    Map<String, Object> analyzerAttributes = new LinkedHashMap<>();\n    analyzerAttributes.put(\"class\", \"org.apache.lucene.analysis.core.WhitespaceAnalyzer\");\n    analyzerAttributes.put(\"luceneMatchVersion\", \"5.0.0\");\n    AnalyzerDefinition analyzerDefinition = new AnalyzerDefinition();\n    analyzerDefinition.setAttributes(analyzerAttributes);\n    fieldTypeDefinition.setAnalyzer(analyzerDefinition);\n\n\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    restTestHarness.reload();\n    \n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation newFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"name\"))));\n    assertThat(analyzerAttributes.get(\"class\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getAttributes().get(\"class\"))));\n    assertThat(analyzerAttributes.get(\"luceneMatchVersion\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getAttributes().get(\"luceneMatchVersion\"))));\n  }\n\n","bugFix":["73b91012493e4750b9dc169cf1ae8cdd91493b42"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73b91012493e4750b9dc169cf1ae8cdd91493b42":["c6ff97491f7791aa98e90d71c4c7fee58688c37b"],"43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3":["73b91012493e4750b9dc169cf1ae8cdd91493b42"],"c6ff97491f7791aa98e90d71c4c7fee58688c37b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6ff97491f7791aa98e90d71c4c7fee58688c37b"],"73b91012493e4750b9dc169cf1ae8cdd91493b42":["43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3"],"43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6ff97491f7791aa98e90d71c4c7fee58688c37b":["73b91012493e4750b9dc169cf1ae8cdd91493b42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}