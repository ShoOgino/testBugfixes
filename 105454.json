{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testScore().mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testScore().mjava","sourceNew":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq, 10, sort);\n    assertEquals(2, td.totalHits);\n    assertEquals(1, td.scoreDocs[0].doc);\n    assertEquals(0, td.scoreDocs[1].doc);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq, 10, sort);\n    assertEquals(2, td.totalHits);\n    assertEquals(1, td.scoreDocs[0].doc);\n    assertEquals(0, td.scoreDocs[1].doc);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testScore().mjava","sourceNew":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq, 10, sort);\n    assertEquals(2, td.totalHits);\n    assertEquals(1, td.scoreDocs[0].doc);\n    assertEquals(0, td.scoreDocs[1].doc);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq, 10, sort);\n    assertEquals(2, td.totalHits);\n    assertEquals(1, td.scoreDocs[0].doc);\n    assertEquals(0, td.scoreDocs[1].doc);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testScore().mjava","sourceNew":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq, 10, sort);\n    assertEquals(2, td.totalHits);\n    assertEquals(1, td.scoreDocs[0].doc);\n    assertEquals(0, td.scoreDocs[1].doc);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq, 10, sort);\n    assertEquals(2, td.totalHits);\n    assertEquals(1, td.scoreDocs[0].doc);\n    assertEquals(0, td.scoreDocs[1].doc);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b3768e97375c7a745c68f0b54710e8bedccc11","date":1406635606,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testScore().mjava","sourceNew":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq, 10, sort);\n    assertEquals(2, td.totalHits);\n    assertEquals(1, td.scoreDocs[0].doc);\n    assertEquals(0, td.scoreDocs[1].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq, 10, sort);\n    assertEquals(2, td.totalHits);\n    assertEquals(1, td.scoreDocs[0].doc);\n    assertEquals(0, td.scoreDocs[1].doc);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["1c48d77b092518bb5fe34187680876685b8b9aed"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testScore().mjava","sourceNew":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq, 10, sort);\n    assertEquals(2, td.totalHits);\n    assertEquals(1, td.scoreDocs[0].doc);\n    assertEquals(0, td.scoreDocs[1].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq, 10, sort);\n    assertEquals(2, td.totalHits);\n    assertEquals(1, td.scoreDocs[0].doc);\n    assertEquals(0, td.scoreDocs[1].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testScore().mjava","sourceNew":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq.build(), 10, sort);\n    assertEquals(2, td.totalHits);\n    assertEquals(1, td.scoreDocs[0].doc);\n    assertEquals(0, td.scoreDocs[1].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq, 10, sort);\n    assertEquals(2, td.totalHits);\n    assertEquals(1, td.scoreDocs[0].doc);\n    assertEquals(0, td.scoreDocs[1].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f733fb02007feeb92fb76749e86cf69b717ea80b","date":1453213587,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testScore().mjava","sourceNew":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq.build(), 10, sort);\n    assertEquals(2, td.totalHits);\n    if (Float.isNaN(td.scoreDocs[0].score) == false && Float.isNaN(td.scoreDocs[1].score) == false) {\n      assertEquals(1, td.scoreDocs[0].doc);\n      assertEquals(0, td.scoreDocs[1].doc);\n    }\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq.build(), 10, sort);\n    assertEquals(2, td.totalHits);\n    assertEquals(1, td.scoreDocs[0].doc);\n    assertEquals(0, td.scoreDocs[1].doc);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testScore().mjava","sourceNew":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq.build(), 10, sort);\n    assertEquals(2, td.totalHits);\n    if (Float.isNaN(td.scoreDocs[0].score) == false && Float.isNaN(td.scoreDocs[1].score) == false) {\n      assertEquals(1, td.scoreDocs[0].doc);\n      assertEquals(0, td.scoreDocs[1].doc);\n    }\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq.build(), 10, sort);\n    assertEquals(2, td.totalHits);\n    if (Float.isNaN(td.scoreDocs[0].score) == false && Float.isNaN(td.scoreDocs[1].score) == false) {\n      assertEquals(1, td.scoreDocs[0].doc);\n      assertEquals(0, td.scoreDocs[1].doc);\n    }\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testScore().mjava","sourceNew":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq.build(), 10, sort);\n    assertEquals(2, td.totalHits);\n    if (Float.isNaN(td.scoreDocs[0].score) == false && Float.isNaN(td.scoreDocs[1].score) == false) {\n      assertEquals(1, td.scoreDocs[0].doc);\n      assertEquals(0, td.scoreDocs[1].doc);\n    }\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq.build(), 10, sort);\n    assertEquals(2, td.totalHits);\n    if (Float.isNaN(td.scoreDocs[0].score) == false && Float.isNaN(td.scoreDocs[1].score) == false) {\n      assertEquals(1, td.scoreDocs[0].doc);\n      assertEquals(0, td.scoreDocs[1].doc);\n    }\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testScore().mjava","sourceNew":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq.build(), 10, sort);\n    assertEquals(2, td.totalHits);\n    if (Float.isNaN(td.scoreDocs[0].score) == false && Float.isNaN(td.scoreDocs[1].score) == false) {\n      assertEquals(1, td.scoreDocs[0].doc);\n      assertEquals(0, td.scoreDocs[1].doc);\n    }\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq.build(), 10, sort);\n    assertEquals(2, td.totalHits);\n    if (Float.isNaN(td.scoreDocs[0].score) == false && Float.isNaN(td.scoreDocs[1].score) == false) {\n      assertEquals(1, td.scoreDocs[0].doc);\n      assertEquals(0, td.scoreDocs[1].doc);\n    }\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testScore().mjava","sourceNew":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq.build(), 10, sort);\n    assertEquals(2, td.totalHits);\n    if (Float.isNaN(td.scoreDocs[0].score) == false && Float.isNaN(td.scoreDocs[1].score) == false) {\n      assertEquals(1, td.scoreDocs[0].doc);\n      assertEquals(0, td.scoreDocs[1].doc);\n    }\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_SCORE);\n\n    final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"value\", \"foo\")), Occur.SHOULD);\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    TopDocs td = searcher.search(bq.build(), 10, sort);\n    assertEquals(2, td.totalHits);\n    if (Float.isNaN(td.scoreDocs[0].score) == false && Float.isNaN(td.scoreDocs[1].score) == false) {\n      assertEquals(1, td.scoreDocs[0].doc);\n      assertEquals(0, td.scoreDocs[1].doc);\n    }\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["f733fb02007feeb92fb76749e86cf69b717ea80b"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["f733fb02007feeb92fb76749e86cf69b717ea80b","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["f733fb02007feeb92fb76749e86cf69b717ea80b","0e121d43b5a10f2df530f406f935102656e9c4e8"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f733fb02007feeb92fb76749e86cf69b717ea80b","0e121d43b5a10f2df530f406f935102656e9c4e8"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"f733fb02007feeb92fb76749e86cf69b717ea80b":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["b0b3768e97375c7a745c68f0b54710e8bedccc11"],"b0b3768e97375c7a745c68f0b54710e8bedccc11":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f733fb02007feeb92fb76749e86cf69b717ea80b"],"f733fb02007feeb92fb76749e86cf69b717ea80b":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","b0b3768e97375c7a745c68f0b54710e8bedccc11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"b0b3768e97375c7a745c68f0b54710e8bedccc11":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}