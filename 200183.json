{"path":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadTermQuery#testQuery().mjava","commits":[{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadTermQuery#testQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testQuery().mjava","sourceNew":"  public void testQuery() {\n    SpanQuery boostingFuncTermQuery = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.MULTI_FIELD, \"seventy\")),\n        new MaxPayloadFunction());\n    QueryUtils.check(boostingFuncTermQuery);\n    \n    SpanTermQuery spanTermQuery = new SpanTermQuery(new Term(PayloadHelper.MULTI_FIELD, \"seventy\"));\n\n    assertTrue(boostingFuncTermQuery.equals(spanTermQuery) == spanTermQuery.equals(boostingFuncTermQuery));\n    \n    SpanQuery boostingFuncTermQuery2 = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.MULTI_FIELD, \"seventy\")),\n        new AveragePayloadFunction());\n    \n    QueryUtils.checkUnequal(boostingFuncTermQuery, boostingFuncTermQuery2);\n  }\n\n","sourceOld":"  public void testQuery() {\n    SpanQuery boostingFuncTermQuery = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.MULTI_FIELD, \"seventy\")),\n        new MaxPayloadFunction());\n    QueryUtils.check(boostingFuncTermQuery);\n    \n    SpanTermQuery spanTermQuery = new SpanTermQuery(new Term(PayloadHelper.MULTI_FIELD, \"seventy\"));\n\n    assertTrue(boostingFuncTermQuery.equals(spanTermQuery) == spanTermQuery.equals(boostingFuncTermQuery));\n    \n    SpanQuery boostingFuncTermQuery2 = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.MULTI_FIELD, \"seventy\")),\n        new AveragePayloadFunction());\n    \n    QueryUtils.checkUnequal(boostingFuncTermQuery, boostingFuncTermQuery2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2","date":1510236334,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadTermQuery#testQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadTermQuery#testQuery().mjava","sourceNew":"  public void testQuery() {\n    SpanQuery boostingFuncTermQuery = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.MULTI_FIELD, \"seventy\")),\n        new MaxPayloadFunction(), PayloadDecoder.FLOAT_DECODER);\n    QueryUtils.check(boostingFuncTermQuery);\n    \n    SpanTermQuery spanTermQuery = new SpanTermQuery(new Term(PayloadHelper.MULTI_FIELD, \"seventy\"));\n\n    assertTrue(boostingFuncTermQuery.equals(spanTermQuery) == spanTermQuery.equals(boostingFuncTermQuery));\n    \n    SpanQuery boostingFuncTermQuery2 = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.MULTI_FIELD, \"seventy\")),\n        new AveragePayloadFunction(), PayloadDecoder.FLOAT_DECODER);\n    \n    QueryUtils.checkUnequal(boostingFuncTermQuery, boostingFuncTermQuery2);\n  }\n\n","sourceOld":"  public void testQuery() {\n    SpanQuery boostingFuncTermQuery = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.MULTI_FIELD, \"seventy\")),\n        new MaxPayloadFunction());\n    QueryUtils.check(boostingFuncTermQuery);\n    \n    SpanTermQuery spanTermQuery = new SpanTermQuery(new Term(PayloadHelper.MULTI_FIELD, \"seventy\"));\n\n    assertTrue(boostingFuncTermQuery.equals(spanTermQuery) == spanTermQuery.equals(boostingFuncTermQuery));\n    \n    SpanQuery boostingFuncTermQuery2 = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.MULTI_FIELD, \"seventy\")),\n        new AveragePayloadFunction());\n    \n    QueryUtils.checkUnequal(boostingFuncTermQuery, boostingFuncTermQuery2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d9b8e4987e93a0ea580f91defdc31ce5dd572e2"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["4d9b8e4987e93a0ea580f91defdc31ce5dd572e2"],"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}