{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"]},"commit2Childs":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}