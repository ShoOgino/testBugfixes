{"path":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","commits":[{"id":"b69cd84ea1afad0c686a964bdc267f3a298b8c0e","date":1280257599,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"/dev/null","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    returnScore = returnFields != null && returnFields.contains(\"score\");\n    boolean needListOfFields = returnFields==null || returnFields.size()==0 || (returnFields.size()==1 && returnScore) || returnFields.contains(\"*\");\n    Collection<String> fields = returnFields;\n\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (needListOfFields) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnScore) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n\n    if (responseObj instanceof DocList) {\n      writeDocList(null, (DocList)responseObj, null, null);\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, null, null);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["080177034f0f8c5fc458255dbe1e84334b531ade","080177034f0f8c5fc458255dbe1e84334b531ade","080177034f0f8c5fc458255dbe1e84334b531ade","df476dd588f9e2c99c43fd9d3d896fd30221938f","df476dd588f9e2c99c43fd9d3d896fd30221938f","df476dd588f9e2c99c43fd9d3d896fd30221938f","a094c728ab58b12a130aaeed26d06f3c71aa8a61","a094c728ab58b12a130aaeed26d06f3c71aa8a61","a094c728ab58b12a130aaeed26d06f3c71aa8a61"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"/dev/null","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    returnScore = returnFields != null && returnFields.contains(\"score\");\n    boolean needListOfFields = returnFields==null || returnFields.size()==0 || (returnFields.size()==1 && returnScore) || returnFields.contains(\"*\");\n    Collection<String> fields = returnFields;\n\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (needListOfFields) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnScore) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n\n    if (responseObj instanceof DocList) {\n      writeDocList(null, (DocList)responseObj, null, null);\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, null, null);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.getWantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    returnScore = returnFields != null && returnFields.contains(\"score\");\n    boolean needListOfFields = returnFields==null || returnFields.size()==0 || (returnFields.size()==1 && returnScore) || returnFields.contains(\"*\");\n    Collection<String> fields = returnFields;\n\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (needListOfFields) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnScore) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n\n    if (responseObj instanceof DocList) {\n      writeDocList(null, (DocList)responseObj, null, null);\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, null, null);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["080177034f0f8c5fc458255dbe1e84334b531ade","080177034f0f8c5fc458255dbe1e84334b531ade","080177034f0f8c5fc458255dbe1e84334b531ade"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"794957d0f3853445bdf9319bfb72f8b8c2443a7d","date":1301088393,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.getWantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["080177034f0f8c5fc458255dbe1e84334b531ade","080177034f0f8c5fc458255dbe1e84334b531ade","080177034f0f8c5fc458255dbe1e84334b531ade"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    returnScore = returnFields != null && returnFields.contains(\"score\");\n    boolean needListOfFields = returnFields==null || returnFields.size()==0 || (returnFields.size()==1 && returnScore) || returnFields.contains(\"*\");\n    Collection<String> fields = returnFields;\n\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (needListOfFields) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnScore) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n\n    if (responseObj instanceof DocList) {\n      writeDocList(null, (DocList)responseObj, null, null);\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, null, null);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    returnScore = returnFields != null && returnFields.contains(\"score\");\n    boolean needListOfFields = returnFields==null || returnFields.size()==0 || (returnFields.size()==1 && returnScore) || returnFields.contains(\"*\");\n    Collection<String> fields = returnFields;\n\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (needListOfFields) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnScore) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n\n    if (responseObj instanceof DocList) {\n      writeDocList(null, (DocList)responseObj, null, null);\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, null, null);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b69cd84ea1afad0c686a964bdc267f3a298b8c0e"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["3242a09f703274d3b9283f2064a1a33064b53a1b","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["6aedf81f068e430dec27d94310415cc6ff52731c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["b69cd84ea1afad0c686a964bdc267f3a298b8c0e","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"b69cd84ea1afad0c686a964bdc267f3a298b8c0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["794957d0f3853445bdf9319bfb72f8b8c2443a7d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"6aedf81f068e430dec27d94310415cc6ff52731c":["b69cd84ea1afad0c686a964bdc267f3a298b8c0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"b69cd84ea1afad0c686a964bdc267f3a298b8c0e":["3242a09f703274d3b9283f2064a1a33064b53a1b","d619839baa8ce5503e496b94a9e42ad6f079293f","6aedf81f068e430dec27d94310415cc6ff52731c"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3242a09f703274d3b9283f2064a1a33064b53a1b","b69cd84ea1afad0c686a964bdc267f3a298b8c0e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"6aedf81f068e430dec27d94310415cc6ff52731c":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}