{"path":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","commits":[{"id":"f58d67a8f4d66d0872915c9bb14606874988efc3","date":1132166857,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Prettyprint us.\r\n   * @param field the field to which we are applied\r\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\r\n   */\r\n  public String toString(String field) {\r\n    StringBuffer buffer = new StringBuffer();\r\n    buffer.append(\"(\");\r\n    for (int i = 0 ; i < disjuncts.size(); i++) {\r\n      Query subquery = (Query) disjuncts.get(i);\r\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\r\n        buffer.append(\"(\");\r\n        buffer.append(subquery.toString(field));\r\n        buffer.append(\")\");\r\n      }\r\n      else buffer.append(subquery.toString(field));\r\n      if (i != disjuncts.size()-1) buffer.append(\" | \");\r\n    }\r\n    buffer.append(\")\");\r\n    if (tieBreakerMultiplier != 0.0f) {\r\n      buffer.append(\"~\");\r\n      buffer.append(tieBreakerMultiplier);\r\n    }\r\n    if (getBoost() != 1.0) {\r\n      buffer.append(\"^\");\r\n      buffer.append(getBoost());\r\n    }\r\n    return buffer.toString();\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","sourceNew":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    buffer.append(\"(\");\n    for (int i = 0 ; i < disjuncts.size(); i++) {\n      Query subquery = (Query) disjuncts.get(i);\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != disjuncts.size()-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    if (getBoost() != 1.0) {\n      buffer.append(\"^\");\n      buffer.append(getBoost());\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prettyprint us.\r\n   * @param field the field to which we are applied\r\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\r\n   */\r\n  public String toString(String field) {\r\n    StringBuffer buffer = new StringBuffer();\r\n    buffer.append(\"(\");\r\n    for (int i = 0 ; i < disjuncts.size(); i++) {\r\n      Query subquery = (Query) disjuncts.get(i);\r\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\r\n        buffer.append(\"(\");\r\n        buffer.append(subquery.toString(field));\r\n        buffer.append(\")\");\r\n      }\r\n      else buffer.append(subquery.toString(field));\r\n      if (i != disjuncts.size()-1) buffer.append(\" | \");\r\n    }\r\n    buffer.append(\")\");\r\n    if (tieBreakerMultiplier != 0.0f) {\r\n      buffer.append(\"~\");\r\n      buffer.append(tieBreakerMultiplier);\r\n    }\r\n    if (getBoost() != 1.0) {\r\n      buffer.append(\"^\");\r\n      buffer.append(getBoost());\r\n    }\r\n    return buffer.toString();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","sourceNew":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    buffer.append(\"(\");\n    int numDisjunctions = disjuncts.size();\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query subquery = (Query) disjuncts.get(i);\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != numDisjunctions-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    if (getBoost() != 1.0) {\n      buffer.append(\"^\");\n      buffer.append(getBoost());\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    buffer.append(\"(\");\n    for (int i = 0 ; i < disjuncts.size(); i++) {\n      Query subquery = (Query) disjuncts.get(i);\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != disjuncts.size()-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    if (getBoost() != 1.0) {\n      buffer.append(\"^\");\n      buffer.append(getBoost());\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","sourceNew":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"(\");\n    int numDisjunctions = disjuncts.size();\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query subquery = (Query) disjuncts.get(i);\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != numDisjunctions-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    if (getBoost() != 1.0) {\n      buffer.append(\"^\");\n      buffer.append(getBoost());\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    buffer.append(\"(\");\n    int numDisjunctions = disjuncts.size();\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query subquery = (Query) disjuncts.get(i);\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != numDisjunctions-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    if (getBoost() != 1.0) {\n      buffer.append(\"^\");\n      buffer.append(getBoost());\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0d3ac29cb12b76130b702427d6bcd355e68d126","date":1255699234,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","sourceNew":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"(\");\n    int numDisjunctions = disjuncts.size();\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query subquery = (Query) disjuncts.get(i);\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != numDisjunctions-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    if (getBoost() != 1.0) {\n      buffer.append(\"^\");\n      buffer.append(getBoost());\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"(\");\n    int numDisjunctions = disjuncts.size();\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query subquery = (Query) disjuncts.get(i);\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != numDisjunctions-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    if (getBoost() != 1.0) {\n      buffer.append(\"^\");\n      buffer.append(getBoost());\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"580e487700caea83dbc40e39acb074ebde2818a4","date":1255719241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","sourceNew":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"(\");\n    int numDisjunctions = disjuncts.size();\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query subquery = disjuncts.get(i);\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != numDisjunctions-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    if (getBoost() != 1.0) {\n      buffer.append(\"^\");\n      buffer.append(getBoost());\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"(\");\n    int numDisjunctions = disjuncts.size();\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query subquery = (Query) disjuncts.get(i);\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != numDisjunctions-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    if (getBoost() != 1.0) {\n      buffer.append(\"^\");\n      buffer.append(getBoost());\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","sourceNew":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"(\");\n    int numDisjunctions = disjuncts.size();\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query subquery = disjuncts.get(i);\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != numDisjunctions-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    if (getBoost() != 1.0) {\n      buffer.append(\"^\");\n      buffer.append(getBoost());\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"(\");\n    int numDisjunctions = disjuncts.size();\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query subquery = disjuncts.get(i);\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != numDisjunctions-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    if (getBoost() != 1.0) {\n      buffer.append(\"^\");\n      buffer.append(getBoost());\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f58d67a8f4d66d0872915c9bb14606874988efc3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e0d3ac29cb12b76130b702427d6bcd355e68d126":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"580e487700caea83dbc40e39acb074ebde2818a4":["e0d3ac29cb12b76130b702427d6bcd355e68d126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["2123bddbd65dea198cac380540636ce43a880403"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["580e487700caea83dbc40e39acb074ebde2818a4"]},"commit2Childs":{"f58d67a8f4d66d0872915c9bb14606874988efc3":["2123bddbd65dea198cac380540636ce43a880403"],"e0d3ac29cb12b76130b702427d6bcd355e68d126":["580e487700caea83dbc40e39acb074ebde2818a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"580e487700caea83dbc40e39acb074ebde2818a4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2123bddbd65dea198cac380540636ce43a880403":["052fac7830290bd38a04cddee1a121ee07656b56"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["e0d3ac29cb12b76130b702427d6bcd355e68d126"],"052fac7830290bd38a04cddee1a121ee07656b56":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}