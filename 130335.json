{"path":"src/java/org/apache/lucene/search/SloppyPhraseScorer#flip(PhrasePositions,PhrasePositions).mjava","commits":[{"id":"3b2ceed5f2320db5cc371e0dd95622cda9a9a56a","date":1217778014,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SloppyPhraseScorer#flip(PhrasePositions,PhrasePositions).mjava","pathOld":"/dev/null","sourceNew":"    // flip pp2 and pp in the queue: pop until finding pp2, insert back all but pp2, insert pp back.\n    // assumes: pp!=pp2, pp2 in pq, pp not in pq.\n    // called only when there are repeating pps.\n    private PhrasePositions flip(PhrasePositions pp, PhrasePositions pp2) {\n      int n=0;\n      PhrasePositions pp3;\n      //pop until finding pp2\n      while ((pp3=(PhrasePositions)pq.pop()) != pp2) {\n        tmpPos[n++] = pp3;\n      }\n      //insert back all but pp2\n      for (n--; n>=0; n--) {\n        pq.insert(tmpPos[n]);\n      }\n      //insert pp back\n      pq.put(pp);\n      return pp2;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0731e137bcbb58121034de6ddaa67332fbe6e5d1","date":1255233265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SloppyPhraseScorer#flip(PhrasePositions,PhrasePositions).mjava","pathOld":"src/java/org/apache/lucene/search/SloppyPhraseScorer#flip(PhrasePositions,PhrasePositions).mjava","sourceNew":"    // flip pp2 and pp in the queue: pop until finding pp2, insert back all but pp2, insert pp back.\n    // assumes: pp!=pp2, pp2 in pq, pp not in pq.\n    // called only when there are repeating pps.\n    private PhrasePositions flip(PhrasePositions pp, PhrasePositions pp2) {\n      int n=0;\n      PhrasePositions pp3;\n      //pop until finding pp2\n      while ((pp3=(PhrasePositions)pq.pop()) != pp2) {\n        tmpPos[n++] = pp3;\n      }\n      //insert back all but pp2\n      for (n--; n>=0; n--) {\n        pq.insertWithOverflow(tmpPos[n]);\n      }\n      //insert pp back\n      pq.add(pp);\n      return pp2;\n    }\n\n","sourceOld":"    // flip pp2 and pp in the queue: pop until finding pp2, insert back all but pp2, insert pp back.\n    // assumes: pp!=pp2, pp2 in pq, pp not in pq.\n    // called only when there are repeating pps.\n    private PhrasePositions flip(PhrasePositions pp, PhrasePositions pp2) {\n      int n=0;\n      PhrasePositions pp3;\n      //pop until finding pp2\n      while ((pp3=(PhrasePositions)pq.pop()) != pp2) {\n        tmpPos[n++] = pp3;\n      }\n      //insert back all but pp2\n      for (n--; n>=0; n--) {\n        pq.insert(tmpPos[n]);\n      }\n      //insert pp back\n      pq.put(pp);\n      return pp2;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20645c714ca2a7b7707c2707d58ee9fa384c7362","date":1256074979,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SloppyPhraseScorer#flip(PhrasePositions,PhrasePositions).mjava","pathOld":"src/java/org/apache/lucene/search/SloppyPhraseScorer#flip(PhrasePositions,PhrasePositions).mjava","sourceNew":"    // flip pp2 and pp in the queue: pop until finding pp2, insert back all but pp2, insert pp back.\n    // assumes: pp!=pp2, pp2 in pq, pp not in pq.\n    // called only when there are repeating pps.\n    private PhrasePositions flip(PhrasePositions pp, PhrasePositions pp2) {\n      int n=0;\n      PhrasePositions pp3;\n      //pop until finding pp2\n      while ((pp3=pq.pop()) != pp2) {\n        tmpPos[n++] = pp3;\n      }\n      //insert back all but pp2\n      for (n--; n>=0; n--) {\n        pq.insertWithOverflow(tmpPos[n]);\n      }\n      //insert pp back\n      pq.add(pp);\n      return pp2;\n    }\n\n","sourceOld":"    // flip pp2 and pp in the queue: pop until finding pp2, insert back all but pp2, insert pp back.\n    // assumes: pp!=pp2, pp2 in pq, pp not in pq.\n    // called only when there are repeating pps.\n    private PhrasePositions flip(PhrasePositions pp, PhrasePositions pp2) {\n      int n=0;\n      PhrasePositions pp3;\n      //pop until finding pp2\n      while ((pp3=(PhrasePositions)pq.pop()) != pp2) {\n        tmpPos[n++] = pp3;\n      }\n      //insert back all but pp2\n      for (n--; n>=0; n--) {\n        pq.insertWithOverflow(tmpPos[n]);\n      }\n      //insert pp back\n      pq.add(pp);\n      return pp2;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SloppyPhraseScorer#flip(PhrasePositions,PhrasePositions).mjava","pathOld":"src/java/org/apache/lucene/search/SloppyPhraseScorer#flip(PhrasePositions,PhrasePositions).mjava","sourceNew":"    // flip pp2 and pp in the queue: pop until finding pp2, insert back all but pp2, insert pp back.\n    // assumes: pp!=pp2, pp2 in pq, pp not in pq.\n    // called only when there are repeating pps.\n    private PhrasePositions flip(PhrasePositions pp, PhrasePositions pp2) {\n      int n=0;\n      PhrasePositions pp3;\n      //pop until finding pp2\n      while ((pp3=pq.pop()) != pp2) {\n        tmpPos[n++] = pp3;\n      }\n      //insert back all but pp2\n      for (n--; n>=0; n--) {\n        pq.insertWithOverflow(tmpPos[n]);\n      }\n      //insert pp back\n      pq.add(pp);\n      return pp2;\n    }\n\n","sourceOld":"    // flip pp2 and pp in the queue: pop until finding pp2, insert back all but pp2, insert pp back.\n    // assumes: pp!=pp2, pp2 in pq, pp not in pq.\n    // called only when there are repeating pps.\n    private PhrasePositions flip(PhrasePositions pp, PhrasePositions pp2) {\n      int n=0;\n      PhrasePositions pp3;\n      //pop until finding pp2\n      while ((pp3=pq.pop()) != pp2) {\n        tmpPos[n++] = pp3;\n      }\n      //insert back all but pp2\n      for (n--; n>=0; n--) {\n        pq.insertWithOverflow(tmpPos[n]);\n      }\n      //insert pp back\n      pq.add(pp);\n      return pp2;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b2ceed5f2320db5cc371e0dd95622cda9a9a56a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["3b2ceed5f2320db5cc371e0dd95622cda9a9a56a"],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["20645c714ca2a7b7707c2707d58ee9fa384c7362"]},"commit2Childs":{"3b2ceed5f2320db5cc371e0dd95622cda9a9a56a":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b2ceed5f2320db5cc371e0dd95622cda9a9a56a"],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}