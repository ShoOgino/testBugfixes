{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#checkForSingleIndex(JettySolrRunner).mjava","commits":[{"id":"058801f8673d53a5abac8088204860ec29a40f0d","date":1364178882,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#checkForSingleIndex(JettySolrRunner).mjava","pathOld":"/dev/null","sourceNew":"  private void checkForSingleIndex(JettySolrRunner jetty) {\n    CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      String ddir = core.getDataDir();\n      CachingDirectoryFactory dirFactory = (CachingDirectoryFactory) core.getDirectoryFactory();\n      synchronized (dirFactory) {\n        assertEquals(dirFactory.getPaths().toString(), 2, dirFactory.getPaths().size());\n      }\n      if (dirFactory instanceof StandardDirectoryFactory) {\n        System.out.println(Arrays.asList(new File(ddir).list()));\n        assertEquals(Arrays.asList(new File(ddir).list()).toString(), 1, indexDirCount(ddir));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"25bbd8e76cd29f2d4b262a24d6a42c754706b143","date":1365910543,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#checkForSingleIndex(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#checkForSingleIndex(JettySolrRunner).mjava","sourceNew":"  private void checkForSingleIndex(JettySolrRunner jetty) {\n    CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      String ddir = core.getDataDir();\n      CachingDirectoryFactory dirFactory = (CachingDirectoryFactory) core.getDirectoryFactory();\n      synchronized (dirFactory) {\n        Set<String> livePaths = dirFactory.getLivePaths();\n        // one for data, one for hte index under data\n        assertEquals(livePaths.toString(), 2, livePaths.size());\n        // :TODO: assert that one of the paths is a subpath of hte other\n      }\n      if (dirFactory instanceof StandardDirectoryFactory) {\n        System.out.println(Arrays.asList(new File(ddir).list()));\n        assertEquals(Arrays.asList(new File(ddir).list()).toString(), 1, indexDirCount(ddir));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkForSingleIndex(JettySolrRunner jetty) {\n    CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      String ddir = core.getDataDir();\n      CachingDirectoryFactory dirFactory = (CachingDirectoryFactory) core.getDirectoryFactory();\n      synchronized (dirFactory) {\n        assertEquals(dirFactory.getPaths().toString(), 2, dirFactory.getPaths().size());\n      }\n      if (dirFactory instanceof StandardDirectoryFactory) {\n        System.out.println(Arrays.asList(new File(ddir).list()));\n        assertEquals(Arrays.asList(new File(ddir).list()).toString(), 1, indexDirCount(ddir));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1088b72b3b4cc45316b7595bd09023c859cd2327","date":1447150009,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#checkForSingleIndex(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#checkForSingleIndex(JettySolrRunner).mjava","sourceNew":"  private void checkForSingleIndex(JettySolrRunner jetty) {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      String ddir = core.getDataDir();\n      CachingDirectoryFactory dirFactory = (CachingDirectoryFactory) core.getDirectoryFactory();\n      synchronized (dirFactory) {\n        Set<String> livePaths = dirFactory.getLivePaths();\n        // one for data, one for hte index under data\n        assertEquals(livePaths.toString(), 2, livePaths.size());\n        // :TODO: assert that one of the paths is a subpath of hte other\n      }\n      if (dirFactory instanceof StandardDirectoryFactory) {\n        System.out.println(Arrays.asList(new File(ddir).list()));\n        assertEquals(Arrays.asList(new File(ddir).list()).toString(), 1, indexDirCount(ddir));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkForSingleIndex(JettySolrRunner jetty) {\n    CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      String ddir = core.getDataDir();\n      CachingDirectoryFactory dirFactory = (CachingDirectoryFactory) core.getDirectoryFactory();\n      synchronized (dirFactory) {\n        Set<String> livePaths = dirFactory.getLivePaths();\n        // one for data, one for hte index under data\n        assertEquals(livePaths.toString(), 2, livePaths.size());\n        // :TODO: assert that one of the paths is a subpath of hte other\n      }\n      if (dirFactory instanceof StandardDirectoryFactory) {\n        System.out.println(Arrays.asList(new File(ddir).list()));\n        assertEquals(Arrays.asList(new File(ddir).list()).toString(), 1, indexDirCount(ddir));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"91e2345fb81b6c1c7faefa550ee5eaafadc54486","date":1469730189,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#checkForSingleIndex(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#checkForSingleIndex(JettySolrRunner).mjava","sourceNew":"  private void checkForSingleIndex(JettySolrRunner jetty) {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      String ddir = core.getDataDir();\n      CachingDirectoryFactory dirFactory = (CachingDirectoryFactory) core.getDirectoryFactory();\n      synchronized (dirFactory) {\n        Set<String> livePaths = dirFactory.getLivePaths();\n        // one for data, one for hte index under data and one for the snapshot metadata.\n        assertEquals(livePaths.toString(), 3, livePaths.size());\n        // :TODO: assert that one of the paths is a subpath of hte other\n      }\n      if (dirFactory instanceof StandardDirectoryFactory) {\n        System.out.println(Arrays.asList(new File(ddir).list()));\n        assertEquals(Arrays.asList(new File(ddir).list()).toString(), 1, indexDirCount(ddir));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkForSingleIndex(JettySolrRunner jetty) {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      String ddir = core.getDataDir();\n      CachingDirectoryFactory dirFactory = (CachingDirectoryFactory) core.getDirectoryFactory();\n      synchronized (dirFactory) {\n        Set<String> livePaths = dirFactory.getLivePaths();\n        // one for data, one for hte index under data\n        assertEquals(livePaths.toString(), 2, livePaths.size());\n        // :TODO: assert that one of the paths is a subpath of hte other\n      }\n      if (dirFactory instanceof StandardDirectoryFactory) {\n        System.out.println(Arrays.asList(new File(ddir).list()));\n        assertEquals(Arrays.asList(new File(ddir).list()).toString(), 1, indexDirCount(ddir));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#checkForSingleIndex(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#checkForSingleIndex(JettySolrRunner).mjava","sourceNew":"  private void checkForSingleIndex(JettySolrRunner jetty) {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      String ddir = core.getDataDir();\n      CachingDirectoryFactory dirFactory = (CachingDirectoryFactory) core.getDirectoryFactory();\n      synchronized (dirFactory) {\n        Set<String> livePaths = dirFactory.getLivePaths();\n        // one for data, one for hte index under data and one for the snapshot metadata.\n        assertEquals(livePaths.toString(), 3, livePaths.size());\n        // :TODO: assert that one of the paths is a subpath of hte other\n      }\n      if (dirFactory instanceof StandardDirectoryFactory) {\n        System.out.println(Arrays.asList(new File(ddir).list()));\n        assertEquals(Arrays.asList(new File(ddir).list()).toString(), 1, indexDirCount(ddir));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkForSingleIndex(JettySolrRunner jetty) {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      String ddir = core.getDataDir();\n      CachingDirectoryFactory dirFactory = (CachingDirectoryFactory) core.getDirectoryFactory();\n      synchronized (dirFactory) {\n        Set<String> livePaths = dirFactory.getLivePaths();\n        // one for data, one for hte index under data\n        assertEquals(livePaths.toString(), 2, livePaths.size());\n        // :TODO: assert that one of the paths is a subpath of hte other\n      }\n      if (dirFactory instanceof StandardDirectoryFactory) {\n        System.out.println(Arrays.asList(new File(ddir).list()));\n        assertEquals(Arrays.asList(new File(ddir).list()).toString(), 1, indexDirCount(ddir));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#checkForSingleIndex(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#checkForSingleIndex(JettySolrRunner).mjava","sourceNew":"  private void checkForSingleIndex(JettySolrRunner jetty) {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      String ddir = core.getDataDir();\n      CachingDirectoryFactory dirFactory = (CachingDirectoryFactory) core.getDirectoryFactory();\n      synchronized (dirFactory) {\n        Set<String> livePaths = dirFactory.getLivePaths();\n        // one for data, one for hte index under data and one for the snapshot metadata.\n        assertEquals(livePaths.toString(), 3, livePaths.size());\n        // :TODO: assert that one of the paths is a subpath of hte other\n      }\n      if (dirFactory instanceof StandardDirectoryFactory) {\n        System.out.println(Arrays.asList(new File(ddir).list()));\n        assertEquals(Arrays.asList(new File(ddir).list()).toString(), 1, indexDirCount(ddir));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkForSingleIndex(JettySolrRunner jetty) {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      String ddir = core.getDataDir();\n      CachingDirectoryFactory dirFactory = (CachingDirectoryFactory) core.getDirectoryFactory();\n      synchronized (dirFactory) {\n        Set<String> livePaths = dirFactory.getLivePaths();\n        // one for data, one for hte index under data\n        assertEquals(livePaths.toString(), 2, livePaths.size());\n        // :TODO: assert that one of the paths is a subpath of hte other\n      }\n      if (dirFactory instanceof StandardDirectoryFactory) {\n        System.out.println(Arrays.asList(new File(ddir).list()));\n        assertEquals(Arrays.asList(new File(ddir).list()).toString(), 1, indexDirCount(ddir));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f7df713a0f1e310d18dd8da91c89a07a13f86f8","date":1483441921,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#checkForSingleIndex(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#checkForSingleIndex(JettySolrRunner).mjava","sourceNew":"  private void checkForSingleIndex(JettySolrRunner jetty) {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      String ddir = core.getDataDir();\n      CachingDirectoryFactory dirFactory = getCachingDirectoryFactory(core);\n      synchronized (dirFactory) {\n        Set<String> livePaths = dirFactory.getLivePaths();\n        // one for data, one for hte index under data and one for the snapshot metadata.\n        assertEquals(livePaths.toString(), 3, livePaths.size());\n        // :TODO: assert that one of the paths is a subpath of hte other\n      }\n      if (dirFactory instanceof StandardDirectoryFactory) {\n        System.out.println(Arrays.asList(new File(ddir).list()));\n        assertEquals(Arrays.asList(new File(ddir).list()).toString(), 1, indexDirCount(ddir));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkForSingleIndex(JettySolrRunner jetty) {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      String ddir = core.getDataDir();\n      CachingDirectoryFactory dirFactory = (CachingDirectoryFactory) core.getDirectoryFactory();\n      synchronized (dirFactory) {\n        Set<String> livePaths = dirFactory.getLivePaths();\n        // one for data, one for hte index under data and one for the snapshot metadata.\n        assertEquals(livePaths.toString(), 3, livePaths.size());\n        // :TODO: assert that one of the paths is a subpath of hte other\n      }\n      if (dirFactory instanceof StandardDirectoryFactory) {\n        System.out.println(Arrays.asList(new File(ddir).list()));\n        assertEquals(Arrays.asList(new File(ddir).list()).toString(), 1, indexDirCount(ddir));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#checkForSingleIndex(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#checkForSingleIndex(JettySolrRunner).mjava","sourceNew":"  private void checkForSingleIndex(JettySolrRunner jetty) {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      String ddir = core.getDataDir();\n      CachingDirectoryFactory dirFactory = getCachingDirectoryFactory(core);\n      synchronized (dirFactory) {\n        Set<String> livePaths = dirFactory.getLivePaths();\n        // one for data, one for hte index under data and one for the snapshot metadata.\n        assertEquals(livePaths.toString(), 3, livePaths.size());\n        // :TODO: assert that one of the paths is a subpath of hte other\n      }\n      if (dirFactory instanceof StandardDirectoryFactory) {\n        System.out.println(Arrays.asList(new File(ddir).list()));\n        assertEquals(Arrays.asList(new File(ddir).list()).toString(), 1, indexDirCount(ddir));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkForSingleIndex(JettySolrRunner jetty) {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      String ddir = core.getDataDir();\n      CachingDirectoryFactory dirFactory = (CachingDirectoryFactory) core.getDirectoryFactory();\n      synchronized (dirFactory) {\n        Set<String> livePaths = dirFactory.getLivePaths();\n        // one for data, one for hte index under data and one for the snapshot metadata.\n        assertEquals(livePaths.toString(), 3, livePaths.size());\n        // :TODO: assert that one of the paths is a subpath of hte other\n      }\n      if (dirFactory instanceof StandardDirectoryFactory) {\n        System.out.println(Arrays.asList(new File(ddir).list()));\n        assertEquals(Arrays.asList(new File(ddir).list()).toString(), 1, indexDirCount(ddir));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad28156288ac00b91352582904d97e6653205757","date":1486850922,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#checkForSingleIndex(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#checkForSingleIndex(JettySolrRunner).mjava","sourceNew":"  private void checkForSingleIndex(JettySolrRunner jetty) {\n    checkForSingleIndex(jetty, false);\n  }\n\n","sourceOld":"  private void checkForSingleIndex(JettySolrRunner jetty) {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      String ddir = core.getDataDir();\n      CachingDirectoryFactory dirFactory = getCachingDirectoryFactory(core);\n      synchronized (dirFactory) {\n        Set<String> livePaths = dirFactory.getLivePaths();\n        // one for data, one for hte index under data and one for the snapshot metadata.\n        assertEquals(livePaths.toString(), 3, livePaths.size());\n        // :TODO: assert that one of the paths is a subpath of hte other\n      }\n      if (dirFactory instanceof StandardDirectoryFactory) {\n        System.out.println(Arrays.asList(new File(ddir).list()));\n        assertEquals(Arrays.asList(new File(ddir).list()).toString(), 1, indexDirCount(ddir));\n      }\n    }\n  }\n\n","bugFix":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8","91e2345fb81b6c1c7faefa550ee5eaafadc54486","058801f8673d53a5abac8088204860ec29a40f0d","1088b72b3b4cc45316b7595bd09023c859cd2327","25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad28156288ac00b91352582904d97e6653205757":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"058801f8673d53a5abac8088204860ec29a40f0d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["058801f8673d53a5abac8088204860ec29a40f0d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["1088b72b3b4cc45316b7595bd09023c859cd2327","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["1088b72b3b4cc45316b7595bd09023c859cd2327","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad28156288ac00b91352582904d97e6653205757"],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2f7df713a0f1e310d18dd8da91c89a07a13f86f8"]},"commit2Childs":{"ad28156288ac00b91352582904d97e6653205757":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"058801f8673d53a5abac8088204860ec29a40f0d":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["058801f8673d53a5abac8088204860ec29a40f0d"],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["ad28156288ac00b91352582904d97e6653205757","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}