{"path":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter#testOptimizations().mjava","commits":[{"id":"5864882f6163c513e490c855adeb66eff0a9988e","date":1415178293,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter#testOptimizations().mjava","pathOld":"/dev/null","sourceNew":"  public void testOptimizations() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    final int docs = atLeast(10);\n    buildIndex(writer, docs);\n    IndexReader reader = DirectoryReader.open(directory);\n    LeafReader leafReader = reader.leaves().get(0).reader();\n    \n    FilterLeafReader filterReader = new FilterLeafReader(leafReader) {\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        switch (field) {\n          case \"with_matchall\":\n            return new Bits.MatchAllBits(maxDoc());\n          case \"with_matchno\":\n            return new Bits.MatchNoBits(maxDoc());\n          case \"with_bitset\":\n            BitSet b = random().nextBoolean() ? new SparseFixedBitSet(maxDoc()) : new FixedBitSet(maxDoc());\n            b.set(random().nextInt(maxDoc()));\n            return b;\n        }\n        return super.getDocsWithField(field);\n      }\n    };\n\n    Filter filter = new FieldValueFilter(\"with_matchall\", true);\n    DocIdSet set = filter.getDocIdSet(filterReader.getContext(), null);\n    assertNull(set);\n\n    filter = new FieldValueFilter(\"with_matchno\");\n    set = filter.getDocIdSet(filterReader.getContext(), null);\n    assertNull(set);\n\n    filter = new FieldValueFilter(\"with_bitset\");\n    set = filter.getDocIdSet(filterReader.getContext(), null);\n    assertTrue(set instanceof BitDocIdSet);\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"484e80062d7ab2729bc82f0311d6a97dd913961a","date":1424450206,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter#testOptimizations().mjava","sourceNew":null,"sourceOld":"  public void testOptimizations() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    final int docs = atLeast(10);\n    buildIndex(writer, docs);\n    IndexReader reader = DirectoryReader.open(directory);\n    LeafReader leafReader = reader.leaves().get(0).reader();\n    \n    FilterLeafReader filterReader = new FilterLeafReader(leafReader) {\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        switch (field) {\n          case \"with_matchall\":\n            return new Bits.MatchAllBits(maxDoc());\n          case \"with_matchno\":\n            return new Bits.MatchNoBits(maxDoc());\n          case \"with_bitset\":\n            BitSet b = random().nextBoolean() ? new SparseFixedBitSet(maxDoc()) : new FixedBitSet(maxDoc());\n            b.set(random().nextInt(maxDoc()));\n            return b;\n        }\n        return super.getDocsWithField(field);\n      }\n    };\n\n    Filter filter = new FieldValueFilter(\"with_matchall\", true);\n    DocIdSet set = filter.getDocIdSet(filterReader.getContext(), null);\n    assertNull(set);\n\n    filter = new FieldValueFilter(\"with_matchno\");\n    set = filter.getDocIdSet(filterReader.getContext(), null);\n    assertNull(set);\n\n    filter = new FieldValueFilter(\"with_bitset\");\n    set = filter.getDocIdSet(filterReader.getContext(), null);\n    assertTrue(set instanceof BitDocIdSet);\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5864882f6163c513e490c855adeb66eff0a9988e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["5864882f6163c513e490c855adeb66eff0a9988e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["484e80062d7ab2729bc82f0311d6a97dd913961a"]},"commit2Childs":{"5864882f6163c513e490c855adeb66eff0a9988e":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5864882f6163c513e490c855adeb66eff0a9988e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}