{"path":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformerHierarchy#testParentFilterLimitJSON().mjava","commits":[{"id":"44e1477dd67ee1fbc72871f23fb51369bb42cadd","date":1535551329,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformerHierarchy#testParentFilterLimitJSON().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testParentFilterLimitJSON() throws Exception {\n    indexSampleData(numberOfDocsPerNestedTest);\n\n    try(SolrQueryRequest req = req(\"q\", \"type_s:donut\", \"sort\", \"id asc\", \"fl\", \"id, type_s, toppings, _nest_path_, [child childFilter='_nest_path_:\\\"toppings/\\\"' limit=1]\",\n        \"fq\", fqToExcludeNonTestedDocs)) {\n      BasicResultContext res = (BasicResultContext) h.queryAndResponse(\"/select\", req).getResponse();\n      Iterator<SolrDocument> docsStreamer = res.getProcessedDocuments();\n      while (docsStreamer.hasNext()) {\n        SolrDocument doc = docsStreamer.next();\n        cleanSolrDocumentFields(doc);\n        assertFalse(\"root doc should not have anonymous child docs\", doc.hasChildDocuments());\n        assertEquals(\"should only have 1 child doc\", 1, doc.getFieldValues(\"toppings\").size());\n      }\n    }\n\n    assertJQ(req(\"q\", \"type_s:donut\",\n        \"sort\", \"id asc\",\n        \"fl\", \"*, [child limit=1]\",\n        \"fq\", fqToExcludeNonTestedDocs),\n        \"/response/docs/[0]/type_s==donut\",\n        \"/response/docs/[0]/lonely/test_s==testing\",\n        \"/response/docs/[0]/lonely/lonelyGrandChild/test2_s==secondTest\",\n        // \"!\" (negate): don't find toppings.  The \"limit\" kept us from reaching these, which follow lonely.\n        \"!/response/docs/[0]/toppings/[0]/type_s==Regular\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da0c9170fd1c418b47b9a76a0447c60b1b99e5f","date":1548699906,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformerHierarchy#testParentFilterLimitJSON().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformerHierarchy#testParentFilterLimitJSON().mjava","sourceNew":"  @Test\n  public void testParentFilterLimitJSON() throws Exception {\n    indexSampleData(numberOfDocsPerNestedTest);\n\n    try(SolrQueryRequest req = req(\"q\", \"type_s:donut\", \"sort\", \"id asc\", \"fl\", \"id, type_s, toppings, _nest_path_, [child childFilter='_nest_path_:/toppings' limit=1]\",\n        \"fq\", fqToExcludeNonTestedDocs)) {\n      BasicResultContext res = (BasicResultContext) h.queryAndResponse(\"/select\", req).getResponse();\n      Iterator<SolrDocument> docsStreamer = res.getProcessedDocuments();\n      while (docsStreamer.hasNext()) {\n        SolrDocument doc = docsStreamer.next();\n        cleanSolrDocumentFields(doc);\n        assertFalse(\"root doc should not have anonymous child docs\", doc.hasChildDocuments());\n        assertEquals(\"should only have 1 child doc\", 1, doc.getFieldValues(\"toppings\").size());\n      }\n    }\n\n    assertJQ(req(\"q\", \"type_s:donut\",\n        \"sort\", \"id asc\",\n        \"fl\", \"*, [child limit=1]\",\n        \"fq\", fqToExcludeNonTestedDocs),\n        \"/response/docs/[0]/type_s==donut\",\n        \"/response/docs/[0]/lonely/test_s==testing\",\n        \"/response/docs/[0]/lonely/lonelyGrandChild/test2_s==secondTest\",\n        // \"!\" (negate): don't find toppings.  The \"limit\" kept us from reaching these, which follow lonely.\n        \"!/response/docs/[0]/toppings/[0]/type_s==Regular\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testParentFilterLimitJSON() throws Exception {\n    indexSampleData(numberOfDocsPerNestedTest);\n\n    try(SolrQueryRequest req = req(\"q\", \"type_s:donut\", \"sort\", \"id asc\", \"fl\", \"id, type_s, toppings, _nest_path_, [child childFilter='_nest_path_:\\\"toppings/\\\"' limit=1]\",\n        \"fq\", fqToExcludeNonTestedDocs)) {\n      BasicResultContext res = (BasicResultContext) h.queryAndResponse(\"/select\", req).getResponse();\n      Iterator<SolrDocument> docsStreamer = res.getProcessedDocuments();\n      while (docsStreamer.hasNext()) {\n        SolrDocument doc = docsStreamer.next();\n        cleanSolrDocumentFields(doc);\n        assertFalse(\"root doc should not have anonymous child docs\", doc.hasChildDocuments());\n        assertEquals(\"should only have 1 child doc\", 1, doc.getFieldValues(\"toppings\").size());\n      }\n    }\n\n    assertJQ(req(\"q\", \"type_s:donut\",\n        \"sort\", \"id asc\",\n        \"fl\", \"*, [child limit=1]\",\n        \"fq\", fqToExcludeNonTestedDocs),\n        \"/response/docs/[0]/type_s==donut\",\n        \"/response/docs/[0]/lonely/test_s==testing\",\n        \"/response/docs/[0]/lonely/lonelyGrandChild/test2_s==secondTest\",\n        // \"!\" (negate): don't find toppings.  The \"limit\" kept us from reaching these, which follow lonely.\n        \"!/response/docs/[0]/toppings/[0]/type_s==Regular\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8da0c9170fd1c418b47b9a76a0447c60b1b99e5f":["44e1477dd67ee1fbc72871f23fb51369bb42cadd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44e1477dd67ee1fbc72871f23fb51369bb42cadd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8da0c9170fd1c418b47b9a76a0447c60b1b99e5f"]},"commit2Childs":{"8da0c9170fd1c418b47b9a76a0447c60b1b99e5f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44e1477dd67ee1fbc72871f23fb51369bb42cadd"],"44e1477dd67ee1fbc72871f23fb51369bb42cadd":["8da0c9170fd1c418b47b9a76a0447c60b1b99e5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}