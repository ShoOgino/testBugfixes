{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State).mjava","commits":[{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisCoreNodeName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9974f61802aea1d15849a1053f88f5e89fc32b4","date":1462405923,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection);\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection);\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc08f02757dd10637b16a5c65eaaef839a91a9a","date":1462455462,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection);\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection);\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter) {\n    //TODO: We don't need all these getReplicaProps method overloading. Also, it's odd that the default is to return replicas of type TLOG and NRT only\n    return getReplicaProps(collection, shardId, thisCoreNodeName, mustMatchStateFilter, null, EnumSet.of(Replica.Type.TLOG,  Replica.Type.NRT));\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection);\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter) {\n    //TODO: We don't need all these getReplicaProps method overloading. Also, it's odd that the default is to return replicas of type TLOG and NRT only\n    return getReplicaProps(collection, shardId, thisCoreNodeName, mustMatchStateFilter, null, EnumSet.of(Replica.Type.TLOG,  Replica.Type.NRT));\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection);\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n                                               Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter) {\n    //TODO: We don't need all these getReplicaProps method overloading. Also, it's odd that the default is to return replicas of type TLOG and NRT only\n    return getReplicaProps(collection, shardId, thisCoreNodeName, mustMatchStateFilter, null, EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT));\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter) {\n    //TODO: We don't need all these getReplicaProps method overloading. Also, it's odd that the default is to return replicas of type TLOG and NRT only\n    return getReplicaProps(collection, shardId, thisCoreNodeName, mustMatchStateFilter, null, EnumSet.of(Replica.Type.TLOG,  Replica.Type.NRT));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["73450c0955930295d34703e7ddbfc6973b7a121a","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["73450c0955930295d34703e7ddbfc6973b7a121a"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["61c45e99cf6676da48f19d7511c73712ad39402b"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a219f1dcad1700e84807666bdbd2b573e8de7021","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["a219f1dcad1700e84807666bdbd2b573e8de7021","73450c0955930295d34703e7ddbfc6973b7a121a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a219f1dcad1700e84807666bdbd2b573e8de7021","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["73450c0955930295d34703e7ddbfc6973b7a121a","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","2668c99990e4c94a78bac005aa682b7c5986d23a"],"73450c0955930295d34703e7ddbfc6973b7a121a":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":[],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["73450c0955930295d34703e7ddbfc6973b7a121a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}