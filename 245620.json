{"path":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionRescorer#testBasic().mjava","commits":[{"id":"222ff577a0e1b2399d3151966bf561ecd7a0b7d0","date":1395575041,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionRescorer#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic() throws Exception {\n\n    // create a sort field and sort by it (reverse order)\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    IndexReader r = searcher.getIndexReader();\n\n    // Just first pass query\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"3\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    // Now, rescore:\n\n    Expression e = JavascriptCompiler.compile(\"sqrt(_score) + ln(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n    Rescorer rescorer = e.getRescorer(bindings);\n\n    hits = rescorer.rescore(searcher, hits, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"2\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"3\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    String expl = rescorer.explain(searcher,\n                                   searcher.explain(query, hits.scoreDocs[0].doc),\n                                   hits.scoreDocs[0].doc).toString();\n\n    // Confirm the explanation breaks out the individual\n    // variables:\n    assertTrue(expl.contains(\"= variable \\\"popularity\\\"\"));\n\n    // Confirm the explanation includes first pass details:\n    assertTrue(expl.contains(\"= first pass score\"));\n    assertTrue(expl.contains(\"body:contents in\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"501fdb8d708778ae5368dd5c44879e1d46487e43","date":1494401395,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionRescorer#testBasic().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionRescorer#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    // create a sort field and sort by it (reverse order)\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    IndexReader r = searcher.getIndexReader();\n\n    // Just first pass query\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"3\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    // Now, rescore:\n\n    Expression e = JavascriptCompiler.compile(\"sqrt(_score) + ln(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n    Rescorer rescorer = e.getRescorer(bindings);\n\n    hits = rescorer.rescore(searcher, hits, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"2\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"3\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    String expl = rescorer.explain(searcher,\n                                   searcher.explain(query, hits.scoreDocs[0].doc),\n                                   hits.scoreDocs[0].doc).toString();\n\n    // Confirm the explanation breaks out the individual\n    // variables:\n    assertTrue(expl.contains(\"= double(popularity)\"));\n\n    // Confirm the explanation includes first pass details:\n    assertTrue(expl.contains(\"= first pass score\"));\n    assertTrue(expl.contains(\"body:contents in\"));\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    // create a sort field and sort by it (reverse order)\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    IndexReader r = searcher.getIndexReader();\n\n    // Just first pass query\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"3\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    // Now, rescore:\n\n    Expression e = JavascriptCompiler.compile(\"sqrt(_score) + ln(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n    Rescorer rescorer = e.getRescorer(bindings);\n\n    hits = rescorer.rescore(searcher, hits, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"2\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"3\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    String expl = rescorer.explain(searcher,\n                                   searcher.explain(query, hits.scoreDocs[0].doc),\n                                   hits.scoreDocs[0].doc).toString();\n\n    // Confirm the explanation breaks out the individual\n    // variables:\n    assertTrue(expl.contains(\"= variable \\\"popularity\\\"\"));\n\n    // Confirm the explanation includes first pass details:\n    assertTrue(expl.contains(\"= first pass score\"));\n    assertTrue(expl.contains(\"body:contents in\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionRescorer#testBasic().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionRescorer#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    // create a sort field and sort by it (reverse order)\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    IndexReader r = searcher.getIndexReader();\n\n    // Just first pass query\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"3\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    // Now, rescore:\n\n    Expression e = JavascriptCompiler.compile(\"sqrt(_score) + ln(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n    Rescorer rescorer = e.getRescorer(bindings);\n\n    hits = rescorer.rescore(searcher, hits, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"2\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"3\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    String expl = rescorer.explain(searcher,\n                                   searcher.explain(query, hits.scoreDocs[0].doc),\n                                   hits.scoreDocs[0].doc).toString();\n\n    // Confirm the explanation breaks out the individual\n    // variables:\n    assertTrue(expl.contains(\"= double(popularity)\"));\n\n    // Confirm the explanation includes first pass details:\n    assertTrue(expl.contains(\"= first pass score\"));\n    assertTrue(expl.contains(\"body:contents in\"));\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    // create a sort field and sort by it (reverse order)\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    IndexReader r = searcher.getIndexReader();\n\n    // Just first pass query\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"3\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    // Now, rescore:\n\n    Expression e = JavascriptCompiler.compile(\"sqrt(_score) + ln(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n    Rescorer rescorer = e.getRescorer(bindings);\n\n    hits = rescorer.rescore(searcher, hits, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"2\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"3\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    String expl = rescorer.explain(searcher,\n                                   searcher.explain(query, hits.scoreDocs[0].doc),\n                                   hits.scoreDocs[0].doc).toString();\n\n    // Confirm the explanation breaks out the individual\n    // variables:\n    assertTrue(expl.contains(\"= variable \\\"popularity\\\"\"));\n\n    // Confirm the explanation includes first pass details:\n    assertTrue(expl.contains(\"= first pass score\"));\n    assertTrue(expl.contains(\"body:contents in\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionRescorer#testBasic().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionRescorer#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    // create a sort field and sort by it (reverse order)\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    IndexReader r = searcher.getIndexReader();\n\n    // Just first pass query\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(3, hits.totalHits.value);\n    assertEquals(\"3\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    // Now, rescore:\n\n    Expression e = JavascriptCompiler.compile(\"sqrt(_score) + ln(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n    Rescorer rescorer = e.getRescorer(bindings);\n\n    hits = rescorer.rescore(searcher, hits, 10);\n    assertEquals(3, hits.totalHits.value);\n    assertEquals(\"2\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"3\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    String expl = rescorer.explain(searcher,\n                                   searcher.explain(query, hits.scoreDocs[0].doc),\n                                   hits.scoreDocs[0].doc).toString();\n\n    // Confirm the explanation breaks out the individual\n    // variables:\n    assertTrue(expl.contains(\"= double(popularity)\"));\n\n    // Confirm the explanation includes first pass details:\n    assertTrue(expl.contains(\"= first pass score\"));\n    assertTrue(expl.contains(\"body:contents in\"));\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    // create a sort field and sort by it (reverse order)\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    IndexReader r = searcher.getIndexReader();\n\n    // Just first pass query\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"3\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    // Now, rescore:\n\n    Expression e = JavascriptCompiler.compile(\"sqrt(_score) + ln(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n    Rescorer rescorer = e.getRescorer(bindings);\n\n    hits = rescorer.rescore(searcher, hits, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"2\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"3\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    String expl = rescorer.explain(searcher,\n                                   searcher.explain(query, hits.scoreDocs[0].doc),\n                                   hits.scoreDocs[0].doc).toString();\n\n    // Confirm the explanation breaks out the individual\n    // variables:\n    assertTrue(expl.contains(\"= double(popularity)\"));\n\n    // Confirm the explanation includes first pass details:\n    assertTrue(expl.contains(\"= first pass score\"));\n    assertTrue(expl.contains(\"body:contents in\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27d4663d3f6f21a687874d174b49d55645ce99db","date":1587726496,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionRescorer#testBasic().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionRescorer#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    // create a sort field and sort by it (reverse order)\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    IndexReader r = searcher.getIndexReader();\n\n    // Just first pass query\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(3, hits.totalHits.value);\n    assertEquals(\"3\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    // Now, rescore:\n\n    Expression e = JavascriptCompiler.compile(\"sqrt(_score) + ln(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(\"popularity\", DoubleValuesSource.fromIntField(\"popularity\"));\n    bindings.add(\"_score\", DoubleValuesSource.SCORES);\n    Rescorer rescorer = e.getRescorer(bindings);\n\n    hits = rescorer.rescore(searcher, hits, 10);\n    assertEquals(3, hits.totalHits.value);\n    assertEquals(\"2\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"3\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    String expl = rescorer.explain(searcher,\n                                   searcher.explain(query, hits.scoreDocs[0].doc),\n                                   hits.scoreDocs[0].doc).toString();\n\n    // Confirm the explanation breaks out the individual\n    // variables:\n    assertTrue(expl.contains(\"= double(popularity)\"));\n\n    // Confirm the explanation includes first pass details:\n    assertTrue(expl.contains(\"= first pass score\"));\n    assertTrue(expl.contains(\"body:contents in\"));\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    // create a sort field and sort by it (reverse order)\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    IndexReader r = searcher.getIndexReader();\n\n    // Just first pass query\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(3, hits.totalHits.value);\n    assertEquals(\"3\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    // Now, rescore:\n\n    Expression e = JavascriptCompiler.compile(\"sqrt(_score) + ln(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n    Rescorer rescorer = e.getRescorer(bindings);\n\n    hits = rescorer.rescore(searcher, hits, 10);\n    assertEquals(3, hits.totalHits.value);\n    assertEquals(\"2\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"3\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    String expl = rescorer.explain(searcher,\n                                   searcher.explain(query, hits.scoreDocs[0].doc),\n                                   hits.scoreDocs[0].doc).toString();\n\n    // Confirm the explanation breaks out the individual\n    // variables:\n    assertTrue(expl.contains(\"= double(popularity)\"));\n\n    // Confirm the explanation includes first pass details:\n    assertTrue(expl.contains(\"= first pass score\"));\n    assertTrue(expl.contains(\"body:contents in\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"222ff577a0e1b2399d3151966bf561ecd7a0b7d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["222ff577a0e1b2399d3151966bf561ecd7a0b7d0","501fdb8d708778ae5368dd5c44879e1d46487e43"],"501fdb8d708778ae5368dd5c44879e1d46487e43":["222ff577a0e1b2399d3151966bf561ecd7a0b7d0"],"27d4663d3f6f21a687874d174b49d55645ce99db":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["501fdb8d708778ae5368dd5c44879e1d46487e43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27d4663d3f6f21a687874d174b49d55645ce99db"]},"commit2Childs":{"222ff577a0e1b2399d3151966bf561ecd7a0b7d0":["e9017cf144952056066919f1ebc7897ff9bd71b1","501fdb8d708778ae5368dd5c44879e1d46487e43"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"501fdb8d708778ae5368dd5c44879e1d46487e43":["e9017cf144952056066919f1ebc7897ff9bd71b1","83788ad129a5154d5c6562c4e8ce3db48793aada"],"27d4663d3f6f21a687874d174b49d55645ce99db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["222ff577a0e1b2399d3151966bf561ecd7a0b7d0"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["27d4663d3f6f21a687874d174b49d55645ce99db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}