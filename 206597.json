{"path":"solr/src/java/org/apache/solr/update/CommitTracker#run().mjava","commits":[{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/CommitTracker#run().mjava","pathOld":"/dev/null","sourceNew":"  /** This is the worker part for the ScheduledFuture **/\n  public synchronized void run() {\n    long started = System.currentTimeMillis();\n    SolrQueryRequest req = new LocalSolrQueryRequest(core,\n        new ModifiableSolrParams());\n    try {\n      CommitUpdateCommand command = new CommitUpdateCommand(req, false);\n      command.waitSearcher = waitSearcher;\n      command.softCommit = softCommit;\n      // no need for command.maxOptimizeSegments = 1; since it is not optimizing\n      core.getUpdateHandler().commit(command);\n      autoCommitCount++;\n    } catch (Exception e) {\n      log.error(\"auto commit error...\");\n      e.printStackTrace();\n    } finally {\n      pending = null;\n      req.close();\n    }\n    \n    // check if docs have been submitted since the commit started\n    if (lastAddedTime > started) {\n      if (docsUpperBound > 0 && docsSinceCommit > docsUpperBound) {\n        pending = scheduler.schedule(this, 100, TimeUnit.MILLISECONDS);\n      } else if (timeUpperBound > 0) {\n        pending = scheduler.schedule(this, timeUpperBound,\n            TimeUnit.MILLISECONDS);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4b0203706833d89696e68ebfc15ecdc12ff58acd","4b0203706833d89696e68ebfc15ecdc12ff58acd","4b0203706833d89696e68ebfc15ecdc12ff58acd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/CommitTracker#run().mjava","pathOld":"/dev/null","sourceNew":"  /** This is the worker part for the ScheduledFuture **/\n  public synchronized void run() {\n    long started = System.currentTimeMillis();\n    SolrQueryRequest req = new LocalSolrQueryRequest(core,\n        new ModifiableSolrParams());\n    try {\n      CommitUpdateCommand command = new CommitUpdateCommand(req, false);\n      command.waitSearcher = waitSearcher;\n      command.softCommit = softCommit;\n      // no need for command.maxOptimizeSegments = 1; since it is not optimizing\n      core.getUpdateHandler().commit(command);\n      autoCommitCount++;\n    } catch (Exception e) {\n      log.error(\"auto commit error...\");\n      e.printStackTrace();\n    } finally {\n      pending = null;\n      req.close();\n    }\n    \n    // check if docs have been submitted since the commit started\n    if (lastAddedTime > started) {\n      if (docsUpperBound > 0 && docsSinceCommit > docsUpperBound) {\n        pending = scheduler.schedule(this, 100, TimeUnit.MILLISECONDS);\n      } else if (timeUpperBound > 0) {\n        pending = scheduler.schedule(this, timeUpperBound,\n            TimeUnit.MILLISECONDS);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/CommitTracker#run().mjava","pathOld":"/dev/null","sourceNew":"  /** This is the worker part for the ScheduledFuture **/\n  public synchronized void run() {\n    long started = System.currentTimeMillis();\n    SolrQueryRequest req = new LocalSolrQueryRequest(core,\n        new ModifiableSolrParams());\n    try {\n      CommitUpdateCommand command = new CommitUpdateCommand(req, false);\n      command.waitSearcher = waitSearcher;\n      command.softCommit = softCommit;\n      // no need for command.maxOptimizeSegments = 1; since it is not optimizing\n      core.getUpdateHandler().commit(command);\n      autoCommitCount++;\n    } catch (Exception e) {\n      log.error(\"auto commit error...\");\n      e.printStackTrace();\n    } finally {\n      pending = null;\n      req.close();\n    }\n    \n    // check if docs have been submitted since the commit started\n    if (lastAddedTime > started) {\n      if (docsUpperBound > 0 && docsSinceCommit > docsUpperBound) {\n        pending = scheduler.schedule(this, 100, TimeUnit.MILLISECONDS);\n      } else if (timeUpperBound > 0) {\n        pending = scheduler.schedule(this, timeUpperBound,\n            TimeUnit.MILLISECONDS);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CommitTracker#run().mjava","pathOld":"solr/src/java/org/apache/solr/update/CommitTracker#run().mjava","sourceNew":"  /** This is the worker part for the ScheduledFuture **/\n  public synchronized void run() {\n    long started = System.currentTimeMillis();\n    SolrQueryRequest req = new LocalSolrQueryRequest(core,\n        new ModifiableSolrParams());\n    try {\n      CommitUpdateCommand command = new CommitUpdateCommand(req, false);\n      command.waitSearcher = waitSearcher;\n      command.softCommit = softCommit;\n      // no need for command.maxOptimizeSegments = 1; since it is not optimizing\n      core.getUpdateHandler().commit(command);\n      autoCommitCount++;\n    } catch (Exception e) {\n      log.error(\"auto commit error...\");\n      e.printStackTrace();\n    } finally {\n      pending = null;\n      req.close();\n    }\n    \n    // check if docs have been submitted since the commit started\n    if (lastAddedTime > started) {\n      if (docsUpperBound > 0 && docsSinceCommit > docsUpperBound) {\n        pending = scheduler.schedule(this, 100, TimeUnit.MILLISECONDS);\n      } else if (timeUpperBound > 0) {\n        pending = scheduler.schedule(this, timeUpperBound,\n            TimeUnit.MILLISECONDS);\n      }\n    }\n  }\n\n","sourceOld":"  /** This is the worker part for the ScheduledFuture **/\n  public synchronized void run() {\n    long started = System.currentTimeMillis();\n    SolrQueryRequest req = new LocalSolrQueryRequest(core,\n        new ModifiableSolrParams());\n    try {\n      CommitUpdateCommand command = new CommitUpdateCommand(req, false);\n      command.waitSearcher = waitSearcher;\n      command.softCommit = softCommit;\n      // no need for command.maxOptimizeSegments = 1; since it is not optimizing\n      core.getUpdateHandler().commit(command);\n      autoCommitCount++;\n    } catch (Exception e) {\n      log.error(\"auto commit error...\");\n      e.printStackTrace();\n    } finally {\n      pending = null;\n      req.close();\n    }\n    \n    // check if docs have been submitted since the commit started\n    if (lastAddedTime > started) {\n      if (docsUpperBound > 0 && docsSinceCommit > docsUpperBound) {\n        pending = scheduler.schedule(this, 100, TimeUnit.MILLISECONDS);\n      } else if (timeUpperBound > 0) {\n        pending = scheduler.schedule(this, timeUpperBound,\n            TimeUnit.MILLISECONDS);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CommitTracker#run().mjava","pathOld":"solr/src/java/org/apache/solr/update/CommitTracker#run().mjava","sourceNew":"  /** This is the worker part for the ScheduledFuture **/\n  public synchronized void run() {\n    long started = System.currentTimeMillis();\n    SolrQueryRequest req = new LocalSolrQueryRequest(core,\n        new ModifiableSolrParams());\n    try {\n      CommitUpdateCommand command = new CommitUpdateCommand(req, false);\n      command.waitSearcher = waitSearcher;\n      command.softCommit = softCommit;\n      // no need for command.maxOptimizeSegments = 1; since it is not optimizing\n      core.getUpdateHandler().commit(command);\n      autoCommitCount++;\n    } catch (Exception e) {\n      log.error(\"auto commit error...\");\n      e.printStackTrace();\n    } finally {\n      pending = null;\n      req.close();\n    }\n    \n    // check if docs have been submitted since the commit started\n    if (lastAddedTime > started) {\n      if (docsUpperBound > 0 && docsSinceCommit > docsUpperBound) {\n        pending = scheduler.schedule(this, 100, TimeUnit.MILLISECONDS);\n      } else if (timeUpperBound > 0) {\n        pending = scheduler.schedule(this, timeUpperBound,\n            TimeUnit.MILLISECONDS);\n      }\n    }\n  }\n\n","sourceOld":"  /** This is the worker part for the ScheduledFuture **/\n  public synchronized void run() {\n    long started = System.currentTimeMillis();\n    SolrQueryRequest req = new LocalSolrQueryRequest(core,\n        new ModifiableSolrParams());\n    try {\n      CommitUpdateCommand command = new CommitUpdateCommand(req, false);\n      command.waitSearcher = waitSearcher;\n      command.softCommit = softCommit;\n      // no need for command.maxOptimizeSegments = 1; since it is not optimizing\n      core.getUpdateHandler().commit(command);\n      autoCommitCount++;\n    } catch (Exception e) {\n      log.error(\"auto commit error...\");\n      e.printStackTrace();\n    } finally {\n      pending = null;\n      req.close();\n    }\n    \n    // check if docs have been submitted since the commit started\n    if (lastAddedTime > started) {\n      if (docsUpperBound > 0 && docsSinceCommit > docsUpperBound) {\n        pending = scheduler.schedule(this, 100, TimeUnit.MILLISECONDS);\n      } else if (timeUpperBound > 0) {\n        pending = scheduler.schedule(this, timeUpperBound,\n            TimeUnit.MILLISECONDS);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/CommitTracker#run().mjava","pathOld":"solr/src/java/org/apache/solr/update/CommitTracker#run().mjava","sourceNew":"  /** This is the worker part for the ScheduledFuture **/\n  public synchronized void run() {\n    long started = System.currentTimeMillis();\n    SolrQueryRequest req = new LocalSolrQueryRequest(core,\n        new ModifiableSolrParams());\n    try {\n      CommitUpdateCommand command = new CommitUpdateCommand(req, false);\n      command.waitSearcher = waitSearcher;\n      command.softCommit = softCommit;\n      // no need for command.maxOptimizeSegments = 1; since it is not optimizing\n      core.getUpdateHandler().commit(command);\n      autoCommitCount++;\n    } catch (Exception e) {\n      log.error(\"auto commit error...\");\n      e.printStackTrace();\n    } finally {\n      pending = null;\n      req.close();\n    }\n    \n    // check if docs have been submitted since the commit started\n    if (lastAddedTime > started) {\n      if (docsUpperBound > 0 && docsSinceCommit > docsUpperBound) {\n        pending = scheduler.schedule(this, 100, TimeUnit.MILLISECONDS);\n      } else if (timeUpperBound > 0) {\n        pending = scheduler.schedule(this, timeUpperBound,\n            TimeUnit.MILLISECONDS);\n      }\n    }\n  }\n\n","sourceOld":"  /** This is the worker part for the ScheduledFuture **/\n  public synchronized void run() {\n    long started = System.currentTimeMillis();\n    SolrQueryRequest req = new LocalSolrQueryRequest(core,\n        new ModifiableSolrParams());\n    try {\n      CommitUpdateCommand command = new CommitUpdateCommand(req, false);\n      command.waitSearcher = waitSearcher;\n      command.softCommit = softCommit;\n      // no need for command.maxOptimizeSegments = 1; since it is not optimizing\n      core.getUpdateHandler().commit(command);\n      autoCommitCount++;\n    } catch (Exception e) {\n      log.error(\"auto commit error...\");\n      e.printStackTrace();\n    } finally {\n      pending = null;\n      req.close();\n    }\n    \n    // check if docs have been submitted since the commit started\n    if (lastAddedTime > started) {\n      if (docsUpperBound > 0 && docsSinceCommit > docsUpperBound) {\n        pending = scheduler.schedule(this, 100, TimeUnit.MILLISECONDS);\n      } else if (timeUpperBound > 0) {\n        pending = scheduler.schedule(this, timeUpperBound,\n            TimeUnit.MILLISECONDS);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"c26f00b574427b55127e869b935845554afde1fa":["7a71a0b2d4be2299a163f60626729852d81a8e02","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a71a0b2d4be2299a163f60626729852d81a8e02"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a71a0b2d4be2299a163f60626729852d81a8e02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","7a71a0b2d4be2299a163f60626729852d81a8e02"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}