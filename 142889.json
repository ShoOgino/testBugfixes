{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentInfoPerCommit,IOContext,Directory,DocValuesFormat,Long,List[FieldInfo]).mjava","commits":[{"id":"ac14bdd59867c398bdb1a9cc50583bd3c93593e5","date":1382646404,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentInfoPerCommit,IOContext,Directory,DocValuesFormat,Long,List[FieldInfo]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#newDocValuesProducer(SegmentInfoPerCommit,IOContext,Directory,DocValuesFormat,Long,List[FieldInfo]).mjava","sourceNew":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentInfoPerCommit si, IOContext context, Directory dir,\n      DocValuesFormat dvFormat, final Long gen, List<FieldInfo> infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, new FieldInfos(infos.toArray(new FieldInfo[infos.size()])), context, segmentSuffix);\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentInfoPerCommit si, IOContext context, Directory dir,\n      DocValuesFormat dvFormat, Long gen, List<FieldInfo> infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, new FieldInfos(infos.toArray(new FieldInfo[infos.size()])), context, segmentSuffix);\n    return new DocValuesRefCount(dvFormat.fieldsProducer(srs));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,IOContext,Directory,DocValuesFormat,Long,List[FieldInfo]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentInfoPerCommit,IOContext,Directory,DocValuesFormat,Long,List[FieldInfo]).mjava","sourceNew":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentCommitInfo si, IOContext context, Directory dir,\n      DocValuesFormat dvFormat, final Long gen, List<FieldInfo> infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, new FieldInfos(infos.toArray(new FieldInfo[infos.size()])), context, segmentSuffix);\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentInfoPerCommit si, IOContext context, Directory dir,\n      DocValuesFormat dvFormat, final Long gen, List<FieldInfo> infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, new FieldInfos(infos.toArray(new FieldInfo[infos.size()])), context, segmentSuffix);\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["ac14bdd59867c398bdb1a9cc50583bd3c93593e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac14bdd59867c398bdb1a9cc50583bd3c93593e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac14bdd59867c398bdb1a9cc50583bd3c93593e5"],"ac14bdd59867c398bdb1a9cc50583bd3c93593e5":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}