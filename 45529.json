{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.US));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    TeeSinkTokenFilter.SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.US));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    TeeSinkTokenFilter.SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.ROOT));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    TeeSinkTokenFilter.SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.US));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    TeeSinkTokenFilter.SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.ROOT));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    TeeSinkTokenFilter.SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.US));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    TeeSinkTokenFilter.SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.ROOT));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    TeeSinkTokenFilter.SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.US));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    TeeSinkTokenFilter.SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.ROOT));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    TeeSinkTokenFilter.SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.US));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    TeeSinkTokenFilter.SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.ROOT));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    final MockTokenizer input = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    input.setReader(new StringReader(test));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(input);\n    TeeSinkTokenFilter.SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.ROOT));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    TeeSinkTokenFilter.SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eac7b217fb57548b6fc21f0117e74698afde766","date":1452862547,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","sourceNew":null,"sourceOld":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.ROOT));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    final MockTokenizer input = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    input.setReader(new StringReader(test));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(input);\n    TeeSinkTokenFilter.SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3eac7b217fb57548b6fc21f0117e74698afde766"],"3eac7b217fb57548b6fc21f0117e74698afde766":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["3eac7b217fb57548b6fc21f0117e74698afde766"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","fe33227f6805edab2036cbb80645cc4e2d1fa424","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3eac7b217fb57548b6fc21f0117e74698afde766":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}