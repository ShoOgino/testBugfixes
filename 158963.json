{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/FixedStraightBytesImpl.Writer#mergeDoc(int,int).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/FixedStraightBytesImpl.Writer#mergeDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/FixedStraightBytesImpl.Writer#mergeDoc(int,int).mjava","sourceNew":"    @Override\n    protected void mergeDoc(int docID, int sourceDoc) throws IOException {\n      assert lastDocID < docID;\n      setMergeBytes(sourceDoc);\n      if (size == -1) {\n        size = bytesRef.length;\n        datOut.writeInt(size);\n      }\n      assert size == bytesRef.length : \"size: \" + size + \" ref: \" + bytesRef.length;\n      if (lastDocID+1 < docID) {\n        fill(datOut, docID);\n      }\n      datOut.writeBytes(bytesRef.bytes, bytesRef.offset, bytesRef.length);\n      lastDocID = docID;\n    }\n\n","sourceOld":"    @Override\n    protected void mergeDoc(int docID, int sourceDoc) throws IOException {\n      assert lastDocID < docID;\n      setMergeBytes(sourceDoc);\n      if (size == -1) {\n        size = bytesRef.length;\n        datOut.writeInt(size);\n      }\n      assert size == bytesRef.length : \"size: \" + size + \" ref: \" + bytesRef.length;\n      if (lastDocID+1 < docID) {\n        fill(datOut, docID);\n      }\n      datOut.writeBytes(bytesRef.bytes, bytesRef.offset, bytesRef.length);\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/FixedStraightBytesImpl.Writer#mergeDoc(Field,Source,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/FixedStraightBytesImpl.Writer#mergeDoc(int,int).mjava","sourceNew":"    @Override\n    protected void mergeDoc(Field scratchField, Source source, int docID, int sourceDoc) throws IOException {\n      assert lastDocID < docID;\n      setMergeBytes(source, sourceDoc);\n      if (size == -1) {\n        size = bytesRef.length;\n        datOut.writeInt(size);\n      }\n      assert size == bytesRef.length : \"size: \" + size + \" ref: \" + bytesRef.length;\n      if (lastDocID+1 < docID) {\n        fill(datOut, docID);\n      }\n      datOut.writeBytes(bytesRef.bytes, bytesRef.offset, bytesRef.length);\n      lastDocID = docID;\n    }\n\n","sourceOld":"    @Override\n    protected void mergeDoc(int docID, int sourceDoc) throws IOException {\n      assert lastDocID < docID;\n      setMergeBytes(sourceDoc);\n      if (size == -1) {\n        size = bytesRef.length;\n        datOut.writeInt(size);\n      }\n      assert size == bytesRef.length : \"size: \" + size + \" ref: \" + bytesRef.length;\n      if (lastDocID+1 < docID) {\n        fill(datOut, docID);\n      }\n      datOut.writeBytes(bytesRef.bytes, bytesRef.offset, bytesRef.length);\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa0f44f887719e97183771e977cfc4bfb485b766"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"fa0f44f887719e97183771e977cfc4bfb485b766":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["fa0f44f887719e97183771e977cfc4bfb485b766"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}