{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/LengthGoalBreakIterator#following(int).mjava","commits":[{"id":"1c215be2eed9175b15dc0027a12e6f3a6ace25f8","date":1483848648,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/LengthGoalBreakIterator#following(int).mjava","pathOld":"/dev/null","sourceNew":"  // called while the current position is the start of a new passage; find end of passage\n  @Override\n  public int following(int followingIdx) {\n    final int startIdx = current();\n    if (followingIdx < startIdx) {\n      assert false : \"Not supported\";\n      return baseIter.following(followingIdx);\n    }\n    final int targetIdx = startIdx + lengthGoal;\n    // When followingIdx >= targetIdx, we can simply delegate since it will be >= the target\n    if (followingIdx >= targetIdx - 1) {\n      return baseIter.following(followingIdx);\n    }\n    // If target exceeds the text length, return the last index.\n    if (targetIdx >= getText().getEndIndex()) {\n      return baseIter.last();\n    }\n\n    // Find closest break >= the target\n    final int afterIdx = baseIter.following(targetIdx - 1);\n    if (afterIdx == DONE) { // we're at the end; can this happen?\n      return current();\n    }\n    if (afterIdx == targetIdx) { // right on the money\n      return afterIdx;\n    }\n    if (isMinimumLength) { // thus never undershoot\n      return afterIdx;\n    }\n\n    // note: it is a shame that we invoke preceding() *in addition to* following(); BI's are sometimes expensive.\n\n    // Find closest break < target\n    final int beforeIdx = baseIter.preceding(targetIdx); // or could do baseIter.previous() but we hope the BI implements preceding()\n    if (beforeIdx <= followingIdx) { // too far back\n      return moveToBreak(afterIdx);\n    }\n\n    if (targetIdx - beforeIdx <= afterIdx - targetIdx) {\n      return beforeIdx;\n    }\n    return moveToBreak(afterIdx);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/LengthGoalBreakIterator#following(int).mjava","pathOld":"/dev/null","sourceNew":"  // called while the current position is the start of a new passage; find end of passage\n  @Override\n  public int following(int followingIdx) {\n    final int startIdx = current();\n    if (followingIdx < startIdx) {\n      assert false : \"Not supported\";\n      return baseIter.following(followingIdx);\n    }\n    final int targetIdx = startIdx + lengthGoal;\n    // When followingIdx >= targetIdx, we can simply delegate since it will be >= the target\n    if (followingIdx >= targetIdx - 1) {\n      return baseIter.following(followingIdx);\n    }\n    // If target exceeds the text length, return the last index.\n    if (targetIdx >= getText().getEndIndex()) {\n      return baseIter.last();\n    }\n\n    // Find closest break >= the target\n    final int afterIdx = baseIter.following(targetIdx - 1);\n    if (afterIdx == DONE) { // we're at the end; can this happen?\n      return current();\n    }\n    if (afterIdx == targetIdx) { // right on the money\n      return afterIdx;\n    }\n    if (isMinimumLength) { // thus never undershoot\n      return afterIdx;\n    }\n\n    // note: it is a shame that we invoke preceding() *in addition to* following(); BI's are sometimes expensive.\n\n    // Find closest break < target\n    final int beforeIdx = baseIter.preceding(targetIdx); // or could do baseIter.previous() but we hope the BI implements preceding()\n    if (beforeIdx <= followingIdx) { // too far back\n      return moveToBreak(afterIdx);\n    }\n\n    if (targetIdx - beforeIdx <= afterIdx - targetIdx) {\n      return beforeIdx;\n    }\n    return moveToBreak(afterIdx);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab9796b8ce55058e483d2f195ac9b1942fcf478","date":1577858220,"type":3,"author":"Nándor Mátravölgyi","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/LengthGoalBreakIterator#following(int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/LengthGoalBreakIterator#following(int).mjava","sourceNew":"  @Override\n  public int following(int matchEndIndex) {\n    return following(matchEndIndex, (matchEndIndex + 1) + (int)(lengthGoal * (1.f - fragmentAlignment)));\n  }\n\n","sourceOld":"  // called while the current position is the start of a new passage; find end of passage\n  @Override\n  public int following(int followingIdx) {\n    final int startIdx = current();\n    if (followingIdx < startIdx) {\n      assert false : \"Not supported\";\n      return baseIter.following(followingIdx);\n    }\n    final int targetIdx = startIdx + lengthGoal;\n    // When followingIdx >= targetIdx, we can simply delegate since it will be >= the target\n    if (followingIdx >= targetIdx - 1) {\n      return baseIter.following(followingIdx);\n    }\n    // If target exceeds the text length, return the last index.\n    if (targetIdx >= getText().getEndIndex()) {\n      return baseIter.last();\n    }\n\n    // Find closest break >= the target\n    final int afterIdx = baseIter.following(targetIdx - 1);\n    if (afterIdx == DONE) { // we're at the end; can this happen?\n      return current();\n    }\n    if (afterIdx == targetIdx) { // right on the money\n      return afterIdx;\n    }\n    if (isMinimumLength) { // thus never undershoot\n      return afterIdx;\n    }\n\n    // note: it is a shame that we invoke preceding() *in addition to* following(); BI's are sometimes expensive.\n\n    // Find closest break < target\n    final int beforeIdx = baseIter.preceding(targetIdx); // or could do baseIter.previous() but we hope the BI implements preceding()\n    if (beforeIdx <= followingIdx) { // too far back\n      return moveToBreak(afterIdx);\n    }\n\n    if (targetIdx - beforeIdx <= afterIdx - targetIdx) {\n      return beforeIdx;\n    }\n    return moveToBreak(afterIdx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c606b777c4250f3f3f6f66d659c7c4c403679b71","date":1577958559,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/LengthGoalBreakIterator#following(int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/LengthGoalBreakIterator#following(int).mjava","sourceNew":"  @Override\n  public int following(int matchEndIndex) {\n    return following(matchEndIndex, (matchEndIndex + 1) + (int)(lengthGoal * (1.f - fragmentAlignment)));\n  }\n\n","sourceOld":"  // called while the current position is the start of a new passage; find end of passage\n  @Override\n  public int following(int followingIdx) {\n    final int startIdx = current();\n    if (followingIdx < startIdx) {\n      assert false : \"Not supported\";\n      return baseIter.following(followingIdx);\n    }\n    final int targetIdx = startIdx + lengthGoal;\n    // When followingIdx >= targetIdx, we can simply delegate since it will be >= the target\n    if (followingIdx >= targetIdx - 1) {\n      return baseIter.following(followingIdx);\n    }\n    // If target exceeds the text length, return the last index.\n    if (targetIdx >= getText().getEndIndex()) {\n      return baseIter.last();\n    }\n\n    // Find closest break >= the target\n    final int afterIdx = baseIter.following(targetIdx - 1);\n    if (afterIdx == DONE) { // we're at the end; can this happen?\n      return current();\n    }\n    if (afterIdx == targetIdx) { // right on the money\n      return afterIdx;\n    }\n    if (isMinimumLength) { // thus never undershoot\n      return afterIdx;\n    }\n\n    // note: it is a shame that we invoke preceding() *in addition to* following(); BI's are sometimes expensive.\n\n    // Find closest break < target\n    final int beforeIdx = baseIter.preceding(targetIdx); // or could do baseIter.previous() but we hope the BI implements preceding()\n    if (beforeIdx <= followingIdx) { // too far back\n      return moveToBreak(afterIdx);\n    }\n\n    if (targetIdx - beforeIdx <= afterIdx - targetIdx) {\n      return beforeIdx;\n    }\n    return moveToBreak(afterIdx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ab9796b8ce55058e483d2f195ac9b1942fcf478":["1c215be2eed9175b15dc0027a12e6f3a6ace25f8"],"c606b777c4250f3f3f6f66d659c7c4c403679b71":["1c215be2eed9175b15dc0027a12e6f3a6ace25f8","9ab9796b8ce55058e483d2f195ac9b1942fcf478"],"1c215be2eed9175b15dc0027a12e6f3a6ace25f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c215be2eed9175b15dc0027a12e6f3a6ace25f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ab9796b8ce55058e483d2f195ac9b1942fcf478"]},"commit2Childs":{"9ab9796b8ce55058e483d2f195ac9b1942fcf478":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c606b777c4250f3f3f6f66d659c7c4c403679b71":[],"1c215be2eed9175b15dc0027a12e6f3a6ace25f8":["9ab9796b8ce55058e483d2f195ac9b1942fcf478","c606b777c4250f3f3f6f66d659c7c4c403679b71","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1c215be2eed9175b15dc0027a12e6f3a6ace25f8","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c606b777c4250f3f3f6f66d659c7c4c403679b71","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}