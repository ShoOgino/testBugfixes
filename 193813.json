{"path":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testToString().mjava","commits":[{"id":"86cab68ee900a31d093b114182b488ea8e85c59d","date":1456171815,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testToString() throws Exception {\n    \n    // ints\n    assertEquals(\"field:[1 TO 2}\", PointRangeQuery.newIntRange(\"field\", 1, true, 2, false).toString());\n    assertEquals(\"field:{-2 TO 1]\", PointRangeQuery.newIntRange(\"field\", -2, false, 1, true).toString());\n    assertEquals(\"field:[* TO 2}\", PointRangeQuery.newIntRange(\"field\", null, true, 2, false).toString());\n\n    // longs\n    assertEquals(\"field:[1099511627776 TO 2199023255552}\", PointRangeQuery.newLongRange(\"field\", 1L<<40, true, 1L<<41, false).toString());\n    assertEquals(\"field:{-5 TO 6]\", PointRangeQuery.newLongRange(\"field\", -5L, false, 6L, true).toString());\n    assertEquals(\"field:[* TO 2}\", PointRangeQuery.newLongRange(\"field\", null, true, 2L, false).toString());\n    \n    // floats\n    assertEquals(\"field:[1.3 TO 2.5}\", PointRangeQuery.newFloatRange(\"field\", 1.3F, true, 2.5F, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", PointRangeQuery.newFloatRange(\"field\", -2.9F, false, 1.0F, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", PointRangeQuery.newFloatRange(\"field\", -2.9F, false, null, true).toString());\n    \n    // doubles\n    assertEquals(\"field:[1.3 TO 2.5}\", PointRangeQuery.newDoubleRange(\"field\", 1.3, true, 2.5, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", PointRangeQuery.newDoubleRange(\"field\", -2.9, false, 1.0, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", PointRangeQuery.newDoubleRange(\"field\", -2.9, false, null, true).toString());\n    \n    // n-dimensional double\n    assertEquals(\"field:[1.3 TO 2.5},{-2.9 TO 1.0]\", PointRangeQuery.newMultiDoubleRange(\"field\", \n                                                                      new Double[] { 1.3, -2.9 }, \n                                                                      new boolean[] { true, false }, \n                                                                      new Double[] { 2.5, 1.0 },\n                                                                      new boolean[] { false, true }).toString());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testToString() throws Exception {\n    \n    // ints\n    assertEquals(\"field:[1 TO 2}\", PointRangeQuery.newIntRange(\"field\", 1, true, 2, false).toString());\n    assertEquals(\"field:{-2 TO 1]\", PointRangeQuery.newIntRange(\"field\", -2, false, 1, true).toString());\n    assertEquals(\"field:[* TO 2}\", PointRangeQuery.newIntRange(\"field\", null, true, 2, false).toString());\n\n    // longs\n    assertEquals(\"field:[1099511627776 TO 2199023255552}\", PointRangeQuery.newLongRange(\"field\", 1L<<40, true, 1L<<41, false).toString());\n    assertEquals(\"field:{-5 TO 6]\", PointRangeQuery.newLongRange(\"field\", -5L, false, 6L, true).toString());\n    assertEquals(\"field:[* TO 2}\", PointRangeQuery.newLongRange(\"field\", null, true, 2L, false).toString());\n    \n    // floats\n    assertEquals(\"field:[1.3 TO 2.5}\", PointRangeQuery.newFloatRange(\"field\", 1.3F, true, 2.5F, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", PointRangeQuery.newFloatRange(\"field\", -2.9F, false, 1.0F, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", PointRangeQuery.newFloatRange(\"field\", -2.9F, false, null, true).toString());\n    \n    // doubles\n    assertEquals(\"field:[1.3 TO 2.5}\", PointRangeQuery.newDoubleRange(\"field\", 1.3, true, 2.5, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", PointRangeQuery.newDoubleRange(\"field\", -2.9, false, 1.0, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", PointRangeQuery.newDoubleRange(\"field\", -2.9, false, null, true).toString());\n    \n    // n-dimensional double\n    assertEquals(\"field:[1.3 TO 2.5},{-2.9 TO 1.0]\", PointRangeQuery.newMultiDoubleRange(\"field\", \n                                                                      new Double[] { 1.3, -2.9 }, \n                                                                      new boolean[] { true, false }, \n                                                                      new Double[] { 2.5, 1.0 },\n                                                                      new boolean[] { false, true }).toString());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3104a6ba367dfb690806b227c5ef17c42c6107b","date":1456265035,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testToString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    \n    // ints\n    assertEquals(\"field:[1 TO 2}\", IntPoint.newRangeQuery(\"field\", 1, true, 2, false).toString());\n    assertEquals(\"field:{-2 TO 1]\", IntPoint.newRangeQuery(\"field\", -2, false, 1, true).toString());\n    assertEquals(\"field:[* TO 2}\", IntPoint.newRangeQuery(\"field\", null, true, 2, false).toString());\n\n    // longs\n    assertEquals(\"field:[1099511627776 TO 2199023255552}\", LongPoint.newRangeQuery(\"field\", 1L<<40, true, 1L<<41, false).toString());\n    assertEquals(\"field:{-5 TO 6]\", LongPoint.newRangeQuery(\"field\", -5L, false, 6L, true).toString());\n    assertEquals(\"field:[* TO 2}\", LongPoint.newRangeQuery(\"field\", null, true, 2L, false).toString());\n    \n    // floats\n    assertEquals(\"field:[1.3 TO 2.5}\", FloatPoint.newRangeQuery(\"field\", 1.3F, true, 2.5F, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", FloatPoint.newRangeQuery(\"field\", -2.9F, false, 1.0F, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", FloatPoint.newRangeQuery(\"field\", -2.9F, false, null, true).toString());\n    \n    // doubles\n    assertEquals(\"field:[1.3 TO 2.5}\", DoublePoint.newRangeQuery(\"field\", 1.3, true, 2.5, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", DoublePoint.newRangeQuery(\"field\", -2.9, false, 1.0, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", DoublePoint.newRangeQuery(\"field\", -2.9, false, null, true).toString());\n    \n    // n-dimensional double\n    assertEquals(\"field:[1.3 TO 2.5},{-2.9 TO 1.0]\", DoublePoint.newMultiRangeQuery(\"field\", \n                                                                      new Double[] { 1.3, -2.9 }, \n                                                                      new boolean[] { true, false }, \n                                                                      new Double[] { 2.5, 1.0 },\n                                                                      new boolean[] { false, true }).toString());\n\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    \n    // ints\n    assertEquals(\"field:[1 TO 2}\", PointRangeQuery.newIntRange(\"field\", 1, true, 2, false).toString());\n    assertEquals(\"field:{-2 TO 1]\", PointRangeQuery.newIntRange(\"field\", -2, false, 1, true).toString());\n    assertEquals(\"field:[* TO 2}\", PointRangeQuery.newIntRange(\"field\", null, true, 2, false).toString());\n\n    // longs\n    assertEquals(\"field:[1099511627776 TO 2199023255552}\", PointRangeQuery.newLongRange(\"field\", 1L<<40, true, 1L<<41, false).toString());\n    assertEquals(\"field:{-5 TO 6]\", PointRangeQuery.newLongRange(\"field\", -5L, false, 6L, true).toString());\n    assertEquals(\"field:[* TO 2}\", PointRangeQuery.newLongRange(\"field\", null, true, 2L, false).toString());\n    \n    // floats\n    assertEquals(\"field:[1.3 TO 2.5}\", PointRangeQuery.newFloatRange(\"field\", 1.3F, true, 2.5F, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", PointRangeQuery.newFloatRange(\"field\", -2.9F, false, 1.0F, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", PointRangeQuery.newFloatRange(\"field\", -2.9F, false, null, true).toString());\n    \n    // doubles\n    assertEquals(\"field:[1.3 TO 2.5}\", PointRangeQuery.newDoubleRange(\"field\", 1.3, true, 2.5, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", PointRangeQuery.newDoubleRange(\"field\", -2.9, false, 1.0, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", PointRangeQuery.newDoubleRange(\"field\", -2.9, false, null, true).toString());\n    \n    // n-dimensional double\n    assertEquals(\"field:[1.3 TO 2.5},{-2.9 TO 1.0]\", PointRangeQuery.newMultiDoubleRange(\"field\", \n                                                                      new Double[] { 1.3, -2.9 }, \n                                                                      new boolean[] { true, false }, \n                                                                      new Double[] { 2.5, 1.0 },\n                                                                      new boolean[] { false, true }).toString());\n\n  }\n\n","bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","date":1456265720,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testToString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    \n    // ints\n    assertEquals(\"field:[1 TO 2}\", IntPoint.newRangeQuery(\"field\", 1, true, 2, false).toString());\n    assertEquals(\"field:{-2 TO 1]\", IntPoint.newRangeQuery(\"field\", -2, false, 1, true).toString());\n    assertEquals(\"field:[* TO 2}\", IntPoint.newRangeQuery(\"field\", null, true, 2, false).toString());\n\n    // longs\n    assertEquals(\"field:[1099511627776 TO 2199023255552}\", LongPoint.newRangeQuery(\"field\", 1L<<40, true, 1L<<41, false).toString());\n    assertEquals(\"field:{-5 TO 6]\", LongPoint.newRangeQuery(\"field\", -5L, false, 6L, true).toString());\n    assertEquals(\"field:[* TO 2}\", LongPoint.newRangeQuery(\"field\", null, true, 2L, false).toString());\n    \n    // floats\n    assertEquals(\"field:[1.3 TO 2.5}\", FloatPoint.newRangeQuery(\"field\", 1.3F, true, 2.5F, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", FloatPoint.newRangeQuery(\"field\", -2.9F, false, 1.0F, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", FloatPoint.newRangeQuery(\"field\", -2.9F, false, null, true).toString());\n    \n    // doubles\n    assertEquals(\"field:[1.3 TO 2.5}\", DoublePoint.newRangeQuery(\"field\", 1.3, true, 2.5, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", DoublePoint.newRangeQuery(\"field\", -2.9, false, 1.0, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", DoublePoint.newRangeQuery(\"field\", -2.9, false, null, true).toString());\n    \n    // n-dimensional double\n    assertEquals(\"field:[1.3 TO 2.5},{-2.9 TO 1.0]\", DoublePoint.newMultiRangeQuery(\"field\", \n                                                                      new Double[] { 1.3, -2.9 }, \n                                                                      new boolean[] { true, false }, \n                                                                      new Double[] { 2.5, 1.0 },\n                                                                      new boolean[] { false, true }).toString());\n\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    \n    // ints\n    assertEquals(\"field:[1 TO 2}\", PointRangeQuery.newIntRange(\"field\", 1, true, 2, false).toString());\n    assertEquals(\"field:{-2 TO 1]\", PointRangeQuery.newIntRange(\"field\", -2, false, 1, true).toString());\n    assertEquals(\"field:[* TO 2}\", PointRangeQuery.newIntRange(\"field\", null, true, 2, false).toString());\n\n    // longs\n    assertEquals(\"field:[1099511627776 TO 2199023255552}\", PointRangeQuery.newLongRange(\"field\", 1L<<40, true, 1L<<41, false).toString());\n    assertEquals(\"field:{-5 TO 6]\", PointRangeQuery.newLongRange(\"field\", -5L, false, 6L, true).toString());\n    assertEquals(\"field:[* TO 2}\", PointRangeQuery.newLongRange(\"field\", null, true, 2L, false).toString());\n    \n    // floats\n    assertEquals(\"field:[1.3 TO 2.5}\", PointRangeQuery.newFloatRange(\"field\", 1.3F, true, 2.5F, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", PointRangeQuery.newFloatRange(\"field\", -2.9F, false, 1.0F, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", PointRangeQuery.newFloatRange(\"field\", -2.9F, false, null, true).toString());\n    \n    // doubles\n    assertEquals(\"field:[1.3 TO 2.5}\", PointRangeQuery.newDoubleRange(\"field\", 1.3, true, 2.5, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", PointRangeQuery.newDoubleRange(\"field\", -2.9, false, 1.0, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", PointRangeQuery.newDoubleRange(\"field\", -2.9, false, null, true).toString());\n    \n    // n-dimensional double\n    assertEquals(\"field:[1.3 TO 2.5},{-2.9 TO 1.0]\", PointRangeQuery.newMultiDoubleRange(\"field\", \n                                                                      new Double[] { 1.3, -2.9 }, \n                                                                      new boolean[] { true, false }, \n                                                                      new Double[] { 2.5, 1.0 },\n                                                                      new boolean[] { false, true }).toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testToString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    \n    // ints\n    assertEquals(\"field:[1 TO 2}\", IntPoint.newRangeQuery(\"field\", 1, true, 2, false).toString());\n    assertEquals(\"field:{-2 TO 1]\", IntPoint.newRangeQuery(\"field\", -2, false, 1, true).toString());\n    assertEquals(\"field:[* TO 2}\", IntPoint.newRangeQuery(\"field\", null, true, 2, false).toString());\n\n    // longs\n    assertEquals(\"field:[1099511627776 TO 2199023255552}\", LongPoint.newRangeQuery(\"field\", 1L<<40, true, 1L<<41, false).toString());\n    assertEquals(\"field:{-5 TO 6]\", LongPoint.newRangeQuery(\"field\", -5L, false, 6L, true).toString());\n    assertEquals(\"field:[* TO 2}\", LongPoint.newRangeQuery(\"field\", null, true, 2L, false).toString());\n    \n    // floats\n    assertEquals(\"field:[1.3 TO 2.5}\", FloatPoint.newRangeQuery(\"field\", 1.3F, true, 2.5F, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", FloatPoint.newRangeQuery(\"field\", -2.9F, false, 1.0F, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", FloatPoint.newRangeQuery(\"field\", -2.9F, false, null, true).toString());\n    \n    // doubles\n    assertEquals(\"field:[1.3 TO 2.5}\", DoublePoint.newRangeQuery(\"field\", 1.3, true, 2.5, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", DoublePoint.newRangeQuery(\"field\", -2.9, false, 1.0, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", DoublePoint.newRangeQuery(\"field\", -2.9, false, null, true).toString());\n    \n    // n-dimensional double\n    assertEquals(\"field:[1.3 TO 2.5},{-2.9 TO 1.0]\", DoublePoint.newMultiRangeQuery(\"field\", \n                                                                      new Double[] { 1.3, -2.9 }, \n                                                                      new boolean[] { true, false }, \n                                                                      new Double[] { 2.5, 1.0 },\n                                                                      new boolean[] { false, true }).toString());\n\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    \n    // ints\n    assertEquals(\"field:[1 TO 2}\", PointRangeQuery.newIntRange(\"field\", 1, true, 2, false).toString());\n    assertEquals(\"field:{-2 TO 1]\", PointRangeQuery.newIntRange(\"field\", -2, false, 1, true).toString());\n    assertEquals(\"field:[* TO 2}\", PointRangeQuery.newIntRange(\"field\", null, true, 2, false).toString());\n\n    // longs\n    assertEquals(\"field:[1099511627776 TO 2199023255552}\", PointRangeQuery.newLongRange(\"field\", 1L<<40, true, 1L<<41, false).toString());\n    assertEquals(\"field:{-5 TO 6]\", PointRangeQuery.newLongRange(\"field\", -5L, false, 6L, true).toString());\n    assertEquals(\"field:[* TO 2}\", PointRangeQuery.newLongRange(\"field\", null, true, 2L, false).toString());\n    \n    // floats\n    assertEquals(\"field:[1.3 TO 2.5}\", PointRangeQuery.newFloatRange(\"field\", 1.3F, true, 2.5F, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", PointRangeQuery.newFloatRange(\"field\", -2.9F, false, 1.0F, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", PointRangeQuery.newFloatRange(\"field\", -2.9F, false, null, true).toString());\n    \n    // doubles\n    assertEquals(\"field:[1.3 TO 2.5}\", PointRangeQuery.newDoubleRange(\"field\", 1.3, true, 2.5, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", PointRangeQuery.newDoubleRange(\"field\", -2.9, false, 1.0, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", PointRangeQuery.newDoubleRange(\"field\", -2.9, false, null, true).toString());\n    \n    // n-dimensional double\n    assertEquals(\"field:[1.3 TO 2.5},{-2.9 TO 1.0]\", PointRangeQuery.newMultiDoubleRange(\"field\", \n                                                                      new Double[] { 1.3, -2.9 }, \n                                                                      new boolean[] { true, false }, \n                                                                      new Double[] { 2.5, 1.0 },\n                                                                      new boolean[] { false, true }).toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testToString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    \n    // ints\n    assertEquals(\"field:[1 TO 2}\", IntPoint.newRangeQuery(\"field\", 1, true, 2, false).toString());\n    assertEquals(\"field:{-2 TO 1]\", IntPoint.newRangeQuery(\"field\", -2, false, 1, true).toString());\n    assertEquals(\"field:[* TO 2}\", IntPoint.newRangeQuery(\"field\", null, true, 2, false).toString());\n\n    // longs\n    assertEquals(\"field:[1099511627776 TO 2199023255552}\", LongPoint.newRangeQuery(\"field\", 1L<<40, true, 1L<<41, false).toString());\n    assertEquals(\"field:{-5 TO 6]\", LongPoint.newRangeQuery(\"field\", -5L, false, 6L, true).toString());\n    assertEquals(\"field:[* TO 2}\", LongPoint.newRangeQuery(\"field\", null, true, 2L, false).toString());\n    \n    // floats\n    assertEquals(\"field:[1.3 TO 2.5}\", FloatPoint.newRangeQuery(\"field\", 1.3F, true, 2.5F, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", FloatPoint.newRangeQuery(\"field\", -2.9F, false, 1.0F, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", FloatPoint.newRangeQuery(\"field\", -2.9F, false, null, true).toString());\n    \n    // doubles\n    assertEquals(\"field:[1.3 TO 2.5}\", DoublePoint.newRangeQuery(\"field\", 1.3, true, 2.5, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", DoublePoint.newRangeQuery(\"field\", -2.9, false, 1.0, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", DoublePoint.newRangeQuery(\"field\", -2.9, false, null, true).toString());\n    \n    // n-dimensional double\n    assertEquals(\"field:[1.3 TO 2.5},{-2.9 TO 1.0]\", DoublePoint.newMultiRangeQuery(\"field\", \n                                                                      new Double[] { 1.3, -2.9 }, \n                                                                      new boolean[] { true, false }, \n                                                                      new Double[] { 2.5, 1.0 },\n                                                                      new boolean[] { false, true }).toString());\n\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    \n    // ints\n    assertEquals(\"field:[1 TO 2}\", PointRangeQuery.newIntRange(\"field\", 1, true, 2, false).toString());\n    assertEquals(\"field:{-2 TO 1]\", PointRangeQuery.newIntRange(\"field\", -2, false, 1, true).toString());\n    assertEquals(\"field:[* TO 2}\", PointRangeQuery.newIntRange(\"field\", null, true, 2, false).toString());\n\n    // longs\n    assertEquals(\"field:[1099511627776 TO 2199023255552}\", PointRangeQuery.newLongRange(\"field\", 1L<<40, true, 1L<<41, false).toString());\n    assertEquals(\"field:{-5 TO 6]\", PointRangeQuery.newLongRange(\"field\", -5L, false, 6L, true).toString());\n    assertEquals(\"field:[* TO 2}\", PointRangeQuery.newLongRange(\"field\", null, true, 2L, false).toString());\n    \n    // floats\n    assertEquals(\"field:[1.3 TO 2.5}\", PointRangeQuery.newFloatRange(\"field\", 1.3F, true, 2.5F, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", PointRangeQuery.newFloatRange(\"field\", -2.9F, false, 1.0F, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", PointRangeQuery.newFloatRange(\"field\", -2.9F, false, null, true).toString());\n    \n    // doubles\n    assertEquals(\"field:[1.3 TO 2.5}\", PointRangeQuery.newDoubleRange(\"field\", 1.3, true, 2.5, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", PointRangeQuery.newDoubleRange(\"field\", -2.9, false, 1.0, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", PointRangeQuery.newDoubleRange(\"field\", -2.9, false, null, true).toString());\n    \n    // n-dimensional double\n    assertEquals(\"field:[1.3 TO 2.5},{-2.9 TO 1.0]\", PointRangeQuery.newMultiDoubleRange(\"field\", \n                                                                      new Double[] { 1.3, -2.9 }, \n                                                                      new boolean[] { true, false }, \n                                                                      new Double[] { 2.5, 1.0 },\n                                                                      new boolean[] { false, true }).toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testToString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    \n    // ints\n    assertEquals(\"field:[1 TO 2]\", IntPoint.newRangeQuery(\"field\", 1, 2).toString());\n    assertEquals(\"field:[-2 TO 1]\", IntPoint.newRangeQuery(\"field\", -2, 1).toString());\n\n    // longs\n    assertEquals(\"field:[1099511627776 TO 2199023255552]\", LongPoint.newRangeQuery(\"field\", 1L<<40, 1L<<41).toString());\n    assertEquals(\"field:[-5 TO 6]\", LongPoint.newRangeQuery(\"field\", -5L, 6L).toString());\n    \n    // floats\n    assertEquals(\"field:[1.3 TO 2.5]\", FloatPoint.newRangeQuery(\"field\", 1.3F, 2.5F).toString());\n    assertEquals(\"field:[-2.9 TO 1.0]\", FloatPoint.newRangeQuery(\"field\", -2.9F, 1.0F).toString());\n    \n    // doubles\n    assertEquals(\"field:[1.3 TO 2.5]\", DoublePoint.newRangeQuery(\"field\", 1.3, 2.5).toString());\n    assertEquals(\"field:[-2.9 TO 1.0]\", DoublePoint.newRangeQuery(\"field\", -2.9, 1.0).toString());\n    \n    // n-dimensional double\n    assertEquals(\"field:[1.3 TO 2.5],[-2.9 TO 1.0]\", DoublePoint.newRangeQuery(\"field\", \n                                                                      new double[] { 1.3, -2.9 }, \n                                                                      new double[] { 2.5, 1.0 }).toString());\n\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    \n    // ints\n    assertEquals(\"field:[1 TO 2}\", IntPoint.newRangeQuery(\"field\", 1, true, 2, false).toString());\n    assertEquals(\"field:{-2 TO 1]\", IntPoint.newRangeQuery(\"field\", -2, false, 1, true).toString());\n    assertEquals(\"field:[* TO 2}\", IntPoint.newRangeQuery(\"field\", null, true, 2, false).toString());\n\n    // longs\n    assertEquals(\"field:[1099511627776 TO 2199023255552}\", LongPoint.newRangeQuery(\"field\", 1L<<40, true, 1L<<41, false).toString());\n    assertEquals(\"field:{-5 TO 6]\", LongPoint.newRangeQuery(\"field\", -5L, false, 6L, true).toString());\n    assertEquals(\"field:[* TO 2}\", LongPoint.newRangeQuery(\"field\", null, true, 2L, false).toString());\n    \n    // floats\n    assertEquals(\"field:[1.3 TO 2.5}\", FloatPoint.newRangeQuery(\"field\", 1.3F, true, 2.5F, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", FloatPoint.newRangeQuery(\"field\", -2.9F, false, 1.0F, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", FloatPoint.newRangeQuery(\"field\", -2.9F, false, null, true).toString());\n    \n    // doubles\n    assertEquals(\"field:[1.3 TO 2.5}\", DoublePoint.newRangeQuery(\"field\", 1.3, true, 2.5, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", DoublePoint.newRangeQuery(\"field\", -2.9, false, 1.0, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", DoublePoint.newRangeQuery(\"field\", -2.9, false, null, true).toString());\n    \n    // n-dimensional double\n    assertEquals(\"field:[1.3 TO 2.5},{-2.9 TO 1.0]\", DoublePoint.newMultiRangeQuery(\"field\", \n                                                                      new Double[] { 1.3, -2.9 }, \n                                                                      new boolean[] { true, false }, \n                                                                      new Double[] { 2.5, 1.0 },\n                                                                      new boolean[] { false, true }).toString());\n\n  }\n\n","bugFix":["d3104a6ba367dfb690806b227c5ef17c42c6107b","86cab68ee900a31d093b114182b488ea8e85c59d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testToString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    \n    // ints\n    assertEquals(\"field:[1 TO 2]\", IntPoint.newRangeQuery(\"field\", 1, 2).toString());\n    assertEquals(\"field:[-2 TO 1]\", IntPoint.newRangeQuery(\"field\", -2, 1).toString());\n\n    // longs\n    assertEquals(\"field:[1099511627776 TO 2199023255552]\", LongPoint.newRangeQuery(\"field\", 1L<<40, 1L<<41).toString());\n    assertEquals(\"field:[-5 TO 6]\", LongPoint.newRangeQuery(\"field\", -5L, 6L).toString());\n    \n    // floats\n    assertEquals(\"field:[1.3 TO 2.5]\", FloatPoint.newRangeQuery(\"field\", 1.3F, 2.5F).toString());\n    assertEquals(\"field:[-2.9 TO 1.0]\", FloatPoint.newRangeQuery(\"field\", -2.9F, 1.0F).toString());\n    \n    // doubles\n    assertEquals(\"field:[1.3 TO 2.5]\", DoublePoint.newRangeQuery(\"field\", 1.3, 2.5).toString());\n    assertEquals(\"field:[-2.9 TO 1.0]\", DoublePoint.newRangeQuery(\"field\", -2.9, 1.0).toString());\n    \n    // n-dimensional double\n    assertEquals(\"field:[1.3 TO 2.5],[-2.9 TO 1.0]\", DoublePoint.newRangeQuery(\"field\", \n                                                                      new double[] { 1.3, -2.9 }, \n                                                                      new double[] { 2.5, 1.0 }).toString());\n\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    \n    // ints\n    assertEquals(\"field:[1 TO 2}\", IntPoint.newRangeQuery(\"field\", 1, true, 2, false).toString());\n    assertEquals(\"field:{-2 TO 1]\", IntPoint.newRangeQuery(\"field\", -2, false, 1, true).toString());\n    assertEquals(\"field:[* TO 2}\", IntPoint.newRangeQuery(\"field\", null, true, 2, false).toString());\n\n    // longs\n    assertEquals(\"field:[1099511627776 TO 2199023255552}\", LongPoint.newRangeQuery(\"field\", 1L<<40, true, 1L<<41, false).toString());\n    assertEquals(\"field:{-5 TO 6]\", LongPoint.newRangeQuery(\"field\", -5L, false, 6L, true).toString());\n    assertEquals(\"field:[* TO 2}\", LongPoint.newRangeQuery(\"field\", null, true, 2L, false).toString());\n    \n    // floats\n    assertEquals(\"field:[1.3 TO 2.5}\", FloatPoint.newRangeQuery(\"field\", 1.3F, true, 2.5F, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", FloatPoint.newRangeQuery(\"field\", -2.9F, false, 1.0F, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", FloatPoint.newRangeQuery(\"field\", -2.9F, false, null, true).toString());\n    \n    // doubles\n    assertEquals(\"field:[1.3 TO 2.5}\", DoublePoint.newRangeQuery(\"field\", 1.3, true, 2.5, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", DoublePoint.newRangeQuery(\"field\", -2.9, false, 1.0, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", DoublePoint.newRangeQuery(\"field\", -2.9, false, null, true).toString());\n    \n    // n-dimensional double\n    assertEquals(\"field:[1.3 TO 2.5},{-2.9 TO 1.0]\", DoublePoint.newMultiRangeQuery(\"field\", \n                                                                      new Double[] { 1.3, -2.9 }, \n                                                                      new boolean[] { true, false }, \n                                                                      new Double[] { 2.5, 1.0 },\n                                                                      new boolean[] { false, true }).toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testToString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    \n    // ints\n    assertEquals(\"field:[1 TO 2]\", IntPoint.newRangeQuery(\"field\", 1, 2).toString());\n    assertEquals(\"field:[-2 TO 1]\", IntPoint.newRangeQuery(\"field\", -2, 1).toString());\n\n    // longs\n    assertEquals(\"field:[1099511627776 TO 2199023255552]\", LongPoint.newRangeQuery(\"field\", 1L<<40, 1L<<41).toString());\n    assertEquals(\"field:[-5 TO 6]\", LongPoint.newRangeQuery(\"field\", -5L, 6L).toString());\n    \n    // floats\n    assertEquals(\"field:[1.3 TO 2.5]\", FloatPoint.newRangeQuery(\"field\", 1.3F, 2.5F).toString());\n    assertEquals(\"field:[-2.9 TO 1.0]\", FloatPoint.newRangeQuery(\"field\", -2.9F, 1.0F).toString());\n    \n    // doubles\n    assertEquals(\"field:[1.3 TO 2.5]\", DoublePoint.newRangeQuery(\"field\", 1.3, 2.5).toString());\n    assertEquals(\"field:[-2.9 TO 1.0]\", DoublePoint.newRangeQuery(\"field\", -2.9, 1.0).toString());\n    \n    // n-dimensional double\n    assertEquals(\"field:[1.3 TO 2.5],[-2.9 TO 1.0]\", DoublePoint.newRangeQuery(\"field\", \n                                                                      new double[] { 1.3, -2.9 }, \n                                                                      new double[] { 2.5, 1.0 }).toString());\n\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    \n    // ints\n    assertEquals(\"field:[1 TO 2}\", IntPoint.newRangeQuery(\"field\", 1, true, 2, false).toString());\n    assertEquals(\"field:{-2 TO 1]\", IntPoint.newRangeQuery(\"field\", -2, false, 1, true).toString());\n    assertEquals(\"field:[* TO 2}\", IntPoint.newRangeQuery(\"field\", null, true, 2, false).toString());\n\n    // longs\n    assertEquals(\"field:[1099511627776 TO 2199023255552}\", LongPoint.newRangeQuery(\"field\", 1L<<40, true, 1L<<41, false).toString());\n    assertEquals(\"field:{-5 TO 6]\", LongPoint.newRangeQuery(\"field\", -5L, false, 6L, true).toString());\n    assertEquals(\"field:[* TO 2}\", LongPoint.newRangeQuery(\"field\", null, true, 2L, false).toString());\n    \n    // floats\n    assertEquals(\"field:[1.3 TO 2.5}\", FloatPoint.newRangeQuery(\"field\", 1.3F, true, 2.5F, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", FloatPoint.newRangeQuery(\"field\", -2.9F, false, 1.0F, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", FloatPoint.newRangeQuery(\"field\", -2.9F, false, null, true).toString());\n    \n    // doubles\n    assertEquals(\"field:[1.3 TO 2.5}\", DoublePoint.newRangeQuery(\"field\", 1.3, true, 2.5, false).toString());\n    assertEquals(\"field:{-2.9 TO 1.0]\", DoublePoint.newRangeQuery(\"field\", -2.9, false, 1.0, true).toString());\n    assertEquals(\"field:{-2.9 TO *]\", DoublePoint.newRangeQuery(\"field\", -2.9, false, null, true).toString());\n    \n    // n-dimensional double\n    assertEquals(\"field:[1.3 TO 2.5},{-2.9 TO 1.0]\", DoublePoint.newMultiRangeQuery(\"field\", \n                                                                      new Double[] { 1.3, -2.9 }, \n                                                                      new boolean[] { true, false }, \n                                                                      new Double[] { 2.5, 1.0 },\n                                                                      new boolean[] { false, true }).toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3104a6ba367dfb690806b227c5ef17c42c6107b":["419a8f52c6635419beb951255cacbbb281044c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","86cab68ee900a31d093b114182b488ea8e85c59d"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["419a8f52c6635419beb951255cacbbb281044c57","a5296efc4b319f5647b606629c093a94b23692c6"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"a5296efc4b319f5647b606629c093a94b23692c6":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","c422e924212367b334b4938f1fd3e44438e88c40"],"86cab68ee900a31d093b114182b488ea8e85c59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c422e924212367b334b4938f1fd3e44438e88c40":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"d3104a6ba367dfb690806b227c5ef17c42c6107b":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["419a8f52c6635419beb951255cacbbb281044c57","86cab68ee900a31d093b114182b488ea8e85c59d"],"419a8f52c6635419beb951255cacbbb281044c57":["d3104a6ba367dfb690806b227c5ef17c42c6107b","1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":[],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86cab68ee900a31d093b114182b488ea8e85c59d":["419a8f52c6635419beb951255cacbbb281044c57"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}