{"path":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#computeSumOfComplement(float[]).mjava","commits":[{"id":"3c5054bf15748079a041f921a9178e8fe84f1806","date":1514554505,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#computeSumOfComplement(float[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return an array which, at index i, stores the sum of all entries of\n   * {@code v} except the one at index i.\n   */\n  private static double[] computeSumOfComplement(float[] v) {\n    // We do not use subtraction on purpose because it would defeat the\n    // upperbound formula that we use for sums.\n    // Naive approach would be O(n^2), but we can do O(n) by computing the\n    // sum for i<j and i>j and then sum them.\n    double[] sum1 = new double[v.length];\n    for (int i = 1; i < sum1.length; ++i) {\n      sum1[i] = sum1[i-1] + v[i-1];\n    }\n\n    double[] sum2 = new double[v.length];\n    for (int i = sum2.length - 2; i >= 0; --i) {\n      sum2[i] = sum2[i+1] + v[i+1];\n    }\n\n    double[] result = new double[v.length];\n    for (int i = 0; i < result.length; ++i) {\n      result[i] = sum1[i] + sum2[i];\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#computeSumOfComplement(float[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Return an array which, at index i, stores the sum of all entries of\n   * {@code v} except the one at index i.\n   */\n  private static double[] computeSumOfComplement(float[] v) {\n    // We do not use subtraction on purpose because it would defeat the\n    // upperbound formula that we use for sums.\n    // Naive approach would be O(n^2), but we can do O(n) by computing the\n    // sum for i<j and i>j and then sum them.\n    double[] sum1 = new double[v.length];\n    for (int i = 1; i < sum1.length; ++i) {\n      sum1[i] = sum1[i-1] + v[i-1];\n    }\n\n    double[] sum2 = new double[v.length];\n    for (int i = sum2.length - 2; i >= 0; --i) {\n      sum2[i] = sum2[i+1] + v[i+1];\n    }\n\n    double[] result = new double[v.length];\n    for (int i = 0; i < result.length; ++i) {\n      result[i] = sum1[i] + sum2[i];\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12789a348ea3f09c9c3b71488cfa1c32da08b2a3","date":1534270167,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#computeSumOfComplement(float[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return an array which, at index i, stores the sum of all entries of\n   * {@code v} except the one at index i.\n   */\n  private static double[] computeSumOfComplement(float[] v) {\n    // We do not use subtraction on purpose because it would defeat the\n    // upperbound formula that we use for sums.\n    // Naive approach would be O(n^2), but we can do O(n) by computing the\n    // sum for i<j and i>j and then sum them.\n    double[] sum1 = new double[v.length];\n    for (int i = 1; i < sum1.length; ++i) {\n      sum1[i] = sum1[i - 1] + v[i - 1];\n    }\n\n    double[] sum2 = new double[v.length];\n    for (int i = sum2.length - 2; i >= 0; --i) {\n      sum2[i] = sum2[i + 1] + v[i + 1];\n    }\n\n    double[] result = new double[v.length];\n    for (int i = 0; i < result.length; ++i) {\n      result[i] = sum1[i] + sum2[i];\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12789a348ea3f09c9c3b71488cfa1c32da08b2a3":["523cc6563c99a55527ef7993efc5413c6648852d"],"523cc6563c99a55527ef7993efc5413c6648852d":["3c5054bf15748079a041f921a9178e8fe84f1806"],"3c5054bf15748079a041f921a9178e8fe84f1806":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12789a348ea3f09c9c3b71488cfa1c32da08b2a3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c5054bf15748079a041f921a9178e8fe84f1806"],"12789a348ea3f09c9c3b71488cfa1c32da08b2a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"523cc6563c99a55527ef7993efc5413c6648852d":["12789a348ea3f09c9c3b71488cfa1c32da08b2a3"],"3c5054bf15748079a041f921a9178e8fe84f1806":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}