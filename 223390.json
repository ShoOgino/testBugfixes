{"path":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(List[URL]).mjava","commits":[{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(List[URL]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds URLs to the ResourceLoader's internal classloader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * its behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   *\n   * @param urls    the URLs of files to add\n   */\n  void addToClassLoader(List<URL> urls) {\n    URLClassLoader newLoader = addURLsToClassLoader(classLoader, urls);\n    if (newLoader != classLoader) {\n      this.classLoader = newLoader;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(List[URL]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(List[URL]).mjava","sourceNew":"  /**\n   * Adds URLs to the ResourceLoader's internal classloader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * its behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   *\n   * @param urls    the URLs of files to add\n   */\n  void addToClassLoader(List<URL> urls) {\n    URLClassLoader newLoader = addURLsToClassLoader(classLoader, urls);\n    if (newLoader != classLoader) {\n      this.classLoader = newLoader;\n    }\n    log.info(\"[{}] Added {} libs to classloader, from paths: {}\",\n        getCoreProperties().getProperty(SOLR_CORE_NAME), urls.size(), urls.stream()\n        .map(u -> u.getPath().substring(0,u.getPath().lastIndexOf(\"/\")))\n        .sorted()\n        .distinct()\n        .collect(Collectors.toList()));\n  }\n\n","sourceOld":"  /**\n   * Adds URLs to the ResourceLoader's internal classloader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * its behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   *\n   * @param urls    the URLs of files to add\n   */\n  void addToClassLoader(List<URL> urls) {\n    URLClassLoader newLoader = addURLsToClassLoader(classLoader, urls);\n    if (newLoader != classLoader) {\n      this.classLoader = newLoader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(List[URL]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(List[URL]).mjava","sourceNew":"  /**\n   * Adds URLs to the ResourceLoader's internal classloader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * its behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   *\n   * @param urls    the URLs of files to add\n   */\n  void addToClassLoader(List<URL> urls) {\n    URLClassLoader newLoader = addURLsToClassLoader(classLoader, urls);\n    if (newLoader != classLoader) {\n      this.classLoader = newLoader;\n    }\n    log.info(\"[{}] Added {} libs to classloader, from paths: {}\",\n        getCoreProperties().getProperty(SOLR_CORE_NAME), urls.size(), urls.stream()\n        .map(u -> u.getPath().substring(0,u.getPath().lastIndexOf(\"/\")))\n        .sorted()\n        .distinct()\n        .collect(Collectors.toList()));\n  }\n\n","sourceOld":"  /**\n   * Adds URLs to the ResourceLoader's internal classloader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * its behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   *\n   * @param urls    the URLs of files to add\n   */\n  void addToClassLoader(List<URL> urls) {\n    URLClassLoader newLoader = addURLsToClassLoader(classLoader, urls);\n    if (newLoader != classLoader) {\n      this.classLoader = newLoader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"553676f3825d76d371442e566bde0f95de03602b","date":1474579888,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(List[URL]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(List[URL]).mjava","sourceNew":"  /**\n   * Adds URLs to the ResourceLoader's internal classloader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * its behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   *\n   * @param urls    the URLs of files to add\n   */\n  void addToClassLoader(List<URL> urls) {\n    URLClassLoader newLoader = addURLsToClassLoader(classLoader, urls);\n    if (newLoader != classLoader) {\n      this.classLoader = newLoader;\n    }\n\n    log.info(\"[{}] Added {} libs to classloader, from paths: {}\",\n        getCoreName(\"null\"), urls.size(), urls.stream()\n        .map(u -> u.getPath().substring(0,u.getPath().lastIndexOf(\"/\")))\n        .sorted()\n        .distinct()\n        .collect(Collectors.toList()));\n  }\n\n","sourceOld":"  /**\n   * Adds URLs to the ResourceLoader's internal classloader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * its behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   *\n   * @param urls    the URLs of files to add\n   */\n  void addToClassLoader(List<URL> urls) {\n    URLClassLoader newLoader = addURLsToClassLoader(classLoader, urls);\n    if (newLoader != classLoader) {\n      this.classLoader = newLoader;\n    }\n    log.info(\"[{}] Added {} libs to classloader, from paths: {}\",\n        getCoreProperties().getProperty(SOLR_CORE_NAME), urls.size(), urls.stream()\n        .map(u -> u.getPath().substring(0,u.getPath().lastIndexOf(\"/\")))\n        .sorted()\n        .distinct()\n        .collect(Collectors.toList()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(List[URL]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(List[URL]).mjava","sourceNew":"  /**\n   * Adds URLs to the ResourceLoader's internal classloader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * its behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   *\n   * @param urls    the URLs of files to add\n   */\n  void addToClassLoader(List<URL> urls) {\n    URLClassLoader newLoader = addURLsToClassLoader(classLoader, urls);\n    if (newLoader != classLoader) {\n      this.classLoader = newLoader;\n    }\n\n    log.info(\"[{}] Added {} libs to classloader, from paths: {}\",\n        getCoreName(\"null\"), urls.size(), urls.stream()\n        .map(u -> u.getPath().substring(0,u.getPath().lastIndexOf(\"/\")))\n        .sorted()\n        .distinct()\n        .collect(Collectors.toList()));\n  }\n\n","sourceOld":"  /**\n   * Adds URLs to the ResourceLoader's internal classloader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * its behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   *\n   * @param urls    the URLs of files to add\n   */\n  void addToClassLoader(List<URL> urls) {\n    URLClassLoader newLoader = addURLsToClassLoader(classLoader, urls);\n    if (newLoader != classLoader) {\n      this.classLoader = newLoader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(List[URL]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(List[URL]).mjava","sourceNew":"  /**\n   * Adds URLs to the ResourceLoader's internal classloader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * its behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   *\n   * @param urls    the URLs of files to add\n   */\n  void addToClassLoader(List<URL> urls) {\n    URLClassLoader newLoader = addURLsToClassLoader(classLoader, urls);\n    if (newLoader != classLoader) {\n      this.classLoader = newLoader;\n    }\n\n    log.info(\"[{}] Added {} libs to classloader, from paths: {}\",\n        getCoreName(\"null\"), urls.size(), urls.stream()\n        .map(u -> u.getPath().substring(0,u.getPath().lastIndexOf(\"/\")))\n        .sorted()\n        .distinct()\n        .collect(Collectors.toList()));\n  }\n\n","sourceOld":"  /**\n   * Adds URLs to the ResourceLoader's internal classloader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * its behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   *\n   * @param urls    the URLs of files to add\n   */\n  void addToClassLoader(List<URL> urls) {\n    URLClassLoader newLoader = addURLsToClassLoader(classLoader, urls);\n    if (newLoader != classLoader) {\n      this.classLoader = newLoader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(List[URL]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(List[URL]).mjava","sourceNew":"  /**\n   * Adds URLs to the ResourceLoader's internal classloader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * its behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   *\n   * @param urls    the URLs of files to add\n   */\n  synchronized void addToClassLoader(List<URL> urls) {\n    URLClassLoader newLoader = addURLsToClassLoader(classLoader, urls);\n    if (newLoader == classLoader) {\n      return; // short-circuit\n    }\n\n    this.classLoader = newLoader;\n    this.needToReloadLuceneSPI = true;\n\n    log.info(\"Added {} libs to classloader, from paths: {}\",\n        urls.size(), urls.stream()\n        .map(u -> u.getPath().substring(0,u.getPath().lastIndexOf(\"/\")))\n        .sorted()\n        .distinct()\n        .collect(Collectors.toList()));\n  }\n\n","sourceOld":"  /**\n   * Adds URLs to the ResourceLoader's internal classloader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * its behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   *\n   * @param urls    the URLs of files to add\n   */\n  void addToClassLoader(List<URL> urls) {\n    URLClassLoader newLoader = addURLsToClassLoader(classLoader, urls);\n    if (newLoader != classLoader) {\n      this.classLoader = newLoader;\n    }\n\n    log.info(\"[{}] Added {} libs to classloader, from paths: {}\",\n        getCoreName(\"null\"), urls.size(), urls.stream()\n        .map(u -> u.getPath().substring(0,u.getPath().lastIndexOf(\"/\")))\n        .sorted()\n        .distinct()\n        .collect(Collectors.toList()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(List[URL]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(List[URL]).mjava","sourceNew":"  /**\n   * Adds URLs to the ResourceLoader's internal classloader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * its behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   *\n   * @param urls    the URLs of files to add\n   */\n  synchronized void addToClassLoader(List<URL> urls) {\n    URLClassLoader newLoader = addURLsToClassLoader(classLoader, urls);\n    if (newLoader == classLoader) {\n      return; // short-circuit\n    }\n\n    this.classLoader = newLoader;\n    this.needToReloadLuceneSPI = true;\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Added {} libs to classloader, from paths: {}\",\n          urls.size(), urls.stream()\n              .map(u -> u.getPath().substring(0, u.getPath().lastIndexOf(\"/\")))\n              .sorted()\n              .distinct()\n              .collect(Collectors.toList()));\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds URLs to the ResourceLoader's internal classloader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * its behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   *\n   * @param urls    the URLs of files to add\n   */\n  synchronized void addToClassLoader(List<URL> urls) {\n    URLClassLoader newLoader = addURLsToClassLoader(classLoader, urls);\n    if (newLoader == classLoader) {\n      return; // short-circuit\n    }\n\n    this.classLoader = newLoader;\n    this.needToReloadLuceneSPI = true;\n\n    log.info(\"Added {} libs to classloader, from paths: {}\",\n        urls.size(), urls.stream()\n        .map(u -> u.getPath().substring(0,u.getPath().lastIndexOf(\"/\")))\n        .sorted()\n        .distinct()\n        .collect(Collectors.toList()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"126d6ad24eed13163ba0959435d5a80e5672837c":["a626ec4d1c92e59fe390724d6220081047b03ce7","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"553676f3825d76d371442e566bde0f95de03602b":["126d6ad24eed13163ba0959435d5a80e5672837c"],"140be51d03394488536f4aacedace29f9b318347":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a626ec4d1c92e59fe390724d6220081047b03ce7","553676f3825d76d371442e566bde0f95de03602b"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a626ec4d1c92e59fe390724d6220081047b03ce7","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"]},"commit2Childs":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["140be51d03394488536f4aacedace29f9b318347"],"126d6ad24eed13163ba0959435d5a80e5672837c":["553676f3825d76d371442e566bde0f95de03602b"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","7f0c8426396c925de8db3ed3f8ff40fd73670a5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"553676f3825d76d371442e566bde0f95de03602b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}