{"path":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","sourceNew":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      float min = this.minScore;\n      final int lengthWord = word.length();\n  \n      final int freq = (ir != null && field != null) ? ir.docFreq(new Term(field, word)) : 0;\n      final int goalFreq = (morePopular && ir != null && field != null) ? freq : 0;\n      // if the word exists in the real index and we don't care for word frequency, return the word itself\n      if (!morePopular && freq > 0) {\n        return new String[] { word };\n      }\n  \n      BooleanQuery query = new BooleanQuery();\n      String[] grams;\n      String key;\n  \n      for (int ng = getMin(lengthWord); ng <= getMax(lengthWord); ng++) {\n  \n        key = \"gram\" + ng; // form key\n  \n        grams = formGrams(word, ng); // form word into ngrams (allow dups too)\n  \n        if (grams.length == 0) {\n          continue; // hmm\n        }\n  \n        if (bStart > 0) { // should we boost prefixes?\n          add(query, \"start\" + ng, grams[0], bStart); // matches start of word\n  \n        }\n        if (bEnd > 0) { // should we boost suffixes\n          add(query, \"end\" + ng, grams[grams.length - 1], bEnd); // matches end of word\n  \n        }\n        for (int i = 0; i < grams.length; i++) {\n          add(query, key, grams[i]);\n        }\n      }\n  \n      int maxHits = 10 * numSug;\n      \n  //    System.out.println(\"Q: \" + query);\n      ScoreDoc[] hits = indexSearcher.search(query, null, maxHits).scoreDocs;\n  //    System.out.println(\"HITS: \" + hits.length());\n      SuggestWordQueue sugQueue = new SuggestWordQueue(numSug);\n  \n      // go thru more than 'maxr' matches in case the distance filter triggers\n      int stop = Math.min(hits.length, maxHits);\n      SuggestWord sugWord = new SuggestWord();\n      for (int i = 0; i < stop; i++) {\n  \n        sugWord.string = indexSearcher.doc(hits[i].doc).get(F_WORD); // get orig word\n  \n        // don't suggest a word for itself, that would be silly\n        if (sugWord.string.equals(word)) {\n          continue;\n        }\n  \n        // edit distance\n        sugWord.score = sd.getDistance(word,sugWord.string);\n        if (sugWord.score < min) {\n          continue;\n        }\n  \n        if (ir != null && field != null) { // use the user index\n          sugWord.freq = ir.docFreq(new Term(field, sugWord.string)); // freq in the index\n          // don't suggest a word that is not present in the field\n          if ((morePopular && goalFreq > sugWord.freq) || sugWord.freq < 1) {\n            continue;\n          }\n        }\n        sugQueue.insertWithOverflow(sugWord);\n        if (sugQueue.size() == numSug) {\n          // if queue full, maintain the minScore score\n          min = sugQueue.top().score;\n        }\n        sugWord = new SuggestWord();\n      }\n  \n      // convert to array string\n      String[] list = new String[sugQueue.size()];\n      for (int i = sugQueue.size() - 1; i >= 0; i--) {\n        list[i] = sugQueue.pop().string;\n      }\n  \n      return list;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      float min = this.minScore;\n      final int lengthWord = word.length();\n  \n      final int freq = (ir != null && field != null) ? ir.docFreq(new Term(field, word)) : 0;\n      final int goalFreq = (morePopular && ir != null && field != null) ? freq : 0;\n      // if the word exists in the real index and we don't care for word frequency, return the word itself\n      if (!morePopular && freq > 0) {\n        return new String[] { word };\n      }\n  \n      BooleanQuery query = new BooleanQuery();\n      String[] grams;\n      String key;\n  \n      for (int ng = getMin(lengthWord); ng <= getMax(lengthWord); ng++) {\n  \n        key = \"gram\" + ng; // form key\n  \n        grams = formGrams(word, ng); // form word into ngrams (allow dups too)\n  \n        if (grams.length == 0) {\n          continue; // hmm\n        }\n  \n        if (bStart > 0) { // should we boost prefixes?\n          add(query, \"start\" + ng, grams[0], bStart); // matches start of word\n  \n        }\n        if (bEnd > 0) { // should we boost suffixes\n          add(query, \"end\" + ng, grams[grams.length - 1], bEnd); // matches end of word\n  \n        }\n        for (int i = 0; i < grams.length; i++) {\n          add(query, key, grams[i]);\n        }\n      }\n  \n      int maxHits = 10 * numSug;\n      \n  //    System.out.println(\"Q: \" + query);\n      ScoreDoc[] hits = indexSearcher.search(query, null, maxHits).scoreDocs;\n  //    System.out.println(\"HITS: \" + hits.length());\n      SuggestWordQueue sugQueue = new SuggestWordQueue(numSug);\n  \n      // go thru more than 'maxr' matches in case the distance filter triggers\n      int stop = Math.min(hits.length, maxHits);\n      SuggestWord sugWord = new SuggestWord();\n      for (int i = 0; i < stop; i++) {\n  \n        sugWord.string = indexSearcher.doc(hits[i].doc).get(F_WORD); // get orig word\n  \n        // don't suggest a word for itself, that would be silly\n        if (sugWord.string.equals(word)) {\n          continue;\n        }\n  \n        // edit distance\n        sugWord.score = sd.getDistance(word,sugWord.string);\n        if (sugWord.score < min) {\n          continue;\n        }\n  \n        if (ir != null && field != null) { // use the user index\n          sugWord.freq = ir.docFreq(new Term(field, sugWord.string)); // freq in the index\n          // don't suggest a word that is not present in the field\n          if ((morePopular && goalFreq > sugWord.freq) || sugWord.freq < 1) {\n            continue;\n          }\n        }\n        sugQueue.insertWithOverflow(sugWord);\n        if (sugQueue.size() == numSug) {\n          // if queue full, maintain the minScore score\n          min = sugQueue.top().score;\n        }\n        sugWord = new SuggestWord();\n      }\n  \n      // convert to array string\n      String[] list = new String[sugQueue.size()];\n      for (int i = sugQueue.size() - 1; i >= 0; i--) {\n        list[i] = sugQueue.pop().string;\n      }\n  \n      return list;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7006f130a90f88aaa52ca7c0bfe4a204efef6b3","date":1282077658,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","sourceNew":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      float min = this.minScore;\n      final int lengthWord = word.length();\n  \n      final int freq = (ir != null && field != null) ? ir.docFreq(new Term(field, word)) : 0;\n      final int goalFreq = (morePopular && ir != null && field != null) ? freq : 0;\n      // if the word exists in the real index and we don't care for word frequency, return the word itself\n      if (!morePopular && freq > 0) {\n        return new String[] { word };\n      }\n  \n      BooleanQuery query = new BooleanQuery();\n      String[] grams;\n      String key;\n  \n      for (int ng = getMin(lengthWord); ng <= getMax(lengthWord); ng++) {\n  \n        key = \"gram\" + ng; // form key\n  \n        grams = formGrams(word, ng); // form word into ngrams (allow dups too)\n  \n        if (grams.length == 0) {\n          continue; // hmm\n        }\n  \n        if (bStart > 0) { // should we boost prefixes?\n          add(query, \"start\" + ng, grams[0], bStart); // matches start of word\n  \n        }\n        if (bEnd > 0) { // should we boost suffixes\n          add(query, \"end\" + ng, grams[grams.length - 1], bEnd); // matches end of word\n  \n        }\n        for (int i = 0; i < grams.length; i++) {\n          add(query, key, grams[i]);\n        }\n      }\n  \n      int maxHits = 10 * numSug;\n      \n  //    System.out.println(\"Q: \" + query);\n      ScoreDoc[] hits = indexSearcher.search(query, null, maxHits).scoreDocs;\n  //    System.out.println(\"HITS: \" + hits.length());\n      SuggestWordQueue sugQueue = new SuggestWordQueue(numSug, comparator);\n  \n      // go thru more than 'maxr' matches in case the distance filter triggers\n      int stop = Math.min(hits.length, maxHits);\n      SuggestWord sugWord = new SuggestWord();\n      for (int i = 0; i < stop; i++) {\n  \n        sugWord.string = indexSearcher.doc(hits[i].doc).get(F_WORD); // get orig word\n  \n        // don't suggest a word for itself, that would be silly\n        if (sugWord.string.equals(word)) {\n          continue;\n        }\n  \n        // edit distance\n        sugWord.score = sd.getDistance(word,sugWord.string);\n        if (sugWord.score < min) {\n          continue;\n        }\n  \n        if (ir != null && field != null) { // use the user index\n          sugWord.freq = ir.docFreq(new Term(field, sugWord.string)); // freq in the index\n          // don't suggest a word that is not present in the field\n          if ((morePopular && goalFreq > sugWord.freq) || sugWord.freq < 1) {\n            continue;\n          }\n        }\n        sugQueue.insertWithOverflow(sugWord);\n        if (sugQueue.size() == numSug) {\n          // if queue full, maintain the minScore score\n          min = sugQueue.top().score;\n        }\n        sugWord = new SuggestWord();\n      }\n  \n      // convert to array string\n      String[] list = new String[sugQueue.size()];\n      for (int i = sugQueue.size() - 1; i >= 0; i--) {\n        list[i] = sugQueue.pop().string;\n      }\n  \n      return list;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      float min = this.minScore;\n      final int lengthWord = word.length();\n  \n      final int freq = (ir != null && field != null) ? ir.docFreq(new Term(field, word)) : 0;\n      final int goalFreq = (morePopular && ir != null && field != null) ? freq : 0;\n      // if the word exists in the real index and we don't care for word frequency, return the word itself\n      if (!morePopular && freq > 0) {\n        return new String[] { word };\n      }\n  \n      BooleanQuery query = new BooleanQuery();\n      String[] grams;\n      String key;\n  \n      for (int ng = getMin(lengthWord); ng <= getMax(lengthWord); ng++) {\n  \n        key = \"gram\" + ng; // form key\n  \n        grams = formGrams(word, ng); // form word into ngrams (allow dups too)\n  \n        if (grams.length == 0) {\n          continue; // hmm\n        }\n  \n        if (bStart > 0) { // should we boost prefixes?\n          add(query, \"start\" + ng, grams[0], bStart); // matches start of word\n  \n        }\n        if (bEnd > 0) { // should we boost suffixes\n          add(query, \"end\" + ng, grams[grams.length - 1], bEnd); // matches end of word\n  \n        }\n        for (int i = 0; i < grams.length; i++) {\n          add(query, key, grams[i]);\n        }\n      }\n  \n      int maxHits = 10 * numSug;\n      \n  //    System.out.println(\"Q: \" + query);\n      ScoreDoc[] hits = indexSearcher.search(query, null, maxHits).scoreDocs;\n  //    System.out.println(\"HITS: \" + hits.length());\n      SuggestWordQueue sugQueue = new SuggestWordQueue(numSug);\n  \n      // go thru more than 'maxr' matches in case the distance filter triggers\n      int stop = Math.min(hits.length, maxHits);\n      SuggestWord sugWord = new SuggestWord();\n      for (int i = 0; i < stop; i++) {\n  \n        sugWord.string = indexSearcher.doc(hits[i].doc).get(F_WORD); // get orig word\n  \n        // don't suggest a word for itself, that would be silly\n        if (sugWord.string.equals(word)) {\n          continue;\n        }\n  \n        // edit distance\n        sugWord.score = sd.getDistance(word,sugWord.string);\n        if (sugWord.score < min) {\n          continue;\n        }\n  \n        if (ir != null && field != null) { // use the user index\n          sugWord.freq = ir.docFreq(new Term(field, sugWord.string)); // freq in the index\n          // don't suggest a word that is not present in the field\n          if ((morePopular && goalFreq > sugWord.freq) || sugWord.freq < 1) {\n            continue;\n          }\n        }\n        sugQueue.insertWithOverflow(sugWord);\n        if (sugQueue.size() == numSug) {\n          // if queue full, maintain the minScore score\n          min = sugQueue.top().score;\n        }\n        sugWord = new SuggestWord();\n      }\n  \n      // convert to array string\n      String[] list = new String[sugQueue.size()];\n      for (int i = sugQueue.size() - 1; i >= 0; i--) {\n        list[i] = sugQueue.pop().string;\n      }\n  \n      return list;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d76ab9983349b199b0e6f65776c0087b0c08a10d","date":1282230089,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","sourceNew":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * <p>Uses the {@link #getAccuracy()} value passed into the constructor as the accuracy.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   *\n   * @see #suggestSimilar(String, int, org.apache.lucene.index.IndexReader, String, boolean, float)\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    return suggestSimilar(word, numSug, ir, field, morePopular, accuracy);\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      float min = this.minScore;\n      final int lengthWord = word.length();\n  \n      final int freq = (ir != null && field != null) ? ir.docFreq(new Term(field, word)) : 0;\n      final int goalFreq = (morePopular && ir != null && field != null) ? freq : 0;\n      // if the word exists in the real index and we don't care for word frequency, return the word itself\n      if (!morePopular && freq > 0) {\n        return new String[] { word };\n      }\n  \n      BooleanQuery query = new BooleanQuery();\n      String[] grams;\n      String key;\n  \n      for (int ng = getMin(lengthWord); ng <= getMax(lengthWord); ng++) {\n  \n        key = \"gram\" + ng; // form key\n  \n        grams = formGrams(word, ng); // form word into ngrams (allow dups too)\n  \n        if (grams.length == 0) {\n          continue; // hmm\n        }\n  \n        if (bStart > 0) { // should we boost prefixes?\n          add(query, \"start\" + ng, grams[0], bStart); // matches start of word\n  \n        }\n        if (bEnd > 0) { // should we boost suffixes\n          add(query, \"end\" + ng, grams[grams.length - 1], bEnd); // matches end of word\n  \n        }\n        for (int i = 0; i < grams.length; i++) {\n          add(query, key, grams[i]);\n        }\n      }\n  \n      int maxHits = 10 * numSug;\n      \n  //    System.out.println(\"Q: \" + query);\n      ScoreDoc[] hits = indexSearcher.search(query, null, maxHits).scoreDocs;\n  //    System.out.println(\"HITS: \" + hits.length());\n      SuggestWordQueue sugQueue = new SuggestWordQueue(numSug, comparator);\n  \n      // go thru more than 'maxr' matches in case the distance filter triggers\n      int stop = Math.min(hits.length, maxHits);\n      SuggestWord sugWord = new SuggestWord();\n      for (int i = 0; i < stop; i++) {\n  \n        sugWord.string = indexSearcher.doc(hits[i].doc).get(F_WORD); // get orig word\n  \n        // don't suggest a word for itself, that would be silly\n        if (sugWord.string.equals(word)) {\n          continue;\n        }\n  \n        // edit distance\n        sugWord.score = sd.getDistance(word,sugWord.string);\n        if (sugWord.score < min) {\n          continue;\n        }\n  \n        if (ir != null && field != null) { // use the user index\n          sugWord.freq = ir.docFreq(new Term(field, sugWord.string)); // freq in the index\n          // don't suggest a word that is not present in the field\n          if ((morePopular && goalFreq > sugWord.freq) || sugWord.freq < 1) {\n            continue;\n          }\n        }\n        sugQueue.insertWithOverflow(sugWord);\n        if (sugQueue.size() == numSug) {\n          // if queue full, maintain the minScore score\n          min = sugQueue.top().score;\n        }\n        sugWord = new SuggestWord();\n      }\n  \n      // convert to array string\n      String[] list = new String[sugQueue.size()];\n      for (int i = sugQueue.size() - 1; i >= 0; i--) {\n        list[i] = sugQueue.pop().string;\n      }\n  \n      return list;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","sourceNew":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * <p>Uses the {@link #getAccuracy()} value passed into the constructor as the accuracy.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   *\n   * @see #suggestSimilar(String, int, org.apache.lucene.index.IndexReader, String, boolean, float)\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    return suggestSimilar(word, numSug, ir, field, morePopular, accuracy);\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      float min = this.minScore;\n      final int lengthWord = word.length();\n  \n      final int freq = (ir != null && field != null) ? ir.docFreq(new Term(field, word)) : 0;\n      final int goalFreq = (morePopular && ir != null && field != null) ? freq : 0;\n      // if the word exists in the real index and we don't care for word frequency, return the word itself\n      if (!morePopular && freq > 0) {\n        return new String[] { word };\n      }\n  \n      BooleanQuery query = new BooleanQuery();\n      String[] grams;\n      String key;\n  \n      for (int ng = getMin(lengthWord); ng <= getMax(lengthWord); ng++) {\n  \n        key = \"gram\" + ng; // form key\n  \n        grams = formGrams(word, ng); // form word into ngrams (allow dups too)\n  \n        if (grams.length == 0) {\n          continue; // hmm\n        }\n  \n        if (bStart > 0) { // should we boost prefixes?\n          add(query, \"start\" + ng, grams[0], bStart); // matches start of word\n  \n        }\n        if (bEnd > 0) { // should we boost suffixes\n          add(query, \"end\" + ng, grams[grams.length - 1], bEnd); // matches end of word\n  \n        }\n        for (int i = 0; i < grams.length; i++) {\n          add(query, key, grams[i]);\n        }\n      }\n  \n      int maxHits = 10 * numSug;\n      \n  //    System.out.println(\"Q: \" + query);\n      ScoreDoc[] hits = indexSearcher.search(query, null, maxHits).scoreDocs;\n  //    System.out.println(\"HITS: \" + hits.length());\n      SuggestWordQueue sugQueue = new SuggestWordQueue(numSug);\n  \n      // go thru more than 'maxr' matches in case the distance filter triggers\n      int stop = Math.min(hits.length, maxHits);\n      SuggestWord sugWord = new SuggestWord();\n      for (int i = 0; i < stop; i++) {\n  \n        sugWord.string = indexSearcher.doc(hits[i].doc).get(F_WORD); // get orig word\n  \n        // don't suggest a word for itself, that would be silly\n        if (sugWord.string.equals(word)) {\n          continue;\n        }\n  \n        // edit distance\n        sugWord.score = sd.getDistance(word,sugWord.string);\n        if (sugWord.score < min) {\n          continue;\n        }\n  \n        if (ir != null && field != null) { // use the user index\n          sugWord.freq = ir.docFreq(new Term(field, sugWord.string)); // freq in the index\n          // don't suggest a word that is not present in the field\n          if ((morePopular && goalFreq > sugWord.freq) || sugWord.freq < 1) {\n            continue;\n          }\n        }\n        sugQueue.insertWithOverflow(sugWord);\n        if (sugQueue.size() == numSug) {\n          // if queue full, maintain the minScore score\n          min = sugQueue.top().score;\n        }\n        sugWord = new SuggestWord();\n      }\n  \n      // convert to array string\n      String[] list = new String[sugQueue.size()];\n      for (int i = sugQueue.size() - 1; i >= 0; i--) {\n        list[i] = sugQueue.pop().string;\n      }\n  \n      return list;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","sourceNew":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * <p>Uses the {@link #getAccuracy()} value passed into the constructor as the accuracy.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   *\n   * @see #suggestSimilar(String, int, org.apache.lucene.index.IndexReader, String, boolean, float)\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    return suggestSimilar(word, numSug, ir, field, morePopular, accuracy);\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * <p>Uses the {@link #getAccuracy()} value passed into the constructor as the accuracy.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   *\n   * @see #suggestSimilar(String, int, org.apache.lucene.index.IndexReader, String, boolean, float)\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    return suggestSimilar(word, numSug, ir, field, morePopular, accuracy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","sourceNew":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * <p>Uses the {@link #getAccuracy()} value passed into the constructor as the accuracy.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   *\n   * @see #suggestSimilar(String, int, org.apache.lucene.index.IndexReader, String, boolean, float)\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    return suggestSimilar(word, numSug, ir, field, morePopular, accuracy);\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * <p>Uses the {@link #getAccuracy()} value passed into the constructor as the accuracy.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   *\n   * @see #suggestSimilar(String, int, org.apache.lucene.index.IndexReader, String, boolean, float)\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    return suggestSimilar(word, numSug, ir, field, morePopular, accuracy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","sourceNew":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * <p>Uses the {@link #getAccuracy()} value passed into the constructor as the accuracy.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   *\n   * @see #suggestSimilar(String, int, org.apache.lucene.index.IndexReader, String, boolean, float)\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    return suggestSimilar(word, numSug, ir, field, morePopular, accuracy);\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * <p>Uses the {@link #getAccuracy()} value passed into the constructor as the accuracy.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   *\n   * @see #suggestSimilar(String, int, org.apache.lucene.index.IndexReader, String, boolean, float)\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    return suggestSimilar(word, numSug, ir, field, morePopular, accuracy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d76ab9983349b199b0e6f65776c0087b0c08a10d":["c7006f130a90f88aaa52ca7c0bfe4a204efef6b3"],"c7006f130a90f88aaa52ca7c0bfe4a204efef6b3":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e230a61047bc041516c811baa08a7174d6f8322a":["d76ab9983349b199b0e6f65776c0087b0c08a10d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["d76ab9983349b199b0e6f65776c0087b0c08a10d","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","d76ab9983349b199b0e6f65776c0087b0c08a10d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e230a61047bc041516c811baa08a7174d6f8322a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["d76ab9983349b199b0e6f65776c0087b0c08a10d","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"d76ab9983349b199b0e6f65776c0087b0c08a10d":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"c7006f130a90f88aaa52ca7c0bfe4a204efef6b3":["d76ab9983349b199b0e6f65776c0087b0c08a10d"],"e230a61047bc041516c811baa08a7174d6f8322a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c7006f130a90f88aaa52ca7c0bfe4a204efef6b3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}