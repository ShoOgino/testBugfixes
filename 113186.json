{"path":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#waitCol(String,int).mjava","commits":[{"id":"60b45f127b5537b5bf62181784ef28b52f4b6a08","date":1529595959,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#waitCol(String,int).mjava","pathOld":"/dev/null","sourceNew":"  private void waitCol(final String datePart, int slices) {\n    waitForState(\"waiting for collections to be created\",alias + \"_\" + datePart,\n        (liveNodes, collectionState) -> collectionState.getActiveSlices().size() == slices);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#waitCol(String,int).mjava","pathOld":"/dev/null","sourceNew":"  private void waitCol(final String datePart, int slices) {\n    waitForState(\"waiting for collections to be created\",alias + \"_\" + datePart,\n        (liveNodes, collectionState) -> collectionState.getActiveSlices().size() == slices);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#waitCol(String,int).mjava","pathOld":"/dev/null","sourceNew":"  private void waitCol(final String datePart, int slices) {\n    waitForState(\"waiting for collections to be created\",alias + \"_\" + datePart,\n        (liveNodes, collectionState) -> collectionState.getActiveSlices().size() == slices);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849083f8095b1ffaff05a66e0b1e024617b9968d","date":1536291524,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#waitCol(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#waitCol(String,int).mjava","sourceNew":"  private void waitCol(final String datePart, int slices) throws InterruptedException {\n    // collection to exist\n    String collection = alias + \"_\" + datePart;\n    waitForState(\"waiting for collections to be created\", collection,\n        (liveNodes, collectionState) -> {\n          if (collectionState == null) {\n            // per predicate javadoc, this is what we get if the collection doesn't exist at all.\n            return false;\n          }\n          Collection<Slice> activeSlices = collectionState.getActiveSlices();\n          int size = activeSlices.size();\n          return size == slices;\n        });\n    // and alias to be aware of collection\n    long start = System.nanoTime(); // mumble mumble precommit mumble mumble...\n    while (!cluster.getSolrClient().getZkStateReader().getAliases().getCollectionAliasListMap().get(alias).contains(collection)) {\n      if (NANOSECONDS.toSeconds(System.nanoTime() - start) > 10) {\n        fail(\"took over 10 seconds after collection creation to update aliases\");\n      } else {\n        Thread.sleep(500);\n      }\n    }\n  }\n\n","sourceOld":"  private void waitCol(final String datePart, int slices) {\n    waitForState(\"waiting for collections to be created\",alias + \"_\" + datePart,\n        (liveNodes, collectionState) -> collectionState.getActiveSlices().size() == slices);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6","date":1547236077,"type":5,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#waitCol(int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#waitCol(String,int).mjava","sourceNew":"  private void waitCol(int slices, String collection) {\n    waitForState(\"waiting for collections to be created\", collection,\n        (liveNodes, collectionState) -> {\n          if (collectionState == null) {\n            // per predicate javadoc, this is what we get if the collection doesn't exist at all.\n            return false;\n          }\n          Collection<Slice> activeSlices = collectionState.getActiveSlices();\n          int size = activeSlices.size();\n          return size == slices;\n        });\n  }\n\n","sourceOld":"  private void waitCol(final String datePart, int slices) throws InterruptedException {\n    // collection to exist\n    String collection = alias + \"_\" + datePart;\n    waitForState(\"waiting for collections to be created\", collection,\n        (liveNodes, collectionState) -> {\n          if (collectionState == null) {\n            // per predicate javadoc, this is what we get if the collection doesn't exist at all.\n            return false;\n          }\n          Collection<Slice> activeSlices = collectionState.getActiveSlices();\n          int size = activeSlices.size();\n          return size == slices;\n        });\n    // and alias to be aware of collection\n    long start = System.nanoTime(); // mumble mumble precommit mumble mumble...\n    while (!cluster.getSolrClient().getZkStateReader().getAliases().getCollectionAliasListMap().get(alias).contains(collection)) {\n      if (NANOSECONDS.toSeconds(System.nanoTime() - start) > 10) {\n        fail(\"took over 10 seconds after collection creation to update aliases\");\n      } else {\n        Thread.sleep(500);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6","date":1547236077,"type":6,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#waitColAndAlias(String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#waitCol(String,int).mjava","sourceNew":"  private void waitColAndAlias(final String datePart, int slices, String alias) throws InterruptedException {\n    // collection to exist\n    String collection = alias + \"_\" + datePart;\n    waitCol(slices, collection);\n    // and alias to be aware of collection\n    long start = System.nanoTime(); // mumble mumble precommit mumble mumble...\n    while (!haveCollection(alias, collection)) {\n      if (NANOSECONDS.toSeconds(System.nanoTime() - start) > 10) {\n        fail(\"took over 10 seconds after collection creation to update aliases\");\n      } else {\n        Thread.sleep(500);\n      }\n    }\n  }\n\n","sourceOld":"  private void waitCol(final String datePart, int slices) throws InterruptedException {\n    // collection to exist\n    String collection = alias + \"_\" + datePart;\n    waitForState(\"waiting for collections to be created\", collection,\n        (liveNodes, collectionState) -> {\n          if (collectionState == null) {\n            // per predicate javadoc, this is what we get if the collection doesn't exist at all.\n            return false;\n          }\n          Collection<Slice> activeSlices = collectionState.getActiveSlices();\n          int size = activeSlices.size();\n          return size == slices;\n        });\n    // and alias to be aware of collection\n    long start = System.nanoTime(); // mumble mumble precommit mumble mumble...\n    while (!cluster.getSolrClient().getZkStateReader().getAliases().getCollectionAliasListMap().get(alias).contains(collection)) {\n      if (NANOSECONDS.toSeconds(System.nanoTime() - start) > 10) {\n        fail(\"took over 10 seconds after collection creation to update aliases\");\n      } else {\n        Thread.sleep(500);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60b45f127b5537b5bf62181784ef28b52f4b6a08"],"849083f8095b1ffaff05a66e0b1e024617b9968d":["60b45f127b5537b5bf62181784ef28b52f4b6a08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60b45f127b5537b5bf62181784ef28b52f4b6a08":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6":["849083f8095b1ffaff05a66e0b1e024617b9968d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60b45f127b5537b5bf62181784ef28b52f4b6a08"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","60b45f127b5537b5bf62181784ef28b52f4b6a08","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"849083f8095b1ffaff05a66e0b1e024617b9968d":["11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6"],"60b45f127b5537b5bf62181784ef28b52f4b6a08":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","849083f8095b1ffaff05a66e0b1e024617b9968d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}