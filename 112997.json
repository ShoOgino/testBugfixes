{"path":"src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","commits":[{"id":"44f497c313977be641ddf24aab74b30e6de834d8","date":1156361697,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"/dev/null","sourceNew":"  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48f9527d950de8054d6fd72b138e94bc70fd63b4","date":1158101406,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","sourceNew":"  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    \n  }\n\n","sourceOld":"  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","sourceNew":"  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    \n  }\n\n","sourceOld":"  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44f497c313977be641ddf24aab74b30e6de834d8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["48f9527d950de8054d6fd72b138e94bc70fd63b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"48f9527d950de8054d6fd72b138e94bc70fd63b4":["44f497c313977be641ddf24aab74b30e6de834d8"]},"commit2Childs":{"44f497c313977be641ddf24aab74b30e6de834d8":["48f9527d950de8054d6fd72b138e94bc70fd63b4"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["44f497c313977be641ddf24aab74b30e6de834d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"48f9527d950de8054d6fd72b138e94bc70fd63b4":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}