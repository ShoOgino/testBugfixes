{"path":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    Collections.sort(allFields);\n    final int numAllFields = allFields.size();\n\n    // TODO: allow Lucene user to customize this consumer:\n    final FormatPostingsFieldsConsumer consumer = new FormatPostingsFieldsWriter(state, fieldInfos);\n    /*\n    Current writer chain:\n      FormatPostingsFieldsConsumer\n        -> IMPL: FormatPostingsFieldsWriter\n          -> FormatPostingsTermsConsumer\n            -> IMPL: FormatPostingsTermsWriter\n              -> FormatPostingsDocConsumer\n                -> IMPL: FormatPostingsDocWriter\n                  -> FormatPostingsPositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n\n    consumer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    Collections.sort(allFields);\n    final int numAllFields = allFields.size();\n\n    // TODO: allow Lucene user to customize this consumer:\n    final FormatPostingsFieldsConsumer consumer = new FormatPostingsFieldsWriter(state, fieldInfos);\n    /*\n    Current writer chain:\n      FormatPostingsFieldsConsumer\n        -> IMPL: FormatPostingsFieldsWriter\n          -> FormatPostingsTermsConsumer\n            -> IMPL: FormatPostingsTermsWriter\n              -> FormatPostingsDocConsumer\n                -> IMPL: FormatPostingsDocWriter\n                  -> FormatPostingsPositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n\n    consumer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    Collections.sort(allFields);\n\n    // TODO: allow Lucene user to customize this codec:\n    final FieldsConsumer consumer = state.codec.fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    Collections.sort(allFields);\n    final int numAllFields = allFields.size();\n\n    // TODO: allow Lucene user to customize this consumer:\n    final FormatPostingsFieldsConsumer consumer = new FormatPostingsFieldsWriter(state, fieldInfos);\n    /*\n    Current writer chain:\n      FormatPostingsFieldsConsumer\n        -> IMPL: FormatPostingsFieldsWriter\n          -> FormatPostingsTermsConsumer\n            -> IMPL: FormatPostingsTermsWriter\n              -> FormatPostingsDocConsumer\n                -> IMPL: FormatPostingsDocWriter\n                  -> FormatPostingsPositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n\n    consumer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.numPostings > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n    \n    // sort by field name\n    Collections.sort(allFields);\n\n    // TODO: allow Lucene user to customize this codec:\n    final FieldsConsumer consumer = state.codec.fieldsConsumer(state);\n\n    TermsHash termsHash = null;\n    \n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n      final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n      \n      FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n      fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n\n      // If this field has postings then add them to the\n      // segment\n      fieldWriter.flush(consumer, state);\n\n      TermsHashPerField perField = fieldWriter.termsHashPerField;\n      assert termsHash == null || termsHash == perField.termsHash;\n      termsHash = perField.termsHash;\n      int numPostings = perField.numPostings;\n      perField.reset();\n      perField.shrinkHash(numPostings);\n      fieldWriter.reset();\n    }\n\n    if (termsHash != null) {\n      termsHash.reset();\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    Collections.sort(allFields);\n\n    // TODO: allow Lucene user to customize this codec:\n    final FieldsConsumer consumer = state.codec.fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":["93a847b67820ef974bc434ea8a6f4b1be6905da0","93a847b67820ef974bc434ea8a6f4b1be6905da0","d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.bytesHash.size() > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    Collections.sort(allFields);\n\n    // TODO: allow Lucene user to customize this codec:\n    final FieldsConsumer consumer = state.codec.fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    Collections.sort(allFields);\n\n    // TODO: allow Lucene user to customize this codec:\n    final FieldsConsumer consumer = state.codec.fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","date":1288192616,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.bytesHash.size() > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    // TODO: allow Lucene user to customize this codec:\n    final FieldsConsumer consumer = state.codec.fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.bytesHash.size() > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    Collections.sort(allFields);\n\n    // TODO: allow Lucene user to customize this codec:\n    final FieldsConsumer consumer = state.codec.fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.bytesHash.size() > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    // TODO: allow Lucene user to customize this codec:\n    final FieldsConsumer consumer = state.codec.fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.bytesHash.size() > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    Collections.sort(allFields);\n\n    // TODO: allow Lucene user to customize this codec:\n    final FieldsConsumer consumer = state.codec.fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.bytesHash.size() > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.bytesHash.size() > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    // TODO: allow Lucene user to customize this codec:\n    final FieldsConsumer consumer = state.codec.fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.bytesHash.size() > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.bytesHash.size() > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    // TODO: allow Lucene user to customize this codec:\n    final FieldsConsumer consumer = state.codec.fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69a6d2d525aeab53c867ed26934185e5bb627d0e","date":1296516902,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.bytesHash.size() > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fieldName, state, fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.bytesHash.size() > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.bytesHash.size() > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fieldName, state, fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.bytesHash.size() > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e19ec8535092055101db3ede419e136b73d235ac","date":1302777181,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.bytesHash.size() > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n        }\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fieldName, state, fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.bytesHash.size() > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fieldName, state, fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    TermsHash termsHash = null;\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n      final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n\n      final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n\n      // Aggregate the storePayload as seen by the same\n      // field across multiple threads\n      if (!fieldInfo.omitTermFreqAndPositions) {\n        fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      fieldWriter.flush(fieldInfo.name, consumer, state);\n\n      TermsHashPerField perField = fieldWriter.termsHashPerField;\n      assert termsHash == null || termsHash == perField.termsHash;\n      termsHash = perField.termsHash;\n      int numPostings = perField.bytesHash.size();\n      perField.reset();\n      perField.shrinkHash(numPostings);\n      fieldWriter.reset();\n    }\n\n    if (termsHash != null) {\n      termsHash.reset();\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.bytesHash.size() > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n        }\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fieldName, state, fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.bytesHash.size() > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fieldName, state, fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.bytesHash.size() > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fieldName, state, fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"85a883878c0af761245ab048babc63d099f835f3":["ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["e19ec8535092055101db3ede419e136b73d235ac","6c18273ea5b3974d2f30117f46f1ae416c28f727"],"e19ec8535092055101db3ede419e136b73d235ac":["69a6d2d525aeab53c867ed26934185e5bb627d0e"],"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"a3776dccca01c11e7046323cfad46a3b4a471233":["69a6d2d525aeab53c867ed26934185e5bb627d0e","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["85a883878c0af761245ab048babc63d099f835f3","69a6d2d525aeab53c867ed26934185e5bb627d0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["85a883878c0af761245ab048babc63d099f835f3","69a6d2d525aeab53c867ed26934185e5bb627d0e"],"85a883878c0af761245ab048babc63d099f835f3":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","6c18273ea5b3974d2f30117f46f1ae416c28f727"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e19ec8535092055101db3ede419e136b73d235ac":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["e19ec8535092055101db3ede419e136b73d235ac","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["85a883878c0af761245ab048babc63d099f835f3"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}