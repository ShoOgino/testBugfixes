{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#saveAsyncId(TriggerEvent,ActionContext,String).mjava","commits":[{"id":"5b8cffee0b9c10b78bd087c71485b482217fe84f","date":1505950827,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#saveAsyncId(TriggerEvent,ActionContext,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Saves the given asyncId in ZK as a persistent sequential node.\n   *\n   * @return the path of the newly created node in ZooKeeper\n   */\n  private String saveAsyncId(TriggerEvent event, ActionContext context, String asyncId) throws InterruptedException, KeeperException {\n    String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + context.getSource().getName() + \"/\" + getName();\n    CoreContainer container = context.getCoreContainer();\n    SolrZkClient zkClient = container.getZkController().getZkClient();\n    try {\n      zkClient.makePath(parentPath, new byte[0], CreateMode.PERSISTENT, true);\n    } catch (KeeperException.NodeExistsException e) {\n      // ignore\n    }\n    return zkClient.create(parentPath + \"/\" + PREFIX, Utils.toJSON(Collections.singletonMap(\"requestid\", asyncId)), CreateMode.PERSISTENT_SEQUENTIAL, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#saveAsyncId(TriggerEvent,ActionContext,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Saves the given asyncId in ZK as a persistent sequential node.\n   *\n   * @return the path of the newly created node in ZooKeeper\n   */\n  private String saveAsyncId(TriggerEvent event, ActionContext context, String asyncId) throws InterruptedException, KeeperException {\n    String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + context.getSource().getName() + \"/\" + getName();\n    CoreContainer container = context.getCoreContainer();\n    SolrZkClient zkClient = container.getZkController().getZkClient();\n    try {\n      zkClient.makePath(parentPath, new byte[0], CreateMode.PERSISTENT, true);\n    } catch (KeeperException.NodeExistsException e) {\n      // ignore\n    }\n    return zkClient.create(parentPath + \"/\" + PREFIX, Utils.toJSON(Collections.singletonMap(\"requestid\", asyncId)), CreateMode.PERSISTENT_SEQUENTIAL, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#saveAsyncId(TriggerEvent,ActionContext,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Saves the given asyncId in ZK as a persistent sequential node.\n   *\n   * @return the path of the newly created node in ZooKeeper\n   */\n  private String saveAsyncId(TriggerEvent event, ActionContext context, String asyncId) throws InterruptedException, KeeperException {\n    String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + context.getSource().getName() + \"/\" + getName();\n    CoreContainer container = context.getCoreContainer();\n    SolrZkClient zkClient = container.getZkController().getZkClient();\n    try {\n      zkClient.makePath(parentPath, new byte[0], CreateMode.PERSISTENT, true);\n    } catch (KeeperException.NodeExistsException e) {\n      // ignore\n    }\n    return zkClient.create(parentPath + \"/\" + PREFIX, Utils.toJSON(Collections.singletonMap(\"requestid\", asyncId)), CreateMode.PERSISTENT_SEQUENTIAL, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#saveAsyncId(TriggerEvent,ActionContext,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Saves the given asyncId in ZK as a persistent sequential node.\n   *\n   * @return the path of the newly created node in ZooKeeper\n   */\n  private String saveAsyncId(TriggerEvent event, ActionContext context, String asyncId) throws InterruptedException, KeeperException {\n    String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + context.getSource().getName() + \"/\" + getName();\n    CoreContainer container = context.getCoreContainer();\n    SolrZkClient zkClient = container.getZkController().getZkClient();\n    try {\n      zkClient.makePath(parentPath, new byte[0], CreateMode.PERSISTENT, true);\n    } catch (KeeperException.NodeExistsException e) {\n      // ignore\n    }\n    return zkClient.create(parentPath + \"/\" + PREFIX, Utils.toJSON(Collections.singletonMap(\"requestid\", asyncId)), CreateMode.PERSISTENT_SEQUENTIAL, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8cffee0b9c10b78bd087c71485b482217fe84f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","5b8cffee0b9c10b78bd087c71485b482217fe84f","560c18d71dad43d675158783c3840f8c80d6d39c"],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}