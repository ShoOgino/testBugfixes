{"path":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#checkSchema(String).mjava","commits":[{"id":"520d7467475e194bd1143ba662a0717e6345137f","date":1496984366,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#checkSchema(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/JsonValidatorTest#checkSchema(String).mjava","sourceNew":"  private void checkSchema(String name) {\n    ValidatingJsonMap spec = Utils.getSpec(name).getSpec();\n    Map commands = (Map) spec.get(\"commands\");\n    for (Object o : commands.entrySet()) {\n      Map.Entry cmd = (Map.Entry) o;\n      try {\n        JsonSchemaValidator validator = new JsonSchemaValidator((Map) cmd.getValue());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Error in command  \" + cmd.getKey() + \" in schema \" + name, e);\n      }\n    }\n  }\n\n","sourceOld":"  private void checkSchema(String name) {\n    ValidatingJsonMap spec = Utils.getSpec(name).getSpec();\n    Map commands = (Map) spec.get(\"commands\");\n    for (Object o : commands.entrySet()) {\n      Map.Entry cmd = (Map.Entry) o;\n      try {\n        JsonSchemaValidator validator = new JsonSchemaValidator((Map) cmd.getValue());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Error in command  \" + cmd.getKey() + \" in schema \" + name, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#checkSchema(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/JsonValidatorTest#checkSchema(String).mjava","sourceNew":"  private void checkSchema(String name) {\n    ValidatingJsonMap spec = Utils.getSpec(name).getSpec();\n    Map commands = (Map) spec.get(\"commands\");\n    for (Object o : commands.entrySet()) {\n      Map.Entry cmd = (Map.Entry) o;\n      try {\n        JsonSchemaValidator validator = new JsonSchemaValidator((Map) cmd.getValue());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Error in command  \" + cmd.getKey() + \" in schema \" + name, e);\n      }\n    }\n  }\n\n","sourceOld":"  private void checkSchema(String name) {\n    ValidatingJsonMap spec = ApiBag.getSpec(name).getSpec();\n    Map commands = (Map) spec.get(\"commands\");\n    for (Object o : commands.entrySet()) {\n      Map.Entry cmd = (Map.Entry) o;\n      try {\n        JsonSchemaValidator validator = new JsonSchemaValidator((Map) cmd.getValue());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Error in command  \" + cmd.getKey() + \" in schema \" + name, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#checkSchema(String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkSchema(String name) {\n    ValidatingJsonMap spec = Utils.getSpec(name).getSpec();\n    Map commands = (Map) spec.get(\"commands\");\n    for (Object o : commands.entrySet()) {\n      Map.Entry cmd = (Map.Entry) o;\n      try {\n        JsonSchemaValidator validator = new JsonSchemaValidator((Map) cmd.getValue());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Error in command  \" + cmd.getKey() + \" in schema \" + name, e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#checkSchema(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#checkSchema(String).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  private void checkSchema(String name) {\n    ValidatingJsonMap spec = Utils.getSpec(name).getSpec();\n    Map commands = (Map) spec.get(\"commands\");\n    for (Object o : commands.entrySet()) {\n      Map.Entry cmd = (Map.Entry) o;\n      try {\n        JsonSchemaValidator validator = new JsonSchemaValidator((Map) cmd.getValue());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Error in command  \" + cmd.getKey() + \" in schema \" + name, e);\n      }\n    }\n  }\n\n","sourceOld":"  private void checkSchema(String name) {\n    ValidatingJsonMap spec = Utils.getSpec(name).getSpec();\n    Map commands = (Map) spec.get(\"commands\");\n    for (Object o : commands.entrySet()) {\n      Map.Entry cmd = (Map.Entry) o;\n      try {\n        JsonSchemaValidator validator = new JsonSchemaValidator((Map) cmd.getValue());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Error in command  \" + cmd.getKey() + \" in schema \" + name, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#checkSchema(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#checkSchema(String).mjava","sourceNew":"  private void checkSchema(String name) {\n    ValidatingJsonMap spec = Utils.getSpec(name).getSpec();\n    Map commands = (Map) spec.get(\"commands\");\n    for (Object o : commands.entrySet()) {\n      Map.Entry cmd = (Map.Entry) o;\n      try {\n        JsonSchemaValidator validator = new JsonSchemaValidator((Map) cmd.getValue());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Error in command  \" + cmd.getKey() + \" in schema \" + name, e);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  private void checkSchema(String name) {\n    ValidatingJsonMap spec = Utils.getSpec(name).getSpec();\n    Map commands = (Map) spec.get(\"commands\");\n    for (Object o : commands.entrySet()) {\n      Map.Entry cmd = (Map.Entry) o;\n      try {\n        JsonSchemaValidator validator = new JsonSchemaValidator((Map) cmd.getValue());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Error in command  \" + cmd.getKey() + \" in schema \" + name, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#checkSchema(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#checkSchema(String).mjava","sourceNew":"  private void checkSchema(String name) {\n    ValidatingJsonMap spec = Utils.getSpec(name).getSpec();\n    @SuppressWarnings({\"rawtypes\"})\n    Map commands = (Map) spec.get(\"commands\");\n    for (Object o : commands.entrySet()) {\n      @SuppressWarnings({\"rawtypes\"})\n      Map.Entry cmd = (Map.Entry) o;\n      try {\n        JsonSchemaValidator validator = new JsonSchemaValidator((Map) cmd.getValue());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Error in command  \" + cmd.getKey() + \" in schema \" + name, e);\n      }\n    }\n  }\n\n","sourceOld":"  private void checkSchema(String name) {\n    ValidatingJsonMap spec = Utils.getSpec(name).getSpec();\n    Map commands = (Map) spec.get(\"commands\");\n    for (Object o : commands.entrySet()) {\n      Map.Entry cmd = (Map.Entry) o;\n      try {\n        JsonSchemaValidator validator = new JsonSchemaValidator((Map) cmd.getValue());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Error in command  \" + cmd.getKey() + \" in schema \" + name, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"520d7467475e194bd1143ba662a0717e6345137f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","520d7467475e194bd1143ba662a0717e6345137f"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","520d7467475e194bd1143ba662a0717e6345137f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["520d7467475e194bd1143ba662a0717e6345137f","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["9ba1b632c041956c93c41aa1143d16a567014891"],"520d7467475e194bd1143ba662a0717e6345137f":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}