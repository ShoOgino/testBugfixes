{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","sourceNew":"  @Override\n  protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n    if (VERBOSE) {\n      System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n    }\n    \n    // only print iteration info if the user requested more than one iterations\n    final boolean verbose = VERBOSE && TEST_ITER > 1;\n    \n    final int currentIter[] = new int[1];\n    arg1.addListener(new RunListener() {\n      @Override\n      public void testFailure(Failure failure) throws Exception {\n        if (verbose) {\n          System.out.println(\"\\nNOTE: iteration \" + currentIter[0] + \" failed! \");\n        }\n      }\n    });\n    for (int i = 0; i < TEST_ITER; i++) {\n      currentIter[0] = i;\n      if (verbose) {\n        System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n      }\n      super.runChild(arg0, arg1);\n      if (LuceneTestCase.testsFailed) {\n        if (i >= TEST_ITER_MIN - 1) { // XXX is this still off-by-one?\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n    if (VERBOSE) {\n      System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n    }\n    \n    // only print iteration info if the user requested more than one iterations\n    final boolean verbose = VERBOSE && TEST_ITER > 1;\n    \n    final int currentIter[] = new int[1];\n    arg1.addListener(new RunListener() {\n      @Override\n      public void testFailure(Failure failure) throws Exception {\n        if (verbose) {\n          System.out.println(\"\\nNOTE: iteration \" + currentIter[0] + \" failed! \");\n        }\n      }\n    });\n    for (int i = 0; i < TEST_ITER; i++) {\n      currentIter[0] = i;\n      if (verbose) {\n        System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n      }\n      super.runChild(arg0, arg1);\n      if (LuceneTestCase.testsFailed) {\n        if (i >= TEST_ITER_MIN - 1) { // XXX is this still off-by-one?\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n    if (VERBOSE) {\n      System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n    }\n    \n    // only print iteration info if the user requested more than one iterations\n    final boolean verbose = VERBOSE && TEST_ITER > 1;\n    \n    final int currentIter[] = new int[1];\n    arg1.addListener(new RunListener() {\n      @Override\n      public void testFailure(Failure failure) throws Exception {\n        if (verbose) {\n          System.out.println(\"\\nNOTE: iteration \" + currentIter[0] + \" failed! \");\n        }\n      }\n    });\n    for (int i = 0; i < TEST_ITER; i++) {\n      currentIter[0] = i;\n      if (verbose) {\n        System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n      }\n      super.runChild(arg0, arg1);\n      if (LuceneTestCase.testsFailed) {\n        if (i >= TEST_ITER_MIN - 1) { // XXX is this still off-by-one?\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}