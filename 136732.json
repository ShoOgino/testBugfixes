{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","sourceNew":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // Make sure it's only BooleanScorer that calls us:\n    assert firstDocID == -1;\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer(weight);\n\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & PROHIBITED_MASK) == 0) {\n\n          // TODO: re-enable this if BQ ever sends us required\n          // clauses\n          //&& (current.bits & requiredMask) == requiredMask) {\n          \n          // TODO: can we remove this?  \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // Make sure it's only BooleanScorer that calls us:\n    assert firstDocID == -1;\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer(weight);\n\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & PROHIBITED_MASK) == 0) {\n\n          // TODO: re-enable this if BQ ever sends us required\n          // clauses\n          //&& (current.bits & requiredMask) == requiredMask) {\n          \n          // TODO: can we remove this?  \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9077d5b75341449d301fabe30aef8754e77bc19","date":1347642993,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","sourceNew":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // Make sure it's only BooleanScorer that calls us:\n    assert firstDocID == -1;\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer(weight);\n\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & PROHIBITED_MASK) == 0) {\n\n          // TODO: re-enable this if BQ ever sends us required\n          // clauses\n          //&& (current.bits & requiredMask) == requiredMask) {\n          \n          // NOTE: Lucene always passes max =\n          // Integer.MAX_VALUE today, because we never embed\n          // a BooleanScorer inside another (even though\n          // that should work)... but in theory an outside\n          // app could pass a different max so we must check\n          // it:\n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // Make sure it's only BooleanScorer that calls us:\n    assert firstDocID == -1;\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer(weight);\n\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & PROHIBITED_MASK) == 0) {\n\n          // TODO: re-enable this if BQ ever sends us required\n          // clauses\n          //&& (current.bits & requiredMask) == requiredMask) {\n          \n          // TODO: can we remove this?  \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","sourceNew":"  @Override\n  public boolean score(Collector collector, int max) throws IOException {\n\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer(weight);\n\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & PROHIBITED_MASK) == 0) {\n\n          // TODO: re-enable this if BQ ever sends us required\n          // clauses\n          //&& (current.bits & requiredMask) == requiredMask) {\n          \n          // NOTE: Lucene always passes max =\n          // Integer.MAX_VALUE today, because we never embed\n          // a BooleanScorer inside another (even though\n          // that should work)... but in theory an outside\n          // app could pass a different max so we must check\n          // it:\n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        if (sub.more) {\n          sub.more = sub.scorer.score(sub.collector, end);\n          more |= sub.more;\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // Make sure it's only BooleanScorer that calls us:\n    assert firstDocID == -1;\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer(weight);\n\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & PROHIBITED_MASK) == 0) {\n\n          // TODO: re-enable this if BQ ever sends us required\n          // clauses\n          //&& (current.bits & requiredMask) == requiredMask) {\n          \n          // NOTE: Lucene always passes max =\n          // Integer.MAX_VALUE today, because we never embed\n          // a BooleanScorer inside another (even though\n          // that should work)... but in theory an outside\n          // app could pass a different max so we must check\n          // it:\n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","sourceNew":"  @Override\n  public boolean score(Collector collector, int max) throws IOException {\n\n    boolean more;\n    Bucket tmp;\n    FakeScorer fs = new FakeScorer();\n\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(fs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & PROHIBITED_MASK) == 0) {\n\n          // TODO: re-enable this if BQ ever sends us required\n          // clauses\n          //&& (current.bits & requiredMask) == requiredMask) {\n          \n          // NOTE: Lucene always passes max =\n          // Integer.MAX_VALUE today, because we never embed\n          // a BooleanScorer inside another (even though\n          // that should work)... but in theory an outside\n          // app could pass a different max so we must check\n          // it:\n          if (current.doc >= max) {\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            fs.score = (float) (current.score * coordFactors[current.coord]);\n            fs.doc = current.doc;\n            fs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        if (sub.more) {\n          sub.more = sub.scorer.score(sub.collector, end);\n          more |= sub.more;\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // Make sure it's only BooleanScorer that calls us:\n    assert firstDocID == -1;\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer(weight);\n\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & PROHIBITED_MASK) == 0) {\n\n          // TODO: re-enable this if BQ ever sends us required\n          // clauses\n          //&& (current.bits & requiredMask) == requiredMask) {\n          \n          // NOTE: Lucene always passes max =\n          // Integer.MAX_VALUE today, because we never embed\n          // a BooleanScorer inside another (even though\n          // that should work)... but in theory an outside\n          // app could pass a different max so we must check\n          // it:\n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["b9077d5b75341449d301fabe30aef8754e77bc19"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b9077d5b75341449d301fabe30aef8754e77bc19":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["b9077d5b75341449d301fabe30aef8754e77bc19","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acf00221f44c5f08ccea014f2492b53af15ecd66"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b9077d5b75341449d301fabe30aef8754e77bc19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b9077d5b75341449d301fabe30aef8754e77bc19":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}