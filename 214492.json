{"path":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,ZkStateReader,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, SolrCloudManager cloudManager,\n                                                              List<String> nodesList) throws IOException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cloudManager,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, ZkStateReader zkStateReader,\n                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    SolrClientDataProvider clientDataProvider = null;\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = zkStateReader.getAutoScalingConfig();\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          clientDataProvider,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (clientDataProvider != null) log.trace(\"CLUSTER_DATA_PROVIDER: \" + Utils.toJSONString(clientDataProvider));\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, SolrCloudManager cloudManager,\n                                                              List<String> nodesList) throws IOException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cloudManager,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting replica locations\", e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, SolrCloudManager cloudManager,\n                                                              List<String> nodesList) throws IOException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cloudManager,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["042da0877b8e28fd372a8ed80d11c4506a466ad7","042da0877b8e28fd372a8ed80d11c4506a466ad7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, SolrCloudManager cloudManager,\n                                                              List<String> nodesList) throws IOException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cloudManager,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting replica locations\", e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, SolrCloudManager cloudManager,\n                                                              List<String> nodesList) throws IOException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cloudManager,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting replica locations\", e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, SolrCloudManager cloudManager,\n                                                              List<String> nodesList) throws IOException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cloudManager,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting replica locations\", e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, SolrCloudManager cloudManager,\n                                                              List<String> nodesList) throws IOException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cloudManager,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting replica locations\", e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}