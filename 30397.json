{"path":"src/java/org/apache/solr/core/RunExecutableListener#exec(String).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/RunExecutableListener#exec(String).mjava","pathOld":"/dev/null","sourceNew":"  protected int exec(String callback) {\n    int ret = 0;\n\n    try {\n      boolean doLog = log.isLoggable(Level.FINE);\n      if (doLog) {\n        log.fine(\"About to exec \" + cmd[0]);\n      }\n      Process proc = Runtime.getRuntime().exec(cmd, envp ,dir);\n\n      if (wait) {\n        try {\n          ret = proc.waitFor();\n        } catch (InterruptedException e) {\n          SolrException.log(log,e);\n        }\n      }\n\n      if (wait && doLog) {\n        log.fine(\"Executable \" + cmd[0] + \" returned \" + ret);\n      }\n\n    } catch (IOException e) {\n      // don't throw exception, just log it...\n      SolrException.log(log,e);\n    }\n\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/RunExecutableListener#exec(String).mjava","pathOld":"src/java/org/apache/solr/core/RunExecutableListener#exec(String).mjava","sourceNew":"  protected int exec(String callback) {\n    int ret = 0;\n\n    try {\n      boolean doLog = log.isDebugEnabled();\n      if (doLog) {\n        log.debug(\"About to exec \" + cmd[0]);\n      }\n      Process proc = Runtime.getRuntime().exec(cmd, envp ,dir);\n\n      if (wait) {\n        try {\n          ret = proc.waitFor();\n        } catch (InterruptedException e) {\n          SolrException.log(log,e);\n        }\n      }\n\n      if (wait && doLog) {\n        log.debug(\"Executable \" + cmd[0] + \" returned \" + ret);\n      }\n\n    } catch (IOException e) {\n      // don't throw exception, just log it...\n      SolrException.log(log,e);\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  protected int exec(String callback) {\n    int ret = 0;\n\n    try {\n      boolean doLog = log.isLoggable(Level.FINE);\n      if (doLog) {\n        log.fine(\"About to exec \" + cmd[0]);\n      }\n      Process proc = Runtime.getRuntime().exec(cmd, envp ,dir);\n\n      if (wait) {\n        try {\n          ret = proc.waitFor();\n        } catch (InterruptedException e) {\n          SolrException.log(log,e);\n        }\n      }\n\n      if (wait && doLog) {\n        log.fine(\"Executable \" + cmd[0] + \" returned \" + ret);\n      }\n\n    } catch (IOException e) {\n      // don't throw exception, just log it...\n      SolrException.log(log,e);\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca2ab6c7eac01d4e14b7aa0e8f2668e6226790c6","date":1233862732,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/RunExecutableListener#exec(String).mjava","pathOld":"src/java/org/apache/solr/core/RunExecutableListener#exec(String).mjava","sourceNew":"  /**\n   * External executable listener.\n   * \n   * @param callback Unused (As of solr 1.4-dev)\n   * @return Error code indicating if the command has executed successfully. <br />\n   *  0 , indicates normal termination.<br />\n   *  non-zero , otherwise.\n   */\n  protected int exec(String callback) {\n    int ret = 0;\n\n    try {\n      boolean doLog = log.isDebugEnabled();\n      if (doLog) {\n        log.debug(\"About to exec \" + cmd[0]);\n      }\n      Process proc = Runtime.getRuntime().exec(cmd, envp ,dir);\n\n      if (wait) {\n        try {\n          ret = proc.waitFor();\n        } catch (InterruptedException e) {\n          SolrException.log(log,e);\n          ret = INVALID_PROCESS_RETURN_CODE;\n        }\n      }\n\n      if (wait && doLog) {\n        log.debug(\"Executable \" + cmd[0] + \" returned \" + ret);\n      }\n\n    } catch (IOException e) {\n      // don't throw exception, just log it...\n      SolrException.log(log,e);\n      ret = INVALID_PROCESS_RETURN_CODE;\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  protected int exec(String callback) {\n    int ret = 0;\n\n    try {\n      boolean doLog = log.isDebugEnabled();\n      if (doLog) {\n        log.debug(\"About to exec \" + cmd[0]);\n      }\n      Process proc = Runtime.getRuntime().exec(cmd, envp ,dir);\n\n      if (wait) {\n        try {\n          ret = proc.waitFor();\n        } catch (InterruptedException e) {\n          SolrException.log(log,e);\n        }\n      }\n\n      if (wait && doLog) {\n        log.debug(\"Executable \" + cmd[0] + \" returned \" + ret);\n      }\n\n    } catch (IOException e) {\n      // don't throw exception, just log it...\n      SolrException.log(log,e);\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/RunExecutableListener#exec(String).mjava","pathOld":"src/java/org/apache/solr/core/RunExecutableListener#exec(String).mjava","sourceNew":"  /**\n   * External executable listener.\n   * \n   * @param callback Unused (As of solr 1.4-dev)\n   * @return Error code indicating if the command has executed successfully. <br />\n   *  0 , indicates normal termination.<br />\n   *  non-zero , otherwise.\n   */\n  protected int exec(String callback) {\n    int ret = 0;\n\n    try {\n      boolean doLog = log.isDebugEnabled();\n      if (doLog) {\n        log.debug(\"About to exec \" + cmd[0]);\n      }\n      Process proc = Runtime.getRuntime().exec(cmd, envp ,dir);\n\n      if (wait) {\n        try {\n          ret = proc.waitFor();\n        } catch (InterruptedException e) {\n          SolrException.log(log,e);\n          ret = INVALID_PROCESS_RETURN_CODE;\n        }\n      }\n\n      if (wait && doLog) {\n        log.debug(\"Executable \" + cmd[0] + \" returned \" + ret);\n      }\n\n    } catch (IOException e) {\n      // don't throw exception, just log it...\n      SolrException.log(log,e);\n      ret = INVALID_PROCESS_RETURN_CODE;\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  /**\n   * External executable listener.\n   * \n   * @param callback Unused (As of solr 1.4-dev)\n   * @return Error code indicating if the command has executed successfully. <br />\n   *  0 , indicates normal termination.<br />\n   *  non-zero , otherwise.\n   */\n  protected int exec(String callback) {\n    int ret = 0;\n\n    try {\n      boolean doLog = log.isDebugEnabled();\n      if (doLog) {\n        log.debug(\"About to exec \" + cmd[0]);\n      }\n      Process proc = Runtime.getRuntime().exec(cmd, envp ,dir);\n\n      if (wait) {\n        try {\n          ret = proc.waitFor();\n        } catch (InterruptedException e) {\n          SolrException.log(log,e);\n          ret = INVALID_PROCESS_RETURN_CODE;\n        }\n      }\n\n      if (wait && doLog) {\n        log.debug(\"Executable \" + cmd[0] + \" returned \" + ret);\n      }\n\n    } catch (IOException e) {\n      // don't throw exception, just log it...\n      SolrException.log(log,e);\n      ret = INVALID_PROCESS_RETURN_CODE;\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["ca2ab6c7eac01d4e14b7aa0e8f2668e6226790c6"],"ca2ab6c7eac01d4e14b7aa0e8f2668e6226790c6":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"ca2ab6c7eac01d4e14b7aa0e8f2668e6226790c6":["ad94625fb8d088209f46650c8097196fec67f00c"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["ca2ab6c7eac01d4e14b7aa0e8f2668e6226790c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}