{"path":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#autodetect(HttpServletRequest,ArrayList[ContentStream],FastInputStream).mjava","commits":[{"id":"0d17ec5164debc23076db7fd11d0331f201583b5","date":1426658173,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#autodetect(HttpServletRequest,ArrayList[ContentStream],FastInputStream).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the parameter map if a different content type was auto-detected */\n  private static SolrParams autodetect(HttpServletRequest req, ArrayList<ContentStream> streams, FastInputStream in) throws IOException {\n    String detectedContentType = null;\n    boolean shouldClose = true;\n\n    try {\n      in.peek();  // should cause some bytes to be read\n      byte[] arr = in.getBuffer();\n      int pos = in.getPositionInBuffer();\n      int end = in.getEndInBuffer();\n\n      for (int i = pos; i < end - 1; i++) {  // we do \"end-1\" because we check \"arr[i+1]\" sometimes in the loop body\n        int ch = arr[i];\n        boolean isWhitespace = ((WS_MASK >> ch) & 0x01) != 0 && (ch <= ' ' || ch == 0xa0);\n        if (!isWhitespace) {\n          // first non-whitespace chars\n          if (ch == '#'                         // single line comment\n              || (ch == '/' && (arr[i + 1] == '/' || arr[i + 1] == '*'))  // single line or multi-line comment\n              || (ch == '{' || ch == '[')       // start of JSON object\n              )\n          {\n            detectedContentType = \"application/json\";\n          }\n          if (ch == '<') {\n            detectedContentType = \"text/xml\";\n          }\n          break;\n        }\n      }\n\n      if (detectedContentType == null) {\n        shouldClose = false;\n        return null;\n      }\n\n      Long size = null;\n      String v = req.getHeader(\"Content-Length\");\n      if (v != null) {\n        size = Long.valueOf(v);\n      }\n      streams.add(new InputStreamContentStream(in, detectedContentType, size));\n\n\n      final Map<String, String[]> map = new HashMap<>();\n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n\n      return new MultiMapSolrParams(map);\n\n    } catch (IOException ioe) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n    } catch (IllegalStateException ise) {\n      throw (SolrException) FormDataRequestParser.getParameterIncompatibilityException().initCause(ise);\n    } finally {\n      if (shouldClose) {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#autodetect(HttpServletRequest,ArrayList[ContentStream],FastInputStream).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the parameter map if a different content type was auto-detected */\n  private static SolrParams autodetect(HttpServletRequest req, ArrayList<ContentStream> streams, FastInputStream in) throws IOException {\n    String detectedContentType = null;\n    boolean shouldClose = true;\n\n    try {\n      in.peek();  // should cause some bytes to be read\n      byte[] arr = in.getBuffer();\n      int pos = in.getPositionInBuffer();\n      int end = in.getEndInBuffer();\n\n      for (int i = pos; i < end - 1; i++) {  // we do \"end-1\" because we check \"arr[i+1]\" sometimes in the loop body\n        int ch = arr[i];\n        boolean isWhitespace = ((WS_MASK >> ch) & 0x01) != 0 && (ch <= ' ' || ch == 0xa0);\n        if (!isWhitespace) {\n          // first non-whitespace chars\n          if (ch == '#'                         // single line comment\n              || (ch == '/' && (arr[i + 1] == '/' || arr[i + 1] == '*'))  // single line or multi-line comment\n              || (ch == '{' || ch == '[')       // start of JSON object\n              )\n          {\n            detectedContentType = \"application/json\";\n          }\n          if (ch == '<') {\n            detectedContentType = \"text/xml\";\n          }\n          break;\n        }\n      }\n\n      if (detectedContentType == null) {\n        shouldClose = false;\n        return null;\n      }\n\n      Long size = null;\n      String v = req.getHeader(\"Content-Length\");\n      if (v != null) {\n        size = Long.valueOf(v);\n      }\n      streams.add(new InputStreamContentStream(in, detectedContentType, size));\n\n\n      final Map<String, String[]> map = new HashMap<>();\n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n\n      return new MultiMapSolrParams(map);\n\n    } catch (IOException ioe) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n    } catch (IllegalStateException ise) {\n      throw (SolrException) FormDataRequestParser.getParameterIncompatibilityException().initCause(ise);\n    } finally {\n      if (shouldClose) {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0d17ec5164debc23076db7fd11d0331f201583b5"],"0d17ec5164debc23076db7fd11d0331f201583b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d17ec5164debc23076db7fd11d0331f201583b5"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0d17ec5164debc23076db7fd11d0331f201583b5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d17ec5164debc23076db7fd11d0331f201583b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}